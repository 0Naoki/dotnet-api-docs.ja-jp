<Type Name="AceEnumerator" FullName="System.Security.AccessControl.AceEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7a8e9039c23d2f0f3c47000c69c62c5dfce609f6" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AceEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AceEnumerator extends System.Object implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.AceEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AceEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class AceEnumerator sealed : System::Collections::IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Security.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="8dfff-101">アクセス制御リスト (ACL) のアクセス制御エントリ (ACE) を反復処理する機能を提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8dfff-101">Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL).</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.GenericAce Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.AccessControl.GenericAce Current" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.AceEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As GenericAce" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::GenericAce ^ Current { System::Security::AccessControl::GenericAce ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.GenericAce</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8dfff-102">
            <see cref="T:System.Security.AccessControl.GenericAce" /> コレクション内の現在の要素を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8dfff-102">Gets the current element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span>
          </span>
          <span data-ttu-id="8dfff-103">このプロパティでは、型フレンドリなバージョンのオブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8dfff-103">This property gets the type-friendly version of the object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8dfff-104">
            <see cref="T:System.Security.AccessControl.GenericAce" /> コレクション内の現在の要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8dfff-104">The current element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.AceEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8dfff-105">列挙子を <see cref="T:System.Security.AccessControl.GenericAce" /> コレクションの次の要素に進めます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8dfff-105">Advances the enumerator to the next element of the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8dfff-106">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8dfff-106">
              <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8dfff-107">列挙子を作成した後、または呼び出しの後に、<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>メソッド、列挙子がコレクション、および最初の呼び出しの最初の要素の前に位置付けられます、<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>メソッドが、列挙子をコレクションの最初の要素の上に移動します。</span><span class="sxs-lookup"><span data-stu-id="8dfff-107">After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, an enumerator is positioned before the first element of the collection, and the first call to the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method moves the enumerator over the first element of the collection.</span></span>  
  
 <span data-ttu-id="8dfff-108">コレクションの末尾が渡された、後続の呼び出し後<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>返す`false`まで<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="8dfff-108">After the end of the collection is passed, subsequent calls to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> return `false` until <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="8dfff-109">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="8dfff-109">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="8dfff-110">列挙子は回復不可能と、次の呼び出しなど、追加すると、変更、または、要素を削除すると変更された場合、このコレクションに<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>または<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="8dfff-110">If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8dfff-111">コレクションは、列挙子の作成後に変更されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8dfff-111">The collection was modified after the enumerator was created.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.AceEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8dfff-112">列挙子を初期位置、つまり <see cref="T:System.Security.AccessControl.GenericAce" /> コレクションの最初の要素の前に設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8dfff-112">Sets the enumerator to its initial position, which is before the first element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8dfff-113">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="8dfff-113">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="8dfff-114">など、追加すると、変更、または削除、要素は、コレクションに加えられた、列挙子は回復不可能と、次への呼び出し、<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>メソッドまたは<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>メソッドがスローされます、 <xref:System.InvalidOperationException></span><span class="sxs-lookup"><span data-stu-id="8dfff-114">If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method or the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method throws an <xref:System.InvalidOperationException></span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8dfff-115">コレクションは、列挙子の作成後に変更されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8dfff-115">The collection was modified after the enumerator was created.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="8dfff-116">すべての呼び出しを<see cref="M:System.Security.AccessControl.AceEnumerator.Reset" />列挙子の同じ状態になる必要があります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8dfff-116">All calls to <see cref="M:System.Security.AccessControl.AceEnumerator.Reset" /> must result in the same state for the enumerator.</span>
            </span>
            <span data-ttu-id="8dfff-117">優先の実装では、最初の要素の前に、コレクションの先頭に、列挙子を移動します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8dfff-117">The preferred implementation is to move the enumerator to the beginning of the collection, before the first element.</span>
            </span>
            <span data-ttu-id="8dfff-118">列挙子が作成されてと整合するコレクションが変更された場合、列挙子を無効に<see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" />と<see cref="P:System.Security.AccessControl.AceEnumerator.Current" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8dfff-118">This invalidates the enumerator if the collection has been modified since the enumerator was created, which is consistent with <see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" /> and <see cref="P:System.Security.AccessControl.AceEnumerator.Current" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8dfff-119">コレクション内の現在の要素を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8dfff-119">Gets the current element in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8dfff-120">コレクション内の現在の要素を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8dfff-120">Returns the current element in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8dfff-121">列挙子を作成した後、または呼び出しの後に、<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>メソッドを呼び出す必要があります、<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>、それ以外の<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="8dfff-121">After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, you must call the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>; otherwise, <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> is undefined.</span></span>  
  
 <span data-ttu-id="8dfff-122"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> または例外をスロー、最後の呼び出し<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>返される`false`コレクションの末尾を示します。</span><span class="sxs-lookup"><span data-stu-id="8dfff-122"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> also throws an exception if the last call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
 <span data-ttu-id="8dfff-123"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> 連続して呼び出すと、列挙子の位置を移動しません<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>されるまで、同じオブジェクトを返す<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>または<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="8dfff-123"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> does not move the position of the enumerator, and consecutive calls to <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> return the same object until either <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="8dfff-124">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="8dfff-124">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="8dfff-125">列挙子は回復不可能ですと、次の呼び出しなど、追加すると、変更、または、要素を削除すると変更された場合、このコレクションに<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>または<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="8dfff-125">If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated, and the next call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="8dfff-126">間で、コレクションが変更された場合<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>と<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>、<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>列挙子が既に無効になっている場合でもに設定されている要素を返します。</span><span class="sxs-lookup"><span data-stu-id="8dfff-126">If the collection is modified between <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> and <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>, <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8dfff-127">コレクションは、列挙子の作成後に変更されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8dfff-127">The collection was modified after the enumerator was created.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>