<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6513e2fd2b79bb4917d07c3fde06b9d25715af8c" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48646230" /></Metadata><TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="5ffdb-101">操作の実行前に十分なメモリ リソースがあることを確認します。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-101">Checks for sufficient memory resources before executing an operation.</span></span> <span data-ttu-id="5ffdb-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="5ffdb-103">このクラスは、高度な開発で使用するものです。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-103">This class is intended for use in advanced development.</span></span>  
  
 <span data-ttu-id="5ffdb-104">インスタンスを作成、<xref:System.Runtime.MemoryFailPoint>クラスは、メモリ ゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-104">Creating an instance of the <xref:System.Runtime.MemoryFailPoint> class creates a memory gate.</span></span> <span data-ttu-id="5ffdb-105">メモリ ゲートは、大量のメモリを必要とするアクティビティを開始する前に、十分なリソースをチェックします。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-105">A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</span></span> <span data-ttu-id="5ffdb-106">チェックに失敗した結果、<xref:System.InsufficientMemoryException>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-106">Failing the check results in an <xref:System.InsufficientMemoryException> exception being thrown.</span></span> <span data-ttu-id="5ffdb-107">この例外は、開始してから、操作を防止し、リソースが不足しているため失敗する可能性を削減します。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-107">This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</span></span> <span data-ttu-id="5ffdb-108">これにより、回避するためにパフォーマンスが低下する、<xref:System.OutOfMemoryException>例外と、コードの任意の場所で例外の不適切な処理を伴う可能性のある状態の破損。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-108">This enables you decrease performance to avoid an <xref:System.OutOfMemoryException> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5ffdb-109">この型は、<xref:System.IDisposable>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="5ffdb-110">型の使用が完了したら、直接的または間接的にそれを破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="5ffdb-111">型の直接 dispose を呼び出してその<xref:System.IDisposable.Dispose%2A>メソッド、 `try` / `catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="5ffdb-112">直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(で C# の場合) または`Using`(Visual Basic) でします。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="5ffdb-113">詳細については、"を使用して、オブジェクトを実装する IDisposable"のセクションを参照してください、<xref:System.IDisposable>インターフェイスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="5ffdb-114">スローすることによって、<xref:System.InsufficientMemoryException>例外、アプリケーションは操作が完了することがない推定値と、アプリケーションの状態が壊れている可能性がありますを部分的に完了した操作の間に区別できます。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-114">By throwing an <xref:System.InsufficientMemoryException> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</span></span> <span data-ttu-id="5ffdb-115">これにより、アプリケーションを現在をアンロードする必要がありますペシミスティック エスカレーション ポリシーの頻度を減らす<xref:System.AppDomain>やプロセスのリサイクルします。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-115">This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <xref:System.AppDomain> or recycling the process.</span></span>  
  
 <span data-ttu-id="5ffdb-116"><xref:System.Runtime.MemoryFailPoint> 十分なメモリと連続する仮想アドレス空間ヒープですべてのガベージ コレクションで使用可能なし、スワップ ファイルのサイズを増やすことができるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-116"><xref:System.Runtime.MemoryFailPoint> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</span></span>  <span data-ttu-id="5ffdb-117"><xref:System.Runtime.MemoryFailPoint> ゲートが呼び出し元の有効期間中にメモリの長期的な可用性に関して一切保証する必要があります常に利用しない、<xref:System.Runtime.MemoryFailPoint.Dispose%2A>リソースに関連付けられていることを確認するメソッド<xref:System.Runtime.MemoryFailPoint>リリースされます。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-117"><xref:System.Runtime.MemoryFailPoint> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method to ensure that resources associated with <xref:System.Runtime.MemoryFailPoint> are released.</span></span>  
  
 <span data-ttu-id="5ffdb-118">メモリ ゲートを使用することを作成する必要があります、<xref:System.Runtime.MemoryFailPoint>オブジェクトし、メモリのメガバイト (MB) の数を指定するを使用する次の操作が必要です。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-118">To use a memory gate, you must create a <xref:System.Runtime.MemoryFailPoint> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</span></span> <span data-ttu-id="5ffdb-119">十分なメモリが使用できない場合、<xref:System.InsufficientMemoryException>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-119">If enough memory is not available, an <xref:System.InsufficientMemoryException> exception is thrown.</span></span>  
  
 <span data-ttu-id="5ffdb-120">コンス トラクターのパラメーターは、正の整数である必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-120">The parameter of the constructor must be a positive integer.</span></span> <span data-ttu-id="5ffdb-121">負の値が、<xref:System.ArgumentOutOfRangeException>例外。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-121">A negative value raises an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 <span data-ttu-id="5ffdb-122"><xref:System.Runtime.MemoryFailPoint> 16 MB の粒度で動作します。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-122"><xref:System.Runtime.MemoryFailPoint> operates at a granularity of 16 MB.</span></span> <span data-ttu-id="5ffdb-123">16 MB より小さい値は 16 MB、として扱われ、その他の値は最大 16 MB の倍数として扱われます。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-123">Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ffdb-124"><xref:System.Runtime.MemoryFailPoint> 破損させる方法でメモリの不足を回避するためにそれ自体を遅延させるアプリケーションを有効にします。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-124"><xref:System.Runtime.MemoryFailPoint> enables an application to slow itself to avoid running out of memory in a corrupting manner.</span></span>  <span data-ttu-id="5ffdb-125">これは、構文のスコープ内で使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-125">It should be used within a lexical scope.</span></span>  <span data-ttu-id="5ffdb-126">次の例では、ワーク キュー内の項目を処理するスレッドを起動します。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-126">The following example launches threads to process items in a work queue.</span></span>  <span data-ttu-id="5ffdb-127">使用して、使用可能なメモリ リソースをチェックする各スレッドが開始される前に<xref:System.Runtime.MemoryFailPoint>します。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-127">Before each thread is launched, the available memory resources are checked using <xref:System.Runtime.MemoryFailPoint>.</span></span>  <span data-ttu-id="5ffdb-128">例外がスローされた場合、メインのメソッドは、次のスレッドを起動する前にメモリがあるまでを待ちます。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-128">If an exception is thrown, the main method waits until memory is available before launching the next thread.</span></span>  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="5ffdb-129">アンマネージ コードを呼び出す。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-129">for calling unmanaged code.</span></span> <span data-ttu-id="5ffdb-130"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="5ffdb-130">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span> <span data-ttu-id="5ffdb-131">セキュリティ アクション。 <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span><span class="sxs-lookup"><span data-stu-id="5ffdb-131">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span></span></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes"><span data-ttu-id="5ffdb-132">必要なメモリ サイズ (単位は MB)。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-132">The required memory size, in megabytes.</span></span> <span data-ttu-id="5ffdb-133">必ず正の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-133">This must be a positive value.</span></span></param>
        <summary><span data-ttu-id="5ffdb-134">正常に実行するために必要なメモリの量を指定して、<see cref="T:System.Runtime.MemoryFailPoint" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-134">Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ffdb-135">作業項目を処理するアプリケーションで使用されるメモリ量を経験的に決定できます。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-135">The amount of memory used by your application to process a work item can be determined empirically.</span></span>  <span data-ttu-id="5ffdb-136">アプリケーションが要求の処理に必要なメモリの量を推定するには、使用を検討して、<xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType>メソッドをおよび作業項目を処理した後メソッドを呼び出すことの前に使用可能なメモリの量を決定します。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-136">To estimate the amount of memory your application needs to process a request, consider using the <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> method to determine the amount of memory available before and after calling the method that processes the work item.</span></span> <span data-ttu-id="5ffdb-137">参照してください、<xref:System.Runtime.MemoryFailPoint>クラスの値を動的に決定するコード例については、`sizeInMegabytes`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-137">See the <xref:System.Runtime.MemoryFailPoint> class for a code example that dynamically determines the value for the `sizeInMegabytes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ffdb-138">次の例では、実行するときに、メソッドが必要とするメモリの量を決定する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-138">The following example demonstrates how to determine the amount of memory a method requires when executing.</span></span> <span data-ttu-id="5ffdb-139">このコード例が示されている例の一部、<xref:System.Runtime.MemoryFailPoint>クラス。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-139">This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.</span></span>  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5ffdb-140">指定したメモリ サイズが負の値です。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-140">The specified memory size is negative.</span></span></exception>
        <exception cref="T:System.InsufficientMemoryException"><span data-ttu-id="5ffdb-141">ゲートによって保護されているコードの実行を開始するためのメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-141">There is insufficient memory to begin execution of the code protected by the gate.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="5ffdb-142">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-142">requires full trust for the immediate caller.</span></span> <span data-ttu-id="5ffdb-143">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-143">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ffdb-144"><see cref="T:System.Runtime.MemoryFailPoint" /> によって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-144">Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ffdb-145"><xref:System.Runtime.MemoryFailPoint.Dispose%2A> を使い終わったら <xref:System.Runtime.MemoryFailPoint> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-145">Call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> when you are finished using the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="5ffdb-146"><xref:System.Runtime.MemoryFailPoint.Dispose%2A> メソッドによって、<xref:System.Runtime.MemoryFailPoint> は使用不可の状態になります。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-146">The <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method leaves the <xref:System.Runtime.MemoryFailPoint> in an unusable state.</span></span> <span data-ttu-id="5ffdb-147">呼び出した後<xref:System.Runtime.MemoryFailPoint>へのすべての参照を解放する必要があります、<xref:System.Runtime.MemoryFailPoint>ガベージ コレクターがメモリをクリアできるようにする、<xref:System.Runtime.MemoryFailPoint>によって占有されていた。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-147">After calling <xref:System.Runtime.MemoryFailPoint>, you must release all references to the <xref:System.Runtime.MemoryFailPoint> so the garbage collector can reclaim the memory that the <xref:System.Runtime.MemoryFailPoint> was occupying.</span></span> <span data-ttu-id="5ffdb-148">詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)します。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-148">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ffdb-149"><xref:System.Runtime.MemoryFailPoint.Dispose%2A> への最後の参照を解放する前に、必ず <xref:System.Runtime.MemoryFailPoint> を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-149">Always call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> before you release your last reference to the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="5ffdb-150">そうしないと、ガベージ コレクターが <xref:System.Runtime.MemoryFailPoint> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-150">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.MemoryFailPoint> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5ffdb-151">ガベージ コレクターが <see cref="T:System.Runtime.MemoryFailPoint" /> を再利用しているときに、リソースが解放され、他のクリーンアップ操作が確実に実行されるようにします。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-151">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.MemoryFailPoint" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ffdb-152">ガベージ コレクター、<xref:System.Runtime.MemoryFailPoint.Finalize%2A>メソッド、現在のオブジェクトが完了する準備ができたときです。</span><span class="sxs-lookup"><span data-stu-id="5ffdb-152">The garbage collector calls the <xref:System.Runtime.MemoryFailPoint.Finalize%2A> method when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>