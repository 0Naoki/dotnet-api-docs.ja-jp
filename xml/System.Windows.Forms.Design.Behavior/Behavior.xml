<Type Name="Behavior" FullName="System.Windows.Forms.Design.Behavior.Behavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7512aba8d12912c3cb5c7a5cbbe8ce361557fd48" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65006212" /></Metadata><TypeSignature Language="C#" Value="public abstract class Behavior" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Behavior extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.Behavior.Behavior" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Behavior" />
  <TypeSignature Language="C++ CLI" Value="public ref class Behavior abstract" />
  <TypeSignature Language="F#" Value="type Behavior = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表す、<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />で管理されているオブジェクト、<see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスは、任意の種類の選択、ドラッグを含む、ユーザー インターフェイスの動作の開発に拡張でき、動作のサイズを変更します。  
  
 詳細については、次を参照してください。[動作サービスの概要](https://msdn.microsoft.com/library/7c60cc41-4324-46b5-b444-b39eda7cb33f)します。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.Design.Behavior.Behavior>型が関連付けられる必要があります、<xref:System.Windows.Forms.Design.Behavior.Glyph>型。 グリフに依存しない動作がサポートされていません。  
  
   
  
## Examples  
 次のコード例がに基づいて、独自のクラスを作成する方法を示します、<xref:System.Windows.Forms.Design.Behavior.Behavior>ユーザーのクリックに応答するクラス。 このコード例が示されている例の一部、<xref:System.Windows.Forms.Design.Behavior.BehaviorService>クラス。  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#5)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
    <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
    <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
    <related type="Article" href="https://msdn.microsoft.com/library/7c60cc41-4324-46b5-b444-b39eda7cb33f">動作サービスの概要</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Behavior ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Behavior();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <xref:System.Windows.Forms.Design.Behavior.Behavior> クラスの新しいインスタンスを初期化する方法を次のコード例に示します。 このコード例が示されている例の一部、<xref:System.Windows.Forms.Design.Behavior.BehaviorService>クラス。  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#7)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7c60cc41-4324-46b5-b444-b39eda7cb33f">動作サービスの概要</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Behavior (bool callParentBehavior, System.Windows.Forms.Design.Behavior.BehaviorService behaviorService);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool callParentBehavior, class System.Windows.Forms.Design.Behavior.BehaviorService behaviorService) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.#ctor(System.Boolean,System.Windows.Forms.Design.Behavior.BehaviorService)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Behavior(bool callParentBehavior, System::Windows::Forms::Design::Behavior::BehaviorService ^ behaviorService);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Design.Behavior.Behavior : bool * System.Windows.Forms.Design.Behavior.BehaviorService -&gt; System.Windows.Forms.Design.Behavior.Behavior" Usage="new System.Windows.Forms.Design.Behavior.Behavior (callParentBehavior, behaviorService)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callParentBehavior" Type="System.Boolean" />
        <Parameter Name="behaviorService" Type="System.Windows.Forms.Design.Behavior.BehaviorService" />
      </Parameters>
      <Docs>
        <param name="callParentBehavior"><see langword="true" /> 存在する場合、親動作を呼び出す必要がある場合それ以外の場合、<see langword="false" />します。</param>
        <param name="behaviorService">使用する <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />クラスと、指定された<see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 親動作は、[次へ] によって保持される動作スタックの動作、<xref:System.Windows.Forms.Design.Behavior.BehaviorService>します。 場合、`callParentBehavior`パラメーターが`true`、`behaviorService`パラメーターがある必要がありますいない`null`します。  
  
 `callParentBehavior` 示すかどうか、ベース<xref:System.Windows.Forms.Design.Behavior.Behavior>クラスが、親の動作を呼び出す必要がありますして、<xref:System.Windows.Forms.Design.Behavior.BehaviorService>正しい親動作を選択します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callParentBehavior" /> が <see langword="true" /> で、<paramref name="behaviorService" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Cursor Cursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.Behavior.Behavior.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Cursor ^ Cursor { System::Windows::Forms::Cursor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Forms.Cursor" Usage="System.Windows.Forms.Design.Behavior.Behavior.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この動作に対して表示されるカーソルを取得します。</summary>
        <value>A<see cref="T:System.Windows.Forms.Cursor" />この動作に対して表示されるカーソルを表します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableAllCommands">
      <MemberSignature Language="C#" Value="public virtual bool DisableAllCommands { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisableAllCommands" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisableAllCommands As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool DisableAllCommands { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.DisableAllCommands : bool" Usage="System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか<see cref="T:System.ComponentModel.Design.MenuCommand" />オブジェクトを無効にする必要があります。</summary>
        <value><see langword="true" /> すべて<see cref="T:System.ComponentModel.Design.MenuCommand" />、デザイナーが受け取るオブジェクトの状態に設定する必要がありますがある<c>有効 = false</c>ときにこの<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />active。 それ以外は、 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A`true`値、<xref:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands%2A>にプロパティを示します、<xref:System.Windows.Forms.Design.Behavior.BehaviorService>をすべて<xref:System.ComponentModel.Design.MenuCommand>デザイナーが受け取るオブジェクトは、その状態がこの動作は、アクティブなときに無効になっているをある必要があります。  
  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands%2A>プロパティの動作と組み合わせて、<xref:System.Windows.Forms.Design.Behavior.Behavior.FindCommand%2A>グリフと動作の間の相互作用をカスタマイズするためのメソッド。 次の表は、呼び出しの結果をまとめたものです。<xref:System.Windows.Forms.Design.Behavior.Behavior.FindCommand%2A>特定の<xref:System.ComponentModel.Design.MenuCommand>します。  
  
||<xref:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands%2A> は `true` です|<xref:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands%2A> は `false` です|  
|-|-|-|  
|グリフのヒット テストが割り当て済みの動作|場合、 <xref:System.ComponentModel.Design.MenuCommand> 、指定した`command ID`で見つかりましたが、 <xref:System.ComponentModel.Design.IMenuCommandService>、その<xref:System.ComponentModel.Design.MenuCommand>は無効であるが返されます。 それ以外の場合、`null`が返されます。|<xref:System.ComponentModel.Design.MenuCommandService.FindCommand%2A> 動作に対して呼び出され、見つかった場合は、動作の<xref:System.ComponentModel.Design.MenuCommand>が返されます。 それ以外の場合、結果の<xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A?displayProperty=nameWithType>、指定した`command ID`が返されます。|  
|グリフのヒット テストに割り当てられている動作がありません。|結果<xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A?displayProperty=nameWithType>、指定した`command ID`が返されます。|結果<xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A?displayProperty=nameWithType>、指定した`command ID`が返されます。|  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>既定の実装では、常に <see langword="false" /> を返します。</para></block>
        <altmember cref="Overload:System.ComponentModel.Design.MenuCommandService.FindCommand" />
        <altmember cref="M:System.Windows.Forms.Design.Behavior.Behavior.FindCommand(System.ComponentModel.Design.CommandID)" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.Design.MenuCommand FindCommand (System.ComponentModel.Design.CommandID commandId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.MenuCommand FindCommand(class System.ComponentModel.Design.CommandID commandId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.FindCommand(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::Design::MenuCommand ^ FindCommand(System::ComponentModel::Design::CommandID ^ commandId);" />
      <MemberSignature Language="F#" Value="abstract member FindCommand : System.ComponentModel.Design.CommandID -&gt; System.ComponentModel.Design.MenuCommand&#xA;override this.FindCommand : System.ComponentModel.Design.CommandID -&gt; System.ComponentModel.Design.MenuCommand" Usage="behavior.FindCommand commandId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandId" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandId"><see cref="T:System.ComponentModel.Design.CommandID" /> オブジェクト。</param>
        <summary>コマンドを受け取ります。</summary>
        <returns><see cref="T:System.ComponentModel.Design.MenuCommand" />。 既定では、<see cref="M:System.Windows.Forms.Design.Behavior.Behavior.FindCommand(System.ComponentModel.Design.CommandID)" />返します<see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.FindCommand%2A>メソッドの呼び出し元、<xref:System.Windows.Forms.Design.Behavior.BehaviorService>します。 機会を提供しますが、<xref:System.Windows.Forms.Design.Behavior.Behavior>を返す独自のカスタム<xref:System.ComponentModel.Design.MenuCommand>のため、このメッセージを受信します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="OnDragDrop">
      <MemberSignature Language="C#" Value="public virtual void OnDragDrop (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDragDrop(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragDrop(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDragDrop (g As Glyph, e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDragDrop(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragDrop : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragDrop : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.DragEventArgs -&gt; unit" Usage="behavior.OnDragDrop (g, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="g">A<see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />ドラッグ アンド ドロップ動作を呼び出す対象となるオブジェクト。</param>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>カスタムのドラッグ アンド ドロップ動作を許可します。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>オーバーライドすることができます、<see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragDrop(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />メソッドように、<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />独自のドラッグ アンド ドロップの規則を指定できます。</para></block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="public virtual void OnDragEnter (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDragEnter(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragEnter(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDragEnter (g As Glyph, e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDragEnter(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.DragEventArgs -&gt; unit" Usage="behavior.OnDragEnter (g, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="g">A<see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />を呼び出す対象のドラッグ動作をします。</param>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>動作を許可カスタム ドラッグします。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>オーバーライドすることができます、<see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragEnter(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />メソッドように、<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />独自 drag-enter ルールを指定できます。</para></block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="public virtual void OnDragLeave (System.Windows.Forms.Design.Behavior.Glyph g, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDragLeave(class System.Windows.Forms.Design.Behavior.Glyph g, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragLeave(System.Windows.Forms.Design.Behavior.Glyph,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDragLeave (g As Glyph, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDragLeave(System::Windows::Forms::Design::Behavior::Glyph ^ g, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.Forms.Design.Behavior.Glyph * EventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.Forms.Design.Behavior.Glyph * EventArgs -&gt; unit" Usage="behavior.OnDragLeave (g, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="g">A<see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />ドラッグ動作を呼び出し元となります。</param>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>カスタム ドラッグ動作を許可します。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>オーバーライドすることができます、<see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragLeave(System.Windows.Forms.Design.Behavior.Glyph,System.EventArgs)" />メソッドように、<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />ドラッグの独自の規則を指定できます。</para></block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="public virtual void OnDragOver (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDragOver(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragOver(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDragOver (g As Glyph, e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDragOver(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.DragEventArgs -&gt; unit" Usage="behavior.OnDragOver (g, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="g">A<see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />を上へのドラッグ動作を呼び出します。</param>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>カスタムのドラッグ動作を許可します。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>オーバーライドすることができます、<see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragOver(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />メソッドように、<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />上へのドラッグの独自の規則を指定できます。</para></block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="public virtual void OnGiveFeedback (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnGiveFeedback(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnGiveFeedback (g As Glyph, e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnGiveFeedback(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.GiveFeedbackEventArgs -&gt; unit" Usage="behavior.OnGiveFeedback (g, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="g">A<see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />をドラッグ アンド ドロップの動作を呼び出します。</param>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" />。</param>
        <summary>カスタムのドラッグ アンド ドロップ フィードバック動作を許可します。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>オーバーライドすることができます、<see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnGiveFeedback(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.GiveFeedbackEventArgs)" />メソッドように、<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />独自のドラッグ アンド ドロップの規則を指定できます。</para></block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="OnLoseCapture">
      <MemberSignature Language="C#" Value="public virtual void OnLoseCapture (System.Windows.Forms.Design.Behavior.Glyph g, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLoseCapture(class System.Windows.Forms.Design.Behavior.Glyph g, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnLoseCapture(System.Windows.Forms.Design.Behavior.Glyph,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnLoseCapture (g As Glyph, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnLoseCapture(System::Windows::Forms::Design::Behavior::Glyph ^ g, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLoseCapture : System.Windows.Forms.Design.Behavior.Glyph * EventArgs -&gt; unit&#xA;override this.OnLoseCapture : System.Windows.Forms.Design.Behavior.Glyph * EventArgs -&gt; unit" Usage="behavior.OnLoseCapture (g, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="g">A<see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />をドラッグ アンド ドロップの動作を呼び出します。</param>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>マウスのキャプチャを失ったときに、装飾ウィンドウによって呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 動作を自体で動作スタックにプッシュしてサービスの動作をマウスのキャプチャを要求できます、<xref:System.Windows.Forms.Design.Behavior.BehaviorService.PushCaptureBehavior%2A>メソッド。 この場合から通知されます、<xref:System.Windows.Forms.Design.Behavior.Behavior.OnLoseCapture%2A>メソッド キャプチャが失われるとします。 一般に、動作自体をスタックから削除この時点でします。 キャプチャは、次の操作のいずれかが発生したときに失われます。  
  
-   他のユーザーは、キャプチャを要求します。  
  
-   別の動作がプッシュされます。  
  
-   この動作は削除されます。  
  
 このような場合は、の各<xref:System.Windows.Forms.Design.Behavior.Behavior.OnLoseCapture%2A>動作でが呼び出されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseDoubleClick (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.MouseButtons button, System.Drawing.Point mouseLoc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseDoubleClick(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Windows.Forms.MouseButtons button, valuetype System.Drawing.Point mouseLoc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseDoubleClick (g As Glyph, button As MouseButtons, mouseLoc As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseDoubleClick(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::MouseButtons button, System::Drawing::Point mouseLoc);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDoubleClick : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.MouseButtons * System.Drawing.Point -&gt; bool&#xA;override this.OnMouseDoubleClick : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.MouseButtons * System.Drawing.Point -&gt; bool" Usage="behavior.OnMouseDoubleClick (g, button, mouseLoc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
        <Parameter Name="mouseLoc" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="g"><see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <param name="button">A<see cref="T:System.Windows.Forms.MouseButtons" />クリックしてされたボタンを示す値。</param>
        <param name="mouseLoc">クリックが発生した場所です。</param>
        <summary>装飾ウィンドウにダブルクリック メッセージがときに呼び出されます、<see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />します。</summary>
        <returns>メッセージが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A>ダブルクリック メッセージがメソッドを呼び出して、`WndProc`の装飾ウィンドウの<xref:System.Windows.Forms.Design.Behavior.BehaviorService>します。 最上位に、メッセージがここでは、最初に渡される<xref:System.Windows.Forms.Design.Behavior.Behavior>動作スタックにします。 返す`true`このメソッドからによってメッセージが処理されたことを示します、<xref:System.Windows.Forms.Design.Behavior.Behavior>と処理を続行する必要があります。 ここでは、メッセージは、適切な動作に送信されます。  
  
   
  
## Examples  
 次のコード例では、ダブルクリックしてメッセージを処理する方法を示します。 完全なコード一覧については、次を参照してください。[方法。デザイン モードでコントロールの動作と外観を拡張](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120))します。  
  
 [!code-csharp[System.Windows.Forms.Design.Behavior.Glyph.MarginBorderAnchorGlyphs#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.Glyph.MarginBorderAnchorGlyphs/CS/DesignerDemoControl.cs#10)]
 [!code-vb[System.Windows.Forms.Design.Behavior.Glyph.MarginBorderAnchorGlyphs#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.Glyph.MarginBorderAnchorGlyphs/VB/DesignerDemoControl.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseDown (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.MouseButtons button, System.Drawing.Point mouseLoc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseDown(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Windows.Forms.MouseButtons button, valuetype System.Drawing.Point mouseLoc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDown(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseDown (g As Glyph, button As MouseButtons, mouseLoc As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseDown(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::MouseButtons button, System::Drawing::Point mouseLoc);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.MouseButtons * System.Drawing.Point -&gt; bool&#xA;override this.OnMouseDown : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.MouseButtons * System.Drawing.Point -&gt; bool" Usage="behavior.OnMouseDown (g, button, mouseLoc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
        <Parameter Name="mouseLoc" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="g"><see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <param name="button">A<see cref="T:System.Windows.Forms.MouseButtons" />クリックしてされたボタンを示す値。</param>
        <param name="mouseLoc">クリックが発生した場所です。</param>
        <summary>任意のマウス ダウン メッセージの装飾ウィンドウに入ったときに呼び出されます、<see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />します。</summary>
        <returns>メッセージが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A>マウスダウン メッセージが、メソッドが呼び出されます、`WndProc`の装飾ウィンドウの<xref:System.Windows.Forms.Design.Behavior.BehaviorService>します。 最上位に、メッセージがここでは、最初に渡される<xref:System.Windows.Forms.Design.Behavior.Behavior>動作スタックにします。 返す`true`このメソッドからによってメッセージが処理されたことを示します、<xref:System.Windows.Forms.Design.Behavior.Behavior>と処理を続行する必要があります。 ここでは、メッセージは、適切な動作に送信されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseEnter (System.Windows.Forms.Design.Behavior.Glyph g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseEnter(class System.Windows.Forms.Design.Behavior.Glyph g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseEnter(System.Windows.Forms.Design.Behavior.Glyph)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseEnter (g As Glyph) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseEnter(System::Windows::Forms::Design::Behavior::Glyph ^ g);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Forms.Design.Behavior.Glyph -&gt; bool&#xA;override this.OnMouseEnter : System.Windows.Forms.Design.Behavior.Glyph -&gt; bool" Usage="behavior.OnMouseEnter g" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
      </Parameters>
      <Docs>
        <param name="g"><see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <summary>装飾ウィンドウの任意のマウスエンター メッセージに入ると呼び出されます、<see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />します。</summary>
        <returns>メッセージが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A>マウスエンター メッセージがメソッドを呼び出して、`WndProc`の装飾ウィンドウの<xref:System.Windows.Forms.Design.Behavior.BehaviorService>します。 ここでは、メッセージは、適切な動作に送信されます。  
  
 マウス ポインターの場所が別に対し肯定的なヒット テストの場合<xref:System.Windows.Forms.Design.Behavior.Glyph>でこのメソッドを呼び出す前のヒット テストをよりも、<xref:System.Windows.Forms.Design.Behavior.Behavior>に関連付けられている、<xref:System.Windows.Forms.Design.Behavior.Glyph>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseHover (System.Windows.Forms.Design.Behavior.Glyph g, System.Drawing.Point mouseLoc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseHover(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Drawing.Point mouseLoc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseHover(System.Windows.Forms.Design.Behavior.Glyph,System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseHover (g As Glyph, mouseLoc As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseHover(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Drawing::Point mouseLoc);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseHover : System.Windows.Forms.Design.Behavior.Glyph * System.Drawing.Point -&gt; bool&#xA;override this.OnMouseHover : System.Windows.Forms.Design.Behavior.Glyph * System.Drawing.Point -&gt; bool" Usage="behavior.OnMouseHover (g, mouseLoc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="mouseLoc" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="g"><see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <param name="mouseLoc">ホバーが発生した場所です。</param>
        <summary>装飾ウィンドウの任意のマウス ホバー メッセージに入ると呼び出されます、<see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />します。</summary>
        <returns>メッセージが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A>マウス静止メッセージが、メソッドが呼び出されます、`WndProc`の装飾ウィンドウの<xref:System.Windows.Forms.Design.Behavior.BehaviorService>します。 最上位に、メッセージがここでは、最初に渡される<xref:System.Windows.Forms.Design.Behavior.Behavior>動作スタックにします。 返す`true`このメソッドからによってメッセージが処理されたことを示します、<xref:System.Windows.Forms.Design.Behavior.Behavior>と処理を続行する必要があります。 ここでは、メッセージは、適切な動作に送信されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseLeave (System.Windows.Forms.Design.Behavior.Glyph g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseLeave(class System.Windows.Forms.Design.Behavior.Glyph g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseLeave(System.Windows.Forms.Design.Behavior.Glyph)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseLeave (g As Glyph) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseLeave(System::Windows::Forms::Design::Behavior::Glyph ^ g);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Forms.Design.Behavior.Glyph -&gt; bool&#xA;override this.OnMouseLeave : System.Windows.Forms.Design.Behavior.Glyph -&gt; bool" Usage="behavior.OnMouseLeave g" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
      </Parameters>
      <Docs>
        <param name="g"><see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <summary>装飾ウィンドウのマウス メッセージに入ると呼び出されます、<see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />します。</summary>
        <returns>メッセージが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A>マウスリーブ メッセージが、メソッドが呼び出されます、`WndProc`の装飾ウィンドウの<xref:System.Windows.Forms.Design.Behavior.BehaviorService>します。 ここでは、メッセージは、適切な動作に送信されます。  
  
 マウス ポインターが、確実にヒット テストを離れるとき<xref:System.Windows.Forms.Design.Behavior.Glyph>有効な<xref:System.Windows.Forms.Design.Behavior.Behavior>、このメソッドが呼び出されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseMove (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.MouseButtons button, System.Drawing.Point mouseLoc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseMove(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Windows.Forms.MouseButtons button, valuetype System.Drawing.Point mouseLoc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseMove(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseMove (g As Glyph, button As MouseButtons, mouseLoc As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseMove(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::MouseButtons button, System::Drawing::Point mouseLoc);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.MouseButtons * System.Drawing.Point -&gt; bool&#xA;override this.OnMouseMove : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.MouseButtons * System.Drawing.Point -&gt; bool" Usage="behavior.OnMouseMove (g, button, mouseLoc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
        <Parameter Name="mouseLoc" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="g"><see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <param name="button">A<see cref="T:System.Windows.Forms.MouseButtons" />クリックしてされたボタンを示す値。</param>
        <param name="mouseLoc">移動が発生した場所です。</param>
        <summary>装飾ウィンドウの任意のマウス移動メッセージに入ると呼び出されます、<see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />します。</summary>
        <returns>メッセージが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A>マウス移動メッセージが、メソッドが呼び出されます、`WndProc`の装飾ウィンドウの<xref:System.Windows.Forms.Design.Behavior.BehaviorService>します。 最上位に、メッセージがここでは、最初に渡される<xref:System.Windows.Forms.Design.Behavior.Behavior>動作スタックにします。 返す`true`このメソッドからによってメッセージが処理されたことを示します、<xref:System.Windows.Forms.Design.Behavior.Behavior>と処理を続行する必要があります。 ここでは、メッセージは、適切な動作に送信されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseUp (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.MouseButtons button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseUp(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Windows.Forms.MouseButtons button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseUp(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseUp (g As Glyph, button As MouseButtons) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseUp(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::MouseButtons button);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.MouseButtons -&gt; bool&#xA;override this.OnMouseUp : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.MouseButtons -&gt; bool" Usage="behavior.OnMouseUp (g, button)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
      </Parameters>
      <Docs>
        <param name="g"><see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <param name="button">A<see cref="T:System.Windows.Forms.MouseButtons" />クリックしてされたボタンを示す値。</param>
        <summary>装飾ウィンドウの任意のマウスをメッセージに入ると呼び出されます、<see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />します。</summary>
        <returns>メッセージが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A>マウス アップ メッセージが、メソッドが呼び出されます、`WndProc`の装飾ウィンドウの<xref:System.Windows.Forms.Design.Behavior.BehaviorService>します。 最上位に、メッセージがここでは、最初に渡される<xref:System.Windows.Forms.Design.Behavior.Behavior>動作スタックにします。 返す`true`このメソッドからによってメッセージが処理されたことを示します、<xref:System.Windows.Forms.Design.Behavior.Behavior>と処理を続行する必要があります。 ここでは、メッセージは、適切な動作に送信されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="public virtual void OnQueryContinueDrag (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnQueryContinueDrag(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnQueryContinueDrag (g As Glyph, e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnQueryContinueDrag(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.Forms.Design.Behavior.Glyph * System.Windows.Forms.QueryContinueDragEventArgs -&gt; unit" Usage="behavior.OnQueryContinueDrag (g, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="g"><see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />。</param>
        <summary>適切な装飾ウィンドウからこのドラッグ アンド ドロップ イベントを送信します。<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />ヒット テストまたは<see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />します。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>オーバーライドすることができます、<see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnQueryContinueDrag(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.QueryContinueDragEventArgs)" />メソッドように、<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />独自のドラッグ アンド ドロップの規則を指定できます。</para></block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">方法: デザイン モードでコントロールの動作と外観を拡張します。</related>
      </Docs>
    </Member>
  </Members>
</Type>