<Type Name="SchemaImporterExtension" FullName="System.Xml.Serialization.Advanced.SchemaImporterExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ac3cda0d902cb029b9826b3ecd50fe0bc73d747c" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32037307" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SchemaImporterExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SchemaImporterExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SchemaImporterExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class SchemaImporterExtension abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>自動クエリ ツールを使用するときに Web サービス記述言語 (WSDL: Web Services Description Language) ドキュメントから生成されたコードをカスタマイズできます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スキーマのインポートは、Web サービス プロキシは Web 参照の追加 ダイアログ ボックスなどのツールで生成されるたびに発生するかを使用して Visual Studio で、ボックス、 [Web サービス記述言語ツール (Wsdl.exe)](http://msdn.microsoft.com/library/b9210348-8bc2-4367-8c91-d1a04b403e88)です。 スキーマのインポートを使用する場合にも発生する、 [XML スキーマ定義ツール (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md)特定の XSD ドキュメントからコードを生成します。  
  
 <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension>クラスでは、これらのツールを使用する場合に生成されたコードを変更することができます。 たとえば、プロセスの書籍がシステムに注文およびがあることを注文を提供する既存の XSD ドキュメントの既存のクラスがあります。 使用して、<xref:System.Xml.Serialization.Advanced.SchemaImporterExtension>クラスを有効にできます、クラスを使用するコードを生成するツールのいずれか。  
  
 コードの生成を制御するためにクラスを使用する必要があります、<xref:System.CodeDom>名前空間。 詳細については、次を参照してください。 [、CodeDOM を使用して](~/docs/framework/reflection-and-codedom/using-the-codedom.md)と[CodeDOM クイック リファレンス](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx)です。  
  
 拡張機能を使用する (これは、さらには、Web 参照の追加 ダイアログ ボックスなどの他のツールによって使用されます)、WSDL.exe ツールを有効にするのには、手順は次のとおりです。  
  
1.  実装を作成、<xref:System.Xml.Serialization.Advanced.SchemaImporterExtension>クラスです。  
  
2.  使用して、<xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%2A>コード ジェネレーターのコードを記述するメソッド。 メソッドには、傍受した XSD 型を確認し、新しい CLR コードの生成に使用される CodeDOM オブジェクトを作成することを許可するパラメーターが含まれています。  
  
3.  必要に応じて、使用、<xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportAnyElement%2A>を処理するメソッド\<xsd: 任意 > 要素、XSD ドキュメントに存在します。  
  
4.  必要に応じて、使用、<xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportDefaultValue%2A>既定値を確認するメソッドが XSD ドキュメントに記載し、異なる既定値を返します。  
  
5.  拡張機能をライブラリにコンパイルします。  
  
6.  アセンブリに署名します。  
  
7.  グローバル アセンブリ キャッシュ (GAC) にアセンブリをインストールします。  
  
8.  拡張子を含めるために machine.config ファイルを変更します。  
  
   
  
## Examples  
 参照してください、 [SchemaImporterExtension テクノロジ サンプル](~/docs/standard/serialization/schemaimporterextension-technology-sample.md)です。 この例に、署名されたアセンブリが含まれていないことに注意してください。 代わりに、使用する方法を示します、<xref:System.Xml.Serialization.Advanced.SchemaImporterExtension>コマンド ウィンドウを使用します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SchemaImporterExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SchemaImporterExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportAnyElement">
      <MemberSignature Language="C#" Value="public virtual string ImportAnyElement (System.Xml.Schema.XmlSchemaAny any, bool mixed, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportAnyElement(class System.Xml.Schema.XmlSchemaAny any, bool mixed, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportAnyElement(System.Xml.Schema.XmlSchemaAny,System.Boolean,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportAnyElement (any As XmlSchemaAny, mixed As Boolean, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportAnyElement(System::Xml::Schema::XmlSchemaAny ^ any, bool mixed, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="any" Type="System.Xml.Schema.XmlSchemaAny" />
        <Parameter Name="mixed" Type="System.Boolean" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="any">XSD (XML スキーマ ドキュメント) 内の <see langword="xsd:any" /> 要素を表す <see cref="T:System.Xml.Schema.XmlSchemaAny" />。</param>
        <param name="mixed">XSD <see langword="complex" /> 属性が "mixed" に設定されているかどうかを示す <see cref="T:System.Boolean" />。 属性が "mixed" に設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="schemas">XSD 内のスキーマのコレクションを含む <see cref="T:System.Xml.Serialization.XmlSchemas" />。</param>
        <param name="importer">使用されるインポーターである <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />。</param>
        <param name="compileUnit">XSD の代替コードを生成するための CodeDOM 構造体の追加先である <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
        <param name="mainNamespace">要素の現在の名前空間を表す <see cref="T:System.CodeDom.CodeNamespace" />。</param>
        <param name="options">コード コンパイラの設定オプションの <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />。</param>
        <param name="codeProvider">新しいコードの生成に使用される CodeDOM プロバイダーである <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />。</param>
        <summary>スキーマの &lt;xsd:any&gt; 要素のインポートを処理します。</summary>
        <returns>要素が割り当てられる CLR 型の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コードの生成を制御するためにクラスを使用する必要があります、<xref:System.CodeDom>名前空間。 詳細については、次を参照してください。 [、CodeDOM を使用して](~/docs/framework/reflection-and-codedom/using-the-codedom.md)と[CodeDOM クイック リファレンス](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportDefaultValue">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeExpression ImportDefaultValue (string value, string type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeExpression ImportDefaultValue(string value, string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportDefaultValue(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportDefaultValue (value As String, type As String) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeExpression ^ ImportDefaultValue(System::String ^ value, System::String ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">元の XSD で見つかった値。</param>
        <param name="type">XSD 型の名前。</param>
        <summary>インポートされる XSD 型の既定値を指定できます。</summary>
        <returns>新しい既定値を設定する <see cref="T:System.CodeDom.CodeExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コードの生成を制御するためにクラスを使用する必要があります、<xref:System.CodeDom>名前空間。 詳細については、次を参照してください。 [、CodeDOM を使用して](~/docs/framework/reflection-and-codedom/using-the-codedom.md)と[CodeDOM クイック リファレンス](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ImportSchemaType">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>インポートされたスキーマをチェックし、そのスキーマが割り当てられる CLR 型を指定することによって、生成されるコードを操作できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例の簡単な実装、<xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29>メソッドです。 コードは、名前空間と名前を確認します。 適切な値が見つかったときに、生成されたコードで参照する必要があるカスタム アセンブリ ("Order.dll") の名前を追加します。 新しい名前空間 ("Microsoft.Samples")、コードで生成されるを追加します。  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ImportSchemaType">
      <MemberSignature Language="C#" Value="public virtual string ImportSchemaType (System.Xml.Schema.XmlSchemaType type, System.Xml.Schema.XmlSchemaObject context, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportSchemaType(class System.Xml.Schema.XmlSchemaType type, class System.Xml.Schema.XmlSchemaObject context, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportSchemaType (type As XmlSchemaType, context As XmlSchemaObject, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportSchemaType(System::Xml::Schema::XmlSchemaType ^ type, System::Xml::Schema::XmlSchemaObject ^ context, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.Schema.XmlSchemaType" />
        <Parameter Name="context" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="type">XSD 型を表す <see cref="T:System.Xml.Schema.XmlSchemaType" />。</param>
        <param name="context">XML 要素の行番号などのスキーマ情報を表す <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
        <param name="schemas">ドキュメント内のスキーマのコレクションを含む <see cref="T:System.Xml.Serialization.XmlSchemas" />。</param>
        <param name="importer">使用されるインポーターである <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />。</param>
        <param name="compileUnit">XSD の代替コードを生成するための CodeDOM 構造体の追加先である <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
        <param name="mainNamespace">要素の現在の名前空間を表す <see cref="T:System.CodeDom.CodeNamespace" />。</param>
        <param name="options">コード コンパイラの設定オプションの <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />。</param>
        <param name="codeProvider">新しいコードの生成に使用される <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />。</param>
        <summary>インポートされたスキーマをチェックし、そのスキーマが割り当てられる CLR 型を指定することによって、生成されるコードを操作できます。</summary>
        <returns>これが割り当てられる CLR 型の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例の簡単な実装、<xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29>メソッドです。 コードは、名前空間と名前を確認します。 適切な値が見つかったときに、生成されたコードで参照する必要があるカスタム アセンブリ ("Order.dll") の名前を追加します。 新しい名前空間 ("Microsoft.Samples")、コードで生成されるを追加します。  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportSchemaType">
      <MemberSignature Language="C#" Value="public virtual string ImportSchemaType (string name, string ns, System.Xml.Schema.XmlSchemaObject context, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportSchemaType(string name, string ns, class System.Xml.Schema.XmlSchemaObject context, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.String,System.String,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportSchemaType (name As String, ns As String, context As XmlSchemaObject, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportSchemaType(System::String ^ name, System::String ^ ns, System::Xml::Schema::XmlSchemaObject ^ context, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="context" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="name">要素の名前。</param>
        <param name="ns">要素の名前空間。</param>
        <param name="context">XML 要素の行番号などのスキーマ情報を表す <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
        <param name="schemas">ドキュメント内のスキーマのコレクションを含む <see cref="T:System.Xml.Serialization.XmlSchemas" />。</param>
        <param name="importer">使用されるインポーターである <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />。</param>
        <param name="compileUnit">XSD の代替コードを生成するための CodeDOM 構造体の追加先である <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
        <param name="mainNamespace">要素の現在の名前空間を表す <see cref="T:System.CodeDom.CodeNamespace" />。</param>
        <param name="options">コード コンパイラの設定オプションの <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />。</param>
        <param name="codeProvider">新しいコードの生成に使用される <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />。</param>
        <summary>インポートされたスキーマをチェックし、そのスキーマが割り当てられる CLR 型を指定することによって、生成されるコードを操作できます。</summary>
        <returns>これが割り当てられる CLR 型の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コードの生成を制御するためにクラスを使用する必要があります、<xref:System.CodeDom>名前空間。 詳細については、次を参照してください。 [、CodeDOM を使用して](~/docs/framework/reflection-and-codedom/using-the-codedom.md)と[CodeDOM クイック リファレンス](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx)です。  
  
   
  
## Examples  
 次の例の簡単な実装、<xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29>メソッドです。 コードは、名前空間と名前を確認します。 適切な値が見つかったときに、生成されたコードで参照する必要があるカスタム アセンブリ ("Order.dll") の名前を追加します。 新しい名前空間 ("Microsoft.Samples")、コードで生成されるを追加します。  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>