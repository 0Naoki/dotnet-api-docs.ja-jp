<Type Name="DispatcherTimer" FullName="System.Windows.Threading.DispatcherTimer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4b2e50f88278a4455d96bba6b8bcca36042f334c" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70461708" /></Metadata><TypeSignature Language="C#" Value="public class DispatcherTimer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DispatcherTimer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherTimer" />
  <TypeSignature Language="VB.NET" Value="Public Class DispatcherTimer" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherTimer" />
  <TypeSignature Language="F#" Value="type DispatcherTimer = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2de8f-101">指定した時間の間隔で、指定した優先順位で処理される <see cref="T:System.Windows.Threading.Dispatcher" /> キューに統合されているタイマー。</span><span class="sxs-lookup"><span data-stu-id="2de8f-101">A timer that is integrated into the <see cref="T:System.Windows.Threading.Dispatcher" /> queue which is processed at a specified interval of time and at a specified priority.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2de8f-102">は<xref:System.Windows.Threading.DispatcherTimer> 、すべて<xref:System.Windows.Threading.Dispatcher>のループの先頭で再評価されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-102">The <xref:System.Windows.Threading.DispatcherTimer> is reevaluated at the top of every <xref:System.Windows.Threading.Dispatcher> loop.</span></span>  
  
 <span data-ttu-id="2de8f-103">タイマーは、時間間隔が発生したときに正確に実行されるとは限りませんが、時間間隔が発生する前に実行されることは保証されません。</span><span class="sxs-lookup"><span data-stu-id="2de8f-103">Timers are not guaranteed to execute exactly when the time interval occurs, but they are guaranteed to not execute before the time interval occurs.</span></span>  <span data-ttu-id="2de8f-104">これは、 <xref:System.Windows.Threading.DispatcherTimer>他の操作と同様<xref:System.Windows.Threading.Dispatcher>に、操作がキューに配置されるためです。</span><span class="sxs-lookup"><span data-stu-id="2de8f-104">This is because <xref:System.Windows.Threading.DispatcherTimer> operations are placed on the <xref:System.Windows.Threading.Dispatcher> queue like other operations.</span></span>  <span data-ttu-id="2de8f-105"><xref:System.Windows.Threading.DispatcherTimer>操作が実行されるタイミングは、キュー内の他のジョブとその優先順位に依存します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-105">When the <xref:System.Windows.Threading.DispatcherTimer> operation executes is dependent on the other jobs in the queue and their priorities.</span></span>  
  
 <span data-ttu-id="2de8f-106">アプリケーションでを<xref:System.Timers.Timer?displayProperty=nameWithType>使用する場合は、 <xref:System.Timers.Timer?displayProperty=nameWithType>がスレッドと[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]は異なるスレッドで実行されることに注意してください。 [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</span><span class="sxs-lookup"><span data-stu-id="2de8f-106">If a <xref:System.Timers.Timer?displayProperty=nameWithType> is used in a [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] application, it is worth noting that the <xref:System.Timers.Timer?displayProperty=nameWithType> runs on a different thread than the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="2de8f-107">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]スレッド上のオブジェクトにアクセスするには、または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>を使用して<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 、操作<xref:System.Windows.Threading.Dispatcher>を[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]スレッドのにポストする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2de8f-107">In order to access objects on the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] thread, it is necessary to post the operation onto the <xref:System.Windows.Threading.Dispatcher> of the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] thread using <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="2de8f-108">としてで<xref:System.Windows.Threading.DispatcherTimer>はなく<xref:System.Timers.Timer?displayProperty=nameWithType>を使用する理由は<xref:System.Windows.Threading.DispatcherTimer> 、がと同じスレッド<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>で実行され、がに<xref:System.Windows.Threading.DispatcherTimer>設定できることです。</span><span class="sxs-lookup"><span data-stu-id="2de8f-108">Reasons for using a <xref:System.Windows.Threading.DispatcherTimer> as opposed to a <xref:System.Timers.Timer?displayProperty=nameWithType> are that the <xref:System.Windows.Threading.DispatcherTimer> runs on the same thread as the <xref:System.Windows.Threading.Dispatcher> and a <xref:System.Windows.Threading.DispatcherPriority> can be set on the <xref:System.Windows.Threading.DispatcherTimer>.</span></span>  
  
 <span data-ttu-id="2de8f-109">は<xref:System.Windows.Threading.DispatcherTimer> 、オブジェクトのメソッドがタイマーにバインドされるたびに、オブジェクトを維持します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-109">A <xref:System.Windows.Threading.DispatcherTimer> will keep an object alive whenever the object's methods are bound to the timer.</span></span>  
  
## Examples  
 <span data-ttu-id="2de8f-110">次の例では<xref:System.Windows.Threading.DispatcherTimer> 、 <xref:System.Windows.Controls.Label>の内容を更新し、でメソッド<xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>を<xref:System.Windows.Input.CommandManager>呼び出すを作成します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-110">The following example creates a <xref:System.Windows.Threading.DispatcherTimer> that updates the contents of a <xref:System.Windows.Controls.Label> and calls the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method on the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 <span data-ttu-id="2de8f-111">という名前`dispatcherTimer`のオブジェクトが作成されます。 <xref:System.Windows.Threading.DispatcherTimer></span><span class="sxs-lookup"><span data-stu-id="2de8f-111">A <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.</span></span>  <span data-ttu-id="2de8f-112">イベントハンドラー `dispatcherTimer_Tick`は、の<xref:System.Windows.Threading.DispatcherTimer.Tick> `dispatcherTimer`イベントに追加されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-112">The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event of `dispatcherTimer`.</span></span>  <span data-ttu-id="2de8f-113">は<xref:System.Windows.Threading.DispatcherTimer.Interval%2A> 、 <xref:System.Windows.Duration.TimeSpan%2A>オブジェクトを使用して1秒に設定され、タイマーが開始されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-113">The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.Windows.Duration.TimeSpan%2A> object, and the timer is started.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 <span data-ttu-id="2de8f-114">イベント<xref:System.Windows.Threading.DispatcherTimer.Tick>ハンドラーは、現在<xref:System.Windows.Controls.Label>の秒を表示するを更新<xref:System.Windows.Input.CommandManager>し、 <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>でを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-114">The <xref:System.Windows.Threading.DispatcherTimer.Tick> event handler updates a <xref:System.Windows.Controls.Label> that displays the current second, and it calls <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> on the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2de8f-115"><see cref="T:System.Windows.Threading.DispatcherTimer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-115">Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2de8f-116"><see cref="T:System.Windows.Threading.DispatcherTimer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-116">Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2de8f-117"><xref:System.Windows.Threading.DispatcherTimer>優先順位で<xref:System.Windows.Threading.DispatcherPriority.Background>現在のスレッドので実行されます。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="2de8f-117"><xref:System.Windows.Threading.DispatcherTimer> runs on the <xref:System.Windows.Threading.Dispatcher> of the current thread at <xref:System.Windows.Threading.DispatcherPriority.Background> priority.</span></span>  <span data-ttu-id="2de8f-118">別<xref:System.Windows.Threading.Dispatcher>のを指定するには、次の<xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=nameWithType>コンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-118">To specify a different <xref:System.Windows.Threading.Dispatcher>, use the following constructor: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer priority" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="2de8f-119">タイマーを起動する優先順位。</span><span class="sxs-lookup"><span data-stu-id="2de8f-119">The priority at which to invoke the timer.</span></span></param>
        <summary><span data-ttu-id="2de8f-120">指定した優先順位でタイマー イベントを処理する <see cref="T:System.Windows.Threading.DispatcherTimer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-120">Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which processes timer events at the specified priority.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2de8f-121"><xref:System.Windows.Threading.DispatcherTimer>現在のスレッド<xref:System.Windows.Threading.Dispatcher>ので実行されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-121"><xref:System.Windows.Threading.DispatcherTimer> runs on the <xref:System.Windows.Threading.Dispatcher> of the current thread.</span></span>  <span data-ttu-id="2de8f-122">別<xref:System.Windows.Threading.Dispatcher>のを指定するには、次の<xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29>コンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-122">To specify a different <xref:System.Windows.Threading.Dispatcher>, use the following constructor: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (priority, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="2de8f-123">タイマーを起動する優先順位。</span><span class="sxs-lookup"><span data-stu-id="2de8f-123">The priority at which to invoke the timer.</span></span></param>
        <param name="dispatcher"><span data-ttu-id="2de8f-124">タイマーが関連付けられているディスパッチャー。</span><span class="sxs-lookup"><span data-stu-id="2de8f-124">The dispatcher the timer is associated with.</span></span></param>
        <summary><span data-ttu-id="2de8f-125">指定した <see cref="T:System.Windows.Threading.DispatcherTimer" /> で、指定した優先順位で実行される <see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-125">Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which runs on the specified <see cref="T:System.Windows.Threading.Dispatcher" /> at the specified priority.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2de8f-126"><paramref name="dispatcher" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="2de8f-126"><paramref name="dispatcher" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (TimeSpan interval, System.Windows.Threading.DispatcherPriority priority, EventHandler callback, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan interval, valuetype System.Windows.Threading.DispatcherPriority priority, class System.EventHandler callback, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(TimeSpan interval, System::Windows::Threading::DispatcherPriority priority, EventHandler ^ callback, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : TimeSpan * System.Windows.Threading.DispatcherPriority * EventHandler * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (interval, priority, callback, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="callback" Type="System.EventHandler" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="interval"><span data-ttu-id="2de8f-127">タイマー刻み間の時間。</span><span class="sxs-lookup"><span data-stu-id="2de8f-127">The period of time between ticks.</span></span></param>
        <param name="priority"><span data-ttu-id="2de8f-128">タイマーを起動する優先順位。</span><span class="sxs-lookup"><span data-stu-id="2de8f-128">The priority at which to invoke the timer.</span></span></param>
        <param name="callback"><span data-ttu-id="2de8f-129"><see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> イベントが発生したときに呼び出すイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="2de8f-129">The event handler to call when the <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> event occurs.</span></span></param>
        <param name="dispatcher"><span data-ttu-id="2de8f-130">タイマーが関連付けられているディスパッチャー。</span><span class="sxs-lookup"><span data-stu-id="2de8f-130">The dispatcher the timer is associated with.</span></span></param>
        <summary><span data-ttu-id="2de8f-131">指定した時間間隔、優先順位、イベント ハンドラー、および <see cref="T:System.Windows.Threading.DispatcherTimer" /> を使用する <see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-131">Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which uses the specified time interval, priority, event handler, and <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2de8f-132"><paramref name="callback" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="2de8f-132"><paramref name="callback" /> is <see langword="null" />.</span></span>

<span data-ttu-id="2de8f-133">- または -</span><span class="sxs-lookup"><span data-stu-id="2de8f-133">-or-</span></span>

          <span data-ttu-id="2de8f-134"><paramref name="dispatcher" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2de8f-134"><paramref name="dispatcher" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2de8f-135"><paramref name="interval" /> が 0 未満であるか、または <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="2de8f-135"><paramref name="interval" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2de8f-136">この <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられている <see cref="T:System.Windows.Threading.DispatcherTimer" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-136">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> associated with this <see cref="T:System.Windows.Threading.DispatcherTimer" />.</span></span></summary>
        <value><span data-ttu-id="2de8f-137">ディスパッチャー。</span><span class="sxs-lookup"><span data-stu-id="2de8f-137">The dispatcher.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2de8f-138">プロパティは、 <xref:System.Windows.Threading.DispatcherTimer>オブジェクトの作成時に決定されます。 <xref:System.Windows.Threading.DispatcherTimer.Dispatcher%2A></span><span class="sxs-lookup"><span data-stu-id="2de8f-138">The <xref:System.Windows.Threading.DispatcherTimer.Dispatcher%2A> property is determined at the creation of the <xref:System.Windows.Threading.DispatcherTimer> object.</span></span>  <span data-ttu-id="2de8f-139"><xref:System.Windows.Threading.Dispatcher>別<xref:System.Windows.Threading.Dispatcher> のが指定されていない場合、作成時にプロパティが現在のに設定されます。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="2de8f-139">The <xref:System.Windows.Threading.Dispatcher> property is set to the current <xref:System.Windows.Threading.Dispatcher> at the time of creation unless a different <xref:System.Windows.Threading.Dispatcher> is specified.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public TimeSpan Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Interval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : TimeSpan with get, set" Usage="System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2de8f-140">タイマー刻みの間隔の時間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-140">Gets or sets the period of time between timer ticks.</span></span></summary>
        <value><span data-ttu-id="2de8f-141">タイマー刻み間の時間。</span><span class="sxs-lookup"><span data-stu-id="2de8f-141">The period of time between ticks.</span></span> <span data-ttu-id="2de8f-142">既定値は、00:00:00 です。</span><span class="sxs-lookup"><span data-stu-id="2de8f-142">The default is 00:00:00.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2de8f-143">タイマーは、時間間隔が発生したときに正確に実行されるとは限りませんが、時間間隔が発生する前に実行されることは保証されません。</span><span class="sxs-lookup"><span data-stu-id="2de8f-143">Timers are not guaranteed to execute exactly when the time interval occurs, but they are guaranteed to not execute before the time interval occurs.</span></span>  <span data-ttu-id="2de8f-144">これは、 <xref:System.Windows.Threading.DispatcherTimer>他の操作と同様<xref:System.Windows.Threading.Dispatcher>に、操作がキューに配置されるためです。</span><span class="sxs-lookup"><span data-stu-id="2de8f-144">This is because <xref:System.Windows.Threading.DispatcherTimer> operations are placed on the <xref:System.Windows.Threading.Dispatcher> queue like other operations.</span></span>  <span data-ttu-id="2de8f-145"><xref:System.Windows.Threading.DispatcherTimer>操作が実行されるタイミングは、キュー内の他のジョブとその優先順位に依存します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-145">When the <xref:System.Windows.Threading.DispatcherTimer> operation executes is dependent on the other jobs in the queue and their priorities.</span></span>  
  
## Examples  
 <span data-ttu-id="2de8f-146">次の例では<xref:System.Windows.Threading.DispatcherTimer>、を作成します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-146">The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.</span></span>  <span data-ttu-id="2de8f-147">という<xref:System.Windows.Threading.DispatcherTimer>名前`dispatcherTimer`の新しいオブジェクトが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-147">A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.</span></span>  <span data-ttu-id="2de8f-148">イベントハンドラー `dispatcherTimer_Tick`が<xref:System.Windows.Threading.DispatcherTimer.Tick>イベントに追加されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-148">The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.</span></span>  <span data-ttu-id="2de8f-149">は<xref:System.Windows.Threading.DispatcherTimer.Interval%2A> 、 <xref:System.TimeSpan>オブジェクトを使用して1秒に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-149">The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.TimeSpan> object.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2de8f-150"><paramref name="interval" /> が 0 より小さいか、または <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</span><span class="sxs-lookup"><span data-stu-id="2de8f-150"><paramref name="interval" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2de8f-151">タイマーが実行されているかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-151">Gets or sets a value that indicates whether the timer is running.</span></span></summary>
        <value><span data-ttu-id="2de8f-152">タイマーが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2de8f-152"><see langword="true" /> if the timer is enabled; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="2de8f-153">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="2de8f-153">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2de8f-154"><xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>イベントを発生さ`true`せるに<xref:System.Windows.Threading.DispatcherTimer.Tick>は、をに設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2de8f-154"><xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> must be set to `true` for the <xref:System.Windows.Threading.DispatcherTimer.Tick> event to be raised.</span></span>  
  
 <span data-ttu-id="2de8f-155">を<xref:System.Windows.Threading.DispatcherTimer.Start%2A>呼び<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>出す`true`と、がに設定されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-155">Calling <xref:System.Windows.Threading.DispatcherTimer.Start%2A> sets <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `true`.</span></span>  
  
 <span data-ttu-id="2de8f-156">を<xref:System.Windows.Threading.DispatcherTimer.Stop%2A>呼び<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>出す`false`と、がに設定されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-156">Calling <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> sets <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `false`.</span></span>  
  
## Examples  
 <span data-ttu-id="2de8f-157">次の例では<xref:System.Windows.Threading.DispatcherTimer>、を作成します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-157">The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.</span></span>  <span data-ttu-id="2de8f-158">という<xref:System.Windows.Threading.DispatcherTimer>名前`dispatcherTimer`の新しいオブジェクトが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-158">A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.</span></span>  <span data-ttu-id="2de8f-159">イベントハンドラー `dispatcherTimer_Tick`が<xref:System.Windows.Threading.DispatcherTimer.Tick>イベントに追加されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-159">The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.</span></span>  <span data-ttu-id="2de8f-160">は<xref:System.Windows.Threading.DispatcherTimer.Interval%2A> 、 <xref:System.TimeSpan>オブジェクトを使用して1秒に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-160">The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.TimeSpan> object.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="dispatcherTimer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2de8f-161"><see cref="T:System.Windows.Threading.DispatcherTimer" /> を開始します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-161">Starts the <see cref="T:System.Windows.Threading.DispatcherTimer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2de8f-162">タイマー <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>が`false`開始されたときにをに設定すると、タイマーは停止します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-162">Setting <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `false` when the timer is started stops the timer.</span></span>  
  
 <span data-ttu-id="2de8f-163">タイマー <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>が`true`停止したときにをに設定すると、タイマーが開始されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-163">Setting <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `true` when the timer is stopped starts the timer.</span></span>  
  
 <span data-ttu-id="2de8f-164"><xref:System.Windows.Threading.DispatcherTimer.Start%2A>を<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> に `true` 設定します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-164"><xref:System.Windows.Threading.DispatcherTimer.Start%2A> sets <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `true`.</span></span>  
  
 <span data-ttu-id="2de8f-165"><xref:System.Windows.Threading.DispatcherTimer.Start%2A>タイマー <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>をリセットします。</span><span class="sxs-lookup"><span data-stu-id="2de8f-165"><xref:System.Windows.Threading.DispatcherTimer.Start%2A> resets the timer <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2de8f-166">次の例では<xref:System.Windows.Threading.DispatcherTimer>、を作成します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-166">The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.</span></span>  <span data-ttu-id="2de8f-167">という<xref:System.Windows.Threading.DispatcherTimer>名前`dispatcherTimer`の新しいオブジェクトが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-167">A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.</span></span>  <span data-ttu-id="2de8f-168">イベントハンドラー `dispatcherTimer_Tick`が<xref:System.Windows.Threading.DispatcherTimer.Tick>イベントに追加されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-168">The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.</span></span>  <span data-ttu-id="2de8f-169">は<xref:System.Windows.Threading.DispatcherTimer.Interval%2A> 、 <xref:System.Windows.Duration.TimeSpan%2A>オブジェクトを使用して1秒に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-169">The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.Windows.Duration.TimeSpan%2A> object.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="dispatcherTimer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2de8f-170"><see cref="T:System.Windows.Threading.DispatcherTimer" /> を停止します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-170">Stops the <see cref="T:System.Windows.Threading.DispatcherTimer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2de8f-171">タイマー <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>が`false`開始されたときにをに設定すると、タイマーは停止します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-171">Setting <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `false` when the timer is started stops the timer.</span></span>  
  
 <span data-ttu-id="2de8f-172">タイマー <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>が`true`停止したときにをに設定すると、タイマーが開始されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-172">Setting <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `true` when the timer is stopped starts the timer.</span></span>  
  
 <span data-ttu-id="2de8f-173">を<xref:System.Windows.Threading.DispatcherTimer.Stop%2A>呼び<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>出す`false`と、がに設定されます。</span><span class="sxs-lookup"><span data-stu-id="2de8f-173">Calling <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> sets <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2de8f-174">ユーザー定義のデータ オブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-174">Gets or sets a user-defined data object.</span></span></summary>
        <value><span data-ttu-id="2de8f-175">ユーザー定義データ。</span><span class="sxs-lookup"><span data-stu-id="2de8f-175">The user-defined data.</span></span>  <span data-ttu-id="2de8f-176">既定値は、<see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2de8f-176">The default is <see langword="null" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.DispatcherTimer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2de8f-177">タイマー間隔が経過すると発生します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-177">Occurs when the timer interval has elapsed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2de8f-178">次の例では<xref:System.Windows.Threading.DispatcherTimer.Tick> 、イベントハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-178">The following example creates a <xref:System.Windows.Threading.DispatcherTimer.Tick> event handler.</span></span>  <span data-ttu-id="2de8f-179">イベントハンドラーは、現在<xref:System.Windows.Controls.Label>の秒を表示するを更新し、 <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>で<xref:System.Windows.Input.CommandManager>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2de8f-179">The event handler updates a <xref:System.Windows.Controls.Label> that displays the current second, and it calls <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> on the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
