<Type Name="DispatcherTimer" FullName="System.Windows.Threading.DispatcherTimer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3bc5bd6e538ac42e034d4b00fcacb3cd0db5d822" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30669206" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DispatcherTimer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DispatcherTimer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherTimer" />
  <TypeSignature Language="VB.NET" Value="Public Class DispatcherTimer" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherTimer" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b13bf-101">指定した時間の間隔で、指定した優先順位で処理される <see cref="T:System.Windows.Threading.Dispatcher" /> キューに統合されているタイマー。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b13bf-101">A timer that is integrated into the <see cref="T:System.Windows.Threading.Dispatcher" /> queue which is processed at a specified interval of time and at a specified priority.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b13bf-102"><xref:System.Windows.Threading.DispatcherTimer>の上部にある再評価すべて<xref:System.Windows.Threading.Dispatcher>ループします。</span><span class="sxs-lookup"><span data-stu-id="b13bf-102">The <xref:System.Windows.Threading.DispatcherTimer> is reevaluated at the top of every <xref:System.Windows.Threading.Dispatcher> loop.</span></span>  
  
 <span data-ttu-id="b13bf-103">タイマーが時間間隔が発生しても、時間間隔で発生する前に実行されないことが保証されるときにだけ実行する保証はありません。</span><span class="sxs-lookup"><span data-stu-id="b13bf-103">Timers are not guaranteed to execute exactly when the time interval occurs, but they are guaranteed to not execute before the time interval occurs.</span></span>  <span data-ttu-id="b13bf-104">これは、ため<xref:System.Windows.Threading.DispatcherTimer>操作は、<xref:System.Windows.Threading.Dispatcher>キューの他の操作と同様にします。</span><span class="sxs-lookup"><span data-stu-id="b13bf-104">This is because <xref:System.Windows.Threading.DispatcherTimer> operations are placed on the <xref:System.Windows.Threading.Dispatcher> queue like other operations.</span></span>  <span data-ttu-id="b13bf-105">ときに、<xref:System.Windows.Threading.DispatcherTimer>操作の実行は、他のジョブ キューとその優先度に依存します。</span><span class="sxs-lookup"><span data-stu-id="b13bf-105">When the <xref:System.Windows.Threading.DispatcherTimer> operation executes is dependent on the other jobs in the queue and their priorities.</span></span>  
  
 <span data-ttu-id="b13bf-106">場合、<xref:System.Timers.Timer?displayProperty=nameWithType>で使用される、[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]点に注意は、アプリケーション、<xref:System.Timers.Timer?displayProperty=nameWithType>別のスレッドで実行されて、[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]スレッドです。</span><span class="sxs-lookup"><span data-stu-id="b13bf-106">If a <xref:System.Timers.Timer?displayProperty=nameWithType> is used in a [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] application, it is worth noting that the <xref:System.Timers.Timer?displayProperty=nameWithType> runs on a different thread then the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="b13bf-107">オブジェクトにアクセスするために、[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]に操作を行う必要がある、スレッド、<xref:System.Windows.Threading.Dispatcher>の[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]スレッドを使用して<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-107">In order to access objects on the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] thread, it is necessary to post the operation onto the <xref:System.Windows.Threading.Dispatcher> of the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] thread using <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="b13bf-108">使用する理由、<xref:System.Windows.Threading.DispatcherTimer>ではなく、<xref:System.Timers.Timer?displayProperty=nameWithType>ことが、<xref:System.Windows.Threading.DispatcherTimer>と同じスレッドで実行されて、<xref:System.Windows.Threading.Dispatcher>と<xref:System.Windows.Threading.DispatcherPriority>に対して設定できる、<xref:System.Windows.Threading.DispatcherTimer>です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-108">Reasons for using a <xref:System.Windows.Threading.DispatcherTimer> opposed to a <xref:System.Timers.Timer?displayProperty=nameWithType> are that the <xref:System.Windows.Threading.DispatcherTimer> runs on the same thread as the <xref:System.Windows.Threading.Dispatcher> and a <xref:System.Windows.Threading.DispatcherPriority> can be set on the <xref:System.Windows.Threading.DispatcherTimer>.</span></span>  
  
 <span data-ttu-id="b13bf-109">A<xref:System.Windows.Threading.DispatcherTimer>は維持オブジェクト、オブジェクトのメソッドは、このタイマーへバインドされるたびにします。</span><span class="sxs-lookup"><span data-stu-id="b13bf-109">A <xref:System.Windows.Threading.DispatcherTimer> will keep an object alive whenever the object's methods are bound to the timer.</span></span>  
  
## Examples  
 <span data-ttu-id="b13bf-110">次の例を作成、<xref:System.Windows.Threading.DispatcherTimer>の内容を更新する、<xref:System.Windows.Controls.Label>を呼び出すと、<xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>メソッドを<xref:System.Windows.Input.CommandManager>です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-110">The following example creates a <xref:System.Windows.Threading.DispatcherTimer> that updates the contents of a <xref:System.Windows.Controls.Label> and calls the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method on the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 <span data-ttu-id="b13bf-111">A<xref:System.Windows.Threading.DispatcherTimer>という名前のオブジェクト`dispatcherTimer`を作成します。</span><span class="sxs-lookup"><span data-stu-id="b13bf-111">A <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.</span></span>  <span data-ttu-id="b13bf-112">イベント ハンドラー`dispatcherTimer_Tick`に追加、<xref:System.Windows.Threading.DispatcherTimer.Tick>のイベント`dispatcherTimer`です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-112">The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event of `dispatcherTimer`.</span></span>  <span data-ttu-id="b13bf-113"><xref:System.Windows.Threading.DispatcherTimer.Interval%2A>を使用して 1 秒に設定されている、<xref:System.Windows.Duration.TimeSpan%2A>オブジェクト、およびタイマーが開始します。</span><span class="sxs-lookup"><span data-stu-id="b13bf-113">The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.Windows.Duration.TimeSpan%2A> object, and the timer is started.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 <span data-ttu-id="b13bf-114"><xref:System.Windows.Threading.DispatcherTimer.Tick>イベント ハンドラーの更新プログラム、<xref:System.Windows.Controls.Label>現在を次に、表示して、呼び出し<xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>上、<xref:System.Windows.Input.CommandManager>です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-114">The <xref:System.Windows.Threading.DispatcherTimer.Tick> event handler updates a <xref:System.Windows.Controls.Label> that displays the current second, and it calls <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> on the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b13bf-115">
            <see cref="T:System.Windows.Threading.DispatcherTimer" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-115">Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b13bf-116">
            <see cref="T:System.Windows.Threading.DispatcherTimer" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-116">Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b13bf-117"><xref:System.Windows.Threading.DispatcherTimer> 実行されて、<xref:System.Windows.Threading.Dispatcher>で現在のスレッドの<xref:System.Windows.Threading.DispatcherPriority.Background>優先度。</span><span class="sxs-lookup"><span data-stu-id="b13bf-117"><xref:System.Windows.Threading.DispatcherTimer> runs on the <xref:System.Windows.Threading.Dispatcher> of the current thread at <xref:System.Windows.Threading.DispatcherPriority.Background> priority.</span></span>  <span data-ttu-id="b13bf-118">異なる<xref:System.Windows.Threading.Dispatcher>、次のコンス トラクターを使用して:<xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-118">To specify a different <xref:System.Windows.Threading.Dispatcher>, use the following constructor: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="b13bf-119">タイマーを起動する優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-119">The priority at which to invoke the timer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b13bf-120">指定した優先順位でタイマー イベントを処理する <see cref="T:System.Windows.Threading.DispatcherTimer" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-120">Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which processes timer events at the specified priority.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b13bf-121"><xref:System.Windows.Threading.DispatcherTimer> 実行されて、<xref:System.Windows.Threading.Dispatcher>現在のスレッド。</span><span class="sxs-lookup"><span data-stu-id="b13bf-121"><xref:System.Windows.Threading.DispatcherTimer> runs on the <xref:System.Windows.Threading.Dispatcher> of the current thread.</span></span>  <span data-ttu-id="b13bf-122">異なる<xref:System.Windows.Threading.Dispatcher>、次のコンス トラクターを使用して:<xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29>です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-122">To specify a different <xref:System.Windows.Threading.Dispatcher>, use the following constructor: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="b13bf-123">タイマーを起動する優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-123">The priority at which to invoke the timer.</span>
          </span>
        </param>
        <param name="dispatcher">
          <span data-ttu-id="b13bf-124">タイマーが関連付けられているディスパッチャー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-124">The dispatcher the timer is associated with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b13bf-125">指定した <see cref="T:System.Windows.Threading.DispatcherTimer" /> で、指定した優先順位で実行される <see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-125">Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which runs on the specified <see cref="T:System.Windows.Threading.Dispatcher" /> at the specified priority.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b13bf-126">
            <paramref name="dispatcher" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-126">
              <paramref name="dispatcher" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (TimeSpan interval, System.Windows.Threading.DispatcherPriority priority, EventHandler callback, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan interval, valuetype System.Windows.Threading.DispatcherPriority priority, class System.EventHandler callback, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(TimeSpan interval, System::Windows::Threading::DispatcherPriority priority, EventHandler ^ callback, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="callback" Type="System.EventHandler" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="interval">
          <span data-ttu-id="b13bf-127">タイマー刻み間の時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-127">The period of time between ticks.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="b13bf-128">タイマーを起動する優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-128">The priority at which to invoke the timer.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="b13bf-129">
            <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> イベントが発生したときに呼び出すイベント ハンドラー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-129">The event handler to call when the <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> event occurs.</span>
          </span>
        </param>
        <param name="dispatcher">
          <span data-ttu-id="b13bf-130">タイマーが関連付けられているディスパッチャー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-130">The dispatcher the timer is associated with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b13bf-131">指定した時間間隔、優先順位、イベント ハンドラー、および <see cref="T:System.Windows.Threading.DispatcherTimer" /> を使用する <see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-131">Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which uses the specified time interval, priority, event handler, and <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b13bf-132">
            <paramref name="callback" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-132">
              <paramref name="callback" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b13bf-133">
            <paramref name="interval" /> が 0 未満であるか、または <see cref="F:System.Int32.MaxValue" /> を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-133">
              <paramref name="interval" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b13bf-134">この <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられている <see cref="T:System.Windows.Threading.DispatcherTimer" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-134">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> associated with this <see cref="T:System.Windows.Threading.DispatcherTimer" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b13bf-135">ディスパッチャー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-135">The dispatcher.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b13bf-136"><xref:System.Windows.Threading.DispatcherTimer.Dispatcher%2A>プロパティは、作成時に決定、<xref:System.Windows.Threading.DispatcherTimer>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b13bf-136">The <xref:System.Windows.Threading.DispatcherTimer.Dispatcher%2A> property is determined at the creation of the <xref:System.Windows.Threading.DispatcherTimer> object.</span></span>  <span data-ttu-id="b13bf-137"><xref:System.Windows.Threading.Dispatcher>プロパティが現在<xref:System.Windows.Threading.Dispatcher>は作成時にしない限り、異なる<xref:System.Windows.Threading.Dispatcher>が指定されています。</span><span class="sxs-lookup"><span data-stu-id="b13bf-137">The <xref:System.Windows.Threading.Dispatcher> property is set to the current <xref:System.Windows.Threading.Dispatcher> at the time of creation unless a different <xref:System.Windows.Threading.Dispatcher> is specified.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public TimeSpan Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Interval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b13bf-138">タイマー刻みの間隔の時間を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-138">Gets or sets the period of time between timer ticks.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b13bf-139">タイマー刻み間の時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-139">The period of time between ticks.</span>
          </span>
          <span data-ttu-id="b13bf-140">既定値は、00:00:00 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-140">The default is 00:00:00.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b13bf-141">タイマーが時間間隔が発生しても、時間間隔で発生する前に実行されないことが保証されるときにだけ実行する保証はありません。</span><span class="sxs-lookup"><span data-stu-id="b13bf-141">Timers are not guaranteed to execute exactly when the time interval occurs, but they are guaranteed to not execute before the time interval occurs.</span></span>  <span data-ttu-id="b13bf-142">これは、ため<xref:System.Windows.Threading.DispatcherTimer>操作は、<xref:System.Windows.Threading.Dispatcher>キューの他の操作と同様にします。</span><span class="sxs-lookup"><span data-stu-id="b13bf-142">This is because <xref:System.Windows.Threading.DispatcherTimer> operations are placed on the <xref:System.Windows.Threading.Dispatcher> queue like other operations.</span></span>  <span data-ttu-id="b13bf-143">ときに、<xref:System.Windows.Threading.DispatcherTimer>操作の実行は、他のジョブ キューとその優先度に依存します。</span><span class="sxs-lookup"><span data-stu-id="b13bf-143">When the <xref:System.Windows.Threading.DispatcherTimer> operation executes is dependent on the other jobs in the queue and their priorities.</span></span>  
  
## Examples  
 <span data-ttu-id="b13bf-144">次の例を作成、<xref:System.Windows.Threading.DispatcherTimer>です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-144">The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.</span></span>  <span data-ttu-id="b13bf-145">新しい<xref:System.Windows.Threading.DispatcherTimer>という名前のオブジェクト`dispatcherTimer`を作成します。</span><span class="sxs-lookup"><span data-stu-id="b13bf-145">A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.</span></span>  <span data-ttu-id="b13bf-146">イベント ハンドラー`dispatcherTimer_Tick`に追加、<xref:System.Windows.Threading.DispatcherTimer.Tick>イベント。</span><span class="sxs-lookup"><span data-stu-id="b13bf-146">The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.</span></span>  <span data-ttu-id="b13bf-147"><xref:System.Windows.Threading.DispatcherTimer.Interval%2A>を使用して 1 秒に設定されている、<xref:System.TimeSpan>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b13bf-147">The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.TimeSpan> object.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b13bf-148">
            <paramref name="interval" /> が 0 より小さいか、または <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-148">
              <paramref name="interval" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b13bf-149">タイマーが実行されているかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-149">Gets or sets a value that indicates whether the timer is running.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b13bf-150">タイマーが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-150">
              <see langword="true" /> if the timer is enabled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b13bf-151">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-151">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b13bf-152"><xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> 設定する必要があります`true`の<xref:System.Windows.Threading.DispatcherTimer.Tick>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="b13bf-152"><xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> must be set to `true` for the <xref:System.Windows.Threading.DispatcherTimer.Tick> event to be raised.</span></span>  
  
 <span data-ttu-id="b13bf-153">呼び出す<xref:System.Windows.Threading.DispatcherTimer.Start%2A>設定<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>に`true`です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-153">Calling <xref:System.Windows.Threading.DispatcherTimer.Start%2A> sets <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `true`.</span></span>  
  
 <span data-ttu-id="b13bf-154">呼び出す<xref:System.Windows.Threading.DispatcherTimer.Stop%2A>設定<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>に`false`です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-154">Calling <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> sets <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `false`.</span></span>  
  
## Examples  
 <span data-ttu-id="b13bf-155">次の例を作成、<xref:System.Windows.Threading.DispatcherTimer>です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-155">The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.</span></span>  <span data-ttu-id="b13bf-156">新しい<xref:System.Windows.Threading.DispatcherTimer>という名前のオブジェクト`dispatcherTimer`を作成します。</span><span class="sxs-lookup"><span data-stu-id="b13bf-156">A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.</span></span>  <span data-ttu-id="b13bf-157">イベント ハンドラー`dispatcherTimer_Tick`に追加、<xref:System.Windows.Threading.DispatcherTimer.Tick>イベント。</span><span class="sxs-lookup"><span data-stu-id="b13bf-157">The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.</span></span>  <span data-ttu-id="b13bf-158"><xref:System.Windows.Threading.DispatcherTimer.Interval%2A>を使用して 1 秒に設定されている、<xref:System.TimeSpan>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b13bf-158">The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.TimeSpan> object.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b13bf-159">
            <see cref="T:System.Windows.Threading.DispatcherTimer" /> を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-159">Starts the <see cref="T:System.Windows.Threading.DispatcherTimer" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b13bf-160">設定<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>に`false`タイマーが開始されたときにタイマーを停止します。</span><span class="sxs-lookup"><span data-stu-id="b13bf-160">Setting <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `false` when the timer is started stops the timer.</span></span>  
  
 <span data-ttu-id="b13bf-161">設定<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>に`true`タイマーが停止した場合、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="b13bf-161">Setting <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `true` when the timer is stopped starts the timer.</span></span>  
  
 <span data-ttu-id="b13bf-162"><xref:System.Windows.Threading.DispatcherTimer.Start%2A> 設定<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>に`true`です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-162"><xref:System.Windows.Threading.DispatcherTimer.Start%2A> sets <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `true`.</span></span>  
  
 <span data-ttu-id="b13bf-163"><xref:System.Windows.Threading.DispatcherTimer.Start%2A> タイマーをリセット<xref:System.Windows.Threading.DispatcherTimer.Interval%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-163"><xref:System.Windows.Threading.DispatcherTimer.Start%2A> resets the timer <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b13bf-164">次の例を作成、<xref:System.Windows.Threading.DispatcherTimer>です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-164">The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.</span></span>  <span data-ttu-id="b13bf-165">新しい<xref:System.Windows.Threading.DispatcherTimer>という名前のオブジェクト`dispatcherTimer`を作成します。</span><span class="sxs-lookup"><span data-stu-id="b13bf-165">A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.</span></span>  <span data-ttu-id="b13bf-166">イベント ハンドラー`dispatcherTimer_Tick`に追加、<xref:System.Windows.Threading.DispatcherTimer.Tick>イベント。</span><span class="sxs-lookup"><span data-stu-id="b13bf-166">The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.</span></span>  <span data-ttu-id="b13bf-167"><xref:System.Windows.Threading.DispatcherTimer.Interval%2A>を使用して 1 秒に設定されている、<xref:System.Windows.Duration.TimeSpan%2A>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b13bf-167">The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.Windows.Duration.TimeSpan%2A> object.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b13bf-168">
            <see cref="T:System.Windows.Threading.DispatcherTimer" /> を停止します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-168">Stops the <see cref="T:System.Windows.Threading.DispatcherTimer" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b13bf-169">設定<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>に`false`タイマーが開始されたときにタイマーを停止します。</span><span class="sxs-lookup"><span data-stu-id="b13bf-169">Setting <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `false` when the timer is started stops the timer.</span></span>  
  
 <span data-ttu-id="b13bf-170">設定<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>に`true`タイマーが停止した場合、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="b13bf-170">Setting <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `true` when the timer is stopped starts the timer.</span></span>  
  
 <span data-ttu-id="b13bf-171">呼び出す<xref:System.Windows.Threading.DispatcherTimer.Stop%2A>設定<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>に`false`です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-171">Calling <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> sets <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b13bf-172">ユーザー定義のデータ オブジェクトを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-172">Gets or sets a user-defined data object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b13bf-173">ユーザー定義データ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-173">The user-defined data.</span>
          </span>
          <span data-ttu-id="b13bf-174">既定値は、<see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-174">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.DispatcherTimer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b13bf-175">タイマー間隔が経過すると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b13bf-175">Occurs when the timer interval has elapsed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b13bf-176">次の例を作成、<xref:System.Windows.Threading.DispatcherTimer.Tick>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="b13bf-176">The following example creates a <xref:System.Windows.Threading.DispatcherTimer.Tick> event handler.</span></span>  <span data-ttu-id="b13bf-177">イベント ハンドラーの更新プログラム、<xref:System.Windows.Controls.Label>現在を次に、表示して、呼び出し<xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>上、<xref:System.Windows.Input.CommandManager>です。</span><span class="sxs-lookup"><span data-stu-id="b13bf-177">The event handler updates a <xref:System.Windows.Controls.Label> that displays the current second, and it calls <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> on the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>