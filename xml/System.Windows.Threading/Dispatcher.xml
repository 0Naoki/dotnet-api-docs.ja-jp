<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a9959b283f64a75606ae7eaef9eada858c52acab" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d474a-101">スレッドの作業項目のキューを管理するためのサービスを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d474a-101">Provides services for managing the queue of work items for a thread.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-102"><xref:System.Windows.Threading.Dispatcher>特定のスレッドの作業項目の優先順位の高いキューを保持します。</span><span class="sxs-lookup"><span data-stu-id="d474a-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="d474a-103">ときに、<xref:System.Windows.Threading.Dispatcher>が作成されるスレッドでのみが<xref:System.Windows.Threading.Dispatcher>を関連付けることができる、スレッド場合でも、<xref:System.Windows.Threading.Dispatcher>がシャット ダウンします。</span><span class="sxs-lookup"><span data-stu-id="d474a-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="d474a-104">取得しようとすると、 <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> 、現在のスレッドと<xref:System.Windows.Threading.Dispatcher>、スレッドに関連付けられていない、<xref:System.Windows.Threading.Dispatcher>が作成されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="d474a-105">A<xref:System.Windows.Threading.Dispatcher>を作成するときにも作成、<xref:System.Windows.Threading.DispatcherObject>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="d474a-106">作成する場合、<xref:System.Windows.Threading.Dispatcher>バック グラウンド スレッドでスレッドを終了する前に、ディスパッチャーをシャット ダウンすることを確認します。</span><span class="sxs-lookup"><span data-stu-id="d474a-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="d474a-107">場合、<xref:System.Windows.Threading.Dispatcher>がシャット ダウン、再起動することはできません。</span><span class="sxs-lookup"><span data-stu-id="d474a-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="d474a-108">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、<xref:System.Windows.Threading.DispatcherObject>によってのみアクセスできる、<xref:System.Windows.Threading.Dispatcher>に関連付けられていること。</span><span class="sxs-lookup"><span data-stu-id="d474a-108">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="d474a-109">たとえば、バック グラウンド スレッドがの内容を更新できません、<xref:System.Windows.Controls.Button>と関連付けられている、<xref:System.Windows.Threading.Dispatcher>上、[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]スレッドです。</span><span class="sxs-lookup"><span data-stu-id="d474a-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="d474a-110">バック グラウンド スレッドにアクセスするために、<xref:System.Windows.Controls.ContentControl.Content%2A>のプロパティ、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、<xref:System.Windows.Threading.Dispatcher>に関連付けられている、[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]スレッドです。</span><span class="sxs-lookup"><span data-stu-id="d474a-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="d474a-111">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="d474a-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="d474a-113">操作は、のキューに追加される、<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-114">場合<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>で呼び出されると、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、返されたの status プロパティが<xref:System.Windows.Threading.DispatcherOperation>に設定されている<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="d474a-115">すべてのメソッドの<xref:System.Windows.Threading.Dispatcher>の例外を除いて<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>は、フリー スレッドです。</span><span class="sxs-lookup"><span data-stu-id="d474a-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="d474a-116">派生したオブジェクト<xref:System.Windows.Threading.DispatcherObject>スレッド アフィニティがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="d474a-117">派生したオブジェクト<xref:System.Windows.Freezable>はフリー スレッドは、固定したときにします。</span><span class="sxs-lookup"><span data-stu-id="d474a-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="d474a-118">詳細については、「[Freezable オブジェクトの概要](~/docs/framework/wpf/advanced/freezable-objects-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d474a-118">For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d474a-119">次の例に、操作を配置する方法を示しています、<xref:System.Windows.Threading.Dispatcher>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="d474a-120">この例の完全なソース コードを参照してください。[実行時間の長い計算のサンプルを使用して、シングル スレッド アプリケーション](http://go.microsoft.com/fwlink/?LinkID=160038)です。</span><span class="sxs-lookup"><span data-stu-id="d474a-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="d474a-121">最初に、デリゲートの引数を受け入れないが作成されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="d474a-122">次に、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="d474a-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="d474a-123">この呼び出しを<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>2 つのパラメーター: に設定されている優先度<xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>、デリゲートのインスタンスを経由で渡されるコールバックと`NextPrimeDelegate`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d474a-124">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、デリゲートを非同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-124">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-125">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-125">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="d474a-126">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-126">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="d474a-127">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-127">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="d474a-128">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-128">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="d474a-129"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-129"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="d474a-130">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-130">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-131"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-131"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="d474a-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返します、<xref:System.Windows.Threading.DispatcherOperation>デリゲートは、キューでは、イベントの場合、デリゲートと対話するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d474a-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="d474a-133"><xref:System.Windows.Threading.DispatcherOperation>によって返されるオブジェクト<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>など、指定したデリゲートと対話するいくつかの方法で使用できます。</span><span class="sxs-lookup"><span data-stu-id="d474a-133">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="d474a-134">変更、<xref:System.Windows.Threading.DispatcherPriority>デリゲートの保留中は実行のイベント キューします。</span><span class="sxs-lookup"><span data-stu-id="d474a-134">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="d474a-135">デリゲートをイベント キューから削除しています。</span><span class="sxs-lookup"><span data-stu-id="d474a-135">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="d474a-136">返すデリゲートを待機しています。</span><span class="sxs-lookup"><span data-stu-id="d474a-136">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="d474a-137">その後、デリゲートが返された値を取得するが実行されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-137">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="d474a-138">複数<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>同時呼び出しが行われる<xref:System.Windows.Threading.DispatcherPriority>、これらは、呼び出しが行われた順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-138">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="d474a-139">場合<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>で呼び出されると、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、返されたの status プロパティが<xref:System.Windows.Threading.DispatcherOperation>に設定されている<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-139">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="d474a-140">
            <c>args</c> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-140">The delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="d474a-141">特定のメソッドに引数として渡すオブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-141">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="d474a-142">
            <see langword="null" /> の場合があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-142">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-143">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が作成されたスレッドで、指定した引数で指定したデリゲートを非同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-143">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-144">
            <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-144">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-145"><xref:System.Windows.Threading.DispatcherOperation>によって返されるオブジェクト<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>など、指定したデリゲートと対話するいくつかの方法で使用できます。</span><span class="sxs-lookup"><span data-stu-id="d474a-145">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="d474a-146">変更、<xref:System.Windows.Threading.DispatcherPriority>デリゲートの保留中は実行のイベント キューします。</span><span class="sxs-lookup"><span data-stu-id="d474a-146">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="d474a-147">デリゲートをイベント キューから削除しています。</span><span class="sxs-lookup"><span data-stu-id="d474a-147">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="d474a-148">返すデリゲートを待機しています。</span><span class="sxs-lookup"><span data-stu-id="d474a-148">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="d474a-149">その後、デリゲートが返された値を取得するが実行されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-149">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="d474a-150"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-150"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="d474a-151">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-151">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="d474a-152">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-152">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="d474a-153">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-153">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="d474a-154">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-154">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="d474a-155"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-155"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="d474a-156">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-156">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-157">場合<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>で呼び出されると、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、返されたの status プロパティが<xref:System.Windows.Threading.DispatcherOperation>に設定されている<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-157">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="d474a-158">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-158">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d474a-159">引数を受け取らないメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-159">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-160">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定したデリゲートを指定した優先順位で非同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-160">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-161">
            <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-161">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-162">複数<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>同時呼び出しが行われる<xref:System.Windows.Threading.DispatcherPriority>、これらは、呼び出しが行われた順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-162">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="d474a-163"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返します、<xref:System.Windows.Threading.DispatcherOperation>デリゲートは、キューでは、イベントの場合、デリゲートと対話するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d474a-163"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="d474a-164"><xref:System.Windows.Threading.DispatcherOperation>によって返されるオブジェクト<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>など、指定したデリゲートと対話するいくつかの方法で使用できます。</span><span class="sxs-lookup"><span data-stu-id="d474a-164">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="d474a-165">変更、<xref:System.Windows.Threading.DispatcherPriority>デリゲートの保留中は実行のイベント キューします。</span><span class="sxs-lookup"><span data-stu-id="d474a-165">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="d474a-166">デリゲートをイベント キューから削除しています。</span><span class="sxs-lookup"><span data-stu-id="d474a-166">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="d474a-167">返すデリゲートを待機しています。</span><span class="sxs-lookup"><span data-stu-id="d474a-167">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="d474a-168">その後、デリゲートが返された値を取得するが実行されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-168">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="d474a-169"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-169"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="d474a-170">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-170">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="d474a-171">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-171">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="d474a-172">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-172">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="d474a-173">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-173">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="d474a-174"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-174"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="d474a-175">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-175">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-176">場合<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>で呼び出されると、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、返されたの status プロパティが<xref:System.Windows.Threading.DispatcherOperation>に設定されている<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-176">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d474a-177">次の例に、操作を配置する方法を示しています、<xref:System.Windows.Threading.Dispatcher>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-177">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="d474a-178">この例の完全なソース コードを参照してください。[実行時間の長い計算のサンプルを使用して、シングル スレッド アプリケーション](http://go.microsoft.com/fwlink/?LinkID=160038)です。</span><span class="sxs-lookup"><span data-stu-id="d474a-178">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="d474a-179">最初に、デリゲートの引数を受け入れないが作成されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-179">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="d474a-180">次に、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="d474a-180">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="d474a-181">すべて<xref:System.Windows.Threading.DispatcherObject>を返すプロパティを持つ、<xref:System.Windows.Threading.Dispatcher>目的に関連付けられている<xref:System.Windows.Threading.Dispatcher>クエリを実行して取得した、 <xref:System.Windows.Threading.DispatcherObject>、ここでは、<xref:System.Windows.Controls.Button>という名前`startStopButton`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-181">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="d474a-182">呼び出し<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>2 つのパラメーター: に設定されている優先度<xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>、およびデリゲートのインスタンスを経由で渡されたコールバック`NextPrimeDelegate`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-182">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d474a-183">
            <paramref name="method" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-183">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="d474a-184">
            <paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-184">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="d474a-185">
            <c>args</c> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-185">The delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="d474a-186">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-186">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="d474a-187">特定のメソッドに引数として渡すオブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-187">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="d474a-188">
            <see langword="null" /> の場合があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-188">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-189">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が作成されたスレッドで、指定した引数を使用して指定したデリゲートを、指定した優先順位で非同期に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-189">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-190">
            <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-190">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-191"><xref:System.Windows.Threading.DispatcherOperation>によって返されるオブジェクト<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>など、指定したデリゲートと対話するいくつかの方法で使用できます。</span><span class="sxs-lookup"><span data-stu-id="d474a-191">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="d474a-192">変更、<xref:System.Windows.Threading.DispatcherPriority>デリゲートの保留中は実行のイベント キューします。</span><span class="sxs-lookup"><span data-stu-id="d474a-192">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="d474a-193">デリゲートをイベント キューから削除しています。</span><span class="sxs-lookup"><span data-stu-id="d474a-193">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="d474a-194">返すデリゲートを待機しています。</span><span class="sxs-lookup"><span data-stu-id="d474a-194">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="d474a-195">その後、デリゲートが返された値を取得するが実行されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-195">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="d474a-196"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-196"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="d474a-197">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-197">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="d474a-198">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-198">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="d474a-199">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-199">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="d474a-200">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-200">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="d474a-201"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-201"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="d474a-202">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-202">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-203">場合<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>で呼び出されると、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、返されたの status プロパティが<xref:System.Windows.Threading.DispatcherOperation>に設定されている<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-203">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="d474a-204">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-204">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d474a-205">引数を 1 つ受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-205">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="d474a-206">指定したメソッドに引数として渡すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-206">The object to pass as an argument to the specified method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-207">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で非同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-207">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-208">
            <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-208">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-209">`Arg` 指定できます`null`引数が必要ない場合。</span><span class="sxs-lookup"><span data-stu-id="d474a-209">`Arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="d474a-210"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返します、<xref:System.Windows.Threading.DispatcherOperation>デリゲートは、キューでは、イベントの場合、デリゲートと対話するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d474a-210"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="d474a-211"><xref:System.Windows.Threading.DispatcherOperation>によって返されるオブジェクト<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>など、指定したデリゲートと対話するいくつかの方法で使用できます。</span><span class="sxs-lookup"><span data-stu-id="d474a-211">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="d474a-212">変更、<xref:System.Windows.Threading.DispatcherPriority>デリゲートの保留中は実行のイベント キューします。</span><span class="sxs-lookup"><span data-stu-id="d474a-212">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="d474a-213">デリゲートをイベント キューから削除しています。</span><span class="sxs-lookup"><span data-stu-id="d474a-213">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="d474a-214">返すデリゲートを待機しています。</span><span class="sxs-lookup"><span data-stu-id="d474a-214">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="d474a-215">その後、デリゲートが返された値を取得するが実行されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-215">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="d474a-216"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-216"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="d474a-217">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-217">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="d474a-218">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-218">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="d474a-219">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-219">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="d474a-220">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-220">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="d474a-221"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-221"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="d474a-222">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-222">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-223">複数<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>同時呼び出しが行われる<xref:System.Windows.Threading.DispatcherPriority>、これらは、呼び出しが行われた順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-223">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="d474a-224">場合<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>で呼び出されると、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、返されたの status プロパティが<xref:System.Windows.Threading.DispatcherOperation>に設定されている<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-224">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d474a-225">次の例に、操作を配置する方法を示しています、<xref:System.Windows.Threading.Dispatcher>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-225">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="d474a-226">最初に、この場合は、文字列の 1 つの引数がデリゲートが作成されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-226">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="d474a-227">次に、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="d474a-227">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="d474a-228">すべて<xref:System.Windows.Threading.DispatcherObject>を返すプロパティを持つ、<xref:System.Windows.Threading.Dispatcher>目的に関連付けられている<xref:System.Windows.Threading.Dispatcher>クエリを実行して取得した、 <xref:System.Windows.Threading.DispatcherObject>、ここでは、<xref:System.Windows.Controls.Grid>という名前`tomorrowsWeather`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-228">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="d474a-229">呼び出し<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29>3 つのパラメーターを受け取る: に設定されている優先度<xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; は、デリゲートのインスタンスを経由で渡されるコールバック`OneArgDelegate`; という名前の文字列と`weather`コールバックの引数はします。</span><span class="sxs-lookup"><span data-stu-id="d474a-229">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d474a-230">
            <paramref name="method" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-230">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="d474a-231">
            <paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-231">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="d474a-232">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-232">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d474a-233">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-233">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="d474a-234">指定したメソッドに引数として渡すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-234">The object to pass as an argument to the specified method.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="d474a-235">指定したメソッドに引数として渡すオブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-235">An array of objects to pass as arguments to the specified method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-236">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した一連の引数を使用して、指定したデリゲートを指定した優先順位で非同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-236">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-237">
            <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、<see cref="T:System.Windows.Threading.Dispatcher" /> キューで実行が保留になっているデリゲートと対話できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-237">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-238">`arg`パラメーターを指定できます`null`引数が必要ない場合。</span><span class="sxs-lookup"><span data-stu-id="d474a-238">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="d474a-239"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返します、<xref:System.Windows.Threading.DispatcherOperation>デリゲートは、キューでは、イベントの場合、デリゲートと対話するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d474a-239"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="d474a-240"><xref:System.Windows.Threading.DispatcherOperation>によって返されるオブジェクト<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>など、指定したデリゲートと対話するいくつかの方法で使用できます。</span><span class="sxs-lookup"><span data-stu-id="d474a-240">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="d474a-241">変更、<xref:System.Windows.Threading.DispatcherPriority>デリゲートの保留中は実行のイベント キューします。</span><span class="sxs-lookup"><span data-stu-id="d474a-241">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="d474a-242">デリゲートをイベント キューから削除しています。</span><span class="sxs-lookup"><span data-stu-id="d474a-242">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="d474a-243">返すデリゲートを待機しています。</span><span class="sxs-lookup"><span data-stu-id="d474a-243">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="d474a-244">その後、デリゲートが返された値を取得するが実行されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-244">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="d474a-245"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-245"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="d474a-246">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-246">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="d474a-247">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-247">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="d474a-248">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-248">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="d474a-249">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-249">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="d474a-250"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-250"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="d474a-251">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-251">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-252">複数<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>同時呼び出しが行われる<xref:System.Windows.Threading.DispatcherPriority>、これらは、呼び出しが行われた順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-252">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="d474a-253">場合<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>で呼び出されると、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、返されたの status プロパティが<xref:System.Windows.Threading.DispatcherOperation>に設定されている<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-253">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d474a-254">
            <paramref name="method" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-254">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="d474a-255">
            <see cref="T:System.Windows.Threading.DispatcherPriority" /> が有効な優先順位ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-255">
              <see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="d474a-256">ディスパッチャーのシャットダウンを開始する優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-256">The priority at which to begin shutting down the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-257">
            <see cref="T:System.Windows.Threading.Dispatcher" /> のシャットダウンを非同期的に開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-257">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-258"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> 無制限の UI のアクセス許可を要求します。</span><span class="sxs-lookup"><span data-stu-id="d474a-258"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="d474a-259">ときに、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、起動、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>に設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-259">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="d474a-260"><xref:System.Windows.Threading.Dispatcher>シャット ダウンしない完全にイベント キューのアンワインドするまでです。</span><span class="sxs-lookup"><span data-stu-id="d474a-260">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="d474a-261">ディスパッチャーは、シャット ダウンが完了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>プロパティに設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-261">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="d474a-262">シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-262">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="d474a-263">ディスパッチャーをシャット ダウンします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-263">for shutting down the dispatcher.</span>
          </span>
          <span data-ttu-id="d474a-264">関連付けられた列挙は:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-264">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d474a-265">呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられたスレッドであるかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-265">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-266">呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられたスレッドである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-266">
              <see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-267">のみ、<xref:System.Windows.Threading.Dispatcher>を<xref:System.Windows.Threading.DispatcherObject>が作成されるオブジェクトへのアクセス可能性がありますにします。</span><span class="sxs-lookup"><span data-stu-id="d474a-267">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="d474a-268">使用して<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>別のスレッドからオブジェクトにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="d474a-268">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="d474a-269"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 任意のスレッドから呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="d474a-269"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="d474a-270">違い<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>と<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>は<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>呼び出し元のスレッドがへのアクセスを持っているかどうかを示すブール値を返します、<xref:System.Windows.Threading.Dispatcher>と<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d474a-270">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d474a-271">次の例で<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>スレッドがへのアクセスを持つかどうかを決定する、<xref:System.Windows.Controls.Button>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-271">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="d474a-272"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>メソッドを<xref:System.Windows.Threading.Dispatcher>に関連付けられている、<xref:System.Windows.Controls.Button>スレッドへのアクセスを確認するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-272">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="d474a-273">呼び出し元のスレッドがアクセスできるよう、 <xref:System.Windows.Threading.Dispatcher>、<xref:System.Windows.Controls.Button>のメンバーにアクセスして更新、 <xref:System.Windows.Controls.Button>、それ以外のデリゲートを受け入れ、<xref:System.Windows.Controls.Button>を引数としては上に配置されます、<xref:System.Windows.Threading.Dispatcher>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-273">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="d474a-274"><xref:System.Windows.Threading.Dispatcher>の更新の作業を委任、<xref:System.Windows.Controls.Button>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-274">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d474a-275">現在実行中のスレッドの <see cref="T:System.Windows.Threading.Dispatcher" /> を取得します。そのスレッドにディスパッチャーが関連付けられていない場合は、新しい <see cref="T:System.Windows.Threading.Dispatcher" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-275">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d474a-276">現在のスレッドに関連付けられているディスパッチャー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-276">The dispatcher associated with the current thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-277">場合、 <xref:System.Windows.Threading.Dispatcher> 、現在のスレッドに関連付けられていない新しい<xref:System.Windows.Threading.Dispatcher>が作成されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-277">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="d474a-278">これは、<xref:System.Windows.Threading.Dispatcher.FromThread%2A> メソッドには該当しません。</span><span class="sxs-lookup"><span data-stu-id="d474a-278">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="d474a-279"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> 返されます`null`指定されたスレッドに関連付けられているディスパッチャーがないかどうか。</span><span class="sxs-lookup"><span data-stu-id="d474a-279"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d474a-280">
            <see cref="T:System.Windows.Threading.Dispatcher" /> キューの処理を無効にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-280">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-281">ディスパッチャー処理を再度有効にするために使用される構造体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-281">A structure used to re-enable dispatcher processing.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-282">ディスパッチャーの処理を無効にすることは、関連のない再入の可能性を排除するためのものでは、高度な方法です。</span><span class="sxs-lookup"><span data-stu-id="d474a-282">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="d474a-283">処理を無効にする場合の影響は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="d474a-283">The effects of disabling processing are as follows:</span></span>  
  
-   [!INCLUDE[TLA2#tla_clr#initcap](~/includes/tla2sharptla-clrsharpinitcap-md.md)]<span data-ttu-id="d474a-284"> ロックはないメッセージをポンプを内部的にします。</span><span class="sxs-lookup"><span data-stu-id="d474a-284"> locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="d474a-285"><xref:System.Windows.Threading.DispatcherFrame> オブジェクトは、プッシュは許可されません。</span><span class="sxs-lookup"><span data-stu-id="d474a-285"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="d474a-286">メッセージの処理が許可されていません。</span><span class="sxs-lookup"><span data-stu-id="d474a-286">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="d474a-287"><xref:System.Windows.Threading.DispatcherProcessingDisabled>構造体<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>を返しますが呼び出されるとは、ディスパッチャーの処理を再度有効に使用できます。</span><span class="sxs-lookup"><span data-stu-id="d474a-287">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="d474a-288">呼び出す<xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A>上、<xref:System.Windows.Threading.DispatcherProcessingDisabled>構造が再処理を有効します。</span><span class="sxs-lookup"><span data-stu-id="d474a-288">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="d474a-289"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> スレッドでのみ呼び出すことができます、<xref:System.Windows.Threading.Dispatcher>に関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-289"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d474a-290">次の例では、ディスパッチャーの処理を無効にして、ディスパッチャーの処理を再度有効にする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d474a-290">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="d474a-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 呼び出される、**を使用して**ステートメントです。</span><span class="sxs-lookup"><span data-stu-id="d474a-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="d474a-292"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 返します、<xref:System.Windows.Threading.DispatcherProcessingDisabled>に破棄されたときに、オブジェクトとして使用される構造体、**を使用して**ブロックが完了するとします。</span><span class="sxs-lookup"><span data-stu-id="d474a-292"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="d474a-293">ときに<xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A>で呼び出されると、<xref:System.Windows.Threading.DispatcherProcessingDisabled>構造体、ディスパッチャーの処理を再度有効にします。</span><span class="sxs-lookup"><span data-stu-id="d474a-293">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d474a-294">入れ子になったフレームを含むすべてのフレームを閉じるように要求します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-294">Requests that all frames exit, including nested frames.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="d474a-295">このメソッドを呼び出す。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-295">for calling this method.</span>
          </span>
          <span data-ttu-id="d474a-296">関連付けられた列挙は:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-296">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread">
          <span data-ttu-id="d474a-297">
            <see cref="T:System.Windows.Threading.Dispatcher" /> の取得元のスレッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-297">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-298">指定したスレッドの <see cref="T:System.Windows.Threading.Dispatcher" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-298">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-299">
            <paramref name="thread" /> のディスパッチャー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-299">The dispatcher for <paramref name="thread" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-300">ディスパッチャーが使用できない場合、指定されたスレッドの`null`が返されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-300">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="d474a-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> 作成されません、<xref:System.Windows.Threading.Dispatcher>がないスレッドで、<xref:System.Windows.Threading.Dispatcher>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="d474a-302">新しい<xref:System.Windows.Threading.Dispatcher>をまだ持たないスレッドで作成された、<xref:System.Windows.Threading.Dispatcher>を取得しようとすると、<xref:System.Windows.Threading.Dispatcher>を使用して、<xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d474a-302">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d474a-303">
            <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを完了したかどうかを確認します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-303">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d474a-304">ディスパッチャーがシャットダウンを完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-304">
              <see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-305">ときに、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、起動、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>に設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-305">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="d474a-306"><xref:System.Windows.Threading.Dispatcher>イベント キューのアンワインドするまで完全にシャット ダウンをしません。</span><span class="sxs-lookup"><span data-stu-id="d474a-306">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="d474a-307">ディスパッチャーは、シャット ダウンが完了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>プロパティに設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-307">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="d474a-308">シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-308">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d474a-309">
            <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンしているかどうかを確認します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-309">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d474a-310">
            <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを開始した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-310">
              <see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-311">ときに、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、起動、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>に設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-311">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="d474a-312"><xref:System.Windows.Threading.Dispatcher>シャット ダウンしない完全にイベント キューのアンワインドするまでです。</span><span class="sxs-lookup"><span data-stu-id="d474a-312">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="d474a-313">ディスパッチャーは、シャット ダウンが完了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>プロパティに設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-313">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="d474a-314">シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-314">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d474a-315">
            <see cref="T:System.Windows.Threading.Dispatcher" /> に関する追加イベント情報を提供するフックのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-315">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d474a-316">この <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられたフック。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-316">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-317"><xref:System.Windows.Threading.DispatcherHooks>クラスに関する追加のイベント情報を提供する、 <xref:System.Windows.Threading.Dispatcher>、場合など、<xref:System.Windows.Threading.Dispatcher>がアクティブでないか、操作が完了しました。</span><span class="sxs-lookup"><span data-stu-id="d474a-317">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="d474a-318">このプロパティを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-318">for getting this property.</span>
          </span>
          <span data-ttu-id="d474a-319">関連付けられた列挙は:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-319">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d474a-320">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定したデリゲートを同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-320">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-321">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-321">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="d474a-322">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-322">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="d474a-323">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-323">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="d474a-324">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-324">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="d474a-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="d474a-326">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-326">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-327"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</span><span class="sxs-lookup"><span data-stu-id="d474a-327"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d474a-328">次の例にデリゲートを配置する、<xref:System.Windows.Threading.Dispatcher>で<xref:System.Windows.Threading.DispatcherPriority.Normal>を使用して<xref:System.Windows.Threading.Dispatcher.Invoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-328">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="d474a-329">ディスパッチャーを通じて呼び出すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-329">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-330">
            <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-330">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="d474a-331">ディスパッチャーを通じて呼び出すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-331">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="d474a-332">
            <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-332">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-333">
            <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-333">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="d474a-334">
            <c>args</c> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-334">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="d474a-335">特定のメソッドに引数として渡すオブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-335">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="d474a-336">
            <see langword="null" /> の場合があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-336">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-337">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-337">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-338">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-338">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-339">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-339">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="d474a-340">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-340">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="d474a-341">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-341">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="d474a-342">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-342">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="d474a-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="d474a-344">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-344">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-345"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</span><span class="sxs-lookup"><span data-stu-id="d474a-345"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="d474a-346">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-346">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d474a-347">引数を受け取らないメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-347">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-348">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定したデリゲートを指定した優先順位で同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-348">Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-349">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-349">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-350">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-350">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="d474a-351">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-351">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="d474a-352">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-352">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="d474a-353">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-353">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="d474a-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="d474a-355">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-355">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-356"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</span><span class="sxs-lookup"><span data-stu-id="d474a-356"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d474a-357">次の例にデリゲートを配置する、<xref:System.Windows.Threading.Dispatcher>で<xref:System.Windows.Threading.DispatcherPriority.Normal>を使用して<xref:System.Windows.Threading.Dispatcher.Invoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-357">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d474a-358">
            <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-358">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="d474a-359">
            <paramref name="priority" /> が有効な優先順位ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-359">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d474a-360">
            <paramref name="method" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-360">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="d474a-361">ディスパッチャーを通じて呼び出すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-361">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="d474a-362">
            <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-362">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="d474a-363">アクションをキャンセルするかどうかを示すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-363">An object that indicates whether to cancel the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-364">
            <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-364">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="d474a-365">
            <c>args</c> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-365">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="d474a-366">操作が完了するまでの最大待機時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-366">The maximum amount of time to wait for the operation to complete.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="d474a-367">特定のメソッドに引数として渡すオブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-367">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="d474a-368">
            <see langword="null" /> の場合があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-368">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-369">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で、指定した期間内に同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-369">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-370">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-370">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-371">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-371">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="d474a-372">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-372">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="d474a-373">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-373">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="d474a-374">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-374">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="d474a-375"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-375"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="d474a-376">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-376">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-377"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</span><span class="sxs-lookup"><span data-stu-id="d474a-377"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="d474a-378">
            <c>args</c> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-378">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="d474a-379">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-379">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="d474a-380">特定のメソッドに引数として渡すオブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-380">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="d474a-381">
            <see langword="null" /> の場合があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-381">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-382">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-382">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-383">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-383">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-384">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-384">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="d474a-385">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-385">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="d474a-386">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-386">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="d474a-387">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-387">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="d474a-388"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-388"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="d474a-389">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-389">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-390"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</span><span class="sxs-lookup"><span data-stu-id="d474a-390"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="d474a-391">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-391">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d474a-392">引数を 1 つ受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-392">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="d474a-393">指定したメソッドに引数として渡すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-393">An object to pass as an argument to the given method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-394">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-394">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-395">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-395">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-396">`Arg` 指定できます`null`引数が必要ない場合</span><span class="sxs-lookup"><span data-stu-id="d474a-396">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="d474a-397">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-397">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="d474a-398">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-398">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="d474a-399">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-399">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="d474a-400">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-400">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="d474a-401"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-401"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="d474a-402">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-402">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-403"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</span><span class="sxs-lookup"><span data-stu-id="d474a-403"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d474a-404">
            <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-404">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="d474a-405">
            <paramref name="priority" /> が有効な優先順位ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-405">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d474a-406">
            <paramref name="method" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-406">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="d474a-407">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-407">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="d474a-408">操作が完了するまでの最大待機時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-408">The maximum time to wait for the operation to finish.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d474a-409">引数を受け取らないメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-409">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-410">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が作成されたスレッドで、指定したタイムアウトの値を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-410">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-411">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-411">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-412">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-412">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="d474a-413">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-413">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="d474a-414">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-414">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="d474a-415">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-415">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="d474a-416"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-416"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="d474a-417">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-417">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-418"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</span><span class="sxs-lookup"><span data-stu-id="d474a-418"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="d474a-419">ディスパッチャーを通じて呼び出すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-419">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="d474a-420">
            <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-420">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="d474a-421">アクションをキャンセルするかどうかを示すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-421">An object that indicates whether to cancel the action.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="d474a-422">操作が開始されるまでの最小待機時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-422">The minimum amount of time to wait for the operation to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-423">
            <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-423">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="d474a-424">
            <c>args</c> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-424">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="d474a-425">操作が完了するまでの最大待機時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-425">The maximum amount of time to wait for the operation to complete.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="d474a-426">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-426">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="d474a-427">特定のメソッドに引数として渡すオブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-427">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="d474a-428">
            <see langword="null" /> の場合があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-428">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-429">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で、指定した期間内に同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-429">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-430">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-430">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-431">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-431">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="d474a-432">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-432">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="d474a-433">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-433">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="d474a-434">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-434">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="d474a-435"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-435"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="d474a-436">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-436">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-437"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</span><span class="sxs-lookup"><span data-stu-id="d474a-437"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="d474a-438">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-438">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d474a-439">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-439">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="d474a-440">指定したメソッドに引数として渡すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-440">An object to pass as an argument to the given method.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="d474a-441">特定のメソッドに引数として渡すオブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-441">An array of objects to pass as arguments to the given method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-442">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-442">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-443">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-443">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-444">`Arg` 指定できます`null`引数が必要ない場合</span><span class="sxs-lookup"><span data-stu-id="d474a-444">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="d474a-445">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-445">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="d474a-446">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-446">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="d474a-447">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-447">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="d474a-448">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-448">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="d474a-449"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-449"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="d474a-450">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-450">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-451"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</span><span class="sxs-lookup"><span data-stu-id="d474a-451"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d474a-452">
            <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-452">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="d474a-453">
            <paramref name="priority" /> が有効な優先順位ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-453">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d474a-454">
            <paramref name="method" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-454">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="d474a-455">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-455">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="d474a-456">操作が完了するまでの最大待機時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-456">The maximum time to wait for the operation to finish.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d474a-457">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-457">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="d474a-458">指定したメソッドに引数として渡すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-458">An object to pass as an argument to the given method.</span>
          </span>
          <span data-ttu-id="d474a-459">引数が必要ない場合は、<see langword="null" /> を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-459">This can be <see langword="null" /> if no arguments are needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-460">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-460">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-461">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-461">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-462">`Arg` 指定できます`null`引数が必要ない場合</span><span class="sxs-lookup"><span data-stu-id="d474a-462">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="d474a-463">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-463">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="d474a-464">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-464">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="d474a-465">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-465">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="d474a-466">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-466">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="d474a-467"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-467"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="d474a-468">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-468">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-469"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</span><span class="sxs-lookup"><span data-stu-id="d474a-469"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d474a-470">
            <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-470">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="d474a-471">
            <paramref name="priority" /> が有効な優先順位ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-471">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d474a-472">
            <paramref name="method" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-472">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="d474a-473">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-473">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="d474a-474">操作が完了するまでの最大待機時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-474">The maximum time to wait for the operation to finish.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d474a-475">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-475">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="d474a-476">指定したメソッドに引数として渡すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-476">An object to pass as an argument to the specified method.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="d474a-477">指定したメソッドに引数として渡すオブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-477">An array of objects to pass as arguments to the specified method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-478">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-478">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-479">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-479">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-480">`Arg` 指定できます`null`引数が必要ない場合。</span><span class="sxs-lookup"><span data-stu-id="d474a-480">`Arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="d474a-481">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります。</span><span class="sxs-lookup"><span data-stu-id="d474a-481">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="d474a-482">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-482">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="d474a-483">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d474a-483">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="d474a-484">いずれかを使用してこれを実現<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-484">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="d474a-485"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です。</span><span class="sxs-lookup"><span data-stu-id="d474a-485"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="d474a-486">操作は、イベント キューに追加の<xref:System.Windows.Threading.Dispatcher>内の指定した<xref:System.Windows.Threading.DispatcherPriority>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-486">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="d474a-487"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</span><span class="sxs-lookup"><span data-stu-id="d474a-487"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d474a-488">
            <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-488">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="d474a-489">
            <paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-489">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d474a-490">
            <paramref name="method" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-490">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="d474a-491">指定されたデリゲートの戻り値の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-491">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="d474a-492">ディスパッチャーを通じて呼び出すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-492">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-493">
            <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-493">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-494">によって返される値`callback`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-494">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="d474a-495">指定されたデリゲートの戻り値の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-495">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="d474a-496">ディスパッチャーを通じて呼び出すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-496">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="d474a-497">
            <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-497">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-498">
            <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-498">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-499">によって返される値`callback`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-499">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="d474a-500">指定されたデリゲートの戻り値の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-500">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="d474a-501">ディスパッチャーを通じて呼び出すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-501">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="d474a-502">
            <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-502">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="d474a-503">操作をキャンセルするかどうかを示すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-503">An object that indicates whether to cancel the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-504">
            <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-504">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-505">によって返される値`callback`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-505">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="d474a-506">指定されたデリゲートの戻り値の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-506">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="d474a-507">ディスパッチャーを通じて呼び出すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-507">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="d474a-508">
            <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-508">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="d474a-509">操作をキャンセルするかどうかを示すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-509">An object that indicates whether to cancel the operation.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="d474a-510">操作が開始されるまでの最小待機時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-510">The minimum amount of time to wait for the operation to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-511">
            <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-511">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-512">によって返される値`callback`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-512">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d474a-513">
            <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定したデリゲートを非同期に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-513">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="d474a-514">ディスパッチャーを通じて呼び出すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-514">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-515">
            <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を非同期に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-515">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-516">
            <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-516">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="d474a-517">ディスパッチャーを通じて呼び出すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-517">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="d474a-518">
            <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-518">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-519">
            <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-519">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-520">
            <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-520">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="d474a-521">ディスパッチャーを通じて呼び出すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-521">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="d474a-522">
            <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-522">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="d474a-523">アクションをキャンセルするかどうかを示すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-523">An object that indicates whether to cancel the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-524">
            <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-524">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-525">
            <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-525">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="d474a-526">指定されたデリゲートの戻り値の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-526">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="d474a-527">ディスパッチャーを通じて呼び出すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-527">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-528">
            <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を非同期に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-528">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-529">
            <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-529">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="d474a-530">指定されたデリゲートの戻り値の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-530">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="d474a-531">ディスパッチャーを通じて呼び出すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-531">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="d474a-532">
            <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-532">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-533">
            <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-533">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-534">
            <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-534">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="d474a-535">指定されたデリゲートの戻り値の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-535">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="d474a-536">ディスパッチャーを通じて呼び出すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-536">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="d474a-537">
            <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-537">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="d474a-538">操作をキャンセルするかどうかを示すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-538">An object that indicates whether to cancel the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-539">
            <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-539">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-540">
            <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-540">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d474a-541">
            <see cref="T:System.Windows.Threading.Dispatcher" /> のシャットダウン プロセスを同期的に開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-541">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-542"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> 無制限の UI のアクセス許可を要求します。</span><span class="sxs-lookup"><span data-stu-id="d474a-542"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="d474a-543">ときに、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、起動、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>に設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-543">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="d474a-544"><xref:System.Windows.Threading.Dispatcher>シャット ダウンしない完全にイベント キューのアンワインドするまでです。</span><span class="sxs-lookup"><span data-stu-id="d474a-544">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="d474a-545">ディスパッチャーは、シャット ダウンが完了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>プロパティに設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-545">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="d474a-546">シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-546">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="d474a-547">ディスパッチャーをシャット ダウンします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-547">for shutting down the dispatcher.</span>
          </span>
          <span data-ttu-id="d474a-548">関連付けられた列挙は:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-548">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame">
          <span data-ttu-id="d474a-549">ディスパッチャーが処理するフレーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-549">The frame for the dispatcher to process.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-550">実行ループに入ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-550">Enters an execute loop.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-551">A<xref:System.Windows.Threading.DispatcherFrame>保留中の作業項目を処理するループを表します。</span><span class="sxs-lookup"><span data-stu-id="d474a-551">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="d474a-552">ディスパッチャーは、ループ内での作業項目のキューを処理します。</span><span class="sxs-lookup"><span data-stu-id="d474a-552">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="d474a-553">ループは、フレームと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="d474a-553">The loop is referred to as a frame.</span></span>  <span data-ttu-id="d474a-554">初期のループが呼び出すことによって、アプリケーションによって開始通常<xref:System.Windows.Threading.Dispatcher.Run%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-554">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="d474a-555"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> パラメーターによって表されるループに入る`frame`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-555"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="d474a-556">ループの繰り返しごとに、<xref:System.Windows.Threading.Dispatcher>チェック、<xref:System.Windows.Threading.DispatcherFrame.Continue%2A>プロパティを<xref:System.Windows.Threading.DispatcherFrame>ループを続行するかどうか、または停止したかどうかを決めるクラスをします。</span><span class="sxs-lookup"><span data-stu-id="d474a-556">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="d474a-557"><xref:System.Windows.Threading.DispatcherFrame> により、<xref:System.Windows.Threading.DispatcherFrame.Continue%2A>プロパティを明示的に設定して、それを尊重、<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>プロパティを<xref:System.Windows.Threading.Dispatcher>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-557"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="d474a-558">つまり、ときに、<xref:System.Windows.Threading.Dispatcher>をシャット ダウンが起動し、既定値を使用するフレーム<xref:System.Windows.Threading.DispatcherFrame>を終了する入れ子になったすべてのフレームを有効にする、実装が終了されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-558">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d474a-559">次の例を使用する方法を示しています、<xref:System.Windows.Threading.DispatcherFrame>と同様の結果を実現するために、 [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d474a-559">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d474a-560">
            <paramref name="frame" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-560">
              <paramref name="frame" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d474a-561">
            <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> は <see langword="true" /> です</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-561">
              <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" /></span>
          </span>
          <span data-ttu-id="d474a-562">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-562">-or-</span>
          </span>
          <span data-ttu-id="d474a-563">
            <paramref name="frame" /> が別の <see cref="T:System.Windows.Threading.Dispatcher" /> で実行されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-563">
              <paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
          <span data-ttu-id="d474a-564">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-564">-or-</span>
          </span>
          <span data-ttu-id="d474a-565">ディスパッチャー処理が無効になっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-565">Dispatcher processing has been disabled.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="d474a-566">実行フレームをプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-566">for pushing an execution frame.</span>
          </span>
          <span data-ttu-id="d474a-567">関連付けられた列挙は:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-567">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d474a-568">メイン実行フレームを <see cref="T:System.Windows.Threading.Dispatcher" /> のイベント キューにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-568">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-569"><xref:System.Windows.Threading.Dispatcher>ループ内で、イベント キューを処理します。</span><span class="sxs-lookup"><span data-stu-id="d474a-569">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="d474a-570">ループは、フレームと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="d474a-570">The loop is referred to as a frame.</span></span>  <span data-ttu-id="d474a-571">初期のループが呼び出すことによって、アプリケーションによって開始通常<xref:System.Windows.Threading.Dispatcher.Run%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-571">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="d474a-572">メインの実行のフレームはまで引き続き、<xref:System.Windows.Threading.Dispatcher>シャット ダウンします。</span><span class="sxs-lookup"><span data-stu-id="d474a-572">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d474a-573">
            <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを完了すると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-573">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-574">ときのシャット ダウン プロセス、<xref:System.Windows.Threading.Dispatcher>が開始されて、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>イベントが発生したと<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>に設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-574">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="d474a-575"><xref:System.Windows.Threading.Dispatcher>イベント キューのアンワインドするまで完全にシャット ダウンをしません。</span><span class="sxs-lookup"><span data-stu-id="d474a-575">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="d474a-576">ディスパッチャーは、シャット ダウンが完了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>プロパティに設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-576">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="d474a-577">シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-577">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d474a-578">
            <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを開始すると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-578">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-579">ときのシャット ダウン プロセス、<xref:System.Windows.Threading.Dispatcher>が開始されて、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>イベントが発生したと<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>に設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-579">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="d474a-580"><xref:System.Windows.Threading.Dispatcher>イベント キューのアンワインドするまで完全にシャット ダウンをしません。</span><span class="sxs-lookup"><span data-stu-id="d474a-580">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="d474a-581">ディスパッチャーは、シャット ダウンが完了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>プロパティに設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="d474a-581">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="d474a-582">シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-582">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d474a-583">この <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-583">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d474a-584">スレッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-584">The thread.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d474a-585">
            <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> または <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> を使用したデリゲートの実行中にスローされたスレッドの例外をキャッチできないときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-585">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-586">このイベントはによってデリゲートの実行中にスローされた例外<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>はキャッチされません。</span><span class="sxs-lookup"><span data-stu-id="d474a-586">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="d474a-587">ハンドラーが例外処理済みとしてマークから呼び出される内部の例外ハンドラーができなくなります。</span><span class="sxs-lookup"><span data-stu-id="d474a-587">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="d474a-588">発生したすべて慎重セカンダリ例外の作成を回避し、キャッチするには、このイベントに対するイベント ハンドラーを書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="d474a-588">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="d474a-589">メモリの割り当てや、任意のリソースのハンドラーで処理を要する操作を実行しないようにお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d474a-589">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="d474a-590"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>イベントを発生させませんする手段を提供する、<xref:System.Windows.Threading.Dispatcher.UnhandledException>イベント。</span><span class="sxs-lookup"><span data-stu-id="d474a-590">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="d474a-591"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>イベントは、最初に、場合<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A>上、<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs>に設定されている`false`、<xref:System.Windows.Threading.Dispatcher.UnhandledException>イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="d474a-591">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d474a-592">フィルター段階で <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> または <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> を使用したデリゲートの実行中にスローされたスレッドの例外をキャッチできないときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-592">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-593">によってデリゲートの実行中に発生する例外のフィルターのステージ中にこのイベントは<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>がキャッチされたとします。</span><span class="sxs-lookup"><span data-stu-id="d474a-593">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="d474a-594">呼び出しスタックは、この時点で (初回例外) アンワインドではありません。</span><span class="sxs-lookup"><span data-stu-id="d474a-594">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="d474a-595">発生したすべて慎重セカンダリ例外の作成を回避し、キャッチするには、このイベントに対するイベント ハンドラーを書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="d474a-595">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="d474a-596">メモリの割り当てや、任意のリソースのハンドラーで処理を要する操作を実行しないようにお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d474a-596">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="d474a-597"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>イベントを発生させませんする手段を提供する、<xref:System.Windows.Threading.Dispatcher.UnhandledException>イベント。</span><span class="sxs-lookup"><span data-stu-id="d474a-597">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="d474a-598"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>イベントは、最初に、場合<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A>上、<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs>に設定されている`false`、<xref:System.Windows.Threading.Dispatcher.UnhandledException>イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="d474a-598">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="d474a-599">追加や、このイベントのハンドラーを削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-599">for adding or removing a handler for this event.</span>
          </span>
          <span data-ttu-id="d474a-600">関連付けられた列挙は:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-600">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="d474a-601">確認する対象の優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-601">The priority to check.</span>
          </span>
        </param>
        <param name="parameterName">
          <span data-ttu-id="d474a-602">優先順位が無効な場合に発生する例外によって返される文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-602">A string that will be returned by the exception that occurs if the priority is invalid.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-603">指定した <see cref="T:System.Windows.Threading.DispatcherPriority" /> が有効な優先順位かどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-603">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="d474a-604">
            <paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-604">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d474a-605">呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.Dispatcher" /> にアクセスできるかどうかを確認します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-605">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-606">スレッドでのみ、<xref:System.Windows.Threading.Dispatcher>は作成のアクセス可能性があります、<xref:System.Windows.Threading.Dispatcher>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-606">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="d474a-607">このメソッドはパブリックです。したがって、任意のスレッドをへのアクセスを持っているかどうかが確認確認できる、<xref:System.Windows.Threading.Dispatcher>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-607">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="d474a-608">違い<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>と<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>は<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>呼び出し元のスレッドにへのアクセスがない場合は、ブール値を返します、<xref:System.Windows.Threading.Dispatcher>と<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d474a-608">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d474a-609">次の例で<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>をスレッドが、スレッドへのアクセスを持つかどうかを判断する、<xref:System.Windows.Controls.Button>上に作成されました。</span><span class="sxs-lookup"><span data-stu-id="d474a-609">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="d474a-610">メソッドは、オブジェクトにキャストする引数、<xref:System.Windows.Controls.Button>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-610">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="d474a-611"><xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>メソッドを<xref:System.Windows.Threading.Dispatcher>の<xref:System.Windows.Controls.Button>スレッドへのアクセスを確認するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d474a-611">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="d474a-612">呼び出し元のスレッドがアクセスできるよう、 <xref:System.Windows.Threading.Dispatcher>、<xref:System.Windows.Controls.Button>だけのメンバーにアクセスして更新されて、<xref:System.Windows.Controls.Button>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-612">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="d474a-613">呼び出し元のスレッドには、アクセスがない場合、<xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d474a-613">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="d474a-614">この例は、例外をキャッチしを受け入れ、デリゲートをプッシュする<xref:System.Windows.Controls.Button>を引数として上に、<xref:System.Windows.Threading.Dispatcher>の<xref:System.Windows.Controls.Button>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-614">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="d474a-615">これは、<xref:System.Windows.Threading.Dispatcher>の更新の作業を実行する、<xref:System.Windows.Controls.Button>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-615">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d474a-616">呼び出し元のスレッドは、この <see cref="T:System.Windows.Threading.Dispatcher" /> にアクセスできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-616">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d474a-617">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクトを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-617">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d474a-618">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクトを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-618">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-619">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-619">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-620">このメソッドは、他のイベントを処理するなど、他の作業を行えるように一時的に実行制御を現在のディスパッチャーをリリースするための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="d474a-620">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="d474a-621">使用して、 `await`、または`Await`Visual basic で現在のディスパッチャーに制御を戻し、戻り値の演算子。</span><span class="sxs-lookup"><span data-stu-id="d474a-621">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="d474a-622">場合、このメソッドを使用して、アプリにアプリが多くの UI スレッドでの作業を行っているときにイベントを処理する機会を提供します。</span><span class="sxs-lookup"><span data-stu-id="d474a-622">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="d474a-623">たとえば、コントロールを更新する実行時間の長いループ内で、このメソッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="d474a-623">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="d474a-624">このメソッドを呼び出すことは、<xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29>メソッドを渡して<xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d474a-624">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="d474a-625">継続をスケジュールする優先順位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-625">The priority at which to schedule the continuation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d474a-626">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクトを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-626">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
          <span data-ttu-id="d474a-627">このメソッドの結果を待機するコードにコントロールが戻り、指定された優先度がスケジュールされたときに実行される処理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-627">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d474a-628">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d474a-628">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d474a-629">このメソッドは、他のイベントを処理するなど、他の作業を行えるように一時的に実行制御を現在のディスパッチャーをリリースするための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="d474a-629">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="d474a-630">使用して、 `await`、または`Await`Visual basic で現在のディスパッチャーに制御を戻し、戻り値の演算子。</span><span class="sxs-lookup"><span data-stu-id="d474a-630">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="d474a-631">場合、このメソッドを使用して、アプリにアプリが多くの UI スレッドでの作業を行っているときにイベントを処理する機会を提供します。</span><span class="sxs-lookup"><span data-stu-id="d474a-631">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="d474a-632">たとえば、コントロールを更新する実行時間の長いループ内で、このメソッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="d474a-632">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>