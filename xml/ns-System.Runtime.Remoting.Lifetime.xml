<Namespace Name="System.Runtime.Remoting.Lifetime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5ac8c7510ea8c5026f390f2936bebfb8b315c4f4" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70512503" /></Metadata><Docs>
    <summary><span data-ttu-id="e89cb-101"><see cref="N:System.Runtime.Remoting.Lifetime" /> 名前空間には、リモート オブジェクトの有効期間を管理するクラスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e89cb-101">The <see cref="N:System.Runtime.Remoting.Lifetime" /> namespace contains classes that manage the lifetime of remote objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e89cb-102">従来、分散ガベージコレクションでは、オブジェクトの有効期間を制御するために参照カウントと ping を使用していました。</span><span class="sxs-lookup"><span data-stu-id="e89cb-102">Traditionally, distributed garbage collection uses reference counts and pinging for control over the lifetime of objects.</span></span> <span data-ttu-id="e89cb-103">これは、サービスごとに少数のクライアントがある場合に適していますが、サービスごとに数千のクライアントが存在する場合には適切に拡張できません。</span><span class="sxs-lookup"><span data-stu-id="e89cb-103">This works well when there are a few clients per service, but doesn't scale well when there are thousands of clients per service.</span></span> <span data-ttu-id="e89cb-104">リモート処理有効期間サービスは、リースを各サービスに関連付け、リース期間が切れたときにサービスを削除します。</span><span class="sxs-lookup"><span data-stu-id="e89cb-104">The remoting lifetime service associates a lease with each service, and deletes a service when its lease time expires.</span></span> <span data-ttu-id="e89cb-105">有効期間サービスは、従来の分散ガベージコレクターの機能を利用できます。また、サーバーあたりのクライアント数が増加した場合にも適切に調整されます。</span><span class="sxs-lookup"><span data-stu-id="e89cb-105">The lifetime service can take on the function of a traditional distributed garbage collector, and it also adjusts well when the numbers of clients per server increases.</span></span>  
  
 <span data-ttu-id="e89cb-106">各アプリケーションドメインには、そのドメイン内のリースを制御するリースマネージャーが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e89cb-106">Each application domain contains a lease manager that is responsible for controlling leases in its domain.</span></span> <span data-ttu-id="e89cb-107">リースが期限切れになると、すべてのリースが定期的に調査されます。</span><span class="sxs-lookup"><span data-stu-id="e89cb-107">All leases are examined periodically for expired lease times.</span></span> <span data-ttu-id="e89cb-108">リースの有効期限が切れている場合は、1つまたは複数のリーススポンサが呼び出され、リースを更新する機会が与えられます。</span><span class="sxs-lookup"><span data-stu-id="e89cb-108">If a lease has expired, one or more of the lease's sponsors are invoked and given the opportunity to renew the lease.</span></span> <span data-ttu-id="e89cb-109">スポンサがリースの更新を決定しない場合は、リースマネージャーによってリースが削除され、ガベージコレクターによってオブジェクトが収集されます。</span><span class="sxs-lookup"><span data-stu-id="e89cb-109">If none of the sponsors decides to renew the lease, the lease manager removes the lease and the object can be collected by the garbage collector.</span></span> <span data-ttu-id="e89cb-110">リースマネージャーは、リースの一覧を残りのリース時間で並べ替えて保持します。</span><span class="sxs-lookup"><span data-stu-id="e89cb-110">The lease manager maintains a lease list with leases sorted by remaining lease time.</span></span> <span data-ttu-id="e89cb-111">最短の残り時間のリースは、一覧の先頭に格納されます。</span><span class="sxs-lookup"><span data-stu-id="e89cb-111">The leases with the shortest remaining time are stored at the top of the list.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>