<Type Name="DbDataAdapter" FullName="System.Data.Common.DbDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8a3d500a6735097e918938a7e81a39c8837255f" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52255446" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable, IDbDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable, System::Data::IDbDataAdapter" />
  <TypeSignature Language="F#" Value="type DbDataAdapter = class&#xA;    inherit DataAdapter&#xA;    interface IDbDataAdapter&#xA;    interface ICloneable&#xA;    interface IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.IDbDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <see cref="T:System.Data.IDbDataAdapter" /> インターフェイスの実装を支援します。 <see cref="T:System.Data.Common.DbDataAdapter" /> の継承クラスは、厳密な型指定を行う関数のセットを実装しますが、**DataAdapter** を完全に実装するために必要な機能の大部分は継承します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>クラスから継承、<xref:System.Data.Common.DataAdapter>クラスを実装、<xref:System.Data.IDbDataAdapter>インターフェイス。 クラスを実装しやすく、 **DataAdapter**リレーショナル データベースで使用するために設計されています。  
  
 アプリケーションがのインスタンスを作成していない、<xref:System.Data.Common.DbDataAdapter>クラスを直接が、これを継承するクラスのインスタンスを作成します。  
  
 クラスを継承する<xref:System.Data.Common.DbDataAdapter>継承されたメンバーを実装し、通常はプロバイダー固有の機能を追加するための追加メンバーを定義する必要があります。 など、<xref:System.Data.Common.DbDataAdapter>クラスを定義、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティ、および<xref:System.Data.Common.DbDataAdapter>クラス定義の 8 つのオーバー ロード、<xref:System.Data.IDataAdapter.Fill%2A>メソッド。 さらに、<xref:System.Data.OleDb.OleDbDataAdapter>クラスの継承、<xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドの 2 つの追加オーバー ロードを定義して<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>をパラメーターとしてオブジェクトの ADO レコード セットを取得します。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>継承する場合、<see cref="T:System.Data.Common.DbDataAdapter" />クラス、次のコンス トラクターを実装することお勧めします。 
 <list type="table"><listheader><term> アイテム 
 </term><description> 説明 
 </description></listheader><item><term> *Prv*DataAdapter() 
 </term><description> 新しいインスタンスを初期化、 *Prv*DataAdapter クラス。  
  
 </description></item><item><term> *Prv*DataAdapter (*Prv*コマンド*selectCommand*) 
 </term><description> 新しいインスタンスを初期化、 *Prv*DataAdapter クラス、指定した SQL SELECT ステートメントを使用します。  
  
 </description></item><item><term> *Prv*DataAdapter (文字列*selectCommandText*、文字列*selectConnectionString*) 
 </term><description> 新しいインスタンスを初期化、 *Prv*SQL SELECT ステートメントと接続文字列を使用して DataAdapter クラス。  
  
 </description></item><item><term> *Prv*DataAdapter (文字列*selectCommandText*、 *Prv*接続*selectConnection*) 
 </term><description> 新しいインスタンスを初期化、 *Prv*SQL SELECT ステートメントで、DataAdapter クラスと*Prv*接続オブジェクトです。  
  
 </description></item></list>  
  
 .NET Framework データ プロバイダーの間で整合性を高める必要があります、フォームの継承クラスの名前を付けます*Prv*dataadapter を使用する場所*Prv*は特定の .NET のすべてのクラスに指定された uniform プレフィックスFramework データ プロバイダーの名前空間。 たとえば、"Sql"には、プレフィックスの<see cref="T:System.Data.SqlClient.SqlDataAdapter" />クラス、 **System.Data.SqlClient**名前空間。</para>
    </block>
    <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see langword="DataAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>**DataAdapter** クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インスタンスを作成するときに<xref:System.Data.Common.DbDataAdapter>、次の読み取り/書き込みプロパティは、次の初期値に設定されます。  
  
|プロパティ|初期値|  
|----------------|-------------------|  
|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|新しい <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|新しい <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|新しい <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|新しい <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 プロパティに別個の呼び出しでこれらのプロパティのいずれかの値を変更することができます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbDataAdapter : System.Data.Common.DbDataAdapter -&gt; System.Data.Common.DbDataAdapter" Usage="new System.Data.Common.DbDataAdapter adapter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">新しい <see langword="DataAdapter" /> の作成に使用する <see langword="DataAdapter" /> オブジェクト。</param>
        <summary>既存の同じ型のオブジェクトから、<see langword="DataAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロード、<xref:System.Data.Common.DbDataAdapter>コンス トラクターが使用できるように設計を .NET Framework データ プロバイダーによって clone の実装で使用するためのようなコンス トラクターを実装する場合。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected virtual int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddToBatch : System.Data.IDbCommand -&gt; int&#xA;override this.AddToBatch : System.Data.IDbCommand -&gt; int" Usage="dbDataAdapter.AddToBatch command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" />
      </Parameters>
      <Docs>
        <param name="command">バッチに追加する <see cref="T:System.Data.IDbCommand" />。</param>
        <summary>
          <see cref="T:System.Data.IDbCommand" /> を現在のバッチに追加します。</summary>
        <returns>
          <see cref="T:System.Data.IDbCommand" /> を追加する前のバッチ内のコマンド数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>、このメソッドはスロー<xref:System.NotSupportedException>します。 継承するクラス<xref:System.Data.Common.DbDataAdapter>バッチのサポートを提供するには、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドが保護され、.NET Framework データ プロバイダーで使用するために設計されています。  
  
継承するクラスの場合<see cref="T:System.Data.Common.DbDataAdapter" />クラスがコマンドをバッチに追加するユーザーを許可するには、このメソッドをオーバーライドするバッチをサポートしています。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected virtual void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearBatch();" />
      <MemberSignature Language="F#" Value="abstract member ClearBatch : unit -&gt; unit&#xA;override this.ClearBatch : unit -&gt; unit" Usage="dbDataAdapter.ClearBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>バッチからすべての <see cref="T:System.Data.IDbCommand" /> オブジェクトを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>、このメソッドはスロー<xref:System.NotSupportedException>します。 継承するクラス<xref:System.Data.Common.DbDataAdapter>バッチのサポートを提供するには、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドが保護され、.NET Framework データ プロバイダーで使用するために設計されています。  
  
継承するクラスの場合<see cref="T:System.Data.Common.DbDataAdapter" />クラスがバッチからすべてのコマンドを削除するユーザーを許可するには、このメソッドをオーバーライドするバッチをサポートしています。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs&#xA;override this.CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs" Usage="dbDataAdapter.CreateRowUpdatedEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">データ ソースの更新に使用した <see cref="T:System.Data.DataRow" />。</param>
        <param name="command">
          <see cref="T:System.Data.IDbCommand" /> 処理中に実行した <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</param>
        <param name="statementType">コマンドが UPDATE、INSERT、DELETE、または SELECT ステートメントのいずれかを示す値。</param>
        <param name="tableMapping">
          <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</param>
        <summary>
          <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <returns>
          <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> クラスの新しいインスタンス。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドするときに<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />メソッド。</para>
        </block>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs&#xA;override this.CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs" Usage="dbDataAdapter.CreateRowUpdatingEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">データ ソースを更新する <see cref="T:System.Data.DataRow" />。</param>
        <param name="command">
          <see cref="T:System.Data.IDbCommand" /> 処理中に実行する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</param>
        <param name="statementType">コマンドが UPDATE、INSERT、DELETE、または SELECT ステートメントのいずれかを示す値。</param>
        <param name="tableMapping">
          <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</param>
        <summary>
          <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <returns>
          <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> クラスの新しいインスタンス。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドするときに<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />メソッド。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultSourceTableName">
      <MemberSignature Language="C#" Value="public const string DefaultSourceTableName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultSourceTableName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultSourceTableName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultSourceTableName;" />
      <MemberSignature Language="F#" Value="val mutable DefaultSourceTableName : string" Usage="System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.Common.DataAdapter" /> オブジェクトがテーブル マップに使用する既定の名前。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "Table"で使用される既定の名前、<xref:System.Data.Common.DataAdapter>オブジェクトがテーブル マップします。  
  
 <xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName> アプリケーションで使用するテーブルのマッピングを追加するときに、<xref:System.Data.Common.DbDataAdapter.Fill%2A>が指定されていません、<xref:System.Data.DataTable>名。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ DeleteCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ セットからレコードを削除するコマンドを取得または設定します。</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> 中に、データ セット内の削除された行に対応するデータ ソース内のレコードを削除するために使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中に<xref:System.Data.Common.DbDataAdapter.Update%2A>、このプロパティを設定しないと、プライマリ キーの情報が存在する場合、 <xref:System.Data.DataSet>、<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>が自動的に生成します。  
  
   
  
## Examples  
 次の例は、派生クラスを作成します。<xref:System.Data.OleDb.OleDbDataAdapter>および一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="dbDataAdapter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Data.Common.DbDataAdapter" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteBatch();" />
      <MemberSignature Language="F#" Value="abstract member ExecuteBatch : unit -&gt; int&#xA;override this.ExecuteBatch : unit -&gt; int" Usage="dbDataAdapter.ExecuteBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のバッチを実行します。</summary>
        <returns>バッチ内の直前のコマンドの戻り値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>、このメソッドはスロー<xref:System.NotSupportedException>します。 継承するクラス<xref:System.Data.Common.DbDataAdapter>バッチのサポートを提供するには、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>このメソッドが保護され、.NET Framework データ プロバイダーで使用するために設計されています。  
  
継承するクラスの場合<see cref="T:System.Data.Common.DbDataAdapter" />クラスが、バッチを実行できるようにするには、このメソッドをオーバーライドするバッチをサポートしています。 このメソッドの実装は、バッチにアダプター内のコマンドを結合し、バッチを実行し、バッチの戻り値を返します。</para>
        </block>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> または <see cref="T:System.Data.DataTable" /> にデータを読み込みます。</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public override int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
        <summary>
          <see cref="T:System.Data.DataSet" /> 内の行を追加または更新します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、SELECT ステートメントを使用してデータ ソースからデータを取得します。 <xref:System.Data.IDbConnection> Select コマンドに関連付けられているオブジェクトを有効にする必要がありますが、開放する必要はありません。 場合、<xref:System.Data.IDbConnection>を閉じてから、<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、そのデータを取得する開閉します。 接続が前に開いている場合は<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。  
  
 データ テーブルの設定中にエラーまたは例外が発生した場合、エラーの発生前に追加された行は、データ テーブルに残ります。 残りの操作は中止されます。  
  
 テーブルは追加されません、コマンドがすべての行を返さない場合、 <xref:System.Data.DataSet>、し、例外は発生しません。  
  
 場合、<xref:System.Data.Common.DbDataAdapter>オブジェクトの設定中に重複した列を検出すると、 <xref:System.Data.DataTable>、パターンを使用して、後続の列に名前を生成します"*columnname*1「、」*columnname*2"、"*columnname*3"、という具合です。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。  
  
 指定したクエリでは、複数の結果を返す、別のテーブルにクエリを返す行ごとの結果セットが配置されます。 整数値を指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に追加することでは、追加の結果セットがという名前です。 行を返さないクエリのテーブルは作成しない選択クエリに続く挿入クエリを処理する場合、select クエリ用に作成されたテーブルの名前は"Table"最初に作成されたテーブルでは。 列とテーブルの名前を使用してアプリケーションでは、これらの名前付けパターンとの競合が発生しないことを確認してください。  
  
 設定に、SELECT ステートメントを使用するときに、<xref:System.Data.DataSet>複数の結果、バッチの SQL ステートメントなど、結果のいずれかにエラーが含まれている場合を返します。 それ以降のすべての結果はスキップされ、には追加されません、<xref:System.Data.DataSet>します。  
  
 以降を使用する場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>の内容を更新する呼び出し、 <xref:System.Data.DataSet>、2 つの条件を満たす必要があります。  
  
1.  SQL ステートメントが最初に設定するために使用する 1 つと一致する必要があります、<xref:System.Data.DataSet>します。  
  
2.  **キー**列情報が存在する必要があります。  
  
 重複する行が調整されていて、1 回だけの主キーの情報が存在する場合、<xref:System.Data.DataTable>に対応する、<xref:System.Data.DataSet>します。 主キーの情報を設定するいずれかを使って<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>、指定することによって、<xref:System.Data.DataTable.PrimaryKey%2A>のプロパティ、 <xref:System.Data.DataTable>、かを設定して、<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>プロパティを`AddWithKey`します。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。 詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)します。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチ SQL ステートメントを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、<xref:System.Data.MissingSchemaAction>に設定`AddWithKey`します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Fill dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">テーブル マップに使用する <see cref="T:System.Data.DataTable" /> の名前。</param>
        <summary>
          <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の指定した範囲の行を追加または更新します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、関連付けられた指定した SELECT ステートメントを使用してデータ ソースから行を取得<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティ。 SELECT ステートメントに関連付けられている接続オブジェクトが有効である必要がありますが、開放する必要はありません。 前に、接続が閉じられた場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、そのはデータの取得に開かれた後で終了します。 接続が前に開いている場合は<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>操作し、先に行を追加します<xref:System.Data.DataTable>内のオブジェクト、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataTable>オブジェクトのかどうか、まだ存在しません。 作成するときに<xref:System.Data.DataTable>、オブジェクト、<xref:System.Data.Common.DbDataAdapter.Fill%2A>操作は通常の列名のメタデータのみを作成します。 ただし場合、<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>プロパティに設定されて`AddWithKey`、適切な主キーと制約も作成されます。  
  
 場合、<xref:System.Data.Common.DbDataAdapter>設定中に重複する列を検出すると、 <xref:System.Data.DataTable>、パターンを使用して、後続の列の名前を生成します"*columnname*1"、"*columnname*2"、"*columnname*3"、という具合です。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。 複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットが別のテーブルに配置されます。  
  
 オーバー ロード<xref:System.Data.Common.DbDataAdapter.Fill%2A>を受け取る`DataTable`ように、パラメーターでは、最初の結果のみ取得します。 オーバー ロードを使用して、<xref:System.Data.Common.DbDataAdapter.Fill%2A>を受け取る`DataSet`複数の結果を得るためのパラメーターとして。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、シナリオをサポートしている場所、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字と小文字が異なる名前を持つオブジェクト。 このような状況では、<xref:System.Data.Common.DbDataAdapter.Fill%2A>大文字小文字の比較、対応するテーブルを検索を実行し、完全一致が存在しない場合は、新しいテーブルを作成します。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
 dataset.Tables.Add("AAA");  
 adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
    adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されます、 <xref:System.Data.DataSet> 1 つだけ含ま<xref:System.Data.DataTable>、大文字と小文字の名前を持つ異なるを<xref:System.Data.DataTable>が更新されます。 このシナリオで比較では大文字と小文字を区別しません。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 使用することができます、<xref:System.Data.Common.DbDataAdapter.Fill%2A>複数回の同じメソッド<xref:System.Data.DataTable>します。 主キーが存在する場合は、受信行が既に存在する行と一致するとマージされます。 受信した行を追加、主キーが存在しない場合、<xref:System.Data.DataTable>します。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。 詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)します。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチ SQL ステートメントを処理するときに<xref:System.Data.Common.DbDataAdapter.Fill%2A>と<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework データ プロバイダーは、最初の結果のみのスキーマ情報を取得します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
        <block subset="none" type="overrides">
          <para>このオーバー ロード、<see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />メソッドが保護されており、.NET Framework データ プロバイダーで使用するために設計されています。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
        <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
        <summary>
          <see cref="T:System.Data.DataSet" /> 名および <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の列と一致するように <see cref="T:System.Data.DataTable" /> 内の行を追加または更新します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、SELECT ステートメントを使用してデータ ソースからデータを取得します。 <xref:System.Data.IDbConnection> Select コマンドに関連付けられているオブジェクトを有効にする必要がありますが、開放する必要はありません。 場合、<xref:System.Data.IDbConnection>を閉じてから、<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、そのはデータの取得に開かれた後で終了します。 接続が前に開いている場合は<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。  
  
 テーブルは追加されません、コマンドがすべての行を返さない場合、 <xref:System.Data.DataSet>、し、例外は発生しません。  
  
 場合、<xref:System.Data.Common.DbDataAdapter>オブジェクトの設定中に重複した列を検出すると、<xref:System.Data.DataTable>パターン"columnname1"、"columnname2"、"columnname3"などを使用して、後続の列に名前が生成されます。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。  
  
 指定したクエリでは、複数の結果を返す、各結果セットが別のテーブルに配置されます。 整数値を指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に追加することでは、追加の結果セットがという名前です。 行を返さないクエリのテーブルは作成しない選択クエリに続く挿入クエリを処理する場合は、select クエリ用に作成されたテーブルという名前になります"Table"は作成された最初のテーブル。 列とテーブルの名前を使用してアプリケーションでは、これらの名前付けパターンとの競合が発生しないことを確認してください。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、シナリオをサポートしている場所、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字と小文字が異なる名前を持つオブジェクト。 このような状況では、<xref:System.Data.Common.DbDataAdapter.Fill%2A>大文字小文字の比較、対応するテーブルを検索を実行し、完全一致が存在しない場合は、新しいテーブルを作成します。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されます、 <xref:System.Data.DataSet> 1 つだけ含ま<xref:System.Data.DataTable>、大文字と小文字の名前を持つ異なるを<xref:System.Data.DataTable>が更新されます。 このシナリオで比較では大文字と小文字を区別しません。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 データ テーブルの設定中にエラーまたは例外が発生した場合、エラーの発生前に追加された行は、データ テーブルに残ります。 残りの操作は中止されます。  
  
 設定に、SELECT ステートメントを使用するときに、<xref:System.Data.DataSet>バッチ SQL ステートメントは、次の注意の複数の結果を返します。  
  
-   それ以降のすべての結果がスキップされに追加されないエラーが含まれる結果のいずれかの場合、<xref:System.Data.DataSet>します。  
  
 以降を使用する場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>の内容を更新する呼び出し、 <xref:System.Data.DataSet>、2 つの条件を満たす必要があります。  
  
1.  SQL ステートメントが最初に設定するために使用する 1 つと一致する必要があります、<xref:System.Data.DataSet>します。  
  
2.  **キー**列情報が存在する必要があります。 重複する行が調整されていて、1 回だけの主キーの情報が存在する場合、<xref:System.Data.DataTable>に対応する、<xref:System.Data.DataSet>します。 主キーの情報を設定するいずれかを使って<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>、指定することによって、<xref:System.Data.DataTable.PrimaryKey%2A>のプロパティ、 <xref:System.Data.DataTable>、かを設定して、<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>プロパティを`AddWithKey`します。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。 詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)します。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチ SQL ステートメントを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、<xref:System.Data.MissingSchemaAction>に設定`AddWithKey`します。  
  
   
  
## Examples  
 次の例は、派生クラスでは、 <xref:System.Data.OleDb.OleDbDataAdapter>、入力、 <xref:System.Data.DataSet> categories テーブルから行を含むです。 この例では、作成した、<xref:System.Data.OleDb.OleDbDataAdapter>と<xref:System.Data.DataSet>します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">ソース テーブルが無効です。</exception>
        <block subset="none" type="overrides">
          <para>オーバーライドするときに<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />メソッド。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDataReader ^ dataReader);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDataReader -&gt; int" Usage="dbDataAdapter.Fill (dataTable, dataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="dataTable">To be added.</param>
        <param name="dataReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataTable" />。</param>
        <param name="command">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</param>
        <param name="behavior">
          <see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Data.DataTable" />、<see cref="T:System.Data.DataTable" />、および <see cref="T:System.Data.IDbCommand" /> を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.CommandBehavior" /> 内の行を追加または更新します。</summary>
        <returns>
          <see cref="T:System.Data.DataTable" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、関連付けられた指定した SELECT ステートメントを使用してデータ ソースから行を取得<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティ。 SELECT ステートメントに関連付けられている接続オブジェクトが有効である必要がありますが、開放する必要はありません。 前に、接続が閉じられた場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、そのデータを取得する開閉します。 接続が前に開いている場合は<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>操作し、指定したコピー先に行を追加します<xref:System.Data.DataTable>オブジェクト、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataTable>オブジェクトのかどうかは既に存在しません。 作成するときに、<xref:System.Data.DataTable>オブジェクト、<xref:System.Data.Common.DbDataAdapter.Fill%2A>操作は通常の列名のメタデータのみを作成します。 ただし場合、<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>プロパティに設定されて`AddWithKey`、適切な主キーと制約も作成されます。  
  
 場合、<xref:System.Data.Common.DbDataAdapter>オブジェクトの設定中に重複した列を検出すると、 <xref:System.Data.DataTable>、パターンを使用して、後続の列に名前が生成されます"*columnname*1"、"*columnname*2"、"*columnname*3"など。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。  
  
 オーバー ロード<xref:System.Data.Common.DbDataAdapter.Fill%2A>を受け取る`DataTable`ように、パラメーターでは、最初の結果のみ取得します。 オーバー ロードを使用して、<xref:System.Data.Common.DbDataAdapter.Fill%2A>を受け取る`DataSet`複数の結果を得るためのパラメーターとして。  
  
 使用することができます、<xref:System.Data.Common.DbDataAdapter.Fill%2A>複数回の同じメソッド<xref:System.Data.DataTable>します。 主キーが存在する場合は、受信行が既に存在する行と一致するとマージされます。 受信した行を追加、主キーが存在しない場合、<xref:System.Data.DataTable>します。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。 詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)します。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチ SQL ステートメントを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、<xref:System.Data.MissingSchemaAction>に設定`AddWithKey`します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>このオーバー ロード、<see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />メソッドが保護されており、.NET Framework データ プロバイダーで使用するために設計されています。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (int startRecord, int maxRecords, params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(int32 startRecord, int32 maxRecords, class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (startRecord As Integer, maxRecords As Integer, ParamArray dataTables As DataTable()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(int startRecord, int maxRecords, ... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="override this.Fill : int * int * System.Data.DataTable[] -&gt; int" Usage="dbDataAdapter.Fill (startRecord, maxRecords, dataTables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="dataTables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startRecord">取得を開始する、0 から始まるレコード番号。</param>
        <param name="maxRecords">取得するレコードの最大数。</param>
        <param name="dataTables">データ ソースから読み込む <see cref="T:System.Data.DataTable" /> オブジェクト。</param>
        <summary>指定したレコード位置で開始し、指定した最大数のレコードを読み込んで、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の行を追加または更新します。</summary>
        <returns>
          <see cref="T:System.Data.DataTable" /> で正常に追加または更新された行数。 この値には、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DataAdapter.Fill%2A>メソッドは、関連付けられた指定した SELECT ステートメントを使用してデータ ソースから行を取得<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティ。 SELECT ステートメントに関連付けられている接続オブジェクトが有効である必要がありますが、開放する必要はありません。 前に、接続が閉じられた場合<xref:System.Data.Common.DataAdapter.Fill%2A>が呼び出されると、ファイル データを取得するが開かれ、閉じられています。 接続が前に開いている場合は<xref:System.Data.Common.DataAdapter.Fill%2A>が呼び出されると、未処理のままにします。  
  
 <xref:System.Data.Common.DataAdapter.Fill%2A>操作し、先に行を追加します<xref:System.Data.DataTable>内のオブジェクト、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataTable>オブジェクトのかどうか、まだ存在しません。 作成するときに<xref:System.Data.DataTable>、オブジェクト、<xref:System.Data.Common.DataAdapter.Fill%2A>操作は通常の列名のメタデータのみを作成します。 ただし場合、<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>プロパティに設定されて`AddWithKey`、適切な主キーと制約も作成されます。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。 詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)します。  
  
 データ アダプターの設定中に重複した列が発生した場合、<xref:System.Data.DataTable>パターン"columnname1"、"columnname2"、"columnname3"などを使用して、後続の列の名前を生成します。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。 複数の結果セットが追加されたとき、 <xref:System.Data.DataSet>、各結果セットが別のテーブルに配置されます。 整数値を指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に追加することでは、追加の結果セットがという名前です。 列とテーブルの名前を使用してアプリケーションでは、これらの名前付けパターンとの競合が発生しないことを確認してください。  
  
 設定に、SELECT ステートメントを使用するときに、<xref:System.Data.DataSet>複数の結果を返すバッチの SQL ステートメントなど、エラー、結果のいずれかが含まれる場合それ以降のすべての結果はスキップされに追加されません、<xref:System.Data.DataSet>します。  
  
 使用することができます、<xref:System.Data.Common.DataAdapter.Fill%2A>複数回の同じメソッド<xref:System.Data.DataTable>します。 主キーが存在する場合は、受信行が既に存在する行と一致するとマージされます。 受信した行を追加、主キーが存在しない場合、<xref:System.Data.DataTable>します。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチ SQL ステートメントを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、<xref:System.Data.MissingSchemaAction>に設定`AddWithKey`します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
        <param name="startRecord">取得を開始する、0 から始まるレコード番号。</param>
        <param name="maxRecords">取得するレコードの最大数。</param>
        <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
        <summary>
          <see cref="T:System.Data.DataSet" /> 名および <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の指定した範囲の行を追加または更新します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A`maxRecords`値が 0 の開始レコードの後に見つかったすべてのレコードを取得します。 場合`maxRecords`だけで、残りの行が返され、エラーは発生しませんが、残りの行の数より大きい。  
  
 場合、対応する select コマンドは、複数の結果を返すステートメント<xref:System.Data.Common.DbDataAdapter.Fill%2A>のみ適用されます`maxRecords`最初の結果にします。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、SELECT ステートメントを使用してデータ ソースからデータを取得します。 <xref:System.Data.IDbConnection> SELECT ステートメントに関連付けられているオブジェクトは、有効である必要がありますが、開放する必要はありません。 場合、<xref:System.Data.IDbConnection>を閉じてから、<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、そのデータを取得する開閉します。 接続が前に開いている場合は<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。  
  
 テーブルは追加されません、コマンドがすべての行を返さない場合、<xref:System.Data.DataSet>例外は発生しませんが、します。  
  
 場合、<xref:System.Data.Common.DbDataAdapter>オブジェクトの設定中に重複した列を検出すると、 <xref:System.Data.DataTable>、パターンを使用して、後続の列に名前が生成されます"*columnname*1"、"*columnname*2"、"*columnname*3"など。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。  
  
 指定したクエリでは、複数の結果を返す、各結果セットが別のテーブルに配置されます。 整数値を指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に追加することでは、追加の結果セットがという名前です。 行を返さないクエリのテーブルは作成しない選択クエリに続く挿入クエリを処理する場合、select クエリ用に作成されたテーブルの名前は"Table"最初に作成されたテーブルでは。 列とテーブルの名前を使用してアプリケーションでは、これらの名前付けパターンとの競合が発生しないことを確認してください。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、シナリオをサポートしている場所、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字と小文字が異なる名前を持つオブジェクト。 このような状況では、<xref:System.Data.Common.DbDataAdapter.Fill%2A>大文字小文字の比較、対応するテーブルを検索を実行し、完全一致が存在しない場合は、新しいテーブルを作成します。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されます、 <xref:System.Data.DataSet> 1 つだけ含ま<xref:System.Data.DataTable>、大文字と小文字の名前を持つ異なるを<xref:System.Data.DataTable>が更新されます。 このシナリオで比較では大文字と小文字を区別しません。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 データ テーブルの設定中にエラーまたは例外が発生した場合、エラーの発生前に追加された行は、データ テーブルに残ります。 残りの操作は中止されます。  
  
 設定に、SELECT ステートメントを使用するときに、<xref:System.Data.DataSet>バッチの SQL ステートメントなど、複数の結果を返しますが、次の注意します。  
  
-   バッチ SQL ステートメントから複数の結果を処理するときに`maxRecords`最初の結果にのみ適用されます。 チャプター結果 (.NET Framework Data Provider for OLE DB のみ) を含む行に対しても同様です。 最上位レベルの結果はによって制限されます`maxRecords`がすべての子行を追加します。  
  
-   それ以降のすべての結果がスキップされに追加されないエラーが含まれる結果のいずれかの場合、<xref:System.Data.DataSet>します。  
  
 以降を使用する場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>の内容を更新する呼び出し、 <xref:System.Data.DataSet>、2 つの条件を満たす必要があります。  
  
1.  SQL ステートメントが最初に設定するために使用する 1 つと一致する必要があります、<xref:System.Data.DataSet>します。  
  
2.  **キー**列情報が存在する必要があります。  
  
 主キーの情報が存在する場合、重複する行は調整して、1 回だけで、<xref:System.Data.DataTable>に対応する、<xref:System.Data.DataSet>します。 主キーの情報を設定するいずれかを使って<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>、指定することによって、<xref:System.Data.DataTable.PrimaryKey%2A>のプロパティ、 <xref:System.Data.DataTable>、かを設定して、<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>プロパティを`AddWithKey`します。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。 詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)します。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチ SQL ステートメントを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、<xref:System.Data.MissingSchemaAction>に設定`AddWithKey`します。  
  
> [!NOTE]
>  `DataSet`によって示されるレコードの数よりも多くが含まれていないは`maxRecords`します。 ただし、クエリによって生成される全体の結果セットがまだサーバーから返されます。  
  
   
  
## Examples  
 次の例は、派生クラスでは、 <xref:System.Data.OleDb.OleDbDataAdapter>、入力、<xref:System.Data.DataSet>から行 10、先頭の 15 行を含む、**カテゴリ**テーブル。 この例では、作成した、<xref:System.Data.OleDb.OleDbDataAdapter>と<xref:System.Data.DataSet>します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">
          <see cref="T:System.Data.DataSet" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。  
  
- または - 
接続が無効です。</exception>
        <exception cref="T:System.InvalidCastException">接続が見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="startRecord" /> パラメーターが 0 未満です。  
  
- または - 
<paramref name="maxRecords" /> パラメーターが 0 未満です。</exception>
        <block subset="none" type="overrides">
          <para>オーバーライドするときに<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />メソッド。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, string srcTable, class System.Data.IDataReader dataReader, int32 startRecord, int32 maxRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable, System::Data::IDataReader ^ dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string * System.Data.IDataReader * int * int -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable, dataReader, startRecord, maxRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dataSet">To be added.</param>
        <param name="srcTable">To be added.</param>
        <param name="dataReader">To be added.</param>
        <param name="startRecord">To be added.</param>
        <param name="maxRecords">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, int32 startRecord, int32 maxRecords, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), startRecord As Integer, maxRecords As Integer, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, int startRecord, int maxRecords, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable[] * int * int * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTables, startRecord, maxRecords, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTables">データ ソースから読み込む <see cref="T:System.Data.DataTable" /> オブジェクト。</param>
        <param name="startRecord">取得を開始する、0 から始まるレコード番号。</param>
        <param name="maxRecords">取得するレコードの最大数。</param>
        <param name="command">
          <see cref="T:System.Data.IDbCommand" /> オブジェクトにデータを読み込むために実行する <see cref="T:System.Data.DataTable" />。</param>
        <param name="behavior">
          <see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
        <summary>
          <see cref="T:System.Data.DataSet" /> 名および <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の指定した範囲の行を追加または更新します。</summary>
        <returns>データ テーブルで追加または更新された行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A`maxRecords`値が 0 の開始レコードの後に見つかったすべてのレコードを取得します。 場合`maxRecords`だけで、残りの行が返され、エラーは発生しませんが、残りの行の数より大きい。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、SELECT ステートメントを使用してデータ ソースからデータを取得します。 <xref:System.Data.IDbConnection> SELECT ステートメントに関連付けられているオブジェクトは、有効である必要がありますが、開放する必要はありません。 場合、<xref:System.Data.IDbConnection>を閉じてから、<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、そのはデータの取得に開かれた後で終了します。 接続が前に開いている場合は<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。  
  
 テーブルは追加されません、コマンドがすべての行を返さない場合、<xref:System.Data.DataSet>例外は発生しませんが、します。  
  
 場合、<xref:System.Data.Common.DbDataAdapter>オブジェクトの設定中に重複した列を検出すると、 <xref:System.Data.DataTable>、パターンを使用して、後続の列に名前が生成されます"*columnname*1"、"*columnname*2"、"*columnname*3"など。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。  
  
 指定したクエリでは、複数の結果を返す、各結果セットが別のテーブルに配置されます。 整数値を指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に追加することでは、追加の結果セットがという名前です。 行を返さないクエリのテーブルは作成しない選択クエリに続く挿入クエリを処理する場合は、select クエリ用に作成されたテーブルという名前になります"Table"は作成された最初のテーブル。 列とテーブルの名前を使用してアプリケーションでは、これらの名前付けパターンとの競合が発生しないことを確認してください。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、シナリオをサポートしている場所、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字と小文字が異なる名前を持つオブジェクト。 このような状況では、<xref:System.Data.Common.DbDataAdapter.Fill%2A>大文字小文字の比較、対応するテーブルを検索を実行し、完全一致が存在しない場合は、新しいテーブルを作成します。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されます、 <xref:System.Data.DataSet> 1 つだけ含ま<xref:System.Data.DataTable>、大文字と小文字の名前を持つ異なるを<xref:System.Data.DataTable>が更新されます。 このシナリオで比較では大文字と小文字を区別しません。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 データ テーブルの設定中にエラーまたは例外が発生した場合、エラーの発生前に追加された行は、データ テーブルに残ります。 残りの操作は中止されます。  
  
 設定に、SELECT ステートメントを使用するときに、<xref:System.Data.DataTable>バッチ SQL ステートメントは、次の注意など、オブジェクトが複数の結果を返します。  
  
-   バッチ SQL ステートメントから複数の結果を処理するときに`maxRecords`最初の結果にのみ適用されます。 チャプター結果 (.NET Framework Data Provider for OLE DB のみ) を含む行に対しても同様です。 最上位レベルの結果はによって制限されます`maxRecords`がすべての子行を追加します。  
  
-   エラーが含まれる結果のいずれかの場合は、それ以降のすべての結果はスキップされます。  
  
> [!NOTE]
>  `DataSet`によって示されるレコードの数よりも多くが含まれていないは`maxRecords`します。 ただし、クエリによって生成されたすべての結果セットがまだサーバーから返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">
          <see cref="T:System.Data.DataSet" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。  
  
- または - 
接続が無効です。</exception>
        <exception cref="T:System.InvalidCastException">接続が見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="startRecord" /> パラメーターが 0 未満です。  
  
- または - 
<paramref name="maxRecords" /> パラメーターが 0 未満です。</exception>
        <block subset="none" type="overrides">
          <para>オーバーライドするときに<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />メソッド。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
        <param name="startRecord">取得を開始する、0 から始まるレコード番号。</param>
        <param name="maxRecords">取得するレコードの最大数。</param>
        <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
        <param name="command">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</param>
        <param name="behavior">
          <see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
        <summary>
          <see cref="T:System.Data.DataSet" /> 名、ソース テーブル名、コマンド文字列、およびコマンド動作を使用して、データ ソース内の列と一致するように、<see cref="T:System.Data.DataSet" /> 内の指定した範囲の行を追加または更新します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、関連付けられた指定した SELECT ステートメントを使用してデータ ソースから行を取得<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティ。 SELECT ステートメントに関連付けられている接続オブジェクトが有効である必要がありますが、開放する必要はありません。 前に、接続が閉じられた場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、そのはデータの取得に開かれた後で終了します。 接続が前に開いている場合は<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>操作し、先に行を追加します<xref:System.Data.DataTable>内のオブジェクト、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataTable>オブジェクトのかどうか、まだ存在しません。 作成するときに<xref:System.Data.DataTable>、オブジェクト、<xref:System.Data.Common.DbDataAdapter.Fill%2A>操作は通常の列名のメタデータのみを作成します。 ただし場合、<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>プロパティに設定されて`AddWithKey`、適切な主キーと制約も作成されます。  
  
 場合、<xref:System.Data.Common.DbDataAdapter>設定中に重複する列を検出すると、 <xref:System.Data.DataTable>、パターンを使用して、後続の列の名前を生成します"*columnname*1"、"*columnname*2"、"*columnname*3"、という具合です。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。 複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットが別のテーブルに配置されます。 整数値を指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に追加することでは、追加の結果セットがという名前です。 列とテーブルの名前を使用してアプリケーションでは、これらの名前付けパターンとの競合が発生しないことを確認してください。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、シナリオをサポートしている場所、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字と小文字が異なる名前を持つオブジェクト。 このような状況では、<xref:System.Data.Common.DbDataAdapter.Fill%2A>大文字小文字の比較、対応するテーブルを検索を実行し、完全一致が存在しない場合は、新しいテーブルを作成します。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されます、 <xref:System.Data.DataSet> 1 つだけ含ま<xref:System.Data.DataTable>、大文字と小文字の名前を持つ異なるを<xref:System.Data.DataTable>が更新されます。 このシナリオで比較では大文字と小文字を区別しません。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 使用することができます、<xref:System.Data.Common.DbDataAdapter.Fill%2A>複数回の同じメソッド<xref:System.Data.DataTable>します。 主キーが存在する場合は、受信行が既に存在する行と一致するとマージされます。 受信した行を追加、主キーが存在しない場合、<xref:System.Data.DataTable>します。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。 詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)します。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチ SQL ステートメントを処理するときに<xref:System.Data.Common.DbDataAdapter.Fill%2A>と<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework データ プロバイダーは、最初の結果のみのスキーマ情報を取得します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="startRecord" /> パラメーターが 0 未満です。  
  
- または - 
<paramref name="maxRecords" /> パラメーターが 0 未満です。</exception>
        <block subset="none" type="overrides">
          <para>このオーバー ロード、<see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />メソッドが保護されており、.NET Framework データ プロバイダーで使用するために設計されています。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FillCommandBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Data.CommandBehavior FillCommandBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandBehavior FillCommandBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property FillCommandBehavior As CommandBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Data::CommandBehavior FillCommandBehavior { System::Data::CommandBehavior get(); void set(System::Data::CommandBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.FillCommandBehavior : System.Data.CommandBehavior with get, set" Usage="System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ アダプターにデータを読み込むコマンドの動作を取得または設定します。</summary>
        <value>データ アダプターにデータを読み込むコマンドの <see cref="T:System.Data.CommandBehavior" />。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FillError">
      <MemberSignature Language="C#" Value="public event System.Data.FillErrorEventHandler FillError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.FillErrorEventHandler FillError" />
      <MemberSignature Language="DocId" Value="E:System.Data.Common.DbDataAdapter.FillError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FillError As FillErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::FillErrorEventHandler ^ FillError;" />
      <MemberSignature Language="F#" Value="member this.FillError : System.Data.FillErrorEventHandler " Usage="member this.FillError : System.Data.FillErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbDataAdapter_FillError")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.FillErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataTable" /> を <see cref="T:System.Data.DataSet" /> に追加し、データ ソース内のスキーマと一致するようにスキーマを設定します。</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">スキーマの挿入先の <see cref="T:System.Data.DataSet" />。</param>
        <param name="schemaType">スキーマを挿入する方法を指定する <see cref="T:System.Data.SchemaType" /> 値の 1 つ。</param>
        <summary>"Table" という名前の <see cref="T:System.Data.DataTable" /> を指定された <see cref="T:System.Data.DataSet" /> に追加し、指定された <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソースにあるスキーマと一致するようにスキーマを構成します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> に追加された <see cref="T:System.Data.DataTable" /> オブジェクトのコレクションへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、データ ソースからスキーマ情報を取得、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>します。  
  
 A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作を追加、<xref:System.Data.DataTable>先に<xref:System.Data.DataSet>します。 列を次に、追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>、し、次の構成を<xref:System.Data.DataColumn>プロパティ、データ ソースに存在する場合。  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 設定する必要があります<xref:System.Data.DataColumn.AutoIncrementStep%2A>と<xref:System.Data.DataColumn.AutoIncrementSeed%2A>とは別にします。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 構成も、<xref:System.Data.DataTable.PrimaryKey%2A>と<xref:System.Data.DataTable.Constraints%2A>に従って、次の規則のプロパティ。  
  
-   1 つまたは複数の主キー列がによって返される場合、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>の主キー列として使用される、<xref:System.Data.DataTable>します。  
  
-   主キー列が返されない場合は、一意の列の一意の列、すべての一意の列は null 値非許容場合のみ、主キーとして使用されます。 Null を許容すると、任意の列がある場合、<xref:System.Data.UniqueConstraint>に追加されます、<xref:System.Data.ConstraintCollection>が、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティは設定されません。  
  
-   主キー列として、主キー列が使用される主キー列と一意の列の両方が返された場合、<xref:System.Data.DataTable>します。  
  
 主キーと一意制約が追加することに注意してください、<xref:System.Data.ConstraintCollection>前述の規則が、その他の制約に従って、型は追加されません。  
  
 一意クラスター化された場合、または SQL Server テーブルの複数の列にインデックスが定義されているし、クラスター化インデックスの列の名前が返されます、別の列のセットで主キー制約が定義されています。 主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。 クエリ ヒントを指定する方法については、次を参照してください。[クエリ ヒント (TRANSACT-SQL)](https://msdn.microsoft.com/library/ms181714.aspx)します。  
  
 中に主キーの情報が使用される<xref:System.Data.Common.DbDataAdapter.Fill%2A>検索し、置換されたキー列と一致するすべての行にします。 目的の動作でない場合は、使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>スキーマ情報を求められることがなく。  
  
 場合、<xref:System.Data.IDataAdapter>設定中に重複する列を検出すると、 <xref:System.Data.DataTable>、パターンを使用して、後続の列の名前を生成します"*columnname*1"、"*columnname*2"、"*columnname*3"、という具合です。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。 複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットが別のテーブルに配置されます。 追加の結果セットは指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど。) に整数値を追加してという名前です。 列とテーブルの名前を使用してアプリケーションでは、これらの名前付けパターンとの競合が発生しないことを確認してください。  
  
 <xref:System.Data.IDbConnection> Select コマンドに関連付けられているオブジェクトを有効にする必要がありますが、開く必要はありません。 場合、<xref:System.Data.IDbConnection>を閉じてから、<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、そのはデータの取得に開かれた後で終了します。 接続が前に開いている場合は<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、それは開いたままにします。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチ SQL ステートメントを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、<xref:System.Data.MissingSchemaAction>に設定`AddWithKey`します。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。 SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。 詳細については、「[SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)」をご覧ください。
  
   
  
## Examples  
 次の例は、派生クラスでは、 <xref:System.Data.SqlClient.SqlDataAdapter>、入力、<xref:System.Data.DataSet>スキーマ、および返します使用、 <xref:System.Data.DataSet>。  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataTable">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataTable" />。</param>
        <param name="schemaType">
          <see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</param>
        <summary>指定された <see cref="T:System.Data.SchemaType" /> に基づいて、指定された <see cref="T:System.Data.DataTable" /> のスキーマを構成します。</summary>
        <returns>データ ソースから返されたスキーマ情報を含む <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>メソッドを使用して、データ ソースからスキーマを取得、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>します。 接続オブジェクトに関連付けられている、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>有効である必要がありますを開く必要はありませんが。 前に、接続が閉じられた場合<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、そのはデータの取得に開かれた後で終了します。 接続が前に開いている場合は<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、未処理のままにします。  
  
 A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作は戻り、<xref:System.Data.DataTable>します。 列を次に、追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>、し、次の構成を<xref:System.Data.DataColumn>プロパティ、データ ソースに存在する場合。  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 設定する必要があります<xref:System.Data.DataColumn.AutoIncrementStep%2A>と<xref:System.Data.DataColumn.AutoIncrementSeed%2A>とは別にします。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 構成も、<xref:System.Data.DataTable.PrimaryKey%2A>と<xref:System.Data.DataTable.Constraints%2A>に従って、次の規則のプロパティ。  
  
-   場合、<xref:System.Data.DataTable.PrimaryKey%2A>に対して既に定義されて、 `DataTable`、または`DataTable`データを含む、`PrimaryKey`プロパティは設定されません。  
  
-   1 つまたは複数の主キー列がによって返される場合、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>の主キー列として使用される、`DataTable`します。  
  
-   主キー列が返されない場合は、一意の列の一意の列、すべての一意の列は null 値非許容場合のみ、主キーとして使用されます。 Null を許容すると、任意の列がある場合、<xref:System.Data.UniqueConstraint>に追加されます、<xref:System.Data.ConstraintCollection>が、`PrimaryKey`プロパティは設定されません。  
  
-   主キー列として、主キー列が使用される主キー列と一意の列の両方が返された場合、`DataTable`します。  
  
 主キーと一意制約が追加することに注意してください、<xref:System.Data.ConstraintCollection>前述の規則が、その他の制約に従って、型は追加されません。 このプロセスには、サーバーに複数のラウンドト リップが必要です。  
  
 一意クラスター化された場合、または SQL Server テーブルの複数の列にインデックスが定義されているし、クラスター化インデックスの列の名前が返されます、別の列のセットで主キー制約が定義されています。 主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。 クエリ ヒントを指定する方法については、次を参照してください。[クエリ ヒント (TRANSACT-SQL)](https://msdn.microsoft.com/library/ms181714.aspx)します。  
  
 場合、<xref:System.Data.Common.DbDataAdapter>設定中に重複する列を検出すると、 <xref:System.Data.DataTable>、パターンを使用して、後続の列の名前を生成します"*columnname*1"、"*columnname*2"、"*columnname*3"、という具合です。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。 複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットが別のテーブルに配置されます。 追加の結果セットは指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど。) に整数値を追加してという名前です。 列とテーブルの名前を使用してアプリケーションでは、これらの名前付けパターンとの競合が発生しないことを確認してください。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> すべての行は返されません。 使用して、<xref:System.Data.Common.DbDataAdapter.Fill%2A>行を追加する方法、<xref:System.Data.DataTable>します。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチ SQL ステートメントを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、<xref:System.Data.MissingSchemaAction>に設定`AddWithKey`します。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。 SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。 詳細については、「[SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)」をご覧ください。
  
   
  
## Examples  
 次の例は、派生クラスでは、 <xref:System.Data.SqlClient.SqlDataAdapter>、入力、<xref:System.Data.DataSet>スキーマ、および返します使用、 <xref:System.Data.DataTable>。  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * string -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">スキーマの挿入先の <see cref="T:System.Data.DataSet" />。</param>
        <param name="schemaType">スキーマを挿入する方法を指定する <see cref="T:System.Data.SchemaType" /> 値の 1 つ。</param>
        <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> に <see cref="T:System.Data.DataTable" /> を追加し、指定した <see cref="T:System.Data.SchemaType" /> および <see cref="T:System.Data.DataTable" /> に基づいて、データ ソースにあるスキーマと一致するようにスキーマを構成します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> に追加された <see cref="T:System.Data.DataTable" /> オブジェクトのコレクションへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、データ ソースからスキーマ情報を取得、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>します。  
  
 A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作を追加、<xref:System.Data.DataTable>先に<xref:System.Data.DataSet>します。 列を次に、追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>、し、次の構成を<xref:System.Data.DataColumn>プロパティ、データ ソースに存在する場合。  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 設定する必要があります<xref:System.Data.DataColumn.AutoIncrementStep%2A>と<xref:System.Data.DataColumn.AutoIncrementSeed%2A>とは別にします。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 構成も、<xref:System.Data.DataTable.PrimaryKey%2A>と<xref:System.Data.DataTable.Constraints%2A>に従って、次の規則のプロパティ。  
  
-   1 つまたは複数の主キー列がによって返される場合、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>の主キー列として使用される、<xref:System.Data.DataTable>します。  
  
-   主キー列が返されない場合は、一意の列の一意の列、すべての一意の列は null 値非許容場合のみ、主キーとして使用されます。 Null を許容すると、任意の列がある場合、<xref:System.Data.UniqueConstraint>に追加されます、<xref:System.Data.ConstraintCollection>が、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティは設定されません。  
  
-   主キー列として、主キー列が使用される主キー列と一意の列の両方が返された場合、<xref:System.Data.DataTable>します。  
  
 主キーと一意制約が追加することに注意してください、<xref:System.Data.ConstraintCollection>前述の規則が、その他の制約に従って、型は追加されません。  
  
 一意クラスター化された場合、または SQL Server テーブルの複数の列にインデックスが定義されているし、クラスター化インデックスの列の名前が返されます、別の列のセットで主キー制約が定義されています。 主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。 クエリ ヒントを指定する方法については、次を参照してください。[クエリ ヒント (TRANSACT-SQL)](https://msdn.microsoft.com/library/ms181714.aspx)します。  
  
 中に主キーの情報が使用される<xref:System.Data.Common.DbDataAdapter.Fill%2A>検索し、置換されたキー列と一致するすべての行にします。 目的の動作でない場合は、使用<xref:System.Data.Common.DbDataAdapter.Fill%2A>スキーマ情報を求められることがなく。  
  
 場合、<xref:System.Data.Common.DbDataAdapter>設定中に重複する列を検出すると、 <xref:System.Data.DataTable>、パターンを使用して、後続の列の名前を生成します"*columnname*1"、"*columnname*2"、"*columnname*3"、という具合です。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。 複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットが別のテーブルに配置されます。 追加の結果セットは指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど。) に整数値を追加してという名前です。 列とテーブルの名前を使用してアプリケーションでは、これらの名前付けパターンとの競合が発生しないことを確認してください。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>メソッドは、シナリオをサポートしている場所、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字と小文字が異なる名前を持つオブジェクト。 このような状況では、<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>大文字小文字の比較、対応するテーブルを検索を実行し、完全一致が存在しない場合は、新しいテーブルを作成します。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 場合<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されます、 <xref:System.Data.DataSet> 1 つだけ含ま<xref:System.Data.DataTable>、大文字と小文字の名前を持つ異なるを<xref:System.Data.DataTable>が更新されます。 このシナリオで比較では大文字と小文字を区別しません。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.IDbConnection> Select コマンドに関連付けられているオブジェクトを有効にする必要がありますが、開く必要はありません。 場合、<xref:System.Data.IDbConnection>を閉じてから、<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、そのはデータの取得に開かれた後で終了します。 接続が前に開いている場合は<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、それは開いたままにします。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチ SQL ステートメントを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、<xref:System.Data.MissingSchemaAction>に設定`AddWithKey`します。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。 SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。 詳細については、「[SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)」をご覧ください。
  
   
  
## Examples  
 次の例は、派生クラスでは、 <xref:System.Data.SqlClient.SqlDataAdapter>、入力、<xref:System.Data.DataSet>スキーマ、および返します使用、 <xref:System.Data.DataSet>。  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">スキーマの取得元のソース テーブルが見つかりません。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataTable" />。</param>
        <param name="schemaType">
          <see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</param>
        <param name="command">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</param>
        <param name="behavior">
          <see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Data.DataTable" />、コマンド文字列、および <see cref="T:System.Data.SchemaType" /> 値に基づいて、指定した <see cref="T:System.Data.CommandBehavior" /> のスキーマを設定します。</summary>
        <returns>データ ソースから返されたスキーマ情報が格納された <see cref="T:System.Data.DataTable" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>メソッドを使用して、データ ソースからスキーマを取得、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>します。 接続オブジェクトに関連付けられている、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>有効である必要がありますを開く必要はありませんが。 前に、接続が閉じられた場合<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、そのはデータの取得に開かれた後で終了します。 接続が前に開いている場合は<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、未処理のままにします。  
  
 A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作を追加、<xref:System.Data.DataTable>先に<xref:System.Data.DataSet>します。 列を次に、追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>、し、次の構成を<xref:System.Data.DataColumn>プロパティ、データ ソースに存在する場合。  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 設定する必要があります<xref:System.Data.DataColumn.AutoIncrementStep%2A>と<xref:System.Data.DataColumn.AutoIncrementSeed%2A>とは別にします。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 構成も、<xref:System.Data.DataTable.PrimaryKey%2A>と<xref:System.Data.DataTable.Constraints%2A>に従って、次の規則のプロパティ。  
  
-   1 つまたは複数の主キー列がによって返される場合、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>の主キー列として使用される、<xref:System.Data.DataTable>します。  
  
-   主キー列が返されない場合は、一意の列の一意の列、すべての一意の列は null 値非許容場合のみ、主キーとして使用されます。 Null を許容すると、任意の列がある場合、<xref:System.Data.UniqueConstraint>に追加されます、<xref:System.Data.ConstraintCollection>が、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティは設定されません。  
  
-   主キー列として、主キー列が使用される主キー列と一意の列の両方が返された場合、<xref:System.Data.DataTable>します。  
  
 主キーと一意制約が追加することに注意してください、<xref:System.Data.ConstraintCollection>前述の規則が、その他の制約に従って、型は追加されません。  
  
 一意クラスター化された場合、または SQL Server テーブルの複数の列にインデックスが定義されているし、クラスター化インデックスの列の名前が返されます、別の列のセットで主キー制約が定義されています。 主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。 クエリ ヒントを指定する方法については、次を参照してください。[クエリ ヒント (TRANSACT-SQL)](https://msdn.microsoft.com/library/ms181714.aspx)します。  
  
 場合、<xref:System.Data.IDataAdapter>設定中に重複する列を検出すると、 <xref:System.Data.DataTable>、パターンを使用して、後続の列の名前を生成します"*columnname*1"、"*columnname*2"、"*columnname*3"、という具合です。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。 複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットが別のテーブルに配置されます。 追加の結果セットは指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど。) に整数値を追加してという名前です。 列とテーブルの名前を使用してアプリケーションでは、これらの名前付けパターンとの競合が発生しないことを確認してください。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> すべての行は返されません。 使用して、<xref:System.Data.Common.DbDataAdapter.Fill%2A>行を追加する方法、<xref:System.Data.DataTable>します。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチ SQL ステートメントを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、<xref:System.Data.MissingSchemaAction>に設定`AddWithKey`します。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。 SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。 詳細については、「[SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)」をご覧ください。
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>この実装の<see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />メソッドが保護されており、.NET Framework データ プロバイダーで使用するために設計されています。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, string srcTable, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::String ^ srcTable, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * System.Data.IDbCommand * string * System.Data.CommandBehavior -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, command, srcTable, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataSet" />。</param>
        <param name="schemaType">
          <see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</param>
        <param name="command">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</param>
        <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
        <param name="behavior">
          <see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Data.DataTable" /> に <see cref="T:System.Data.DataSet" /> を追加し、指定した <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソース内のスキーマと一致するようにスキーマを設定します。</summary>
        <returns>データ ソースから返されたスキーマ情報が格納された、<see cref="T:System.Data.DataTable" /> オブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>メソッドを使用して、データ ソースからスキーマを取得、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>します。 接続オブジェクトに関連付けられている、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>有効である必要がありますを開く必要はありませんが。 前に、接続が閉じられた場合<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、そのはデータの取得に開かれた後で終了します。 接続が前に開いている場合は<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、未処理のままにします。  
  
 A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作を追加、<xref:System.Data.DataTable>先に<xref:System.Data.DataSet>します。 列を次に、追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>、し、次の構成を<xref:System.Data.DataColumn>プロパティ、データ ソースに存在する場合。  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 設定する必要があります<xref:System.Data.DataColumn.AutoIncrementStep%2A>と<xref:System.Data.DataColumn.AutoIncrementSeed%2A>とは別にします。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 構成も、<xref:System.Data.DataTable.PrimaryKey%2A>と<xref:System.Data.DataTable.Constraints%2A>に従って、次の規則のプロパティ。  
  
-   1 つまたは複数の主キー列がによって返される場合、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>の主キー列として使用される、<xref:System.Data.DataTable>します。  
  
-   主キー列が返されない場合は、一意の列の一意の列、すべての一意の列は null 値非許容場合のみ、主キーとして使用されます。 Null を許容すると、任意の列がある場合、<xref:System.Data.UniqueConstraint>に追加されます、<xref:System.Data.ConstraintCollection>が、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティは設定されません。  
  
-   主キー列として、主キー列が使用される主キー列と一意の列の両方が返された場合、<xref:System.Data.DataTable>します。  
  
 主キーと一意制約が追加することに注意してください、<xref:System.Data.ConstraintCollection>前述の規則が、その他の制約に従って、型は追加されません。  
  
 一意クラスター化された場合、または SQL Server テーブルの複数の列にインデックスが定義されているし、クラスター化インデックスの列の名前が返されます、別の列のセットで主キー制約が定義されています。 主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。 クエリ ヒントを指定する方法については、次を参照してください。[クエリ ヒント (TRANSACT-SQL)](https://msdn.microsoft.com/library/ms181714.aspx)します。  
  
 場合、<xref:System.Data.IDataAdapter>設定中に重複する列を検出すると、 <xref:System.Data.DataTable>、パターンを使用して、後続の列の名前を生成します"*columnname*1"、"*columnname*2"、"*columnname*3"、という具合です。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"など。 複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットが別のテーブルに配置されます。 追加の結果セットは指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど。) に整数値を追加してという名前です。 列とテーブルの名前を使用してアプリケーションでは、これらの名前付けパターンとの競合が発生しないことを確認してください。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>メソッドは、シナリオをサポートしている場所、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字と小文字が異なる名前を持つオブジェクト。 このような状況では、<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>大文字小文字の比較、対応するテーブルを検索を実行し、完全一致が存在しない場合は、新しいテーブルを作成します。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 場合<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されます、 <xref:System.Data.DataSet> 1 つだけ含ま<xref:System.Data.DataTable>、大文字と小文字の名前を持つ異なるを<xref:System.Data.DataTable>が更新されます。 このシナリオで比較では大文字と小文字を区別しません。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> すべての行は返されません。 使用して、<xref:System.Data.Common.DbDataAdapter.Fill%2A>行を追加する方法、<xref:System.Data.DataTable>します。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチ SQL ステートメントを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、<xref:System.Data.MissingSchemaAction>に設定`AddWithKey`します。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。 SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。 詳細については、「[SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)」をご覧ください。
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>この実装の<see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />メソッドが保護されており、.NET Framework データ プロバイダーで使用するために設計されています。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedParameter : int * int -&gt; System.Data.IDataParameter&#xA;override this.GetBatchedParameter : int * int -&gt; System.Data.IDataParameter" Usage="dbDataAdapter.GetBatchedParameter (commandIdentifier, parameterIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="parameterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">パラメーターを取得するコマンドのインデックス。</param>
        <param name="parameterIndex">コマンド内のパラメーターのインデックス。</param>
        <summary>現在のバッチのコマンドの 1 つから <see cref="T:System.Data.IDataParameter" /> を返します。</summary>
        <returns>指定された <see cref="T:System.Data.IDataParameter" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>、このメソッドはスロー<xref:System.NotSupportedException>します。 継承するクラス<xref:System.Data.Common.DbDataAdapter>バッチのサポートを提供するには、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドが保護され、.NET Framework データ プロバイダーで使用するために設計されています。  
  
継承するクラスの場合<see cref="T:System.Data.Common.DbDataAdapter" />クラスが、バッチを実行できるようにするには、このメソッドをオーバーライドするバッチをサポートしています。 実装を使用して、 <paramref name="commandIdentifier" /> 、要求されたコマンドを見つけるに提供し、使用して、<paramref name="parameterIndex" />要求されたパラメーターを提供します。 たとえば、 <paramref name="commandIdentifier" /> 0 と<paramref name="parameterIndex" />0 のバッチの最初のコマンドから、最初のパラメーターを返します。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedRecordsAffected : int *  *  -&gt; bool&#xA;override this.GetBatchedRecordsAffected : int *  *  -&gt; bool" Usage="dbDataAdapter.GetBatchedRecordsAffected (commandIdentifier, recordsAffected, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="recordsAffected" Type="System.Int32" RefType="out" />
        <Parameter Name="error" Type="System.Exception" RefType="out" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">バッチ内の個々のコマンドの、0 から始まる列の序数。</param>
        <param name="recordsAffected">バッチ内に指定されたコマンドの影響を受ける、データ ストア内の行数。</param>
        <param name="error">指定されたコマンドの実行中にスローされた <see cref="T:System.Exception" />。 例外がスローされなかった場合は、<see langword="null" /> (Visual Basic では <see langword="Nothing" />) を返します。</param>
        <summary>バッチ更新内の、個々の更新の試行に関する情報を返します。</summary>
        <returns>バッチ更新内の、個々の更新の試行に関する情報。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 バッチ更新ロジックをサポートするデータ プロバイダーで、一連の仮想メソッドをオーバーライドする必要があります、<xref:System.Data.Common.DbDataAdapter>クラス。 `GetBatchedRecordsAffected` これらの仮想メソッドのいずれかを表します。 `DbDataAdapter`クラスが依存`GetBatchedRecordsAffected`をバッチ内で個々 の更新の試行の成否を判断し、対応する各マークので<xref:System.Data.DataRow>それに応じて。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public override System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="override this.GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="dbDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>SQL SELECT ステートメントの実行時にユーザーが設定したパラメーターを取得します。</summary>
        <returns>ユーザーが設定したパラメーターが格納された <see cref="T:System.Data.IDataParameter" /> オブジェクトの配列。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected virtual void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeBatching();" />
      <MemberSignature Language="F#" Value="abstract member InitializeBatching : unit -&gt; unit&#xA;override this.InitializeBatching : unit -&gt; unit" Usage="dbDataAdapter.InitializeBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.Common.DbDataAdapter" /> のバッチ処理を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>、このメソッドはスロー<xref:System.NotSupportedException>します。 継承するクラス<xref:System.Data.Common.DbDataAdapter>バッチのサポートを提供するには、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドが保護され、.NET Framework データ プロバイダーで使用するために設計されています。  
  
継承するクラスの場合<see cref="T:System.Data.Common.DbDataAdapter" />クラスがこのメソッドをオーバーライドするバッチをサポートしています。 このメソッドでは、クラスに、バッチ処理をサポートするために必要なリソースを初期化する機会が与えられます。 など、クラスは、バッチ内のコマンドのセットを保持するデータ構造を割り当てることがあります。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ InsertCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースに新しいレコードを挿入するコマンドを取得または設定します。</summary>
        <value>データ セット内の新しい行に対応するデータ ソース内のレコードを挿入するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中に<xref:System.Data.Common.DbDataAdapter.Update%2A>、このプロパティを設定しないと、プライマリ キーの情報が存在する場合、 <xref:System.Data.DataSet>、<xref:System.Data.IDbDataAdapter.InsertCommand%2A>が自動的に生成されます。  
  
   
  
## Examples  
 次の例は、派生クラスを作成します。<xref:System.Data.OleDb.OleDbDataAdapter>および一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="OnFillError">
      <MemberSignature Language="C#" Value="protected virtual void OnFillError (System.Data.FillErrorEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFillError(class System.Data.FillErrorEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnFillError(System.Data.FillErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFillError (value As FillErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFillError(System::Data::FillErrorEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnFillError : System.Data.FillErrorEventArgs -&gt; unit&#xA;override this.OnFillError : System.Data.FillErrorEventArgs -&gt; unit" Usage="dbDataAdapter.OnFillError value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.FillErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdated (value As RowUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit&#xA;override this.OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdated value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">イベント データを格納している <see cref="T:System.Data.Common.RowUpdatedEventArgs" />。</param>
        <summary>.NET Framework データ プロバイダーの <see langword="RowUpdated" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドするときに<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />メソッド。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdating (value As RowUpdatingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit&#xA;override this.OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdating value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">イベント データを格納している <see cref="T:System.Data.Common.RowUpdatingEventArgs" />。</param>
        <summary>.NET Framework データ プロバイダーの <see langword="RowUpdating" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドするときに<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />、派生クラスでは、ベースのクラスを呼び出すことを確認する<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />メソッド。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ SelectCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース内のレコードを選択するコマンドを取得または設定します。</summary>
        <value>データ セットに挿入するレコードをデータ ソースから選択するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、派生クラスを作成します。<xref:System.Data.OleDb.OleDbDataAdapter>および一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ セットからレコードを削除する SQL ステートメントを取得または設定します。</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> 中に、データ セット内の削除された行に対応するデータ ソース内のレコードを削除するために使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合のみ、使用できます。  
  
 詳細については、「<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースに新しいレコードを挿入する SQL ステートメントを取得または設定します。</summary>
        <value>データ セット内の新しい行に対応するデータ ソース内のレコードを挿入するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合のみ、使用できます。  
  
 詳細については、「<xref:System.Data.IDbDataAdapter.InsertCommand%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース内のレコードを選択する SQL ステートメントを取得または設定します。</summary>
        <value>データ セットに挿入するレコードをデータ ソースから選択するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合のみ、使用できます。  
  
 詳細については、「<xref:System.Data.IDbDataAdapter.SelectCommand%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース内のレコードを更新する SQL ステートメントを取得または設定します。</summary>
        <value>データ セット内の変更された行に対応するデータ ソース内のレコードを更新するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合のみ、使用できます。  
  
 詳細については、「<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("use 'protected DbDataAdapter(DbDataAdapter)' ctor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のインスタンスのコピーである新しいオブジェクトを作成します。</summary>
        <returns>このインスタンスのコピーである新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.ICloneable> インターフェイスにキャストされる場合のみ、使用できます。  
  
 詳細については、「<xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected virtual void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TerminateBatching();" />
      <MemberSignature Language="F#" Value="abstract member TerminateBatching : unit -&gt; unit&#xA;override this.TerminateBatching : unit -&gt; unit" Usage="dbDataAdapter.TerminateBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.Common.DbDataAdapter" /> のバッチ処理を終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>、このメソッドはスロー<xref:System.NotSupportedException>します。 継承するクラス<xref:System.Data.Common.DbDataAdapter>バッチのサポートを提供するには、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドが保護され、.NET Framework データ プロバイダーで使用するために設計されています。  
  
継承するクラスの場合<see cref="T:System.Data.Common.DbDataAdapter" />クラスがこのメソッドをオーバーライドするバッチをサポートしています。 このメソッドでは、クラスに、バッチ処理をサポートするために割り当てられているリソースを破棄する機会が与えられます。 たとえば、クラスのバッチ内のコマンドを保持するデータ構造体割り当てを解除可能性があります。</para>
        </block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Update">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataSet" /> での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataRow[] dataRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataRows As DataRow()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] -&gt; int" Usage="dbDataAdapter.Update dataRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="dataRows">データ ソースの更新に使用する <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> 内の配列での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションを呼び出すと、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッド、<xref:System.Data.Common.DbDataAdapter>を調べ、<xref:System.Data.DataRow.RowState%2A>プロパティ、で構成されているインデックスの順序に基づいて、各行の繰り返し必要なINSERT、UPDATE、またはDELETEステートメントを実行し、<xref:System.Data.DataSet>. たとえば、<xref:System.Data.Common.DbDataAdapter.Update%2A>で INSERT ステートメントとし、もう 1 つの DELETE ステートメント内の行の順序付けに期限の後に、DELETE ステートメントを実行する場合があります、<xref:System.Data.DataTable>します。  
  
 これらのステートメントがバッチ処理として実行しないことに注意してください。各行は個別に更新されます。 アプリケーションが呼び出すことができます、<xref:System.Data.DataSet.GetChanges%2A>ときの一連のステートメントの種類 (たとえば、更新する前に挿入) を制御する必要があります。 詳細については、次を参照してください。 [Dataadapter によるデータ ソースを更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)します。  
  
 かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは例外を生成します。 ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>または<xref:System.Data.OleDb.OleDbCommandBuilder>設定した場合、SQL ステートメントの単一テーブルの更新プログラムを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティ。 次に、設定しない追加の SQL ステートメントがによって生成される、 **CommandBuilder**します。 この生成ロジックではキー列の情報に含まれる、<xref:System.Data.DataSet>します。 詳細については、次を参照してください。 [Commandbuilder でのコマンドの生成](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)します。  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは、更新プログラムを実行する前に、最初のマッピングを示す表から行を取得します。 <xref:System.Data.Common.DbDataAdapter.Update%2A>の値を使用して行を更新し、<xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティ。 返されるその他の行は無視されます。  
  
 すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントを発生すると、ユーザーは、検査、調整できるようにする<xref:System.Data.DataSet>行と、コマンドによって返されるパラメーターを出力します。 行が正常に更新した後、その行に対する変更が受け入れられます。  
  
 使用する場合<xref:System.Data.Common.DbDataAdapter.Update%2A>実行の順序は、次のようにします。  
  
1.  内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドを実行します。  
  
4.  コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果が配置されます、<xref:System.Data.DataRow>します。  
  
5.  配置される出力パラメーターがある場合、<xref:System.Data.DataRow>します。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。  
  
 各コマンドに関連付けられている、<xref:System.Data.Common.DbDataAdapter>関連付けられているパラメーターのコレクションを持ちます。 パラメーターを使用して、現在行にマップされます、`SourceColumn`と`SourceVersion`プロパティの .NET Framework データ プロバイダーの`Parameter`クラス。 `SourceColumn` 指す、<xref:System.Data.DataTable>列を<xref:System.Data.Common.DbDataAdapter>参照を現在の行のパラメーターの値を取得します。  
  
 `SourceColumn` すべてのテーブル マップを適用する前に、マップされていない列の名前を参照します。 場合`SourceColumn`参照を存在しない列に、実行されるアクションは、次のいずれかに依存<xref:System.Data.MissingMappingAction>値。  
  
|列挙値|実行されるアクション|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|ソース列名とテーブル名を使用して、<xref:System.Data.DataSet>マッピングが存在しない場合。|  
|`MissingMappingAction.Ignore`|A<xref:System.SystemException>が生成されます。 マッピングが明示的に設定すると、入力パラメーターのマッピングがない、通常、エラーの結果です。|  
|`MissingMappingAction.Error`|A<xref:System.SystemException>が生成されます。|  
  
 `SourceColumn`出力の値をマップするプロパティを使用しても、または入力/出力パラメーターを`DataSet`します。 存在しない列を参照する場合、例外が生成されます。  
  
 `SourceVersion`プロパティの .NET Framework データ プロバイダーの`Parameter`クラスは、列の値の元の現在、または提案済みバージョンを使用するかどうかを決定します。 この機能は、オプティミスティック同時実行制御違反をチェックする UPDATE ステートメントの WHERE 句に元の値を含めるによく使用します。  
  
> [!NOTE]
>  行の更新中にエラーが発生した場合は、例外がスローされ、更新プログラムの実行は廃止されました。 更新操作を続行すると、エラーが発生した場合に例外を生成せず、設定、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>プロパティを`true`呼び出す前に<xref:System.Data.Common.DbDataAdapter.Update%2A>します。 内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベント。 内で例外を生成せず、更新操作を続行する、`RowUpdated`イベント、設定、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>のプロパティ、<xref:System.Data.Common.RowUpdatedEventArgs>に<xref:System.Data.UpdateStatus.Continue>します。  
  
   
  
## Examples  
 次の例は、派生クラスでは、 <xref:System.Data.OleDb.OleDbDataAdapter>、データ ソースを更新します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
        <exception cref="T:System.SystemException">更新する <see cref="T:System.Data.DataRow" /> が存在しません。  
  
- または - 
更新する <see cref="T:System.Data.DataTable" /> が存在しません。  
  
- または - 
ソースとして使用する <see cref="T:System.Data.DataSet" /> が存在しません。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">データ ソースの更新に使用した <see cref="T:System.Data.DataSet" />。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションを呼び出すと、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッド、<xref:System.Data.Common.DbDataAdapter>を調べ、<xref:System.Data.DataRow.RowState%2A>プロパティ、で構成されているインデックスの順序に基づいて、各行の繰り返し必要なINSERT、UPDATE、またはDELETEステートメントを実行し、<xref:System.Data.DataSet>. たとえば、<xref:System.Data.Common.DbDataAdapter.Update%2A>で INSERT ステートメントとし、もう 1 つの DELETE ステートメント内の行の順序付けに期限の後に、DELETE ステートメントを実行する場合があります、<xref:System.Data.DataTable>します。  
  
 これらのステートメントがバッチ処理として実行しないことに注意してください。各行は個別に更新されます。 アプリケーションが呼び出すことができます、<xref:System.Data.DataSet.GetChanges%2A>ときの一連のステートメントの種類 (たとえば、更新する前に挿入) を制御する必要があります。 詳細については、次を参照してください。 [Dataadapter によるデータ ソースを更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)します。  
  
 かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは例外を生成します。 ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>または<xref:System.Data.OleDb.OleDbCommandBuilder>設定した場合、SQL ステートメントの単一テーブルの更新プログラムを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティ。 次に、設定しない追加の SQL ステートメントがによって生成される、 **CommandBuilder**します。 この生成ロジックではキー列の情報に含まれる、<xref:System.Data.DataSet>します。 詳細については、次を参照してください。 [Commandbuilder でのコマンドの生成](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)します。  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは、更新プログラムを実行する前に、最初のマッピングを示す表から行を取得します。 <xref:System.Data.Common.DbDataAdapter.Update%2A>の値を使用して行を更新し、<xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティ。 返されるその他の行は無視されます。  
  
 すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントを発生すると、ユーザーは、検査、調整できるようにする<xref:System.Data.DataSet>行と、コマンドによって返されるパラメーターを出力します。 行が正常に更新した後、その行に対する変更が受け入れられます。  
  
 使用する場合<xref:System.Data.Common.DbDataAdapter.Update%2A>実行の順序は、次のようにします。  
  
1.  内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドを実行します。  
  
4.  コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果に格納し、<xref:System.Data.DataRow>します。  
  
5.  配置される出力パラメーターがある場合、<xref:System.Data.DataRow>します。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。  
  
 各コマンドに関連付けられている、<xref:System.Data.Common.DbDataAdapter>関連付けられているパラメーターのコレクションを持ちます。 パラメーターを使用して、現在行にマップされます、`SourceColumn`と`SourceVersion`プロパティの .NET Framework データ プロバイダーの`Parameter`クラス。 `SourceColumn` 指す、<xref:System.Data.DataTable>列を<xref:System.Data.Common.DbDataAdapter>参照を現在の行のパラメーターの値を取得します。  
  
 `SourceColumn` すべてのテーブル マップを適用する前に、マップされていない列の名前を参照します。 場合`SourceColumn`参照を存在しない列に、実行されるアクションは、次のいずれかに依存<xref:System.Data.MissingMappingAction>値。  
  
|列挙値|実行されるアクション|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|ソース列名とテーブル名を使用して、<xref:System.Data.DataSet>マッピングが存在しない場合。|  
|`MissingMappingAction.Ignore`|A<xref:System.SystemException>が生成されます。 マッピングが明示的に設定すると、入力パラメーターのマッピングがない、通常、エラーの結果です。|  
|`MissingMappingAction.Error`|A<xref:System.SystemException>が生成されます。|  
  
 `SourceColumn`出力の値をマップするプロパティを使用しても、または入力/出力パラメーターを`DataSet`します。 存在しない列を参照する場合、例外が生成されます。  
  
 `SourceVersion`プロパティの .NET Framework データ プロバイダーの`Parameter`クラスは、列の値の元の現在、または提案済みバージョンを使用するかどうかを決定します。 この機能は、オプティミスティック同時実行制御違反をチェックする UPDATE ステートメントの WHERE 句に元の値を含めるによく使用します。  
  
> [!NOTE]
>  行の更新中にエラーが発生した場合は、例外がスローされ、更新プログラムの実行は廃止されました。 更新操作を続行すると、エラーが発生した場合に例外を生成せず、設定、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>プロパティを`true`呼び出す前に<xref:System.Data.Common.DbDataAdapter.Update%2A>します。 内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベント。 内で例外を生成せず、更新操作を続行する、`RowUpdated`イベント、設定、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>のプロパティ、<xref:System.Data.Common.RowUpdatedEventArgs>に<xref:System.Data.UpdateStatus.Continue>します。  
  
   
  
## Examples  
 次の例は、派生クラスでは、 <xref:System.Data.OleDb.OleDbDataAdapter>、データ ソースを更新します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Update dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">データ ソースの更新に使用した <see cref="T:System.Data.DataTable" />。</param>
        <summary>指定した <see cref="T:System.Data.DataTable" /> での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
        <returns>
          <see cref="T:System.Data.DataTable" /> 内で正常に更新された行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションを呼び出すと、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッド、<xref:System.Data.Common.DbDataAdapter>を調べ、<xref:System.Data.DataRow.RowState%2A>プロパティ、で構成されているインデックスの順序に基づいて、各行の繰り返し必要なINSERT、UPDATE、またはDELETEステートメントを実行し、<xref:System.Data.DataSet>. たとえば、<xref:System.Data.Common.DbDataAdapter.Update%2A>で INSERT ステートメントとし、もう 1 つの DELETE ステートメント内の行の順序付けに期限の後に、DELETE ステートメントを実行する場合があります、<xref:System.Data.DataTable>します。  
  
 これらのステートメントがバッチ処理として実行しないことに注意してください。各行は個別に更新されます。 アプリケーションが呼び出すことができます、<xref:System.Data.DataSet.GetChanges%2A>ときの一連のステートメントの種類 (たとえば、更新する前に挿入) を制御する必要があります。 詳細については、次を参照してください。 [Dataadapter によるデータ ソースを更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)します。  
  
 かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは例外を生成します。 ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>または<xref:System.Data.OleDb.OleDbCommandBuilder>設定した場合、SQL ステートメントの単一テーブルの更新プログラムを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティ。 次に、設定しない追加の SQL ステートメントがによって生成される、 **CommandBuilder**します。 この生成ロジックではキー列の情報に含まれる、<xref:System.Data.DataSet>します。 詳細については、次を参照してください。 [Commandbuilder でのコマンドの生成](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)します。  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは、更新プログラムを実行する前に、最初のマッピングを示す表から行を取得します。 <xref:System.Data.Common.DbDataAdapter.Update%2A>の値を使用して行を更新し、<xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティ。 返されるその他の行は無視されます。  
  
 すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントを発生すると、ユーザーは、検査、調整できるようにする<xref:System.Data.DataSet>行と、コマンドによって返されるパラメーターを出力します。 行が正常に更新した後、その行に対する変更が受け入れられます。  
  
 使用する場合<xref:System.Data.Common.DbDataAdapter.Update%2A>実行の順序は、次のようにします。  
  
1.  内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドを実行します。  
  
4.  コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果に格納し、<xref:System.Data.DataRow>します。  
  
5.  配置される出力パラメーターがある場合、<xref:System.Data.DataRow>します。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。  
  
 各コマンドに関連付けられている、<xref:System.Data.Common.DbDataAdapter>関連付けられているパラメーターのコレクションを持ちます。 パラメーターを使用して、現在行にマップされます、`SourceColumn`と`SourceVersion`プロパティの .NET Framework データ プロバイダーの`Parameter`クラス。 `SourceColumn` 指す、<xref:System.Data.DataTable>列を<xref:System.Data.Common.DbDataAdapter>参照を現在の行のパラメーターの値を取得します。  
  
 `SourceColumn` すべてのテーブル マップを適用する前に、マップされていない列の名前を参照します。 場合`SourceColumn`参照を存在しない列に、実行されるアクションは、次のいずれかに依存<xref:System.Data.MissingMappingAction>値。  
  
|列挙値|実行されるアクション|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|ソース列名とテーブル名を使用して、<xref:System.Data.DataSet>マッピングが存在しない場合。|  
|`MissingMappingAction.Ignore`|A<xref:System.SystemException>が生成されます。 マッピングが明示的に設定すると、入力パラメーターのマッピングがない、通常、エラーの結果です。|  
|`MissingMappingAction.Error`|A<xref:System.SystemException>が生成されます。|  
  
 `SourceColumn`出力の値をマップするプロパティを使用しても、または入力/出力パラメーターを`DataSet`します。 存在しない列を参照する場合、例外が生成されます。  
  
 `SourceVersion`プロパティの .NET Framework データ プロバイダーの`Parameter`クラスは、列の値の元の現在、または提案済みバージョンを使用するかどうかを決定します。 この機能は、オプティミスティック同時実行制御違反をチェックする UPDATE ステートメントの WHERE 句に元の値を含めるによく使用します。  
  
> [!NOTE]
>  行の更新中にエラーが発生した場合は、例外がスローされ、更新プログラムの実行は廃止されました。 更新操作を続行すると、エラーが発生した場合に例外を生成せず、設定、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>プロパティを`true`呼び出す前に<xref:System.Data.Common.DbDataAdapter.Update%2A>します。 内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベント。 内で例外を生成せず、更新操作を続行する、`RowUpdated`イベント、設定、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>のプロパティ、<xref:System.Data.Common.RowUpdatedEventArgs>に<xref:System.Data.UpdateStatus.Continue>します。  
  
   
  
## Examples  
 次の例は、派生クラスでは、 <xref:System.Data.OleDb.OleDbDataAdapter>、データ ソースを更新します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
        <exception cref="T:System.SystemException">更新する <see cref="T:System.Data.DataRow" /> が存在しません。  
  
- または - 
更新する <see cref="T:System.Data.DataTable" /> が存在しません。  
  
- または - 
ソースとして使用する <see cref="T:System.Data.DataSet" /> が存在しません。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Update(class System.Data.DataRow[] dataRows, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Update (dataRows As DataRow(), tableMapping As DataTableMapping) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] * System.Data.Common.DataTableMapping -&gt; int" Usage="dbDataAdapter.Update (dataRows, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRows">データ ソースの更新に使用する <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
        <param name="tableMapping">使用する <see cref="P:System.Data.IDataAdapter.TableMappings" /> コレクション。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> オブジェクトの配列内の挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションを呼び出すと、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッド、<xref:System.Data.Common.DbDataAdapter>を調べ、<xref:System.Data.DataRow.RowState%2A>プロパティ、で構成されているインデックスの順序に基づいて、各行の繰り返し必要なINSERT、UPDATE、またはDELETEステートメントを実行し、<xref:System.Data.DataSet>. たとえば、<xref:System.Data.Common.DbDataAdapter.Update%2A>で INSERT ステートメントとし、もう 1 つの DELETE ステートメント内の行の順序付けに期限の後に、DELETE ステートメントを実行する場合があります、<xref:System.Data.DataTable>します。  
  
 これらのステートメントがバッチ処理として実行しないことに注意してください。各行は個別に更新されます。 アプリケーションが呼び出すことができます、<xref:System.Data.DataSet.GetChanges%2A>ときの一連のステートメントの種類 (たとえば、更新する前に挿入) を制御する必要があります。 詳細については、次を参照してください。 [Dataadapter によるデータ ソースを更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)します。  
  
 かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは例外を生成します。 ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>または<xref:System.Data.OleDb.OleDbCommandBuilder>設定した場合、SQL ステートメントの単一テーブルの更新プログラムを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティ。 次に、設定しない追加の SQL ステートメントがによって生成される、 **CommandBuilder**します。 この生成ロジックではキー列の情報に含まれる、<xref:System.Data.DataSet>します。 詳細については、次を参照してください。 [Commandbuilder でのコマンドの生成](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)します。  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは、更新プログラムを実行する前に、最初のマッピングを示す表から行を取得します。 <xref:System.Data.Common.DbDataAdapter.Update%2A>の値を使用して行を更新し、<xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティ。 返されるその他の行は無視されます。  
  
 すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントを発生すると、ユーザーは、検査、調整できるようにする<xref:System.Data.DataSet>行と、コマンドによって返されるパラメーターを出力します。 行が正常に更新した後、その行に対する変更が受け入れられます。  
  
 使用する場合<xref:System.Data.Common.DbDataAdapter.Update%2A>実行の順序は、次のようにします。  
  
1.  内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドを実行します。  
  
4.  コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果に格納し、<xref:System.Data.DataRow>します。  
  
5.  配置される出力パラメーターがある場合、<xref:System.Data.DataRow>します。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。  
  
 各コマンドに関連付けられている、<xref:System.Data.Common.DbDataAdapter>関連付けられているパラメーターのコレクションを持ちます。 パラメーターを使用して、現在行にマップされます、`SourceColumn`と`SourceVersion`プロパティの .NET Framework データ プロバイダーの`Parameter`クラス。 `SourceColumn` 指す、<xref:System.Data.DataTable>列を<xref:System.Data.Common.DbDataAdapter>参照を現在の行のパラメーターの値を取得します。  
  
 `SourceColumn` すべてのテーブル マップを適用する前に、マップされていない列の名前を参照します。 場合`SourceColumn`参照を存在しない列に、実行されるアクションは、次のいずれかに依存<xref:System.Data.MissingMappingAction>値。  
  
|列挙値|実行されるアクション|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|ソース列名とテーブル名を使用して、<xref:System.Data.DataSet>マッピングが存在しない場合。|  
|`MissingMappingAction.Ignore`|A<xref:System.SystemException>が生成されます。 マッピングが明示的に設定すると、入力パラメーターのマッピングがない、通常、エラーの結果です。|  
|`MissingMappingAction.Error`|A<xref:System.SystemException>が生成されます。|  
  
 `SourceColumn`出力の値をマップするプロパティを使用しても、または入力/出力パラメーターを`DataSet`します。 存在しない列を参照する場合、例外が生成されます。  
  
 `SourceVersion`プロパティの .NET Framework データ プロバイダーの`Parameter`クラスは、列の値の元の現在、または提案済みバージョンを使用するかどうかを決定します。 この機能は、オプティミスティック同時実行制御違反をチェックする UPDATE ステートメントの WHERE 句に元の値を含めるによく使用します。  
  
> [!NOTE]
>  行の更新中にエラーが発生した場合は、例外がスローされ、更新プログラムの実行は廃止されました。 更新操作を続行すると、エラーが発生した場合に例外を生成せず、設定、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>プロパティを`true`呼び出す前に<xref:System.Data.Common.DbDataAdapter.Update%2A>します。 内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベント。 内で例外を生成せず、更新操作を続行する、`RowUpdated`イベント、設定、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>のプロパティ、<xref:System.Data.Common.RowUpdatedEventArgs>に<xref:System.Data.UpdateStatus.Continue>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
        <exception cref="T:System.SystemException">更新する <see cref="T:System.Data.DataRow" /> が存在しません。  
  
- または - 
更新する <see cref="T:System.Data.DataTable" /> が存在しません。  
  
- または - 
ソースとして使用する <see cref="T:System.Data.DataSet" /> が存在しません。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Update (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">データ ソースの更新に使用する <see cref="T:System.Data.DataSet" />。</param>
        <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
        <summary>
          <see cref="T:System.Data.DataSet" /> 内の指定した <see cref="T:System.Data.DataTable" /> 名を持つ挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションを呼び出すと、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッド、<xref:System.Data.Common.DbDataAdapter>を調べ、<xref:System.Data.DataRow.RowState%2A>プロパティ、で構成されているインデックスの順序に基づいて、各行の繰り返し必要なINSERT、UPDATE、またはDELETEステートメントを実行し、<xref:System.Data.DataSet>. たとえば、<xref:System.Data.Common.DbDataAdapter.Update%2A>で INSERT ステートメントとし、もう 1 つの DELETE ステートメント内の行の順序付けに期限の後に、DELETE ステートメントを実行する場合があります、<xref:System.Data.DataTable>します。  
  
 これらのステートメントがバッチ処理として実行しないことに注意してください。各行は個別に更新されます。 アプリケーションが呼び出すことができます、<xref:System.Data.DataSet.GetChanges%2A>ステートメントの種類のシーケンスを制御する必要がありますの状況でメソッド (たとえば、更新する前に挿入)。 詳細については、次を参照してください。 [Dataadapter によるデータ ソースを更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)します。  
  
 かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは例外を生成します。 ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>または<xref:System.Data.OleDb.OleDbCommandBuilder>設定した場合、SQL ステートメントの単一テーブルの更新プログラムを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティ。 次に、設定しない追加の SQL ステートメントがによって生成される、 **CommandBuilder**します。 この生成ロジックではキー列の情報に含まれる、<xref:System.Data.DataSet>します。 詳細については、次を参照してください。 [Commandbuilder でのコマンドの生成](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)します。  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは、シナリオをサポートしている場所、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字と小文字が異なる名前を持つオブジェクト。 内で同じ名前が異なる場合は、複数のテーブルが存在する場合、 `DataSet`、<xref:System.Data.Common.DbDataAdapter.Update%2A>対応するテーブルを検索する大文字の比較を実行し、完全一致が存在しない場合、例外を生成します。 次の c# コードでは、この動作を示します。  
  
```  
DataSet ds = new DataSet();  
 ds.Tables.Add("aaa");  
 ds.Tables.Add("AAA");  
 adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.  
 adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.  
    adapter.Update(ds, "Aaa"); // Results in an exception.  
```  
  
 場合<xref:System.Data.Common.DbDataAdapter.Update%2A>が呼び出されます、 <xref:System.Data.DataSet> 1 つだけ含ま<xref:System.Data.DataTable>、大文字と小文字の名前を持つ異なるを<xref:System.Data.DataTable>が更新されます。 このシナリオで比較では大文字と小文字を区別しません。 次の c# コードでは、この動作を示します。  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは、更新プログラムを実行する前に、最初のマッピングを示す表から行を取得します。 <xref:System.Data.Common.DbDataAdapter.Update%2A>の値を使用して行を更新し、<xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティ。 返されるその他の行は無視されます。  
  
 すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントを発生すると、ユーザーは、検査、調整できるようにする<xref:System.Data.DataSet>行と、コマンドによって返されるパラメーターを出力します。 行が正常に更新した後、その行に対する変更が受け入れられます。  
  
 使用する場合<xref:System.Data.Common.DbDataAdapter.Update%2A>実行の順序は、次のようにします。  
  
1.  内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドを実行します。  
  
4.  コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果に格納し、<xref:System.Data.DataRow>します。  
  
5.  配置される出力パラメーターがある場合、<xref:System.Data.DataRow>します。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。  
  
 各コマンドに関連付けられている、<xref:System.Data.Common.DbDataAdapter>関連付けられているパラメーターのコレクションを持ちます。 パラメーターを使用して、現在行にマップされます、`SourceColumn`と`SourceVersion`プロパティの .NET Framework データ プロバイダーの`Parameter`クラス。 `SourceColumn` 指す、<xref:System.Data.DataTable>列を<xref:System.Data.Common.DbDataAdapter>参照を現在の行のパラメーターの値を取得します。  
  
 `SourceColumn` すべてのテーブル マップを適用する前に、マップされていない列の名前を参照します。 場合`SourceColumn`参照を存在しない列に、実行されるアクションは、次のいずれかに依存<xref:System.Data.MissingMappingAction>値。  
  
|列挙値|実行されるアクション|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|ソース列名とテーブル名を使用して、<xref:System.Data.DataSet>マッピングが存在しない場合。|  
|`MissingMappingAction.Ignore`|A<xref:System.SystemException>が生成されます。 マッピングが明示的に設定すると、入力パラメーターのマッピングがない、通常、エラーの結果です。|  
|`MissingMappingAction.Error`|A<xref:System.SystemException>が生成されます。|  
  
 `SourceColumn`出力の値をマップするプロパティを使用しても、または入力/出力パラメーターを`DataSet`します。 存在しない列を参照する場合、例外が生成されます。  
  
 `SourceVersion`プロパティの .NET Framework データ プロバイダーの`Parameter`クラスは、列の値の元の現在、または提案済みバージョンを使用するかどうかを決定します。 この機能は、オプティミスティック同時実行制御違反をチェックする UPDATE ステートメントの WHERE 句に元の値を含めるによく使用します。  
  
> [!NOTE]
>  行の更新中にエラーが発生した場合は、例外がスローされ、更新プログラムの実行は廃止されました。 更新操作を続行すると、エラーが発生した場合に例外を生成せず、設定、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>プロパティを`true`呼び出す前に<xref:System.Data.Common.DbDataAdapter.Update%2A>します。 内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベント。 内で例外を生成せず、更新操作を続行する、`RowUpdated`イベント、設定、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>のプロパティ、<xref:System.Data.Common.RowUpdatedEventArgs>に<xref:System.Data.UpdateStatus.Continue>します。  
  
   
  
## Examples  
 次の例は、派生クラスでは、 <xref:System.Data.OleDb.OleDbDataAdapter>、データ ソースを更新します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public virtual int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateBatchSize : int with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バッチ処理サポートを有効にするかどうか、および、1 回のバッチで実行可能なコマンド数を指定する値を取得または設定します。</summary>
        <value>バッチごとに処理される行数。  
  
 <list type="table"><listheader><term> 値 
 </term><description> 効果 
 </description></listheader><item><term> 0 
 </term><description> バッチのサイズに制限はありません。  
  
 </description></item><item><term> 1 
 </term><description> バッチ更新を無効にします。  
  
 </description></item><item><term> &gt; 1 
 </term><description> 一度に送信される変更内容は <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> のバッチ サイズに基づきます。  
  
 </description></item></list>  
  
 これを 1 以外の値に設定する場合、すべてのコマンドに関連付けられている、<see cref="T:System.Data.Common.DbDataAdapter" />必要があります、<see cref="P:System.Data.IDbCommand.UpdatedRowSource" />プロパティに設定**None**または**OutputParameters**します。 それ以外の場合、例外がスローされます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A>からの変更でデータ ソースを更新するプロパティ、<xref:System.Data.DataSet>します。 データ プロバイダーは、バッチ処理をサポートする場合は、サーバーへのラウンドト リップ数を減らすことで、アプリケーションのパフォーマンスを向上このことができます。 ADO.NET 2.0 では、SQL Server (SqlClient) と Oracle (OracleClient) の .NET データ プロバイダーのこのプロパティはサポートされています。  
  
 サイズの大きいバッチを実行すると、パフォーマンスが低下する可能性があります。 そのため、アプリケーションを実装する前に、バッチの最適なサイズ設定をテストする必要があります。  
  
 <xref:System.ArgumentOutOfRangeException> 0 より小さい値が数値に設定されている場合にスローされます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ UpdateCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース内のレコードを更新するコマンドを取得または設定します。</summary>
        <value>データ セット内の変更された行に対応するデータ ソース内のレコードを更新するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中に<xref:System.Data.Common.DbDataAdapter.Update%2A>、このプロパティを設定しないと、プライマリ キーの情報が存在する場合、 <xref:System.Data.DataSet>、<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>が自動的に生成されます。  
  
   
  
## Examples  
 次の例は、派生クラスを作成します。<xref:System.Data.OleDb.OleDbDataAdapter>および一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
  </Members>
</Type>