<Type Name="DbDataAdapter" FullName="System.Data.Common.DbDataAdapter">
  <TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable, IDbDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable, System::Data::IDbDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDbDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="0c586-101"><see cref="T:System.Data.IDbDataAdapter" /> インターフェイスの実装を支援します。</span><span class="sxs-lookup"><span data-stu-id="0c586-101">Aids implementation of the <see cref="T:System.Data.IDbDataAdapter" /> interface.</span></span> <span data-ttu-id="0c586-102"><see cref="T:System.Data.Common.DbDataAdapter" /> の継承クラスは、厳密な型指定を行う関数のセットを実装しますが、**DataAdapter** を完全に実装するために必要な機能の大部分は継承します。</span><span class="sxs-lookup"><span data-stu-id="0c586-102">Inheritors of <see cref="T:System.Data.Common.DbDataAdapter" /> implement a set of functions to provide strong typing, but inherit most of the functionality needed to fully implement a **DataAdapter**.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-103"><xref:System.Data.Common.DbDataAdapter>クラスから継承、<xref:System.Data.Common.DataAdapter>クラスと実装、<xref:System.Data.IDbDataAdapter>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="0c586-103">The <xref:System.Data.Common.DbDataAdapter> class inherits from the <xref:System.Data.Common.DataAdapter> class and implements the <xref:System.Data.IDbDataAdapter> interface.</span></span> <span data-ttu-id="0c586-104">実装するクラスと役に立ちます、 **DataAdapter**リレーショナル データベースで使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="0c586-104">It helps a class implement a **DataAdapter** designed for use with a relational database.</span></span>  
  
 <span data-ttu-id="0c586-105">アプリケーションがのインスタンスを作成していない、<xref:System.Data.Common.DbDataAdapter>クラスを直接がそこから継承するクラスのインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-105">An application does not create an instance of the <xref:System.Data.Common.DbDataAdapter> class directly, but creates an instance of a class that inherits from it.</span></span>  
  
 <span data-ttu-id="0c586-106">継承するクラス<xref:System.Data.Common.DbDataAdapter>継承されたメンバーを実装し、通常プロバイダー固有の機能を追加するその他のメンバーを定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-106">Classes that inherit <xref:System.Data.Common.DbDataAdapter> must implement the inherited members, and typically define additional members to add provider-specific functionality.</span></span> <span data-ttu-id="0c586-107">たとえば、<xref:System.Data.Common.DbDataAdapter>クラスを定義、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティ、および<xref:System.Data.Common.DbDataAdapter>クラス定義の 8 つのオーバー ロード、<xref:System.Data.IDataAdapter.Fill%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0c586-107">For example, the <xref:System.Data.Common.DbDataAdapter> class defines the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property, and the <xref:System.Data.Common.DbDataAdapter> class defines eight overloads of the <xref:System.Data.IDataAdapter.Fill%2A> method.</span></span> <span data-ttu-id="0c586-108">さらに、<xref:System.Data.OleDb.OleDbDataAdapter>クラスは継承、<xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッド定義のオーバー ロードを 2 つ追加して<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>をパラメーターとして ADO Recordset オブジェクトを受け取る。</span><span class="sxs-lookup"><span data-stu-id="0c586-108">In turn, the <xref:System.Data.OleDb.OleDbDataAdapter> class inherits the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method, and also defines two additional overloads of <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> that take an ADO Recordset object as a parameter.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="0c586-109">継承する場合、<see cref="T:System.Data.Common.DbDataAdapter" />クラス、お勧め次のコンス トラクターを実装すること。</span><span class="sxs-lookup"><span data-stu-id="0c586-109">When you inherit from the <see cref="T:System.Data.Common.DbDataAdapter" /> class, we recommend that you implement the following constructors:</span></span>  
  
 <span data-ttu-id="0c586-110"><list type="table"><listheader><term> 項目</span><span class="sxs-lookup"><span data-stu-id="0c586-110"><list type="table"><listheader><term> Item</span></span>  
  
 <span data-ttu-id="0c586-111"></term><description>説明</span><span class="sxs-lookup"><span data-stu-id="0c586-111"></term><description> Description</span></span>  
  
 <span data-ttu-id="0c586-112"></description></listheader><item><term> *Prv*DataAdapter()</span><span class="sxs-lookup"><span data-stu-id="0c586-112"></description></listheader><item><term> *Prv*DataAdapter()</span></span>  
  
 <span data-ttu-id="0c586-113"></term><description> 新しいインスタンスを初期化、 *Prv*データ アダプター クラス。</span><span class="sxs-lookup"><span data-stu-id="0c586-113"></term><description> Initializes a new instance of the *Prv*DataAdapter class.</span></span>  
  
 <span data-ttu-id="0c586-114"></description></item><item><term> *Prv*DataAdapter (*Prv*コマンド*selectCommand*)</span><span class="sxs-lookup"><span data-stu-id="0c586-114"></description></item><item><term> *Prv*DataAdapter(*Prv*Command *selectCommand*)</span></span>  
  
 <span data-ttu-id="0c586-115"></term><description> 新しいインスタンスを初期化、 *Prv*DataAdapter クラス、指定した SQL SELECT ステートメントを使用します。</span><span class="sxs-lookup"><span data-stu-id="0c586-115"></term><description> Initializes a new instance of the *Prv*DataAdapter class with the specified SQL SELECT statement.</span></span>  
  
 <span data-ttu-id="0c586-116"></description></item><item><term> *Prv*DataAdapter (文字列*selectCommandText*、文字列*selectConnectionString*)</span><span class="sxs-lookup"><span data-stu-id="0c586-116"></description></item><item><term> *Prv*DataAdapter(string *selectCommandText*, string *selectConnectionString*)</span></span>  
  
 <span data-ttu-id="0c586-117"></term><description> 新しいインスタンスを初期化、 *Prv*SQL SELECT ステートメントと接続文字列を持つデータ アダプター クラス。</span><span class="sxs-lookup"><span data-stu-id="0c586-117"></term><description> Initializes a new instance of the *Prv*DataAdapter class with an SQL SELECT statement and a connection string.</span></span>  
  
 <span data-ttu-id="0c586-118"></description></item><item><term> *Prv*DataAdapter (文字列*selectCommandText*、 *Prv*接続*selectConnection*)</span><span class="sxs-lookup"><span data-stu-id="0c586-118"></description></item><item><term> *Prv*DataAdapter(string *selectCommandText*, *Prv*Connection *selectConnection*)</span></span>  
  
 <span data-ttu-id="0c586-119"></term><description> 新しいインスタンスを初期化、 *Prv*SQL SELECT ステートメントを使用してデータ アダプター クラスおよび*Prv*接続オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="0c586-119"></term><description> Initializes a new instance of the *Prv*DataAdapter class with an SQL SELECT statement and a *Prv*Connection object.</span></span>  
  
 </description></item></list>  
  
 <span data-ttu-id="0c586-120">.NET Framework データ プロバイダー間の整合性を昇格させる必要があります、形式で継承するクラスの名前を付けます*Prv*dataadapter を使用する場所*Prv*は、特定の .NET のすべてのクラスに指定された uniform プレフィックスFramework データ プロバイダーの名前空間。</span><span class="sxs-lookup"><span data-stu-id="0c586-120">To promote consistency among .NET Framework data providers, you should name the inheriting class in the form *Prv*DataAdapter, where *Prv* is the uniform prefix given to all classes in a specific .NET Framework data provider namespace.</span></span> <span data-ttu-id="0c586-121">たとえば、"Sql"では、プレフィックス、<see cref="T:System.Data.SqlClient.SqlDataAdapter" />クラス内で、 **System.Data.SqlClient**名前空間。</span><span class="sxs-lookup"><span data-stu-id="0c586-121">For example, "Sql" is the prefix of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> class in the **System.Data.SqlClient** namespace.</span></span></para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0c586-122">
          <see langword="DataAdapter" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="0c586-122">Initializes a new instance of a <see langword="DataAdapter" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0c586-123">**DataAdapter** クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="0c586-123">Initializes a new instance of a **DataAdapter** class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-124">インスタンスを作成する場合<xref:System.Data.Common.DbDataAdapter>、次の読み取り/書き込みプロパティは、次の初期値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-124">When you create an instance of <xref:System.Data.Common.DbDataAdapter>, the following read/write properties are set to the following initial values.</span></span>  
  
|<span data-ttu-id="0c586-125">プロパティ</span><span class="sxs-lookup"><span data-stu-id="0c586-125">Properties</span></span>|<span data-ttu-id="0c586-126">初期値</span><span class="sxs-lookup"><span data-stu-id="0c586-126">Initial value</span></span>|  
|----------------|-------------------|  
|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|<span data-ttu-id="0c586-127">新しい <xref:System.Data.IDbCommand>。</span><span class="sxs-lookup"><span data-stu-id="0c586-127">A new <xref:System.Data.IDbCommand>.</span></span>|  
|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|<span data-ttu-id="0c586-128">新しい <xref:System.Data.IDbCommand>。</span><span class="sxs-lookup"><span data-stu-id="0c586-128">A new <xref:System.Data.IDbCommand>.</span></span>|  
|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|<span data-ttu-id="0c586-129">新しい <xref:System.Data.IDbCommand>。</span><span class="sxs-lookup"><span data-stu-id="0c586-129">A new <xref:System.Data.IDbCommand>.</span></span>|  
|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|<span data-ttu-id="0c586-130">新しい <xref:System.Data.IDbCommand>。</span><span class="sxs-lookup"><span data-stu-id="0c586-130">A new <xref:System.Data.IDbCommand>.</span></span>|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 <span data-ttu-id="0c586-131">これらのプロパティを個別に呼び出してプロパティのいずれかの値を変更することができます。</span><span class="sxs-lookup"><span data-stu-id="0c586-131">You can change the value of any of these properties through a separate call to the property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter"><span data-ttu-id="0c586-132">新しい <see langword="DataAdapter" /> の作成に使用する <see langword="DataAdapter" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-132">A <see langword="DataAdapter" /> object used to create the new <see langword="DataAdapter" />.</span></span></param>
        <summary><span data-ttu-id="0c586-133">既存の同じ型のオブジェクトから、<see langword="DataAdapter" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="0c586-133">Initializes a new instance of a <see langword="DataAdapter" /> class from an existing object of the same type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-134">このオーバー ロード、<xref:System.Data.Common.DbDataAdapter>コンス トラクターが使用できるように設計を .NET Framework データ プロバイダーによって clone の実装で使用するためのようなコンス トラクターを実装する場合。</span><span class="sxs-lookup"><span data-stu-id="0c586-134">This overload of the <xref:System.Data.Common.DbDataAdapter> constructor is designed for use by a .NET Framework data provider when implementing a similar constructor for use in a clone implementation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected virtual int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="0c586-135">バッチに追加する <see cref="T:System.Data.IDbCommand" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-135">The <see cref="T:System.Data.IDbCommand" /> to add to the batch.</span></span></param>
        <summary><span data-ttu-id="0c586-136"><see cref="T:System.Data.IDbCommand" /> を現在のバッチに追加します。</span><span class="sxs-lookup"><span data-stu-id="0c586-136">Adds a <see cref="T:System.Data.IDbCommand" /> to the current batch.</span></span></summary>
        <returns><span data-ttu-id="0c586-137"><see cref="T:System.Data.IDbCommand" /> を追加する前のバッチ内のコマンド数。</span><span class="sxs-lookup"><span data-stu-id="0c586-137">The number of commands in the batch before adding the <see cref="T:System.Data.IDbCommand" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-138"><xref:System.Data.Common.DbDataAdapter>、このメソッドはスロー<xref:System.NotSupportedException>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-138">In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="0c586-139">継承するクラス<xref:System.Data.Common.DbDataAdapter>バッチのサポートを提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0c586-139">Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0c586-140">アダプターでバッチがサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0c586-140">The adapter does not support batches.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-141">このメソッドは、保護されている、.NET Framework データ プロバイダーで使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="0c586-141">This method is protected and is designed for use by a .NET Framework data provider.</span></span>  
  
 <span data-ttu-id="0c586-142">継承するクラス<see cref="T:System.Data.Common.DbDataAdapter" />クラスがバッチにコマンドを追加するユーザーを許可するには、このメソッドをオーバーライドするバッチをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="0c586-142">If a class that inherits from <see cref="T:System.Data.Common.DbDataAdapter" /> supports batches, that class overrides this method to allow users to add a command to a batch.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected virtual void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearBatch();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0c586-143">バッチからすべての <see cref="T:System.Data.IDbCommand" /> オブジェクトを削除します。</span><span class="sxs-lookup"><span data-stu-id="0c586-143">Removes all <see cref="T:System.Data.IDbCommand" /> objects from the batch.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-144"><xref:System.Data.Common.DbDataAdapter>、このメソッドはスロー<xref:System.NotSupportedException>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-144">In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="0c586-145">継承するクラス<xref:System.Data.Common.DbDataAdapter>バッチのサポートを提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0c586-145">Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0c586-146">アダプターでバッチがサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0c586-146">The adapter does not support batches.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-147">このメソッドは、保護されている、.NET Framework データ プロバイダーで使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="0c586-147">This method is protected and is designed for use by a .NET Framework data provider.</span></span>  
  
 <span data-ttu-id="0c586-148">継承するクラス<see cref="T:System.Data.Common.DbDataAdapter" />クラスがバッチからすべてのコマンドを削除するユーザーを許可するには、このメソッドをオーバーライドするバッチをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="0c586-148">If a class that inherits from <see cref="T:System.Data.Common.DbDataAdapter" /> supports batches, that class overrides this method to allow users to remove all commands from a batch.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow"><span data-ttu-id="0c586-149">データ ソースの更新に使用した <see cref="T:System.Data.DataRow" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-149">The <see cref="T:System.Data.DataRow" /> used to update the data source.</span></span></param>
        <param name="command"><span data-ttu-id="0c586-150"><see cref="T:System.Data.IDbCommand" /> 処理中に実行した <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-150">The <see cref="T:System.Data.IDbCommand" /> executed during the <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</span></span></param>
        <param name="statementType"><span data-ttu-id="0c586-151">コマンドが UPDATE、INSERT、DELETE、または SELECT ステートメントのいずれかを示す値。</span><span class="sxs-lookup"><span data-stu-id="0c586-151">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.</span></span></param>
        <param name="tableMapping"><span data-ttu-id="0c586-152"><see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-152">A <see cref="T:System.Data.Common.DataTableMapping" /> object.</span></span></param>
        <summary><span data-ttu-id="0c586-153"><see cref="T:System.Data.Common.RowUpdatedEventArgs" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="0c586-153">Initializes a new instance of the <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> class.</span></span></summary>
        <returns><span data-ttu-id="0c586-154"><see cref="T:System.Data.Common.RowUpdatedEventArgs" /> クラスの新しいインスタンス。</span><span class="sxs-lookup"><span data-stu-id="0c586-154">A new instance of the <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> class.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-155">オーバーライドする場合<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0c586-155">When overriding <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> method.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow"><span data-ttu-id="0c586-156">データ ソースを更新する <see cref="T:System.Data.DataRow" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-156">The <see cref="T:System.Data.DataRow" /> that updates the data source.</span></span></param>
        <param name="command"><span data-ttu-id="0c586-157"><see cref="T:System.Data.IDbCommand" /> 処理中に実行する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-157">The <see cref="T:System.Data.IDbCommand" /> to execute during the <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</span></span></param>
        <param name="statementType"><span data-ttu-id="0c586-158">コマンドが UPDATE、INSERT、DELETE、または SELECT ステートメントのいずれかを示す値。</span><span class="sxs-lookup"><span data-stu-id="0c586-158">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.</span></span></param>
        <param name="tableMapping"><span data-ttu-id="0c586-159"><see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-159">A <see cref="T:System.Data.Common.DataTableMapping" /> object.</span></span></param>
        <summary><span data-ttu-id="0c586-160"><see cref="T:System.Data.Common.RowUpdatingEventArgs" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="0c586-160">Initializes a new instance of the <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> class.</span></span></summary>
        <returns><span data-ttu-id="0c586-161"><see cref="T:System.Data.Common.RowUpdatingEventArgs" /> クラスの新しいインスタンス。</span><span class="sxs-lookup"><span data-stu-id="0c586-161">A new instance of the <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> class.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-162">オーバーライドする場合<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0c586-162">When overriding <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> method.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DefaultSourceTableName">
      <MemberSignature Language="C#" Value="public const string DefaultSourceTableName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultSourceTableName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultSourceTableName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultSourceTableName;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c586-163"><see cref="T:System.Data.Common.DataAdapter" /> オブジェクトがテーブル マップに使用する既定の名前。</span><span class="sxs-lookup"><span data-stu-id="0c586-163">The default name used by the <see cref="T:System.Data.Common.DataAdapter" /> object for table mappings.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-164">"Table"で使用される既定の名前、<xref:System.Data.Common.DataAdapter>テーブル マップのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-164">"Table" is the default name used by the <xref:System.Data.Common.DataAdapter> object for table mappings.</span></span>  
  
 <span data-ttu-id="0c586-165"><xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName> アプリケーションで使用するテーブル マップを追加するときに、<xref:System.Data.Common.DbDataAdapter.Fill%2A>が指定されていません、<xref:System.Data.DataTable>名。</span><span class="sxs-lookup"><span data-stu-id="0c586-165"><xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName> is when an application adds a table mapping to be used with <xref:System.Data.Common.DbDataAdapter.Fill%2A>, but does not specify a <xref:System.Data.DataTable> name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ DeleteCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c586-166">データ セットからレコードを削除するコマンドを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-166">Gets or sets a command for deleting records from the data set.</span></span></summary>
        <value><span data-ttu-id="0c586-167"><see cref="T:System.Data.IDbCommand" /> 中に、データ セット内の削除された行に対応するデータ ソース内のレコードを削除するために使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-167">An <see cref="T:System.Data.IDbCommand" /> used during <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> to delete records in the data source for deleted rows in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-168">中に<xref:System.Data.Common.DbDataAdapter.Update%2A>、このプロパティを設定しないと、主キー情報が内に存在する場合、 <xref:System.Data.DataSet>、<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>が自動的に生成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-168">During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> is automatically generated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c586-169">次の例は、派生クラスを作成<xref:System.Data.OleDb.OleDbDataAdapter>し、一部のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-169">The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="0c586-170">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-170"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="0c586-171"><see cref="T:System.Data.Common.DbDataAdapter" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="0c586-171">Releases the unmanaged resources used by the <see cref="T:System.Data.Common.DbDataAdapter" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteBatch();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0c586-172">現在のバッチを実行します。</span><span class="sxs-lookup"><span data-stu-id="0c586-172">Executes the current batch.</span></span></summary>
        <returns><span data-ttu-id="0c586-173">バッチ内の直前のコマンドの戻り値。</span><span class="sxs-lookup"><span data-stu-id="0c586-173">The return value from the last command in the batch.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-174"><xref:System.Data.Common.DbDataAdapter>、このメソッドはスロー<xref:System.NotSupportedException>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-174">In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="0c586-175">継承するクラス<xref:System.Data.Common.DbDataAdapter>バッチのサポートを提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0c586-175">Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-176">このメソッドは、保護されている、.NET Framework データ プロバイダーで使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="0c586-176">This method is protected and is designed for use by a .NET Framework data provider.</span></span>  
  
 <span data-ttu-id="0c586-177">継承するクラス<see cref="T:System.Data.Common.DbDataAdapter" />クラスが、バッチを実行できるようにするには、このメソッドをオーバーライドするバッチをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="0c586-177">If a class that inherits from <see cref="T:System.Data.Common.DbDataAdapter" /> supports batches, that class overrides this method to allow users to execute a batch.</span></span> <span data-ttu-id="0c586-178">このメソッドの実装は、バッチにアダプター内のコマンドを結合し、バッチを実行し、バッチの戻り値を返します。</span><span class="sxs-lookup"><span data-stu-id="0c586-178">An implementation of this method combines the commands in the adapter into a batch, then executes the batch and returns the return value of the batch.</span></span></para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0c586-179"><see cref="T:System.Data.DataSet" /> または <see cref="T:System.Data.DataTable" /> にデータを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="0c586-179">Fills a <see cref="T:System.Data.DataSet" /> or a <see cref="T:System.Data.DataTable" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public override int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="0c586-180">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-180">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</span></span></param>
        <summary><span data-ttu-id="0c586-181"><see cref="T:System.Data.DataSet" /> 内の行を追加または更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-181">Adds or refreshes rows in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="0c586-182"><see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。</span><span class="sxs-lookup"><span data-stu-id="0c586-182">The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="0c586-183">これには、行を返さないステートメントの影響を受ける行は含まれません。</span><span class="sxs-lookup"><span data-stu-id="0c586-183">This does not include rows affected by statements that do not return rows.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-184"><xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、SELECT ステートメントを使用してデータ ソースからデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-184">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves the data from the data source using a SELECT statement.</span></span> <span data-ttu-id="0c586-185"><xref:System.Data.IDbConnection> Select コマンドに関連付けられたオブジェクトが有効である必要がありますが、開放する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0c586-185">The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to be open.</span></span> <span data-ttu-id="0c586-186">場合、<xref:System.Data.IDbConnection>する前に閉じられた<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、オープン データを取得して、閉じられました。</span><span class="sxs-lookup"><span data-stu-id="0c586-186">If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data and then closed.</span></span> <span data-ttu-id="0c586-187">接続が開いている場合の前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-187">If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="0c586-188">エラーまたは例外が発生した場合、データ テーブルを設定中に、エラーの発生前に追加された行は、データ テーブルに残ります。</span><span class="sxs-lookup"><span data-stu-id="0c586-188">If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables.</span></span> <span data-ttu-id="0c586-189">操作の残りの部分は中止されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-189">The remainder of the operation is aborted.</span></span>  
  
 <span data-ttu-id="0c586-190">コマンドがすべての行を返さない場合のテーブルに追加されて、<xref:System.Data.DataSet>例外が発生したことはありません。</span><span class="sxs-lookup"><span data-stu-id="0c586-190">If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.</span></span>  
  
 <span data-ttu-id="0c586-191">場合、<xref:System.Data.Common.DbDataAdapter>オブジェクトの設定中に重複した列を検出した、 <xref:System.Data.DataTable>、パターンを使用して後続の列に名前が生成されます"*columnname*1"、"*columnname*2「,」*columnname*3"のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-191">If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns using the pattern "*columnname*1", "*columnname*2", "*columnname*3", and so on.</span></span> <span data-ttu-id="0c586-192">配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="0c586-192">If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span>  
  
 <span data-ttu-id="0c586-193">指定したクエリは、複数の結果を返す、クエリを返す行ごとの結果セットが別のテーブルに配置されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-193">When the query specified returns multiple results, the result set for each row returning query is placed in a separate table.</span></span> <span data-ttu-id="0c586-194">追加の結果セットは指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に整数値を追加してという名前です。</span><span class="sxs-lookup"><span data-stu-id="0c586-194">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="0c586-195">"テーブル作成していなかったため、行を返さないクエリの select クエリに続く挿入クエリを処理する場合、select クエリ用に作成されたテーブルは、Table"という名前作成の最初のテーブルになっているためです。</span><span class="sxs-lookup"><span data-stu-id="0c586-195">Because no table is created for a query that does not return rows, if you process an insert query followed by a select query, the table created for the select query is named "Table" because it is the first table created.</span></span> <span data-ttu-id="0c586-196">列とテーブルの名前を使用してアプリケーションには、これらの名前付けパターンとの競合が発生しないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="0c586-196">Applications using column and table names should ensure that conflicts with these naming patterns does not occur.</span></span>  
  
 <span data-ttu-id="0c586-197">設定する SELECT ステートメントを使用する場合、<xref:System.Data.DataSet>複数の結果、バッチの SQL ステートメントなど、結果のいずれかに、エラーが含まれている場合を返します。 それ以降のすべての結果はスキップされ、に追加されていない、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-197">When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as batch SQL statements, if one of the results contains an error, all subsequent results are skipped and are not added to the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="0c586-198">以降を使用する場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>の内容を更新する呼び出し、 <xref:System.Data.DataSet>、2 つの条件を満たす必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-198">When using subsequent <xref:System.Data.Common.DbDataAdapter.Fill%2A> calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:</span></span>  
  
1.  <span data-ttu-id="0c586-199">SQL ステートメントが初期設定に使用する 1 つと一致する必要があります、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-199">The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>.</span></span>  
  
2.  <span data-ttu-id="0c586-200">**キー**列情報が存在する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-200">The **Key** column information must be present.</span></span>  
  
 <span data-ttu-id="0c586-201">主キーの情報が存在する場合、重複する行は調整が行われ、1 回のみで、<xref:System.Data.DataTable>に対応する、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-201">If primary key information is present, any duplicate rows are reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-202">主キーの情報を設定するを通じて<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>を指定して、<xref:System.Data.DataTable.PrimaryKey%2A>のプロパティ、 <xref:System.Data.DataTable>、かを設定して、<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>プロパティを`AddWithKey`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-202">Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.</span></span>  
  
 <span data-ttu-id="0c586-203">`SelectCommand` が OUTER JOIN の結果を返す場合、`DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable> 値を設定しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-203">If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="0c586-204">重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-204">You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.</span></span> <span data-ttu-id="0c586-205">詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-205">For more information, see [Defining Primary Keys](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-206">複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-206">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.</span></span> <span data-ttu-id="0c586-207">複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、 <xref:System.Data.MissingSchemaAction> 'éý'`AddWithKey`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-207">To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable"><span data-ttu-id="0c586-208">テーブル マップに使用する <see cref="T:System.Data.DataTable" /> の名前。</span><span class="sxs-lookup"><span data-stu-id="0c586-208">The name of the <see cref="T:System.Data.DataTable" /> to use for table mapping.</span></span></param>
        <summary><span data-ttu-id="0c586-209"><see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の指定した範囲の行を追加または更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-209">Adds or refreshes rows in a specified range in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataTable" /> name.</span></span></summary>
        <returns><span data-ttu-id="0c586-210"><see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。</span><span class="sxs-lookup"><span data-stu-id="0c586-210">The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="0c586-211">これには、行を返さないステートメントの影響を受ける行は含まれません。</span><span class="sxs-lookup"><span data-stu-id="0c586-211">This does not include rows affected by statements that do not return rows.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-212"><xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、関連付けられている、指定した SELECT ステートメントを使用してデータ ソースから行を取得<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c586-212">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property.</span></span> <span data-ttu-id="0c586-213">SELECT ステートメントに関連付けられている接続オブジェクトが有効である必要がありますが、開放する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0c586-213">The connection object associated with the SELECT statement must be valid, but it does not need to be open.</span></span> <span data-ttu-id="0c586-214">前に、接続が閉じられた場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、そのはデータの取得に開かれた後終了します。</span><span class="sxs-lookup"><span data-stu-id="0c586-214">If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="0c586-215">接続が開いている場合の前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-215">If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="0c586-216"><xref:System.Data.Common.DbDataAdapter.Fill%2A>操作は、先に行を追加する<xref:System.Data.DataTable>内のオブジェクト、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataTable>オブジェクトのかどうかは、まだ存在しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-216">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist.</span></span> <span data-ttu-id="0c586-217">作成するときに<xref:System.Data.DataTable>、オブジェクト、<xref:System.Data.Common.DbDataAdapter.Fill%2A>操作は、通常の列名のメタデータのみを作成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-217">When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata.</span></span> <span data-ttu-id="0c586-218">ただし場合、<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>プロパティに設定されている`AddWithKey`、適切なプライマリ キーと制約も作成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-218">However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.</span></span>  
  
 <span data-ttu-id="0c586-219">場合、<xref:System.Data.Common.DbDataAdapter>重複する列を設定中に検出すると、<xref:System.Data.DataTable>のパターンを使用して、後続の列名が生成されます"*columnname*1"、"*columnname*2「,」*columnname*3"のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-219">If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern "*columnname*1", "*columnname*2", "*columnname*3", and so on.</span></span> <span data-ttu-id="0c586-220">配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="0c586-220">If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="0c586-221">複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットは、個別のテーブルに配置されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-221">When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table.</span></span>  
  
 <span data-ttu-id="0c586-222">オーバー ロード<xref:System.Data.Common.DbDataAdapter.Fill%2A>を受け取る`DataTable`ように、パラメーターでは、最初の結果のみを取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-222">The overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataTable` as a parameter only obtains the first result.</span></span> <span data-ttu-id="0c586-223">オーバー ロードを使用して<xref:System.Data.Common.DbDataAdapter.Fill%2A>を受け取る`DataSet`を複数の結果を取得するパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="0c586-223">Use an overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataSet` as a parameter to obtain multiple results.</span></span>  
  
 <span data-ttu-id="0c586-224"><xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、シナリオをサポートします。 ここで、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字小文字によってのみとは異なる名前を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-224">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case.</span></span> <span data-ttu-id="0c586-225">このような状況で<xref:System.Data.Common.DbDataAdapter.Fill%2A>は対応するテーブルを見つける大文字小文字を区別比較を実行し、完全一致が存在しない場合は、新しいテーブルを作成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-225">In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists.</span></span> <span data-ttu-id="0c586-226">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-226">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
 dataset.Tables.Add("AAA");  
 adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
    adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 <span data-ttu-id="0c586-227">場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されたと<xref:System.Data.DataSet>は 1 つだけ<xref:System.Data.DataTable>名前を持つ唯一の相違点の場合を<xref:System.Data.DataTable>は更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-227">If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated.</span></span> <span data-ttu-id="0c586-228">このシナリオでは、比較では大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="0c586-228">In this scenario, the comparison is case insensitive.</span></span> <span data-ttu-id="0c586-229">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-229">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <span data-ttu-id="0c586-230">使用することができます、<xref:System.Data.Common.DbDataAdapter.Fill%2A>で複数回、同じメソッド<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-230">You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="0c586-231">主キーが存在する場合は、受信した行が既に存在する行と一致すると共にマージされます。</span><span class="sxs-lookup"><span data-stu-id="0c586-231">If a primary key exists, incoming rows are merged with matching rows that already exist.</span></span> <span data-ttu-id="0c586-232">主キーがない場合、受信行が、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-232">If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="0c586-233">`SelectCommand` が OUTER JOIN の結果を返す場合、`DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable> 値を設定しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-233">If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="0c586-234">重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-234">You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.</span></span> <span data-ttu-id="0c586-235">詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-235">For more information, see [Defining Primary Keys](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-236">複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.Common.DbDataAdapter.Fill%2A>と<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework データ プロバイダーが最初の結果のみのスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-236">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.Fill%2A> and <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0c586-237">ソース テーブルが無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-237">The source table is invalid.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-238">このオーバー ロード、<see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />メソッドが保護されており、.NET Framework データ プロバイダーで使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="0c586-238">This overload of the <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> method is protected and is designed for use by a .NET Framework data provider.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="0c586-239">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-239">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</span></span></param>
        <param name="srcTable"><span data-ttu-id="0c586-240">テーブル マップに使用するソース テーブルの名前。</span><span class="sxs-lookup"><span data-stu-id="0c586-240">The name of the source table to use for table mapping.</span></span></param>
        <summary><span data-ttu-id="0c586-241"><see cref="T:System.Data.DataSet" /> 名および <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の列と一致するように <see cref="T:System.Data.DataTable" /> 内の行を追加または更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-241">Adds or refreshes rows in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> and <see cref="T:System.Data.DataTable" /> names.</span></span></summary>
        <returns><span data-ttu-id="0c586-242"><see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。</span><span class="sxs-lookup"><span data-stu-id="0c586-242">The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="0c586-243">これには、行を返さないステートメントの影響を受ける行は含まれません。</span><span class="sxs-lookup"><span data-stu-id="0c586-243">This does not include rows affected by statements that do not return rows.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-244"><xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、SELECT ステートメントを使用してデータ ソースからデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-244">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves the data from the data source using a SELECT statement.</span></span> <span data-ttu-id="0c586-245"><xref:System.Data.IDbConnection> Select コマンドに関連付けられたオブジェクトが有効である必要がありますが、開放する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0c586-245">The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to be open.</span></span> <span data-ttu-id="0c586-246">場合、<xref:System.Data.IDbConnection>する前に閉じられた<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、そのはデータの取得に開かれた後終了します。</span><span class="sxs-lookup"><span data-stu-id="0c586-246">If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="0c586-247">接続が開いている場合の前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-247">If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="0c586-248">コマンドがすべての行を返さない場合のテーブルに追加されて、<xref:System.Data.DataSet>例外が発生したことはありません。</span><span class="sxs-lookup"><span data-stu-id="0c586-248">If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.</span></span>  
  
 <span data-ttu-id="0c586-249">場合、<xref:System.Data.Common.DbDataAdapter>オブジェクトの設定中に重複した列を検出した、<xref:System.Data.DataTable>パターン"columnname1"、"columnname2"、"columnname3"などを使用して、後続の列に名前が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-249">If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern "columnname1", "columnname2", "columnname3", and so on.</span></span> <span data-ttu-id="0c586-250">配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="0c586-250">If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span>  
  
 <span data-ttu-id="0c586-251">指定したクエリは、複数の結果を返す、各結果セットが別のテーブルに配置されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-251">When the query specified returns multiple results, each result set is placed in a separate table.</span></span> <span data-ttu-id="0c586-252">追加の結果セットは指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に整数値を追加してという名前です。</span><span class="sxs-lookup"><span data-stu-id="0c586-252">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="0c586-253">行を返さないクエリのテーブルは作成されません select クエリに続く挿入クエリを処理する場合はので、select クエリ用に作成されたテーブルの名前は"Table"作成の最初のテーブルになっているためです。</span><span class="sxs-lookup"><span data-stu-id="0c586-253">Since no table is created for a query that does not return rows, if you were to process an insert query followed by a select query, the table created for the select query would be named "Table", because it is the first table created.</span></span> <span data-ttu-id="0c586-254">列とテーブルの名前を使用してアプリケーションには、これらの名前付けパターンとの競合が発生しないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="0c586-254">Applications using column and table names should ensure that conflicts with these naming patterns does not occur.</span></span>  
  
 <span data-ttu-id="0c586-255"><xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、シナリオをサポートします。 ここで、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字小文字によってのみとは異なる名前を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-255">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case.</span></span> <span data-ttu-id="0c586-256">このような状況で<xref:System.Data.Common.DbDataAdapter.Fill%2A>は対応するテーブルを見つける大文字小文字を区別比較を実行し、完全一致が存在しない場合は、新しいテーブルを作成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-256">In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists.</span></span> <span data-ttu-id="0c586-257">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-257">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 <span data-ttu-id="0c586-258">場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されたと<xref:System.Data.DataSet>は 1 つだけ<xref:System.Data.DataTable>名前を持つ唯一の相違点の場合を<xref:System.Data.DataTable>は更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-258">If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated.</span></span> <span data-ttu-id="0c586-259">このシナリオでは、比較では大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="0c586-259">In this scenario, the comparison is case insensitive.</span></span> <span data-ttu-id="0c586-260">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-260">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <span data-ttu-id="0c586-261">エラーまたは例外が発生した場合、データ テーブルを設定中に、エラーの発生前に追加された行は、データ テーブルに残ります。</span><span class="sxs-lookup"><span data-stu-id="0c586-261">If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables.</span></span> <span data-ttu-id="0c586-262">操作の残りの部分は中止されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-262">The remainder of the operation is aborted.</span></span>  
  
 <span data-ttu-id="0c586-263">設定する SELECT ステートメントを使用する場合、<xref:System.Data.DataSet>バッチの SQL ステートメントは、次の注意しての複数の結果を返します。</span><span class="sxs-lookup"><span data-stu-id="0c586-263">When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statement, be aware of the following:</span></span>  
  
-   <span data-ttu-id="0c586-264">それ以降のすべての結果がスキップされに追加されていないエラーが含まれる結果のいずれかの場合、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-264">If one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="0c586-265">以降を使用する場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>の内容を更新する呼び出し、 <xref:System.Data.DataSet>、2 つの条件を満たす必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-265">When using subsequent <xref:System.Data.Common.DbDataAdapter.Fill%2A> calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:</span></span>  
  
1.  <span data-ttu-id="0c586-266">SQL ステートメントが初期設定に使用する 1 つと一致する必要があります、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-266">The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>.</span></span>  
  
2.  <span data-ttu-id="0c586-267">**キー**列情報が存在する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-267">The **Key** column information must be present.</span></span> <span data-ttu-id="0c586-268">主キーの情報が存在する場合、重複する行は調整が行われ、1 回のみで、<xref:System.Data.DataTable>に対応する、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-268">If primary key information is present, any duplicate rows are reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-269">主キーの情報を設定するを通じて<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>を指定して、<xref:System.Data.DataTable.PrimaryKey%2A>のプロパティ、 <xref:System.Data.DataTable>、かを設定して、<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>プロパティを`AddWithKey`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-269">Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.</span></span>  
  
 <span data-ttu-id="0c586-270">`SelectCommand` が OUTER JOIN の結果を返す場合、`DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable> 値を設定しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-270">If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="0c586-271">重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-271">You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.</span></span> <span data-ttu-id="0c586-272">詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-272">For more information, see [Defining Primary Keys](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-273">複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-273">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.</span></span> <span data-ttu-id="0c586-274">複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、 <xref:System.Data.MissingSchemaAction> 'éý'`AddWithKey`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-274">To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c586-275">次の例は、派生クラスを使用して<xref:System.Data.OleDb.OleDbDataAdapter>を埋める、 <xref:System.Data.DataSet> categories テーブルから行を含むです。</span><span class="sxs-lookup"><span data-stu-id="0c586-275">The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with rows from the categories table.</span></span> <span data-ttu-id="0c586-276">この例では、作成した、<xref:System.Data.OleDb.OleDbDataAdapter>と<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-276">This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><span data-ttu-id="0c586-277">ソース テーブルが無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-277">The source table is invalid.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-278">オーバーライドする場合<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0c586-278">When overriding <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> method.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable"><span data-ttu-id="0c586-279">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-279">A <see cref="T:System.Data.DataTable" /> to fill with records and, if necessary, schema.</span></span></param>
        <param name="command"><span data-ttu-id="0c586-280">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</span><span class="sxs-lookup"><span data-stu-id="0c586-280">The SQL SELECT statement used to retrieve rows from the data source.</span></span></param>
        <param name="behavior"><span data-ttu-id="0c586-281"><see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="0c586-281">One of the <see cref="T:System.Data.CommandBehavior" /> values.</span></span></param>
        <summary><span data-ttu-id="0c586-282">指定した <see cref="T:System.Data.DataTable" />、<see cref="T:System.Data.DataTable" />、および <see cref="T:System.Data.IDbCommand" /> を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.CommandBehavior" /> 内の行を追加または更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-282">Adds or refreshes rows in a <see cref="T:System.Data.DataTable" /> to match those in the data source using the specified <see cref="T:System.Data.DataTable" />, <see cref="T:System.Data.IDbCommand" /> and <see cref="T:System.Data.CommandBehavior" />.</span></span></summary>
        <returns><span data-ttu-id="0c586-283"><see cref="T:System.Data.DataTable" /> で正常に追加または更新された行数。</span><span class="sxs-lookup"><span data-stu-id="0c586-283">The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataTable" />.</span></span> <span data-ttu-id="0c586-284">これには、行を返さないステートメントの影響を受ける行は含まれません。</span><span class="sxs-lookup"><span data-stu-id="0c586-284">This does not include rows affected by statements that do not return rows.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-285"><xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、関連付けられている、指定した SELECT ステートメントを使用してデータ ソースから行を取得<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c586-285">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property.</span></span> <span data-ttu-id="0c586-286">SELECT ステートメントに関連付けられている接続オブジェクトが有効である必要がありますが、開放する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0c586-286">The connection object associated with the SELECT statement must be valid, but it does not need to be open.</span></span> <span data-ttu-id="0c586-287">前に、接続が閉じられた場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、オープン データを取得して、閉じられました。</span><span class="sxs-lookup"><span data-stu-id="0c586-287">If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data and then closed.</span></span> <span data-ttu-id="0c586-288">接続が開いている場合の前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-288">If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="0c586-289"><xref:System.Data.Common.DbDataAdapter.Fill%2A>操作は、指定した宛先に行を追加する<xref:System.Data.DataTable>内のオブジェクト、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataTable>オブジェクトのかどうかは既に存在しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-289">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to the specified destination <xref:System.Data.DataTable> object in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> object if it does not already exist.</span></span> <span data-ttu-id="0c586-290">作成するときに、<xref:System.Data.DataTable>オブジェクト、<xref:System.Data.Common.DbDataAdapter.Fill%2A>操作は、通常の列名のメタデータのみを作成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-290">When creating a <xref:System.Data.DataTable> object, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata.</span></span> <span data-ttu-id="0c586-291">ただし場合、<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>プロパティに設定されている`AddWithKey`、適切なプライマリ キーと制約も作成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-291">However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.</span></span>  
  
 <span data-ttu-id="0c586-292">場合、<xref:System.Data.Common.DbDataAdapter>オブジェクトの設定中に重複した列を検出した、 <xref:System.Data.DataTable>、パターンを使用して、後続の列に名前が生成されます"*columnname*1"、"*columnname*2「,」*columnname*3"のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-292">If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern "*columnname*1", "*columnname*2", "*columnname*3", and so on.</span></span> <span data-ttu-id="0c586-293">配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="0c586-293">If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span>  
  
 <span data-ttu-id="0c586-294">オーバー ロード<xref:System.Data.Common.DbDataAdapter.Fill%2A>を受け取る`DataTable`ように、パラメーターでは、最初の結果のみを取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-294">The overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataTable` as a parameter only obtains the first result.</span></span> <span data-ttu-id="0c586-295">オーバー ロードを使用して<xref:System.Data.Common.DbDataAdapter.Fill%2A>を受け取る`DataSet`を複数の結果を取得するパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="0c586-295">Use an overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataSet` as a parameter to obtain multiple results.</span></span>  
  
 <span data-ttu-id="0c586-296">使用することができます、<xref:System.Data.Common.DbDataAdapter.Fill%2A>で複数回、同じメソッド<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-296">You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="0c586-297">主キーが存在する場合は、受信した行が既に存在する行と一致すると共にマージされます。</span><span class="sxs-lookup"><span data-stu-id="0c586-297">If a primary key exists, incoming rows are merged with matching rows that already exist.</span></span> <span data-ttu-id="0c586-298">主キーがない場合、受信行が、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-298">If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="0c586-299">`SelectCommand` が OUTER JOIN の結果を返す場合、`DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable> 値を設定しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-299">If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="0c586-300">重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-300">You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.</span></span> <span data-ttu-id="0c586-301">詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-301">For more information, see [Defining Primary Keys](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-302">複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-302">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.</span></span> <span data-ttu-id="0c586-303">複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、 <xref:System.Data.MissingSchemaAction> 'éý'`AddWithKey`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-303">To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-304">このオーバー ロード、<see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />メソッドが保護されており、.NET Framework データ プロバイダーで使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="0c586-304">This overload of the <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> method is protected and is designed for use by a .NET Framework data provider.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (int startRecord, int maxRecords, params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(int32 startRecord, int32 maxRecords, class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (startRecord As Integer, maxRecords As Integer, ParamArray dataTables As DataTable()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(int startRecord, int maxRecords, ... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="dataTables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startRecord"><span data-ttu-id="0c586-305">取得を開始する、0 から始まるレコード番号。</span><span class="sxs-lookup"><span data-stu-id="0c586-305">The zero-based record number to start with.</span></span></param>
        <param name="maxRecords"><span data-ttu-id="0c586-306">取得するレコードの最大数。</span><span class="sxs-lookup"><span data-stu-id="0c586-306">The maximum number of records to retrieve.</span></span></param>
        <param name="dataTables"><span data-ttu-id="0c586-307">データ ソースから読み込む <see cref="T:System.Data.DataTable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-307">The <see cref="T:System.Data.DataTable" /> objects to fill from the data source.</span></span></param>
        <summary><span data-ttu-id="0c586-308">指定したレコード位置で開始し、指定した最大数のレコードを読み込んで、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の行を追加または更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-308">Adds or refreshes rows in a <see cref="T:System.Data.DataTable" /> to match those in the data source starting at the specified record and retrieving up to the specified maximum number of records.</span></span></summary>
        <returns><span data-ttu-id="0c586-309"><see cref="T:System.Data.DataTable" /> で正常に追加または更新された行数。</span><span class="sxs-lookup"><span data-stu-id="0c586-309">The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataTable" />.</span></span> <span data-ttu-id="0c586-310">この値には、行を返さないステートメントの影響を受ける行は含まれません。</span><span class="sxs-lookup"><span data-stu-id="0c586-310">This value does not include rows affected by statements that do not return rows.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-311"><xref:System.Data.Common.DataAdapter.Fill%2A>メソッドは、関連付けられている、指定した SELECT ステートメントを使用してデータ ソースから行を取得<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c586-311">The <xref:System.Data.Common.DataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property.</span></span> <span data-ttu-id="0c586-312">SELECT ステートメントに関連付けられている接続オブジェクトが有効である必要がありますが、開放する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0c586-312">The connection object associated with the SELECT statement must be valid, but it does not need to be open.</span></span> <span data-ttu-id="0c586-313">前に、接続が閉じられた場合<xref:System.Data.Common.DataAdapter.Fill%2A>が呼び出されると、ファイル データを取得するが開かれ、閉じられています。</span><span class="sxs-lookup"><span data-stu-id="0c586-313">If the connection is closed before <xref:System.Data.Common.DataAdapter.Fill%2A> is called, it is opened to retrieve data, and then it is closed.</span></span> <span data-ttu-id="0c586-314">接続が開いている場合の前に<xref:System.Data.Common.DataAdapter.Fill%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-314">If the connection is open before <xref:System.Data.Common.DataAdapter.Fill%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="0c586-315"><xref:System.Data.Common.DataAdapter.Fill%2A>操作は、先に行を追加する<xref:System.Data.DataTable>内のオブジェクト、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataTable>オブジェクトのかどうかは、まだ存在しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-315">The <xref:System.Data.Common.DataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist.</span></span> <span data-ttu-id="0c586-316">作成するときに<xref:System.Data.DataTable>、オブジェクト、<xref:System.Data.Common.DataAdapter.Fill%2A>操作は、通常の列名のメタデータのみを作成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-316">When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DataAdapter.Fill%2A> operation normally creates only column name metadata.</span></span> <span data-ttu-id="0c586-317">ただし場合、<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>プロパティに設定されている`AddWithKey`、適切なプライマリ キーと制約も作成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-317">However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.</span></span>  
  
 <span data-ttu-id="0c586-318">`SelectCommand` が OUTER JOIN の結果を返す場合、`DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable> 値を設定しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-318">If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="0c586-319">重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-319">You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.</span></span> <span data-ttu-id="0c586-320">詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-320">For more information, see [Defining Primary Keys](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).</span></span>  
  
 <span data-ttu-id="0c586-321">データ アダプターの設定中に重複した列が検出されると、<xref:System.Data.DataTable>パターン"columnname1"、"columnname2"、"columnname3"などを使用して、後続の列に名前が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-321">If the data adapter encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern "columnname1", "columnname2", "columnname3", and so on.</span></span> <span data-ttu-id="0c586-322">配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="0c586-322">If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="0c586-323">複数の結果セットが追加されたとき、 <xref:System.Data.DataSet>、各結果セットは、個別のテーブルに配置されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-323">When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is placed in a separate table.</span></span> <span data-ttu-id="0c586-324">追加の結果セットは指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に整数値を追加してという名前です。</span><span class="sxs-lookup"><span data-stu-id="0c586-324">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="0c586-325">列とテーブルの名前を使用してアプリケーションには、これらの名前付けパターンとの競合が発生しないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="0c586-325">Applications using column and table names should ensure that conflicts with these naming patterns does not occur.</span></span>  
  
 <span data-ttu-id="0c586-326">設定する SELECT ステートメントを使用する場合、<xref:System.Data.DataSet>複数の結果を返す、バッチの SQL ステートメントなど、エラーが含まれる結果のいずれかの場合それ以降のすべての結果はスキップされに追加されていない、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-326">When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statements, if one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="0c586-327">使用することができます、<xref:System.Data.Common.DataAdapter.Fill%2A>で複数回、同じメソッド<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-327">You can use the <xref:System.Data.Common.DataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="0c586-328">主キーが存在する場合は、受信した行が既に存在する行と一致すると共にマージされます。</span><span class="sxs-lookup"><span data-stu-id="0c586-328">If a primary key exists, incoming rows are merged with matching rows that already exist.</span></span> <span data-ttu-id="0c586-329">主キーがない場合、受信行が、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-329">If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-330">複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-330">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.</span></span> <span data-ttu-id="0c586-331">複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、 <xref:System.Data.MissingSchemaAction> 'éý'`AddWithKey`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-331">To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="0c586-332">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-332">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</span></span></param>
        <param name="startRecord"><span data-ttu-id="0c586-333">取得を開始する、0 から始まるレコード番号。</span><span class="sxs-lookup"><span data-stu-id="0c586-333">The zero-based record number to start with.</span></span></param>
        <param name="maxRecords"><span data-ttu-id="0c586-334">取得するレコードの最大数。</span><span class="sxs-lookup"><span data-stu-id="0c586-334">The maximum number of records to retrieve.</span></span></param>
        <param name="srcTable"><span data-ttu-id="0c586-335">テーブル マップに使用するソース テーブルの名前。</span><span class="sxs-lookup"><span data-stu-id="0c586-335">The name of the source table to use for table mapping.</span></span></param>
        <summary><span data-ttu-id="0c586-336"><see cref="T:System.Data.DataSet" /> 名および <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の指定した範囲の行を追加または更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-336">Adds or refreshes rows in a specified range in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> and <see cref="T:System.Data.DataTable" /> names.</span></span></summary>
        <returns><span data-ttu-id="0c586-337"><see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。</span><span class="sxs-lookup"><span data-stu-id="0c586-337">The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="0c586-338">これには、行を返さないステートメントの影響を受ける行は含まれません。</span><span class="sxs-lookup"><span data-stu-id="0c586-338">This does not include rows affected by statements that do not return rows.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-339">A `maxRecords` 0 の値は、開始レコードの後に見つかったすべてのレコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-339">A `maxRecords` value of 0 gets all records found after the start record.</span></span> <span data-ttu-id="0c586-340">場合`maxRecords`だけで、残りの行が返され、エラーは生成されませんが、残りの行の数より大きい。</span><span class="sxs-lookup"><span data-stu-id="0c586-340">If `maxRecords` is greater than the number of remaining rows, only the remaining rows are returned, and no error is issued.</span></span>  
  
 <span data-ttu-id="0c586-341">場合、対応する select コマンドは、複数の結果を返すステートメント<xref:System.Data.Common.DbDataAdapter.Fill%2A>のみ適用されます`maxRecords`最初の結果にします。</span><span class="sxs-lookup"><span data-stu-id="0c586-341">If the corresponding select command is a statement returning multiple results, <xref:System.Data.Common.DbDataAdapter.Fill%2A> only applies `maxRecords` to the first result.</span></span>  
  
 <span data-ttu-id="0c586-342"><xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、SELECT ステートメントを使用してデータ ソースからデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-342">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves the data from the data source using a SELECT statement.</span></span> <span data-ttu-id="0c586-343"><xref:System.Data.IDbConnection> SELECT ステートメントに関連付けられたオブジェクトが有効である必要がありますが、開放する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0c586-343">The <xref:System.Data.IDbConnection> object associated with the SELECT statement must be valid, but it does not need to be open.</span></span> <span data-ttu-id="0c586-344">場合、<xref:System.Data.IDbConnection>する前に閉じられた<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、オープン データを取得して、閉じられました。</span><span class="sxs-lookup"><span data-stu-id="0c586-344">If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data and then closed.</span></span> <span data-ttu-id="0c586-345">接続が開いている場合の前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-345">If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="0c586-346">コマンドがすべての行を返さない場合のテーブルに追加されて、<xref:System.Data.DataSet>例外は発生しませんが、します。</span><span class="sxs-lookup"><span data-stu-id="0c586-346">If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, but no exception is raised.</span></span>  
  
 <span data-ttu-id="0c586-347">場合、<xref:System.Data.Common.DbDataAdapter>オブジェクトの設定中に重複した列を検出した、 <xref:System.Data.DataTable>、パターンを使用して、後続の列に名前が生成されます"*columnname*1"、"*columnname*2「,」*columnname*3"のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-347">If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern "*columnname*1", "*columnname*2", "*columnname*3", and so on.</span></span> <span data-ttu-id="0c586-348">配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="0c586-348">If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span>  
  
 <span data-ttu-id="0c586-349">指定したクエリは、複数の結果を返す、各結果セットが別のテーブルに配置されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-349">When the query specified returns multiple results, each result set is placed in a separate table.</span></span> <span data-ttu-id="0c586-350">追加の結果セットは指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に整数値を追加してという名前です。</span><span class="sxs-lookup"><span data-stu-id="0c586-350">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="0c586-351">テーブル作成していなかったため、行を返さないクエリの select クエリに続く挿入クエリを処理する場合、select クエリ用に作成されたテーブルは"Table"という名前、作成の最初のテーブルになっているためです。</span><span class="sxs-lookup"><span data-stu-id="0c586-351">Because no table is created for a query that does not return rows, if you process an insert query followed by a select query, the table created for the select query is named "Table", because it is the first table created.</span></span> <span data-ttu-id="0c586-352">列とテーブルの名前を使用してアプリケーションには、これらの名前付けパターンとの競合が発生しないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="0c586-352">Applications using column and table names should ensure that conflicts with these naming patterns does not occur.</span></span>  
  
 <span data-ttu-id="0c586-353"><xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、シナリオをサポートします。 ここで、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字小文字によってのみとは異なる名前を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-353">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case.</span></span> <span data-ttu-id="0c586-354">このような状況で<xref:System.Data.Common.DbDataAdapter.Fill%2A>は対応するテーブルを見つける大文字小文字を区別比較を実行し、完全一致が存在しない場合は、新しいテーブルを作成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-354">In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists.</span></span> <span data-ttu-id="0c586-355">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-355">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 <span data-ttu-id="0c586-356">場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されたと<xref:System.Data.DataSet>は 1 つだけ<xref:System.Data.DataTable>名前を持つ唯一の相違点の場合を<xref:System.Data.DataTable>は更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-356">If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated.</span></span> <span data-ttu-id="0c586-357">このシナリオでは、比較では大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="0c586-357">In this scenario, the comparison is case insensitive.</span></span> <span data-ttu-id="0c586-358">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-358">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <span data-ttu-id="0c586-359">エラーまたは例外が発生した場合、データ テーブルを設定中に、エラーの発生前に追加された行は、データ テーブルに残ります。</span><span class="sxs-lookup"><span data-stu-id="0c586-359">If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables.</span></span> <span data-ttu-id="0c586-360">操作の残りの部分は中止されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-360">The remainder of the operation is aborted.</span></span>  
  
 <span data-ttu-id="0c586-361">設定する SELECT ステートメントを使用する場合、<xref:System.Data.DataSet>バッチの SQL ステートメントなど、複数の結果を返します、次の注意してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-361">When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as batch SQL statements, be aware of the following:</span></span>  
  
-   <span data-ttu-id="0c586-362">バッチの SQL ステートメントから複数の結果を処理するときに`maxRecords`最初の結果にのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-362">When processing multiple results from a batch SQL statement, `maxRecords` only applies to the first result.</span></span> <span data-ttu-id="0c586-363">チャプターの結果 (.NET Framework Data Provider for OLE DB のみ) を含む行を同様です。</span><span class="sxs-lookup"><span data-stu-id="0c586-363">The same is true for rows containing chaptered results (.NET Framework Data Provider for OLE DB only).</span></span> <span data-ttu-id="0c586-364">最上位の結果はによる制限を`maxRecords`、すべての子行が追加されますが、します。</span><span class="sxs-lookup"><span data-stu-id="0c586-364">The top level result is limited by `maxRecords`, but all child rows are added.</span></span>  
  
-   <span data-ttu-id="0c586-365">それ以降のすべての結果がスキップされに追加されていないエラーが含まれる結果のいずれかの場合、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-365">If one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="0c586-366">以降を使用する場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>の内容を更新する呼び出し、 <xref:System.Data.DataSet>、2 つの条件を満たす必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-366">When using subsequent <xref:System.Data.Common.DbDataAdapter.Fill%2A> calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:</span></span>  
  
1.  <span data-ttu-id="0c586-367">SQL ステートメントが初期設定に使用する 1 つと一致する必要があります、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-367">The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>.</span></span>  
  
2.  <span data-ttu-id="0c586-368">**キー**列情報が存在する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-368">The **Key** column information must be present.</span></span>  
  
 <span data-ttu-id="0c586-369">主キーの情報が存在する場合、重複する行は調整して、1 回のみで、<xref:System.Data.DataTable>に対応する、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-369">If primary key information is present, any duplicate rows will be reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-370">主キーの情報を設定するを通じて<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>を指定して、<xref:System.Data.DataTable.PrimaryKey%2A>のプロパティ、 <xref:System.Data.DataTable>、かを設定して、<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>プロパティを`AddWithKey`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-370">Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.</span></span>  
  
 <span data-ttu-id="0c586-371">`SelectCommand` が OUTER JOIN の結果を返す場合、`DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable> 値を設定しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-371">If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="0c586-372">重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-372">You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.</span></span> <span data-ttu-id="0c586-373">詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-373">For more information, see [Defining Primary Keys](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-374">複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-374">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.</span></span> <span data-ttu-id="0c586-375">複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、 <xref:System.Data.MissingSchemaAction> 'éý'`AddWithKey`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-375">To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-376">`DataSet`によって示されるレコードの数を超えるは含まれません`maxRecords`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-376">The `DataSet` will not contain more than the number of records indicated by `maxRecords`.</span></span> <span data-ttu-id="0c586-377">ただし、クエリによって生成される全体の結果セットは、サーバーからが返されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-377">However, the entire result set generated by the query is still returned from the server.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c586-378">次の例は、派生クラスを使用して<xref:System.Data.OleDb.OleDbDataAdapter>を埋める、<xref:System.Data.DataSet>から行 10 では、以降の 15 行を含む、**カテゴリ**テーブル。</span><span class="sxs-lookup"><span data-stu-id="0c586-378">The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with 15 rows, beginning at row 10, from the **Categories** table.</span></span> <span data-ttu-id="0c586-379">この例では、作成した、<xref:System.Data.OleDb.OleDbDataAdapter>と<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-379">This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><span data-ttu-id="0c586-380"><see cref="T:System.Data.DataSet" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-380">The <see cref="T:System.Data.DataSet" /> is invalid.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0c586-381">ソース テーブルが無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-381">The source table is invalid.</span></span>  
  
 <span data-ttu-id="0c586-382">- または -</span><span class="sxs-lookup"><span data-stu-id="0c586-382">-or-</span></span>  
  
 <span data-ttu-id="0c586-383">接続が無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-383">The connection is invalid.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="0c586-384">接続が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="0c586-384">The connection could not be found.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0c586-385"><paramref name="startRecord" /> パラメーターが 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="0c586-385">The <paramref name="startRecord" /> parameter is less than 0.</span></span>  
  
 <span data-ttu-id="0c586-386">- または -</span><span class="sxs-lookup"><span data-stu-id="0c586-386">-or-</span></span>  
  
 <span data-ttu-id="0c586-387"><paramref name="maxRecords" /> パラメーターが 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="0c586-387">The <paramref name="maxRecords" /> parameter is less than 0.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-388">オーバーライドする場合<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0c586-388">When overriding <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> method.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, int32 startRecord, int32 maxRecords, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), startRecord As Integer, maxRecords As Integer, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, int startRecord, int maxRecords, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTables"><span data-ttu-id="0c586-389">データ ソースから読み込む <see cref="T:System.Data.DataTable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-389">The <see cref="T:System.Data.DataTable" /> objects to fill from the data source.</span></span></param>
        <param name="startRecord"><span data-ttu-id="0c586-390">取得を開始する、0 から始まるレコード番号。</span><span class="sxs-lookup"><span data-stu-id="0c586-390">The zero-based record number to start with.</span></span></param>
        <param name="maxRecords"><span data-ttu-id="0c586-391">取得するレコードの最大数。</span><span class="sxs-lookup"><span data-stu-id="0c586-391">The maximum number of records to retrieve.</span></span></param>
        <param name="command"><span data-ttu-id="0c586-392"><see cref="T:System.Data.IDbCommand" /> オブジェクトにデータを読み込むために実行する <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-392">The <see cref="T:System.Data.IDbCommand" /> executed to fill the <see cref="T:System.Data.DataTable" /> objects.</span></span></param>
        <param name="behavior"><span data-ttu-id="0c586-393"><see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="0c586-393">One of the <see cref="T:System.Data.CommandBehavior" /> values.</span></span></param>
        <summary><span data-ttu-id="0c586-394"><see cref="T:System.Data.DataSet" /> 名および <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の指定した範囲の行を追加または更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-394">Adds or refreshes rows in a specified range in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> and <see cref="T:System.Data.DataTable" /> names.</span></span></summary>
        <returns><span data-ttu-id="0c586-395">データ テーブルで追加または更新された行数。</span><span class="sxs-lookup"><span data-stu-id="0c586-395">The number of rows added to or refreshed in the data tables.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-396">A `maxRecords` 0 の値は、開始レコードの後に見つかったすべてのレコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-396">A `maxRecords` value of 0 gets all records found after the start record.</span></span> <span data-ttu-id="0c586-397">場合`maxRecords`だけで、残りの行が返され、エラーは発行されませんが、残りの行の数より大きい。</span><span class="sxs-lookup"><span data-stu-id="0c586-397">If `maxRecords` is greater than the number of remaining rows, only the remaining rows are returned and no error is issued.</span></span>  
  
 <span data-ttu-id="0c586-398"><xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、SELECT ステートメントを使用してデータ ソースからデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-398">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves the data from the data source using a SELECT statement.</span></span> <span data-ttu-id="0c586-399"><xref:System.Data.IDbConnection> SELECT ステートメントに関連付けられたオブジェクトが有効である必要がありますが、開放する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0c586-399">The <xref:System.Data.IDbConnection> object associated with the SELECT statement must be valid, but it does not need to be open.</span></span> <span data-ttu-id="0c586-400">場合、<xref:System.Data.IDbConnection>する前に閉じられた<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、そのはデータの取得に開かれた後終了します。</span><span class="sxs-lookup"><span data-stu-id="0c586-400">If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="0c586-401">接続が開いている場合の前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-401">If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="0c586-402">コマンドがすべての行を返さない場合のテーブルに追加されて、<xref:System.Data.DataSet>例外は発生しませんが、します。</span><span class="sxs-lookup"><span data-stu-id="0c586-402">If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, but no exception is raised.</span></span>  
  
 <span data-ttu-id="0c586-403">場合、<xref:System.Data.Common.DbDataAdapter>オブジェクトの設定中に重複した列を検出した、 <xref:System.Data.DataTable>、パターンを使用して、後続の列に名前が生成されます"*columnname*1"、"*columnname*2「,」*columnname*3"のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-403">If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern "*columnname*1", "*columnname*2", "*columnname*3", and so on.</span></span> <span data-ttu-id="0c586-404">配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="0c586-404">If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span>  
  
 <span data-ttu-id="0c586-405">指定したクエリは、複数の結果を返す、各結果セットが別のテーブルに配置されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-405">When the query specified returns multiple results, each result set is placed in a separate table.</span></span> <span data-ttu-id="0c586-406">追加の結果セットは指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に整数値を追加してという名前です。</span><span class="sxs-lookup"><span data-stu-id="0c586-406">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="0c586-407">行を返さないクエリのテーブルは作成されません select クエリに続く挿入クエリを処理する場合はので、select クエリ用に作成されたテーブルの名前は"Table"作成の最初のテーブルになっているためです。</span><span class="sxs-lookup"><span data-stu-id="0c586-407">Since no table is created for a query that does not return rows, if you were to process an insert query followed by a select query, the table created for the select query would be named "Table", because it is the first table created.</span></span> <span data-ttu-id="0c586-408">列とテーブルの名前を使用してアプリケーションには、これらの名前付けパターンとの競合が発生しないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="0c586-408">Applications using column and table names should ensure that conflicts with these naming patterns does not occur.</span></span>  
  
 <span data-ttu-id="0c586-409"><xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、シナリオをサポートします。 ここで、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字小文字によってのみとは異なる名前を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-409">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case.</span></span> <span data-ttu-id="0c586-410">このような状況で<xref:System.Data.Common.DbDataAdapter.Fill%2A>は対応するテーブルを見つける大文字小文字を区別比較を実行し、完全一致が存在しない場合は、新しいテーブルを作成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-410">In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists.</span></span> <span data-ttu-id="0c586-411">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-411">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 <span data-ttu-id="0c586-412">場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されたと<xref:System.Data.DataSet>は 1 つだけ<xref:System.Data.DataTable>名前を持つ唯一の相違点の場合を<xref:System.Data.DataTable>は更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-412">If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated.</span></span> <span data-ttu-id="0c586-413">このシナリオでは、比較では大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="0c586-413">In this scenario, the comparison is case insensitive.</span></span> <span data-ttu-id="0c586-414">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-414">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <span data-ttu-id="0c586-415">エラーまたは例外が発生した場合、データ テーブルを設定中に、エラーの発生前に追加された行は、データ テーブルに残ります。</span><span class="sxs-lookup"><span data-stu-id="0c586-415">If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables.</span></span> <span data-ttu-id="0c586-416">操作の残りの部分は中止されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-416">The remainder of the operation is aborted.</span></span>  
  
 <span data-ttu-id="0c586-417">設定する SELECT ステートメントを使用する場合、<xref:System.Data.DataTable>など、バッチの SQL ステートメントは、次の注意して、オブジェクトが複数の結果を返します。</span><span class="sxs-lookup"><span data-stu-id="0c586-417">When the SELECT statement used to populate the <xref:System.Data.DataTable> objects returns multiple results, such as a batch SQL statement, be aware of the following:</span></span>  
  
-   <span data-ttu-id="0c586-418">バッチの SQL ステートメントから複数の結果を処理するときに`maxRecords`最初の結果にのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-418">When processing multiple results from a batch SQL statement, `maxRecords` only applies to the first result.</span></span> <span data-ttu-id="0c586-419">チャプターの結果 (.NET Framework Data Provider for OLE DB のみ) を含む行を同様です。</span><span class="sxs-lookup"><span data-stu-id="0c586-419">The same is true for rows containing chaptered results (.NET Framework Data Provider for OLE DB only).</span></span> <span data-ttu-id="0c586-420">最上位の結果はによる制限を`maxRecords`、すべての子行が追加されますが、します。</span><span class="sxs-lookup"><span data-stu-id="0c586-420">The top level result is limited by `maxRecords`, but all child rows are added.</span></span>  
  
-   <span data-ttu-id="0c586-421">エラーが含まれている結果のいずれかの場合は、後続のすべての結果がスキップされます。</span><span class="sxs-lookup"><span data-stu-id="0c586-421">If one of the results contains an error, all subsequent results are skipped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-422">`DataSet`によって示されるレコードの数を超えるは含まれません`maxRecords`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-422">The `DataSet` will not contain more than the number of records indicated by `maxRecords`.</span></span> <span data-ttu-id="0c586-423">ただし、クエリによって生成されたすべての結果セットは、サーバーからが返されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-423">However, the entire resultset generated by the query is still returned from the server.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><span data-ttu-id="0c586-424"><see cref="T:System.Data.DataSet" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-424">The <see cref="T:System.Data.DataSet" /> is invalid.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0c586-425">ソース テーブルが無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-425">The source table is invalid.</span></span>  
  
 <span data-ttu-id="0c586-426">- または -</span><span class="sxs-lookup"><span data-stu-id="0c586-426">-or-</span></span>  
  
 <span data-ttu-id="0c586-427">接続が無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-427">The connection is invalid.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="0c586-428">接続が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="0c586-428">The connection could not be found.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0c586-429"><paramref name="startRecord" /> パラメーターが 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="0c586-429">The <paramref name="startRecord" /> parameter is less than 0.</span></span>  
  
 <span data-ttu-id="0c586-430">- または -</span><span class="sxs-lookup"><span data-stu-id="0c586-430">-or-</span></span>  
  
 <span data-ttu-id="0c586-431"><paramref name="maxRecords" /> パラメーターが 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="0c586-431">The <paramref name="maxRecords" /> parameter is less than 0.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-432">オーバーライドする場合<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0c586-432">When overriding <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> method.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="0c586-433">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-433">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</span></span></param>
        <param name="startRecord"><span data-ttu-id="0c586-434">取得を開始する、0 から始まるレコード番号。</span><span class="sxs-lookup"><span data-stu-id="0c586-434">The zero-based record number to start with.</span></span></param>
        <param name="maxRecords"><span data-ttu-id="0c586-435">取得するレコードの最大数。</span><span class="sxs-lookup"><span data-stu-id="0c586-435">The maximum number of records to retrieve.</span></span></param>
        <param name="srcTable"><span data-ttu-id="0c586-436">テーブル マップに使用するソース テーブルの名前。</span><span class="sxs-lookup"><span data-stu-id="0c586-436">The name of the source table to use for table mapping.</span></span></param>
        <param name="command"><span data-ttu-id="0c586-437">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</span><span class="sxs-lookup"><span data-stu-id="0c586-437">The SQL SELECT statement used to retrieve rows from the data source.</span></span></param>
        <param name="behavior"><span data-ttu-id="0c586-438"><see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="0c586-438">One of the <see cref="T:System.Data.CommandBehavior" /> values.</span></span></param>
        <summary><span data-ttu-id="0c586-439"><see cref="T:System.Data.DataSet" /> 名、ソース テーブル名、コマンド文字列、およびコマンド動作を使用して、データ ソース内の列と一致するように、<see cref="T:System.Data.DataSet" /> 内の指定した範囲の行を追加または更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-439">Adds or refreshes rows in a specified range in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> and source table names, command string, and command behavior.</span></span></summary>
        <returns><span data-ttu-id="0c586-440"><see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。</span><span class="sxs-lookup"><span data-stu-id="0c586-440">The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="0c586-441">これには、行を返さないステートメントの影響を受ける行は含まれません。</span><span class="sxs-lookup"><span data-stu-id="0c586-441">This does not include rows affected by statements that do not return rows.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-442"><xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、関連付けられている、指定した SELECT ステートメントを使用してデータ ソースから行を取得<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c586-442">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property.</span></span> <span data-ttu-id="0c586-443">SELECT ステートメントに関連付けられている接続オブジェクトが有効である必要がありますが、開放する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0c586-443">The connection object associated with the SELECT statement must be valid, but it does not need to be open.</span></span> <span data-ttu-id="0c586-444">前に、接続が閉じられた場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、そのはデータの取得に開かれた後終了します。</span><span class="sxs-lookup"><span data-stu-id="0c586-444">If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="0c586-445">接続が開いている場合の前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-445">If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="0c586-446"><xref:System.Data.Common.DbDataAdapter.Fill%2A>操作は、先に行を追加する<xref:System.Data.DataTable>内のオブジェクト、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataTable>オブジェクトのかどうかは、まだ存在しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-446">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist.</span></span> <span data-ttu-id="0c586-447">作成するときに<xref:System.Data.DataTable>、オブジェクト、<xref:System.Data.Common.DbDataAdapter.Fill%2A>操作は、通常の列名のメタデータのみを作成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-447">When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata.</span></span> <span data-ttu-id="0c586-448">ただし場合、<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>プロパティに設定されている`AddWithKey`、適切なプライマリ キーと制約も作成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-448">However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.</span></span>  
  
 <span data-ttu-id="0c586-449">場合、<xref:System.Data.Common.DbDataAdapter>重複する列を設定中に検出すると、<xref:System.Data.DataTable>のパターンを使用して、後続の列名が生成されます"*columnname*1"、"*columnname*2「,」*columnname*3"のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-449">If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern "*columnname*1", "*columnname*2", "*columnname*3", and so on.</span></span> <span data-ttu-id="0c586-450">配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="0c586-450">If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="0c586-451">複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットは、個別のテーブルに配置されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-451">When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table.</span></span> <span data-ttu-id="0c586-452">追加の結果セットは指定したテーブル名 (たとえば、"Table"、"Table1"、"Table2"、およびなど) に整数値を追加してという名前です。</span><span class="sxs-lookup"><span data-stu-id="0c586-452">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="0c586-453">列とテーブルの名前を使用してアプリケーションには、これらの名前付けパターンとの競合が発生しないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="0c586-453">Applications using column and table names should ensure that conflicts with these naming patterns does not occur.</span></span>  
  
 <span data-ttu-id="0c586-454"><xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドは、シナリオをサポートします。 ここで、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字小文字によってのみとは異なる名前を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-454">The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case.</span></span> <span data-ttu-id="0c586-455">このような状況で<xref:System.Data.Common.DbDataAdapter.Fill%2A>は対応するテーブルを見つける大文字小文字を区別比較を実行し、完全一致が存在しない場合は、新しいテーブルを作成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-455">In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists.</span></span> <span data-ttu-id="0c586-456">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-456">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 <span data-ttu-id="0c586-457">場合<xref:System.Data.Common.DbDataAdapter.Fill%2A>が呼び出されたと<xref:System.Data.DataSet>は 1 つだけ<xref:System.Data.DataTable>名前を持つ唯一の相違点の場合を<xref:System.Data.DataTable>は更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-457">If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated.</span></span> <span data-ttu-id="0c586-458">このシナリオでは、比較では大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="0c586-458">In this scenario, the comparison is case insensitive.</span></span> <span data-ttu-id="0c586-459">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-459">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <span data-ttu-id="0c586-460">使用することができます、<xref:System.Data.Common.DbDataAdapter.Fill%2A>で複数回、同じメソッド<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-460">You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="0c586-461">主キーが存在する場合は、受信した行が既に存在する行と一致すると共にマージされます。</span><span class="sxs-lookup"><span data-stu-id="0c586-461">If a primary key exists, incoming rows are merged with matching rows that already exist.</span></span> <span data-ttu-id="0c586-462">主キーがない場合、受信行が、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-462">If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="0c586-463">`SelectCommand` が OUTER JOIN の結果を返す場合、`DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable> 値を設定しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-463">If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="0c586-464">重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-464">You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.</span></span> <span data-ttu-id="0c586-465">詳細については、次を参照してください。[主キーを定義する](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-465">For more information, see [Defining Primary Keys](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-466">複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.Common.DbDataAdapter.Fill%2A>と<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework データ プロバイダーが最初の結果のみのスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-466">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.Fill%2A> and <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0c586-467">ソース テーブルが無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-467">The source table is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0c586-468"><paramref name="startRecord" /> パラメーターが 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="0c586-468">The <paramref name="startRecord" /> parameter is less than 0.</span></span>  
  
 <span data-ttu-id="0c586-469">- または -</span><span class="sxs-lookup"><span data-stu-id="0c586-469">-or-</span></span>  
  
 <span data-ttu-id="0c586-470"><paramref name="maxRecords" /> パラメーターが 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="0c586-470">The <paramref name="maxRecords" /> parameter is less than 0.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-471">このオーバー ロード、<see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />メソッドが保護されており、.NET Framework データ プロバイダーで使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="0c586-471">This overload of the <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> method is protected and is designed for use by a .NET Framework data provider.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FillCommandBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Data.CommandBehavior FillCommandBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandBehavior FillCommandBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property FillCommandBehavior As CommandBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Data::CommandBehavior FillCommandBehavior { System::Data::CommandBehavior get(); void set(System::Data::CommandBehavior value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c586-472">データ アダプターにデータを読み込むコマンドの動作を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-472">Gets or sets the behavior of the command used to fill the data adapter.</span></span></summary>
        <value><span data-ttu-id="0c586-473">データ アダプターにデータを読み込むコマンドの <see cref="T:System.Data.CommandBehavior" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-473">The <see cref="T:System.Data.CommandBehavior" /> of the command used to fill the data adapter.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0c586-474"><see cref="T:System.Data.DataTable" /> を <see cref="T:System.Data.DataSet" /> に追加し、データ ソース内のスキーマと一致するようにスキーマを設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-474">Adds a <see cref="T:System.Data.DataTable" /> to a <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="0c586-475">スキーマを挿入する <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-475">A <see cref="T:System.Data.DataSet" /> to insert the schema in.</span></span></param>
        <param name="schemaType"><span data-ttu-id="0c586-476">スキーマを挿入する方法を指定する <see cref="T:System.Data.SchemaType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="0c586-476">One of the <see cref="T:System.Data.SchemaType" /> values that specify how to insert the schema.</span></span></param>
        <summary><span data-ttu-id="0c586-477">"Table" という名前の <see cref="T:System.Data.DataTable" /> を指定された <see cref="T:System.Data.DataSet" /> に追加し、指定された <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソースにあるスキーマと一致するようにスキーマを構成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-477">Adds a <see cref="T:System.Data.DataTable" /> named "Table" to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based on the specified <see cref="T:System.Data.SchemaType" />.</span></span></summary>
        <returns><span data-ttu-id="0c586-478"><see cref="T:System.Data.DataTable" /> に追加された <see cref="T:System.Data.DataSet" /> オブジェクトのコレクションへの参照。</span><span class="sxs-lookup"><span data-stu-id="0c586-478">A reference to a collection of <see cref="T:System.Data.DataTable" /> objects that were added to the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-479">このメソッドを使用してデータ ソースからスキーマ情報を取得、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-479">This method retrieves the schema information from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</span></span>  
  
 <span data-ttu-id="0c586-480">A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作は追加、<xref:System.Data.DataTable>変換先に<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-480">A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-481">列を次に、追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>、次の構成と<xref:System.Data.DataColumn>プロパティ、データ ソースに存在する場合。</span><span class="sxs-lookup"><span data-stu-id="0c586-481">It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:</span></span>  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <span data-ttu-id="0c586-482"><xref:System.Data.DataColumn.AutoIncrement%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c586-482"><xref:System.Data.DataColumn.AutoIncrement%2A>.</span></span> <span data-ttu-id="0c586-483">設定する必要があります<xref:System.Data.DataColumn.AutoIncrementStep%2A>と<xref:System.Data.DataColumn.AutoIncrementSeed%2A>とは別にします。</span><span class="sxs-lookup"><span data-stu-id="0c586-483">You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.</span></span>  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <span data-ttu-id="0c586-484"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 構成も行います、<xref:System.Data.DataTable.PrimaryKey%2A>と<xref:System.Data.DataTable.Constraints%2A>に応じて、次の規則のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="0c586-484"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:</span></span>  
  
-   <span data-ttu-id="0c586-485">1 つまたは複数の主キー列がによって返される場合、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>の主キー列として使用される、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-485">If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
-   <span data-ttu-id="0c586-486">主キー列は返されませんが、一意の列は場合、は、場合にのみ、すべての一意の列は null 値非許容と場合、主キーとしての一意の列が使用されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-486">If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable.</span></span> <span data-ttu-id="0c586-487">任意の列は null を許容すると場合、<xref:System.Data.UniqueConstraint>に追加、 <xref:System.Data.ConstraintCollection>、ですが、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="0c586-487">If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.</span></span>  
  
-   <span data-ttu-id="0c586-488">主キー列としての主キー列が使用される主キー列と一意の列の両方が返される場合は、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-488">If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="0c586-489">主キーと一意の制約が追加することに注意してください、<xref:System.Data.ConstraintCollection>前述のルールがその他の制約に従って、型は追加されません。</span><span class="sxs-lookup"><span data-stu-id="0c586-489">Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.</span></span>  
  
 <span data-ttu-id="0c586-490">一意のクラスター化または SQL Server テーブルに複数の列にインデックスを定義し、主キー制約は、個別の列のセットで、クラスター化インデックス内の列の名前が返されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-490">If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.</span></span> <span data-ttu-id="0c586-491">主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。</span><span class="sxs-lookup"><span data-stu-id="0c586-491">To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.</span></span> <span data-ttu-id="0c586-492">クエリ ヒントを指定する方法の詳細については、次を参照してください。[クエリ ヒント (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-492">For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).</span></span>  
  
 <span data-ttu-id="0c586-493">主キーの情報が中に使用される<xref:System.Data.Common.DbDataAdapter.Fill%2A>を検索および指定されたキー列と一致するすべての行を置換します。</span><span class="sxs-lookup"><span data-stu-id="0c586-493">Primary key information is used during <xref:System.Data.Common.DbDataAdapter.Fill%2A> to find and replace any rows whose key columns match.</span></span> <span data-ttu-id="0c586-494">これは目的の動作ではない場合を使用して<xref:System.Data.Common.DbDataAdapter.Fill%2A>スキーマ情報を求められることがなくです。</span><span class="sxs-lookup"><span data-stu-id="0c586-494">If this is not the desired behavior, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> without requesting schema information.</span></span>  
  
 <span data-ttu-id="0c586-495">場合、<xref:System.Data.IDataAdapter>重複する列を設定中に検出すると、<xref:System.Data.DataTable>のパターンを使用して、後続の列名が生成されます"*columnname*1"、"*columnname*2「,」*columnname*3"のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-495">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern "*columnname*1", "*columnname*2", "*columnname*3", and so on.</span></span> <span data-ttu-id="0c586-496">配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="0c586-496">If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="0c586-497">複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットは、個別のテーブルに配置されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-497">When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table.</span></span> <span data-ttu-id="0c586-498">追加の結果セットは整数値名を追加して、指定されたテーブル (たとえば、"Table"、"Table1"、"Table2"、およびなどです。) という名前です。</span><span class="sxs-lookup"><span data-stu-id="0c586-498">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on.).</span></span> <span data-ttu-id="0c586-499">列とテーブルの名前を使用してアプリケーションには、これらの名前付けパターンとの競合が発生しないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="0c586-499">Applications using column and table names should ensure that conflicts with these naming patterns does not occur.</span></span>  
  
 <span data-ttu-id="0c586-500"><xref:System.Data.IDbConnection> Select コマンドに関連付けられたオブジェクトが有効である必要がありますを開く必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0c586-500">The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to open.</span></span> <span data-ttu-id="0c586-501">場合、<xref:System.Data.IDbConnection>する前に閉じられた<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、そのはデータの取得に開かれた後終了します。</span><span class="sxs-lookup"><span data-stu-id="0c586-501">If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="0c586-502">接続が開いている場合の前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、それが開いたままにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-502">If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is left open.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-503">複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-503">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.</span></span> <span data-ttu-id="0c586-504">複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、 <xref:System.Data.MissingSchemaAction> 'éý'`AddWithKey`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-504">To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.</span></span>  
  
 <span data-ttu-id="0c586-505"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。</span><span class="sxs-lookup"><span data-stu-id="0c586-505">When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed.</span></span> <span data-ttu-id="0c586-506">SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-506">The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements.</span></span> <span data-ttu-id="0c586-507">詳細については、SQL Server Books Online を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-507">See SQL Server Books Online for more information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c586-508">次の例は、派生クラスを使用して<xref:System.Data.SqlClient.SqlDataAdapter>、入力を<xref:System.Data.DataSet>スキーマ、および返しますを持つ、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-508">The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataTable"><span data-ttu-id="0c586-509">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-509">The <see cref="T:System.Data.DataTable" /> to be filled with the schema from the data source.</span></span></param>
        <param name="schemaType"><span data-ttu-id="0c586-510"><see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="0c586-510">One of the <see cref="T:System.Data.SchemaType" /> values.</span></span></param>
        <summary><span data-ttu-id="0c586-511">指定した <see cref="T:System.Data.DataTable" /> に基いて、指定した <see cref="T:System.Data.SchemaType" /> のスキーマを設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-511">Configures the schema of the specified <see cref="T:System.Data.DataTable" /> based on the specified <see cref="T:System.Data.SchemaType" />.</span></span></summary>
        <returns><span data-ttu-id="0c586-512">データ ソースから返されたスキーマ情報が格納された <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-512">A <see cref="T:System.Data.DataTable" /> that contains schema information returned from the data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-513"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>メソッドを使用してデータ ソースからスキーマを取得、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-513">The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</span></span> <span data-ttu-id="0c586-514">接続オブジェクトに関連付けられている、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>有効である必要がありますを開く必要はありませんが、します。</span><span class="sxs-lookup"><span data-stu-id="0c586-514">The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open.</span></span> <span data-ttu-id="0c586-515">前に、接続が閉じられた場合<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、そのはデータの取得に開かれた後終了します。</span><span class="sxs-lookup"><span data-stu-id="0c586-515">If the connection is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="0c586-516">接続が開いている場合の前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-516">If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="0c586-517">A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作を返します、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-517">A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation returns a <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="0c586-518">列を次に、追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>、次の構成と<xref:System.Data.DataColumn>プロパティ、データ ソースに存在する場合。</span><span class="sxs-lookup"><span data-stu-id="0c586-518">It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:</span></span>  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <span data-ttu-id="0c586-519"><xref:System.Data.DataColumn.AutoIncrement%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c586-519"><xref:System.Data.DataColumn.AutoIncrement%2A>.</span></span> <span data-ttu-id="0c586-520">設定する必要があります<xref:System.Data.DataColumn.AutoIncrementStep%2A>と<xref:System.Data.DataColumn.AutoIncrementSeed%2A>とは別にします。</span><span class="sxs-lookup"><span data-stu-id="0c586-520">You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.</span></span>  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <span data-ttu-id="0c586-521"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 構成も行います、<xref:System.Data.DataTable.PrimaryKey%2A>と<xref:System.Data.DataTable.Constraints%2A>に応じて、次の規則のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="0c586-521"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:</span></span>  
  
-   <span data-ttu-id="0c586-522">場合、<xref:System.Data.DataTable.PrimaryKey%2A>に対して既に定義されて、 `DataTable`、または`DataTable`データを含む、`PrimaryKey`プロパティは設定されません。</span><span class="sxs-lookup"><span data-stu-id="0c586-522">If a <xref:System.Data.DataTable.PrimaryKey%2A> has already been defined for the `DataTable`, or the `DataTable` contains data, the `PrimaryKey` property will not be set.</span></span>  
  
-   <span data-ttu-id="0c586-523">1 つまたは複数の主キー列がによって返される場合、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>の主キー列として使用される、`DataTable`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-523">If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the `DataTable`.</span></span>  
  
-   <span data-ttu-id="0c586-524">主キー列は返されませんが、一意の列は場合、は、場合にのみ、すべての一意の列は null 値非許容と場合、主キーとしての一意の列が使用されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-524">If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable.</span></span> <span data-ttu-id="0c586-525">任意の列は null を許容すると場合、<xref:System.Data.UniqueConstraint>に追加、 <xref:System.Data.ConstraintCollection>、ですが、`PrimaryKey`プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="0c586-525">If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the `PrimaryKey` property is not set.</span></span>  
  
-   <span data-ttu-id="0c586-526">主キー列としての主キー列が使用される主キー列と一意の列の両方が返される場合は、`DataTable`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-526">If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the `DataTable`.</span></span>  
  
 <span data-ttu-id="0c586-527">主キーと一意の制約が追加することに注意してください、<xref:System.Data.ConstraintCollection>前述のルールがその他の制約に従って、型は追加されません。</span><span class="sxs-lookup"><span data-stu-id="0c586-527">Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.</span></span> <span data-ttu-id="0c586-528">このプロセスは、サーバーに複数のラウンドト リップを必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-528">This process may require several round-trips to the server.</span></span>  
  
 <span data-ttu-id="0c586-529">一意のクラスター化または SQL Server テーブルに複数の列にインデックスを定義し、主キー制約は、個別の列のセットで、クラスター化インデックス内の列の名前が返されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-529">If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.</span></span> <span data-ttu-id="0c586-530">主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。</span><span class="sxs-lookup"><span data-stu-id="0c586-530">To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.</span></span> <span data-ttu-id="0c586-531">クエリ ヒントを指定する方法の詳細については、次を参照してください。[クエリ ヒント (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-531">For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).</span></span>  
  
 <span data-ttu-id="0c586-532">場合、<xref:System.Data.Common.DbDataAdapter>重複する列を設定中に検出すると、<xref:System.Data.DataTable>のパターンを使用して、後続の列名が生成されます"*columnname*1"、"*columnname*2「,」*columnname*3"のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-532">If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern "*columnname*1", "*columnname*2", "*columnname*3", and so on.</span></span> <span data-ttu-id="0c586-533">配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="0c586-533">If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="0c586-534">複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットは、個別のテーブルに配置されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-534">When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table.</span></span> <span data-ttu-id="0c586-535">追加の結果セットは整数値名を追加して、指定されたテーブル (たとえば、"Table"、"Table1"、"Table2"、およびなどです。) という名前です。</span><span class="sxs-lookup"><span data-stu-id="0c586-535">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on.).</span></span> <span data-ttu-id="0c586-536">列とテーブルの名前を使用してアプリケーションには、これらの名前付けパターンとの競合が発生しないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="0c586-536">Applications using column and table names should ensure that conflicts with these naming patterns does not occur.</span></span>  
  
 <span data-ttu-id="0c586-537"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> すべての行は返しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-537"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> does not return any rows.</span></span> <span data-ttu-id="0c586-538">使用して、<xref:System.Data.Common.DbDataAdapter.Fill%2A>行を追加する方法、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-538">Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-539">複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-539">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.</span></span> <span data-ttu-id="0c586-540">複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、 <xref:System.Data.MissingSchemaAction> 'éý'`AddWithKey`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-540">To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.</span></span>  
  
 <span data-ttu-id="0c586-541"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。</span><span class="sxs-lookup"><span data-stu-id="0c586-541">When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed.</span></span> <span data-ttu-id="0c586-542">SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-542">The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements.</span></span> <span data-ttu-id="0c586-543">詳細については、SQL Server Books Online を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-543">See SQL Server Books Online for more information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c586-544">次の例は、派生クラスを使用して<xref:System.Data.SqlClient.SqlDataAdapter>、入力を<xref:System.Data.DataSet>スキーマ、および返しますを持つ、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-544">The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataTable>.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="0c586-545">スキーマを挿入する <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-545">A <see cref="T:System.Data.DataSet" /> to insert the schema in.</span></span></param>
        <param name="schemaType"><span data-ttu-id="0c586-546">スキーマを挿入する方法を指定する <see cref="T:System.Data.SchemaType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="0c586-546">One of the <see cref="T:System.Data.SchemaType" /> values that specify how to insert the schema.</span></span></param>
        <param name="srcTable"><span data-ttu-id="0c586-547">テーブル マップに使用するソース テーブルの名前。</span><span class="sxs-lookup"><span data-stu-id="0c586-547">The name of the source table to use for table mapping.</span></span></param>
        <summary><span data-ttu-id="0c586-548">指定した <see cref="T:System.Data.DataTable" /> に <see cref="T:System.Data.DataSet" /> を追加し、指定した <see cref="T:System.Data.SchemaType" /> および <see cref="T:System.Data.DataTable" /> に基づいて、データ ソース内のスキーマと一致するようにスキーマを設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-548">Adds a <see cref="T:System.Data.DataTable" /> to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based upon the specified <see cref="T:System.Data.SchemaType" /> and <see cref="T:System.Data.DataTable" />.</span></span></summary>
        <returns><span data-ttu-id="0c586-549"><see cref="T:System.Data.DataTable" /> に追加された <see cref="T:System.Data.DataSet" /> オブジェクトのコレクションへの参照。</span><span class="sxs-lookup"><span data-stu-id="0c586-549">A reference to a collection of <see cref="T:System.Data.DataTable" /> objects that were added to the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-550">このメソッドを使用してデータ ソースからスキーマ情報を取得、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-550">This method retrieves the schema information from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</span></span>  
  
 <span data-ttu-id="0c586-551">A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作は追加、<xref:System.Data.DataTable>変換先に<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-551">A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-552">列を次に、追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>、次の構成と<xref:System.Data.DataColumn>プロパティ、データ ソースに存在する場合。</span><span class="sxs-lookup"><span data-stu-id="0c586-552">It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:</span></span>  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <span data-ttu-id="0c586-553"><xref:System.Data.DataColumn.AutoIncrement%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c586-553"><xref:System.Data.DataColumn.AutoIncrement%2A>.</span></span> <span data-ttu-id="0c586-554">設定する必要があります<xref:System.Data.DataColumn.AutoIncrementStep%2A>と<xref:System.Data.DataColumn.AutoIncrementSeed%2A>とは別にします。</span><span class="sxs-lookup"><span data-stu-id="0c586-554">You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.</span></span>  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <span data-ttu-id="0c586-555"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 構成も行います、<xref:System.Data.DataTable.PrimaryKey%2A>と<xref:System.Data.DataTable.Constraints%2A>に応じて、次の規則のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="0c586-555"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:</span></span>  
  
-   <span data-ttu-id="0c586-556">1 つまたは複数の主キー列がによって返される場合、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>の主キー列として使用される、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-556">If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
-   <span data-ttu-id="0c586-557">主キー列は返されませんが、一意の列は場合、は、場合にのみ、すべての一意の列は null 値非許容と場合、主キーとしての一意の列が使用されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-557">If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable.</span></span> <span data-ttu-id="0c586-558">任意の列は null を許容すると場合、<xref:System.Data.UniqueConstraint>に追加、 <xref:System.Data.ConstraintCollection>、ですが、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="0c586-558">If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.</span></span>  
  
-   <span data-ttu-id="0c586-559">主キー列としての主キー列が使用される主キー列と一意の列の両方が返される場合は、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-559">If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="0c586-560">主キーと一意の制約が追加することに注意してください、<xref:System.Data.ConstraintCollection>前述のルールがその他の制約に従って、型は追加されません。</span><span class="sxs-lookup"><span data-stu-id="0c586-560">Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.</span></span>  
  
 <span data-ttu-id="0c586-561">一意のクラスター化または SQL Server テーブルに複数の列にインデックスを定義し、主キー制約は、個別の列のセットで、クラスター化インデックス内の列の名前が返されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-561">If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.</span></span> <span data-ttu-id="0c586-562">主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。</span><span class="sxs-lookup"><span data-stu-id="0c586-562">To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.</span></span> <span data-ttu-id="0c586-563">クエリ ヒントを指定する方法の詳細については、次を参照してください。[クエリ ヒント (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-563">For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).</span></span>  
  
 <span data-ttu-id="0c586-564">主キーの情報が中に使用される<xref:System.Data.Common.DbDataAdapter.Fill%2A>を検索および指定されたキー列と一致するすべての行を置換します。</span><span class="sxs-lookup"><span data-stu-id="0c586-564">Primary key information is used during <xref:System.Data.Common.DbDataAdapter.Fill%2A> to find and replace any rows whose key columns match.</span></span> <span data-ttu-id="0c586-565">これは目的の動作ではない場合を使用して<xref:System.Data.Common.DbDataAdapter.Fill%2A>スキーマ情報を求められることがなくです。</span><span class="sxs-lookup"><span data-stu-id="0c586-565">If this is not the desired behavior, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> without requesting schema information.</span></span>  
  
 <span data-ttu-id="0c586-566">場合、<xref:System.Data.Common.DbDataAdapter>重複する列を設定中に検出すると、<xref:System.Data.DataTable>のパターンを使用して、後続の列名が生成されます"*columnname*1"、"*columnname*2「,」*columnname*3"のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-566">If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern "*columnname*1", "*columnname*2", "*columnname*3", and so on.</span></span> <span data-ttu-id="0c586-567">配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="0c586-567">If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="0c586-568">複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットは、個別のテーブルに配置されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-568">When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table.</span></span> <span data-ttu-id="0c586-569">追加の結果セットは整数値名を追加して、指定されたテーブル (たとえば、"Table"、"Table1"、"Table2"、およびなどです。) という名前です。</span><span class="sxs-lookup"><span data-stu-id="0c586-569">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on.).</span></span> <span data-ttu-id="0c586-570">列とテーブルの名前を使用してアプリケーションには、これらの名前付けパターンとの競合が発生しないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="0c586-570">Applications using column and table names should ensure that conflicts with these naming patterns does not occur.</span></span>  
  
 <span data-ttu-id="0c586-571"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>メソッドは、シナリオをサポートします。 ここで、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字小文字によってのみとは異なる名前を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-571">The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case.</span></span> <span data-ttu-id="0c586-572">このような状況で<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>は対応するテーブルを見つける大文字小文字を区別比較を実行し、完全一致が存在しない場合は、新しいテーブルを作成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-572">In such situations, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists.</span></span> <span data-ttu-id="0c586-573">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-573">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 <span data-ttu-id="0c586-574">場合<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されたと<xref:System.Data.DataSet>は 1 つだけ<xref:System.Data.DataTable>名前を持つ唯一の相違点の場合を<xref:System.Data.DataTable>は更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-574">If <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated.</span></span> <span data-ttu-id="0c586-575">このシナリオでは、比較では大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="0c586-575">In this scenario, the comparison is case insensitive.</span></span> <span data-ttu-id="0c586-576">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-576">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <span data-ttu-id="0c586-577"><xref:System.Data.IDbConnection> Select コマンドに関連付けられたオブジェクトが有効である必要がありますを開く必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0c586-577">The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to open.</span></span> <span data-ttu-id="0c586-578">場合、<xref:System.Data.IDbConnection>する前に閉じられた<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、そのはデータの取得に開かれた後終了します。</span><span class="sxs-lookup"><span data-stu-id="0c586-578">If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="0c586-579">接続が開いている場合の前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、それが開いたままにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-579">If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is left open.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-580">複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-580">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.</span></span> <span data-ttu-id="0c586-581">複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、 <xref:System.Data.MissingSchemaAction> 'éý'`AddWithKey`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-581">To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.</span></span>  
  
 <span data-ttu-id="0c586-582"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。</span><span class="sxs-lookup"><span data-stu-id="0c586-582">When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed.</span></span> <span data-ttu-id="0c586-583">SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-583">The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements.</span></span> <span data-ttu-id="0c586-584">詳細については、SQL Server Books Online を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-584">See SQL Server Books Online for more information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c586-585">次の例は、派生クラスを使用して<xref:System.Data.SqlClient.SqlDataAdapter>、入力を<xref:System.Data.DataSet>スキーマ、および返しますを持つ、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-585">The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0c586-586">スキーマの取得元のソース テーブルが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="0c586-586">A source table from which to get the schema could not be found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable"><span data-ttu-id="0c586-587">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-587">The <see cref="T:System.Data.DataTable" /> to be filled with the schema from the data source.</span></span></param>
        <param name="schemaType"><span data-ttu-id="0c586-588"><see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="0c586-588">One of the <see cref="T:System.Data.SchemaType" /> values.</span></span></param>
        <param name="command"><span data-ttu-id="0c586-589">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</span><span class="sxs-lookup"><span data-stu-id="0c586-589">The SQL SELECT statement used to retrieve rows from the data source.</span></span></param>
        <param name="behavior"><span data-ttu-id="0c586-590"><see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="0c586-590">One of the <see cref="T:System.Data.CommandBehavior" /> values.</span></span></param>
        <summary><span data-ttu-id="0c586-591">指定した <see cref="T:System.Data.DataTable" />、コマンド文字列、および <see cref="T:System.Data.SchemaType" /> 値に基づいて、指定した <see cref="T:System.Data.CommandBehavior" /> のスキーマを設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-591">Configures the schema of the specified <see cref="T:System.Data.DataTable" /> based on the specified <see cref="T:System.Data.SchemaType" />, command string, and <see cref="T:System.Data.CommandBehavior" /> values.</span></span></summary>
        <returns><span data-ttu-id="0c586-592">データ ソースから返されたスキーマ情報が格納された <see cref="T:System.Data.DataTable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-592">A of <see cref="T:System.Data.DataTable" /> object that contains schema information returned from the data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-593"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>メソッドを使用してデータ ソースからスキーマを取得、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-593">The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</span></span> <span data-ttu-id="0c586-594">接続オブジェクトに関連付けられている、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>有効である必要がありますを開く必要はありませんが、します。</span><span class="sxs-lookup"><span data-stu-id="0c586-594">The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open.</span></span> <span data-ttu-id="0c586-595">前に、接続が閉じられた場合<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、そのはデータの取得に開かれた後終了します。</span><span class="sxs-lookup"><span data-stu-id="0c586-595">If the connection is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="0c586-596">接続が開いている場合の前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-596">If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="0c586-597">A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作は追加、<xref:System.Data.DataTable>変換先に<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-597">A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-598">列を次に、追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>、次の構成と<xref:System.Data.DataColumn>プロパティ、データ ソースに存在する場合。</span><span class="sxs-lookup"><span data-stu-id="0c586-598">It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:</span></span>  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <span data-ttu-id="0c586-599"><xref:System.Data.DataColumn.AutoIncrement%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c586-599"><xref:System.Data.DataColumn.AutoIncrement%2A>.</span></span> <span data-ttu-id="0c586-600">設定する必要があります<xref:System.Data.DataColumn.AutoIncrementStep%2A>と<xref:System.Data.DataColumn.AutoIncrementSeed%2A>とは別にします。</span><span class="sxs-lookup"><span data-stu-id="0c586-600">You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.</span></span>  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <span data-ttu-id="0c586-601"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 構成も行います、<xref:System.Data.DataTable.PrimaryKey%2A>と<xref:System.Data.DataTable.Constraints%2A>に応じて、次の規則のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="0c586-601"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:</span></span>  
  
-   <span data-ttu-id="0c586-602">1 つまたは複数の主キー列がによって返される場合、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>の主キー列として使用される、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-602">If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
-   <span data-ttu-id="0c586-603">主キー列は返されませんが、一意の列は場合、は、場合にのみ、すべての一意の列は null 値非許容と場合、主キーとしての一意の列が使用されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-603">If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable.</span></span> <span data-ttu-id="0c586-604">任意の列は null を許容すると場合、<xref:System.Data.UniqueConstraint>に追加、 <xref:System.Data.ConstraintCollection>、ですが、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="0c586-604">If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.</span></span>  
  
-   <span data-ttu-id="0c586-605">主キー列としての主キー列が使用される主キー列と一意の列の両方が返される場合は、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-605">If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="0c586-606">主キーと一意の制約が追加することに注意してください、<xref:System.Data.ConstraintCollection>前述のルールがその他の制約に従って、型は追加されません。</span><span class="sxs-lookup"><span data-stu-id="0c586-606">Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.</span></span>  
  
 <span data-ttu-id="0c586-607">一意のクラスター化または SQL Server テーブルに複数の列にインデックスを定義し、主キー制約は、個別の列のセットで、クラスター化インデックス内の列の名前が返されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-607">If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.</span></span> <span data-ttu-id="0c586-608">主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。</span><span class="sxs-lookup"><span data-stu-id="0c586-608">To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.</span></span> <span data-ttu-id="0c586-609">クエリ ヒントを指定する方法の詳細については、次を参照してください。[クエリ ヒント (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-609">For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).</span></span>  
  
 <span data-ttu-id="0c586-610">場合、<xref:System.Data.IDataAdapter>重複する列を設定中に検出すると、<xref:System.Data.DataTable>のパターンを使用して、後続の列名が生成されます"*columnname*1"、"*columnname*2「,」*columnname*3"のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-610">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern "*columnname*1", "*columnname*2", "*columnname*3", and so on.</span></span> <span data-ttu-id="0c586-611">配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="0c586-611">If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="0c586-612">複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットは、個別のテーブルに配置されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-612">When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table.</span></span> <span data-ttu-id="0c586-613">追加の結果セットは整数値名を追加して、指定されたテーブル (たとえば、"Table"、"Table1"、"Table2"、およびなどです。) という名前です。</span><span class="sxs-lookup"><span data-stu-id="0c586-613">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on.).</span></span> <span data-ttu-id="0c586-614">列とテーブルの名前を使用してアプリケーションには、これらの名前付けパターンとの競合が発生しないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="0c586-614">Applications using column and table names should ensure that conflicts with these naming patterns does not occur.</span></span>  
  
 <span data-ttu-id="0c586-615"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> すべての行は返しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-615"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> does not return any rows.</span></span> <span data-ttu-id="0c586-616">使用して、<xref:System.Data.Common.DbDataAdapter.Fill%2A>行を追加する方法、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-616">Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-617">複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-617">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.</span></span> <span data-ttu-id="0c586-618">複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、 <xref:System.Data.MissingSchemaAction> 'éý'`AddWithKey`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-618">To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.</span></span>  
  
 <span data-ttu-id="0c586-619"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。</span><span class="sxs-lookup"><span data-stu-id="0c586-619">When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed.</span></span> <span data-ttu-id="0c586-620">SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-620">The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements.</span></span> <span data-ttu-id="0c586-621">詳細については、SQL Server Books Online を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-621">See SQL Server Books Online for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-622">この実装、<see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />メソッドが保護されており、.NET Framework データ プロバイダーで使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="0c586-622">This implementation of the <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> method is protected and is designed for use by a .NET Framework data provider.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, string srcTable, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::String ^ srcTable, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="0c586-623">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-623">The <see cref="T:System.Data.DataSet" /> to be filled with the schema from the data source.</span></span></param>
        <param name="schemaType"><span data-ttu-id="0c586-624"><see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="0c586-624">One of the <see cref="T:System.Data.SchemaType" /> values.</span></span></param>
        <param name="command"><span data-ttu-id="0c586-625">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</span><span class="sxs-lookup"><span data-stu-id="0c586-625">The SQL SELECT statement used to retrieve rows from the data source.</span></span></param>
        <param name="srcTable"><span data-ttu-id="0c586-626">テーブル マップに使用するソース テーブルの名前。</span><span class="sxs-lookup"><span data-stu-id="0c586-626">The name of the source table to use for table mapping.</span></span></param>
        <param name="behavior"><span data-ttu-id="0c586-627"><see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="0c586-627">One of the <see cref="T:System.Data.CommandBehavior" /> values.</span></span></param>
        <summary><span data-ttu-id="0c586-628">指定した <see cref="T:System.Data.DataTable" /> に <see cref="T:System.Data.DataSet" /> を追加し、指定した <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソース内のスキーマと一致するようにスキーマを設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-628">Adds a <see cref="T:System.Data.DataTable" /> to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based on the specified <see cref="T:System.Data.SchemaType" />.</span></span></summary>
        <returns><span data-ttu-id="0c586-629">データ ソースから返されたスキーマ情報が格納された、<see cref="T:System.Data.DataTable" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="0c586-629">An array of <see cref="T:System.Data.DataTable" /> objects that contain schema information returned from the data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-630"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>メソッドを使用してデータ ソースからスキーマを取得、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-630">The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</span></span> <span data-ttu-id="0c586-631">接続オブジェクトに関連付けられている、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>有効である必要がありますを開く必要はありませんが、します。</span><span class="sxs-lookup"><span data-stu-id="0c586-631">The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open.</span></span> <span data-ttu-id="0c586-632">前に、接続が閉じられた場合<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、そのはデータの取得に開かれた後終了します。</span><span class="sxs-lookup"><span data-stu-id="0c586-632">If the connection is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="0c586-633">接続が開いている場合の前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されると、未処理のままにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-633">If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="0c586-634">A<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作は追加、<xref:System.Data.DataTable>変換先に<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-634">A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-635">列を次に、追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>、次の構成と<xref:System.Data.DataColumn>プロパティ、データ ソースに存在する場合。</span><span class="sxs-lookup"><span data-stu-id="0c586-635">It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:</span></span>  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <span data-ttu-id="0c586-636"><xref:System.Data.DataColumn.AutoIncrement%2A>。</span><span class="sxs-lookup"><span data-stu-id="0c586-636"><xref:System.Data.DataColumn.AutoIncrement%2A>.</span></span> <span data-ttu-id="0c586-637">設定する必要があります<xref:System.Data.DataColumn.AutoIncrementStep%2A>と<xref:System.Data.DataColumn.AutoIncrementSeed%2A>とは別にします。</span><span class="sxs-lookup"><span data-stu-id="0c586-637">You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.</span></span>  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <span data-ttu-id="0c586-638"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 構成も行います、<xref:System.Data.DataTable.PrimaryKey%2A>と<xref:System.Data.DataTable.Constraints%2A>に応じて、次の規則のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="0c586-638"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:</span></span>  
  
-   <span data-ttu-id="0c586-639">1 つまたは複数の主キー列がによって返される場合、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>の主キー列として使用される、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-639">If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
-   <span data-ttu-id="0c586-640">主キー列は返されませんが、一意の列は場合、は、場合にのみ、すべての一意の列は null 値非許容と場合、主キーとしての一意の列が使用されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-640">If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable.</span></span> <span data-ttu-id="0c586-641">任意の列は null を許容すると場合、<xref:System.Data.UniqueConstraint>に追加、 <xref:System.Data.ConstraintCollection>、ですが、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="0c586-641">If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.</span></span>  
  
-   <span data-ttu-id="0c586-642">主キー列としての主キー列が使用される主キー列と一意の列の両方が返される場合は、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-642">If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="0c586-643">主キーと一意の制約が追加することに注意してください、<xref:System.Data.ConstraintCollection>前述のルールがその他の制約に従って、型は追加されません。</span><span class="sxs-lookup"><span data-stu-id="0c586-643">Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.</span></span>  
  
 <span data-ttu-id="0c586-644">一意のクラスター化または SQL Server テーブルに複数の列にインデックスを定義し、主キー制約は、個別の列のセットで、クラスター化インデックス内の列の名前が返されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-644">If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.</span></span> <span data-ttu-id="0c586-645">主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。</span><span class="sxs-lookup"><span data-stu-id="0c586-645">To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.</span></span> <span data-ttu-id="0c586-646">クエリ ヒントを指定する方法の詳細については、次を参照してください。[クエリ ヒント (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-646">For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).</span></span>  
  
 <span data-ttu-id="0c586-647">場合、<xref:System.Data.IDataAdapter>重複する列を設定中に検出すると、<xref:System.Data.DataTable>のパターンを使用して、後続の列名が生成されます"*columnname*1"、"*columnname*2「,」*columnname*3"のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-647">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern "*columnname*1", "*columnname*2", "*columnname*3", and so on.</span></span> <span data-ttu-id="0c586-648">配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン"Column1"、"Column2"などです。</span><span class="sxs-lookup"><span data-stu-id="0c586-648">If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="0c586-649">複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットは、個別のテーブルに配置されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-649">When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table.</span></span> <span data-ttu-id="0c586-650">追加の結果セットは整数値名を追加して、指定されたテーブル (たとえば、"Table"、"Table1"、"Table2"、およびなどです。) という名前です。</span><span class="sxs-lookup"><span data-stu-id="0c586-650">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on.).</span></span> <span data-ttu-id="0c586-651">列とテーブルの名前を使用してアプリケーションには、これらの名前付けパターンとの競合が発生しないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="0c586-651">Applications using column and table names should ensure that conflicts with these naming patterns does not occur.</span></span>  
  
 <span data-ttu-id="0c586-652"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>メソッドは、シナリオをサポートします。 ここで、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字小文字によってのみとは異なる名前を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-652">The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case.</span></span> <span data-ttu-id="0c586-653">このような状況で<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>は対応するテーブルを見つける大文字小文字を区別比較を実行し、完全一致が存在しない場合は、新しいテーブルを作成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-653">In such situations, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists.</span></span> <span data-ttu-id="0c586-654">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-654">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 <span data-ttu-id="0c586-655">場合<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が呼び出されたと<xref:System.Data.DataSet>は 1 つだけ<xref:System.Data.DataTable>名前を持つ唯一の相違点の場合を<xref:System.Data.DataTable>は更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-655">If <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated.</span></span> <span data-ttu-id="0c586-656">このシナリオでは、比較では大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="0c586-656">In this scenario, the comparison is case insensitive.</span></span> <span data-ttu-id="0c586-657">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-657">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <span data-ttu-id="0c586-658"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> すべての行は返しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-658"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> does not return any rows.</span></span> <span data-ttu-id="0c586-659">使用して、<xref:System.Data.Common.DbDataAdapter.Fill%2A>行を追加する方法、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-659">Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-660">複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-660">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.</span></span> <span data-ttu-id="0c586-661">複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、 <xref:System.Data.MissingSchemaAction> 'éý'`AddWithKey`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-661">To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.</span></span>  
  
 <span data-ttu-id="0c586-662"><xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。</span><span class="sxs-lookup"><span data-stu-id="0c586-662">When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed.</span></span> <span data-ttu-id="0c586-663">SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-663">The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements.</span></span> <span data-ttu-id="0c586-664">詳細については、SQL Server Books Online を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-664">See SQL Server Books Online for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-665">この実装、<see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />メソッドが保護されており、.NET Framework データ プロバイダーで使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="0c586-665">This implementation of the <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> method is protected and is designed for use by a .NET Framework data provider.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="parameterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier"><span data-ttu-id="0c586-666">パラメーターを取得するコマンドのインデックス。</span><span class="sxs-lookup"><span data-stu-id="0c586-666">The index of the command to retrieve the parameter from.</span></span></param>
        <param name="parameterIndex"><span data-ttu-id="0c586-667">コマンド内のパラメーターのインデックス。</span><span class="sxs-lookup"><span data-stu-id="0c586-667">The index of the parameter within the command.</span></span></param>
        <summary><span data-ttu-id="0c586-668">現在のバッチのコマンドの 1 つから <see cref="T:System.Data.IDataParameter" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="0c586-668">Returns a <see cref="T:System.Data.IDataParameter" /> from one of the commands in the current batch.</span></span></summary>
        <returns><span data-ttu-id="0c586-669">指定された <see cref="T:System.Data.IDataParameter" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-669">The <see cref="T:System.Data.IDataParameter" /> specified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-670"><xref:System.Data.Common.DbDataAdapter>、このメソッドはスロー<xref:System.NotSupportedException>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-670">In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="0c586-671">継承するクラス<xref:System.Data.Common.DbDataAdapter>バッチのサポートを提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0c586-671">Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0c586-672">アダプターでバッチがサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0c586-672">The adapter does not support batches.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-673">このメソッドは、保護されている、.NET Framework データ プロバイダーで使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="0c586-673">This method is protected and is designed for use by a .NET Framework data provider.</span></span>  
  
 <span data-ttu-id="0c586-674">継承するクラス<see cref="T:System.Data.Common.DbDataAdapter" />クラスが、バッチを実行できるようにするには、このメソッドをオーバーライドするバッチをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="0c586-674">If a class that inherits from <see cref="T:System.Data.Common.DbDataAdapter" /> supports batches, that class overrides this method to allow users to execute a batch.</span></span> <span data-ttu-id="0c586-675">実装を使用して、<paramref name="commandIdentifier" />を検索、要求されたコマンドを提供し、使用して、<paramref name="parameterIndex" />要求されたパラメーターを提供します。</span><span class="sxs-lookup"><span data-stu-id="0c586-675">An implementation uses the <paramref name="commandIdentifier" /> provided to locate the requested command, then uses the <paramref name="parameterIndex" /> provided to locate the requested parameter.</span></span> <span data-ttu-id="0c586-676">たとえば、 <paramref name="commandIdentifier" /> 0 と<paramref name="parameterIndex" />0 のバッチの最初のコマンドから、最初のパラメーターを返します。</span><span class="sxs-lookup"><span data-stu-id="0c586-676">For example, a <paramref name="commandIdentifier" /> of 0 and a <paramref name="parameterIndex" /> of 0 returns the first parameter from the first command in the batch.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="recordsAffected" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="error" Type="System.Exception&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier"><span data-ttu-id="0c586-677">バッチ内の個々のコマンドの、0 から始まる列の序数。</span><span class="sxs-lookup"><span data-stu-id="0c586-677">The zero-based column ordinal of the individual command within the batch.</span></span></param>
        <param name="recordsAffected"><span data-ttu-id="0c586-678">バッチ内に指定されたコマンドの影響を受ける、データ ストア内の行数。</span><span class="sxs-lookup"><span data-stu-id="0c586-678">The number of rows affected in the data store by the specified command within the batch.</span></span></param>
        <param name="error"><span data-ttu-id="0c586-679">指定されたコマンドの実行中にスローされた <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-679">An <see cref="T:System.Exception" /> thrown during execution of the specified command.</span></span> <span data-ttu-id="0c586-680">例外がスローされなかった場合は、<see langword="null" /> (Visual Basic では <see langword="Nothing" />) を返します。</span><span class="sxs-lookup"><span data-stu-id="0c586-680">Returns <see langword="null" /> (<see langword="Nothing" /> in Visual Basic) if no exception is thrown.</span></span></param>
        <summary><span data-ttu-id="0c586-681">バッチ更新内の、個々の更新の試行に関する情報を返します。</span><span class="sxs-lookup"><span data-stu-id="0c586-681">Returns information about an individual update attempt within a larger batched update.</span></span></summary>
        <returns><span data-ttu-id="0c586-682">バッチ更新内の、個々の更新の試行に関する情報。</span><span class="sxs-lookup"><span data-stu-id="0c586-682">Information about an individual update attempt within a larger batched update.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-683">バッチ更新ロジックをサポートするデータ プロバイダーはで、一連の仮想メソッドをオーバーライドする必要があります、<xref:System.Data.Common.DbDataAdapter>クラスです。</span><span class="sxs-lookup"><span data-stu-id="0c586-683">Data providers that support batched updating logic must override a series of virtual methods on the <xref:System.Data.Common.DbDataAdapter> class.</span></span> <span data-ttu-id="0c586-684">`GetBatchedRecordsAffected` これらの仮想メソッドのいずれかを表します。</span><span class="sxs-lookup"><span data-stu-id="0c586-684">`GetBatchedRecordsAffected` represents one of those virtual methods.</span></span> <span data-ttu-id="0c586-685">`DbDataAdapter`に依存している`GetBatchedRecordsAffected`をそれぞれ対応する、マークを付けることができますので、バッチ内で個々 の更新の試行の成否を決定<xref:System.Data.DataRow>それに従っています。</span><span class="sxs-lookup"><span data-stu-id="0c586-685">The `DbDataAdapter` class relies on `GetBatchedRecordsAffected` to determine the success or failure of individual update attempts within a batch so it can mark each corresponding <xref:System.Data.DataRow> accordingly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public override System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0c586-686">SQL SELECT ステートメントの実行時にユーザーが設定したパラメーターを取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-686">Gets the parameters set by the user when executing an SQL SELECT statement.</span></span></summary>
        <returns><span data-ttu-id="0c586-687">ユーザーが設定したパラメーターが格納された <see cref="T:System.Data.IDataParameter" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="0c586-687">An array of <see cref="T:System.Data.IDataParameter" /> objects that contains the parameters set by the user.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected virtual void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeBatching();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0c586-688"><see cref="T:System.Data.Common.DbDataAdapter" /> のバッチ処理を初期化します。</span><span class="sxs-lookup"><span data-stu-id="0c586-688">Initializes batching for the <see cref="T:System.Data.Common.DbDataAdapter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-689"><xref:System.Data.Common.DbDataAdapter>、このメソッドはスロー<xref:System.NotSupportedException>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-689">In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="0c586-690">継承するクラス<xref:System.Data.Common.DbDataAdapter>バッチのサポートを提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0c586-690">Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0c586-691">アダプターでバッチがサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0c586-691">The adapter does not support batches.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-692">このメソッドは、保護されている、.NET Framework データ プロバイダーで使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="0c586-692">This method is protected and is designed for use by a .NET Framework data provider.</span></span>  
  
 <span data-ttu-id="0c586-693">継承するクラス<see cref="T:System.Data.Common.DbDataAdapter" />クラスがこのメソッドをオーバーライドするバッチをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="0c586-693">If a class that inherits from <see cref="T:System.Data.Common.DbDataAdapter" /> supports batches, that class overrides this method.</span></span> <span data-ttu-id="0c586-694">このメソッドが、クラス、バッチ処理をサポートするために必要なリソースを初期化できます。</span><span class="sxs-lookup"><span data-stu-id="0c586-694">This method gives the class the opportunity to initialize any resources necessary to support batching.</span></span> <span data-ttu-id="0c586-695">たとえば、クラスはバッチ内のコマンドのセットを保持するデータ構造を割り当てる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-695">For example, a class may allocate a data structure to hold the set of commands in the batch.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ InsertCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c586-696">データ ソースに新しいレコードを挿入するコマンドを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-696">Gets or sets a command used to insert new records into the data source.</span></span></summary>
        <value><span data-ttu-id="0c586-697">データ セット内の新しい行に対応するデータ ソース内のレコードを挿入するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-697">A <see cref="T:System.Data.IDbCommand" /> used during <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> to insert records in the data source for new rows in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-698">中に<xref:System.Data.Common.DbDataAdapter.Update%2A>、このプロパティを設定しないと、主キー情報が内に存在する場合、 <xref:System.Data.DataSet>、<xref:System.Data.IDbDataAdapter.InsertCommand%2A>が自動的に生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-698">During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.InsertCommand%2A> will be automatically generated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c586-699">次の例は、派生クラスを作成<xref:System.Data.OleDb.OleDbDataAdapter>し、一部のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-699">The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdated (value As RowUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="0c586-700">イベント データを格納している <see cref="T:System.Data.Common.RowUpdatedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-700">A <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0c586-701">.NET Framework データ プロバイダーの <see langword="RowUpdated" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="0c586-701">Raises the <see langword="RowUpdated" /> event of a .NET Framework data provider.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-702">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-702">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="0c586-703">概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-703">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-704">オーバーライドする場合<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0c586-704">When overriding <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> method.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdating (value As RowUpdatingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="0c586-705">イベント データを格納している <see cref="T:System.Data.Common.RowUpdatingEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-705">An <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="0c586-706">.NET Framework データ プロバイダーの <see langword="RowUpdating" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="0c586-706">Raises the <see langword="RowUpdating" /> event of a .NET Framework data provider.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-707">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-707">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="0c586-708">概要については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-708">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-709">オーバーライドする場合<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />派生クラスでは、基底クラスの呼び出しを必ず<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0c586-709">When overriding <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> in a derived class, be sure to call the bases class's <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> method.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ SelectCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c586-710">データ ソース内のレコードを選択するコマンドを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-710">Gets or sets a command used to select records in the data source.</span></span></summary>
        <value><span data-ttu-id="0c586-711">データ セットに挿入するレコードをデータ ソースから選択するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-711">A <see cref="T:System.Data.IDbCommand" /> that is used during <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> to select records from data source for placement in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0c586-712">次の例は、派生クラスを作成<xref:System.Data.OleDb.OleDbDataAdapter>し、一部のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-712">The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c586-713">データ セットからレコードを削除する SQL ステートメントを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-713">Gets or sets an SQL statement for deleting records from the data set.</span></span></summary>
        <value><span data-ttu-id="0c586-714"><see cref="T:System.Data.IDbCommand" /> 中に、データ セット内の削除された行に対応するデータ ソース内のレコードを削除するために使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-714">An <see cref="T:System.Data.IDbCommand" /> used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to delete records in the data source for deleted rows in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-715">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0c586-715">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0c586-716">これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0c586-716">It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.</span></span>  
  
 <span data-ttu-id="0c586-717">詳細については、「<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-717">For more information, see <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c586-718">データ ソースに新しいレコードを挿入する SQL ステートメントを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-718">Gets or sets an SQL statement used to insert new records into the data source.</span></span></summary>
        <value><span data-ttu-id="0c586-719">データ セット内の新しい行に対応するデータ ソース内のレコードを挿入するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-719">An <see cref="T:System.Data.IDbCommand" /> used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to insert records in the data source for new rows in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-720">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0c586-720">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0c586-721">これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0c586-721">It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.</span></span>  
  
 <span data-ttu-id="0c586-722">詳細については、「<xref:System.Data.IDbDataAdapter.InsertCommand%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-722">For more information, see <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c586-723">データ ソース内のレコードを選択する SQL ステートメントを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-723">Gets or sets an SQL statement used to select records in the data source.</span></span></summary>
        <value><span data-ttu-id="0c586-724">データ セットに挿入するレコードをデータ ソースから選択するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-724">An <see cref="T:System.Data.IDbCommand" /> that is used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to select records from data source for placement in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-725">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0c586-725">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0c586-726">これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0c586-726">It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.</span></span>  
  
 <span data-ttu-id="0c586-727">詳細については、「<xref:System.Data.IDbDataAdapter.SelectCommand%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-727">For more information, see <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c586-728">データ ソース内のレコードを更新する SQL ステートメントを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-728">Gets or sets an SQL statement used to update records in the data source.</span></span></summary>
        <value><span data-ttu-id="0c586-729">データ セット内の変更された行に対応するデータ ソース内のレコードを更新するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-729">An <see cref="T:System.Data.IDbCommand" /> used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to update records in the data source for modified rows in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-730">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0c586-730">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0c586-731">これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0c586-731">It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.</span></span>  
  
 <span data-ttu-id="0c586-732">詳細については、「<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-732">For more information, see <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0c586-733">現在のインスタンスのコピーである新しいオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-733">Creates a new object that is a copy of the current instance.</span></span></summary>
        <returns><span data-ttu-id="0c586-734">このインスタンスのコピーである新しいオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-734">A new object that is a copy of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-735">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="0c586-735">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0c586-736">これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.ICloneable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="0c586-736">It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.ICloneable> interface.</span></span>  
  
 <span data-ttu-id="0c586-737">詳細については、「<xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0c586-737">For more information, see <xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected virtual void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TerminateBatching();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0c586-738"><see cref="T:System.Data.Common.DbDataAdapter" /> のバッチ処理を終了します。</span><span class="sxs-lookup"><span data-stu-id="0c586-738">Ends batching for the <see cref="T:System.Data.Common.DbDataAdapter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-739"><xref:System.Data.Common.DbDataAdapter>、このメソッドはスロー<xref:System.NotSupportedException>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-739">In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="0c586-740">継承するクラス<xref:System.Data.Common.DbDataAdapter>バッチのサポートを提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="0c586-740">Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0c586-741">アダプターでバッチがサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="0c586-741">The adapter does not support batches.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="0c586-742">このメソッドは、保護されている、.NET Framework データ プロバイダーで使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="0c586-742">This method is protected and is designed for use by a .NET Framework data provider.</span></span>  
  
 <span data-ttu-id="0c586-743">継承するクラス<see cref="T:System.Data.Common.DbDataAdapter" />クラスがこのメソッドをオーバーライドするバッチをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="0c586-743">If a class that inherits from <see cref="T:System.Data.Common.DbDataAdapter" /> supports batches, that class overrides this method.</span></span> <span data-ttu-id="0c586-744">このメソッドは、クラスにバッチ処理をサポートするために割り当てられているリソースを破棄する機会を与えます。</span><span class="sxs-lookup"><span data-stu-id="0c586-744">This method gives the class the opportunity to dispose of any resources allocated to support batching.</span></span> <span data-ttu-id="0c586-745">たとえば、クラスのバッチ内のコマンドを保持するデータ構造割り当てを解除可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-745">For example, the class may deallocate the data structure that holds the commands in the batch.</span></span></para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Update">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0c586-746"><see cref="T:System.Data.DataSet" /> での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-746">Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataRow[] dataRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataRows As DataRow()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="dataRows"><span data-ttu-id="0c586-747">データ ソースの更新に使用する <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="0c586-747">An array of <see cref="T:System.Data.DataRow" /> objects used to update the data source.</span></span></param>
        <summary><span data-ttu-id="0c586-748">指定した <see cref="T:System.Data.DataSet" /> 内の配列での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-748">Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="0c586-749"><see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</span><span class="sxs-lookup"><span data-stu-id="0c586-749">The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-750">アプリケーションを呼び出すと、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッド、<xref:System.Data.Common.DbDataAdapter>を調べ、<xref:System.Data.DataRow.RowState%2A>プロパティで構成されているインデックスの順序に基づいて、各行の繰り返し、必要な INSERT、UPDATE、または DELETE ステートメントを実行し、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-750">When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-751">たとえば、<xref:System.Data.Common.DbDataAdapter.Update%2A>の後に、INSERT ステートメントとし、もう 1 つの DELETE ステートメントでは、期限内の行の順序付けに、DELETE ステートメントを実行する可能性があります、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-751">For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="0c586-752">これらのステートメントは、バッチ処理としては実行されないことに注意してください。各行が個別に更新されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-752">It should be noted that these statements are not performed as a batch process; each row is updated individually.</span></span> <span data-ttu-id="0c586-753">アプリケーションが呼び出すことができます、<xref:System.Data.DataSet.GetChanges%2A>とき (たとえば、更新する前に挿入) のステートメントの種類のシーケンスを制御する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-753">An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs).</span></span> <span data-ttu-id="0c586-754">詳細については、次を参照してください。 [Dataadapter によるデータ ソースを更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-754">For more information, see [Updating Data Sources with DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).</span></span>  
  
 <span data-ttu-id="0c586-755">かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドが例外を生成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-755">If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception.</span></span> <span data-ttu-id="0c586-756">ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>または<xref:System.Data.OleDb.OleDbCommandBuilder>設定した場合、SQL ステートメントの 1 つのテーブルの更新プログラムを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c586-756">However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider.</span></span> <span data-ttu-id="0c586-757">次に、追加の SQL ステートメントを設定しないことがによって生成される、 **CommandBuilder**です。</span><span class="sxs-lookup"><span data-stu-id="0c586-757">Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**.</span></span> <span data-ttu-id="0c586-758">この生成ロジックで内に存在するキー列について、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-758">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-759">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-759">For more information see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="0c586-760"><xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは、更新プログラムを実行する前に最初のマッピングに示されたテーブルから行を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-760">The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update.</span></span> <span data-ttu-id="0c586-761"><xref:System.Data.Common.DbDataAdapter.Update%2A>の値を使用して行を更新、<xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c586-761">The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property.</span></span> <span data-ttu-id="0c586-762">返されるその他の行は無視されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-762">Any additional rows returned are ignored.</span></span>  
  
 <span data-ttu-id="0c586-763">すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントを発生すると、ユーザーが、調整を検査できるように<xref:System.Data.DataSet>行とその出力、コマンドによって返されるパラメーター。</span><span class="sxs-lookup"><span data-stu-id="0c586-763">After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command.</span></span> <span data-ttu-id="0c586-764">行が正常に更新される、その行に対する変更が受け入れられます。</span><span class="sxs-lookup"><span data-stu-id="0c586-764">After a row updates successfully, the changes to that row are accepted.</span></span>  
  
 <span data-ttu-id="0c586-765">使用する場合<xref:System.Data.Common.DbDataAdapter.Update%2A>実行の順序は、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-765">When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:</span></span>  
  
1.  <span data-ttu-id="0c586-766">内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-766">The values in the <xref:System.Data.DataRow> are moved to the parameter values.</span></span>  
  
2.  <span data-ttu-id="0c586-767"><xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-767">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.</span></span>  
  
3.  <span data-ttu-id="0c586-768">コマンドを実行します。</span><span class="sxs-lookup"><span data-stu-id="0c586-768">The command executes.</span></span>  
  
4.  <span data-ttu-id="0c586-769">コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果に格納、<xref:System.Data.DataRow>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-769">If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>.</span></span>  
  
5.  <span data-ttu-id="0c586-770">配置される出力パラメーターがある場合、<xref:System.Data.DataRow>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-770">If there are output parameters, they are placed in the <xref:System.Data.DataRow>.</span></span>  
  
6.  <span data-ttu-id="0c586-771"><xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-771">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.</span></span>  
  
7.  <span data-ttu-id="0c586-772"><xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。</span><span class="sxs-lookup"><span data-stu-id="0c586-772"><xref:System.Data.DataRow.AcceptChanges%2A> is called.</span></span>  
  
 <span data-ttu-id="0c586-773">各コマンドに関連付けられている、<xref:System.Data.Common.DbDataAdapter>関連付けられているパラメーターのコレクションを持ちます。</span><span class="sxs-lookup"><span data-stu-id="0c586-773">Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it.</span></span> <span data-ttu-id="0c586-774">パラメーターを使用して、現在行にマップされます、`SourceColumn`と`SourceVersion`の .NET Framework データ プロバイダーのプロパティ`Parameter`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0c586-774">Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class.</span></span> <span data-ttu-id="0c586-775">`SourceColumn` 指す、<xref:System.Data.DataTable>列を<xref:System.Data.Common.DbDataAdapter>参照を現在の行のパラメーターの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-775">`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.</span></span>  
  
 <span data-ttu-id="0c586-776">`SourceColumn` すべてのテーブル マップを適用する前に、マップされていない列の名前を指します。</span><span class="sxs-lookup"><span data-stu-id="0c586-776">`SourceColumn` refers to the unmapped column name before any table mappings have been applied.</span></span> <span data-ttu-id="0c586-777">場合`SourceColumn`は存在しない列に実行されるアクションは、次のいずれかに依存<xref:System.Data.MissingMappingAction>値。</span><span class="sxs-lookup"><span data-stu-id="0c586-777">If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.</span></span>  
  
|<span data-ttu-id="0c586-778">列挙値</span><span class="sxs-lookup"><span data-stu-id="0c586-778">Enumeration value</span></span>|<span data-ttu-id="0c586-779">実行されるアクション</span><span class="sxs-lookup"><span data-stu-id="0c586-779">Action taken</span></span>|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|<span data-ttu-id="0c586-780">ソース列の名前とテーブル名を使用して、<xref:System.Data.DataSet>マッピングが存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="0c586-780">Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.</span></span>|  
|`MissingMappingAction.Ignore`|<span data-ttu-id="0c586-781">A<xref:System.SystemException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-781">A <xref:System.SystemException> is generated.</span></span> <span data-ttu-id="0c586-782">マッピングが明示的に設定されている入力パラメーターのマッピングが欠落は、通常、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-782">When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.</span></span>|  
|`MissingMappingAction.Error`|<span data-ttu-id="0c586-783">A<xref:System.SystemException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-783">A <xref:System.SystemException> is generated.</span></span>|  
  
 <span data-ttu-id="0c586-784">`SourceColumn`出力の値をマップするプロパティを使用しても、または入力/出力パラメーターにバックアップ、`DataSet`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-784">The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`.</span></span> <span data-ttu-id="0c586-785">存在しない列を参照する場合、例外が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-785">An exception is generated if it refers to a nonexistent column.</span></span>  
  
 <span data-ttu-id="0c586-786">`SourceVersion`の .NET Framework データ プロバイダーのプロパティ`Parameter`クラスは、列の値の元の現在、または提案済みバージョンを使用するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-786">The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value.</span></span> <span data-ttu-id="0c586-787">この機能は、オプティミスティック同時実行制御違反をチェックする UPDATE ステートメントの WHERE 句に元の値を含めるによく使用されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-787">This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-788">行の更新中にエラーが発生した場合は、例外がスローされ、更新プログラムの実行は廃止されました。</span><span class="sxs-lookup"><span data-stu-id="0c586-788">If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.</span></span> <span data-ttu-id="0c586-789">エラーが発生したときに例外を生成せず、更新操作を続行するには設定、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>プロパティを`true`呼び出す前に<xref:System.Data.Common.DbDataAdapter.Update%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-789">To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>.</span></span> <span data-ttu-id="0c586-790">内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベントです。</span><span class="sxs-lookup"><span data-stu-id="0c586-790">You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter.</span></span> <span data-ttu-id="0c586-791">内で例外を生成せず、更新操作を続行する、`RowUpdated`イベント、設定、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>のプロパティ、<xref:System.Data.Common.RowUpdatedEventArgs>に<xref:System.Data.UpdateStatus.Continue>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-791">To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus.Continue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c586-792">次の例は、派生クラスを使用して<xref:System.Data.OleDb.OleDbDataAdapter>、データ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-792">The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0c586-793"><see cref="T:System.Data.DataSet" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-793">The <see cref="T:System.Data.DataSet" /> is invalid.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0c586-794">ソース テーブルが無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-794">The source table is invalid.</span></span></exception>
        <exception cref="T:System.SystemException"><span data-ttu-id="0c586-795">更新する <see cref="T:System.Data.DataRow" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-795">No <see cref="T:System.Data.DataRow" /> exists to update.</span></span>  
  
 <span data-ttu-id="0c586-796">- または -</span><span class="sxs-lookup"><span data-stu-id="0c586-796">-or-</span></span>  
  
 <span data-ttu-id="0c586-797">更新する <see cref="T:System.Data.DataTable" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-797">No <see cref="T:System.Data.DataTable" /> exists to update.</span></span>  
  
 <span data-ttu-id="0c586-798">- または -</span><span class="sxs-lookup"><span data-stu-id="0c586-798">-or-</span></span>  
  
 <span data-ttu-id="0c586-799">ソースとして使用する <see cref="T:System.Data.DataSet" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-799">No <see cref="T:System.Data.DataSet" /> exists to use as a source.</span></span></exception>
        <exception cref="T:System.Data.DBConcurrencyException"><span data-ttu-id="0c586-800">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</span><span class="sxs-lookup"><span data-stu-id="0c586-800">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Update(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="0c586-801">データ ソースの更新に使用した <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-801">The <see cref="T:System.Data.DataSet" /> used to update the data source.</span></span></param>
        <summary><span data-ttu-id="0c586-802">指定した <see cref="T:System.Data.DataSet" /> での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-802">Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="0c586-803"><see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</span><span class="sxs-lookup"><span data-stu-id="0c586-803">The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-804">アプリケーションを呼び出すと、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッド、<xref:System.Data.Common.DbDataAdapter>を調べ、<xref:System.Data.DataRow.RowState%2A>プロパティで構成されているインデックスの順序に基づいて、各行の繰り返し、必要な INSERT、UPDATE、または DELETE ステートメントを実行し、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-804">When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-805">たとえば、<xref:System.Data.Common.DbDataAdapter.Update%2A>の後に、INSERT ステートメントとし、もう 1 つの DELETE ステートメントでは、期限内の行の順序付けに、DELETE ステートメントを実行する可能性があります、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-805">For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="0c586-806">これらのステートメントは、バッチ処理としては実行されないことに注意してください。各行が個別に更新されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-806">It should be noted that these statements are not performed as a batch process; each row is updated individually.</span></span> <span data-ttu-id="0c586-807">アプリケーションが呼び出すことができます、<xref:System.Data.DataSet.GetChanges%2A>とき (たとえば、更新する前に挿入) のステートメントの種類のシーケンスを制御する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-807">An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs).</span></span> <span data-ttu-id="0c586-808">詳細については、次を参照してください。 [Dataadapter によるデータ ソースを更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-808">For more information, see [Updating Data Sources with DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).</span></span>  
  
 <span data-ttu-id="0c586-809">かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドが例外を生成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-809">If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception.</span></span> <span data-ttu-id="0c586-810">ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>または<xref:System.Data.OleDb.OleDbCommandBuilder>設定した場合、SQL ステートメントの 1 つのテーブルの更新プログラムを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c586-810">However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider.</span></span> <span data-ttu-id="0c586-811">次に、追加の SQL ステートメントを設定しないことがによって生成される、 **CommandBuilder**です。</span><span class="sxs-lookup"><span data-stu-id="0c586-811">Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**.</span></span> <span data-ttu-id="0c586-812">この生成ロジックで内に存在するキー列について、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-812">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-813">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-813">For more information see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="0c586-814"><xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは、更新プログラムを実行する前に最初のマッピングに示されたテーブルから行を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-814">The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update.</span></span> <span data-ttu-id="0c586-815"><xref:System.Data.Common.DbDataAdapter.Update%2A>の値を使用して行を更新、<xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c586-815">The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property.</span></span> <span data-ttu-id="0c586-816">返されるその他の行は無視されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-816">Any additional rows returned are ignored.</span></span>  
  
 <span data-ttu-id="0c586-817">すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントを発生すると、ユーザーが、調整を検査できるように<xref:System.Data.DataSet>行とその出力、コマンドによって返されるパラメーター。</span><span class="sxs-lookup"><span data-stu-id="0c586-817">After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command.</span></span> <span data-ttu-id="0c586-818">行が正常に更新される、その行に対する変更が受け入れられます。</span><span class="sxs-lookup"><span data-stu-id="0c586-818">After a row updates successfully, the changes to that row are accepted.</span></span>  
  
 <span data-ttu-id="0c586-819">使用する場合<xref:System.Data.Common.DbDataAdapter.Update%2A>実行の順序は、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-819">When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:</span></span>  
  
1.  <span data-ttu-id="0c586-820">内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-820">The values in the <xref:System.Data.DataRow> are moved to the parameter values.</span></span>  
  
2.  <span data-ttu-id="0c586-821"><xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-821">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.</span></span>  
  
3.  <span data-ttu-id="0c586-822">コマンドを実行します。</span><span class="sxs-lookup"><span data-stu-id="0c586-822">The command executes.</span></span>  
  
4.  <span data-ttu-id="0c586-823">コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果に格納し、<xref:System.Data.DataRow>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-823">If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.</span></span>  
  
5.  <span data-ttu-id="0c586-824">配置される出力パラメーターがある場合、<xref:System.Data.DataRow>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-824">If there are output parameters, they are placed in the <xref:System.Data.DataRow>.</span></span>  
  
6.  <span data-ttu-id="0c586-825"><xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-825">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.</span></span>  
  
7.  <span data-ttu-id="0c586-826"><xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。</span><span class="sxs-lookup"><span data-stu-id="0c586-826"><xref:System.Data.DataRow.AcceptChanges%2A> is called.</span></span>  
  
 <span data-ttu-id="0c586-827">各コマンドに関連付けられている、<xref:System.Data.Common.DbDataAdapter>関連付けられているパラメーターのコレクションを持ちます。</span><span class="sxs-lookup"><span data-stu-id="0c586-827">Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it.</span></span> <span data-ttu-id="0c586-828">パラメーターを使用して、現在行にマップされます、`SourceColumn`と`SourceVersion`の .NET Framework データ プロバイダーのプロパティ`Parameter`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0c586-828">Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class.</span></span> <span data-ttu-id="0c586-829">`SourceColumn` 指す、<xref:System.Data.DataTable>列を<xref:System.Data.Common.DbDataAdapter>参照を現在の行のパラメーターの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-829">`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.</span></span>  
  
 <span data-ttu-id="0c586-830">`SourceColumn` すべてのテーブル マップを適用する前に、マップされていない列の名前を指します。</span><span class="sxs-lookup"><span data-stu-id="0c586-830">`SourceColumn` refers to the unmapped column name before any table mappings have been applied.</span></span> <span data-ttu-id="0c586-831">場合`SourceColumn`は存在しない列に実行されるアクションは、次のいずれかに依存<xref:System.Data.MissingMappingAction>値。</span><span class="sxs-lookup"><span data-stu-id="0c586-831">If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.</span></span>  
  
|<span data-ttu-id="0c586-832">列挙値</span><span class="sxs-lookup"><span data-stu-id="0c586-832">Enumeration value</span></span>|<span data-ttu-id="0c586-833">実行されるアクション</span><span class="sxs-lookup"><span data-stu-id="0c586-833">Action taken</span></span>|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|<span data-ttu-id="0c586-834">ソース列の名前とテーブル名を使用して、<xref:System.Data.DataSet>マッピングが存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="0c586-834">Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.</span></span>|  
|`MissingMappingAction.Ignore`|<span data-ttu-id="0c586-835">A<xref:System.SystemException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-835">A <xref:System.SystemException> is generated.</span></span> <span data-ttu-id="0c586-836">マッピングが明示的に設定されている入力パラメーターのマッピングが欠落は、通常、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-836">When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.</span></span>|  
|`MissingMappingAction.Error`|<span data-ttu-id="0c586-837">A<xref:System.SystemException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-837">A <xref:System.SystemException> is generated.</span></span>|  
  
 <span data-ttu-id="0c586-838">`SourceColumn`出力の値をマップするプロパティを使用しても、または入力/出力パラメーターにバックアップ、`DataSet`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-838">The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`.</span></span> <span data-ttu-id="0c586-839">存在しない列を参照する場合、例外が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-839">An exception is generated if it refers to a nonexistent column.</span></span>  
  
 <span data-ttu-id="0c586-840">`SourceVersion`の .NET Framework データ プロバイダーのプロパティ`Parameter`クラスは、列の値の元の現在、または提案済みバージョンを使用するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-840">The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value.</span></span> <span data-ttu-id="0c586-841">この機能は、オプティミスティック同時実行制御違反をチェックする UPDATE ステートメントの WHERE 句に元の値を含めるによく使用されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-841">This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-842">行の更新中にエラーが発生した場合は、例外がスローされ、更新プログラムの実行は廃止されました。</span><span class="sxs-lookup"><span data-stu-id="0c586-842">If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.</span></span> <span data-ttu-id="0c586-843">エラーが発生したときに例外を生成せず、更新操作を続行するには設定、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>プロパティを`true`呼び出す前に<xref:System.Data.Common.DbDataAdapter.Update%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-843">To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>.</span></span> <span data-ttu-id="0c586-844">内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベントです。</span><span class="sxs-lookup"><span data-stu-id="0c586-844">You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter.</span></span> <span data-ttu-id="0c586-845">内で例外を生成せず、更新操作を続行する、`RowUpdated`イベント、設定、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>のプロパティ、<xref:System.Data.Common.RowUpdatedEventArgs>に<xref:System.Data.UpdateStatus.Continue>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-845">To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus.Continue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c586-846">次の例は、派生クラスを使用して<xref:System.Data.OleDb.OleDbDataAdapter>、データ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-846">The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0c586-847">ソース テーブルが無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-847">The source table is invalid.</span></span></exception>
        <exception cref="T:System.Data.DBConcurrencyException"><span data-ttu-id="0c586-848">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</span><span class="sxs-lookup"><span data-stu-id="0c586-848">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataTable ^ dataTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable"><span data-ttu-id="0c586-849">データ ソースの更新に使用した <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-849">The <see cref="T:System.Data.DataTable" /> used to update the data source.</span></span></param>
        <summary><span data-ttu-id="0c586-850">指定した <see cref="T:System.Data.DataTable" /> での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-850">Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <see cref="T:System.Data.DataTable" />.</span></span></summary>
        <returns><span data-ttu-id="0c586-851"><see cref="T:System.Data.DataTable" /> 内で正常に更新された行の数。</span><span class="sxs-lookup"><span data-stu-id="0c586-851">The number of rows successfully updated from the <see cref="T:System.Data.DataTable" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-852">アプリケーションを呼び出すと、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッド、<xref:System.Data.Common.DbDataAdapter>を調べ、<xref:System.Data.DataRow.RowState%2A>プロパティで構成されているインデックスの順序に基づいて、各行の繰り返し、必要な INSERT、UPDATE、または DELETE ステートメントを実行し、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-852">When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-853">たとえば、<xref:System.Data.Common.DbDataAdapter.Update%2A>の後に、INSERT ステートメントとし、もう 1 つの DELETE ステートメントでは、期限内の行の順序付けに、DELETE ステートメントを実行する可能性があります、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-853">For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="0c586-854">これらのステートメントは、バッチ処理としては実行されないことに注意してください。各行が個別に更新されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-854">It should be noted that these statements are not performed as a batch process; each row is updated individually.</span></span> <span data-ttu-id="0c586-855">アプリケーションが呼び出すことができます、<xref:System.Data.DataSet.GetChanges%2A>とき (たとえば、更新する前に挿入) のステートメントの種類のシーケンスを制御する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-855">An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs).</span></span> <span data-ttu-id="0c586-856">詳細については、次を参照してください。 [Dataadapter によるデータ ソースを更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-856">For more information, see [Updating Data Sources with DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).</span></span>  
  
 <span data-ttu-id="0c586-857">かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドが例外を生成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-857">If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception.</span></span> <span data-ttu-id="0c586-858">ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>または<xref:System.Data.OleDb.OleDbCommandBuilder>設定した場合、SQL ステートメントの 1 つのテーブルの更新プログラムを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c586-858">However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider.</span></span> <span data-ttu-id="0c586-859">次に、追加の SQL ステートメントを設定しないことがによって生成される、 **CommandBuilder**です。</span><span class="sxs-lookup"><span data-stu-id="0c586-859">Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**.</span></span> <span data-ttu-id="0c586-860">この生成ロジックで内に存在するキー列について、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-860">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-861">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-861">For more information see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="0c586-862"><xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは、更新プログラムを実行する前に最初のマッピングに示されたテーブルから行を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-862">The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update.</span></span> <span data-ttu-id="0c586-863"><xref:System.Data.Common.DbDataAdapter.Update%2A>の値を使用して行を更新、<xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c586-863">The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property.</span></span> <span data-ttu-id="0c586-864">返されるその他の行は無視されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-864">Any additional rows returned are ignored.</span></span>  
  
 <span data-ttu-id="0c586-865">すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントを発生すると、ユーザーが、調整を検査できるように<xref:System.Data.DataSet>行とその出力、コマンドによって返されるパラメーター。</span><span class="sxs-lookup"><span data-stu-id="0c586-865">After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command.</span></span> <span data-ttu-id="0c586-866">行が正常に更新される、その行に対する変更が受け入れられます。</span><span class="sxs-lookup"><span data-stu-id="0c586-866">After a row updates successfully, the changes to that row are accepted.</span></span>  
  
 <span data-ttu-id="0c586-867">使用する場合<xref:System.Data.Common.DbDataAdapter.Update%2A>実行の順序は、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-867">When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:</span></span>  
  
1.  <span data-ttu-id="0c586-868">内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-868">The values in the <xref:System.Data.DataRow> are moved to the parameter values.</span></span>  
  
2.  <span data-ttu-id="0c586-869"><xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-869">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.</span></span>  
  
3.  <span data-ttu-id="0c586-870">コマンドを実行します。</span><span class="sxs-lookup"><span data-stu-id="0c586-870">The command executes.</span></span>  
  
4.  <span data-ttu-id="0c586-871">コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果に格納し、<xref:System.Data.DataRow>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-871">If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.</span></span>  
  
5.  <span data-ttu-id="0c586-872">配置される出力パラメーターがある場合、<xref:System.Data.DataRow>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-872">If there are output parameters, they are placed in the <xref:System.Data.DataRow>.</span></span>  
  
6.  <span data-ttu-id="0c586-873"><xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-873">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.</span></span>  
  
7.  <span data-ttu-id="0c586-874"><xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。</span><span class="sxs-lookup"><span data-stu-id="0c586-874"><xref:System.Data.DataRow.AcceptChanges%2A> is called.</span></span>  
  
 <span data-ttu-id="0c586-875">各コマンドに関連付けられている、<xref:System.Data.Common.DbDataAdapter>関連付けられているパラメーターのコレクションを持ちます。</span><span class="sxs-lookup"><span data-stu-id="0c586-875">Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it.</span></span> <span data-ttu-id="0c586-876">パラメーターを使用して、現在行にマップされます、`SourceColumn`と`SourceVersion`の .NET Framework データ プロバイダーのプロパティ`Parameter`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0c586-876">Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class.</span></span> <span data-ttu-id="0c586-877">`SourceColumn` 指す、<xref:System.Data.DataTable>列を<xref:System.Data.Common.DbDataAdapter>参照を現在の行のパラメーターの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-877">`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.</span></span>  
  
 <span data-ttu-id="0c586-878">`SourceColumn` すべてのテーブル マップを適用する前に、マップされていない列の名前を指します。</span><span class="sxs-lookup"><span data-stu-id="0c586-878">`SourceColumn` refers to the unmapped column name before any table mappings have been applied.</span></span> <span data-ttu-id="0c586-879">場合`SourceColumn`は存在しない列に実行されるアクションは、次のいずれかに依存<xref:System.Data.MissingMappingAction>値。</span><span class="sxs-lookup"><span data-stu-id="0c586-879">If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.</span></span>  
  
|<span data-ttu-id="0c586-880">列挙値</span><span class="sxs-lookup"><span data-stu-id="0c586-880">Enumeration value</span></span>|<span data-ttu-id="0c586-881">実行されるアクション</span><span class="sxs-lookup"><span data-stu-id="0c586-881">Action taken</span></span>|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|<span data-ttu-id="0c586-882">ソース列の名前とテーブル名を使用して、<xref:System.Data.DataSet>マッピングが存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="0c586-882">Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.</span></span>|  
|`MissingMappingAction.Ignore`|<span data-ttu-id="0c586-883">A<xref:System.SystemException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-883">A <xref:System.SystemException> is generated.</span></span> <span data-ttu-id="0c586-884">マッピングが明示的に設定されている入力パラメーターのマッピングが欠落は、通常、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-884">When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.</span></span>|  
|`MissingMappingAction.Error`|<span data-ttu-id="0c586-885">A<xref:System.SystemException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-885">A <xref:System.SystemException> is generated.</span></span>|  
  
 <span data-ttu-id="0c586-886">`SourceColumn`出力の値をマップするプロパティを使用しても、または入力/出力パラメーターにバックアップ、`DataSet`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-886">The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`.</span></span> <span data-ttu-id="0c586-887">存在しない列を参照する場合、例外が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-887">An exception is generated if it refers to a nonexistent column.</span></span>  
  
 <span data-ttu-id="0c586-888">`SourceVersion`の .NET Framework データ プロバイダーのプロパティ`Parameter`クラスは、列の値の元の現在、または提案済みバージョンを使用するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-888">The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value.</span></span> <span data-ttu-id="0c586-889">この機能は、オプティミスティック同時実行制御違反をチェックする UPDATE ステートメントの WHERE 句に元の値を含めるによく使用されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-889">This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-890">行の更新中にエラーが発生した場合は、例外がスローされ、更新プログラムの実行は廃止されました。</span><span class="sxs-lookup"><span data-stu-id="0c586-890">If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.</span></span> <span data-ttu-id="0c586-891">エラーが発生したときに例外を生成せず、更新操作を続行するには設定、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>プロパティを`true`呼び出す前に<xref:System.Data.Common.DbDataAdapter.Update%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-891">To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>.</span></span> <span data-ttu-id="0c586-892">内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベントです。</span><span class="sxs-lookup"><span data-stu-id="0c586-892">You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter.</span></span> <span data-ttu-id="0c586-893">内で例外を生成せず、更新操作を続行する、`RowUpdated`イベント、設定、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>のプロパティ、<xref:System.Data.Common.RowUpdatedEventArgs>に<xref:System.Data.UpdateStatus.Continue>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-893">To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus.Continue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c586-894">次の例は、派生クラスを使用して<xref:System.Data.OleDb.OleDbDataAdapter>、データ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-894">The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0c586-895"><see cref="T:System.Data.DataSet" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-895">The <see cref="T:System.Data.DataSet" /> is invalid.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0c586-896">ソース テーブルが無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-896">The source table is invalid.</span></span></exception>
        <exception cref="T:System.SystemException"><span data-ttu-id="0c586-897">更新する <see cref="T:System.Data.DataRow" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-897">No <see cref="T:System.Data.DataRow" /> exists to update.</span></span>  
  
 <span data-ttu-id="0c586-898">- または -</span><span class="sxs-lookup"><span data-stu-id="0c586-898">-or-</span></span>  
  
 <span data-ttu-id="0c586-899">更新する <see cref="T:System.Data.DataTable" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-899">No <see cref="T:System.Data.DataTable" /> exists to update.</span></span>  
  
 <span data-ttu-id="0c586-900">- または -</span><span class="sxs-lookup"><span data-stu-id="0c586-900">-or-</span></span>  
  
 <span data-ttu-id="0c586-901">ソースとして使用する <see cref="T:System.Data.DataSet" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-901">No <see cref="T:System.Data.DataSet" /> exists to use as a source.</span></span></exception>
        <exception cref="T:System.Data.DBConcurrencyException"><span data-ttu-id="0c586-902">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</span><span class="sxs-lookup"><span data-stu-id="0c586-902">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Update(class System.Data.DataRow[] dataRows, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Update (dataRows As DataRow(), tableMapping As DataTableMapping) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRows"><span data-ttu-id="0c586-903">データ ソースの更新に使用する <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="0c586-903">An array of <see cref="T:System.Data.DataRow" /> objects used to update the data source.</span></span></param>
        <param name="tableMapping"><span data-ttu-id="0c586-904">使用する <see cref="P:System.Data.IDataAdapter.TableMappings" /> コレクション。</span><span class="sxs-lookup"><span data-stu-id="0c586-904">The <see cref="P:System.Data.IDataAdapter.TableMappings" /> collection to use.</span></span></param>
        <summary><span data-ttu-id="0c586-905">指定した <see cref="T:System.Data.DataSet" /> オブジェクトの配列内の挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-905">Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array of <see cref="T:System.Data.DataSet" /> objects.</span></span></summary>
        <returns><span data-ttu-id="0c586-906"><see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</span><span class="sxs-lookup"><span data-stu-id="0c586-906">The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-907">アプリケーションを呼び出すと、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッド、<xref:System.Data.Common.DbDataAdapter>を調べ、<xref:System.Data.DataRow.RowState%2A>プロパティで構成されているインデックスの順序に基づいて、各行の繰り返し、必要な INSERT、UPDATE、または DELETE ステートメントを実行し、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-907">When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-908">たとえば、<xref:System.Data.Common.DbDataAdapter.Update%2A>の後に、INSERT ステートメントとし、もう 1 つの DELETE ステートメントでは、期限内の行の順序付けに、DELETE ステートメントを実行する可能性があります、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-908">For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="0c586-909">これらのステートメントは、バッチ処理としては実行されないことに注意してください。各行が個別に更新されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-909">It should be noted that these statements are not performed as a batch process; each row is updated individually.</span></span> <span data-ttu-id="0c586-910">アプリケーションが呼び出すことができます、<xref:System.Data.DataSet.GetChanges%2A>とき (たとえば、更新する前に挿入) のステートメントの種類のシーケンスを制御する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-910">An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs).</span></span> <span data-ttu-id="0c586-911">詳細については、次を参照してください。 [Dataadapter によるデータ ソースを更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-911">For more information, see [Updating Data Sources with DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).</span></span>  
  
 <span data-ttu-id="0c586-912">かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドが例外を生成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-912">If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception.</span></span> <span data-ttu-id="0c586-913">ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>または<xref:System.Data.OleDb.OleDbCommandBuilder>設定した場合、SQL ステートメントの 1 つのテーブルの更新プログラムを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c586-913">However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider.</span></span> <span data-ttu-id="0c586-914">次に、追加の SQL ステートメントを設定しないことがによって生成される、 **CommandBuilder**です。</span><span class="sxs-lookup"><span data-stu-id="0c586-914">Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**.</span></span> <span data-ttu-id="0c586-915">この生成ロジックで内に存在するキー列について、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-915">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-916">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-916">For more information see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="0c586-917"><xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは、更新プログラムを実行する前に最初のマッピングに示されたテーブルから行を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-917">The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update.</span></span> <span data-ttu-id="0c586-918"><xref:System.Data.Common.DbDataAdapter.Update%2A>の値を使用して行を更新、<xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c586-918">The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property.</span></span> <span data-ttu-id="0c586-919">返されるその他の行は無視されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-919">Any additional rows returned are ignored.</span></span>  
  
 <span data-ttu-id="0c586-920">すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントを発生すると、ユーザーが、調整を検査できるように<xref:System.Data.DataSet>行とその出力、コマンドによって返されるパラメーター。</span><span class="sxs-lookup"><span data-stu-id="0c586-920">After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command.</span></span> <span data-ttu-id="0c586-921">行が正常に更新される、その行に対する変更が受け入れられます。</span><span class="sxs-lookup"><span data-stu-id="0c586-921">After a row updates successfully, the changes to that row are accepted.</span></span>  
  
 <span data-ttu-id="0c586-922">使用する場合<xref:System.Data.Common.DbDataAdapter.Update%2A>実行の順序は、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-922">When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:</span></span>  
  
1.  <span data-ttu-id="0c586-923">内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-923">The values in the <xref:System.Data.DataRow> are moved to the parameter values.</span></span>  
  
2.  <span data-ttu-id="0c586-924"><xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-924">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.</span></span>  
  
3.  <span data-ttu-id="0c586-925">コマンドを実行します。</span><span class="sxs-lookup"><span data-stu-id="0c586-925">The command executes.</span></span>  
  
4.  <span data-ttu-id="0c586-926">コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果に格納し、<xref:System.Data.DataRow>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-926">If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.</span></span>  
  
5.  <span data-ttu-id="0c586-927">配置される出力パラメーターがある場合、<xref:System.Data.DataRow>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-927">If there are output parameters, they are placed in the <xref:System.Data.DataRow>.</span></span>  
  
6.  <span data-ttu-id="0c586-928"><xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-928">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.</span></span>  
  
7.  <span data-ttu-id="0c586-929"><xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。</span><span class="sxs-lookup"><span data-stu-id="0c586-929"><xref:System.Data.DataRow.AcceptChanges%2A> is called.</span></span>  
  
 <span data-ttu-id="0c586-930">各コマンドに関連付けられている、<xref:System.Data.Common.DbDataAdapter>関連付けられているパラメーターのコレクションを持ちます。</span><span class="sxs-lookup"><span data-stu-id="0c586-930">Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it.</span></span> <span data-ttu-id="0c586-931">パラメーターを使用して、現在行にマップされます、`SourceColumn`と`SourceVersion`の .NET Framework データ プロバイダーのプロパティ`Parameter`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0c586-931">Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class.</span></span> <span data-ttu-id="0c586-932">`SourceColumn` 指す、<xref:System.Data.DataTable>列を<xref:System.Data.Common.DbDataAdapter>参照を現在の行のパラメーターの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-932">`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.</span></span>  
  
 <span data-ttu-id="0c586-933">`SourceColumn` すべてのテーブル マップを適用する前に、マップされていない列の名前を指します。</span><span class="sxs-lookup"><span data-stu-id="0c586-933">`SourceColumn` refers to the unmapped column name before any table mappings have been applied.</span></span> <span data-ttu-id="0c586-934">場合`SourceColumn`は存在しない列に実行されるアクションは、次のいずれかに依存<xref:System.Data.MissingMappingAction>値。</span><span class="sxs-lookup"><span data-stu-id="0c586-934">If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.</span></span>  
  
|<span data-ttu-id="0c586-935">列挙値</span><span class="sxs-lookup"><span data-stu-id="0c586-935">Enumeration value</span></span>|<span data-ttu-id="0c586-936">実行されるアクション</span><span class="sxs-lookup"><span data-stu-id="0c586-936">Action taken</span></span>|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|<span data-ttu-id="0c586-937">ソース列の名前とテーブル名を使用して、<xref:System.Data.DataSet>マッピングが存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="0c586-937">Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.</span></span>|  
|`MissingMappingAction.Ignore`|<span data-ttu-id="0c586-938">A<xref:System.SystemException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-938">A <xref:System.SystemException> is generated.</span></span> <span data-ttu-id="0c586-939">マッピングが明示的に設定されている入力パラメーターのマッピングが欠落は、通常、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-939">When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.</span></span>|  
|`MissingMappingAction.Error`|<span data-ttu-id="0c586-940">A<xref:System.SystemException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-940">A <xref:System.SystemException> is generated.</span></span>|  
  
 <span data-ttu-id="0c586-941">`SourceColumn`出力の値をマップするプロパティを使用しても、または入力/出力パラメーターにバックアップ、`DataSet`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-941">The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`.</span></span> <span data-ttu-id="0c586-942">存在しない列を参照する場合、例外が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-942">An exception is generated if it refers to a nonexistent column.</span></span>  
  
 <span data-ttu-id="0c586-943">`SourceVersion`の .NET Framework データ プロバイダーのプロパティ`Parameter`クラスは、列の値の元の現在、または提案済みバージョンを使用するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-943">The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value.</span></span> <span data-ttu-id="0c586-944">この機能は、オプティミスティック同時実行制御違反をチェックする UPDATE ステートメントの WHERE 句に元の値を含めるによく使用されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-944">This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-945">行の更新中にエラーが発生した場合は、例外がスローされ、更新プログラムの実行は廃止されました。</span><span class="sxs-lookup"><span data-stu-id="0c586-945">If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.</span></span> <span data-ttu-id="0c586-946">エラーが発生したときに例外を生成せず、更新操作を続行するには設定、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>プロパティを`true`呼び出す前に<xref:System.Data.Common.DbDataAdapter.Update%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-946">To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>.</span></span> <span data-ttu-id="0c586-947">内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベントです。</span><span class="sxs-lookup"><span data-stu-id="0c586-947">You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter.</span></span> <span data-ttu-id="0c586-948">内で例外を生成せず、更新操作を続行する、`RowUpdated`イベント、設定、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>のプロパティ、<xref:System.Data.Common.RowUpdatedEventArgs>に<xref:System.Data.UpdateStatus.Continue>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-948">To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus.Continue>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0c586-949"><see cref="T:System.Data.DataSet" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-949">The <see cref="T:System.Data.DataSet" /> is invalid.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0c586-950">ソース テーブルが無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-950">The source table is invalid.</span></span></exception>
        <exception cref="T:System.SystemException"><span data-ttu-id="0c586-951">更新する <see cref="T:System.Data.DataRow" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-951">No <see cref="T:System.Data.DataRow" /> exists to update.</span></span>  
  
 <span data-ttu-id="0c586-952">- または -</span><span class="sxs-lookup"><span data-stu-id="0c586-952">-or-</span></span>  
  
 <span data-ttu-id="0c586-953">更新する <see cref="T:System.Data.DataTable" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-953">No <see cref="T:System.Data.DataTable" /> exists to update.</span></span>  
  
 <span data-ttu-id="0c586-954">- または -</span><span class="sxs-lookup"><span data-stu-id="0c586-954">-or-</span></span>  
  
 <span data-ttu-id="0c586-955">ソースとして使用する <see cref="T:System.Data.DataSet" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="0c586-955">No <see cref="T:System.Data.DataSet" /> exists to use as a source.</span></span></exception>
        <exception cref="T:System.Data.DBConcurrencyException"><span data-ttu-id="0c586-956">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</span><span class="sxs-lookup"><span data-stu-id="0c586-956">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="0c586-957">データ ソースの更新に使用する <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-957">The <see cref="T:System.Data.DataSet" /> to use to update the data source.</span></span></param>
        <param name="srcTable"><span data-ttu-id="0c586-958">テーブル マップに使用するソース テーブルの名前。</span><span class="sxs-lookup"><span data-stu-id="0c586-958">The name of the source table to use for table mapping.</span></span></param>
        <summary><span data-ttu-id="0c586-959"><see cref="T:System.Data.DataSet" /> 内の指定した <see cref="T:System.Data.DataTable" /> 名を持つ挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-959">Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet" /> with the specified <see cref="T:System.Data.DataTable" /> name.</span></span></summary>
        <returns><span data-ttu-id="0c586-960"><see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</span><span class="sxs-lookup"><span data-stu-id="0c586-960">The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-961">アプリケーションを呼び出すと、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッド、<xref:System.Data.Common.DbDataAdapter>を調べ、<xref:System.Data.DataRow.RowState%2A>プロパティで構成されているインデックスの順序に基づいて、各行の繰り返し、必要な INSERT、UPDATE、または DELETE ステートメントを実行し、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-961">When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-962">たとえば、<xref:System.Data.Common.DbDataAdapter.Update%2A>の後に、INSERT ステートメントとし、もう 1 つの DELETE ステートメントでは、期限内の行の順序付けに、DELETE ステートメントを実行する可能性があります、<xref:System.Data.DataTable>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-962">For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="0c586-963">これらのステートメントは、バッチ処理としては実行されないことに注意してください。各行が個別に更新されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-963">It should be noted that these statements are not performed as a batch process; each row is updated individually.</span></span> <span data-ttu-id="0c586-964">アプリケーションが呼び出すことができます、<xref:System.Data.DataSet.GetChanges%2A>ステートメントの種類のシーケンスを制御する必要がありますの状況でメソッド (たとえば、更新する前に挿入) です。</span><span class="sxs-lookup"><span data-stu-id="0c586-964">An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERT before UPDATE).</span></span> <span data-ttu-id="0c586-965">詳細については、次を参照してください。 [Dataadapter によるデータ ソースを更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-965">For more information, see [Updating Data Sources with DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).</span></span>  
  
 <span data-ttu-id="0c586-966">かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドが例外を生成します。</span><span class="sxs-lookup"><span data-stu-id="0c586-966">If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception.</span></span> <span data-ttu-id="0c586-967">ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>または<xref:System.Data.OleDb.OleDbCommandBuilder>設定した場合、SQL ステートメントの 1 つのテーブルの更新プログラムを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c586-967">However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider.</span></span> <span data-ttu-id="0c586-968">次に、追加の SQL ステートメントを設定しないことがによって生成される、 **CommandBuilder**です。</span><span class="sxs-lookup"><span data-stu-id="0c586-968">Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**.</span></span> <span data-ttu-id="0c586-969">この生成ロジックで内に存在するキー列について、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-969">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-970">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="0c586-970">For more information see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="0c586-971"><xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは、シナリオをサポートします。 ここで、<xref:System.Data.DataSet>複数含まれている<xref:System.Data.DataTable>大文字小文字によってのみとは異なる名前を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0c586-971">The <xref:System.Data.Common.DbDataAdapter.Update%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case.</span></span> <span data-ttu-id="0c586-972">内で同じ名前が異なる場合も、複数のテーブルが存在する場合、 `DataSet`、<xref:System.Data.Common.DbDataAdapter.Update%2A>は対応するテーブルを見つける大文字小文字を区別比較を実行し、完全一致が存在しない場合、例外が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-972">When multiple tables with the same name, but different case, exist in a `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A> performs a case-sensitive comparison to find the corresponding table, and generates an exception if no exact match exists.</span></span> <span data-ttu-id="0c586-973">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-973">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet ds = new DataSet();  
 ds.Tables.Add("aaa");  
 ds.Tables.Add("AAA");  
 adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.  
 adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.  
    adapter.Update(ds, "Aaa"); // Results in an exception.  
```  
  
 <span data-ttu-id="0c586-974">場合<xref:System.Data.Common.DbDataAdapter.Update%2A>が呼び出されたと<xref:System.Data.DataSet>は 1 つだけ<xref:System.Data.DataTable>名前を持つ唯一の相違点の場合を<xref:System.Data.DataTable>は更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-974">If <xref:System.Data.Common.DbDataAdapter.Update%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated.</span></span> <span data-ttu-id="0c586-975">このシナリオでは、比較では大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="0c586-975">In this scenario, the comparison is case insensitive.</span></span> <span data-ttu-id="0c586-976">次の c# コードでは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="0c586-976">The following C# code illustrates this behavior.</span></span>  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <span data-ttu-id="0c586-977"><xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドは、更新プログラムを実行する前に最初のマッピングに示されたテーブルから行を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-977">The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update.</span></span> <span data-ttu-id="0c586-978"><xref:System.Data.Common.DbDataAdapter.Update%2A>の値を使用して行を更新、<xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c586-978">The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property.</span></span> <span data-ttu-id="0c586-979">返されるその他の行は無視されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-979">Any additional rows returned are ignored.</span></span>  
  
 <span data-ttu-id="0c586-980">すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントを発生すると、ユーザーが、調整を検査できるように<xref:System.Data.DataSet>行とその出力、コマンドによって返されるパラメーター。</span><span class="sxs-lookup"><span data-stu-id="0c586-980">After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command.</span></span> <span data-ttu-id="0c586-981">行が正常に更新される、その行に対する変更が受け入れられます。</span><span class="sxs-lookup"><span data-stu-id="0c586-981">After a row updates successfully, the changes to that row are accepted.</span></span>  
  
 <span data-ttu-id="0c586-982">使用する場合<xref:System.Data.Common.DbDataAdapter.Update%2A>実行の順序は、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="0c586-982">When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:</span></span>  
  
1.  <span data-ttu-id="0c586-983">内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-983">The values in the <xref:System.Data.DataRow> are moved to the parameter values.</span></span>  
  
2.  <span data-ttu-id="0c586-984"><xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-984">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.</span></span>  
  
3.  <span data-ttu-id="0c586-985">コマンドを実行します。</span><span class="sxs-lookup"><span data-stu-id="0c586-985">The command executes.</span></span>  
  
4.  <span data-ttu-id="0c586-986">コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果に格納し、<xref:System.Data.DataRow>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-986">If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.</span></span>  
  
5.  <span data-ttu-id="0c586-987">配置される出力パラメーターがある場合、<xref:System.Data.DataRow>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-987">If there are output parameters, they are placed in the <xref:System.Data.DataRow>.</span></span>  
  
6.  <span data-ttu-id="0c586-988"><xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-988">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.</span></span>  
  
7.  <span data-ttu-id="0c586-989"><xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。</span><span class="sxs-lookup"><span data-stu-id="0c586-989"><xref:System.Data.DataRow.AcceptChanges%2A> is called.</span></span>  
  
 <span data-ttu-id="0c586-990">各コマンドに関連付けられている、<xref:System.Data.Common.DbDataAdapter>関連付けられているパラメーターのコレクションを持ちます。</span><span class="sxs-lookup"><span data-stu-id="0c586-990">Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it.</span></span> <span data-ttu-id="0c586-991">パラメーターを使用して、現在行にマップされます、`SourceColumn`と`SourceVersion`の .NET Framework データ プロバイダーのプロパティ`Parameter`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0c586-991">Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class.</span></span> <span data-ttu-id="0c586-992">`SourceColumn` 指す、<xref:System.Data.DataTable>列を<xref:System.Data.Common.DbDataAdapter>参照を現在の行のパラメーターの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0c586-992">`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.</span></span>  
  
 <span data-ttu-id="0c586-993">`SourceColumn` すべてのテーブル マップを適用する前に、マップされていない列の名前を指します。</span><span class="sxs-lookup"><span data-stu-id="0c586-993">`SourceColumn` refers to the unmapped column name before any table mappings have been applied.</span></span> <span data-ttu-id="0c586-994">場合`SourceColumn`は存在しない列に実行されるアクションは、次のいずれかに依存<xref:System.Data.MissingMappingAction>値。</span><span class="sxs-lookup"><span data-stu-id="0c586-994">If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.</span></span>  
  
|<span data-ttu-id="0c586-995">列挙値</span><span class="sxs-lookup"><span data-stu-id="0c586-995">Enumeration value</span></span>|<span data-ttu-id="0c586-996">実行されるアクション</span><span class="sxs-lookup"><span data-stu-id="0c586-996">Action taken</span></span>|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|<span data-ttu-id="0c586-997">ソース列の名前とテーブル名を使用して、<xref:System.Data.DataSet>マッピングが存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="0c586-997">Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.</span></span>|  
|`MissingMappingAction.Ignore`|<span data-ttu-id="0c586-998">A<xref:System.SystemException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-998">A <xref:System.SystemException> is generated.</span></span> <span data-ttu-id="0c586-999">マッピングが明示的に設定されている入力パラメーターのマッピングが欠落は、通常、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="0c586-999">When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.</span></span>|  
|`MissingMappingAction.Error`|<span data-ttu-id="0c586-1000">A<xref:System.SystemException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-1000">A <xref:System.SystemException> is generated.</span></span>|  
  
 <span data-ttu-id="0c586-1001">`SourceColumn`出力の値をマップするプロパティを使用しても、または入力/出力パラメーターにバックアップ、`DataSet`です。</span><span class="sxs-lookup"><span data-stu-id="0c586-1001">The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`.</span></span> <span data-ttu-id="0c586-1002">存在しない列を参照する場合、例外が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-1002">An exception is generated if it refers to a nonexistent column.</span></span>  
  
 <span data-ttu-id="0c586-1003">`SourceVersion`の .NET Framework データ プロバイダーのプロパティ`Parameter`クラスは、列の値の元の現在、または提案済みバージョンを使用するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-1003">The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value.</span></span> <span data-ttu-id="0c586-1004">この機能は、オプティミスティック同時実行制御違反をチェックする UPDATE ステートメントの WHERE 句に元の値を含めるによく使用されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-1004">This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c586-1005">行の更新中にエラーが発生した場合は、例外がスローされ、更新プログラムの実行は廃止されました。</span><span class="sxs-lookup"><span data-stu-id="0c586-1005">If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.</span></span> <span data-ttu-id="0c586-1006">エラーが発生したときに例外を生成せず、更新操作を続行するには設定、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>プロパティを`true`呼び出す前に<xref:System.Data.Common.DbDataAdapter.Update%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-1006">To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>.</span></span> <span data-ttu-id="0c586-1007">内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベントです。</span><span class="sxs-lookup"><span data-stu-id="0c586-1007">You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter.</span></span> <span data-ttu-id="0c586-1008">内で例外を生成せず、更新操作を続行する、`RowUpdated`イベント、設定、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>のプロパティ、<xref:System.Data.Common.RowUpdatedEventArgs>に<xref:System.Data.UpdateStatus.Continue>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-1008">To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus.Continue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c586-1009">次の例は、派生クラスを使用して<xref:System.Data.OleDb.OleDbDataAdapter>、データ ソースを更新します。</span><span class="sxs-lookup"><span data-stu-id="0c586-1009">The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0c586-1010"><see cref="T:System.Data.DataSet" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-1010">The <see cref="T:System.Data.DataSet" /> is invalid.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0c586-1011">ソース テーブルが無効です。</span><span class="sxs-lookup"><span data-stu-id="0c586-1011">The source table is invalid.</span></span></exception>
        <exception cref="T:System.Data.DBConcurrencyException"><span data-ttu-id="0c586-1012">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</span><span class="sxs-lookup"><span data-stu-id="0c586-1012">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public virtual int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c586-1013">バッチ処理サポートを有効にするかどうか、および、1 回のバッチで実行可能なコマンド数を指定する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-1013">Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.</span></span></summary>
        <value><span data-ttu-id="0c586-1014">バッチごとに処理される行数。</span><span class="sxs-lookup"><span data-stu-id="0c586-1014">The number of rows to process per batch.</span></span>  
  
 <span data-ttu-id="0c586-1015"><list type="table"><listheader><term> 値は</span><span class="sxs-lookup"><span data-stu-id="0c586-1015"><list type="table"><listheader><term> Value is</span></span>  
  
 <span data-ttu-id="0c586-1016"></term><description> 効果</span><span class="sxs-lookup"><span data-stu-id="0c586-1016"></term><description> Effect</span></span>  
  
 <span data-ttu-id="0c586-1017"></description></listheader><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="0c586-1017"></description></listheader><item><term> 0</span></span>  
  
 <span data-ttu-id="0c586-1018"></term><description> バッチのサイズに制限はありません。</span><span class="sxs-lookup"><span data-stu-id="0c586-1018"></term><description> There is no limit on the batch size.</span></span>  
  
 <span data-ttu-id="0c586-1019"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="0c586-1019"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="0c586-1020"></term><description> バッチ更新を無効にします。</span><span class="sxs-lookup"><span data-stu-id="0c586-1020"></term><description> Disables batch updating.</span></span>  
  
 <span data-ttu-id="0c586-1021"></description></item><item><term> &gt; 1</span><span class="sxs-lookup"><span data-stu-id="0c586-1021"></description></item><item><term> &gt; 1</span></span>  
  
 <span data-ttu-id="0c586-1022"></term><description> 変更のバッチを使用して送信<see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />時に操作します。</span><span class="sxs-lookup"><span data-stu-id="0c586-1022"></term><description> Changes are sent using batches of <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> operations at a time.</span></span>  
  
 </description></item></list>  
  
 <span data-ttu-id="0c586-1023">すべてのコマンドに関連付けられている 1 以外の値には、これを設定するとき、<see cref="T:System.Data.Common.DbDataAdapter" />必要があります、<see cref="P:System.Data.IDbCommand.UpdatedRowSource" />プロパティに設定**None**または**OutputParameters**です。</span><span class="sxs-lookup"><span data-stu-id="0c586-1023">When setting this to a value other than 1, all the commands associated with the <see cref="T:System.Data.Common.DbDataAdapter" /> must have their <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> property set to **None** or **OutputParameters**.</span></span> <span data-ttu-id="0c586-1024">それ以外の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0c586-1024">An exception will be thrown otherwise.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-1025">使用して、<xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A>から変更をデータ ソースを更新するプロパティ、<xref:System.Data.DataSet>です。</span><span class="sxs-lookup"><span data-stu-id="0c586-1025">Use the <xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A> property to update a data source with changes from a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="0c586-1026">データ プロバイダーは、バッチ処理をサポートする場合は、サーバーへのラウンドト リップ数を減らすことによって、アプリケーションのパフォーマンスを向上このことができます。</span><span class="sxs-lookup"><span data-stu-id="0c586-1026">If the data provider supports batch processing, this can increase application performance by reducing the number of round-trips to the server.</span></span> <span data-ttu-id="0c586-1027">ADO.NET 2.0 では、SQL Server (SqlClient) および Oracle (OracleClient) 用の .NET データ プロバイダーのこのプロパティはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="0c586-1027">In ADO.NET 2.0, this property is supported for the .NET data providers for SQL Server (SqlClient) and Oracle (OracleClient).</span></span>  
  
 <span data-ttu-id="0c586-1028">サイズの大きいバッチを実行すると、パフォーマンスが低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-1028">Executing an extremely large batch could decrease performance.</span></span> <span data-ttu-id="0c586-1029">そのため、アプリケーションを実装する前に、バッチの最適なサイズ設定をテストする必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c586-1029">Therefore, you should test for the optimum batch size setting before implementing your application.</span></span>  
  
 <span data-ttu-id="0c586-1030"><xref:System.ArgumentOutOfRangeException> 0 より小さい値が数値に設定されている場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="0c586-1030">An <xref:System.ArgumentOutOfRangeException> will be thrown if the value is set to a number less than zero.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ UpdateCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c586-1031">データ ソース内のレコードを更新するコマンドを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-1031">Gets or sets a command used to update records in the data source.</span></span></summary>
        <value><span data-ttu-id="0c586-1032">データ セット内の変更された行に対応するデータ ソース内のレコードを更新するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</span><span class="sxs-lookup"><span data-stu-id="0c586-1032">A <see cref="T:System.Data.IDbCommand" /> used during <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> to update records in the data source for modified rows in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c586-1033">中に<xref:System.Data.Common.DbDataAdapter.Update%2A>、このプロパティを設定しないと、主キー情報が内に存在する場合、 <xref:System.Data.DataSet>、<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>が自動的に生成されます。</span><span class="sxs-lookup"><span data-stu-id="0c586-1033">During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> will be automatically generated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c586-1034">次の例は、派生クラスを作成<xref:System.Data.OleDb.OleDbDataAdapter>し、一部のプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="0c586-1034">The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>