<Type Name="DbDataAdapter" FullName="System.Data.Common.DbDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="74bed51cc34b1a5992da551ad380d9b2c3acd8ea" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69078680" /></Metadata><TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable, IDbDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable, System::Data::IDbDataAdapter" />
  <TypeSignature Language="F#" Value="type DbDataAdapter = class&#xA;    inherit DataAdapter&#xA;    interface IDbDataAdapter&#xA;    interface ICloneable&#xA;    interface IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.IDbDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><see cref="T:System.Data.IDbDataAdapter" /> インターフェイスの実装を支援します。 <see cref="T:System.Data.Common.DbDataAdapter" /> の継承クラスは、厳密な型指定を行う関数のセットを実装しますが、**DataAdapter** を完全に実装するために必要な機能の大部分は継承します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラス<xref:System.Data.Common.DbDataAdapter>は、 <xref:System.Data.Common.DataAdapter>クラスから継承し、 <xref:System.Data.IDbDataAdapter>インターフェイスを実装します。 クラスは、リレーショナルデータベースで使用するように設計された**DataAdapter**を実装するのに役立ちます。  
  
 アプリケーションは、 <xref:System.Data.Common.DbDataAdapter>クラスのインスタンスを直接作成するのではなく、それを継承するクラスのインスタンスを作成します。  
  
 継承<xref:System.Data.Common.DbDataAdapter>するクラスは、継承されたメンバーを実装する必要があり、通常は、プロバイダー固有の機能を追加するための追加メンバーを定義します。 たとえば、クラスは<xref:System.Data.Common.DbDataAdapter> <xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティを定義し、クラスは<xref:System.Data.Common.DbDataAdapter> <xref:System.Data.IDataAdapter.Fill%2A>メソッドの8個のオーバーロードを定義します。 次に、クラス<xref:System.Data.OleDb.OleDbDataAdapter>は<xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドを継承し、ADO レコードセットオブジェクトをパラメーター <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>として受け取るの2つの追加のオーバーロードも定義します。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><see cref="T:System.Data.Common.DbDataAdapter" />クラスから継承する場合は、次のコンストラクターを実装することをお勧めします。 
 <list type="table"><listheader><term> アイテム 
 </term><description> 説明 
 </description></listheader><item><term> *場合*DataAdapter () 
 </term><description> *場合*DataAdapter クラスの新しいインスタンスを初期化します。  
  
 </description></item><item><term> *場合*DataAdapter (*場合*コマンド*selectCommand*) 
 </term><description> 指定した SQL SELECT ステートメントを使用して、*場合*DataAdapter クラスの新しいインスタンスを初期化します。  
  
 </description></item><item><term> *場合*DataAdapter (string *Selectcommandtext*、String *selectcommandtext*) 
 </term><description> SQL SELECT ステートメントと接続文字列を使用して、*場合*DataAdapter クラスの新しいインスタンスを初期化します。  
  
 </description></item><item><term> *場合*DataAdapter (string *Selectcommandtext*、*場合*Connection *selectcommandtext*) 
 </term><description> SQL SELECT ステートメントと*場合*Connection オブジェクトを使用して、*場合*DataAdapter クラスの新しいインスタンスを初期化します。  
  
 </description></item></list>  

 .NET Framework データプロバイダー間の一貫性を高めるには、*場合*DataAdapter の形式で継承クラスに名前を付けます。*場合*は、特定の .NET Framework データプロバイダーの名前空間のすべてのクラスに指定された均一なプレフィックスです。 たとえば、"Sql" は、system.string 名前空間の<see cref="T:System.Data.SqlClient.SqlDataAdapter" />クラスのプレフィックス**** です。</para></block>
    <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see langword="DataAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>**DataAdapter** クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の<xref:System.Data.Common.DbDataAdapter>インスタンスを作成すると、次の読み取り/書き込みプロパティは、次の初期値に設定されます。  
  
|プロパティ|初期値|  
|----------------|-------------------|  
|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|新しい <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|新しい <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|新しい <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|新しい <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 プロパティの別の呼び出しを使用して、これらのプロパティの値を変更できます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbDataAdapter : System.Data.Common.DbDataAdapter -&gt; System.Data.Common.DbDataAdapter" Usage="new System.Data.Common.DbDataAdapter adapter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">新しい <see langword="DataAdapter" /> の作成に使用する <see langword="DataAdapter" /> オブジェクト。</param>
        <summary>既存の同じ型のオブジェクトから、<see langword="DataAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>コンストラクターのこのオーバーロードは、複製実装で使用するために同様のコンストラクターを実装するときに、.NET Framework データプロバイダーによって使用されるように設計されています。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected virtual int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddToBatch : System.Data.IDbCommand -&gt; int&#xA;override this.AddToBatch : System.Data.IDbCommand -&gt; int" Usage="dbDataAdapter.AddToBatch command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="command">バッチに追加する <see cref="T:System.Data.IDbCommand" />。</param>
        <summary><see cref="T:System.Data.IDbCommand" /> を現在のバッチに追加します。</summary>
        <returns><see cref="T:System.Data.IDbCommand" /> を追加する前のバッチ内のコマンド数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 で<xref:System.Data.Common.DbDataAdapter>は、このメソッド<xref:System.NotSupportedException>はをスローします。 から<xref:System.Data.Common.DbDataAdapter>継承するクラスは、このメソッドをオーバーライドしてバッチのサポートを提供します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
        <block subset="none" type="overrides"><para>このメソッドは保護されており、.NET Framework データプロバイダーによって使用されるように設計されています。  
  
を<see cref="T:System.Data.Common.DbDataAdapter" />継承するクラスがバッチをサポートする場合、このクラスはこのメソッドをオーバーライドして、ユーザーがコマンドをバッチに追加できるようにします。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected virtual void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearBatch();" />
      <MemberSignature Language="F#" Value="abstract member ClearBatch : unit -&gt; unit&#xA;override this.ClearBatch : unit -&gt; unit" Usage="dbDataAdapter.ClearBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>バッチからすべての <see cref="T:System.Data.IDbCommand" /> オブジェクトを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 で<xref:System.Data.Common.DbDataAdapter>は、このメソッド<xref:System.NotSupportedException>はをスローします。 から<xref:System.Data.Common.DbDataAdapter>継承するクラスは、このメソッドをオーバーライドしてバッチのサポートを提供します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
        <block subset="none" type="overrides"><para>このメソッドは保護されており、.NET Framework データプロバイダーによって使用されるように設計されています。  
  
を<see cref="T:System.Data.Common.DbDataAdapter" />継承するクラスがバッチをサポートする場合、このクラスはこのメソッドをオーバーライドして、ユーザーがバッチからすべてのコマンドを削除できるようにします。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs&#xA;override this.CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs" Usage="dbDataAdapter.CreateRowUpdatedEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">データ ソースの更新に使用した <see cref="T:System.Data.DataRow" />。</param>
        <param name="command"><see cref="T:System.Data.IDbCommand" /> 処理中に実行した <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</param>
        <param name="statementType">コマンドが UPDATE、INSERT、DELETE、または SELECT ステートメントのいずれかを示す値。</param>
        <param name="tableMapping"><see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</param>
        <summary><see cref="T:System.Data.Common.RowUpdatedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <returns><see cref="T:System.Data.Common.RowUpdatedEventArgs" /> クラスの新しいインスタンス。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>派生クラス<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />でをオーバーライドする場合は、必ず基底クラスの<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />メソッドを呼び出してください。</para></block>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs&#xA;override this.CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs" Usage="dbDataAdapter.CreateRowUpdatingEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">データ ソースを更新する <see cref="T:System.Data.DataRow" />。</param>
        <param name="command"><see cref="T:System.Data.IDbCommand" /> 処理中に実行する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</param>
        <param name="statementType">コマンドが UPDATE、INSERT、DELETE、または SELECT ステートメントのいずれかを示す値。</param>
        <param name="tableMapping"><see cref="T:System.Data.Common.DataTableMapping" /> オブジェクト。</param>
        <summary><see cref="T:System.Data.Common.RowUpdatingEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <returns><see cref="T:System.Data.Common.RowUpdatingEventArgs" /> クラスの新しいインスタンス。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>派生クラス<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />でをオーバーライドする場合は、必ず基底クラスの<see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />メソッドを呼び出してください。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultSourceTableName">
      <MemberSignature Language="C#" Value="public const string DefaultSourceTableName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultSourceTableName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultSourceTableName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultSourceTableName;" />
      <MemberSignature Language="F#" Value="val mutable DefaultSourceTableName : string" Usage="System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.Common.DataAdapter" /> オブジェクトがテーブル マップに使用する既定の名前。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "Table" は、 <xref:System.Data.Common.DataAdapter>テーブルマッピングのオブジェクトによって使用される既定の名前です。  
  
 <xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName>は、アプリケーションがと共<xref:System.Data.Common.DbDataAdapter.Fill%2A>に使用するテーブルマッピングを追加するときに、 <xref:System.Data.DataTable>名前を指定しない場合です。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ DeleteCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ セットからレコードを削除するコマンドを取得または設定します。</summary>
        <value><see cref="T:System.Data.IDbCommand" /> 中に、データ セット内の削除された行に対応するデータ ソース内のレコードを削除するために使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の<xref:System.Data.Common.DbDataAdapter.Update%2A>間、このプロパティが設定されておらず、 <xref:System.Data.DataSet> <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>に主キー情報が含まれている場合は、が自動的に生成されます。  
  
   
  
## Examples  
 次の例では、派生<xref:System.Data.OleDb.OleDbDataAdapter>クラスを作成し、そのプロパティの一部を設定します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="dbDataAdapter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary><see cref="T:System.Data.Common.DbDataAdapter" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteBatch();" />
      <MemberSignature Language="F#" Value="abstract member ExecuteBatch : unit -&gt; int&#xA;override this.ExecuteBatch : unit -&gt; int" Usage="dbDataAdapter.ExecuteBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のバッチを実行します。</summary>
        <returns>バッチ内の直前のコマンドの戻り値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 で<xref:System.Data.Common.DbDataAdapter>は、このメソッド<xref:System.NotSupportedException>はをスローします。 から<xref:System.Data.Common.DbDataAdapter>継承するクラスは、このメソッドをオーバーライドしてバッチのサポートを提供します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>このメソッドは保護されており、.NET Framework データプロバイダーによって使用されるように設計されています。  
  
を<see cref="T:System.Data.Common.DbDataAdapter" />継承するクラスがバッチをサポートする場合、このクラスは、ユーザーがバッチを実行できるようにこのメソッドをオーバーライドします。 このメソッドを実装すると、アダプターのコマンドがバッチに結合され、バッチが実行されて、バッチの戻り値が返されます。</para></block>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Data.DataSet" /> または <see cref="T:System.Data.DataTable" /> にデータを読み込みます。</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public override int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
        <summary><see cref="T:System.Data.DataSet" /> 内の行を追加または更新します。</summary>
        <returns><see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Data.Common.DbDataAdapter.Fill%2A>は、SELECT ステートメントを使用してデータソースからデータを取得します。 Select <xref:System.Data.IDbConnection>コマンドに関連付けられたオブジェクトは有効である必要がありますが、開く必要はありません。 が呼び出さ<xref:System.Data.IDbConnection>れる前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>が閉じられている場合は、データを取得して閉じた後で、を開きます。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>接続が開いている場合は、開いたままになります。  
  
 データテーブルの読み込み中にエラーまたは例外が発生した場合、エラーが発生する前に追加された行はデータテーブルに残ります。 残りの操作は中止されます。  
  
 コマンドが行を返さない場合、にテーブルは追加<xref:System.Data.DataSet>されず、例外も発生しません。  
  
 の設定<xref:System.Data.Common.DbDataAdapter>中にオブジェクトが重複する<xref:System.Data.DataTable>列を検出した場合、"*columnname*1"、"*columnname*2"、"*columnname*3" などのパターンを使用して、後続の列の名前が生成されます。 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに配置されます。  
  
 指定されたクエリが複数の結果を返す場合、クエリを返す各行の結果セットは別のテーブルに配置されます。 追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。 行を返さないクエリに対してテーブルが作成されていないため、insert クエリを処理してから select クエリを実行すると、select クエリに対して作成されたテーブルには、最初に作成されたテーブルであるため、"Table" という名前が付けられます。 列名とテーブル名を使用するアプリケーションでは、これらの名前付けパターンとの競合が発生しないようにする必要があります。  
  
 を設定<xref:System.Data.DataSet>するために使用される SELECT ステートメントが複数の結果 (バッチ SQL ステートメントなど) を返す場合、結果の1つにエラーが含まれていると、後続<xref:System.Data.DataSet>の結果はすべてスキップされ、には追加されません。  
  
 後続<xref:System.Data.Common.DbDataAdapter.Fill%2A>の呼び出しを使用しての内容を<xref:System.Data.DataSet>更新する場合は、次の2つの条件が満たされている必要があります。  
  
1.  SQL ステートメントは、 <xref:System.Data.DataSet>を設定するために最初に使用したものと一致している必要があります。  
  
2.  **キー**列の情報が存在している必要があります。  
  
 主キーの情報が存在する場合は、重複行が調整され、に<xref:System.Data.DataTable>対応<xref:System.Data.DataSet>するに1回だけ表示されます。 主キーの情報は<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>、の<xref:System.Data.DataTable.PrimaryKey%2A> <xref:System.Data.DataTable>プロパティを指定するか、 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>プロパティをに設定する`AddWithKey`ことによって設定できます。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複行が正しく解決されるようにするには、主キーを明示的に定義する必要があります。 詳細については、「[主キーの定義](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)」を参照してください。  
  
> [!NOTE]
>  複数の結果を返すバッチ SQL ステートメントを処理する場合、 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB の .NET Framework Data Provider のの実装では、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>には<xref:System.Data.MissingSchemaAction> 、を`AddWithKey`に設定してを使用します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Fill dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">テーブル マップに使用する <see cref="T:System.Data.DataTable" /> の名前。</param>
        <summary><see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の指定した範囲の行を追加または更新します。</summary>
        <returns><see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Data.Common.DbDataAdapter.Fill%2A>は、関連付けられている<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティによって指定された select ステートメントを使用して、データソースから行を取得します。 SELECT ステートメントに関連付けられている接続オブジェクトは有効である必要がありますが、開く必要はありません。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>接続が閉じられた場合は、データを取得して閉じた状態で接続が開かれます。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>接続が開いている場合は、開いたままになります。  
  
 次に、の<xref:System.Data.DataTable> <xref:System.Data.DataSet>変換先オブジェクトに行を追加し、オブジェクト<xref:System.Data.DataTable>がまだ存在しない場合は作成します。 <xref:System.Data.Common.DbDataAdapter.Fill%2A> オブジェクトを<xref:System.Data.DataTable>作成する場合<xref:System.Data.Common.DbDataAdapter.Fill%2A> 、操作では通常、列名のメタデータのみが作成されます。 ただし、プロパティが<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>に`AddWithKey`設定されている場合は、適切な主キーと制約も作成されます。  
  
 <xref:System.Data.DataTable>がの設定中に重複する列を** 検出すると、"columnname1"、"columnname2"、"columnname3"などのパターンを使用して、後続の列の名前が生成され<xref:System.Data.Common.DbDataAdapter>ます。**** 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに配置されます。 複数の結果セットがに追加さ<xref:System.Data.DataSet>れると、それぞれの結果セットが別のテーブルに配置されます。  
  
 パラメーターとし<xref:System.Data.Common.DbDataAdapter.Fill%2A>てを`DataTable`受け取るのオーバーロードは、最初の結果のみを取得します。 複数の結果を<xref:System.Data.Common.DbDataAdapter.Fill%2A>取得する`DataSet`ために、パラメーターとしてを受け取るのオーバーロードを使用します。  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.Fill%2A>は、に大文字<xref:System.Data.DataSet>と小<xref:System.Data.DataTable>文字のみが異なる名前を持つ複数のオブジェクトが含まれるシナリオをサポートします。 このような場合<xref:System.Data.Common.DbDataAdapter.Fill%2A> 、は大文字と小文字を区別する比較を実行して対応するテーブルを検索し、完全一致が存在しない場合は新しいテーブルを作成します。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
 dataset.Tables.Add("AAA");  
 adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
    adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 が<xref:System.Data.Common.DbDataAdapter.Fill%2A>呼び出され、に<xref:System.Data.DataSet>含ま<xref:System.Data.DataTable>れる名前が大文字と小文字<xref:System.Data.DataTable>のみで異なる場合は、が更新されます。 このシナリオでは、比較で大文字と小文字が区別されます。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 同じ<xref:System.Data.DataTable>でメソッドを複数回使用できます。 主キーが存在する場合、受信した行は、既に存在する一致する行とマージされます。 主キーが存在しない場合は、受信した<xref:System.Data.DataTable>行がに追加されます。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複行が正しく解決されるようにするには、主キーを明示的に定義する必要があります。 詳細については、「[主キーの定義](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)」を参照してください。  
  
> [!NOTE]
>  複数の結果を返すバッチ SQL ステートメントを処理する場合、 <xref:System.Data.Common.DbDataAdapter.Fill%2A> .NET Framework <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>データプロバイダーのとの実装では、最初の結果のみのスキーマ情報を取得します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
        <block subset="none" type="overrides"><para>この<see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />メソッドのオーバーロードは保護されており、.NET Framework データプロバイダーによって使用されるように設計されています。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
        <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
        <summary><see cref="T:System.Data.DataSet" /> 名および <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の列と一致するように <see cref="T:System.Data.DataTable" /> 内の行を追加または更新します。</summary>
        <returns><see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Data.Common.DbDataAdapter.Fill%2A>は、SELECT ステートメントを使用してデータソースからデータを取得します。 Select <xref:System.Data.IDbConnection>コマンドに関連付けられたオブジェクトは有効である必要がありますが、開く必要はありません。 が呼び出さ<xref:System.Data.IDbConnection>れる前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>が閉じられている場合は、データを取得して閉じた状態で、を開きます。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>接続が開いている場合は、開いたままになります。  
  
 コマンドが行を返さない場合、にテーブルは追加<xref:System.Data.DataSet>されず、例外も発生しません。  
  
 の設定<xref:System.Data.Common.DbDataAdapter>中にオブジェクトが重複する<xref:System.Data.DataTable>列を検出すると、"columnname1"、"columnname2"、"columnname3" などのパターンを使用して、後続の列の名前が生成されます。 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに配置されます。  
  
 指定したクエリで複数の結果が返された場合は、各結果セットが個別のテーブルに配置されます。 追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。 行を返さないクエリに対してテーブルが作成されていないため、挿入クエリを処理してから select クエリを実行すると、select クエリに対して作成されたテーブルには "Table" という名前が付けられます。これは最初に作成されたテーブルであるためです。 列名とテーブル名を使用するアプリケーションでは、これらの名前付けパターンとの競合が発生しないようにする必要があります。  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.Fill%2A>は、に大文字<xref:System.Data.DataSet>と小<xref:System.Data.DataTable>文字のみが異なる名前を持つ複数のオブジェクトが含まれるシナリオをサポートします。 このような場合<xref:System.Data.Common.DbDataAdapter.Fill%2A> 、は大文字と小文字を区別する比較を実行して対応するテーブルを検索し、完全一致が存在しない場合は新しいテーブルを作成します。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 が<xref:System.Data.Common.DbDataAdapter.Fill%2A>呼び出され、に<xref:System.Data.DataSet>含ま<xref:System.Data.DataTable>れる名前が大文字と小文字<xref:System.Data.DataTable>のみで異なる場合は、が更新されます。 このシナリオでは、比較で大文字と小文字が区別されます。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 データテーブルの読み込み中にエラーまたは例外が発生した場合、エラーが発生する前に追加された行はデータテーブルに残ります。 残りの操作は中止されます。  
  
 を設定<xref:System.Data.DataSet>するために使用する select ステートメントでバッチ SQL ステートメントなどの複数の結果が返される場合は、次の点に注意してください。  
  
-   結果の1つにエラーが含まれている場合は、後続のすべての結果<xref:System.Data.DataSet>がスキップされ、には追加されません。  
  
 後続<xref:System.Data.Common.DbDataAdapter.Fill%2A>の呼び出しを使用しての内容を<xref:System.Data.DataSet>更新する場合は、次の2つの条件が満たされている必要があります。  
  
1.  SQL ステートメントは、 <xref:System.Data.DataSet>を設定するために最初に使用したものと一致している必要があります。  
  
2.  **キー**列の情報が存在している必要があります。 主キーの情報が存在する場合は、重複行が調整され、に<xref:System.Data.DataTable>対応<xref:System.Data.DataSet>するに1回だけ表示されます。 主キーの情報は<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>、の<xref:System.Data.DataTable.PrimaryKey%2A> <xref:System.Data.DataTable>プロパティを指定するか、 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>プロパティをに設定する`AddWithKey`ことによって設定できます。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複行が正しく解決されるようにするには、主キーを明示的に定義する必要があります。 詳細については、「[主キーの定義](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)」を参照してください。  
  
> [!NOTE]
>  複数の結果を返すバッチ SQL ステートメントを処理する場合、 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB の .NET Framework Data Provider のの実装では、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>には<xref:System.Data.MissingSchemaAction> 、を`AddWithKey`に設定してを使用します。  
  
   
  
## Examples  
 次の例では、派生クラス<xref:System.Data.OleDb.OleDbDataAdapter>を使用して<xref:System.Data.DataSet> 、に categories テーブルの行を格納します。 この例では、 <xref:System.Data.OleDb.OleDbDataAdapter> <xref:System.Data.DataSet>とが作成されていることを前提としています。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">ソース テーブルが無効です。</exception>
        <block subset="none" type="overrides"><para>派生クラス<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />でをオーバーライドする場合は、必ず基底クラスの<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />メソッドを呼び出してください。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDataReader ^ dataReader);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDataReader -&gt; int" Usage="dbDataAdapter.Fill (dataTable, dataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="dataTable">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataTable" />。</param>
        <param name="dataReader"><see cref="T:System.Data.IDataReader" /> の名前。</param>
        <summary>指定した <see cref="T:System.Data.DataTable" /> と <see cref="T:System.Data.IDataReader" /> の名前を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の行を追加または更新します。</summary>
        <returns><see cref="T:System.Data.DataTable" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataTable" />。</param>
        <param name="command">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 値のいずれか。</param>
        <summary>指定した <see cref="T:System.Data.DataTable" />、<see cref="T:System.Data.DataTable" />、および <see cref="T:System.Data.IDbCommand" /> を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.CommandBehavior" /> 内の行を追加または更新します。</summary>
        <returns><see cref="T:System.Data.DataTable" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Data.Common.DbDataAdapter.Fill%2A>は、関連付けられている<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティによって指定された select ステートメントを使用して、データソースから行を取得します。 SELECT ステートメントに関連付けられている接続オブジェクトは有効である必要がありますが、開く必要はありません。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>接続が閉じられた場合は、データを取得して閉じたときに、接続が開かれます。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>接続が開いている場合は、開いたままになります。  
  
 次に、内<xref:System.Data.DataTable> <xref:System.Data.DataSet>の指定した変換先オブジェクトに行が追加され、オブジェクトがまだ存在しない場合は作成されます。<xref:System.Data.DataTable> <xref:System.Data.Common.DbDataAdapter.Fill%2A> オブジェクトを<xref:System.Data.DataTable>作成する場合、 <xref:System.Data.Common.DbDataAdapter.Fill%2A>操作では通常、列名のメタデータのみが作成されます。 ただし、プロパティが<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>に`AddWithKey`設定されている場合は、適切な主キーと制約も作成されます。  
  
 の設定<xref:System.Data.Common.DbDataAdapter>中にオブジェクトが重複する<xref:System.Data.DataTable>列を検出すると、"*columnname*1"、"*columnname*2"、"*columnname*3" などのパターンを使用して、後続の列の名前が生成されます。 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに配置されます。  
  
 パラメーターとし<xref:System.Data.Common.DbDataAdapter.Fill%2A>てを`DataTable`受け取るのオーバーロードは、最初の結果のみを取得します。 複数の結果を<xref:System.Data.Common.DbDataAdapter.Fill%2A>取得する`DataSet`ために、パラメーターとしてを受け取るのオーバーロードを使用します。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 同じ<xref:System.Data.DataTable>でメソッドを複数回使用できます。 主キーが存在する場合、受信した行は、既に存在する一致する行とマージされます。 主キーが存在しない場合は、受信した<xref:System.Data.DataTable>行がに追加されます。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複行が正しく解決されるようにするには、主キーを明示的に定義する必要があります。 詳細については、「[主キーの定義](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)」を参照してください。  
  
> [!NOTE]
>  複数の結果を返すバッチ SQL ステートメントを処理する場合、 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB の .NET Framework Data Provider のの実装では、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>には<xref:System.Data.MissingSchemaAction> 、を`AddWithKey`に設定してを使用します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>この<see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />メソッドのオーバーロードは保護されており、.NET Framework データプロバイダーによって使用されるように設計されています。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (int startRecord, int maxRecords, params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(int32 startRecord, int32 maxRecords, class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (startRecord As Integer, maxRecords As Integer, ParamArray dataTables As DataTable()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(int startRecord, int maxRecords, ... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="override this.Fill : int * int * System.Data.DataTable[] -&gt; int" Usage="dbDataAdapter.Fill (startRecord, maxRecords, dataTables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRecord" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startRecord">取得を開始する、0 から始まるレコード番号。</param>
        <param name="maxRecords">取得するレコードの最大数。</param>
        <param name="dataTables">データ ソースから読み込む <see cref="T:System.Data.DataTable" /> オブジェクト。</param>
        <summary>指定したレコード位置で開始し、指定した最大数のレコードを読み込んで、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の行を追加または更新します。</summary>
        <returns><see cref="T:System.Data.DataTable" /> で正常に追加または更新された行数。 この値には、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Data.Common.DataAdapter.Fill%2A>は、関連付けられている<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティによって指定された select ステートメントを使用して、データソースから行を取得します。 SELECT ステートメントに関連付けられている接続オブジェクトは有効である必要がありますが、開く必要はありません。 が呼び出される前に<xref:System.Data.Common.DataAdapter.Fill%2A>接続が閉じられた場合は、データを取得するために開かれた後、閉じられます。 が呼び出される前に<xref:System.Data.Common.DataAdapter.Fill%2A>接続が開いている場合は、開いたままになります。  
  
 次に、の<xref:System.Data.DataTable> <xref:System.Data.DataSet>変換先オブジェクトに行を追加し、オブジェクト<xref:System.Data.DataTable>がまだ存在しない場合は作成します。 <xref:System.Data.Common.DataAdapter.Fill%2A> オブジェクトを<xref:System.Data.DataTable>作成する場合<xref:System.Data.Common.DataAdapter.Fill%2A> 、操作では通常、列名のメタデータのみが作成されます。 ただし、プロパティが<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>に`AddWithKey`設定されている場合は、適切な主キーと制約も作成されます。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複行が正しく解決されるようにするには、主キーを明示的に定義する必要があります。 詳細については、「[主キーの定義](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)」を参照してください。  
  
 データアダプターがを設定するときに重複する<xref:System.Data.DataTable>列を検出すると、"columnname1"、"columnname2"、"columnname3" などのパターンを使用して、後続の列の名前が生成されます。 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに配置されます。 複数の<xref:System.Data.DataSet>結果セットがに追加された場合、各結果セットは別のテーブルに配置されます。 追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。 列名とテーブル名を使用するアプリケーションでは、これらの名前付けパターンとの競合が発生しないようにする必要があります。  
  
 を設定<xref:System.Data.DataSet>するために使用する SELECT ステートメントで、バッチ SQL ステートメントなどの複数の結果が返される場合、結果の1つ<xref:System.Data.DataSet>にエラーが含まれていると、後続の結果はすべてスキップされ、には追加されません。  
  
 <xref:System.Data.Common.DataAdapter.Fill%2A> 同じ<xref:System.Data.DataTable>でメソッドを複数回使用できます。 主キーが存在する場合、受信した行は、既に存在する一致する行とマージされます。 主キーが存在しない場合は、受信した<xref:System.Data.DataTable>行がに追加されます。  
  
> [!NOTE]
>  複数の結果を返すバッチ SQL ステートメントを処理する場合、 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB の .NET Framework Data Provider のの実装では、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>には<xref:System.Data.MissingSchemaAction> 、を`AddWithKey`に設定してを使用します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
        <param name="startRecord">取得を開始する、0 から始まるレコード番号。</param>
        <param name="maxRecords">取得するレコードの最大数。</param>
        <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
        <summary><see cref="T:System.Data.DataSet" /> 名および <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の指定した範囲の行を追加または更新します。</summary>
        <returns><see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値`maxRecords` 0 は、開始レコードの後に見つかったすべてのレコードを取得します。 が`maxRecords`残りの行の数よりも大きい場合は、残りの行のみが返され、エラーは発行されません。  
  
 対応する select コマンドが複数の結果を返すステートメントで<xref:System.Data.Common.DbDataAdapter.Fill%2A>ある場合`maxRecords` 、は最初の結果にのみ適用されます。  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.Fill%2A>は、SELECT ステートメントを使用してデータソースからデータを取得します。 SELECT <xref:System.Data.IDbConnection>ステートメントに関連付けられたオブジェクトは有効である必要がありますが、開く必要はありません。 が呼び出さ<xref:System.Data.IDbConnection>れる前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>が閉じられている場合は、データを取得して閉じた後で、を開きます。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>接続が開いている場合は、開いたままになります。  
  
 コマンドが行を返さない場合、に<xref:System.Data.DataSet>テーブルは追加されませんが、例外は発生しません。  
  
 の設定<xref:System.Data.Common.DbDataAdapter>中にオブジェクトが重複する<xref:System.Data.DataTable>列を検出すると、"*columnname*1"、"*columnname*2"、"*columnname*3" などのパターンを使用して、後続の列の名前が生成されます。 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに配置されます。  
  
 指定したクエリで複数の結果が返された場合は、各結果セットが個別のテーブルに配置されます。 追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。 行を返さないクエリに対してテーブルが作成されていないため、insert クエリを処理してから select クエリを実行すると、select クエリに対して作成されたテーブルには "Table" という名前が付けられます。これは、最初に作成されたテーブルであるためです。 列名とテーブル名を使用するアプリケーションでは、これらの名前付けパターンとの競合が発生しないようにする必要があります。  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.Fill%2A>は、に大文字<xref:System.Data.DataSet>と小<xref:System.Data.DataTable>文字のみが異なる名前を持つ複数のオブジェクトが含まれるシナリオをサポートします。 このような場合<xref:System.Data.Common.DbDataAdapter.Fill%2A> 、は大文字と小文字を区別する比較を実行して対応するテーブルを検索し、完全一致が存在しない場合は新しいテーブルを作成します。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 が<xref:System.Data.Common.DbDataAdapter.Fill%2A>呼び出され、に<xref:System.Data.DataSet>含ま<xref:System.Data.DataTable>れる名前が大文字と小文字<xref:System.Data.DataTable>のみで異なる場合は、が更新されます。 このシナリオでは、比較で大文字と小文字が区別されます。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 データテーブルの読み込み中にエラーまたは例外が発生した場合、エラーが発生する前に追加された行はデータテーブルに残ります。 残りの操作は中止されます。  
  
 を設定<xref:System.Data.DataSet>するために使用する select ステートメントで、バッチ SQL ステートメントなどの複数の結果が返される場合は、次の点に注意してください。  
  
-   バッチ SQL ステートメントから複数の結果を処理する`maxRecords`場合、は最初の結果にのみ適用されます。 これは、チャプター結果を含む行にも当てはまります (OLE DB の .NET Framework Data Provider)。 最上位レベルの結果はに`maxRecords`よって制限されますが、すべての子行が追加されます。  
  
-   結果の1つにエラーが含まれている場合は、後続のすべての結果<xref:System.Data.DataSet>がスキップされ、には追加されません。  
  
 後続<xref:System.Data.Common.DbDataAdapter.Fill%2A>の呼び出しを使用しての内容を<xref:System.Data.DataSet>更新する場合は、次の2つの条件が満たされている必要があります。  
  
1.  SQL ステートメントは、 <xref:System.Data.DataSet>を設定するために最初に使用したものと一致している必要があります。  
  
2.  **キー**列の情報が存在している必要があります。  
  
 主キーの情報が存在する場合は、重複する行が調整され、に<xref:System.Data.DataTable>対応<xref:System.Data.DataSet>するに1回だけ表示されます。 主キーの情報は<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>、の<xref:System.Data.DataTable.PrimaryKey%2A> <xref:System.Data.DataTable>プロパティを指定するか、 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>プロパティをに設定する`AddWithKey`ことによって設定できます。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複行が正しく解決されるようにするには、主キーを明示的に定義する必要があります。 詳細については、「[主キーの定義](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)」を参照してください。  
  
> [!NOTE]
>  複数の結果を返すバッチ SQL ステートメントを処理する場合、 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB の .NET Framework Data Provider のの実装では、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>には<xref:System.Data.MissingSchemaAction> 、を`AddWithKey`に設定してを使用します。  
  
> [!NOTE]
>  に`DataSet`は、によって`maxRecords`示されるレコード数を超える値は含まれません。 ただし、クエリによって生成された結果セット全体がサーバーから返されます。  
  
   
  
## Examples  
 次の例では、派生クラス<xref:System.Data.OleDb.OleDbDataAdapter>を使用して<xref:System.Data.DataSet> 、行10から始まる15行を**Categories**テーブルからに格納します。 この例では、 <xref:System.Data.OleDb.OleDbDataAdapter> <xref:System.Data.DataSet>とが作成されていることを前提としています。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。  
  
 - または -  
  
 接続が無効です。</exception>
        <exception cref="T:System.InvalidCastException">接続が見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> パラメーターが 0 未満です。  
  
または 
<paramref name="maxRecords" /> パラメーターが 0 未満です。</exception>
        <block subset="none" type="overrides"><para>派生クラス<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />でをオーバーライドする場合は、必ず基底クラスの<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />メソッドを呼び出してください。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, string srcTable, class System.Data.IDataReader dataReader, int32 startRecord, int32 maxRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable, System::Data::IDataReader ^ dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string * System.Data.IDataReader * int * int -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable, dataReader, startRecord, maxRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="srcTable" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" Index="2" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="startRecord" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
        <param name="srcTable">テーブル マップに使用する <see cref="T:System.Data.DataTable" /> の名前。</param>
        <param name="dataReader"><see cref="T:System.Data.IDataReader" /> の名前。</param>
        <param name="startRecord">取得を開始する、0 から始まるレコード番号。</param>
        <param name="maxRecords">取得するレコードの最大数。</param>
        <summary><see cref="T:System.Data.DataSet" />、<see cref="T:System.Data.DataTable" />、<see cref="T:System.Data.IDataReader" /> の名前を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataSet" /> 内の指定した範囲の行を追加または更新します。</summary>
        <returns><see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, int32 startRecord, int32 maxRecords, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), startRecord As Integer, maxRecords As Integer, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, int startRecord, int maxRecords, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable[] * int * int * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTables, startRecord, maxRecords, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startRecord" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="command" Type="System.Data.IDbCommand" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dataTables">データ ソースから読み込む <see cref="T:System.Data.DataTable" /> オブジェクト。</param>
        <param name="startRecord">取得を開始する、0 から始まるレコード番号。</param>
        <param name="maxRecords">取得するレコードの最大数。</param>
        <param name="command"><see cref="T:System.Data.IDbCommand" /> オブジェクトにデータを読み込むために実行する <see cref="T:System.Data.DataTable" />。</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
        <summary><see cref="T:System.Data.DataSet" /> 名および <see cref="T:System.Data.DataSet" /> 名を使用して、データ ソース内の行と一致するように、<see cref="T:System.Data.DataTable" /> 内の指定した範囲の行を追加または更新します。</summary>
        <returns>データ テーブルで追加または更新された行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値`maxRecords` 0 は、開始レコードの後に見つかったすべてのレコードを取得します。 が`maxRecords`残りの行の数よりも大きい場合は、残りの行のみが返され、エラーは発行されません。  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.Fill%2A>は、SELECT ステートメントを使用してデータソースからデータを取得します。 SELECT <xref:System.Data.IDbConnection>ステートメントに関連付けられたオブジェクトは有効である必要がありますが、開く必要はありません。 が呼び出さ<xref:System.Data.IDbConnection>れる前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>が閉じられている場合は、データを取得して閉じた状態で、を開きます。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>接続が開いている場合は、開いたままになります。  
  
 コマンドが行を返さない場合、に<xref:System.Data.DataSet>テーブルは追加されませんが、例外は発生しません。  
  
 の設定<xref:System.Data.Common.DbDataAdapter>中にオブジェクトが重複する<xref:System.Data.DataTable>列を検出すると、"*columnname*1"、"*columnname*2"、"*columnname*3" などのパターンを使用して、後続の列の名前が生成されます。 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに配置されます。  
  
 指定したクエリで複数の結果が返された場合は、各結果セットが個別のテーブルに配置されます。 追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。 行を返さないクエリに対してテーブルが作成されていないため、挿入クエリを処理してから select クエリを実行すると、select クエリに対して作成されたテーブルには "Table" という名前が付けられます。これは最初に作成されたテーブルであるためです。 列名とテーブル名を使用するアプリケーションでは、これらの名前付けパターンとの競合が発生しないようにする必要があります。  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.Fill%2A>は、に大文字<xref:System.Data.DataSet>と小<xref:System.Data.DataTable>文字のみが異なる名前を持つ複数のオブジェクトが含まれるシナリオをサポートします。 このような場合<xref:System.Data.Common.DbDataAdapter.Fill%2A> 、は大文字と小文字を区別する比較を実行して対応するテーブルを検索し、完全一致が存在しない場合は新しいテーブルを作成します。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 が<xref:System.Data.Common.DbDataAdapter.Fill%2A>呼び出され、に<xref:System.Data.DataSet>含ま<xref:System.Data.DataTable>れる名前が大文字と小文字<xref:System.Data.DataTable>のみで異なる場合は、が更新されます。 このシナリオでは、比較で大文字と小文字が区別されます。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 データテーブルの読み込み中にエラーまたは例外が発生した場合、エラーが発生する前に追加された行はデータテーブルに残ります。 残りの操作は中止されます。  
  
 <xref:System.Data.DataTable>オブジェクトを設定するために使用される SELECT ステートメントでバッチ SQL ステートメントなどの複数の結果が返される場合は、次の点に注意してください。  
  
-   バッチ SQL ステートメントから複数の結果を処理する`maxRecords`場合、は最初の結果にのみ適用されます。 これは、チャプター結果を含む行にも当てはまります (OLE DB の .NET Framework Data Provider)。 最上位レベルの結果はに`maxRecords`よって制限されますが、すべての子行が追加されます。  
  
-   結果の1つにエラーが含まれている場合は、後続のすべての結果がスキップされます。  
  
> [!NOTE]
>  に`DataSet`は、によって`maxRecords`示されるレコード数を超える値は含まれません。 ただし、クエリによって生成された結果セット全体がサーバーから返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。  
  
 - または -  
  
 接続が無効です。</exception>
        <exception cref="T:System.InvalidCastException">接続が見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> パラメーターが 0 未満です。  
  
または 
<paramref name="maxRecords" /> パラメーターが 0 未満です。</exception>
        <block subset="none" type="overrides"><para>派生クラス<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />でをオーバーライドする場合は、必ず基底クラスの<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />メソッドを呼び出してください。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">レコードおよび必要に応じてスキーマを格納するための <see cref="T:System.Data.DataSet" />。</param>
        <param name="startRecord">取得を開始する、0 から始まるレコード番号。</param>
        <param name="maxRecords">取得するレコードの最大数。</param>
        <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
        <param name="command">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
        <summary><see cref="T:System.Data.DataSet" /> 名、ソース テーブル名、コマンド文字列、およびコマンド動作を使用して、データ ソース内の列と一致するように、<see cref="T:System.Data.DataSet" /> 内の指定した範囲の行を追加または更新します。</summary>
        <returns><see cref="T:System.Data.DataSet" /> で正常に追加または更新された行数。 これには、行を返さないステートメントの影響を受ける行は含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Data.Common.DbDataAdapter.Fill%2A>は、関連付けられている<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティによって指定された select ステートメントを使用して、データソースから行を取得します。 SELECT ステートメントに関連付けられている接続オブジェクトは有効である必要がありますが、開く必要はありません。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>接続が閉じられた場合は、データを取得して閉じた状態で接続が開かれます。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.Fill%2A>接続が開いている場合は、開いたままになります。  
  
 次に、の<xref:System.Data.DataTable> <xref:System.Data.DataSet>変換先オブジェクトに行を追加し、オブジェクト<xref:System.Data.DataTable>がまだ存在しない場合は作成します。 <xref:System.Data.Common.DbDataAdapter.Fill%2A> オブジェクトを<xref:System.Data.DataTable>作成する場合<xref:System.Data.Common.DbDataAdapter.Fill%2A> 、操作では通常、列名のメタデータのみが作成されます。 ただし、プロパティが<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>に`AddWithKey`設定されている場合は、適切な主キーと制約も作成されます。  
  
 <xref:System.Data.DataTable>がの設定中に重複する列を** 検出すると、"columnname1"、"columnname2"、"columnname3"などのパターンを使用して、後続の列の名前が生成され<xref:System.Data.Common.DbDataAdapter>ます。**** 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに配置されます。 複数の結果セットがに追加さ<xref:System.Data.DataSet>れると、それぞれの結果セットが別のテーブルに配置されます。 追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。 列名とテーブル名を使用するアプリケーションでは、これらの名前付けパターンとの競合が発生しないようにする必要があります。  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.Fill%2A>は、に大文字<xref:System.Data.DataSet>と小<xref:System.Data.DataTable>文字のみが異なる名前を持つ複数のオブジェクトが含まれるシナリオをサポートします。 このような場合<xref:System.Data.Common.DbDataAdapter.Fill%2A> 、は大文字と小文字を区別する比較を実行して対応するテーブルを検索し、完全一致が存在しない場合は新しいテーブルを作成します。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 が<xref:System.Data.Common.DbDataAdapter.Fill%2A>呼び出され、に<xref:System.Data.DataSet>含ま<xref:System.Data.DataTable>れる名前が大文字と小文字<xref:System.Data.DataTable>のみで異なる場合は、が更新されます。 このシナリオでは、比較で大文字と小文字が区別されます。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 同じ<xref:System.Data.DataTable>でメソッドを複数回使用できます。 主キーが存在する場合、受信した行は、既に存在する一致する行とマージされます。 主キーが存在しない場合は、受信した<xref:System.Data.DataTable>行がに追加されます。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、 `DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable>値を設定しません。 重複行が正しく解決されるようにするには、主キーを明示的に定義する必要があります。 詳細については、「[主キーの定義](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)」を参照してください。  
  
> [!NOTE]
>  複数の結果を返すバッチ SQL ステートメントを処理する場合、 <xref:System.Data.Common.DbDataAdapter.Fill%2A> .NET Framework <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>データプロバイダーのとの実装では、最初の結果のみのスキーマ情報を取得します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> パラメーターが 0 未満です。  
  
- または - 
<paramref name="maxRecords" /> パラメーターが 0 未満です。</exception>
        <block subset="none" type="overrides"><para>この<see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />メソッドのオーバーロードは保護されており、.NET Framework データプロバイダーによって使用されるように設計されています。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FillCommandBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Data.CommandBehavior FillCommandBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandBehavior FillCommandBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property FillCommandBehavior As CommandBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Data::CommandBehavior FillCommandBehavior { System::Data::CommandBehavior get(); void set(System::Data::CommandBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.FillCommandBehavior : System.Data.CommandBehavior with get, set" Usage="System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ アダプターにデータを読み込むコマンドの動作を取得または設定します。</summary>
        <value>データ アダプターにデータを読み込むコマンドの <see cref="T:System.Data.CommandBehavior" />。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FillError">
      <MemberSignature Language="C#" Value="public event System.Data.FillErrorEventHandler FillError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.FillErrorEventHandler FillError" />
      <MemberSignature Language="DocId" Value="E:System.Data.Common.DbDataAdapter.FillError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FillError As FillErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::FillErrorEventHandler ^ FillError;" />
      <MemberSignature Language="F#" Value="member this.FillError : System.Data.FillErrorEventHandler " Usage="member this.FillError : System.Data.FillErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbDataAdapter_FillError")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.FillErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>格納操作中にエラーが発生したときに返されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Data.DataTable" /> を <see cref="T:System.Data.DataSet" /> に追加し、データ ソース内のスキーマと一致するようにスキーマを設定します。</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">スキーマを挿入する <see cref="T:System.Data.DataSet" />。</param>
        <param name="schemaType">スキーマを挿入する方法を指定する <see cref="T:System.Data.SchemaType" /> 値の 1 つ。</param>
        <summary>"Table" という名前の <see cref="T:System.Data.DataTable" /> を指定された <see cref="T:System.Data.DataSet" /> に追加し、指定された <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソースにあるスキーマと一致するようにスキーマを構成します。</summary>
        <returns><see cref="T:System.Data.DataTable" /> に追加された <see cref="T:System.Data.DataSet" /> オブジェクトのコレクションへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>を使用して、データソースからスキーマ情報を取得します。  
  
 操作<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>は、を<xref:System.Data.DataTable>変換先<xref:System.Data.DataSet>に追加します。 次に<xref:System.Data.DataColumnCollection> 、 <xref:System.Data.DataTable>のに列を追加し、データソースに<xref:System.Data.DataColumn>次のプロパティが存在する場合はそれを構成します。  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 とを<xref:System.Data.DataColumn.AutoIncrementStep%2A> <xref:System.Data.DataColumn.AutoIncrementSeed%2A>個別に設定する必要があります。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>また、は<xref:System.Data.DataTable.PrimaryKey%2A> 、 <xref:System.Data.DataTable.Constraints%2A>次の規則に従ってプロパティとプロパティを構成します。  
  
-   1つ以上の主キー列がによって<xref:System.Data.IDbDataAdapter.SelectCommand%2A>返された場合は、の主キー列<xref:System.Data.DataTable>として使用されます。  
  
-   主キー列が返されず、一意の列がの場合は、一意の列が主キーとして使用されます。の場合は、すべての一意の列が null 値の場合に限ります。 Null 値を許容<xref:System.Data.UniqueConstraint>する列がある場合は、がに追加<xref:System.Data.ConstraintCollection>され<xref:System.Data.DataTable.PrimaryKey%2A>ますが、プロパティは設定されません。  
  
-   主キー列と一意の列の両方が返された場合、主キー列がの主キー列<xref:System.Data.DataTable>として使用されます。  
  
 前の規則に従って、主キーと一意<xref:System.Data.ConstraintCollection>の制約がに追加されることに注意してくださいが、その他の制約の種類は追加されません。  
  
 SQL Server テーブルの1つまたは複数の列に一意のクラスター化インデックスが定義されていて、primary key 制約が別の列のセットに対して定義されている場合、クラスター化インデックス内の列の名前が返されます。 主キー列の名前または名前を取得するには、主キーインデックスの名前を指定する SELECT ステートメントでクエリヒントを使用します。 クエリヒントの指定の詳細については、「[クエリヒント (transact-sql)](https://msdn.microsoft.com/library/ms181714.aspx)」を参照してください。  
  
 キー列が一致<xref:System.Data.Common.DbDataAdapter.Fill%2A>する行を検索して置換するために、で主キー情報が使用されます。 これが目的の動作でない場合は<xref:System.Data.Common.DbDataAdapter.Fill%2A> 、スキーマ情報を要求せずにを使用します。  
  
 <xref:System.Data.DataTable>がの設定中に重複する列を** 検出すると、"columnname1"、"columnname2"、"columnname3"などのパターンを使用して、後続の列の名前が生成され<xref:System.Data.IDataAdapter>ます。**** 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに配置されます。 複数の結果セットがに追加さ<xref:System.Data.DataSet>れると、それぞれの結果セットが別のテーブルに配置されます。 追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。 列名とテーブル名を使用するアプリケーションでは、これらの名前付けパターンとの競合が発生しないようにする必要があります。  
  
 Select <xref:System.Data.IDbConnection>コマンドに関連付けられたオブジェクトは有効である必要がありますが、を開く必要はありません。 が呼び出さ<xref:System.Data.IDbConnection>れる前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が閉じられている場合は、データを取得して閉じた状態で、を開きます。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>接続が開いている場合は、開いたままになります。  
  
> [!NOTE]
>  複数の結果を返すバッチ SQL ステートメントを処理する場合、 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB の .NET Framework Data Provider のの実装では、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>には<xref:System.Data.MissingSchemaAction> 、を`AddWithKey`に設定してを使用します。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。 SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。 詳細については、「[SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)」をご覧ください。
  
   
  
## Examples  
 次の例では、派生クラス<xref:System.Data.SqlClient.SqlDataAdapter>を使用して<xref:System.Data.DataSet> 、 <xref:System.Data.DataSet>スキーマをに格納し、を返します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataTable">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataTable" />。</param>
        <param name="schemaType"><see cref="T:System.Data.SchemaType" /> 値のいずれか。</param>
        <summary>指定した <see cref="T:System.Data.DataTable" /> に基いて、指定した <see cref="T:System.Data.SchemaType" /> のスキーマを設定します。</summary>
        <returns>データ ソースから返されたスキーマ情報が格納された <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>は、 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>を使用して、データソースからスキーマを取得します。 に関連付けられて<xref:System.Data.IDbDataAdapter.SelectCommand%2A>いる接続オブジェクトは有効である必要がありますが、開く必要はありません。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>接続が閉じられた場合は、データを取得して閉じた状態で接続が開かれます。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>接続が開いている場合は、開いたままになります。  
  
 操作<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>はを<xref:System.Data.DataTable>返します。 次に<xref:System.Data.DataColumnCollection> 、 <xref:System.Data.DataTable>のに列を追加し、データソースに<xref:System.Data.DataColumn>次のプロパティが存在する場合はそれを構成します。  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 とを<xref:System.Data.DataColumn.AutoIncrementStep%2A> <xref:System.Data.DataColumn.AutoIncrementSeed%2A>個別に設定する必要があります。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>また、は<xref:System.Data.DataTable.PrimaryKey%2A> 、 <xref:System.Data.DataTable.Constraints%2A>次の規則に従ってプロパティとプロパティを構成します。  
  
-   がに`DataTable`対して既に定義されている場合、または`PrimaryKey`にデータが含まれている場合は、プロパティは設定されません。 `DataTable` <xref:System.Data.DataTable.PrimaryKey%2A>  
  
-   1つ以上の主キー列がによって<xref:System.Data.IDbDataAdapter.SelectCommand%2A>返された場合は、の主キー列`DataTable`として使用されます。  
  
-   主キー列が返されず、一意の列がの場合は、一意の列が主キーとして使用されます。の場合は、すべての一意の列が null 値の場合に限ります。 Null 値を許容<xref:System.Data.UniqueConstraint>する列がある場合は、がに追加<xref:System.Data.ConstraintCollection>され`PrimaryKey`ますが、プロパティは設定されません。  
  
-   主キー列と一意の列の両方が返された場合、主キー列がの主キー列`DataTable`として使用されます。  
  
 前の規則に従って、主キーと一意<xref:System.Data.ConstraintCollection>の制約がに追加されることに注意してくださいが、その他の制約の種類は追加されません。 このプロセスでは、サーバーへのラウンドトリップがいくつか必要になる場合があります。  
  
 SQL Server テーブルの1つまたは複数の列に一意のクラスター化インデックスが定義されていて、primary key 制約が別の列のセットに対して定義されている場合、クラスター化インデックス内の列の名前が返されます。 主キー列の名前または名前を取得するには、主キーインデックスの名前を指定する SELECT ステートメントでクエリヒントを使用します。 クエリヒントの指定の詳細については、「[クエリヒント (transact-sql)](https://msdn.microsoft.com/library/ms181714.aspx)」を参照してください。  
  
 <xref:System.Data.DataTable>がの設定中に重複する列を** 検出すると、"columnname1"、"columnname2"、"columnname3"などのパターンを使用して、後続の列の名前が生成され<xref:System.Data.Common.DbDataAdapter>ます。**** 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに配置されます。 複数の結果セットがに追加さ<xref:System.Data.DataSet>れると、それぞれの結果セットが別のテーブルに配置されます。 追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。 列名とテーブル名を使用するアプリケーションでは、これらの名前付けパターンとの競合が発生しないようにする必要があります。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>は行を返しません。 に行<xref:System.Data.Common.DbDataAdapter.Fill%2A>を追加するには、メソッドを使用します。<xref:System.Data.DataTable>  
  
> [!NOTE]
>  複数の結果を返すバッチ SQL ステートメントを処理する場合、 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB の .NET Framework Data Provider のの実装では、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>には<xref:System.Data.MissingSchemaAction> 、を`AddWithKey`に設定してを使用します。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。 SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。 詳細については、「[SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)」をご覧ください。
  
   
  
## Examples  
 次の例では、派生クラス<xref:System.Data.SqlClient.SqlDataAdapter>を使用して<xref:System.Data.DataSet> 、 <xref:System.Data.DataTable>スキーマをに格納し、を返します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * string -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">スキーマを挿入する <see cref="T:System.Data.DataSet" />。</param>
        <param name="schemaType">スキーマを挿入する方法を指定する <see cref="T:System.Data.SchemaType" /> 値の 1 つ。</param>
        <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
        <summary>指定した <see cref="T:System.Data.DataTable" /> に <see cref="T:System.Data.DataSet" /> を追加し、指定した <see cref="T:System.Data.SchemaType" /> および <see cref="T:System.Data.DataTable" /> に基づいて、データ ソース内のスキーマと一致するようにスキーマを設定します。</summary>
        <returns><see cref="T:System.Data.DataTable" /> に追加された <see cref="T:System.Data.DataSet" /> オブジェクトのコレクションへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>を使用して、データソースからスキーマ情報を取得します。  
  
 操作<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>は、を<xref:System.Data.DataTable>変換先<xref:System.Data.DataSet>に追加します。 次に<xref:System.Data.DataColumnCollection> 、 <xref:System.Data.DataTable>のに列を追加し、データソースに<xref:System.Data.DataColumn>次のプロパティが存在する場合はそれを構成します。  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 とを<xref:System.Data.DataColumn.AutoIncrementStep%2A> <xref:System.Data.DataColumn.AutoIncrementSeed%2A>個別に設定する必要があります。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>また、は<xref:System.Data.DataTable.PrimaryKey%2A> 、 <xref:System.Data.DataTable.Constraints%2A>次の規則に従ってプロパティとプロパティを構成します。  
  
-   1つ以上の主キー列がによって<xref:System.Data.IDbDataAdapter.SelectCommand%2A>返された場合は、の主キー列<xref:System.Data.DataTable>として使用されます。  
  
-   主キー列が返されず、一意の列がの場合は、一意の列が主キーとして使用されます。の場合は、すべての一意の列が null 値の場合に限ります。 Null 値を許容<xref:System.Data.UniqueConstraint>する列がある場合は、がに追加<xref:System.Data.ConstraintCollection>され<xref:System.Data.DataTable.PrimaryKey%2A>ますが、プロパティは設定されません。  
  
-   主キー列と一意の列の両方が返された場合、主キー列がの主キー列<xref:System.Data.DataTable>として使用されます。  
  
 前の規則に従って、主キーと一意<xref:System.Data.ConstraintCollection>の制約がに追加されることに注意してくださいが、その他の制約の種類は追加されません。  
  
 SQL Server テーブルの1つまたは複数の列に一意のクラスター化インデックスが定義されていて、primary key 制約が別の列のセットに対して定義されている場合、クラスター化インデックス内の列の名前が返されます。 主キー列の名前または名前を取得するには、主キーインデックスの名前を指定する SELECT ステートメントでクエリヒントを使用します。 クエリヒントの指定の詳細については、「[クエリヒント (transact-sql)](https://msdn.microsoft.com/library/ms181714.aspx)」を参照してください。  
  
 キー列が一致<xref:System.Data.Common.DbDataAdapter.Fill%2A>する行を検索して置換するために、で主キー情報が使用されます。 これが目的の動作でない場合は<xref:System.Data.Common.DbDataAdapter.Fill%2A> 、スキーマ情報を要求せずにを使用します。  
  
 <xref:System.Data.DataTable>がの設定中に重複する列を** 検出すると、"columnname1"、"columnname2"、"columnname3"などのパターンを使用して、後続の列の名前が生成され<xref:System.Data.Common.DbDataAdapter>ます。**** 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに配置されます。 複数の結果セットがに追加さ<xref:System.Data.DataSet>れると、それぞれの結果セットが別のテーブルに配置されます。 追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。 列名とテーブル名を使用するアプリケーションでは、これらの名前付けパターンとの競合が発生しないようにする必要があります。  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>は、に大文字<xref:System.Data.DataSet>と小<xref:System.Data.DataTable>文字のみが異なる名前を持つ複数のオブジェクトが含まれるシナリオをサポートします。 このような場合<xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 、は大文字と小文字を区別する比較を実行して対応するテーブルを検索し、完全一致が存在しない場合は新しいテーブルを作成します。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 が<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>呼び出され、に<xref:System.Data.DataSet>含ま<xref:System.Data.DataTable>れる名前が大文字と小文字<xref:System.Data.DataTable>のみで異なる場合は、が更新されます。 このシナリオでは、比較で大文字と小文字が区別されます。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Select <xref:System.Data.IDbConnection>コマンドに関連付けられたオブジェクトは有効である必要がありますが、を開く必要はありません。 が呼び出さ<xref:System.Data.IDbConnection>れる前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>が閉じられている場合は、データを取得して閉じた状態で、を開きます。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>接続が開いている場合は、開いたままになります。  
  
> [!NOTE]
>  複数の結果を返すバッチ SQL ステートメントを処理する場合、 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB の .NET Framework Data Provider のの実装では、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>には<xref:System.Data.MissingSchemaAction> 、を`AddWithKey`に設定してを使用します。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。 SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。 詳細については、「[SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)」をご覧ください。
  
   
  
## Examples  
 次の例では、派生クラス<xref:System.Data.SqlClient.SqlDataAdapter>を使用して<xref:System.Data.DataSet> 、 <xref:System.Data.DataSet>スキーマをに格納し、を返します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">スキーマの取得元のソース テーブルが見つかりませんでした。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataTable" />。</param>
        <param name="schemaType"><see cref="T:System.Data.SchemaType" /> 値のいずれか。</param>
        <param name="command">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Data.DataTable" />、コマンド文字列、および <see cref="T:System.Data.SchemaType" /> 値に基づいて、指定した <see cref="T:System.Data.CommandBehavior" /> のスキーマを設定します。</summary>
        <returns>データ ソースから返されたスキーマ情報が格納された <see cref="T:System.Data.DataTable" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>は、 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>を使用して、データソースからスキーマを取得します。 に関連付けられて<xref:System.Data.IDbDataAdapter.SelectCommand%2A>いる接続オブジェクトは有効である必要がありますが、開く必要はありません。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>接続が閉じられた場合は、データを取得して閉じた状態で接続が開かれます。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>接続が開いている場合は、開いたままになります。  
  
 操作<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>は、を<xref:System.Data.DataTable>変換先<xref:System.Data.DataSet>に追加します。 次に<xref:System.Data.DataColumnCollection> 、 <xref:System.Data.DataTable>のに列を追加し、データソースに<xref:System.Data.DataColumn>次のプロパティが存在する場合はそれを構成します。  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 とを<xref:System.Data.DataColumn.AutoIncrementStep%2A> <xref:System.Data.DataColumn.AutoIncrementSeed%2A>個別に設定する必要があります。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>また、は<xref:System.Data.DataTable.PrimaryKey%2A> 、 <xref:System.Data.DataTable.Constraints%2A>次の規則に従ってプロパティとプロパティを構成します。  
  
-   1つ以上の主キー列がによって<xref:System.Data.IDbDataAdapter.SelectCommand%2A>返された場合は、の主キー列<xref:System.Data.DataTable>として使用されます。  
  
-   主キー列が返されず、一意の列がの場合は、一意の列が主キーとして使用されます。の場合は、すべての一意の列が null 値の場合に限ります。 Null 値を許容<xref:System.Data.UniqueConstraint>する列がある場合は、がに追加<xref:System.Data.ConstraintCollection>され<xref:System.Data.DataTable.PrimaryKey%2A>ますが、プロパティは設定されません。  
  
-   主キー列と一意の列の両方が返された場合、主キー列がの主キー列<xref:System.Data.DataTable>として使用されます。  
  
 前の規則に従って、主キーと一意<xref:System.Data.ConstraintCollection>の制約がに追加されることに注意してくださいが、その他の制約の種類は追加されません。  
  
 SQL Server テーブルの1つまたは複数の列に一意のクラスター化インデックスが定義されていて、primary key 制約が別の列のセットに対して定義されている場合、クラスター化インデックス内の列の名前が返されます。 主キー列の名前または名前を取得するには、主キーインデックスの名前を指定する SELECT ステートメントでクエリヒントを使用します。 クエリヒントの指定の詳細については、「[クエリヒント (transact-sql)](https://msdn.microsoft.com/library/ms181714.aspx)」を参照してください。  
  
 <xref:System.Data.DataTable>がの設定中に重複する列を** 検出すると、"columnname1"、"columnname2"、"columnname3"などのパターンを使用して、後続の列の名前が生成され<xref:System.Data.IDataAdapter>ます。**** 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに配置されます。 複数の結果セットがに追加さ<xref:System.Data.DataSet>れると、それぞれの結果セットが別のテーブルに配置されます。 追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。 列名とテーブル名を使用するアプリケーションでは、これらの名前付けパターンとの競合が発生しないようにする必要があります。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>は行を返しません。 に行<xref:System.Data.Common.DbDataAdapter.Fill%2A>を追加するには、メソッドを使用します。<xref:System.Data.DataTable>  
  
> [!NOTE]
>  複数の結果を返すバッチ SQL ステートメントを処理する場合、 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB の .NET Framework Data Provider のの実装では、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>には<xref:System.Data.MissingSchemaAction> 、を`AddWithKey`に設定してを使用します。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。 SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。 詳細については、「[SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)」をご覧ください。
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>この<see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />メソッドの実装は保護されており、.NET Framework データプロバイダーによって使用されるように設計されています。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, string srcTable, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::String ^ srcTable, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * System.Data.IDbCommand * string * System.Data.CommandBehavior -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, command, srcTable, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">データ ソースからのスキーマを格納する <see cref="T:System.Data.DataSet" />。</param>
        <param name="schemaType"><see cref="T:System.Data.SchemaType" /> 値のいずれか。</param>
        <param name="command">データ ソースから行を取得するために使用する SQL SELECT ステートメント。</param>
        <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Data.DataTable" /> に <see cref="T:System.Data.DataSet" /> を追加し、指定した <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソース内のスキーマと一致するようにスキーマを設定します。</summary>
        <returns>データ ソースから返されたスキーマ情報が格納された、<see cref="T:System.Data.DataTable" /> オブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>は、 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>を使用して、データソースからスキーマを取得します。 に関連付けられて<xref:System.Data.IDbDataAdapter.SelectCommand%2A>いる接続オブジェクトは有効である必要がありますが、開く必要はありません。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>接続が閉じられた場合は、データを取得して閉じた状態で接続が開かれます。 が呼び出される前に<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>接続が開いている場合は、開いたままになります。  
  
 操作<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>は、を<xref:System.Data.DataTable>変換先<xref:System.Data.DataSet>に追加します。 次に<xref:System.Data.DataColumnCollection> 、 <xref:System.Data.DataTable>のに列を追加し、データソースに<xref:System.Data.DataColumn>次のプロパティが存在する場合はそれを構成します。  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 とを<xref:System.Data.DataColumn.AutoIncrementStep%2A> <xref:System.Data.DataColumn.AutoIncrementSeed%2A>個別に設定する必要があります。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>また、は<xref:System.Data.DataTable.PrimaryKey%2A> 、 <xref:System.Data.DataTable.Constraints%2A>次の規則に従ってプロパティとプロパティを構成します。  
  
-   1つ以上の主キー列がによって<xref:System.Data.IDbDataAdapter.SelectCommand%2A>返された場合は、の主キー列<xref:System.Data.DataTable>として使用されます。  
  
-   主キー列が返されず、一意の列がの場合は、一意の列が主キーとして使用されます。の場合は、すべての一意の列が null 値の場合に限ります。 Null 値を許容<xref:System.Data.UniqueConstraint>する列がある場合は、がに追加<xref:System.Data.ConstraintCollection>され<xref:System.Data.DataTable.PrimaryKey%2A>ますが、プロパティは設定されません。  
  
-   主キー列と一意の列の両方が返された場合、主キー列がの主キー列<xref:System.Data.DataTable>として使用されます。  
  
 前の規則に従って、主キーと一意<xref:System.Data.ConstraintCollection>の制約がに追加されることに注意してくださいが、その他の制約の種類は追加されません。  
  
 SQL Server テーブルの1つまたは複数の列に一意のクラスター化インデックスが定義されていて、primary key 制約が別の列のセットに対して定義されている場合、クラスター化インデックス内の列の名前が返されます。 主キー列の名前または名前を取得するには、主キーインデックスの名前を指定する SELECT ステートメントでクエリヒントを使用します。 クエリヒントの指定の詳細については、「[クエリヒント (transact-sql)](https://msdn.microsoft.com/library/ms181714.aspx)」を参照してください。  
  
 <xref:System.Data.DataTable>がの設定中に重複する列を** 検出すると、"columnname1"、"columnname2"、"columnname3"などのパターンを使用して、後続の列の名前が生成され<xref:System.Data.IDataAdapter>ます。**** 受信データに名前のない列が含まれている場合<xref:System.Data.DataSet>は、"Column1"、"Column2" などのパターンに従ってに配置されます。 複数の結果セットがに追加さ<xref:System.Data.DataSet>れると、それぞれの結果セットが別のテーブルに配置されます。 追加の結果セットには、指定されたテーブル名に整数値を追加することによって名前が付けられます (たとえば、"Table"、"Table1"、"Table2" など)。 列名とテーブル名を使用するアプリケーションでは、これらの名前付けパターンとの競合が発生しないようにする必要があります。  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>は、に大文字<xref:System.Data.DataSet>と小<xref:System.Data.DataTable>文字のみが異なる名前を持つ複数のオブジェクトが含まれるシナリオをサポートします。 このような場合<xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 、は大文字と小文字を区別する比較を実行して対応するテーブルを検索し、完全一致が存在しない場合は新しいテーブルを作成します。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 が<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>呼び出され、に<xref:System.Data.DataSet>含ま<xref:System.Data.DataTable>れる名前が大文字と小文字<xref:System.Data.DataTable>のみで異なる場合は、が更新されます。 このシナリオでは、比較で大文字と小文字が区別されます。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>は行を返しません。 に行<xref:System.Data.Common.DbDataAdapter.Fill%2A>を追加するには、メソッドを使用します。<xref:System.Data.DataTable>  
  
> [!NOTE]
>  複数の結果を返すバッチ SQL ステートメントを処理する場合、 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB の .NET Framework Data Provider のの実装では、最初の結果のみのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>には<xref:System.Data.MissingSchemaAction> 、を`AddWithKey`に設定してを使用します。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> を使用する場合、.NET Framework SQL Server 用データ プロバイダーは、実行するステートメントに FOR BROWSE 句を追加します。 SET FMTONLY ON ステートメントの使用による干渉などの副作用に注意してください。 詳細については、「[SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)」をご覧ください。
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>この<see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />メソッドの実装は保護されており、.NET Framework データプロバイダーによって使用されるように設計されています。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedParameter : int * int -&gt; System.Data.IDataParameter&#xA;override this.GetBatchedParameter : int * int -&gt; System.Data.IDataParameter" Usage="dbDataAdapter.GetBatchedParameter (commandIdentifier, parameterIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameterIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">パラメーターを取得するコマンドのインデックス。</param>
        <param name="parameterIndex">コマンド内のパラメーターのインデックス。</param>
        <summary>現在のバッチのコマンドの 1 つから <see cref="T:System.Data.IDataParameter" /> を返します。</summary>
        <returns>指定された <see cref="T:System.Data.IDataParameter" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 で<xref:System.Data.Common.DbDataAdapter>は、このメソッド<xref:System.NotSupportedException>はをスローします。 から<xref:System.Data.Common.DbDataAdapter>継承するクラスは、このメソッドをオーバーライドしてバッチのサポートを提供します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
        <block subset="none" type="overrides"><para>このメソッドは保護されており、.NET Framework データプロバイダーによって使用されるように設計されています。  
  
を<see cref="T:System.Data.Common.DbDataAdapter" />継承するクラスがバッチをサポートする場合、このクラスは、ユーザーがバッチを実行できるようにこのメソッドをオーバーライドします。 の実装では<paramref name="commandIdentifier" /> 、指定されたを使用して要求<paramref name="parameterIndex" />されたコマンドを検索し、指定されたを使用して要求されたパラメーターを検索します。 たとえば、が<paramref name="commandIdentifier" /> 0 で、が<paramref name="parameterIndex" /> 0 の場合は、バッチ内の最初のコマンドの最初のパラメーターが返されます。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedRecordsAffected : int *  *  -&gt; bool&#xA;override this.GetBatchedRecordsAffected : int *  *  -&gt; bool" Usage="dbDataAdapter.GetBatchedRecordsAffected (commandIdentifier, recordsAffected, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="recordsAffected" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="error" Type="System.Exception" RefType="out" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">バッチ内の個々のコマンドの、0 から始まる列の序数。</param>
        <param name="recordsAffected">バッチ内に指定されたコマンドの影響を受ける、データ ストア内の行数。</param>
        <param name="error">指定されたコマンドの実行中にスローされた <see cref="T:System.Exception" />。 例外がスローされなかった場合は、<see langword="null" /> (Visual Basic では <see langword="Nothing" />) を返します。</param>
        <summary>バッチ更新内の、個々の更新の試行に関する情報を返します。</summary>
        <returns>バッチ更新内の、個々の更新の試行に関する情報。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 バッチ更新ロジックをサポートするデータプロバイダーは、 <xref:System.Data.Common.DbDataAdapter>クラスの一連の仮想メソッドをオーバーライドする必要があります。 `GetBatchedRecordsAffected`これらの仮想メソッドの1つを表します。 クラス`DbDataAdapter`は、バッチ`GetBatchedRecordsAffected`内の個々の更新試行の成功または失敗を判断するためにに依存し<xref:System.Data.DataRow>ているため、それぞれに対応するようにマークを付けることができます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public override System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="override this.GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="dbDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>SQL SELECT ステートメントの実行時にユーザーが設定したパラメーターを取得します。</summary>
        <returns>ユーザーが設定したパラメーターが格納された <see cref="T:System.Data.IDataParameter" /> オブジェクトの配列。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected virtual void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeBatching();" />
      <MemberSignature Language="F#" Value="abstract member InitializeBatching : unit -&gt; unit&#xA;override this.InitializeBatching : unit -&gt; unit" Usage="dbDataAdapter.InitializeBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.Common.DbDataAdapter" /> のバッチ処理を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 で<xref:System.Data.Common.DbDataAdapter>は、このメソッド<xref:System.NotSupportedException>はをスローします。 から<xref:System.Data.Common.DbDataAdapter>継承するクラスは、このメソッドをオーバーライドしてバッチのサポートを提供します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
        <block subset="none" type="overrides"><para>このメソッドは保護されており、.NET Framework データプロバイダーによって使用されるように設計されています。  
  
を<see cref="T:System.Data.Common.DbDataAdapter" />継承するクラスがバッチをサポートしている場合、そのクラスはこのメソッドをオーバーライドします。 このメソッドは、バッチ処理をサポートするために必要なリソースを初期化する機会をクラスに提供します。 たとえば、クラスは、バッチ内の一連のコマンドを保持するデータ構造を割り当てることができます。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ InsertCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースに新しいレコードを挿入するコマンドを取得または設定します。</summary>
        <value>データ セット内の新しい行に対応するデータ ソース内のレコードを挿入するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の<xref:System.Data.Common.DbDataAdapter.Update%2A>間、このプロパティが設定されておらず、 <xref:System.Data.DataSet>に主キー情報が<xref:System.Data.IDbDataAdapter.InsertCommand%2A>含まれている場合は、が自動的に生成されます。  
  
   
  
## Examples  
 次の例では、派生<xref:System.Data.OleDb.OleDbDataAdapter>クラスを作成し、そのプロパティの一部を設定します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="OnFillError">
      <MemberSignature Language="C#" Value="protected virtual void OnFillError (System.Data.FillErrorEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFillError(class System.Data.FillErrorEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnFillError(System.Data.FillErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFillError (value As FillErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFillError(System::Data::FillErrorEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnFillError : System.Data.FillErrorEventArgs -&gt; unit&#xA;override this.OnFillError : System.Data.FillErrorEventArgs -&gt; unit" Usage="dbDataAdapter.OnFillError value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.FillErrorEventArgs" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="value">イベントのデータ。</param>
        <summary><see cref="E:System.Data.Common.DataAdapter.FillError" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdated (value As RowUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit&#xA;override this.OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdated value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">イベント データを格納している <see cref="T:System.Data.Common.RowUpdatedEventArgs" />。</param>
        <summary>.NET Framework データ プロバイダーの <see langword="RowUpdated" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、「[イベントの処理と発生](~/docs/standard/events/index.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラス<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />でをオーバーライドする場合は、必ず基底クラスの<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />メソッドを呼び出してください。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdating (value As RowUpdatingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit&#xA;override this.OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdating value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">イベント データを格納している <see cref="T:System.Data.Common.RowUpdatingEventArgs" />。</param>
        <summary>.NET Framework データ プロバイダーの <see langword="RowUpdating" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、「[イベントの処理と発生](~/docs/standard/events/index.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラス<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />でをオーバーライドする場合は、必ず基底クラスの<see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />メソッドを呼び出してください。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ SelectCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース内のレコードを選択するコマンドを取得または設定します。</summary>
        <value>データ セットに挿入するレコードをデータ ソースから選択するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、派生<xref:System.Data.OleDb.OleDbDataAdapter>クラスを作成し、そのプロパティの一部を設定します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ セットからレコードを削除する SQL ステートメントを取得または設定します。</summary>
        <value><see cref="T:System.Data.IDbCommand" /> 中に、データ セット内の削除された行に対応するデータ ソース内のレコードを削除するために使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合のみ、使用できます。  
  
 詳細については、「<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースに新しいレコードを挿入する SQL ステートメントを取得または設定します。</summary>
        <value>データ セット内の新しい行に対応するデータ ソース内のレコードを挿入するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合のみ、使用できます。  
  
 詳細については、「<xref:System.Data.IDbDataAdapter.InsertCommand%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース内のレコードを選択する SQL ステートメントを取得または設定します。</summary>
        <value>データ セットに挿入するレコードをデータ ソースから選択するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合のみ、使用できます。  
  
 詳細については、「<xref:System.Data.IDbDataAdapter.SelectCommand%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース内のレコードを更新する SQL ステートメントを取得または設定します。</summary>
        <value>データ セット内の変更された行に対応するデータ ソース内のレコードを更新するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合のみ、使用できます。  
  
 詳細については、「<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("use 'protected DbDataAdapter(DbDataAdapter)' ctor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のインスタンスのコピーである新しいオブジェクトを作成します。</summary>
        <returns>このインスタンスのコピーである新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.Common.DbDataAdapter> のインスタンスが <xref:System.ICloneable> インターフェイスにキャストされる場合のみ、使用できます。  
  
 詳細については、「<xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected virtual void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TerminateBatching();" />
      <MemberSignature Language="F#" Value="abstract member TerminateBatching : unit -&gt; unit&#xA;override this.TerminateBatching : unit -&gt; unit" Usage="dbDataAdapter.TerminateBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.Common.DbDataAdapter" /> のバッチ処理を終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 で<xref:System.Data.Common.DbDataAdapter>は、このメソッド<xref:System.NotSupportedException>はをスローします。 から<xref:System.Data.Common.DbDataAdapter>継承するクラスは、このメソッドをオーバーライドしてバッチのサポートを提供します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">アダプターでバッチがサポートされていません。</exception>
        <block subset="none" type="overrides"><para>このメソッドは保護されており、.NET Framework データプロバイダーによって使用されるように設計されています。  
  
を<see cref="T:System.Data.Common.DbDataAdapter" />継承するクラスがバッチをサポートしている場合、そのクラスはこのメソッドをオーバーライドします。 このメソッドは、バッチ処理をサポートするために割り当てられたリソースを破棄する機会をクラスに提供します。 たとえば、クラスは、バッチ内のコマンドを保持するデータ構造の割り当てを解除することができます。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Update">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Data.DataSet" /> での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataRow[] dataRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataRows As DataRow()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] -&gt; int" Usage="dbDataAdapter.Update dataRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="dataRows">データ ソースの更新に使用する <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> 内の配列での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
        <returns><see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションが<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドを呼び出すと、 <xref:System.Data.Common.DbDataAdapter>は<xref:System.Data.DataRow.RowState%2A>プロパティを調べ、必要な INSERT、UPDATE、または DELETE ステートメントを各行に対して<xref:System.Data.DataSet>繰り返し実行します。 たとえば<xref:System.Data.Common.DbDataAdapter.Update%2A> 、では<xref:System.Data.DataTable>、の行が順序付けられているため、delete ステートメントを実行した後に INSERT ステートメントを実行し、別の delete ステートメントを実行する場合があります。  
  
 これらのステートメントはバッチ処理として実行されないことに注意してください。各行は個別に更新されます。 アプリケーションでは、ステートメント<xref:System.Data.DataSet.GetChanges%2A>の種類 (更新前の挿入など) のシーケンスを制御する必要がある場合に、メソッドを呼び出すことができます。 詳細については、「 [dataadapter を使用したデータソースの更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)」を参照してください。  
  
 INSERT、UPDATE、または DELETE ステートメントが指定されてい<xref:System.Data.Common.DbDataAdapter.Update%2A>ない場合、メソッドは例外を生成します。 ただし、.NET Framework データプロバイダーの<xref:System.Data.SqlClient.SqlCommandBuilder> `SelectCommand`プロパティ<xref:System.Data.OleDb.OleDbCommandBuilder>を設定した場合は、単一テーブルの更新の SQL ステートメントを自動的に生成するオブジェクトまたはオブジェクトを作成できます。 その後、設定していない追加の SQL ステートメントは、 **CommandBuilder**によって生成されます。 この生成ロジックでは、にキー列情報が存在<xref:System.Data.DataSet>している必要があります。 詳細については、「 [CommandBuilders を使用したコマンドの生成](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)」を参照してください。  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.Update%2A>は、更新を実行する前に、最初のマッピングに記載されているテーブルから行を取得します。 次<xref:System.Data.Common.DbDataAdapter.Update%2A>に、は、 <xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティの値を使用して行を更新します。 返されたその他の行は無視されます。  
  
 データがに読み込ま<xref:System.Data.DataSet> <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>れると、イベントが発生します。これにより、 <xref:System.Data.DataSet>ユーザーは、一致した行とコマンドによって返された出力パラメーターを調べることができます。 行が正常に更新されると、その行に対する変更が受け入れられます。  
  
 を使用<xref:System.Data.Common.DbDataAdapter.Update%2A>する場合、実行の順序は次のようになります。  
  
1.  の<xref:System.Data.DataRow>値は、パラメーター値に移動されます。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドが実行されます。  
  
4.  コマンドがに`FirstReturnedRecord`設定されている場合、最初に返された<xref:System.Data.DataRow>結果がに配置されます。  
  
5.  出力パラメーターがある場合は、 <xref:System.Data.DataRow>に配置されます。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> が呼び出されます。  
  
 に関連付けられ<xref:System.Data.Common.DbDataAdapter>た各コマンドには、通常、parameters コレクションが関連付けられています。 パラメーターは、.NET Framework データプロバイダーの`SourceColumn` `Parameter`クラスのプロパティ`SourceVersion`とプロパティを使用して、現在の行にマップされます。 `SourceColumn`現在の行<xref:System.Data.DataTable>のパラメーター値<xref:System.Data.Common.DbDataAdapter>を取得するためにが参照する列を参照します。  
  
 `SourceColumn`テーブルマッピングが適用される前に、マップされていない列名を参照します。 が`SourceColumn`存在しない列を参照している場合、実行されるアクション<xref:System.Data.MissingMappingAction>は次のいずれかの値に依存します。  
  
|列挙値|実行されたアクション|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|マッピングが存在しない場合は、 <xref:System.Data.DataSet>でソース列の名前とテーブル名を使用します。|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException>が生成されます。 マッピングが明示的に設定されている場合は、通常、入力パラメーターに対して欠落しているマッピングがエラーの原因になります。|  
|`MissingMappingAction.Error`|<xref:System.SystemException>が生成されます。|  
  
 プロパティは、 `DataSet`出力パラメーターまたは入出力パラメーターの値をにマップするためにも使用されます。 `SourceColumn` 存在しない列を参照している場合は、例外が生成されます。  
  
 .NET Framework `SourceVersion`データプロバイダーの`Parameter`クラスのプロパティは、列の値の元のバージョン、現在のバージョン、または提案されたバージョンのどちらを使用するかを決定します。 この機能は、オプティミスティック同時実行制御違反を確認するために、UPDATE ステートメントの WHERE 句に元の値を含めるために使用されることがよくあります。  
  
> [!NOTE]
>  行の更新中にエラーが発生した場合は、例外がスローされ、更新の実行が中止されます。 エラーが発生したときに例外を生成せずに更新操作を<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>続行する`true`には<xref:System.Data.Common.DbDataAdapter.Update%2A>、を呼び出す前にプロパティをに設定します。 また、DataAdapter の`RowUpdated`イベント内で、行ごとにエラーに対応することもできます。 `RowUpdated`イベント内で例外を生成せずに更新操作を続行するに<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>は<xref:System.Data.Common.RowUpdatedEventArgs> 、のプロパティ<xref:System.Data.UpdateStatus.Continue>をに設定します。  
  
   
  
## Examples  
 次の例では、派生クラス<xref:System.Data.OleDb.OleDbDataAdapter>を使用して、データソースを更新します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
        <exception cref="T:System.SystemException">更新する <see cref="T:System.Data.DataRow" /> が存在しません。  
  
または 
更新する <see cref="T:System.Data.DataTable" /> が存在しません。  
  
または 
ソースとして使用する <see cref="T:System.Data.DataSet" /> が存在しません。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">データ ソースの更新に使用した <see cref="T:System.Data.DataSet" />。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
        <returns><see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションが<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドを呼び出すと、 <xref:System.Data.Common.DbDataAdapter>は<xref:System.Data.DataRow.RowState%2A>プロパティを調べ、必要な INSERT、UPDATE、または DELETE ステートメントを各行に対して<xref:System.Data.DataSet>繰り返し実行します。 たとえば<xref:System.Data.Common.DbDataAdapter.Update%2A> 、では<xref:System.Data.DataTable>、の行が順序付けられているため、delete ステートメントを実行した後に INSERT ステートメントを実行し、別の delete ステートメントを実行する場合があります。  
  
 これらのステートメントはバッチ処理として実行されないことに注意してください。各行は個別に更新されます。 アプリケーションでは、ステートメント<xref:System.Data.DataSet.GetChanges%2A>の種類 (更新前の挿入など) のシーケンスを制御する必要がある場合に、メソッドを呼び出すことができます。 詳細については、「 [dataadapter を使用したデータソースの更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)」を参照してください。  
  
 INSERT、UPDATE、または DELETE ステートメントが指定されてい<xref:System.Data.Common.DbDataAdapter.Update%2A>ない場合、メソッドは例外を生成します。 ただし、.NET Framework データプロバイダーの<xref:System.Data.SqlClient.SqlCommandBuilder> `SelectCommand`プロパティ<xref:System.Data.OleDb.OleDbCommandBuilder>を設定した場合は、単一テーブルの更新の SQL ステートメントを自動的に生成するオブジェクトまたはオブジェクトを作成できます。 その後、設定していない追加の SQL ステートメントは、 **CommandBuilder**によって生成されます。 この生成ロジックでは、にキー列情報が存在<xref:System.Data.DataSet>している必要があります。 詳細については、「 [CommandBuilders を使用したコマンドの生成](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)」を参照してください。  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.Update%2A>は、更新を実行する前に、最初のマッピングに記載されているテーブルから行を取得します。 次<xref:System.Data.Common.DbDataAdapter.Update%2A>に、は、 <xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティの値を使用して行を更新します。 返されたその他の行は無視されます。  
  
 データがに読み込ま<xref:System.Data.DataSet> <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>れると、イベントが発生します。これにより、 <xref:System.Data.DataSet>ユーザーは、一致した行とコマンドによって返された出力パラメーターを調べることができます。 行が正常に更新されると、その行に対する変更が受け入れられます。  
  
 を使用<xref:System.Data.Common.DbDataAdapter.Update%2A>する場合、実行の順序は次のようになります。  
  
1.  の<xref:System.Data.DataRow>値は、パラメーター値に移動されます。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドが実行されます。  
  
4.  コマンドがに`FirstReturnedRecord`設定されている場合、最初に返された結果<xref:System.Data.DataRow>がに配置されます。  
  
5.  出力パラメーターがある場合は、 <xref:System.Data.DataRow>に配置されます。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> が呼び出されます。  
  
 に関連付けられ<xref:System.Data.Common.DbDataAdapter>た各コマンドには、通常、parameters コレクションが関連付けられています。 パラメーターは、.NET Framework データプロバイダーの`SourceColumn` `Parameter`クラスのプロパティ`SourceVersion`とプロパティを使用して、現在の行にマップされます。 `SourceColumn`現在の行<xref:System.Data.DataTable>のパラメーター値<xref:System.Data.Common.DbDataAdapter>を取得するためにが参照する列を参照します。  
  
 `SourceColumn`テーブルマッピングが適用される前に、マップされていない列名を参照します。 が`SourceColumn`存在しない列を参照している場合、実行されるアクション<xref:System.Data.MissingMappingAction>は次のいずれかの値に依存します。  
  
|列挙値|実行されたアクション|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|マッピングが存在しない場合は、 <xref:System.Data.DataSet>でソース列の名前とテーブル名を使用します。|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException>が生成されます。 マッピングが明示的に設定されている場合は、通常、入力パラメーターに対して欠落しているマッピングがエラーの原因になります。|  
|`MissingMappingAction.Error`|<xref:System.SystemException>が生成されます。|  
  
 プロパティは、 `DataSet`出力パラメーターまたは入出力パラメーターの値をにマップするためにも使用されます。 `SourceColumn` 存在しない列を参照している場合は、例外が生成されます。  
  
 .NET Framework `SourceVersion`データプロバイダーの`Parameter`クラスのプロパティは、列の値の元のバージョン、現在のバージョン、または提案されたバージョンのどちらを使用するかを決定します。 この機能は、オプティミスティック同時実行制御違反を確認するために、UPDATE ステートメントの WHERE 句に元の値を含めるために使用されることがよくあります。  
  
> [!NOTE]
>  行の更新中にエラーが発生した場合は、例外がスローされ、更新の実行が中止されます。 エラーが発生したときに例外を生成せずに更新操作を<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>続行する`true`には<xref:System.Data.Common.DbDataAdapter.Update%2A>、を呼び出す前にプロパティをに設定します。 また、DataAdapter の`RowUpdated`イベント内で、行ごとにエラーに対応することもできます。 `RowUpdated`イベント内で例外を生成せずに更新操作を続行するに<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>は<xref:System.Data.Common.RowUpdatedEventArgs> 、のプロパティ<xref:System.Data.UpdateStatus.Continue>をに設定します。  
  
   
  
## Examples  
 次の例では、派生クラス<xref:System.Data.OleDb.OleDbDataAdapter>を使用して、データソースを更新します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Update dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">データ ソースの更新に使用した <see cref="T:System.Data.DataTable" />。</param>
        <summary>指定した <see cref="T:System.Data.DataTable" /> での挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
        <returns><see cref="T:System.Data.DataTable" /> 内で正常に更新された行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションが<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドを呼び出すと、 <xref:System.Data.Common.DbDataAdapter>は<xref:System.Data.DataRow.RowState%2A>プロパティを調べ、必要な INSERT、UPDATE、または DELETE ステートメントを各行に対して<xref:System.Data.DataSet>繰り返し実行します。 たとえば<xref:System.Data.Common.DbDataAdapter.Update%2A> 、では<xref:System.Data.DataTable>、の行が順序付けられているため、delete ステートメントを実行した後に INSERT ステートメントを実行し、別の delete ステートメントを実行する場合があります。  
  
 これらのステートメントはバッチ処理として実行されないことに注意してください。各行は個別に更新されます。 アプリケーションでは、ステートメント<xref:System.Data.DataSet.GetChanges%2A>の種類 (更新前の挿入など) のシーケンスを制御する必要がある場合に、メソッドを呼び出すことができます。 詳細については、「 [dataadapter を使用したデータソースの更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)」を参照してください。  
  
 INSERT、UPDATE、または DELETE ステートメントが指定されてい<xref:System.Data.Common.DbDataAdapter.Update%2A>ない場合、メソッドは例外を生成します。 ただし、.NET Framework データプロバイダーの<xref:System.Data.SqlClient.SqlCommandBuilder> `SelectCommand`プロパティ<xref:System.Data.OleDb.OleDbCommandBuilder>を設定した場合は、単一テーブルの更新の SQL ステートメントを自動的に生成するオブジェクトまたはオブジェクトを作成できます。 その後、設定していない追加の SQL ステートメントは、 **CommandBuilder**によって生成されます。 この生成ロジックでは、にキー列情報が存在<xref:System.Data.DataSet>している必要があります。 詳細については、「 [CommandBuilders を使用したコマンドの生成](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)」を参照してください。  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.Update%2A>は、更新を実行する前に、最初のマッピングに記載されているテーブルから行を取得します。 次<xref:System.Data.Common.DbDataAdapter.Update%2A>に、は、 <xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティの値を使用して行を更新します。 返されたその他の行は無視されます。  
  
 データがに読み込ま<xref:System.Data.DataSet> <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>れると、イベントが発生します。これにより、 <xref:System.Data.DataSet>ユーザーは、一致した行とコマンドによって返された出力パラメーターを調べることができます。 行が正常に更新されると、その行に対する変更が受け入れられます。  
  
 を使用<xref:System.Data.Common.DbDataAdapter.Update%2A>する場合、実行の順序は次のようになります。  
  
1.  の<xref:System.Data.DataRow>値は、パラメーター値に移動されます。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドが実行されます。  
  
4.  コマンドがに`FirstReturnedRecord`設定されている場合、最初に返された結果<xref:System.Data.DataRow>がに配置されます。  
  
5.  出力パラメーターがある場合は、 <xref:System.Data.DataRow>に配置されます。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> が呼び出されます。  
  
 に関連付けられ<xref:System.Data.Common.DbDataAdapter>た各コマンドには、通常、parameters コレクションが関連付けられています。 パラメーターは、.NET Framework データプロバイダーの`SourceColumn` `Parameter`クラスのプロパティ`SourceVersion`とプロパティを使用して、現在の行にマップされます。 `SourceColumn`現在の行<xref:System.Data.DataTable>のパラメーター値<xref:System.Data.Common.DbDataAdapter>を取得するためにが参照する列を参照します。  
  
 `SourceColumn`テーブルマッピングが適用される前に、マップされていない列名を参照します。 が`SourceColumn`存在しない列を参照している場合、実行されるアクション<xref:System.Data.MissingMappingAction>は次のいずれかの値に依存します。  
  
|列挙値|実行されたアクション|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|マッピングが存在しない場合は、 <xref:System.Data.DataSet>でソース列の名前とテーブル名を使用します。|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException>が生成されます。 マッピングが明示的に設定されている場合は、通常、入力パラメーターに対して欠落しているマッピングがエラーの原因になります。|  
|`MissingMappingAction.Error`|<xref:System.SystemException>が生成されます。|  
  
 プロパティは、 `DataSet`出力パラメーターまたは入出力パラメーターの値をにマップするためにも使用されます。 `SourceColumn` 存在しない列を参照している場合は、例外が生成されます。  
  
 .NET Framework `SourceVersion`データプロバイダーの`Parameter`クラスのプロパティは、列の値の元のバージョン、現在のバージョン、または提案されたバージョンのどちらを使用するかを決定します。 この機能は、オプティミスティック同時実行制御違反を確認するために、UPDATE ステートメントの WHERE 句に元の値を含めるために使用されることがよくあります。  
  
> [!NOTE]
>  行の更新中にエラーが発生した場合は、例外がスローされ、更新の実行が中止されます。 エラーが発生したときに例外を生成せずに更新操作を<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>続行する`true`には<xref:System.Data.Common.DbDataAdapter.Update%2A>、を呼び出す前にプロパティをに設定します。 また、DataAdapter の`RowUpdated`イベント内で、行ごとにエラーに対応することもできます。 `RowUpdated`イベント内で例外を生成せずに更新操作を続行するに<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>は<xref:System.Data.Common.RowUpdatedEventArgs> 、のプロパティ<xref:System.Data.UpdateStatus.Continue>をに設定します。  
  
   
  
## Examples  
 次の例では、派生クラス<xref:System.Data.OleDb.OleDbDataAdapter>を使用して、データソースを更新します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
        <exception cref="T:System.SystemException">更新する <see cref="T:System.Data.DataRow" /> が存在しません。  
  
- または - 
更新する <see cref="T:System.Data.DataTable" /> が存在しません。  
  
または 
ソースとして使用する <see cref="T:System.Data.DataSet" /> が存在しません。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Update(class System.Data.DataRow[] dataRows, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Update (dataRows As DataRow(), tableMapping As DataTableMapping) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] * System.Data.Common.DataTableMapping -&gt; int" Usage="dbDataAdapter.Update (dataRows, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRows">データ ソースの更新に使用する <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
        <param name="tableMapping">使用する <see cref="P:System.Data.IDataAdapter.TableMappings" /> コレクション。</param>
        <summary>指定した <see cref="T:System.Data.DataSet" /> オブジェクトの配列内の挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
        <returns><see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションが<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドを呼び出すと、 <xref:System.Data.Common.DbDataAdapter>は<xref:System.Data.DataRow.RowState%2A>プロパティを調べ、必要な INSERT、UPDATE、または DELETE ステートメントを各行に対して<xref:System.Data.DataSet>繰り返し実行します。 たとえば<xref:System.Data.Common.DbDataAdapter.Update%2A> 、では<xref:System.Data.DataTable>、の行が順序付けられているため、delete ステートメントを実行した後に INSERT ステートメントを実行し、別の delete ステートメントを実行する場合があります。  
  
 これらのステートメントはバッチ処理として実行されないことに注意してください。各行は個別に更新されます。 アプリケーションでは、ステートメント<xref:System.Data.DataSet.GetChanges%2A>の種類 (更新前の挿入など) のシーケンスを制御する必要がある場合に、メソッドを呼び出すことができます。 詳細については、「 [dataadapter を使用したデータソースの更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)」を参照してください。  
  
 INSERT、UPDATE、または DELETE ステートメントが指定されてい<xref:System.Data.Common.DbDataAdapter.Update%2A>ない場合、メソッドは例外を生成します。 ただし、.NET Framework データプロバイダーの<xref:System.Data.SqlClient.SqlCommandBuilder> `SelectCommand`プロパティ<xref:System.Data.OleDb.OleDbCommandBuilder>を設定した場合は、単一テーブルの更新の SQL ステートメントを自動的に生成するオブジェクトまたはオブジェクトを作成できます。 その後、設定していない追加の SQL ステートメントは、 **CommandBuilder**によって生成されます。 この生成ロジックでは、にキー列情報が存在<xref:System.Data.DataSet>している必要があります。 詳細については、「 [CommandBuilders を使用したコマンドの生成](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)」を参照してください。  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.Update%2A>は、更新を実行する前に、最初のマッピングに記載されているテーブルから行を取得します。 次<xref:System.Data.Common.DbDataAdapter.Update%2A>に、は、 <xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティの値を使用して行を更新します。 返されたその他の行は無視されます。  
  
 データがに読み込ま<xref:System.Data.DataSet> <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>れると、イベントが発生します。これにより、 <xref:System.Data.DataSet>ユーザーは、一致した行とコマンドによって返された出力パラメーターを調べることができます。 行が正常に更新されると、その行に対する変更が受け入れられます。  
  
 を使用<xref:System.Data.Common.DbDataAdapter.Update%2A>する場合、実行の順序は次のようになります。  
  
1.  の<xref:System.Data.DataRow>値は、パラメーター値に移動されます。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドが実行されます。  
  
4.  コマンドがに`FirstReturnedRecord`設定されている場合、最初に返された結果<xref:System.Data.DataRow>がに配置されます。  
  
5.  出力パラメーターがある場合は、 <xref:System.Data.DataRow>に配置されます。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> が呼び出されます。  
  
 に関連付けられ<xref:System.Data.Common.DbDataAdapter>た各コマンドには、通常、parameters コレクションが関連付けられています。 パラメーターは、.NET Framework データプロバイダーの`SourceColumn` `Parameter`クラスのプロパティ`SourceVersion`とプロパティを使用して、現在の行にマップされます。 `SourceColumn`現在の行<xref:System.Data.DataTable>のパラメーター値<xref:System.Data.Common.DbDataAdapter>を取得するためにが参照する列を参照します。  
  
 `SourceColumn`テーブルマッピングが適用される前に、マップされていない列名を参照します。 が`SourceColumn`存在しない列を参照している場合、実行されるアクション<xref:System.Data.MissingMappingAction>は次のいずれかの値に依存します。  
  
|列挙値|実行されたアクション|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|マッピングが存在しない場合は、 <xref:System.Data.DataSet>でソース列の名前とテーブル名を使用します。|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException>が生成されます。 マッピングが明示的に設定されている場合は、通常、入力パラメーターに対して欠落しているマッピングがエラーの原因になります。|  
|`MissingMappingAction.Error`|<xref:System.SystemException>が生成されます。|  
  
 プロパティは、 `DataSet`出力パラメーターまたは入出力パラメーターの値をにマップするためにも使用されます。 `SourceColumn` 存在しない列を参照している場合は、例外が生成されます。  
  
 .NET Framework `SourceVersion`データプロバイダーの`Parameter`クラスのプロパティは、列の値の元のバージョン、現在のバージョン、または提案されたバージョンのどちらを使用するかを決定します。 この機能は、オプティミスティック同時実行制御違反を確認するために、UPDATE ステートメントの WHERE 句に元の値を含めるために使用されることがよくあります。  
  
> [!NOTE]
>  行の更新中にエラーが発生した場合は、例外がスローされ、更新の実行が中止されます。 エラーが発生したときに例外を生成せずに更新操作を<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>続行する`true`には<xref:System.Data.Common.DbDataAdapter.Update%2A>、を呼び出す前にプロパティをに設定します。 また、DataAdapter の`RowUpdated`イベント内で、行ごとにエラーに対応することもできます。 `RowUpdated`イベント内で例外を生成せずに更新操作を続行するに<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>は<xref:System.Data.Common.RowUpdatedEventArgs> 、のプロパティ<xref:System.Data.UpdateStatus.Continue>をに設定します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
        <exception cref="T:System.SystemException">更新する <see cref="T:System.Data.DataRow" /> が存在しません。  
  
または 
更新する <see cref="T:System.Data.DataTable" /> が存在しません。  
  
- または - 
ソースとして使用する <see cref="T:System.Data.DataSet" /> が存在しません。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Update (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">データ ソースの更新に使用する <see cref="T:System.Data.DataSet" />。</param>
        <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
        <summary><see cref="T:System.Data.DataSet" /> 内の指定した <see cref="T:System.Data.DataTable" /> 名を持つ挿入行、更新行、または削除行に対して INSERT、UPDATE、または DELETE ステートメントを個別に実行することで、データベースの値を更新します。</summary>
        <returns><see cref="T:System.Data.DataSet" /> 内で正常に更新された行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションが<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドを呼び出すと、 <xref:System.Data.Common.DbDataAdapter>は<xref:System.Data.DataRow.RowState%2A>プロパティを調べ、必要な INSERT、UPDATE、または DELETE ステートメントを各行に対して<xref:System.Data.DataSet>繰り返し実行します。 たとえば<xref:System.Data.Common.DbDataAdapter.Update%2A> 、では<xref:System.Data.DataTable>、の行が順序付けられているため、delete ステートメントを実行した後に INSERT ステートメントを実行し、別の delete ステートメントを実行する場合があります。  
  
 これらのステートメントはバッチ処理として実行されないことに注意してください。各行は個別に更新されます。 アプリケーションでは、ステートメント<xref:System.Data.DataSet.GetChanges%2A>の種類のシーケンス (たとえば、UPDATE の前に INSERT) を制御する必要がある場合に、メソッドを呼び出すことができます。 詳細については、「 [dataadapter を使用したデータソースの更新](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)」を参照してください。  
  
 INSERT、UPDATE、または DELETE ステートメントが指定されてい<xref:System.Data.Common.DbDataAdapter.Update%2A>ない場合、メソッドは例外を生成します。 ただし、.NET Framework データプロバイダーの<xref:System.Data.SqlClient.SqlCommandBuilder> `SelectCommand`プロパティ<xref:System.Data.OleDb.OleDbCommandBuilder>を設定した場合は、単一テーブルの更新の SQL ステートメントを自動的に生成するオブジェクトまたはオブジェクトを作成できます。 その後、設定していない追加の SQL ステートメントは、 **CommandBuilder**によって生成されます。 この生成ロジックでは、にキー列情報が存在<xref:System.Data.DataSet>している必要があります。 詳細については、「 [CommandBuilders を使用したコマンドの生成](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)」を参照してください。  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.Update%2A>は、に大文字<xref:System.Data.DataSet>と小<xref:System.Data.DataTable>文字のみが異なる名前を持つ複数のオブジェクトが含まれるシナリオをサポートします。 同じ名前で大文字と小文字が異なる複数のテーブルがに`DataSet`存在<xref:System.Data.Common.DbDataAdapter.Update%2A>する場合、は、対応するテーブルを検索するために大文字と小文字を区別する比較を実行し、完全一致が存在しない場合は例外を生成します。 次C#のコードは、この動作を示しています。  
  
```  
DataSet ds = new DataSet();  
 ds.Tables.Add("aaa");  
 ds.Tables.Add("AAA");  
 adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.  
 adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.  
    adapter.Update(ds, "Aaa"); // Results in an exception.  
```  
  
 が<xref:System.Data.Common.DbDataAdapter.Update%2A>呼び出され、に<xref:System.Data.DataSet>含ま<xref:System.Data.DataTable>れる名前が大文字と小文字<xref:System.Data.DataTable>のみで異なる場合は、が更新されます。 このシナリオでは、比較で大文字と小文字が区別されます。 次C#のコードは、この動作を示しています。  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 メソッド<xref:System.Data.Common.DbDataAdapter.Update%2A>は、更新を実行する前に、最初のマッピングに記載されているテーブルから行を取得します。 次<xref:System.Data.Common.DbDataAdapter.Update%2A>に、は、 <xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティの値を使用して行を更新します。 返されたその他の行は無視されます。  
  
 データがに読み込ま<xref:System.Data.DataSet> <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>れると、イベントが発生します。これにより、 <xref:System.Data.DataSet>ユーザーは、一致した行とコマンドによって返された出力パラメーターを調べることができます。 行が正常に更新されると、その行に対する変更が受け入れられます。  
  
 を使用<xref:System.Data.Common.DbDataAdapter.Update%2A>する場合、実行の順序は次のようになります。  
  
1.  の<xref:System.Data.DataRow>値は、パラメーター値に移動されます。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドが実行されます。  
  
4.  コマンドがに`FirstReturnedRecord`設定されている場合、最初に返された結果<xref:System.Data.DataRow>がに配置されます。  
  
5.  出力パラメーターがある場合は、 <xref:System.Data.DataRow>に配置されます。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> が呼び出されます。  
  
 に関連付けられ<xref:System.Data.Common.DbDataAdapter>た各コマンドには、通常、parameters コレクションが関連付けられています。 パラメーターは、.NET Framework データプロバイダーの`SourceColumn` `Parameter`クラスのプロパティ`SourceVersion`とプロパティを使用して、現在の行にマップされます。 `SourceColumn`現在の行<xref:System.Data.DataTable>のパラメーター値<xref:System.Data.Common.DbDataAdapter>を取得するためにが参照する列を参照します。  
  
 `SourceColumn`テーブルマッピングが適用される前に、マップされていない列名を参照します。 が`SourceColumn`存在しない列を参照している場合、実行されるアクション<xref:System.Data.MissingMappingAction>は次のいずれかの値に依存します。  
  
|列挙値|実行されたアクション|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|マッピングが存在しない場合は、 <xref:System.Data.DataSet>でソース列の名前とテーブル名を使用します。|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException>が生成されます。 マッピングが明示的に設定されている場合は、通常、入力パラメーターに対して欠落しているマッピングがエラーの原因になります。|  
|`MissingMappingAction.Error`|<xref:System.SystemException>が生成されます。|  
  
 プロパティは、 `DataSet`出力パラメーターまたは入出力パラメーターの値をにマップするためにも使用されます。 `SourceColumn` 存在しない列を参照している場合は、例外が生成されます。  
  
 .NET Framework `SourceVersion`データプロバイダーの`Parameter`クラスのプロパティは、列の値の元のバージョン、現在のバージョン、または提案されたバージョンのどちらを使用するかを決定します。 この機能は、オプティミスティック同時実行制御違反を確認するために、UPDATE ステートメントの WHERE 句に元の値を含めるために使用されることがよくあります。  
  
> [!NOTE]
>  行の更新中にエラーが発生した場合は、例外がスローされ、更新の実行が中止されます。 エラーが発生したときに例外を生成せずに更新操作を<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>続行する`true`には<xref:System.Data.Common.DbDataAdapter.Update%2A>、を呼び出す前にプロパティをに設定します。 また、DataAdapter の`RowUpdated`イベント内で、行ごとにエラーに対応することもできます。 `RowUpdated`イベント内で例外を生成せずに更新操作を続行するに<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>は<xref:System.Data.Common.RowUpdatedEventArgs> 、のプロパティ<xref:System.Data.UpdateStatus.Continue>をに設定します。  
  
   
  
## Examples  
 次の例では、派生クラス<xref:System.Data.OleDb.OleDbDataAdapter>を使用して、データソースを更新します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが無効です。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、DELETE の各ステートメントを実行しようとしましたが、影響を受けたレコードはありませんでした。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public virtual int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateBatchSize : int with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バッチ処理サポートを有効にするかどうか、および、1 回のバッチで実行可能なコマンド数を指定する値を取得または設定します。</summary>
        <value>バッチごとに処理される行数。  
  
 <list type="table"><listheader><term> 値 
 </term><description> 効果 
 </description></listheader><item><term> 0 
 </term><description> バッチのサイズに制限はありません。  
  
 </description></item><item><term> 1 
 </term><description> バッチ更新を無効にします。  
  
 </description></item><item><term> &gt; 1 
 </term><description> 一度に送信される変更内容は <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> のバッチ サイズに基づきます。  
  
 </description></item></list>  

 これを1以外の値に設定すると、に関連付けられ<see cref="T:System.Data.Common.DbDataAdapter" />ているすべて<see cref="P:System.Data.IDbCommand.UpdatedRowSource" />のコマンドのプロパティが**None**または**OutputParameters**に設定されている必要があります。 それ以外の場合、例外がスローされます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティを使用して、 <xref:System.Data.DataSet>からの変更でデータソースを更新します。 <xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A> データプロバイダーでバッチ処理がサポートされている場合、サーバーへのラウンドトリップの回数を減らすことで、アプリケーションのパフォーマンスが向上する可能性があります。 ADO.NET 2.0 では、このプロパティは SQL Server (SqlClient) 用の .NET データプロバイダーと Oracle (System.data.oracleclient) でサポートされています。  
  
 サイズの大きいバッチを実行すると、パフォーマンスが低下する可能性があります。 そのため、アプリケーションを実装する前に、バッチの最適なサイズ設定をテストする必要があります。  
  
 値<xref:System.ArgumentOutOfRangeException>が0未満の数値に設定されている場合、がスローされます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ UpdateCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース内のレコードを更新するコマンドを取得または設定します。</summary>
        <value>データ セット内の変更された行に対応するデータ ソース内のレコードを更新するために、<see cref="T:System.Data.IDbCommand" /> 中に使用する <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の<xref:System.Data.Common.DbDataAdapter.Update%2A>間、このプロパティが設定されておらず、 <xref:System.Data.DataSet>に主キー情報が<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>含まれている場合は、が自動的に生成されます。  
  
   
  
## Examples  
 次の例では、派生<xref:System.Data.OleDb.OleDbDataAdapter>クラスを作成し、そのプロパティの一部を設定します。  
  
 [!code-csharp[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">データの操作 (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
  </Members>
</Type>
