<Type Name="IAssemblyPostProcessor" FullName="System.Web.Compilation.IAssemblyPostProcessor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7f3ce5813903e751fff1b66168f7c9c44ae5525c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69096986" /></Metadata><TypeSignature Language="C#" Value="public interface IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAssemblyPostProcessor implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.IAssemblyPostProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAssemblyPostProcessor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="F#" Value="type IAssemblyPostProcessor = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="ca6d0-101">ビルド後のアセンブリを処理するためにクラスが実装するメソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-101">Defines the method a class implements to process an assembly after the assembly has been built.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca6d0-102">このインターフェイスを実装するクラスは、コンパイル後にアセンブリにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-102">A class implementing this interface can access an assembly after it has been compiled.</span></span> <span data-ttu-id="ca6d0-103">クラス<xref:System.Web.Compilation.AssemblyBuilder>は、アセンブリをコンパイルし、Web 構成ファイル<xref:System.Web.Compilation.IAssemblyPostProcessor>にインターフェイスが登録されているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-103">The <xref:System.Web.Compilation.AssemblyBuilder> class compiles assemblies and then checks to see whether an <xref:System.Web.Compilation.IAssemblyPostProcessor> interface has been registered in the Web configuration file.</span></span> <span data-ttu-id="ca6d0-104">その場合、インスタンス<xref:System.Web.Compilation.AssemblyBuilder>は、コンパイル<xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A>後にアセンブリ<xref:System.Web.Compilation.IAssemblyPostProcessor>を読み込む前に、インターフェイスがメソッドを呼び出して、任意のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-104">If so, the <xref:System.Web.Compilation.AssemblyBuilder> instance calls the <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> method for the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface to perform any action after the compilation and before loading the assembly.</span></span> <span data-ttu-id="ca6d0-105">たとえば、プロファイラーツールは、このインターフェイスを実装して、アセンブリのプローブを確立できます。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-105">For example, a profiler tool could implement this interface to establish probes in the assembly.</span></span>  
  
 <span data-ttu-id="ca6d0-106"><xref:System.Web.Compilation.IAssemblyPostProcessor>インターフェイスが登録されると、ASP.NET アプリケーションとそのアセンブリは常にデバッグモードでコンパイルされます。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-106">When an <xref:System.Web.Compilation.IAssemblyPostProcessor> interface is registered, the ASP.NET application and its assemblies will always be compiled in debug mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca6d0-107">次のコード例は、 <xref:System.Web.Compilation.IAssemblyPostProcessor>インターフェイスの実装を作成し、web アプリケーションの web.config ファイルに登録する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-107">The following code example demonstrates how to create an implementation of the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface, and register it in the Web.config file of a Web application.</span></span>  
  
 <span data-ttu-id="ca6d0-108">コード例の最初の部分では、 `Samples.Process.postProcessTest` <xref:System.Web.Compilation.IAssemblyPostProcessor>インターフェイスを実装するという名前のクラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-108">The first part of the code example creates a class named `Samples.Process.postProcessTest` that implements the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface.</span></span> <span data-ttu-id="ca6d0-109">このクラスは、 <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A>メソッドが呼び出されたときにファイルを書き込むための単純なアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-109">This class performs the simple action of writing a file when the <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> method is called.</span></span>  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 <span data-ttu-id="ca6d0-110">コマンド`csc /target:library postProcessTest.cs`を使用して、クラスを .dll ファイルにコンパイルします。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-110">Compile the class into a .dll file with the command `csc /target:library postProcessTest.cs`.</span></span> <span data-ttu-id="ca6d0-111">次のコードに示すように、生成された .dll ファイルを ASP.NET アプリケーションの Bin フォルダーに追加し、web.config ファイルに .dll を登録します。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-111">Add the resulting .dll file to the Bin folder of an ASP.NET application and register the .dll in the Web.config file, as shown in the following code.</span></span>  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 <span data-ttu-id="ca6d0-112">ユーザーが Web サイトにアクセスすると、Web アプリケーションが動的にコンパイルされ、ファイル MyTest が C:\compile. に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-112">When a user visits the Web site, the Web application is dynamically compiled and the file MyTest.txt will be written to C:\compile.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="PostProcessAssembly">
      <MemberSignature Language="C#" Value="public void PostProcessAssembly (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostProcessAssembly(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostProcessAssembly (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostProcessAssembly(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member PostProcessAssembly : string -&gt; unit" Usage="iAssemblyPostProcessor.PostProcessAssembly path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="ca6d0-113">アセンブリへのパス。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-113">The path to the assembly.</span></span></param>
        <summary><span data-ttu-id="ca6d0-114">アセンブリが読み込まれる前に呼び出されます。これを実装したクラスは、アセンブリを変更できます。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-114">Called before the assembly is loaded to allow the implementing class to modify the assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca6d0-115">クラス<xref:System.Web.Compilation.AssemblyBuilder>は、アセンブリがコンパイルされた後にこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-115">The <xref:System.Web.Compilation.AssemblyBuilder> class calls this method after the assembly has been compiled.</span></span> <span data-ttu-id="ca6d0-116">アセンブリを読み込む前に実行するアクションは、このメソッドに含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-116">Any actions to be taken before loading the assembly should be included in this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca6d0-117">次のコード例は、 <xref:System.Web.Compilation.IAssemblyPostProcessor>インターフェイスの実装を作成し、web アプリケーションの web.config ファイルに登録する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-117">The following code example demonstrates how to create an implementation of the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface, and register it in the Web.config file of a Web application.</span></span>  
  
 <span data-ttu-id="ca6d0-118">コード例の最初の部分では、 `Samples.Process.postProcessTest` <xref:System.Web.Compilation.IAssemblyPostProcessor>インターフェイスを実装するという名前のクラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-118">The first part of the code example creates a class named `Samples.Process.postProcessTest` that implements the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface.</span></span> <span data-ttu-id="ca6d0-119">このクラスは、 <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A>メソッドが呼び出されたときにファイルを書き込むための単純なアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-119">This class performs the simple action of writing a file when the <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> method is called.</span></span>  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 <span data-ttu-id="ca6d0-120">コマンド`csc /target:library postProcessTest.cs`を使用して、クラスを .dll ファイルにコンパイルします。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-120">Compile the class into a .dll file with the command `csc /target:library postProcessTest.cs`.</span></span> <span data-ttu-id="ca6d0-121">次のコードに示すように、生成された .dll ファイルを ASP.NET アプリケーションの Bin フォルダーに追加し、web.config ファイルに .dll を登録します。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-121">Add the resulting .dll file to the Bin folder of an ASP.NET application and register the .dll in the Web.config file, as shown in the following code.</span></span>  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 <span data-ttu-id="ca6d0-122">ユーザーが Web サイトにアクセスすると、Web アプリケーションが動的にコンパイルされ、ファイル MyTest が C:\compile. に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="ca6d0-122">When a user visits the Web site, the Web application is dynamically compiled and the file MyTest.txt will be written to C:\compile.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
