<Type Name="ClientBuildManagerParameter" FullName="System.Web.Compilation.ClientBuildManagerParameter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0bbff3f7e9b001bcb0d05f1a7b17730044138ba8" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70648244" /></Metadata><TypeSignature Language="C#" Value="public class ClientBuildManagerParameter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ClientBuildManagerParameter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.ClientBuildManagerParameter" />
  <TypeSignature Language="VB.NET" Value="Public Class ClientBuildManagerParameter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientBuildManagerParameter" />
  <TypeSignature Language="F#" Value="type ClientBuildManagerParameter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>プリコンパイル時に ASP.NET コンパイラに渡される値を格納します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET の Web ページとコードファイルをプリコンパイルして、ユーザーの応答を高速化し、ソースコードをデプロイしなくてもサイトをデプロイできるようにすることができます。 ASP.NET Web サイトのプリコンパイルの詳細については、「 [ASP.NET Web Site Project のプリコンパイルの概要](https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a)」を参照してください。  
  
 クラス<xref:System.Web.Compilation.ClientBuildManagerParameter>は、プリコンパイル中に使用される値を格納します。 プロパティ<xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>によって、アセンブリのビルド方法が決まります。 たとえば、をに<xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> <xref:System.Web.Compilation.PrecompilationFlags.Clean>設定して、以前にコンパイルされたコンポーネントを再コンパイル<xref:System.Web.Compilation.PrecompilationFlags.OverwriteTarget>するか、をに設定して、結果のアセンブリがターゲットディレクトリ内のコンポーネントを上書きできるようにすることができます。 列挙子に<xref:System.FlagsAttribute>は、メンバー値のビットごとの組み合わせを可能にする属性があります。 <xref:System.Web.Compilation.PrecompilationFlags> プロパティには、プリコンパイル動作の組み合わせを<xref:System.Web.Compilation.PrecompilationFlags>指定するために、列挙体の複数の値を含めることができます。 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>  
  
 厳密な<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>名前付きアセンブリ<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>を作成するために、プロパティまたはプロパティに値が割り当てられています。 厳密な名前付きアセンブリを作成するために、両方の値を設定する必要はありません。  
  
 オブジェクトは、 <xref:System.Web.Compilation.ClientBuildManager.%23ctor%2A>コンストラクターを介し<xref:System.Web.Compilation.ClientBuildManager>てオブジェクトに渡されます。 <xref:System.Web.Compilation.ClientBuildManagerParameter>  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.Compilation.ClientBuildManager>クラスの概要にあるコード例の一部です。 この例<xref:System.Web.Compilation.ClientBuildManagerParameter>では、オブジェクトが作成され、その値が設定されます。 生成されるアセンブリは、指定されたキーファイルに基づいて厳密な名前を持ち、 <xref:System.Web.Compilation.PrecompilationFlags>指定された値に従ってプリコンパイルされます。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
    <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
    <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">ASP.NET Web サイトのプリコンパイル</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClientBuildManagerParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ClientBuildManagerParameter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClientBuildManagerParameter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.Compilation.ClientBuildManagerParameter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、プロパティ値を初期化しません。 これらの値は、オブジェクトの<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>作成<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>後に<xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 、、およびの各プロパティを使用して設定する必要があります。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.Compilation.ClientBuildManager>クラスの概要にあるコード例の一部です。 この例<xref:System.Web.Compilation.ClientBuildManagerParameter>では、オブジェクトが作成され、その値が設定されます。 生成されるアセンブリは、指定されたキーファイルに基づいて厳密な名前を持ち、 <xref:System.Web.Compilation.PrecompilationFlags>指定された値に従ってプリコンパイルされます。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludedVirtualPaths">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;string&gt; ExcludedVirtualPaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;string&gt; ExcludedVirtualPaths" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExcludedVirtualPaths As List(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::List&lt;System::String ^&gt; ^ ExcludedVirtualPaths { System::Collections::Generic::List&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExcludedVirtualPaths : System.Collections.Generic.List&lt;string&gt;" Usage="System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>除外される仮想パスを取得または設定します。</summary>
        <value>除外される仮想パス。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrecompilationFlags">
      <MemberSignature Language="C#" Value="public System.Web.Compilation.PrecompilationFlags PrecompilationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Compilation.PrecompilationFlags PrecompilationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property PrecompilationFlags As PrecompilationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Compilation::PrecompilationFlags PrecompilationFlags { System::Web::Compilation::PrecompilationFlags get(); void set(System::Web::Compilation::PrecompilationFlags value); };" />
      <MemberSignature Language="F#" Value="member this.PrecompilationFlags : System.Web.Compilation.PrecompilationFlags with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.PrecompilationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリコンパイル動作を決定するフラグを取得または設定します。</summary>
        <value>クライアント ビルドの <see cref="T:System.Web.Compilation.PrecompilationFlags" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>によって、アセンブリのビルド方法が決まります。 たとえば、をに<xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> <xref:System.Web.Compilation.PrecompilationFlags.Clean>設定して、以前にコンパイルされたコンポーネントを再コンパイル<xref:System.Web.Compilation.PrecompilationFlags.OverwriteTarget>するか、をに設定して、結果のアセンブリがターゲットディレクトリ内のコンポーネントを上書きできるようにすることができます。 列挙子に<xref:System.FlagsAttribute>は、メンバー値のビットごとの組み合わせを可能にする属性があります。 <xref:System.Web.Compilation.PrecompilationFlags> プロパティには、プリコンパイル動作の組み合わせを<xref:System.Web.Compilation.PrecompilationFlags>指定するために、列挙体の複数の値を含めることができます。 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.Compilation.ClientBuildManager>クラスの概要にあるコード例の一部です。 この例<xref:System.Web.Compilation.ClientBuildManagerParameter>では、オブジェクトが作成され、その値が設定されます。 生成されるアセンブリは、指定されたキーファイルに基づいて厳密な名前を持ち、 <xref:System.Web.Compilation.PrecompilationFlags>指定された値に従ってプリコンパイルされます。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">ASP.NET Web サイトのプリコンパイル</related>
      </Docs>
    </Member>
    <Member MemberName="StrongNameKeyContainer">
      <MemberSignature Language="C#" Value="public string StrongNameKeyContainer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StrongNameKeyContainer" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer" />
      <MemberSignature Language="VB.NET" Value="Public Property StrongNameKeyContainer As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StrongNameKeyContainer { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StrongNameKeyContainer : string with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンパイル時に使用されるキー コンテナーを取得または設定します。</summary>
        <value>キー コンテナーの値を示す <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 厳密な<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>名前付きアセンブリ<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>を作成するために、プロパティまたはプロパティに値が割り当てられています。 厳密な名前付きアセンブリを作成するために、両方の値を設定する必要はありません。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.Compilation.ClientBuildManager>クラスの概要にあるコード例と似ていますが、生成されるアセンブリには、指定されたキーコンテナーに基づく厳密な名前が付いている点が異なります。 指定さ<xref:System.Web.Compilation.PrecompilationFlags>れた値に従ってプリコンパイルされます。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager_2/CS/source.cs#1)]
 [!code-vb[System.Web.Compilation.ClientBuildManager_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager_2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">ASP.NET Web サイトのプリコンパイル</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f3022b39-f17f-48c1-b067-025eab0ce8bc">保護された構成の RSA キーコンテナーのインポートとエクスポート</related>
      </Docs>
    </Member>
    <Member MemberName="StrongNameKeyFile">
      <MemberSignature Language="C#" Value="public string StrongNameKeyFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StrongNameKeyFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile" />
      <MemberSignature Language="VB.NET" Value="Public Property StrongNameKeyFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StrongNameKeyFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StrongNameKeyFile : string with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンパイル時に使用されるキー ファイルを取得または設定します。</summary>
        <value>キー ファイルの値を示す <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 厳密な<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>名前付きアセンブリ<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>を作成するために、プロパティまたはプロパティに値が割り当てられています。 厳密な名前付きアセンブリを作成するために、両方の値を設定する必要はありません。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.Compilation.ClientBuildManager>クラスの概要にあるコード例の一部です。 この例<xref:System.Web.Compilation.ClientBuildManagerParameter>では、オブジェクトが作成され、その値が設定されます。 生成されるアセンブリは、指定されたキーファイルに基づいて厳密な名前を持ち、 <xref:System.Web.Compilation.PrecompilationFlags>指定された値に従ってプリコンパイルされます。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">ASP.NET Web サイトのプリコンパイル</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ffbf6d9e-4a88-4a8a-9645-4ce0ee1ee5f9">厳密な名前付きアセンブリの作成と使用</related>
      </Docs>
    </Member>
  </Members>
</Type>
