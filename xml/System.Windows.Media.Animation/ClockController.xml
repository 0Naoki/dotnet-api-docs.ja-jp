<Type Name="ClockController" FullName="System.Windows.Media.Animation.ClockController">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9f3e3a0d4297d65c72643c8d8d5fd64c4d366c45" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36500795" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ClockController : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClockController extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.ClockController" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClockController&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClockController sealed : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type ClockController = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Windows.Media.Animation.Clock" /> を対話的に制御します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Windows.Media.Animation.ClockController>対話形式で作業を開始、一時停止、再開、シーク、スキップ、停止、および削除する、<xref:System.Windows.Media.Animation.Clock>です。 ルート レベルのクロックのみ対話的に制御できます。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.Clock" />
    <altmember cref="P:System.Windows.Media.Animation.Clock.Controller" />
  </Docs>
  <Members>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="clockController.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の目盛りで開始するように、対象の <see cref="P:System.Windows.Media.Animation.ClockController.Clock" /> を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドにより、ターゲット<xref:System.Windows.Media.Animation.Clock>かのように動作する、<xref:System.Windows.Media.Animation.Timeline>オブジェクトの<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>が次のタイマー刻みの時刻に設定します。 タイムラインの実際<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>設定は無視されます (ただし、変更されていない)。  
  
 このメソッドは変更対象のクロックの<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>に<xref:System.Windows.Media.Animation.ClockState.Active>です。 <xref:System.Windows.Media.Animation.ClockController.Begin%2A>メソッドでは一時停止しているクロックは再開されません。  
  
 このメソッドには、次のチェック マークが処理されるまで、タイミング ツリーに影響はありません。 副作用として、適切なイベントも発生しないというそれまでの間です。 このメソッドの呼び出しをトリガー、<xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Clock">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Clock Clock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Clock Clock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ClockController.Clock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Clock As Clock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Clock ^ Clock { System::Windows::Media::Animation::Clock ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Clock : System.Windows.Media.Animation.Clock" Usage="System.Windows.Media.Animation.ClockController.Clock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Clock</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> によって制御される <see cref="T:System.Windows.Media.Animation.ClockController" /> を取得します。</summary>
        <value>この <see cref="T:System.Windows.Media.Animation.Clock" /> によって制御される <see cref="T:System.Windows.Media.Animation.ClockController" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="clockController.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>対象の <see cref="T:System.Windows.Media.Animation.Clock" /> の進行を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一時停止すること、<xref:System.Windows.Media.Animation.Clock>その現在の状態、および一時停止に関係なく、クロック変わらないので、現在の状態。 クロックを一時停止中に<xref:System.Windows.Media.Animation.ClockState.Active>、 <xref:System.Windows.Media.Animation.ClockState.Stopped>、または<xref:System.Windows.Media.Animation.ClockState.Filling>です。 クロックを再開する唯一の方法を使用して、<xref:System.Windows.Media.Animation.ClockController.Resume%2A>メソッドです。 クロックを暗黙的に一時停止するには、その子が一時停止します。  
  
 対象のクロックが既に一時停止すると、このメソッドを呼び出しても効果はありません。  
  
 クロックを一時停止、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Resume" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Remove" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove();" />
      <MemberSignature Language="F#" Value="member this.Remove : unit -&gt; unit" Usage="clockController.Remove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> に関連付けられた <see cref="T:System.Windows.Media.Animation.ClockController" /> を、アニメーション化するプロパティから削除します。 クロックとその子クロックは、これらのプロパティに対して影響を及ぼさなくなります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドがトリガー、<xref:System.Windows.Media.Animation.Clock.RemoveRequested>イベント。  
  
   
  
## Examples  
 次の例では、削除し、それ以外の場合、時計を対話的に制御する方法を示します。  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="clockController.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一時停止されている <see cref="T:System.Windows.Media.Animation.Clock" /> を有効にして、進行を再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一時停止または再開することができます、<xref:System.Windows.Media.Animation.Clock>その現在の状態、および一時停止または再開に関係なく、クロック変わらないので、現在の状態。 クロックを一時停止中に<xref:System.Windows.Media.Animation.ClockState.Active>、 <xref:System.Windows.Media.Animation.ClockState.Stopped>、または<xref:System.Windows.Media.Animation.ClockState.Filling>です。 一時停止しているクロックを再開する唯一の方法を使用して、<xref:System.Windows.Media.Animation.ClockController.Resume%2A>メソッドです。 クロックを暗黙的に再開するには、その子が再開されます。 一時停止されていないクロックにこのメソッドを呼び出しても効果はありません。  
  
 一時停止しているクロックを再開する、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Pause" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.Seek : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="clockController.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">シーク オフセットを、対象のクロックの時間で表した値。 このオフセットは、クロックの <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> または <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> に対して相対的で、<c>origin</c> の値に応じて決まります。</param>
        <param name="origin">指定したオフセットが、対象のクロックの <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> および <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> のどちらに対して相対的かを示す値。</param>
        <summary>次の目盛りになった時点で、指定した量だけ対象の <see cref="P:System.Windows.Media.Animation.ClockController.Clock" /> をシークします。 対象のクロックが停止している場合は、このシークによって再びアクティブになります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 シーク操作は保持しません、<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>または<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>アカウントにこの時計のタイムラインの設定: 時計がように扱わ、タイムラインは、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>です。  
  
 このメソッドは、クロックの変更<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>に<xref:System.Windows.Media.Animation.ClockState.Active>です。 このメソッドには、次のチェック マークが処理されるまで、タイミング ツリーに影響はありません。 副作用として、適切なイベントもは発生しないというそれまでの間です。  
  
 ストーリーのシーク、<xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated>と<xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated>イベント。  
  
 対象のクロックは、子を持つ、現在の時刻も更新されます。  
  
   
  
## Examples  
 次の例は、シークを使用する方法を示しています、<xref:System.Windows.Media.Animation.ClockController>です。  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Animation.TimeSeekOrigin" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SeekAlignedToLastTick (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SeekAlignedToLastTick(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.SeekAlignedToLastTick : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="clockController.SeekAlignedToLastTick (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">シーク オフセットを、対象のクロックの時間で表した値。 このオフセットは、クロックの <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> または <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> に対して相対的で、<c>origin</c> の値に応じて決まります。</param>
        <param name="origin">指定したオフセットが、対象のクロックの <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> および <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> のどちらに対して相対的かを示す値。</param>
        <summary>対象の <see cref="T:System.Windows.Media.Animation.Clock" /> を指定した量だけ直ちにシークします。 対象のクロックが停止している場合は、このシークによって再びアクティブになります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 シーク操作は保持しません、<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>または<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>アカウントにこの時計のタイムラインの設定: 時計がように扱わ、タイムラインは、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>です。  
  
 <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> 最後のクロック ティックのクロックの検索する時間を配置します。 値は直ちに期限への変更を反映するように更新される<xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A>画面では、画面の更新までは、これらの変更は示しません場合でも、します。  
  
 対象のクロックは、子を持つ、現在の時刻も更新されます。  
  
 このメソッドは、クロックの変更<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>に<xref:System.Windows.Media.Animation.ClockState.Active>です。  
  
 ストーリーのシーク、<xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated>と<xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated>イベント。  
  
   
  
## Examples  
 次の例では、両方を示しています、<xref:System.Windows.Media.Animation.ClockController.Seek%2A>と<xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A>のメソッド、<xref:System.Windows.Media.Animation.ClockController>です。  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToFill ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToFill();" />
      <MemberSignature Language="F#" Value="member this.SkipToFill : unit -&gt; unit" Usage="clockController.SkipToFill " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>対象の <see cref="T:System.Windows.Media.Animation.Clock" /> の現在時刻を、アクティブ期間の最後に進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは進めます対象のクロックの現在の時刻をアクティブな期間の終了この時点で、クロックの動作がで指定された、<xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A>の設定、<xref:System.Windows.Media.Animation.Timeline>です。 場合、タイムラインの<xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A>プロパティに設定されている<xref:System.Windows.Media.Animation.FillBehavior.HoldEnd>、時計を塗りつぶします。 プロパティが設定されている場合<xref:System.Windows.Media.Animation.FillBehavior.Stop>、クロックが停止します。  
  
 このメソッドは場合のみ有効対象のクロックの<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>は<xref:System.Windows.Media.Animation.ClockState.Active>します。  
  
 このメソッドには、次のチェック マークが処理されるまで、タイミング ツリーに影響はありません。 副作用として、適切なイベントもは発生しないというそれまでの間です。  
  
 期間のトリガーをその fill にストーリー ボードを進める、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>と<xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated>イベント。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeedRatio">
      <MemberSignature Language="C#" Value="public double SpeedRatio { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 SpeedRatio" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ClockController.SpeedRatio" />
      <MemberSignature Language="VB.NET" Value="Public Property SpeedRatio As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double SpeedRatio { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.SpeedRatio : double with get, set" Usage="System.Windows.Media.Animation.ClockController.SpeedRatio" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>対象の <see cref="T:System.Windows.Media.Animation.Clock" /> の対話速度を取得または設定します。</summary>
        <value>対象のクロックの対話速度を記述するゼロより大きい有限値。 この値とクロックの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> の <see cref="T:System.Windows.Media.Animation.Timeline" /> の値が乗算されます。 たとえば、タイムラインの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> が 0.5 で、<see cref="T:System.Windows.Media.Animation.ClockController" /> オブジェクトの <see cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio" /> が 3.0 の場合は、タイムラインは通常速度の 1.5 倍 (0.5 × 3.0) で移動します。 既定値は 1.0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定しても次の目盛りまでは影響しません。 このプロパティを設定する前にその値を取得すると次の目盛りに古い値が表示されますに発生します。 このプロパティでは、次のタイマー刻みの後に新しい値を返します。  
  
 このプロパティの設定は、基になるタイムラインの値を変更しない<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>です。  
  
 対象のクロックのこのプロパティの設定はトリガー<xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated>イベント。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="clockController.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>対象の <see cref="T:System.Windows.Media.Animation.Clock" /> を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは変更対象のクロックの<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>に<xref:System.Windows.Media.Animation.Clock.Stopped%2A>です。  
  
 A<xref:System.Windows.Media.Animation.Clock.Stopped%2A>クロックを使用して再起動することができます、 <xref:System.Windows.Media.Animation.ClockController.Begin%2A>、 <xref:System.Windows.Media.Animation.ClockController.Seek%2A>、または<xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A>メソッドです。  
  
 このメソッドには、次のチェック マークが処理されるまで、タイミング ツリーに影響はありません。 副作用として、適切なイベントもは発生しないというそれまでの間です。  
  
 クロックを停止する、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>と<xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated>イベント、ではなく、<xref:System.Windows.Media.Animation.Clock.Completed>イベント。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>