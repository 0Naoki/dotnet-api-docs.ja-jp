<Type Name="ExponentialEase" FullName="System.Windows.Media.Animation.ExponentialEase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f9ff3706aa750e4f765590d2c6a8b17d9d528efa" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69163861" /></Metadata><TypeSignature Language="C#" Value="public class ExponentialEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExponentialEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.ExponentialEase" />
  <TypeSignature Language="VB.NET" Value="Public Class ExponentialEase&#xA;Inherits EasingFunctionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExponentialEase : System::Windows::Media::Animation::EasingFunctionBase" />
  <TypeSignature Language="F#" Value="type ExponentialEase = class&#xA;    inherit EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指数式を使用して加速または減速するアニメーションを作成するイージング関数を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 を指定<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>することにより、アニメーションの高速化、減速、またはその両方を制御できます。 次の<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>グラフは、のさまざまな値を示しています。 *f*(*t*) は、アニメーションの進行状況を表し、 *t*は時間を表します。  
  
 ![さまざまな easingmodes の ExponentialEase グラフ。](~/add/media/exponentialease-graph.png "さまざまな easingmodes の ExponentialEase グラフ。")  
  
 この関数に使用される式は次のとおりです。  
  
 ![ExponentialEase の数式](~/add/media/exponentialease-formula.png "ExponentialEase の数式")  
  
 上の式を使用して、次のグラフは、 <xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A>プロパティに対していくつかの異なる値の効果を示しています。  
  
 指数![関数の3つの指数値を簡単に]指数(~/add/media/expo-easeproperty.png "関数の3つの指数値を簡単に")  
  
 以外にもいくつかのイージング<xref:System.Windows.Media.Animation.ExponentialEase>関数があります。
ランタイムに含まれるイージング関数を使用するだけでなく、から継承することで、独自の<xref:System.Windows.Media.Animation.EasingFunctionBase>カスタムイージング関数を作成することもできます。  
  
## <a name="xaml-object-element-usage"></a>XAML オブジェクト要素の使用方法  
  
```xaml
<ExponentialEase .../>  
```  
  
   
  
## Examples  
 次の例では<xref:System.Windows.Media.Animation.ExponentialEase> 、にイージング関数<xref:System.Windows.Media.Animation.DoubleAnimation>を適用して、減速アニメーションを作成します。  
  
 [!code-xaml[ExponentialEase#ExponentialEase](~/samples/snippets/csharp/VS_Snippets_Wpf/exponentialease/CS/window1.xaml#exponentialease)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExponentialEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExponentialEase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Media.Animation.ExponentialEase" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="exponentialEase.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Freezable" /> 派生クラスの新しいインスタンスを作成します。 派生クラスを作成するときには、このメソッドをオーバーライドする必要があります。</summary>
        <returns>新しいインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アニメーションクラスはから<xref:System.Windows.Freezable>間接的に継承します。 このため、カスタムアニメーションオブジェクトを構築する<xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A>には、メソッドをオーバーライドする必要があります。  
  
   
  
## Examples  
 次の例は、の<xref:System.Windows.Freezable.CreateInstanceCore%2A>一般的な実装を示しています。  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.EaseInCore(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EaseInCore (normalizedTime As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override double EaseInCore(double normalizedTime);" />
      <MemberSignature Language="F#" Value="override this.EaseInCore : double -&gt; double" Usage="exponentialEase.EaseInCore normalizedTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">アニメーションの正規化時間 (進行)。</param>
        <summary>カスタム イージング関数の <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> モードを生成するためにオーバーライドできる、イージング関数のロジック部分を提供します。</summary>
        <returns>変換後の進行を表す倍精度浮動小数点数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、 <xref:System.Windows.Media.Animation.EasingMode.EaseIn>正規化された時間を変換して、の<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>場合のアニメーションのペースを制御します。  
  
 <xref:System.Windows.Media.Animation.EasingMode.EaseIn>ケースにはイージング関数を指定するだけで済みます。これは、 <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A>メソッドの実装に<xref:System.Windows.Media.Animation.EasingMode.EaseOut>よっ<xref:System.Windows.Media.Animation.EasingMode.EaseInOut>てとのケースが変換`normalizedTime`されるためです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exponent">
      <MemberSignature Language="C#" Value="public double Exponent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Exponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ExponentialEase.Exponent" />
      <MemberSignature Language="VB.NET" Value="Public Property Exponent As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Exponent { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Exponent : double with get, set" Usage="System.Windows.Media.Animation.ExponentialEase.Exponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アニメーションの補間を求めるための指数を取得または設定します。</summary>
        <value>アニメーションの補間を求めるための指数。 既定値は 2 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[DP_ID_field_label](~/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.ExponentialEase.ExponentProperty>  
  
 で<xref:System.Windows.Media.Animation.ExponentialEase>使用される数式は次のとおりです。  
  
 ![ExponentialEase の数式](~/add/media/exponentialease-formula.png "ExponentialEase の数式")  
  
 次のグラフは、前の式を使用して、 <xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A>プロパティに対していくつかの異なる値の効果を示しています。  
  
 指数![関数の3つの指数値を簡単に]指数(~/add/media/expo-easeproperty.png "関数の3つの指数値を簡単に")  
  
<a name="xamlAttributeUsage_Exponent"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object Exponent="double" .../>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ExponentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ExponentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.ExponentialEase.ExponentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ExponentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ExponentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ExponentProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.Animation.ExponentialEase.ExponentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Media.Animation.ExponentialEase.Exponent" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
