<Type Name="QuinticEase" FullName="System.Windows.Media.Animation.QuinticEase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2aa8da09259e287dad51fcf10b27fd150a98e618" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69407445" /></Metadata><TypeSignature Language="C#" Value="public class QuinticEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QuinticEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.QuinticEase" />
  <TypeSignature Language="VB.NET" Value="Public Class QuinticEase&#xA;Inherits EasingFunctionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class QuinticEase : System::Windows::Media::Animation::EasingFunctionBase" />
  <TypeSignature Language="F#" Value="type QuinticEase = class&#xA;    inherit EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>数式 *f*(*t*) = *t*<sup>5</sup> を使用して、加速したり減速したりするアニメーションを作成するイージング機能を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 を指定<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>することにより、アニメーションの高速化、減速、またはその両方を制御できます。 次の<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>グラフは、のさまざまな値を示しています。 *f*(*t*) は、アニメーションの進行状況を表し、 *t*は時間を表します。  
  
 ![さまざまな easingmodes のグラフを簡単に使用できます。](~/add/media/quinticease-graph.png "さまざまな easingmodes のグラフを簡単に使用できます。")  
  
 この関数に使用される式は次のとおりです。  
  
 *f*(*t*) = *t*<sup>5</sup>  
  
> [!NOTE]
>  を使用<xref:System.Windows.Media.Animation.PowerEase>すると<xref:System.Windows.Media.Animation.QuadraticEase> <xref:System.Windows.Media.Animation.QuinticEase> 、プロパティを<xref:System.Windows.Media.Animation.PowerEase.Power%2A>使用して、、、およびと同じ動作を作成できます。 <xref:System.Windows.Media.Animation.QuarticEase> <xref:System.Windows.Media.Animation.CubicEase> たとえば、を使用しての<xref:System.Windows.Media.Animation.PowerEase> <xref:System.Windows.Media.Animation.CubicEase>代わりにを使用する場合は<xref:System.Windows.Media.Animation.PowerEase.Power%2A> 、値を3に指定します。  
  
 以外にもいくつかのイージング<xref:System.Windows.Media.Animation.QuinticEase>関数があります。  
 ランタイムに含まれるイージング関数を使用するだけでなく、から継承することで、独自の<xref:System.Windows.Media.Animation.EasingFunctionBase>カスタムイージング関数を作成することもできます。  
  
## <a name="xaml-object-element-usage"></a>XAML オブジェクト要素の使用方法  
  
```xaml
<QuinticEase .../>  
```  
  
   
  
## Examples  
 次の例では<xref:System.Windows.Media.Animation.QuinticEase> 、にイージング関数<xref:System.Windows.Media.Animation.DoubleAnimation>を適用して、減速アニメーションを作成します。  
  
 [!code-xaml[QuinticEase#QuinticEase](~/samples/snippets/csharp/VS_Snippets_Wpf/quinticease/CS/window1.xaml#quinticease)]   
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.PowerEase" />
    <altmember cref="T:System.Windows.Media.Animation.BackEase" />
    <altmember cref="T:System.Windows.Media.Animation.BounceEase" />
    <altmember cref="T:System.Windows.Media.Animation.CircleEase" />
    <altmember cref="T:System.Windows.Media.Animation.CubicEase" />
    <altmember cref="T:System.Windows.Media.Animation.ElasticEase" />
    <altmember cref="T:System.Windows.Media.Animation.ExponentialEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuadraticEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuarticEase" />
    <altmember cref="T:System.Windows.Media.Animation.SineEase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QuinticEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuinticEase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; QuinticEase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Media.Animation.QuinticEase" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuinticEase.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="quinticEase.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Freezable" /> 派生クラスの新しいインスタンスを作成します。 派生クラスを作成するときには、このメソッドをオーバーライドする必要があります。</summary>
        <returns>新しいインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アニメーションクラスはから<xref:System.Windows.Freezable>間接的に継承します。 このため、カスタムアニメーションオブジェクトを構築する<xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A>には、メソッドをオーバーライドする必要があります。  
  
   
  
## Examples  
 次の例は、の<xref:System.Windows.Freezable.CreateInstanceCore%2A>一般的な実装を示しています。  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuinticEase.EaseInCore(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EaseInCore (normalizedTime As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override double EaseInCore(double normalizedTime);" />
      <MemberSignature Language="F#" Value="override this.EaseInCore : double -&gt; double" Usage="quinticEase.EaseInCore normalizedTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">アニメーションの正規化時間 (進行)。</param>
        <summary>カスタム イージング関数の <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> モードを生成するためにオーバーライドできる、イージング関数のロジック部分を提供します。</summary>
        <returns>変換後の進行を表す倍精度浮動小数点数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、 <xref:System.Windows.Media.Animation.EasingMode.EaseIn>正規化された時間を変換して、の<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>場合のアニメーションのペースを制御します。  
  
 <xref:System.Windows.Media.Animation.EasingMode.EaseIn>ケースにはイージング関数を指定するだけで済みます。これは、 <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A>メソッドの実装に<xref:System.Windows.Media.Animation.EasingMode.EaseOut>よっ<xref:System.Windows.Media.Animation.EasingMode.EaseInOut>てとのケースが変換`normalizedTime`されるためです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
