<Type Name="Storyboard" FullName="System.Windows.Media.Animation.Storyboard">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2e5254feb605b3070ee54e08c4b1dcb9e4e565f9" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37557546" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Storyboard : System.Windows.Media.Animation.ParallelTimeline" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Storyboard extends System.Windows.Media.Animation.ParallelTimeline" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.Storyboard" />
  <TypeSignature Language="VB.NET" Value="Public Class Storyboard&#xA;Inherits ParallelTimeline" />
  <TypeSignature Language="C++ CLI" Value="public ref class Storyboard : System::Windows::Media::Animation::ParallelTimeline" />
  <TypeSignature Language="F#" Value="type Storyboard = class&#xA;    inherit ParallelTimeline" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.ParallelTimeline</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>子アニメーションのオブジェクトやプロパティの対象化情報を提供するコンテナ タイムライン。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="interactively-controlling-storyboards"></a>ストーリー ボードを対話的に制御します。  
 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 指定したストーリー ボードをマークアップで制御するためには、<xref:System.Windows.Media.Animation.BeginStoryboard.Name%2A>のプロパティ、<xref:System.Windows.Media.Animation.BeginStoryboard>オブジェクトを作成します。 例については、次を参照してください。[方法: イベント トリガーを使用して、ストーリー ボード開始後に制御する](~/docs/framework/wpf/graphics-multimedia/how-to-use-event-triggers-to-control-a-storyboard-after-it-starts.md)します。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
## <a name="data-binding-and-animating-timelines"></a>データ バインディングとアニメーション タイムライン  
 ほとんどのタイムラインのプロパティがデータ バインドまたはアニメーション化できます。ただし、タイミング システムが動作するため、他のデータと同様に動作しない場合はバインドまたはアニメーションのタイムライン データがバインドまたはアニメーション化されたオブジェクト。 その動作を理解するのには、タイムラインをアクティブ化の意味を理解することによってください。  
  
 タイムラインをアクティブになると、タイムラインとその子タイムラインのコピーが作成されます。 これらのコピーが固定されている (読み取り専用に) と<xref:System.Windows.Media.Animation.Clock>そこからオブジェクトが作成されます。 これらのクロックは、ターゲット プロパティをアニメーション化する実際の作業を実行します。 タイムラインは、データ バインディングまたはアニメーションにそのクロックを作成と、現在の値のスナップショットは作成されます。 場合でも、元のタイムラインは、変更を続ける可能性があります、そのクロックされていません。  
  
 データ バインドやアニメーションの変更を反映するためにタイムラインは、そのクロックを再作成する必要があります。 クロックは再を自動的に作成されません。 タイムラインの変更を適用するいくつかの方法を次に示します。  
  
-   タイムラインがまたはに属している場合、 <xref:System.Windows.Media.Animation.Storyboard>、そのストーリー ボードを使用して再適用して変更を反映することを行うことができます、<xref:System.Windows.Media.Animation.BeginStoryboard>または<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッド。 これには、アニメーションが再起動されるという副作用があります。 コードでは、使用することができます、<xref:System.Windows.Media.Animation.Storyboard.Seek%2A>メソッド、ストーリー ボードを前の位置にバックアップします。  
  
-   使用してプロパティに直接アニメーションを適用したかどうか、<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A>メソッドを呼び出します、<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A>メソッドを再度変更されたアニメーションを渡します。  
  
-   クロック レベルで直接作業している場合は、作成し、新しいクロック セットを適用および使用して作成されたクロックの以前のセットを置き換えます。  
  
 データの例では、アニメーションがバインドされている、参照してください[キー スプライン アニメーションのサンプル](http://go.microsoft.com/fwlink/?LinkID=160011)します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Storyboard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Storyboard();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.Animation.Storyboard" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Begin">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられている一連のアニメーションを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="storyboard.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションを対象に適用して開始します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin (containingObject As FrameworkContentElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkContentElement -&gt; unit" Usage="storyboard.Begin containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションを対象に適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して置き換えられる対象のプロパティが既にアニメーション化されている場合、<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace>ハンドオフ動作します。  
  
 このメソッドを使用して開始されたストーリー ボードの一時停止、再開、またはそれ以外の場合は、起動された後に対話的に制御できません。 ストーリー ボードを制御するためには、使用、<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>または<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッド。  
  
 ストーリー ボードのトリガーを開始、<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
   
  
## Examples  
 次の例では、アニメーション化するストーリー ボードを使用して、<xref:System.Windows.Media.TextEffect>します。 <xref:System.Windows.Media.TextEffect>内に含まれる、<xref:System.Windows.FrameworkContentElement>のスコープの名前を付けます。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementStoryboardExample.cs#frameworkcontentelementstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementstoryboardexample.vb#frameworkcontentelementstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin (containingObject As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement -&gt; unit" Usage="storyboard.Begin containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションを対象に適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して置き換えられる対象のプロパティが既にアニメーション化されている場合、<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace>ハンドオフ動作します。  
  
 このメソッドを使用して開始されたストーリー ボードの一時停止、再開、またはそれ以外の場合は、起動された後に対話的に制御できません。 ストーリー ボードを制御するためには、使用、<xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Boolean%29>または<xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Windows.Media.Animation.HandoffBehavior%2CSystem.Boolean%29>メソッド。  
  
 ストーリー ボードのトリガーを開始、<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkContentElement containingObject, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkContentElement containingObject, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin (containingObject As FrameworkContentElement, isControllable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkContentElement ^ containingObject, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkContentElement * bool -&gt; unit" Usage="storyboard.Begin (containingObject, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="isControllable">ストーリーボードを対話的に制御する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションを対象に適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して置き換えられる対象のプロパティが既にアニメーション化されている場合、<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace>ハンドオフ動作します。  
  
 このストーリー ボードを対話的に制御を同じを指定する必要があります`containingObject`ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すときに  
  
 このメソッドが呼び出されると、<xref:System.Windows.Media.Animation.Clock>ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックが格納されている`containingObject`します。  
  
 ストーリー ボードのトリガーを開始、<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
   
  
## Examples  
 次の例では、制御可能なストーリーを使用して、<xref:System.Windows.Media.TextEffect>します。 <xref:System.Windows.Media.TextEffect>内に含まれる、<xref:System.Windows.FrameworkContentElement>のスコープの名前を付けます。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkContentElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkContentElement containingObject, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkContentElement ^ containingObject, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkContentElement * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="storyboard.Begin (containingObject, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="handoffBehavior">新しいアニメーションが現在のアニメーションと対話する際に使用する動作。</param>
        <summary>指定した <see cref="T:System.Windows.Media.Animation.Storyboard" /> を使用して、この <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> に関連付けられているアニメーションを対象に適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 適用すると、 <xref:System.Windows.Media.Animation.Storyboard>、 <xref:System.Windows.Media.Animation.AnimationTimeline>、または<xref:System.Windows.Media.Animation.AnimationClock>を使用してプロパティを<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、any<xref:System.Windows.Media.Animation.Clock>以前にそのプロパティに関連付けられたオブジェクトがシステム リソース消費を続けますタイミング システムはありません。これらのクロックを自動的に削除します。  
  
 使用してクロックの数が多いを適用すると、パフォーマンスの問題を回避するために<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>、完了後に、アニメーション化されたプロパティから構成クロックを削除する必要があります。 クロックを削除する方法はいくつかあります。  
  
-   プロパティからすべてのクロックを削除するには、使用、<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>または<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>アニメーション化されたオブジェクトのメソッド。 最初のパラメーターとしてアニメーション化されているプロパティを指定し、 `null` 2 つ目として。 これにより、すべてのアニメーション クロックがプロパティから削除します。  
  
-   特定を削除する<xref:System.Windows.Media.Animation.AnimationClock>クロックの一覧は、使用して、<xref:System.Windows.Media.Animation.Clock.Controller%2A>のプロパティ、<xref:System.Windows.Media.Animation.AnimationClock>を取得する、 <xref:System.Windows.Media.Animation.ClockController>、呼び出して、<xref:System.Windows.Media.Animation.ClockController.Remove%2A>のメソッド、<xref:System.Windows.Media.Animation.ClockController>します。 これは、通常、<xref:System.Windows.Media.Animation.Clock.Completed>クロックのイベント ハンドラー。 唯一のルート クロックを使用して制御できることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>、<xref:System.Windows.Media.Animation.Clock.Controller%2A>子クロックのプロパティを返します`null`します。 なお、<xref:System.Windows.Media.Animation.Clock.Completed>イベントは、クロックの有効期間が永久の場合は呼び出されません。  その場合は、ユーザーが判断する必要がありますを呼び出すタイミング<xref:System.Windows.Media.Animation.ClockController.Remove%2A>します。  
  
 これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。  オブジェクトがガベージ コレクションの場合は、そのクロックも切断し、ガベージ コレクション。  
  
 クロック オブジェクトの詳細については、次を参照してください。[アニメーションとタイミング システムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)します。  
  
   
  
## Examples  
 次の例では、 <xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace> <xref:System.Windows.Media.Animation.HandoffBehavior>ユーザーを左クリックしたときにアニメーション化すると<xref:System.Windows.Media.Animation.HandoffBehavior.Compose><xref:System.Windows.Media.Animation.HandoffBehavior>ユーザーが右クリックします。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementStoryboardWithHandoffBehaviorExample.cs#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementstoryboardwithhandoffbehaviorexample.vb#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin (containingObject As FrameworkElement, isControllable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement * bool -&gt; unit" Usage="storyboard.Begin (containingObject, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="isControllable">ストーリーボードを対話的に制御する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションを対象に適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して置き換えられる対象のプロパティが既にアニメーション化されている場合、<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace>ハンドオフ動作します。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すときのパラメーター  
  
 このメソッドが呼び出されると、<xref:System.Windows.Media.Animation.Clock>ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックが格納されている`containingObject`します。  
  
 ストーリー ボードのトリガーを開始、<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, class System.Windows.FrameworkTemplate frameworkTemplate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject, System::Windows::FrameworkTemplate ^ frameworkTemplate);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement * System.Windows.FrameworkTemplate -&gt; unit" Usage="storyboard.Begin (containingObject, frameworkTemplate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="frameworkTemplate" Type="System.Windows.FrameworkTemplate" />
      </Parameters>
      <Docs>
        <param name="containingObject">指定した <c>frameworkTemplate</c> が適用されたオブジェクト。 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="frameworkTemplate">アニメーション化するテンプレート。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションを、指定したテンプレート内の対象に適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して置き換えられる対象のプロパティが既にアニメーション化されている場合、<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace>ハンドオフ動作します。  
  
 このメソッドが呼び出されると、<xref:System.Windows.Media.Animation.Clock>ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックが格納されている`containingObject`します。  
  
 ストーリー ボードのトリガーを開始、<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="storyboard.Begin (containingObject, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="handoffBehavior">新しいアニメーションが現在のアニメーションと対話する際に使用する動作。</param>
        <summary>指定した <see cref="T:System.Windows.Media.Animation.Storyboard" /> を使用して、この <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> に関連付けられているアニメーションを対象に適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、 <xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace> <xref:System.Windows.Media.Animation.HandoffBehavior>ユーザーを左クリックしたときにアニメーション化すると<xref:System.Windows.Media.Animation.HandoffBehavior.Compose><xref:System.Windows.Media.Animation.HandoffBehavior>ユーザーが右クリックします。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkElementStoryboardHandoffBehaviorExample.cs#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkelementstoryboardhandoffbehaviorexample.vb#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkContentElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkContentElement containingObject, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkContentElement ^ containingObject, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkContentElement * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="storyboard.Begin (containingObject, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="handoffBehavior">新しいアニメーションが現在のアニメーションと対話する際に使用する動作。</param>
        <param name="isControllable">アニメーションを起動した後に、アニメーションを制御できるかどうか (一時停止できるかどうか) を宣言します。</param>
        <summary>指定した <see cref="T:System.Windows.Media.Animation.Storyboard" /> を使用して、この <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> に関連付けられているアニメーションを対象に適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 対象のプロパティが既にアニメーション化されている指定のハンドオフ動作を使用してが置き換えられます。  
  
 このストーリー ボードを対話的に制御を同じを指定する必要があります`containingObject`ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すときに  
  
 このメソッドが呼び出されると、<xref:System.Windows.Media.Animation.Clock>ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックが格納されている`containingObject`します。  
  
 ストーリー ボードのトリガーを開始、<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
## <a name="using-the-compose-handoffbehavior"></a>使用して、Compose HandoffBehavior  
 適用すると、 <xref:System.Windows.Media.Animation.Storyboard>、 <xref:System.Windows.Media.Animation.AnimationTimeline>、または<xref:System.Windows.Media.Animation.AnimationClock>を使用してプロパティを<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、any<xref:System.Windows.Media.Animation.Clock>以前にそのプロパティに関連付けられたオブジェクトがシステム リソース消費を続けますタイミング システムはありません。これらのクロックを自動的に削除します。  
  
 使用してクロックの数が多いを適用すると、パフォーマンスの問題を回避するために<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>、完了後に、アニメーション化されたプロパティから構成クロックを削除する必要があります。 クロックを削除する方法はいくつかあります。  
  
-   プロパティからすべてのクロックを削除するには、使用、<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>または<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>アニメーション化されたオブジェクトのメソッド。 最初のパラメーターとしてアニメーション化されているプロパティを指定し、 `null` 2 つ目として。 これにより、すべてのアニメーション クロックがプロパティから削除します。  
  
-   特定を削除する<xref:System.Windows.Media.Animation.AnimationClock>クロックの一覧は、使用して、<xref:System.Windows.Media.Animation.Clock.Controller%2A>のプロパティ、<xref:System.Windows.Media.Animation.AnimationClock>を取得する、 <xref:System.Windows.Media.Animation.ClockController>、呼び出して、<xref:System.Windows.Media.Animation.ClockController.Remove%2A>のメソッド、<xref:System.Windows.Media.Animation.ClockController>します。 これは、通常、<xref:System.Windows.Media.Animation.Clock.Completed>クロックのイベント ハンドラー。 唯一のルート クロックを使用して制御できることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>、<xref:System.Windows.Media.Animation.Clock.Controller%2A>子クロックのプロパティを返します`null`します。 なお、<xref:System.Windows.Media.Animation.Clock.Completed>イベントは、クロックの有効期間が永久の場合は呼び出されません。  その場合は、ユーザーが判断する必要がありますを呼び出すタイミング<xref:System.Windows.Media.Animation.ClockController.Remove%2A>します。  
  
 これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。  オブジェクトがガベージ コレクションの場合は、そのクロックも切断し、ガベージ コレクション。  
  
 クロック オブジェクトの詳細については、次を参照してください。[アニメーションとタイミング システムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)します。  
  
   
  
## Examples  
 次の例では、制御可能なストーリーを使用して、<xref:System.Windows.Media.TextEffect>します。 <xref:System.Windows.Media.TextEffect>内に含まれる、<xref:System.Windows.FrameworkContentElement>のスコープの名前を付けます。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 次の例では、 <xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace> <xref:System.Windows.Media.Animation.HandoffBehavior>ユーザーを左クリックしたときにアニメーション化する、および<xref:System.Windows.Media.Animation.HandoffBehavior.Compose><xref:System.Windows.Media.Animation.HandoffBehavior>ユーザーが右クリックします。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementStoryboardWithHandoffBehaviorExample.cs#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementstoryboardwithhandoffbehaviorexample.vb#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, class System.Windows.FrameworkTemplate frameworkTemplate, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject, System::Windows::FrameworkTemplate ^ frameworkTemplate, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement * System.Windows.FrameworkTemplate * bool -&gt; unit" Usage="storyboard.Begin (containingObject, frameworkTemplate, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="frameworkTemplate" Type="System.Windows.FrameworkTemplate" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">指定した <c>frameworkTemplate</c> が適用されたオブジェクト。  <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="frameworkTemplate">アニメーション化するテンプレート。</param>
        <param name="isControllable">ストーリーボードを対話的に制御する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションを、指定したテンプレート内の対象に適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して置き換えられる対象のプロパティが既にアニメーション化されている場合、<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace>ハンドオフ動作します。  
  
 このストーリー ボードを対話的に制御を同じを指定する必要があります`containingObject`ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すときに  
  
 このメソッドが呼び出されると、<xref:System.Windows.Media.Animation.Clock>ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックが格納されている`containingObject`します。  
  
 ストーリー ボードのトリガーを開始、<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, class System.Windows.FrameworkTemplate frameworkTemplate, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject, System::Windows::FrameworkTemplate ^ frameworkTemplate, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement * System.Windows.FrameworkTemplate * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="storyboard.Begin (containingObject, frameworkTemplate, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="frameworkTemplate" Type="System.Windows.FrameworkTemplate" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="containingObject">指定した <c>frameworkTemplate</c> が適用されたオブジェクト。 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="frameworkTemplate">アニメーション化するテンプレート。</param>
        <param name="handoffBehavior">新しいアニメーションが現在のアニメーションと対話する際に使用する動作。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションを、指定したテンプレート内の対象に適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドが呼び出されると、<xref:System.Windows.Media.Animation.Clock>ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックが格納されている`containingObject`します。  
  
 ストーリー ボードのトリガーを開始、<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
## <a name="using-the-compose-handoffbehavior"></a>使用して、Compose HandoffBehavior  
 適用すると、 <xref:System.Windows.Media.Animation.Storyboard>、 <xref:System.Windows.Media.Animation.AnimationTimeline>、または<xref:System.Windows.Media.Animation.AnimationClock>を使用してプロパティを<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、any<xref:System.Windows.Media.Animation.Clock>以前にそのプロパティに関連付けられたオブジェクトがシステム リソース消費を続けますタイミング システムはありません。これらのクロックを自動的に削除します。  
  
 使用してクロックの数が多いを適用すると、パフォーマンスの問題を回避するために<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>、完了後に、アニメーション化されたプロパティから構成クロックを削除する必要があります。 クロックを削除する方法はいくつかあります。  
  
-   プロパティからすべてのクロックを削除するには、使用、<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>または<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>アニメーション化されたオブジェクトのメソッド。 最初のパラメーターとしてアニメーション化されているプロパティを指定し、 `null` 2 つ目として。 これにより、すべてのアニメーション クロックがプロパティから削除します。  
  
-   特定を削除する<xref:System.Windows.Media.Animation.AnimationClock>クロックの一覧は、使用して、<xref:System.Windows.Media.Animation.Clock.Controller%2A>のプロパティ、<xref:System.Windows.Media.Animation.AnimationClock>を取得する、 <xref:System.Windows.Media.Animation.ClockController>、呼び出して、<xref:System.Windows.Media.Animation.ClockController.Remove%2A>のメソッド、<xref:System.Windows.Media.Animation.ClockController>します。 これは、通常、<xref:System.Windows.Media.Animation.Clock.Completed>クロックのイベント ハンドラー。 唯一のルート クロックを使用して制御できることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>、<xref:System.Windows.Media.Animation.Clock.Controller%2A>子クロックのプロパティを返します`null`します。 なお、<xref:System.Windows.Media.Animation.Clock.Completed>イベントは、クロックの有効期間が永久の場合は呼び出されません。  その場合は、ユーザーが判断する必要がありますを呼び出すタイミング<xref:System.Windows.Media.Animation.ClockController.Remove%2A>します。  
  
 これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。  オブジェクトがガベージ コレクションの場合は、そのクロックも切断し、ガベージ コレクション。  
  
 クロック オブジェクトの詳細については、次を参照してください。[アニメーションとタイミング システムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="storyboard.Begin (containingObject, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="handoffBehavior">新しいアニメーションが現在のアニメーションと対話する際に使用する動作。</param>
        <param name="isControllable">アニメーションを起動した後に、アニメーションを制御できるかどうか (一時停止できるかどうか) を宣言します。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションを対象に適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すときのパラメーター  
  
 このメソッドが呼び出されると、<xref:System.Windows.Media.Animation.Clock>ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックが格納されている`containingObject`します。  
  
 ストーリー ボードのトリガーを開始、<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
## <a name="using-the-compose-handoffbehavior"></a>使用して、Compose HandoffBehavior  
 適用すると、 <xref:System.Windows.Media.Animation.Storyboard>、 <xref:System.Windows.Media.Animation.AnimationTimeline>、または<xref:System.Windows.Media.Animation.AnimationClock>を使用してプロパティを<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、any<xref:System.Windows.Media.Animation.Clock>以前にそのプロパティに関連付けられたオブジェクトがシステム リソース消費を続けますタイミング システムはありません。これらのクロックを自動的に削除します。  
  
 使用してクロックの数が多いを適用すると、パフォーマンスの問題を回避するために<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>、完了後に、アニメーション化されたプロパティから構成クロックを削除する必要があります。 クロックを削除する方法はいくつかあります。  
  
-   プロパティからすべてのクロックを削除するには、使用、<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>または<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>アニメーション化されたオブジェクトのメソッド。 最初のパラメーターとしてアニメーション化されているプロパティを指定し、 `null` 2 つ目として。 これにより、すべてのアニメーション クロックがプロパティから削除します。  
  
-   特定を削除する<xref:System.Windows.Media.Animation.AnimationClock>クロックの一覧は、使用して、<xref:System.Windows.Media.Animation.Clock.Controller%2A>のプロパティ、<xref:System.Windows.Media.Animation.AnimationClock>を取得する、 <xref:System.Windows.Media.Animation.ClockController>、呼び出して、<xref:System.Windows.Media.Animation.ClockController.Remove%2A>のメソッド、<xref:System.Windows.Media.Animation.ClockController>します。 これは、通常、<xref:System.Windows.Media.Animation.Clock.Completed>クロックのイベント ハンドラー。 唯一のルート クロックを使用して制御できることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>、<xref:System.Windows.Media.Animation.Clock.Controller%2A>子クロックのプロパティを返します`null`します。 なお、<xref:System.Windows.Media.Animation.Clock.Completed>イベントは、クロックの有効期間が永久の場合は呼び出されません。  その場合は、ユーザーが判断する必要がありますを呼び出すタイミング<xref:System.Windows.Media.Animation.ClockController.Remove%2A>します。  
  
 これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。  オブジェクトがガベージ コレクションの場合は、そのクロックも切断し、ガベージ コレクション。  
  
 クロック オブジェクトの詳細については、次を参照してください。[アニメーションとタイミング システムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)します。  
  
   
  
## Examples  
 次の例では、制御可能なストーリー ボードを作成する方法を示します。  
  
 [!code-csharp[animation_ovws_procedural_snip#ControllableStoryboardExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws_procedural_snip/CSharp/ControllableStoryboardExample.cs#controllablestoryboardexamplewholepage)]
 [!code-vb[animation_ovws_procedural_snip#ControllableStoryboardExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws_procedural_snip/visualbasic/controllablestoryboardexample.vb#controllablestoryboardexamplewholepage)]  
  
 次の例では、 <xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace> <xref:System.Windows.Media.Animation.HandoffBehavior>ユーザーを左クリックしたときにアニメーション化する、および<xref:System.Windows.Media.Animation.HandoffBehavior.Compose><xref:System.Windows.Media.Animation.HandoffBehavior>ユーザーが右クリックします。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkElementStoryboardHandoffBehaviorExample.cs#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkelementstoryboardhandoffbehaviorexample.vb#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, class System.Windows.FrameworkTemplate frameworkTemplate, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject, System::Windows::FrameworkTemplate ^ frameworkTemplate, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement * System.Windows.FrameworkTemplate * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="storyboard.Begin (containingObject, frameworkTemplate, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="frameworkTemplate" Type="System.Windows.FrameworkTemplate" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">指定した <c>frameworkTemplate</c> が適用されたオブジェクト。 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="frameworkTemplate">アニメーション化するテンプレート。</param>
        <param name="handoffBehavior">新しいアニメーションが現在のアニメーションと対話する際に使用する動作。</param>
        <param name="isControllable">ストーリーボードを対話的に制御する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションを、指定したテンプレート内の対象に適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このストーリー ボードを対話的に制御を同じを指定する必要があります`containingObject`ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すときに  
  
 このメソッドが呼び出されると、<xref:System.Windows.Media.Animation.Clock>ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックが格納されている`containingObject`します。  
  
 ストーリー ボードのトリガーを開始、<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
## <a name="using-the-compose-handoffbehavior"></a>使用して、Compose HandoffBehavior  
 適用すると、 <xref:System.Windows.Media.Animation.Storyboard>、 <xref:System.Windows.Media.Animation.AnimationTimeline>、または<xref:System.Windows.Media.Animation.AnimationClock>を使用してプロパティを<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、any<xref:System.Windows.Media.Animation.Clock>以前にそのプロパティに関連付けられたオブジェクトがシステム リソース消費を続けますタイミング システムはありません。これらのクロックを自動的に削除します。  
  
 使用してクロックの数が多いを適用すると、パフォーマンスの問題を回避するために<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>、完了後に、アニメーション化されたプロパティから構成クロックを削除する必要があります。 クロックを削除する方法はいくつかあります。  
  
-   プロパティからすべてのクロックを削除するには、使用、<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>または<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>アニメーション化されたオブジェクトのメソッド。 最初のパラメーターとしてアニメーション化されているプロパティを指定し、 `null` 2 つ目として。 これにより、すべてのアニメーション クロックがプロパティから削除します。  
  
-   特定を削除する<xref:System.Windows.Media.Animation.AnimationClock>クロックの一覧は、使用して、<xref:System.Windows.Media.Animation.Clock.Controller%2A>のプロパティ、<xref:System.Windows.Media.Animation.AnimationClock>を取得する、 <xref:System.Windows.Media.Animation.ClockController>、呼び出して、<xref:System.Windows.Media.Animation.ClockController.Remove%2A>のメソッド、<xref:System.Windows.Media.Animation.ClockController>します。 これは、通常、<xref:System.Windows.Media.Animation.Clock.Completed>クロックのイベント ハンドラー。 唯一のルート クロックを使用して制御できることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>、<xref:System.Windows.Media.Animation.Clock.Controller%2A>子クロックのプロパティを返します`null`します。 なお、<xref:System.Windows.Media.Animation.Clock.Completed>イベントは、クロックの有効期間が永久の場合は呼び出されません。  その場合は、ユーザーが判断する必要がありますを呼び出すタイミング<xref:System.Windows.Media.Animation.ClockController.Remove%2A>します。  
  
 これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。  オブジェクトがガベージ コレクションの場合は、そのクロックも切断し、ガベージ コレクション。  
  
 クロック オブジェクトの詳細については、次を参照してください。[アニメーションとタイミング システムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Storyboard Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Animation.Storyboard Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Storyboard" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::Animation::Storyboard ^ Clone();" />
      <MemberSignature Language="F#" Value="override this.Clone : unit -&gt; System.Windows.Media.Animation.Storyboard" Usage="storyboard.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Storyboard</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> の変更可能な複製を作成し、このオブジェクトの値の詳細コピーを作成します。 このメソッドは、依存関係プロパティをコピーするときにリソース参照とデータ バインディングをコピーしますが (ただし、これらは解決されなくなる場合があります)、アニメーションやその現在の値はコピーしません。</summary>
        <returns>現在のオブジェクトの変更可能な複製。 複製されたオブジェクトの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティは、ソースの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティが <see langword="true." /> である場合でも、<see langword="false" /> になります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、固定された <xref:System.Windows.Freezable> オブジェクト (または任意の <xref:System.Windows.Freezable> オブジェクト) の変更可能なコピーを作成します。 便宜上は、このメソッドは、厳密に型指定された実装と継承したバージョンをシャドウします。  
  
 詳細については、「<xref:System.Windows.Freezable.Clone%2A?displayProperty=nameWithType>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="storyboard.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.Animation.Storyboard" /> クラスの新しいインスタンスを作成します。</summary>
        <returns>新しい <see cref="T:System.Windows.Media.Animation.Storyboard" /> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって内部的に<xref:System.Windows.Freezable.CreateInstance%2A>の新しいインスタンスを作成するときに、<xref:System.Windows.Media.Animation.Storyboard>さまざまなクローン メソッドのクラス (など<xref:System.Windows.Freezable.Clone%2A>と<xref:System.Windows.Freezable.CloneCurrentValue%2A>)。  
  
   
  
## Examples  
 次の例は、の一般的な実装を示しています。<xref:System.Windows.Freezable.CreateInstanceCore%2A>します。  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>すべて<see cref="T:System.Windows.Media.Animation.Storyboard" />サブクラスは、このメソッドを実装する必要があります。一般的な実装は、クラスの既定のコンス トラクターを呼び出し、結果を返すだけです。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.CreateInstanceCore" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCurrentGlobalSpeed">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クロックの<xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A>速度は、位置、時刻が現在進行して、レートを現実世界の時間と比較します。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCurrentGlobalSpeed">
      <MemberSignature Language="C#" Value="public double GetCurrentGlobalSpeed ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetCurrentGlobalSpeed() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentGlobalSpeed () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetCurrentGlobalSpeed();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentGlobalSpeed : unit -&gt; double" Usage="storyboard.GetCurrentGlobalSpeed " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>現在のグローバル速度。クロックが停止している場合は 0。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentGlobalSpeed">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; GetCurrentGlobalSpeed (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;float64&gt; GetCurrentGlobalSpeed(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentGlobalSpeed (containingObject As FrameworkContentElement) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;double&gt; GetCurrentGlobalSpeed(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentGlobalSpeed : System.Windows.FrameworkContentElement -&gt; Nullable&lt;double&gt;" Usage="storyboard.GetCurrentGlobalSpeed containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>現在のグローバル速度。クロックが停止している場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クロックの<xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A>速度は、位置、時刻が現在進行して、レートを現実世界の時間と比較します。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentGlobalSpeed">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; GetCurrentGlobalSpeed (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;float64&gt; GetCurrentGlobalSpeed(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentGlobalSpeed (containingObject As FrameworkElement) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;double&gt; GetCurrentGlobalSpeed(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentGlobalSpeed : System.Windows.FrameworkElement -&gt; Nullable&lt;double&gt;" Usage="storyboard.GetCurrentGlobalSpeed containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>現在のグローバル速度。クロックが停止している場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クロックの<xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A>速度は、位置、時刻が現在進行して、レートを現実世界の時間と比較します。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCurrentIteration">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCurrentIteration">
      <MemberSignature Language="C#" Value="public int GetCurrentIteration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetCurrentIteration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentIteration () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetCurrentIteration();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentIteration : unit -&gt; int" Usage="storyboard.GetCurrentIteration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>現在のアクティブな期間内の、このクロックの現在の反復。このクロックが停止している場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クロックの最初のイテレーションでは、1 の値を持ちます。  
  
 このストーリー ボードがある場合、<xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A>設定`true`、順方向リバース ペアで構成全体の反復処理、セグメントだけでなく、これらのいずれか。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; GetCurrentIteration (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;int32&gt; GetCurrentIteration(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentIteration(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentIteration (containingObject As FrameworkContentElement) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;int&gt; GetCurrentIteration(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentIteration : System.Windows.FrameworkContentElement -&gt; Nullable&lt;int&gt;" Usage="storyboard.GetCurrentIteration containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>現在のアクティブな期間内の、このクロックの現在の反復。このクロックが停止している場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クロックの最初のイテレーションでは、1 の値を持ちます。  
  
 このストーリー ボードがある場合、<xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A>設定`true`、順方向リバース ペアで構成全体の反復処理、セグメントだけでなく、これらのいずれか。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; GetCurrentIteration (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;int32&gt; GetCurrentIteration(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentIteration(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentIteration (containingObject As FrameworkElement) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;int&gt; GetCurrentIteration(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentIteration : System.Windows.FrameworkElement -&gt; Nullable&lt;int&gt;" Usage="storyboard.GetCurrentIteration containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>現在のアクティブな期間内の、このクロックの現在の反復。このクロックが停止している場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クロックの最初のイテレーションでは、1 の値を持ちます。  
  
 このクロックのタイムラインがある場合、<xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A>設定`true`、順方向リバース ペアで構成全体の反復処理、セグメントだけでなく、これらのいずれか。  
  
 現在のイテレーションに関係なく、クロックを求めている、現在の反復を 1 に返します。 また、クロックを再起動するを 1 に、現在の反復も返します。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCurrentProgress">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCurrentProgress">
      <MemberSignature Language="C#" Value="public double GetCurrentProgress ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetCurrentProgress() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentProgress" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentProgress () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetCurrentProgress();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentProgress : unit -&gt; double" Usage="storyboard.GetCurrentProgress " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>このクロックが <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" /> の場合は <see langword="null" />、またはこのクロックがアクティブであり、その <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> の <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> が <see cref="P:System.Windows.Duration.Forever" /> の場合は 0.0。それ以外の場合は、現在の反復におけるこのクロックの現在の進行状況を示す 0.0 ～ 1.0 の値。 値 0.0 はまったく進行していないことを示し、値 1.0 はクロックが現在の反復の最後にあることを示します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProgress">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; GetCurrentProgress (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;float64&gt; GetCurrentProgress(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentProgress(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentProgress (containingObject As FrameworkContentElement) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;double&gt; GetCurrentProgress(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentProgress : System.Windows.FrameworkContentElement -&gt; Nullable&lt;double&gt;" Usage="storyboard.GetCurrentProgress containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>このクロックが <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" /> の場合は <see langword="null" />、またはこのクロックがアクティブであり、その <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> の <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> が <see cref="P:System.Windows.Duration.Forever" /> の場合は 0.0。それ以外の場合は、現在の反復におけるこのクロックの現在の進行状況を示す 0.0 ～ 1.0 の値。 値 0.0 はまったく進行していないことを示し、値 1.0 はクロックが現在の反復の最後にあることを示します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProgress">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; GetCurrentProgress (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;float64&gt; GetCurrentProgress(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentProgress(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentProgress (containingObject As FrameworkElement) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;double&gt; GetCurrentProgress(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentProgress : System.Windows.FrameworkElement -&gt; Nullable&lt;double&gt;" Usage="storyboard.GetCurrentProgress containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>このクロックが <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" /> の場合は <see langword="null" />、またはこのクロックがアクティブであり、その <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> の <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> が <see cref="P:System.Windows.Duration.Forever" /> の場合は 0.0。それ以外の場合は、現在の反復におけるこのクロックの現在の進行状況を示す 0.0 ～ 1.0 の値。 値 0.0 はまったく進行していないことを示し、値 1.0 はクロックが現在の反復の最後にあることを示します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCurrentState">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockState GetCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.Animation.ClockState GetCurrentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState () As ClockState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::Animation::ClockState GetCurrentState();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : unit -&gt; System.Windows.Media.Animation.ClockState" Usage="storyboard.GetCurrentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>このストーリーボード用に作成されたクロックの現在の状態 ( <see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" />、または <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドはわかりませんが、ストーリー ボードが一時停止しているかどうか。 ストーリー ボードが一時停止しているかどうかを調べるには、<xref:System.Windows.Media.Animation.Storyboard.GetIsPaused%2A>メソッド。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockState GetCurrentState (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.Animation.ClockState GetCurrentState(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentState(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState (containingObject As FrameworkContentElement) As ClockState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::Animation::ClockState GetCurrentState(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : System.Windows.FrameworkContentElement -&gt; System.Windows.Media.Animation.ClockState" Usage="storyboard.GetCurrentState containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>このストーリーボード用に作成されたクロックの現在の状態 ( <see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" />、または <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドはわかりませんが、ストーリー ボードが一時停止しているかどうか。 ストーリー ボードが一時停止しているかどうかを調べるには、<xref:System.Windows.Media.Animation.Storyboard.GetIsPaused%2A>メソッド。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockState GetCurrentState (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.Animation.ClockState GetCurrentState(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentState(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState (containingObject As FrameworkElement) As ClockState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::Animation::ClockState GetCurrentState(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : System.Windows.FrameworkElement -&gt; System.Windows.Media.Animation.ClockState" Usage="storyboard.GetCurrentState containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>このストーリーボード用に作成されたクロックの現在の状態 ( <see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" />、または <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドはわかりませんが、ストーリー ボードが一時停止しているかどうか。 ストーリー ボードが一時停止しているかどうかを調べるには、<xref:System.Windows.Media.Animation.Storyboard.GetIsPaused%2A>メソッド。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCurrentTime">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCurrentTime">
      <MemberSignature Language="C#" Value="public TimeSpan GetCurrentTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetCurrentTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentTime () As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetCurrentTime();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentTime : unit -&gt; TimeSpan" Usage="storyboard.GetCurrentTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>このストーリーボードのクロックが停止している (<see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />) 場合は <see langword="null" />。それ以外の場合は、ストーリーボードのクロックの現在の時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentTime">
      <MemberSignature Language="C#" Value="public Nullable&lt;TimeSpan&gt; GetCurrentTime (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; GetCurrentTime(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentTime (containingObject As FrameworkContentElement) As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;TimeSpan&gt; GetCurrentTime(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentTime : System.Windows.FrameworkContentElement -&gt; Nullable&lt;TimeSpan&gt;" Usage="storyboard.GetCurrentTime containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>このストーリーボードのクロックが停止している (<see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />) 場合は <see langword="null" />。それ以外の場合は、ストーリーボードのクロックの現在の時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentTime">
      <MemberSignature Language="C#" Value="public Nullable&lt;TimeSpan&gt; GetCurrentTime (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; GetCurrentTime(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentTime (containingObject As FrameworkElement) As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;TimeSpan&gt; GetCurrentTime(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentTime : System.Windows.FrameworkElement -&gt; Nullable&lt;TimeSpan&gt;" Usage="storyboard.GetCurrentTime containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を取得します。</summary>
        <returns>このストーリーボードのクロックが停止している (<see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />) 場合は <see langword="null" />。それ以外の場合は、ストーリーボードのクロックの現在の時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetIsPaused">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> が一時停止しているかどうかを示す値を取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetIsPaused">
      <MemberSignature Language="C#" Value="public bool GetIsPaused ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetIsPaused() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetIsPaused" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIsPaused () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetIsPaused();" />
      <MemberSignature Language="F#" Value="member this.GetIsPaused : unit -&gt; bool" Usage="storyboard.GetIsPaused " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> が一時停止しているかどうかを示す値を取得します。</summary>
        <returns>この <see cref="T:System.Windows.Media.Animation.Clock" /> のために作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> が一時停止している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="GetIsPaused">
      <MemberSignature Language="C#" Value="public bool GetIsPaused (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetIsPaused(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetIsPaused(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIsPaused (containingObject As FrameworkContentElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetIsPaused(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetIsPaused : System.Windows.FrameworkContentElement -&gt; bool" Usage="storyboard.GetIsPaused containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> が一時停止しているかどうかを示す値を取得します。</summary>
        <returns>この <see cref="T:System.Windows.Media.Animation.Clock" /> のために作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> が一時停止している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="GetIsPaused">
      <MemberSignature Language="C#" Value="public bool GetIsPaused (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetIsPaused(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetIsPaused(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIsPaused (containingObject As FrameworkElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetIsPaused(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetIsPaused : System.Windows.FrameworkElement -&gt; bool" Usage="storyboard.GetIsPaused containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> が一時停止しているかどうかを示す値を取得します。</summary>
        <returns>この <see cref="T:System.Windows.Media.Animation.Clock" /> のために作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> が一時停止している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="GetTarget">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetTarget (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetTarget(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetTarget(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTarget (element As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetTarget(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetTarget : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.Media.Animation.Storyboard.GetTarget element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">
          <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> の取得元となるタイムライン。</param>
        <summary>指定した <see cref="P:System.Windows.Media.Animation.Storyboard.Target" /> の <see cref="T:System.Windows.Media.Animation.Timeline" /> 値を取得します。</summary>
        <returns>
          <paramref name="element" /> の対象となる依存関係オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Windows.Media.Animation.Storyboard.Target%2A>を対象にしているオブジェクトを示すためにアニメーション タイムラインでプロパティをアタッチします。 ストーリー ボードを対象とするしくみの詳細については、次を参照してください。<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>します。 添付プロパティの機能の詳細については、次を参照してください。[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="GetTargetName">
      <MemberSignature Language="C#" Value="public static string GetTargetName (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTargetName(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetTargetName(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTargetName (element As DependencyObject) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTargetName(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetTargetName : System.Windows.DependencyObject -&gt; string" Usage="System.Windows.Media.Animation.Storyboard.GetTargetName element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">
          <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> の取得元となるタイムライン。</param>
        <summary>指定した <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> の <see cref="T:System.Windows.Media.Animation.Timeline" /> 値を取得します。</summary>
        <returns>
          <paramref name="element" /> の対象となる依存関係オブジェクトの名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、取得、<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>添付プロパティを指定したオブジェクト。 ストーリー ボードを対象とするしくみの詳細については、次を参照してください。<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>します。 添付プロパティの機能の詳細については、次を参照してください。[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="GetTargetProperty">
      <MemberSignature Language="C#" Value="public static System.Windows.PropertyPath GetTargetProperty (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.PropertyPath GetTargetProperty(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetTargetProperty(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTargetProperty (element As DependencyObject) As PropertyPath" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::PropertyPath ^ GetTargetProperty(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetTargetProperty : System.Windows.DependencyObject -&gt; System.Windows.PropertyPath" Usage="System.Windows.Media.Animation.Storyboard.GetTargetProperty element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">
          <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> の取得元となる依存関係オブジェクト。</param>
        <summary>指定した <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> の <see cref="T:System.Windows.Media.Animation.Timeline" /> 値を取得します。</summary>
        <returns>
          <paramref name="element" /> の対象となるプロパティ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、取得、<xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A>添付プロパティを指定したオブジェクト。 ストーリー ボードを対象とするしくみの詳細については、次を参照してください。<xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A>添付プロパティ。 添付プロパティの機能の詳細については、次を参照してください。[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)します。  
  
 されている場合、<xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A>設定が、マークアップでは、このメソッドは、空を返します。<xref:System.Windows.PropertyPath>プロパティの参照を解決して、解析時に内部的に格納されているためです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Pause">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> を一時停止します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="storyboard.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> を一時停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ストーリー ボードを一時停止しますが、アクティブまたは現在一時停止中でない場合は、目に見える効果がありません。 その結果、関連付けられているすべての子も一時停止します。  
  
 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
## <a name="beginning-a-paused-storyboard"></a>一時停止中のストーリー ボードを開始  
 ときにする<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>一時停止されたストーリー ボード、再開、再起動して表示されます。 ただし、実際です。 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドが実際に置き換える、一時停止した<xref:System.Windows.Media.Animation.Storyboard>新しい一時停止されていないバージョンです。 毎回、<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドが呼び出されると、ストーリー ボードのクロックのオブジェクトが作成されます。 これらのクロックは、アニメーション化するプロパティに配布されます。 したがって、<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドが呼び出される、そのクロックを再起動しません。 新しいクロックで置き換え。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause (containingObject As FrameworkContentElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Pause : System.Windows.FrameworkContentElement -&gt; unit" Usage="storyboard.Pause containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> に関連付けられている指定された <see cref="T:System.Windows.FrameworkContentElement" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を一時停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ストーリー ボードを一時停止しますが、アクティブまたは現在一時停止中でない場合は、目に見える効果がありません。 その結果、関連付けられているすべての子も一時停止します。  
  
 一時停止中のストーリー ボードをシークは再開されません。 一時停止中のストーリー ボードを再開する唯一の方法が使用するには、<xref:System.Windows.Media.Animation.Storyboard.Resume%2A>メソッド。 呼び出す、<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドでは、再開することの外観を備えた新しい 1 つに、一時停止中のストーリー ボードをもう一度置き換えます。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例を参照してください[方法: ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ストーリー ボードのクロックを一時停止、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
## <a name="beginning-a-paused-storyboard"></a>一時停止中のストーリー ボードを開始  
 ときにする<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>一時停止されたストーリー ボード、再開、再起動して表示されます。 ただし、実際です。 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A>実際には、します。 毎回、<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドが呼び出されると、ストーリー ボードのクロックのオブジェクトが作成されます。 これらのクロックは、アニメーション化するプロパティに配布されます。 したがって、<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドが呼び出される、そのクロックを再起動しません。 新しいクロックで置き換え。  
  
   
  
## Examples  
 次の例では、制御可能なストーリーを使用して、<xref:System.Windows.Media.TextEffect>します。 <xref:System.Windows.Media.TextEffect>内に含まれる、<xref:System.Windows.FrameworkContentElement>のスコープの名前を付けます。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkContentElement)" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause (containingObject As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Pause : System.Windows.FrameworkElement -&gt; unit" Usage="storyboard.Pause containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> に関連付けられている指定された <see cref="T:System.Windows.FrameworkElement" /> の <see cref="T:System.Windows.Media.Animation.Storyboard" /> を一時停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ストーリー ボードを一時停止しますが、アクティブまたは現在一時停止中でない場合は、目に見える効果がありません。 その結果、関連付けられているすべての子も一時停止します。  
  
 一時停止中のストーリー ボードをシークは再開されません。 一時停止中のストーリー ボードを再開する唯一の方法が使用するには、<xref:System.Windows.Media.Animation.Storyboard.Resume%2A>メソッド。 呼び出す、<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドでは、再開することの外観を備えた新しい 1 つに、一時停止中のストーリー ボードをもう一度置き換えます。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ストーリー ボードのクロックを一時停止、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
## <a name="beginning-a-paused-storyboard"></a>一時停止中のストーリー ボードを開始  
 ときにする<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>一時停止されたストーリー ボード、再開、再起動して表示されます。 ただし、実際です。 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A>実際には、します。 毎回、<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドが呼び出されると、ストーリー ボードのクロックのオブジェクトが作成されます。 これらのクロックは、アニメーション化するプロパティに配布されます。 したがって、<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドが呼び出される、そのクロックを再起動しません。 新しいクロックで置き換え。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> オブジェクトを削除します。 この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に属するアニメーションは、<see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> の設定に関係なく、アニメーション化の対象プロパティへの影響を及ぼすことはなくなります。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Remove" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove();" />
      <MemberSignature Language="F#" Value="member this.Remove : unit -&gt; unit" Usage="storyboard.Remove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> オブジェクトを削除します。 この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に属するアニメーションは、<see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> の設定に関係なく、アニメーション化の対象プロパティへの影響を及ぼすことはなくなります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 行われたすべての対話型操作、 <xref:System.Windows.Media.Animation.Clock>、ためでも、 <xref:System.Windows.Media.Animation.Storyboard>、次の描画の少し前に、タイミング エンジンの次の目盛りで発生します。 つまり、<xref:System.Windows.Media.Animation.Storyboard.Remove%2A>メソッドでもこの時点までアニメーション化されたプロパティに影響します。 つまり、フレームが表示されたら、[次へ] の時間、ストーリー ボードは削除されます。 この時刻より前に、プロパティからアニメーションの関連付けを解除する必要がある場合、<xref:System.Windows.UIElement.BeginAnimation%2A>メソッドを`animation`のパラメーター値`null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Remove(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (containingObject As FrameworkContentElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.FrameworkContentElement -&gt; unit" Usage="storyboard.Remove containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> オブジェクトを削除します。 この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に属するアニメーションは、<see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> の設定に関係なく、アニメーション化の対象プロパティへの影響を及ぼすことはなくなります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ストーリー ボードのクロックのトリガーを削除、<xref:System.Windows.Media.Animation.Timeline.RemoveRequested>イベント。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Remove(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (containingObject As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.FrameworkElement -&gt; unit" Usage="storyboard.Remove containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> オブジェクトを削除します。 この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に属するアニメーションは、<see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> の設定に関係なく、アニメーション化の対象プロパティへの影響を及ぼすことはなくなります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ストーリー ボードのクロックのトリガーを削除、<xref:System.Windows.Media.Animation.Timeline.RemoveRequested>イベント。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Resume">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> を再開します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="storyboard.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> を再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume (containingObject As FrameworkContentElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Resume : System.Windows.FrameworkContentElement -&gt; unit" Usage="storyboard.Resume containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> を再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一時停止されていないストーリー ボードを再開しても効果はありません。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 一時停止中のストーリー ボードをシークは再開されません。 一時停止中のストーリー ボードを再開する唯一の方法が使用するには、<xref:System.Windows.Media.Animation.Storyboard.Resume%2A>メソッド。 呼び出す、<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッド、ストーリー ボードが開始した後に再開することの外観を備えた古いストーリー ボードが置き換えられます。  
  
 一時停止されたストーリー ボードのクロックの再開、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
   
  
## Examples  
 次の例では、制御可能なストーリーを使用して、<xref:System.Windows.Media.TextEffect>します。 <xref:System.Windows.Media.TextEffect>内に含まれる、<xref:System.Windows.FrameworkContentElement>のスコープの名前を付けます。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkContentElement)" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume (containingObject As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Resume : System.Windows.FrameworkElement -&gt; unit" Usage="storyboard.Resume containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> を再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一時停止されていないストーリー ボードを再開しても効果はありません。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 一時停止中のストーリー ボードをシークは再開されません。 一時停止中のストーリー ボードを再開する唯一の方法が使用するには、<xref:System.Windows.Media.Animation.Storyboard.Resume%2A>メソッド。 呼び出す、<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッド、ストーリー ボードが開始した後に再開することの外観を備えた古いストーリー ボードが置き換えられます。  
  
 一時停止されたストーリー ボードのクロックの再開、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> は、クロックが次の目盛りを刻んだときに、新しい位置までシークします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.Seek : TimeSpan -&gt; unit" Usage="storyboard.Seek offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">タイムラインが前方または後方にどれだけ移動するかを示す正の値または負の値。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を指定位置までシークします。 <see cref="T:System.Windows.Media.Animation.Storyboard" /> は、クロックが次の目盛りを刻んだときに、要求されたシークを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 シーク操作には、ストーリー ボードはなりません。<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>または<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>アカウントに設定します。 ストーリー ボードがものとして扱われます、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.Seek : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="storyboard.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">タイムラインが、指定した <c>origin</c> から前方または後方にどれだけ移動するかを示す正の値または負の値。</param>
        <param name="origin">
          <c>offset</c> の適用元の位置。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を指定位置までシークします。 <see cref="T:System.Windows.Media.Animation.Storyboard" /> は、クロックが次の目盛りを刻んだときに、要求されたシークを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 シーク操作には、ストーリー ボードはなりません。<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>または<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>アカウントに設定します。 ストーリー ボードがものとして扱われます、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (System.Windows.FrameworkContentElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(class System.Windows.FrameworkContentElement containingObject, valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Seek(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (containingObject As FrameworkContentElement, offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(System::Windows::FrameworkContentElement ^ containingObject, TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.Seek : System.Windows.FrameworkContentElement * TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="storyboard.Seek (containingObject, offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <param name="offset">タイムラインが、指定した <c>origin</c> から前方または後方にどれだけ移動するかを示す正の値または負の値。</param>
        <param name="origin">
          <c>offset</c> の適用元の位置。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を指定位置までシークします。 <see cref="T:System.Windows.Media.Animation.Storyboard" /> は、クロックが次の目盛りを刻んだときに、要求されたシークを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 シーク操作には、ストーリー ボードはなりません。<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>または<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>アカウントに設定します。 ストーリー ボードがものとして扱われます、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 このメソッドの変更、ストーリー ボードのクロックの<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>に<xref:System.Windows.Media.Animation.ClockState.Active>します。 このメソッドには、次のチェック マークが処理されるまで、タイミング ツリーへの影響がありません。 その結果、適切なイベントも発生しないそれまでの間。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ストーリー ボードのトリガーのシーク、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>イベント。  
  
   
  
## Examples  
 次の例では、両方を示しています、<xref:System.Windows.Media.Animation.Storyboard.Seek%2A>と<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>メソッド。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementSeekExample.cs#frameworkcontentelementseekexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementseekexample.vb#frameworkcontentelementseekexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (System.Windows.FrameworkElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(class System.Windows.FrameworkElement containingObject, valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Seek(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (containingObject As FrameworkElement, offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(System::Windows::FrameworkElement ^ containingObject, TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.Seek : System.Windows.FrameworkElement * TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="storyboard.Seek (containingObject, offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <param name="offset">タイムラインが、指定した <c>origin</c> から前方または後方にどれだけ移動するかを示す正の値または負の値。</param>
        <param name="origin">
          <c>offset</c> の適用元の位置。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を指定位置までシークします。 <see cref="T:System.Windows.Media.Animation.Storyboard" /> は、クロックが次の目盛りを刻んだときに、要求されたシークを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 シーク操作には、ストーリー ボードはなりません。<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>または<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>アカウントに設定します。 ストーリー ボードがものとして扱われます、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 このメソッドの変更、ストーリー ボードのクロックの<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>に<xref:System.Windows.Media.Animation.ClockState.Active>します。 このメソッドには、次のチェック マークが処理されるまで、タイミング ツリーへの影響がありません。 その結果、適切なイベントも発生しないそれまでの間。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、制御することで行われた場合に削除されます。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ストーリー ボードのトリガーのシーク、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>イベント。  
  
   
  
## Examples  
 次の例では、シーク (ストーリー ボードが開始された後、1 秒間に (スキップ) する方法を示します。  
  
 [!code-csharp[timingbehaviors_procedural_snip#SeekStoryboardExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/SeekStoryboardExample.cs#seekstoryboardexamplewholepage)]
 [!code-vb[timingbehaviors_procedural_snip#SeekStoryboardExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/seekstoryboardexample.vb#seekstoryboardexamplewholepage)]  
  
 次の例では、両方を示しています、<xref:System.Windows.Media.Animation.Storyboard.Seek%2A>と<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>メソッド。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/SeekExample.cs#seekexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/seekexample.vb#seekexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SeekAlignedToLastTick">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を新しい位置まで即座 (同期的) にシークします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SeekAlignedToLastTick (offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SeekAlignedToLastTick(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.SeekAlignedToLastTick : TimeSpan -&gt; unit" Usage="storyboard.SeekAlignedToLastTick offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">タイムラインが前方または後方にどれだけ移動するかを示す正の値または負の値。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を新しい位置まで即座 (同期的) にシークします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> 検索する時の配置、<xref:System.Windows.Media.Animation.Storyboard>前回のクロック ティックでします。 値はすぐに期限の変更を反映した更新<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>画面が画面の更新までこれらの変更を反映していない場合でも、します。  
  
 シーク操作には、ストーリー ボードはなりません。<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>または<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>アカウントに設定します。 ストーリー ボードがものとして扱われます、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SeekAlignedToLastTick (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SeekAlignedToLastTick(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.SeekAlignedToLastTick : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="storyboard.SeekAlignedToLastTick (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">タイムラインが、指定した <c>origin</c> から前方または後方にどれだけ移動するかを示す正の値または負の値。</param>
        <param name="origin">
          <c>offset</c> の適用元の位置。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を新しい位置まで即座 (同期的) にシークします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> 検索する時の配置、<xref:System.Windows.Media.Animation.Storyboard>前回のクロック ティックでします。 値はすぐに期限の変更を反映した更新<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>画面が画面の更新までこれらの変更を反映していない場合でも、します。  
  
 シーク操作には、ストーリー ボードはなりません。<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>または<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>アカウントに設定します。 ストーリー ボードがものとして扱われます、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (System.Windows.FrameworkContentElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(class System.Windows.FrameworkContentElement containingObject, valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SeekAlignedToLastTick (containingObject As FrameworkContentElement, offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SeekAlignedToLastTick(System::Windows::FrameworkContentElement ^ containingObject, TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.SeekAlignedToLastTick : System.Windows.FrameworkContentElement * TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="storyboard.SeekAlignedToLastTick (containingObject, offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <param name="offset">タイムラインが、指定した <c>origin</c> から前方または後方にどれだけ移動するかを示す正の値または負の値。</param>
        <param name="origin">
          <c>offset</c> の適用元の位置。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を新しい位置まで即座 (同期的) にシークします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> 検索する時の配置、<xref:System.Windows.Media.Animation.Storyboard>前回のクロック ティックでします。 値はすぐに期限の変更を反映した更新<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>画面が画面の更新までこれらの変更を反映していない場合でも、します。  
  
 シーク操作には、ストーリー ボードはなりません。<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>または<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>アカウントに設定します。 ストーリー ボードがものとして扱われます、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 このメソッドの変更、ストーリー ボードのクロックの<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>に  
  
 <xref:System.Windows.Media.Animation.ClockState.Active>。  
  
 ストーリー ボードのトリガーのシーク、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>イベント。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
   
  
## Examples  
 次の例では、両方を示しています、<xref:System.Windows.Media.Animation.Storyboard.Seek%2A>と<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>メソッド。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementSeekExample.cs#frameworkcontentelementseekexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementseekexample.vb#frameworkcontentelementseekexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (System.Windows.FrameworkElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(class System.Windows.FrameworkElement containingObject, valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SeekAlignedToLastTick (containingObject As FrameworkElement, offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SeekAlignedToLastTick(System::Windows::FrameworkElement ^ containingObject, TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.SeekAlignedToLastTick : System.Windows.FrameworkElement * TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="storyboard.SeekAlignedToLastTick (containingObject, offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <param name="offset">タイムラインが、指定した <c>origin</c> から前方または後方にどれだけ移動するかを示す正の値または負の値。</param>
        <param name="origin">
          <c>offset</c> の適用元の位置。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を新しい位置まで即座 (同期的) にシークします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> 検索する時の配置、<xref:System.Windows.Media.Animation.Storyboard>前回のクロック ティックでします。 値はすぐに期限の変更を反映した更新<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>画面が画面の更新までこれらの変更を反映していない場合でも、します。  
  
 シーク操作には、ストーリー ボードはなりません。<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>または<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>アカウントに設定します。 ストーリー ボードがものとして扱われます、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 このメソッドの変更、ストーリー ボードのクロックの<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>に  
  
 <xref:System.Windows.Media.Animation.ClockState.Active>。  
  
 ストーリー ボードのトリガーのシーク、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>イベント。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
   
  
## Examples  
 次の例では、両方を示しています、<xref:System.Windows.Media.Animation.Storyboard.Seek%2A>と<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>メソッド。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/SeekExample.cs#seekexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/seekexample.vb#seekexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetSpeedRatio">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> の対話的速度比率を設定します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetSpeedRatio">
      <MemberSignature Language="C#" Value="public void SetSpeedRatio (double speedRatio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSpeedRatio(float64 speedRatio) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSpeedRatio (speedRatio As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSpeedRatio(double speedRatio);" />
      <MemberSignature Language="F#" Value="member this.SetSpeedRatio : double -&gt; unit" Usage="storyboard.SetSpeedRatio speedRatio" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speedRatio" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="speedRatio">ストーリーボードの新しい対話型速度比である 0 より大きい有限値。 この値とストーリーボードの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> の値を乗算して、ストーリーボードの有効な速度が決定されます。 この値は、ストーリーボードの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> プロパティを上書きするわけではありません。 たとえば、このメソッドを呼び出し、<see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> が 0.5 に設定されたストーリーボードに対して、対話的速度比率として 3 を指定した場合、ストーリーボードの有効な速度として 1.5 が算出されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> の対話的速度比率を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpeedRatio">
      <MemberSignature Language="C#" Value="public void SetSpeedRatio (System.Windows.FrameworkContentElement containingObject, double speedRatio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSpeedRatio(class System.Windows.FrameworkContentElement containingObject, float64 speedRatio) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Windows.FrameworkContentElement,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSpeedRatio (containingObject As FrameworkContentElement, speedRatio As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSpeedRatio(System::Windows::FrameworkContentElement ^ containingObject, double speedRatio);" />
      <MemberSignature Language="F#" Value="member this.SetSpeedRatio : System.Windows.FrameworkContentElement * double -&gt; unit" Usage="storyboard.SetSpeedRatio (containingObject, speedRatio)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="speedRatio" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <param name="speedRatio">ストーリーボードの新しい対話型速度比である 0 より大きい有限値。 この値とストーリーボードの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> の値を乗算して、ストーリーボードの有効な速度が決定されます。 この値は、ストーリーボードの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> プロパティを上書きするわけではありません。 たとえば、このメソッドを呼び出し、<see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> が 0.5 に設定されたストーリーボードに対して、対話的速度比率として 3 を指定した場合、ストーリーボードの有効な速度として 1.5 が算出されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> の対話的速度比率を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 このメソッドを呼び出すとトリガー、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
   
  
## Examples  
 次の例では、制御可能なストーリーを使用して、<xref:System.Windows.Media.TextEffect>します。 <xref:System.Windows.Media.TextEffect>内に含まれる、<xref:System.Windows.FrameworkContentElement>のスコープの名前を付けます。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpeedRatio">
      <MemberSignature Language="C#" Value="public void SetSpeedRatio (System.Windows.FrameworkElement containingObject, double speedRatio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSpeedRatio(class System.Windows.FrameworkElement containingObject, float64 speedRatio) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Windows.FrameworkElement,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSpeedRatio (containingObject As FrameworkElement, speedRatio As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSpeedRatio(System::Windows::FrameworkElement ^ containingObject, double speedRatio);" />
      <MemberSignature Language="F#" Value="member this.SetSpeedRatio : System.Windows.FrameworkElement * double -&gt; unit" Usage="storyboard.SetSpeedRatio (containingObject, speedRatio)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="speedRatio" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <param name="speedRatio">ストーリーボードの新しい対話型速度比である 0 より大きい有限値。 この値とストーリーボードの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> の値を乗算して、ストーリーボードの有効な速度が決定されます。 この値は、ストーリーボードの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> プロパティを上書きするわけではありません。 たとえば、このメソッドを呼び出し、<see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> が 0.5 に設定されたストーリーボードに対して、対話的速度比率として 3 を指定した場合、ストーリーボードの有効な速度として 1.5 が算出されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> の対話的速度比率を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 このメソッドを呼び出すとトリガー、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>イベント。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTarget">
      <MemberSignature Language="C#" Value="public static void SetTarget (System.Windows.DependencyObject element, System.Windows.DependencyObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTarget(class System.Windows.DependencyObject element, class System.Windows.DependencyObject value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetTarget(System.Windows.DependencyObject,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetTarget (element As DependencyObject, value As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetTarget(System::Windows::DependencyObject ^ element, System::Windows::DependencyObject ^ value);" />
      <MemberSignature Language="F#" Value="static member SetTarget : System.Windows.DependencyObject * System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.Media.Animation.Storyboard.SetTarget (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">指定した依存関係オブジェクトを対象とする <see cref="T:System.Windows.Media.Animation.Timeline" />。</param>
        <param name="value">対象となる依存関係オブジェクト。</param>
        <summary>指定した <see cref="T:System.Windows.Media.Animation.Timeline" /> が、依存関係オブジェクトを対象にするように指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、設定、<xref:System.Windows.Media.Animation.Storyboard.Target%2A>添付プロパティを指定したオブジェクト。 ストーリー ボードを対象とするしくみの詳細については、次を参照してください。<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>します。 添付プロパティの機能の詳細については、次を参照してください。[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)します。  
  
> [!NOTE]
>  <xref:System.Windows.Media.Animation.Storyboard.Target%2A>プロパティがいずれかに設定できるため、シリアル化可能な<xref:System.Windows.DependencyObject>します。 このオブジェクトを正しく XAML から参照できることは保証されません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="SetTargetName">
      <MemberSignature Language="C#" Value="public static void SetTargetName (System.Windows.DependencyObject element, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTargetName(class System.Windows.DependencyObject element, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetTargetName(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetTargetName (element As DependencyObject, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetTargetName(System::Windows::DependencyObject ^ element, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member SetTargetName : System.Windows.DependencyObject * string -&gt; unit" Usage="System.Windows.Media.Animation.Storyboard.SetTargetName (element, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="element">指定した依存関係オブジェクトを対象とする <see cref="T:System.Windows.Media.Animation.Timeline" />。</param>
        <param name="name">対象とする依存関係オブジェクトの名前。</param>
        <summary>指定した <see cref="T:System.Windows.Media.Animation.Timeline" /> が、指定した名前の依存関係オブジェクトを対象にするように指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、設定、<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>添付プロパティを指定したオブジェクト。 ストーリー ボードを対象とするしくみの詳細については、次を参照してください。<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>します。 添付プロパティの機能の詳細については、次を参照してください。[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="SetTargetProperty">
      <MemberSignature Language="C#" Value="public static void SetTargetProperty (System.Windows.DependencyObject element, System.Windows.PropertyPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTargetProperty(class System.Windows.DependencyObject element, class System.Windows.PropertyPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetTargetProperty(System.Windows.DependencyObject,System.Windows.PropertyPath)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetTargetProperty (element As DependencyObject, path As PropertyPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetTargetProperty(System::Windows::DependencyObject ^ element, System::Windows::PropertyPath ^ path);" />
      <MemberSignature Language="F#" Value="static member SetTargetProperty : System.Windows.DependencyObject * System.Windows.PropertyPath -&gt; unit" Usage="System.Windows.Media.Animation.Storyboard.SetTargetProperty (element, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="path" Type="System.Windows.PropertyPath" />
      </Parameters>
      <Docs>
        <param name="element">指定した依存関係プロパティを関連付ける <see cref="T:System.Windows.Media.Animation.Timeline" />。</param>
        <param name="path">アニメーション化する依存関係プロパティを示すパス。</param>
        <summary>指定した <see cref="T:System.Windows.Media.Animation.Timeline" /> が、指定した依存関係プロパティを対象にするように指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、設定、<xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A>添付プロパティを指定したオブジェクト。 ストーリー ボードを対象とするしくみの詳細については、次を参照してください。<xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A>します。 添付プロパティの機能の詳細については、次を参照してください。[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SkipToFill">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このストーリーボードの <see cref="T:System.Windows.Media.Animation.Clock" /> の現在の時刻をアクティブ期間の最後まで進めます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SkipToFill" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToFill ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToFill();" />
      <MemberSignature Language="F#" Value="member this.SkipToFill : unit -&gt; unit" Usage="storyboard.SkipToFill " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このストーリーボードの <see cref="T:System.Windows.Media.Animation.Clock" /> の現在の時刻をアクティブ期間の最後まで進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SkipToFill(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToFill (containingObject As FrameworkContentElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToFill(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.SkipToFill : System.Windows.FrameworkContentElement -&gt; unit" Usage="storyboard.SkipToFill containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>このストーリーボードの <see cref="T:System.Windows.Media.Animation.Clock" /> の現在の時刻をアクティブ期間の最後まで進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ストーリー ボードを進めますアクティブな期間の末尾に現在の時刻。この時点で、ストーリー ボードの動作がで指定されたその<xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A>設定します。 場合<xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A>に設定されている<xref:System.Windows.Media.Animation.FillBehavior.HoldEnd>、プロパティ設定されている場合、ストーリー ボードを塗りつぶします; <xref:System.Windows.Media.Animation.FillBehavior.Stop>、ストーリー ボードが停止します。  
  
 このメソッドを呼び出す無限の期間を含むストーリー ボードで、無限の数の影響はありません。 非アクティブのストーリー ボードでこのメソッドを呼び出しても効果はありません。  
  
 期間のトリガーをその fill にクロックを進める、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>イベント。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
   
  
## Examples  
 次の例では、制御可能なストーリーを使用して、<xref:System.Windows.Media.TextEffect>します。 <xref:System.Windows.Media.TextEffect>内に含まれる、<xref:System.Windows.FrameworkContentElement>のスコープの名前を付けます。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SkipToFill(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToFill (containingObject As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToFill(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.SkipToFill : System.Windows.FrameworkElement -&gt; unit" Usage="storyboard.SkipToFill containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>このストーリーボードの <see cref="T:System.Windows.Media.Animation.Clock" /> の現在の時刻をアクティブ期間の最後まで進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ストーリー ボードを進めますアクティブな期間の末尾に現在の時刻。この時点で、ストーリー ボードの動作がで指定されたその<xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A>設定します。 場合<xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A>に設定されている<xref:System.Windows.Media.Animation.FillBehavior.HoldEnd>、プロパティ設定されている場合、ストーリー ボードを塗りつぶします; <xref:System.Windows.Media.Animation.FillBehavior.Stop>、ストーリー ボードが停止します。  
  
 このメソッドを呼び出す無限の期間を含むストーリー ボードで、無限の数の影響はありません。 非アクティブのストーリー ボードでこのメソッドを呼び出しても効果はありません。  
  
 期間のトリガーをその fill にクロックを進める、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>イベント。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Stop">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> を停止します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="storyboard.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ストーリー ボードを停止するには発生しません。、<xref:System.Windows.Media.Animation.Timeline.Completed>イベント。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Stop(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop (containingObject As FrameworkContentElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Stop : System.Windows.FrameworkContentElement -&gt; unit" Usage="storyboard.Stop containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Media.Animation.ClockState.Stopped>ストーリー ボードに影響しません、ターゲットのプロパティ: アニメーション化されたプロパティが以前の値に戻ります。  
  
 クロックを停止、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>イベント、ではなく、<xref:System.Windows.Media.Animation.Timeline.Completed>イベント。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
   
  
## Examples  
 次の例では、制御可能なストーリーを使用して、<xref:System.Windows.Media.TextEffect>します。 <xref:System.Windows.Media.TextEffect>内に含まれる、<xref:System.Windows.FrameworkContentElement>のスコープの名前を付けます。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Stop(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop (containingObject As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Stop : System.Windows.FrameworkElement -&gt; unit" Usage="storyboard.Stop containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Media.Animation.ClockState.Stopped>ストーリー ボードに影響しません、ターゲットのプロパティ: アニメーション化されたプロパティが以前の値に戻ります。  
  
 クロックを停止、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>と<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>イベント、ではなく、<xref:System.Windows.Media.Animation.Timeline.Completed>イベント。  
  
 このストーリー ボードを対話的に制御を同じを使用する必要があります`containingObject`パラメーター、ストーリー ボードを開始するために使用する対話型のメソッドを呼び出すとき。 制御可能なストーリー ボードは一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>メソッドを指定して`true`制御可能にします。 例については、次を参照してください。[方法:、ストーリー ボード開始後の制御](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="see GetTarget, and SetTarget" />
      <MemberSignature Language="ILAsm" Value="see GetTarget, and SetTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Storyboard.Target" />
      <MemberSignature Language="VB.NET" Value="see GetTarget, and SetTarget" />
      <MemberSignature Language="F#" Value="see GetTarget, and SetTarget" Usage="see GetTarget, and SetTarget" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetName">
      <MemberSignature Language="C#" Value="see GetTargetName, and SetTargetName" />
      <MemberSignature Language="ILAsm" Value="see GetTargetName, and SetTargetName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      <MemberSignature Language="VB.NET" Value="see GetTargetName, and SetTargetName" />
      <MemberSignature Language="F#" Value="see GetTargetName, and SetTargetName" Usage="see GetTargetName, and SetTargetName" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetNameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetNameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetNameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.Storyboard.TargetNameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetNameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetNameProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetNameProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.Animation.Storyboard.TargetNameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 添付プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.Storyboard.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.Animation.Storyboard.TargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Media.Animation.Storyboard.Target" /> 添付プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="TargetPropertyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetPropertyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetPropertyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.Storyboard.TargetPropertyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetPropertyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetPropertyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetPropertyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.Animation.Storyboard.TargetPropertyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> 添付プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" />
      </Docs>
    </Member>
  </Members>
</Type>