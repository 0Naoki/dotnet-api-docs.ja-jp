<Type Name="Animatable" FullName="System.Windows.Media.Animation.Animatable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d76f2c0965e10e5062bdfec4d16886dd46b80a71" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69166242" /></Metadata><TypeSignature Language="C#" Value="public abstract class Animatable : System.Windows.Freezable, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Animatable extends System.Windows.Freezable implements class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.Animatable" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Animatable&#xA;Inherits Freezable&#xA;Implements IAnimatable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Animatable abstract : System::Windows::Freezable, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type Animatable = class&#xA;    inherit Freezable&#xA;    interface IAnimatable&#xA;    interface DUCE.IResource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>アニメーション サポートを提供する抽象クラス。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Animatable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Animatable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Media.Animation.Animatable" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した <see cref="T:System.Windows.DependencyProperty" /> を使用して、指定した <see cref="T:System.Windows.Media.Animation.AnimationClock" /> をアニメーション化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="animatable.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">アニメーション化するプロパティ。</param>
        <param name="clock">指定したプロパティをアニメーション化する際に使用するクロック。 <paramref name="clock" /> が <see langword="null" /> の場合は、すべてのアニメーションが指定したプロパティから削除されます (ただし停止されません)。</param>
        <summary><see cref="T:System.Windows.Media.Animation.AnimationClock" /> を指定した <see cref="T:System.Windows.DependencyProperty" /> に適用します。 プロパティが既にアニメーション化されている場合は、<see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> ハンドオフ動作が使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用してプロパティからクロックを削除しても、クロックは停止しないことに注意してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="animatable.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">アニメーション化するプロパティ。</param>
        <param name="clock">指定したプロパティをアニメーション化する際に使用するクロック。 <paramref name="handoffBehavior" /> が <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> であり、<paramref name="clock" /> が <see langword="null" /> である場合、指定したプロパティからすべてのアニメーションが削除されます (停止はされません)。 <paramref name="handoffBehavior" /> が <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" /> であり、クロックが <see langword="null" /> である場合、このメソッドは無効です。</param>
        <param name="handoffBehavior">プロパティ値に既に影響を及ぼしている現在のアニメーションと新しいアニメーションが対話する方法を指定する値。</param>
        <summary><see cref="T:System.Windows.Media.Animation.AnimationClock" /> を指定した <see cref="T:System.Windows.DependencyProperty" /> に適用します。 プロパティが既にアニメーション化されている場合は、指定した <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> が使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用してプロパティからクロックを削除しても、クロックは停止しないことに注意してください。  
  
## <a name="using-the-compose-handoffbehavior"></a>作成 HandoffBehavior の使用  
 を使用して<xref:System.Windows.Media.Animation.Storyboard> <xref:System.Windows.Media.Animation.AnimationTimeline> <xref:System.Windows.Media.Animation.AnimationClock> プロパティに<xref:System.Windows.Media.Animation.Clock> 、、またはを適用すると、そのプロパティに以前関連付けられていたすべてのオブジェクトが引き続きシステムリソースを消費します。タイミングシステムは、<xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>これらのクロックは自動的に削除されます。  
  
 を使用して<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>多数のクロックを適用するときのパフォーマンスの問題を回避するには、アニメーション化されたプロパティの完了後に、構成クロックを削除する必要があります。 クロックを削除する方法はいくつかあります。  
  
-   プロパティからすべてのクロックを削除するに<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>は、アニメーション化されたオブジェクトのメソッドまたは<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>メソッドを使用します。 アニメーション化するプロパティを最初のパラメーターとして`null`指定し、2番目のパラメーターとして指定します。 これにより、すべてのアニメーション クロックがプロパティから削除されます。  
  
-   クロックのリストから<xref:System.Windows.Media.Animation.AnimationClock>特定のを削除するには、 <xref:System.Windows.Media.Animation.Clock.Controller%2A>のプロパティ<xref:System.Windows.Media.Animation.AnimationClock>を使用して<xref:System.Windows.Media.Animation.ClockController> <xref:System.Windows.Media.Animation.ClockController>を取得し、 <xref:System.Windows.Media.Animation.ClockController.Remove%2A>のメソッドを呼び出します。 これは通常、クロックの<xref:System.Windows.Media.Animation.Clock.Completed>イベントハンドラーで実行されます。 によって<xref:System.Windows.Media.Animation.ClockController> <xref:System.Windows.Media.Animation.Clock.Controller%2A>制御できるのはルートクロックのみであることに注意してください。 `null`子クロックのプロパティはを返します。 また、クロックの<xref:System.Windows.Media.Animation.Clock.Completed>有効期間が無期限の場合は、イベントが呼び出されないことにも注意してください。  その場合は、を呼び出す<xref:System.Windows.Media.Animation.ClockController.Remove%2A>タイミングをユーザーが決定する必要があります。  
  
 これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。  オブジェクトがガベージ コレクションされる場合は、そのクロックも切断されて、ガベージ コレクションされます。  
  
 クロックオブジェクトの詳細については、「[アニメーションとタイミングシステムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、さまざまな<xref:System.Windows.Media.Animation.HandoffBehavior>設定を使用してアニメーションクロックを適用する方法を示しています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された <see cref="T:System.Windows.DependencyProperty" /> にアニメーションを適用します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="animatable.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">アニメーション化するプロパティ。</param>
        <param name="animation">指定したプロパティをアニメーション化するために使用するアニメーション。  
  
アニメーションの <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> が <see langword="null" /> の場合、現在のアニメーションは削除され、プロパティの現在の値は保持されます。  
  
<paramref name="animation" /> が <see langword="null" /> の場合、すべてのアニメーションがプロパティから削除され、プロパティの値は、その基本値に戻ります。</param>
        <summary>指定された <see cref="T:System.Windows.DependencyProperty" /> にアニメーションを適用します。 アニメーションは、次のフレームがレンダリングされるときに開始されます。 指定されたプロパティが既にアニメーション化されている場合は、<see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> ハンドオフ動作が使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アニメーション<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>のが0より大きい場合、アニメーションは次のフレームがレンダリングされてから経過した後に開始します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="animatable.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">アニメーション化するプロパティ。</param>
        <param name="animation">指定したプロパティをアニメーション化するために使用するアニメーション。  
  
<paramref name="handoffBehavior" /> が <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> であり、アニメーションの <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> が <see langword="null" /> である場合、現在のアニメーションはすべて削除され、プロパティの現在の値が保持されます。  
  
<paramref name="handoffBehavior" /> が <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> であり、<paramref name="animation" /> が <see langword="null" /> 参照である場合、すべてのアニメーションがプロパティから削除され、プロパティ値が基本値に戻ります。  
  
<paramref name="handoffBehavior" /> が <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" /> であっても、アニメーションまたはその <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> が <see langword="null" /> である場合は、このメソッドは無効です。</param>
        <param name="handoffBehavior">プロパティ値に既に影響を及ぼしている現在のアニメーションと新しいアニメーションが対話する方法を指定する値。</param>
        <summary>指定された <see cref="T:System.Windows.DependencyProperty" /> にアニメーションを適用します。 アニメーションは、次のフレームがレンダリングされるときに開始されます。 指定したプロパティが既にアニメーション化されている場合は、指定した <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> が使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アニメーション<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>のが0より大きい場合、アニメーションは次のフレームがレンダリングされてから経過した後に開始します。  
  
## <a name="using-the-compose-handoffbehavior"></a>作成 HandoffBehavior の使用  
 を使用して<xref:System.Windows.Media.Animation.Storyboard> <xref:System.Windows.Media.Animation.AnimationTimeline> <xref:System.Windows.Media.Animation.AnimationClock> プロパティに<xref:System.Windows.Media.Animation.Clock> 、、またはを適用すると、そのプロパティに以前関連付けられていたすべてのオブジェクトが引き続きシステムリソースを消費します。タイミングシステムは、<xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>これらのクロックは自動的に削除されます。  
  
 を使用して<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>多数のクロックを適用するときのパフォーマンスの問題を回避するには、アニメーション化されたプロパティの完了後に、構成クロックを削除する必要があります。 クロックを削除する方法はいくつかあります。  
  
-   プロパティからすべてのクロックを削除するに<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>は、アニメーション化されたオブジェクトのメソッドまたは<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>メソッドを使用します。 アニメーション化するプロパティを最初のパラメーターとして`null`指定し、2番目のパラメーターとして指定します。 これにより、すべてのアニメーション クロックがプロパティから削除されます。  
  
-   クロックのリストから<xref:System.Windows.Media.Animation.AnimationClock>特定のを削除するには、 <xref:System.Windows.Media.Animation.Clock.Controller%2A>のプロパティ<xref:System.Windows.Media.Animation.AnimationClock>を使用して<xref:System.Windows.Media.Animation.ClockController> <xref:System.Windows.Media.Animation.ClockController>を取得し、 <xref:System.Windows.Media.Animation.ClockController.Remove%2A>のメソッドを呼び出します。 これは通常、クロックの<xref:System.Windows.Media.Animation.Clock.Completed>イベントハンドラーで実行されます。 によって<xref:System.Windows.Media.Animation.ClockController> <xref:System.Windows.Media.Animation.Clock.Controller%2A>制御できるのはルートクロックのみであることに注意してください。 `null`子クロックのプロパティはを返します。 また、クロックの<xref:System.Windows.Media.Animation.Clock.Completed>有効期間が無期限の場合は、イベントが呼び出されないことにも注意してください。  その場合は、を呼び出す<xref:System.Windows.Media.Animation.ClockController.Remove%2A>タイミングをユーザーが決定する必要があります。  
  
 これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。  オブジェクトがガベージ コレクションされる場合は、そのクロックも切断されて、ガベージ コレクションされます。  
  
 クロックオブジェクトの詳細については、「[アニメーションとタイミングシステムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、さまざまな<xref:System.Windows.Media.Animation.HandoffBehavior>設定を使用してアニメーションを適用する方法を示します。  
  
 [!code-cpp[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/cpp/VS_Snippets_Wpf/animateproperty/CPP/InteractiveExample.cpp#interactiveanimationexamplewholepage)]
 [!code-csharp[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/animateproperty/CSharp/InteractiveExample.cs#interactiveanimationexamplewholepage)]
 [!code-vb[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateproperty/VisualBasic/InteractiveExample.vb#interactiveanimationexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Animatable Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Animation.Animatable Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Animatable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::Animation::Animatable ^ Clone();" />
      <MemberSignature Language="F#" Value="override this.Clone : unit -&gt; System.Windows.Media.Animation.Animatable" Usage="animatable.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Animatable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Animatable" /> の変更可能な複製を作成し、このオブジェクトの値の詳細コピーを作成します。 このメソッドは、このオブジェクトの依存関係プロパティをコピーするときに、リソースの参照とデータ バインディングはコピーしますが (ただし、これらは解決されなくなっている場合があります)、アニメーションやその現在の値はコピーしません。</summary>
        <returns>このインスタンスの変更可能な複製。 返される複製は、事実上、現在のオブジェクトの詳細コピーです。 複製の <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティは <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Windows.Media.Animation.Animatable.Clone%2A>を使用すると、固定<xref:System.Windows.Freezable>されたオブジェクトの変更可能なコピーを作成できます。 便宜上、このメソッドは、厳密に<xref:System.Windows.Freezable.Clone%2A>型指定された実装を提供するために、継承されたメソッドをシャドウします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Freezable.Clone" />
      </Docs>
    </Member>
    <Member MemberName="FreezeCore">
      <MemberSignature Language="C#" Value="protected override bool FreezeCore (bool isChecking);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool FreezeCore(bool isChecking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FreezeCore (isChecking As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool FreezeCore(bool isChecking);" />
      <MemberSignature Language="F#" Value="override this.FreezeCore : bool -&gt; bool" Usage="animatable.FreezeCore isChecking" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isChecking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isChecking">このメソッドが、このインスタンスが固定可能にできるかどうかを判断するだけである場合は <see langword="true" />。 このメソッドが呼び出されたときに、このインスタンスが自分自身を実際に固定する場合は <see langword="false" />。</param>
        <summary><see cref="T:System.Windows.Media.Animation.Animatable" /> オブジェクトを変更不可能な状態にするか、変更不可能な状態にできるかどうかを判断します。</summary>
        <returns><paramref name="isChecking" /> が <see langword="true" /> のときに、この <see cref="T:System.Windows.Media.Animation.Animatable" /> を変更不可能な状態にできる場合、このメソッドは <see langword="true" /> を返します。変更不可能な状態にできない場合は <see langword="false" /> を返します。  
  
<paramref name="isChecking" /> が <see langword="false" /> のときに、この <see cref="T:System.Windows.Media.Animation.Animatable" /> が現在変更不可能な状態であれば、このメソッドは <see langword="true" /> を返します。このオブジェクトの固定ステータスの変更を開始した影響で、変更不可能な状態にできない場合は <see langword="false" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 がの`false` 場合`true`、このメソッドはを返します。 <xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A>  
  
 このメソッドを直接呼び出さないでください (実装で base を呼び出す場合を除きます)。 このメソッドは、(と<xref:System.Windows.Freezable.CanFreeze%2A> `isChecking`等しい`true`) と<xref:System.Windows.Freezable.Freeze%2A> ( `isChecking`がと等しい`false`) によって内部的に呼び出されます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>クラスに依存関係<see cref="T:System.Windows.Media.Animation.Animatable" />プロパティを使用して格納されていないデータが含まれている場合、から派生するクラスは、このメソッドをオーバーライドする必要があります。  
  
一般的な実装では、基本実装を呼び出した後、 <see cref="M:System.Windows.Freezable.Freeze" />クラスに含ま<see cref="T:System.Windows.Freezable" />れるすべての型指定された<see langword="true" />プロパティに対して静的メソッドを呼び出し、すべてのプロパティが固定されている (または固定されていない場合は) 場合にのみ、を返します。<see langword="false" /> の<paramref name="isChecking" />値を渡すケース。</para></block>
        <altmember cref="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)" />
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="animatable.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">基本 (アニメーション化されていない) 値を取得するプロパティを識別します。</param>
        <summary>指定した <see cref="T:System.Windows.DependencyProperty" /> のアニメーション化されていない値を返します。</summary>
        <returns>指定したプロパティがアニメーション化されていない場合に返される値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定したプロパティがアニメーション化されていない場合、この<xref:System.Windows.DependencyObject.GetValue%2A>メソッドはと同じ結果を返します。  
  
   
  
## Examples  
 次の例では、アニメーション化されたプロパティのアニメーション化されていない値を取得して表示します。  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalueexamplewholepage)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalueexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Animatable.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.Media.Animation.Animatable.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>1 つ以上の <see cref="T:System.Windows.Media.Animation.AnimationClock" /> オブジェクトが、このオブジェクトの任意の依存関係プロパティに関連付けられているかどうかを示す値を取得または設定します。</summary>
        <value><see langword="true" />1つ<see cref="T:System.Windows.Media.Animation.AnimationClock" />以上のオブジェクトがこのオブジェクトの依存関係プロパティに関連付けられて<see langword="false" />いる場合は。それ以外の場合は。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、このオブジェクトにアニメーション化されたサブオブジェクトが含まれているかどうかを示しません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStoredWeakReference">
      <MemberSignature Language="C#" Value="public static bool ShouldSerializeStoredWeakReference (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ShouldSerializeStoredWeakReference(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ShouldSerializeStoredWeakReference (target As DependencyObject) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ShouldSerializeStoredWeakReference(System::Windows::DependencyObject ^ target);" />
      <MemberSignature Language="F#" Value="static member ShouldSerializeStoredWeakReference : System.Windows.DependencyObject -&gt; bool" Usage="System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">依存関係プロパティ システムに関連するオブジェクトを表します。</param>
        <summary>依存関係オブジェクトをシリアル化するかどうかを指定します。</summary>
        <returns><paramref name="target" /> をシリアル化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラス<xref:System.ComponentModel.TypeDescriptor>は、 <xref:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference%2A>メソッドを使用して、プロパティをシリアル化する必要があるかどうかを判断します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
