<Type Name="Mouse" FullName="System.Windows.Input.Mouse">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2ec29fdc352c03282bddfca91b02b0b0b0d7ce66" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69170833" /></Metadata><TypeSignature Language="C#" Value="public static class Mouse" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Mouse extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Mouse" />
  <TypeSignature Language="VB.NET" Value="Public Class Mouse" />
  <TypeSignature Language="C++ CLI" Value="public ref class Mouse abstract sealed" />
  <TypeSignature Language="F#" Value="type Mouse = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="014c2-101">特定のスレッドに対するマウス デバイスを表します。</span><span class="sxs-lookup"><span data-stu-id="014c2-101">Represents the mouse device to a specific thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-102">クラス<xref:System.Windows.Input.Mouse>には、マウスの状態に関する情報を提供するマウス関連のイベント、メソッド、およびプロパティが用意されています。</span><span class="sxs-lookup"><span data-stu-id="014c2-102">The <xref:System.Windows.Input.Mouse> class provides mouse related events, methods and, properties which provide information regarding the state of the mouse.</span></span>  
  
 <span data-ttu-id="014c2-103">を添付イベント<xref:System.Windows.Input.Mouse>として定義する各イベントは、基本要素クラス<xref:System.Windows.UIElement>および<xref:System.Windows.ContentElement>新しいルーティングイベントによっても再公開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-103">Each event that <xref:System.Windows.Input.Mouse> defines as an attached event is also re-exposed by the base element classes <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> as a new routed event.</span></span> <span data-ttu-id="014c2-104">一般に、 <xref:System.Windows.UIElement> <xref:System.Windows.Input.Mouse>イベントを使用するのではなく、と<xref:System.Windows.ContentElement>でアプリケーションのマウスイベントを処理する方が便利です。</span><span class="sxs-lookup"><span data-stu-id="014c2-104">Generally, it is more convenient to handle mouse events for an application on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>, rather than using the <xref:System.Windows.Input.Mouse> events.</span></span> <span data-ttu-id="014c2-105">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-105">For details, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="014c2-106"><xref:System.Windows.Input.Mouse>クラスの静的メンバーは、呼び出し元スレッドの<xref:System.Windows.Input.MouseDevice>入力マネージャーのプライマリにデリゲートされます。</span><span class="sxs-lookup"><span data-stu-id="014c2-106">The static members of the <xref:System.Windows.Input.Mouse> class delegate to the primary <xref:System.Windows.Input.MouseDevice> of the calling thread's input manager.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddGotMouseCaptureHandler">
      <MemberSignature Language="C#" Value="public static void AddGotMouseCaptureHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddGotMouseCaptureHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddGotMouseCaptureHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddGotMouseCaptureHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddGotMouseCaptureHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddGotMouseCaptureHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-107">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-107">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-108">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-108">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-109"><see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-109">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLostMouseCaptureHandler">
      <MemberSignature Language="C#" Value="public static void AddLostMouseCaptureHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddLostMouseCaptureHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddLostMouseCaptureHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddLostMouseCaptureHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddLostMouseCaptureHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddLostMouseCaptureHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-110">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-110">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-111">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-111">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-112"><see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-112">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMouseDownHandler">
      <MemberSignature Language="C#" Value="public static void AddMouseDownHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMouseDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMouseDownHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMouseDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddMouseDownHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddMouseDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-113">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-113">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-114">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-114">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-115"><see cref="E:System.Windows.Input.Mouse.MouseDown" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-115">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMouseEnterHandler">
      <MemberSignature Language="C#" Value="public static void AddMouseEnterHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMouseEnterHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMouseEnterHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMouseEnterHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddMouseEnterHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddMouseEnterHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-116">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-116">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-117">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-117">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-118"><see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-118">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMouseLeaveHandler">
      <MemberSignature Language="C#" Value="public static void AddMouseLeaveHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMouseLeaveHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMouseLeaveHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMouseLeaveHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddMouseLeaveHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddMouseLeaveHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-119">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-119">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-120">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-120">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-121"><see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-121">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMouseMoveHandler">
      <MemberSignature Language="C#" Value="public static void AddMouseMoveHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMouseMoveHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMouseMoveHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMouseMoveHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddMouseMoveHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddMouseMoveHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-122">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-122">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-123">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-123">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-124"><see cref="E:System.Windows.Input.Mouse.MouseMove" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-124">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMouseUpHandler">
      <MemberSignature Language="C#" Value="public static void AddMouseUpHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMouseUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMouseUpHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMouseUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddMouseUpHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddMouseUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-125">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-125">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-126">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-126">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-127"><see cref="E:System.Windows.Input.Mouse.MouseUp" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-127">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseUp" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMouseWheelHandler">
      <MemberSignature Language="C#" Value="public static void AddMouseWheelHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMouseWheelHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseWheelEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMouseWheelHandler (element As DependencyObject, handler As MouseWheelEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMouseWheelHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseWheelEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddMouseWheelHandler : System.Windows.DependencyObject * System.Windows.Input.MouseWheelEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddMouseWheelHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseWheelEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-128">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-128">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-129">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-129">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-130"><see cref="E:System.Windows.Input.Mouse.MouseWheel" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-130">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewMouseDownHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewMouseDownHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewMouseDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddPreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewMouseDownHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewMouseDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewMouseDownHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddPreviewMouseDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-131">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-131">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-132">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-132">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-133"><see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-133">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewMouseDownOutsideCapturedElementHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewMouseDownOutsideCapturedElementHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewMouseDownOutsideCapturedElementHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddPreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewMouseDownOutsideCapturedElementHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewMouseDownOutsideCapturedElementHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewMouseDownOutsideCapturedElementHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddPreviewMouseDownOutsideCapturedElementHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-134">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-134">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-135">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-135">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-136"><see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-136">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewMouseMoveHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewMouseMoveHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewMouseMoveHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddPreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewMouseMoveHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewMouseMoveHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewMouseMoveHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddPreviewMouseMoveHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-137">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-137">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-138">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-138">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-139"><see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-139">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewMouseUpHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewMouseUpHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewMouseUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddPreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewMouseUpHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewMouseUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewMouseUpHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddPreviewMouseUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-140">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-140">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-141">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-141">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-142"><see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-142">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewMouseUpOutsideCapturedElementHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewMouseUpOutsideCapturedElementHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewMouseUpOutsideCapturedElementHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddPreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewMouseUpOutsideCapturedElementHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewMouseUpOutsideCapturedElementHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewMouseUpOutsideCapturedElementHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddPreviewMouseUpOutsideCapturedElementHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-143">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-143">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-144">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-144">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-145"><see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-145">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewMouseWheelHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewMouseWheelHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewMouseWheelHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseWheelEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddPreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewMouseWheelHandler (element As DependencyObject, handler As MouseWheelEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewMouseWheelHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseWheelEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewMouseWheelHandler : System.Windows.DependencyObject * System.Windows.Input.MouseWheelEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddPreviewMouseWheelHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseWheelEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-146">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-146">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-147">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-147">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-148"><see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-148">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddQueryCursorHandler">
      <MemberSignature Language="C#" Value="public static void AddQueryCursorHandler (System.Windows.DependencyObject element, System.Windows.Input.QueryCursorEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddQueryCursorHandler(class System.Windows.DependencyObject element, class System.Windows.Input.QueryCursorEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddQueryCursorHandler (element As DependencyObject, handler As QueryCursorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddQueryCursorHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::QueryCursorEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddQueryCursorHandler : System.Windows.DependencyObject * System.Windows.Input.QueryCursorEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddQueryCursorHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.QueryCursorEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-149">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-149">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-150">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-150">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-151"><see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="014c2-151">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Capture">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-152">指定された要素に対するマウス入力をキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="014c2-152">Captures mouse input to the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-153">要素がマウスをキャプチャすると、カーソルが境界内にあるかどうかにかかわらず、マウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="014c2-153">When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.</span></span>  
  
 <span data-ttu-id="014c2-154">が指定されていない場合<xref:System.Windows.Input.CaptureMode> 、 <xref:System.Windows.Input.CaptureMode.Element>既定値はになります。 <xref:System.Windows.Input.CaptureMode></span><span class="sxs-lookup"><span data-stu-id="014c2-154">If a <xref:System.Windows.Input.CaptureMode> is not specified, the default <xref:System.Windows.Input.CaptureMode> is <xref:System.Windows.Input.CaptureMode.Element>.</span></span>  
  
 <span data-ttu-id="014c2-155">マウスキャプチャを解放するに<xref:System.Windows.Input.Mouse.Capture%2A>は`null` 、キャプチャする要素としてを渡します。</span><span class="sxs-lookup"><span data-stu-id="014c2-155">To release mouse capture, call <xref:System.Windows.Input.Mouse.Capture%2A> passing `null` as the element to capture.</span></span>  
  
 <span data-ttu-id="014c2-156">イベント<xref:System.Windows.Input.Mouse.MouseDown>または<xref:System.Windows.Input.Mouse.MouseUp>イベントが発生したときにマウスがキャプチャされ、入力がマウスの下の<xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement>要素に移動<xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement>しなかった場合は、最初にが発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-156">If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.</span></span>  <span data-ttu-id="014c2-157">これにより、キャプチャされた要素は、イベント<xref:System.Windows.Input.Mouse.MouseDown>および<xref:System.Windows.Input.Mouse.MouseUp>イベントがルーティングされる前に、キャプチャを解放できるようになります。</span><span class="sxs-lookup"><span data-stu-id="014c2-157">This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public static bool Capture (System.Windows.IInputElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Capture(class System.Windows.IInputElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Capture (element As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Capture(System::Windows::IInputElement ^ element);" />
      <MemberSignature Language="F#" Value="static member Capture : System.Windows.IInputElement -&gt; bool" Usage="System.Windows.Input.Mouse.Capture element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-158">マウスをキャプチャする要素。</span><span class="sxs-lookup"><span data-stu-id="014c2-158">The element to capture the mouse.</span></span></param>
        <summary><span data-ttu-id="014c2-159">指定された要素に対するマウス入力をキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="014c2-159">Captures mouse input to the specified element.</span></span></summary>
        <returns><span data-ttu-id="014c2-160">要素がマウスをキャプチャできた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-160"><see langword="true" /> if the element was able to capture the mouse; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-161">要素がマウスをキャプチャすると、カーソルが境界内にあるかどうかにかかわらず、マウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="014c2-161">When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.</span></span>  
  
 <span data-ttu-id="014c2-162">が指定されていない場合<xref:System.Windows.Input.CaptureMode> 、 <xref:System.Windows.Input.CaptureMode.Element>既定値はになります。 <xref:System.Windows.Input.CaptureMode></span><span class="sxs-lookup"><span data-stu-id="014c2-162">If a <xref:System.Windows.Input.CaptureMode> is not specified, the default <xref:System.Windows.Input.CaptureMode> is <xref:System.Windows.Input.CaptureMode.Element>.</span></span>  
  
 <span data-ttu-id="014c2-163">マウスキャプチャを解放するに<xref:System.Windows.Input.Mouse.Capture%2A>は`null` 、キャプチャする要素としてを渡します。</span><span class="sxs-lookup"><span data-stu-id="014c2-163">To release mouse capture, call <xref:System.Windows.Input.Mouse.Capture%2A> passing `null` as the element to capture.</span></span>  
  
 <span data-ttu-id="014c2-164">イベント<xref:System.Windows.Input.Mouse.MouseDown>または<xref:System.Windows.Input.Mouse.MouseUp>イベントが発生したときにマウスがキャプチャされ、入力がマウスの下の<xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement>要素に移動<xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement>しなかった場合は、最初にが発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-164">If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.</span></span>  <span data-ttu-id="014c2-165">これにより、キャプチャされた要素は、イベント<xref:System.Windows.Input.Mouse.MouseDown>および<xref:System.Windows.Input.Mouse.MouseUp>イベントがルーティングされる前に、キャプチャを解放できるようになります。</span><span class="sxs-lookup"><span data-stu-id="014c2-165">This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="014c2-166">次の例は、 <xref:System.Windows.Input.Mouse.Capture%2A>メソッドを使用して、特定の要素にマウスをキャプチャする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="014c2-166">The following example shows how to capture the mouse to a specific element by using the <xref:System.Windows.Input.Mouse.Capture%2A> method.</span></span>  
  
 [!code-csharp[MouseCaptureSample#MouseCapturSampleCaptureElement](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseCaptureSample/CSharp/Window1.xaml.cs#mousecaptursamplecaptureelement)]
 [!code-vb[MouseCaptureSample#MouseCapturSampleCaptureElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseCaptureSample/visualbasic/window1.xaml.vb#mousecaptursamplecaptureelement)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public static bool Capture (System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Capture(class System.Windows.IInputElement element, valuetype System.Windows.Input.CaptureMode captureMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Capture(System::Windows::IInputElement ^ element, System::Windows::Input::CaptureMode captureMode);" />
      <MemberSignature Language="F#" Value="static member Capture : System.Windows.IInputElement * System.Windows.Input.CaptureMode -&gt; bool" Usage="System.Windows.Input.Mouse.Capture (element, captureMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.IInputElement" />
        <Parameter Name="captureMode" Type="System.Windows.Input.CaptureMode" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-167">マウスをキャプチャする要素。</span><span class="sxs-lookup"><span data-stu-id="014c2-167">The element to capture the mouse.</span></span></param>
        <param name="captureMode"><span data-ttu-id="014c2-168">使用するキャプチャ ポリシー。</span><span class="sxs-lookup"><span data-stu-id="014c2-168">The capture policy to use.</span></span></param>
        <summary><span data-ttu-id="014c2-169">指定した <see cref="T:System.Windows.Input.CaptureMode" /> を使用して、指定された要素に対するマウス入力をキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="014c2-169">Captures mouse input to the specified element using the specified <see cref="T:System.Windows.Input.CaptureMode" />.</span></span></summary>
        <returns><span data-ttu-id="014c2-170">要素がマウスをキャプチャできた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-170"><see langword="true" /> if the element was able to capture the mouse; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-171">要素がマウスをキャプチャすると、カーソルが境界内にあるかどうかをマウス入力で受け取ります。</span><span class="sxs-lookup"><span data-stu-id="014c2-171">When an element captures the mouse, it receives mouse input whether the cursor is within its borders.</span></span>  
  
 <span data-ttu-id="014c2-172">マウスキャプチャを解放するに<xref:System.Windows.Input.Mouse.Capture%2A>は`null` 、キャプチャする要素としてを渡します。</span><span class="sxs-lookup"><span data-stu-id="014c2-172">To release mouse capture, call <xref:System.Windows.Input.Mouse.Capture%2A> passing `null` as the element to capture.</span></span>  
  
 <span data-ttu-id="014c2-173">イベント<xref:System.Windows.Input.Mouse.MouseDown>または<xref:System.Windows.Input.Mouse.MouseUp>イベントが発生したときにマウスがキャプチャされ、入力がマウスの下の<xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement>要素に移動<xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement>しなかった場合は、最初にが発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-173">If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.</span></span>  <span data-ttu-id="014c2-174">これにより、キャプチャされた要素は、イベント<xref:System.Windows.Input.Mouse.MouseDown>および<xref:System.Windows.Input.Mouse.MouseUp>イベントがルーティングされる前に、キャプチャを解放できるようになります。</span><span class="sxs-lookup"><span data-stu-id="014c2-174">This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="014c2-175">次の例は、 <xref:System.Windows.Input.Mouse.Capture%2A>メソッドを使用して、特定の要素にマウスをキャプチャする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="014c2-175">The following example shows how to capture the mouse to a specific element by using the <xref:System.Windows.Input.Mouse.Capture%2A> method.</span></span>  
  
 [!code-csharp[MouseCaptureSample#MouseCapturSampleCaptureElement](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseCaptureSample/CSharp/Window1.xaml.cs#mousecaptursamplecaptureelement)]
 [!code-vb[MouseCaptureSample#MouseCapturSampleCaptureElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseCaptureSample/visualbasic/window1.xaml.vb#mousecaptursamplecaptureelement)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Captured">
      <MemberSignature Language="C#" Value="public static System.Windows.IInputElement Captured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.IInputElement Captured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.Captured" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Captured As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::IInputElement ^ Captured { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Captured : System.Windows.IInputElement" Usage="System.Windows.Input.Mouse.Captured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-176">マウスをキャプチャした要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="014c2-176">Gets the element that has captured the mouse.</span></span></summary>
        <value><span data-ttu-id="014c2-177">マウスでキャプチャされる要素。</span><span class="sxs-lookup"><span data-stu-id="014c2-177">The element captured by the mouse.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-178">要素がマウスをキャプチャすると、カーソルが境界内にあるかどうかにかかわらず、マウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="014c2-178">When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.</span></span> <span data-ttu-id="014c2-179">マウスは、通常、ドラッグアンドドロップ操作中にのみこの方法でキャプチャされ、ドラッグアンドドロップ操作のドロップ操作が発生するまでキャプチャを保持します。</span><span class="sxs-lookup"><span data-stu-id="014c2-179">The mouse is typically captured in this manner only during drag-and-drop operations, and retains capture until the drop action of the drag-and-drop operation occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="014c2-180">次の例は、マウスキャプチャを持つ要素を取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="014c2-180">The follow example shows how to obtain the element that has mouse capture.</span></span>  
  
 [!code-csharp[mousecapturesample#MouseCaptureMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseCaptureSample/CSharp/Window1.xaml.cs#mousecapturemousecaptured)]
 [!code-vb[mousecapturesample#MouseCaptureMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseCaptureSample/visualbasic/window1.xaml.vb#mousecapturemousecaptured)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectlyOver">
      <MemberSignature Language="C#" Value="public static System.Windows.IInputElement DirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.IInputElement DirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.DirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DirectlyOver As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::IInputElement ^ DirectlyOver { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DirectlyOver : System.Windows.IInputElement" Usage="System.Windows.Input.Mouse.DirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-181">マウス ポインターのすぐ下にある要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="014c2-181">Gets the element the mouse pointer is directly over.</span></span></summary>
        <value><span data-ttu-id="014c2-182">マウス ポインターの下にある要素。</span><span class="sxs-lookup"><span data-stu-id="014c2-182">The element the mouse pointer is over.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-183">コントロールは、複数の要素で構成できます。</span><span class="sxs-lookup"><span data-stu-id="014c2-183">Controls can be composed of multiple elements.</span></span> <span data-ttu-id="014c2-184"><xref:System.Windows.Input.Mouse.DirectlyOver%2A>コントロール自体ではなく、マウスポインターがある複合コントロール内の特定の要素を報告します。</span><span class="sxs-lookup"><span data-stu-id="014c2-184"><xref:System.Windows.Input.Mouse.DirectlyOver%2A> reports the specific element in the composite control the mouse pointer is over and not the control itself.</span></span> <span data-ttu-id="014c2-185">たとえば、ポインターの<xref:System.Windows.Controls.Button>どの部分が上<xref:System.Windows.Input.Mouse.DirectlyOver%2A>にあるかによって、プロパティは、 <xref:System.Windows.Controls.ContentControl.Content%2A>プロパティ<xref:System.Windows.Controls.TextBox>また<xref:Microsoft.Windows.Themes.ButtonChrome>はのを報告できます。</span><span class="sxs-lookup"><span data-stu-id="014c2-185">For example, depending on which part of a <xref:System.Windows.Controls.Button> the pointer is over, the <xref:System.Windows.Input.Mouse.DirectlyOver%2A> property could report the <xref:System.Windows.Controls.TextBox> of the <xref:System.Windows.Controls.ContentControl.Content%2A> property or the <xref:Microsoft.Windows.Themes.ButtonChrome>.</span></span>  
  
 <span data-ttu-id="014c2-186"><xref:System.Windows.IInputElement.IsMouseOver%2A>および<xref:System.Windows.UIElement>のプロパティを使用して、マウスが要素上にあるかどうかを判断します。これには、ビジュアルな子要素またはコントロールの複合要素が含まれます。 <xref:System.Windows.ContentElement></span><span class="sxs-lookup"><span data-stu-id="014c2-186">Use the <xref:System.Windows.IInputElement.IsMouseOver%2A> property on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> to determine whether the mouse is over an element, which includes its visual child elements or control compositing elements.</span></span>  
  
 <span data-ttu-id="014c2-187">要素にマウスキャプチャがある場合、マウスポインターは、マウスポインターが置かれている場所に関係なく、要素上で直接認識されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-187">If an element has mouse capture, the mouse pointer is considered directly over the element regardless of the where the mouse pointer is.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseOver" />
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="GetIntermediatePoints">
      <MemberSignature Language="C#" Value="public static int GetIntermediatePoints (System.Windows.IInputElement relativeTo, System.Windows.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetIntermediatePoints(class System.Windows.IInputElement relativeTo, valuetype System.Windows.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.GetIntermediatePoints(System.Windows.IInputElement,System.Windows.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetIntermediatePoints (relativeTo As IInputElement, points As Point()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetIntermediatePoints(System::Windows::IInputElement ^ relativeTo, cli::array &lt;System::Windows::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="static member GetIntermediatePoints : System.Windows.IInputElement * System.Windows.Point[] -&gt; int" Usage="System.Windows.Input.Mouse.GetIntermediatePoints (relativeTo, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.Windows.IInputElement" />
        <Parameter Name="points" Type="System.Windows.Point[]" />
      </Parameters>
      <Docs>
        <param name="relativeTo"><span data-ttu-id="014c2-188">要素 <paramref name="points" /> が関連しています。</span><span class="sxs-lookup"><span data-stu-id="014c2-188">The elements <paramref name="points" /> are in relation to.</span></span></param>
        <param name="points"><span data-ttu-id="014c2-189">オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="014c2-189">An array of objects.</span></span></param>
        <summary><span data-ttu-id="014c2-190">最後のマウス移動イベント以後のマウス ポインターの座標を最大 64 個、取得します。</span><span class="sxs-lookup"><span data-stu-id="014c2-190">Retrieves up to 64 previous coordinates of the mouse pointer since the last mouse move event.</span></span></summary>
        <returns><span data-ttu-id="014c2-191">返されるポイントの数。</span><span class="sxs-lookup"><span data-stu-id="014c2-191">The number of points returned.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public static System.Windows.Point GetPosition (System.Windows.IInputElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point GetPosition(class System.Windows.IInputElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPosition (relativeTo As IInputElement) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point GetPosition(System::Windows::IInputElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="static member GetPosition : System.Windows.IInputElement -&gt; System.Windows.Point" Usage="System.Windows.Input.Mouse.GetPosition relativeTo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="relativeTo"><span data-ttu-id="014c2-192">マウス位置の計算に使用する座標空間。</span><span class="sxs-lookup"><span data-stu-id="014c2-192">The coordinate space in which to calculate the position of the mouse.</span></span></param>
        <summary><span data-ttu-id="014c2-193">指定した要素に相対的なマウスの位置を取得します。</span><span class="sxs-lookup"><span data-stu-id="014c2-193">Gets the position of the mouse relative to a specified element.</span></span></summary>
        <returns><span data-ttu-id="014c2-194"><paramref name="relativeTo" /> パラメーターに対して相対的なマウスの位置。</span><span class="sxs-lookup"><span data-stu-id="014c2-194">The position of the mouse relative to the parameter <paramref name="relativeTo" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-195">マウスポインターの位置は、要素の左上隅が原点 (0, 0) である、指定された要素を基準として計算されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-195">The position of the mouse pointer is calculated relative to the specified element with the upper-left corner of element being the point of origin, 0,0.</span></span>  
  
 <span data-ttu-id="014c2-196">ドラッグアンドドロップ操作中は、を使用して<xref:System.Windows.Input.Mouse.GetPosition%2A>マウスの位置を確実に判断することはできません。</span><span class="sxs-lookup"><span data-stu-id="014c2-196">During drag-and-drop operations, the position of the mouse cannot be reliably determined through <xref:System.Windows.Input.Mouse.GetPosition%2A>.</span></span> <span data-ttu-id="014c2-197">これは、マウスの制御 (キャプチャを含む場合もあります) は、ドロップが完了するまでドラッグの元の要素によって保持され、基[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]になる呼び出しによって動作が制御されるためです。</span><span class="sxs-lookup"><span data-stu-id="014c2-197">This is because control of the mouse (possibly including capture) is held by the originating element of the drag until the drop is completed, with much of the behavior controlled by underlying [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] calls.</span></span> <span data-ttu-id="014c2-198">代わりに、次の方法を試してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-198">Try the following approaches instead:</span></span>  
  
-   <span data-ttu-id="014c2-199">ドラッグイベント<xref:System.Windows.DragEventArgs.GetPosition%2A> ( <xref:System.Windows.DragEventArgs> 、<xref:System.Windows.ContentElement.DragEnter> 、)<xref:System.Windows.ContentElement.DragLeave>に渡されるのメソッドを呼び出します。 <xref:System.Windows.ContentElement.DragOver></span><span class="sxs-lookup"><span data-stu-id="014c2-199">Call the <xref:System.Windows.DragEventArgs.GetPosition%2A> method of the <xref:System.Windows.DragEventArgs> that is passed to the drag events (<xref:System.Windows.ContentElement.DragEnter>, <xref:System.Windows.ContentElement.DragOver>, <xref:System.Windows.ContentElement.DragLeave>).</span></span>  
  
-   <span data-ttu-id="014c2-200">P/Invoke を使用して[Getカーソル pos](https://msdn.microsoft.com/library/default.asp?url=/library/winui/winui/windowsuserinterface/resources/cursors/cursorreference/cursorfunctions/getcursorpos.asp)を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="014c2-200">Call [GetCursorPos](https://msdn.microsoft.com/library/default.asp?url=/library/winui/winui/windowsuserinterface/resources/cursors/cursorreference/cursorfunctions/getcursorpos.asp), using P/Invoke.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="014c2-201">次の例は、を使用<xref:System.Windows.Input.Mouse.GetPosition%2A>してマウスポインターの位置を決定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="014c2-201">The following example shows how to use <xref:System.Windows.Input.Mouse.GetPosition%2A> to determine the position of the mouse pointer.</span></span>  <span data-ttu-id="014c2-202">マウスポインターの位置は、 <xref:System.Windows.Point>構造体に格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-202">The position of the mouse pointer is stored in a <xref:System.Windows.Point> structure.</span></span>  <span data-ttu-id="014c2-203">オブジェクトの<xref:System.Windows.Point.Y%2A>およびの値は、 <xref:System.Windows.Controls.TextBox>に表示されます。 <xref:System.Windows.Point.X%2A> <xref:System.Windows.Point></span><span class="sxs-lookup"><span data-stu-id="014c2-203">The <xref:System.Windows.Point.X%2A> and <xref:System.Windows.Point.Y%2A> values of the <xref:System.Windows.Point> object are displayed in a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 [!code-csharp[MouseRelatedSnippets#MouseRelatedSnippetsPositionMouse](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseRelatedSnippets/CSharp/Window1.xaml.cs#mouserelatedsnippetspositionmouse)]
 [!code-vb[MouseRelatedSnippets#MouseRelatedSnippetsPositionMouse](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseRelatedSnippets/visualbasic/window1.xaml.vb#mouserelatedsnippetspositionmouse)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.MouseEventArgs.GetPosition(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="see AddGotMouseCaptureHandler, and RemoveGotMouseCaptureHandler" />
      <MemberSignature Language="ILAsm" Value="see AddGotMouseCaptureHandler, and RemoveGotMouseCaptureHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="see AddGotMouseCaptureHandler, and RemoveGotMouseCaptureHandler" />
      <MemberSignature Language="F#" Value="see AddGotMouseCaptureHandler, and RemoveGotMouseCaptureHandler" Usage="see AddGotMouseCaptureHandler, and RemoveGotMouseCaptureHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-204">要素がマウスをキャプチャしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-204">Occurs when an element captures the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-205">要素がマウスをキャプチャすると、カーソルが境界内にあるかどうかにかかわらず、マウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="014c2-205">When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.</span></span>  
  
 <span data-ttu-id="014c2-206">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-206">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-207">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-207">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-208">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-208">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-209">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-209">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-210">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-210">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="014c2-211">バブルルーティングにより、キャプチャを持つ実際の要素は子要素である場合があります。これは、イベントハンドラーが実際にアタッチされている要素であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="014c2-211">Because of the bubbling routing, the actual element that has capture might be a child element, not necessarily the element where the event handler is actually attached.</span></span> <span data-ttu-id="014c2-212"><xref:System.Windows.RoutedEventArgs.Source%2A>イベント引数のを調べて、マウスキャプチャを持つ実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="014c2-212">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event arguments to determine the actual element that has mouse capture.</span></span>  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="014c2-213">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-213">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-214">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-214">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.GotMouseCaptureEvent>|  
|<span data-ttu-id="014c2-215">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-215">Routing strategy</span></span>|<span data-ttu-id="014c2-216">バブリング</span><span class="sxs-lookup"><span data-stu-id="014c2-216">Bubbling</span></span>|  
|<span data-ttu-id="014c2-217">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-217">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="014c2-218">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="014c2-218">There is no defined corresponding tunneling event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-219"><see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-219">Identifies the <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-220">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-220">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-221">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-221">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-222">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-222">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftButton">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.MouseButtonState LeftButton { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.MouseButtonState LeftButton" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.LeftButton" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LeftButton As MouseButtonState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::MouseButtonState LeftButton { System::Windows::Input::MouseButtonState get(); };" />
      <MemberSignature Language="F#" Value="member this.LeftButton : System.Windows.Input.MouseButtonState" Usage="System.Windows.Input.Mouse.LeftButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-223">マウスの左ボタンの状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="014c2-223">Gets the state of the left button of the mouse.</span></span></summary>
        <value><span data-ttu-id="014c2-224">マウスの左ボタンの状態。</span><span class="sxs-lookup"><span data-stu-id="014c2-224">The state of the left mouse button.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="014c2-225">次の例では、の状態が<xref:System.Windows.Input.Mouse.LeftButton%2A> <xref:System.Windows.Input.MouseButtonState>列挙値<xref:System.Windows.Input.MouseButtonState.Pressed>と等しいかどうかをチェックすることによって、マウスの左ボタンが押されているかどうかを確認する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="014c2-225">The following example shows how to determine whether the left mouse button is pressed by checking if the state of the <xref:System.Windows.Input.Mouse.LeftButton%2A> is equal to the <xref:System.Windows.Input.MouseButtonState> enumeration value <xref:System.Windows.Input.MouseButtonState.Pressed>.</span></span>  <span data-ttu-id="014c2-226">このボタンが押されている場合、サンプルの表示要素を更新するメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-226">If the button is pressed, a method is called which updates display elements in the sample.</span></span>  
  
 [!code-csharp[MouseRelatedSnippets#MouseRelatedSnippetsGetLeftButtonMouse](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseRelatedSnippets/CSharp/Window1.xaml.cs#mouserelatedsnippetsgetleftbuttonmouse)]
 [!code-vb[MouseRelatedSnippets#MouseRelatedSnippetsGetLeftButtonMouse](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseRelatedSnippets/visualbasic/window1.xaml.vb#mouserelatedsnippetsgetleftbuttonmouse)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseButtonEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="see AddLostMouseCaptureHandler, and RemoveLostMouseCaptureHandler" />
      <MemberSignature Language="ILAsm" Value="see AddLostMouseCaptureHandler, and RemoveLostMouseCaptureHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="see AddLostMouseCaptureHandler, and RemoveLostMouseCaptureHandler" />
      <MemberSignature Language="F#" Value="see AddLostMouseCaptureHandler, and RemoveLostMouseCaptureHandler" Usage="see AddLostMouseCaptureHandler, and RemoveLostMouseCaptureHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-227">要素がマウスのキャプチャを失ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-227">Occurs when an element loses mouse capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-228">要素がマウスをキャプチャすると、カーソルが境界内にあるかどうかにかかわらず、マウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="014c2-228">When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.</span></span> <span data-ttu-id="014c2-229">T</span><span class="sxs-lookup"><span data-stu-id="014c2-229">T</span></span>  
  
 <span data-ttu-id="014c2-230">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-230">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-231">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-231">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-232">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-232">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-233">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-233">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-234">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-234">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="014c2-235">バブルルーティングにより、キャプチャを失った実際の要素は子要素である場合があります。これは、イベントハンドラーが実際にアタッチされている要素であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="014c2-235">Because of the bubbling routing, the actual element that lost capture might be a child element, not necessarily the element where the event handler is actually attached.</span></span> <span data-ttu-id="014c2-236"><xref:System.Windows.RoutedEventArgs.Source%2A>イベント引数のを調べて、キャプチャを失った実際の要素を特定します。</span><span class="sxs-lookup"><span data-stu-id="014c2-236">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event arguments to determine the actual element that lost capture.</span></span>  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="014c2-237">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-237">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-238">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-238">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.LostMouseCaptureEvent>|  
|<span data-ttu-id="014c2-239">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-239">Routing strategy</span></span>|<span data-ttu-id="014c2-240">バブリング</span><span class="sxs-lookup"><span data-stu-id="014c2-240">Bubbling</span></span>|  
|<span data-ttu-id="014c2-241">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-241">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="014c2-242">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="014c2-242">There is no defined corresponding tunneling event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-243"><see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-243">Identifies the <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-244">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-244">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-245">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-245">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-246">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-246">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MiddleButton">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.MouseButtonState MiddleButton { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.MouseButtonState MiddleButton" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.MiddleButton" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MiddleButton As MouseButtonState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::MouseButtonState MiddleButton { System::Windows::Input::MouseButtonState get(); };" />
      <MemberSignature Language="F#" Value="member this.MiddleButton : System.Windows.Input.MouseButtonState" Usage="System.Windows.Input.Mouse.MiddleButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-247">マウスの中央ボタンの状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="014c2-247">Gets the state of the middle button of the mouse.</span></span></summary>
        <value><span data-ttu-id="014c2-248">マウスの中央ボタンの状態。</span><span class="sxs-lookup"><span data-stu-id="014c2-248">The state of the middle mouse button.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="014c2-249">次の例は、の状態が<xref:System.Windows.Input.Mouse.MiddleButton%2A> <xref:System.Windows.Input.MouseButtonState>列挙値<xref:System.Windows.Input.MouseButtonState.Pressed>と等しいかどうかをチェックすることによって、マウスの中央ボタンが押されているかどうかを確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="014c2-249">The following example shows how to determine whether the middle mouse button is pressed by checking if the state of the <xref:System.Windows.Input.Mouse.MiddleButton%2A> is equal to the <xref:System.Windows.Input.MouseButtonState> enumeration value <xref:System.Windows.Input.MouseButtonState.Pressed>.</span></span>  <span data-ttu-id="014c2-250">このボタンが押されている場合、サンプルの表示要素を更新するメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-250">If the button is pressed, a method is called which updates display elements in the sample.</span></span>  
  
 [!code-csharp[MouseRelatedSnippets#MouseRelatedSnippetsGetMiddleButtonMouse](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseRelatedSnippets/CSharp/Window1.xaml.cs#mouserelatedsnippetsgetmiddlebuttonmouse)]
 [!code-vb[MouseRelatedSnippets#MouseRelatedSnippetsGetMiddleButtonMouse](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseRelatedSnippets/visualbasic/window1.xaml.vb#mouserelatedsnippetsgetmiddlebuttonmouse)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseButtonEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="see AddMouseDownHandler, and RemoveMouseDownHandler" />
      <MemberSignature Language="ILAsm" Value="see AddMouseDownHandler, and RemoveMouseDownHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.MouseDown" />
      <MemberSignature Language="VB.NET" Value="see AddMouseDownHandler, and RemoveMouseDownHandler" />
      <MemberSignature Language="F#" Value="see AddMouseDownHandler, and RemoveMouseDownHandler" Usage="see AddMouseDownHandler, and RemoveMouseDownHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-251">任意のマウス ボタンが押されると発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-251">Occurs when any mouse button is depressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-252">どのマウスボタンが押されたかを確認<xref:System.Windows.Input.MouseButtonEventArgs.ChangedButton%2A>するには<xref:System.Windows.Input.MouseButtonEventArgs> 、ハンドラーに渡されたのプロパティを確認します。</span><span class="sxs-lookup"><span data-stu-id="014c2-252">To determine which mouse button was depressed, check the <xref:System.Windows.Input.MouseButtonEventArgs.ChangedButton%2A> property in the <xref:System.Windows.Input.MouseButtonEventArgs> passed to the handler.</span></span>  
  
 <span data-ttu-id="014c2-253">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-253">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-254">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-254">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-255">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-255">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-256">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-256">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-257">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-257">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="014c2-258">フレームワーク[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]は、との2つの[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] <xref:System.Windows.ContentElement> <xref:System.Windows.UIElement> <xref:System.Windows.UIElement.MouseLeftButtonDown>異なるイベントとして提示することで、このアタッチされるイベントに基づいて構築されます。<xref:System.Windows.UIElement.MouseRightButtonDown></span><span class="sxs-lookup"><span data-stu-id="014c2-258">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework builds on this attached event by surfacing it as two different [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="014c2-259">これらの実装は、 <xref:System.Windows.Input.Mouse.MouseDown>基になるイベントを処理し、イベントの引数を読み取って、マウスの左ボタンまたは右ボタンが関係していたかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="014c2-259">These implementations handle the underlying <xref:System.Windows.Input.Mouse.MouseDown> event and read the arguments of the event to determine whether the left or right mouse button was involved.</span></span> <span data-ttu-id="014c2-260">3つのボタンを使用するマウスでは、[中央] ボタンのフレームワークレベルのイベントはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="014c2-260">For a three-button mouse, there is no framework-level event support for the center button.</span></span> <span data-ttu-id="014c2-261">イベントを使用<xref:System.Windows.Input.Mouse.MouseDown>して、イベント引数<xref:System.Windows.Input.MouseEventArgs.MiddleButton%2A>の状態を確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="014c2-261">You should use the <xref:System.Windows.Input.Mouse.MouseDown> event and check the <xref:System.Windows.Input.MouseEventArgs.MiddleButton%2A> state in the event arguments.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="014c2-262">などの<xref:System.Windows.ContentElement> <xref:System.Windows.Documents.Hyperlink>コントロールのような動作を持ついくつかの派生クラスには、マウスボタンイベントに固有のクラス処理が含まれる場合があります。</span><span class="sxs-lookup"><span data-stu-id="014c2-262">A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="014c2-263">マウスの左ボタンダウンイベントは、コントロールでクラス処理を行う最も可能性の高いイベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-263">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="014c2-264">クラスの処理では、多く<xref:System.Windows.Input.Mouse>の場合、基になるクラスのイベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="014c2-264">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="014c2-265">イベントが処理済みとしてマークされると、その要素にアタッチされている他のインスタンスハンドラーは通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="014c2-265">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="014c2-266">UI ツリー内のルートに向かうバブル方向の要素に関連付けられているその他のクラスまたはインスタンスハンドラーも、通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="014c2-266">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="014c2-267">前の重要な注意事項で説明されている問題を解決し<xref:System.Windows.UIElement.MouseDown>ても、次のいずれかの方法を使用してクラス処理を持つ派生クラスで、マウスの左ボタンダウンイベントのイベントを受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="014c2-267">You can resolve the issue that is outlined in the preceding Important note and still receive <xref:System.Windows.UIElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="014c2-268"><xref:System.Windows.UIElement.PreviewMouseDown>イベントのハンドラーをアタッチします。これは、コントロールによって処理されるようにマークされていません。</span><span class="sxs-lookup"><span data-stu-id="014c2-268">Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="014c2-269">これはプレビューイベントであるため、ルートからルートが開始され、コントロールにトンネリングされることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-269">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="014c2-270">を呼び出し<xref:System.Windows.UIElement.AddHandler%2A> 、ハンドラーがルーティングイベントデータで既に処理済みとしてマークされている場合でもイベントをリッスンできるようにする署名オプションを選択して、コントロール procedurally にハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="014c2-270">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
 <span data-ttu-id="014c2-271">マウスに関連するルーティングイベントの場合は、どのように処理されたかをマークする方法やタイミングに注意してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-271">For routed events that relate to the mouse, be careful about how or when you mark them handled.</span></span> <span data-ttu-id="014c2-272">特定のマウスアクションについて親要素にも通知する必要があるかどうかについて、適切な[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]選択を行うことが困難です。これは、基になる[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]マウスルーティングイベントが表示されるモデルをフレームワークが選択した理由です。ルートに沿ったイベント。</span><span class="sxs-lookup"><span data-stu-id="014c2-272">The difficulty in making the appropriate choices about whether parent elements should also be informed about any given mouse action is in fact why the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] framework chose the model of having the underlying mouse routed event be surfaced as [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] events along the route.</span></span> <span data-ttu-id="014c2-273">ルーティングのマウスイベントにも同様の問題があります。</span><span class="sxs-lookup"><span data-stu-id="014c2-273">Similar issues exist with tunneling mouse events.</span></span>  <span data-ttu-id="014c2-274">イベントを処理し、ソースに対してそれ以上の子によって処理されないようにする必要があります。また、合成部分にマウスの動作が期待される可能性があるコントロールを合成するにはどうすればよいでしょうか。</span><span class="sxs-lookup"><span data-stu-id="014c2-274">Should you handle the event and not have it be handled by further children toward the source, and how would that affect compositing a control where the compositing pieces might have expected mouse behaviors?</span></span>  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="014c2-275">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-275">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-276">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-276">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.MouseDownEvent>|  
|<span data-ttu-id="014c2-277">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-277">Routing strategy</span></span>|<span data-ttu-id="014c2-278">バブリング</span><span class="sxs-lookup"><span data-stu-id="014c2-278">Bubbling</span></span>|  
|<span data-ttu-id="014c2-279">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-279">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="014c2-280">対応するトンネリングイベントは<xref:System.Windows.Input.Mouse.PreviewMouseDown>です。</span><span class="sxs-lookup"><span data-stu-id="014c2-280">The corresponding tunneling event is <xref:System.Windows.Input.Mouse.PreviewMouseDown>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-281"><see cref="E:System.Windows.Input.Mouse.MouseDown" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-281">Identifies the <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-282">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-282">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-283">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-283">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-284">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-284">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="see AddMouseEnterHandler, and RemoveMouseEnterHandler" />
      <MemberSignature Language="ILAsm" Value="see AddMouseEnterHandler, and RemoveMouseEnterHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="see AddMouseEnterHandler, and RemoveMouseEnterHandler" />
      <MemberSignature Language="F#" Value="see AddMouseEnterHandler, and RemoveMouseEnterHandler" Usage="see AddMouseEnterHandler, and RemoveMouseEnterHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-285">マウス ポインターが要素の境界内に入ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-285">Occurs when the mouse pointer enters the boundaries of an element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-286">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-286">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-287">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-287">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-288">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-288">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-289">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-289">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-290">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-290">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="014c2-291">このイベントは、ダイレクトイベント処理ルーティング戦略を使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-291">This event uses the direct event handling routing strategy.</span></span> <span data-ttu-id="014c2-292">直接ルーティングイベントは、ルートに沿っては発生しません (これらのイベントは、発生した要素と同じ要素でのみ処理されます)。</span><span class="sxs-lookup"><span data-stu-id="014c2-292">Direct routed events are not raised along a route (they are only handled in the same element on which they are raised).</span></span>  <span data-ttu-id="014c2-293">ただし、スタイルのイベントトリガーなど、ルーティングイベントの動作の他の側面を有効にします。</span><span class="sxs-lookup"><span data-stu-id="014c2-293">They do, however, enable other aspects of routed event behaviors, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="014c2-294">このイベントは、マウスが要素に入ったことを追跡するために使用され<xref:System.Windows.UIElement.IsMouseOver%2A>ますが、この`false`要素`true`でプロパティがからに変更されたことを報告しています。</span><span class="sxs-lookup"><span data-stu-id="014c2-294">Although this event is used to track when the mouse enters an element, it is also reporting the <xref:System.Windows.UIElement.IsMouseOver%2A> property has changed from `false` to `true` on this element.</span></span>  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="014c2-295">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-295">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-296">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-296">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.MouseEnterEvent>|  
|<span data-ttu-id="014c2-297">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-297">Routing strategy</span></span>|<span data-ttu-id="014c2-298">直接</span><span class="sxs-lookup"><span data-stu-id="014c2-298">Direct</span></span>|  
|<span data-ttu-id="014c2-299">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-299">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-300"><see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-300">Identifies the <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-301">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-301">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-302">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-302">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-303">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-303">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="see AddMouseLeaveHandler, and RemoveMouseLeaveHandler" />
      <MemberSignature Language="ILAsm" Value="see AddMouseLeaveHandler, and RemoveMouseLeaveHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="see AddMouseLeaveHandler, and RemoveMouseLeaveHandler" />
      <MemberSignature Language="F#" Value="see AddMouseLeaveHandler, and RemoveMouseLeaveHandler" Usage="see AddMouseLeaveHandler, and RemoveMouseLeaveHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-304">マウス ポインターが要素の境界内から出たときに発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-304">Occurs when the mouse pointer leaves the boundaries of an element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-305">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-305">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-306">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-306">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-307">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-307">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-308">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-308">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-309">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-309">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="014c2-310">このイベントは、ダイレクトイベント処理ルーティング戦略を使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-310">This event uses the direct event handling routing strategy.</span></span> <span data-ttu-id="014c2-311">ダイレクトルーティングイベントは、ルートに従っていません (これらのイベントは、発生した要素と同じ要素でのみ処理されます)。</span><span class="sxs-lookup"><span data-stu-id="014c2-311">Direct routed events do not follow a route (they are only handled in the same element on which they are raised).</span></span>  <span data-ttu-id="014c2-312">ただし、スタイルのイベントトリガーなど、ルーティングイベントの動作の他の側面を有効にします。</span><span class="sxs-lookup"><span data-stu-id="014c2-312">They do, however, enable other aspects of routed event behaviors, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="014c2-313">このイベントは、マウスが要素から離れたことを追跡するために使用されます<xref:System.Windows.UIElement.IsMouseOver%2A>が、この要素で`true`プロパティ`false`値がからに変更されたことも報告します。</span><span class="sxs-lookup"><span data-stu-id="014c2-313">Although this event is used to track when the mouse leaves an element, it is also reporting that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
## <a name="routed-event-information"></a><span data-ttu-id="014c2-314">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-314">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-315">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-315">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.MouseLeaveEvent>|  
|<span data-ttu-id="014c2-316">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-316">Routing strategy</span></span>|<span data-ttu-id="014c2-317">直接</span><span class="sxs-lookup"><span data-stu-id="014c2-317">Direct</span></span>|  
|<span data-ttu-id="014c2-318">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-318">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-319"><see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-319">Identifies the <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-320">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-320">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-321">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-321">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-322">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-322">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="see AddMouseMoveHandler, and RemoveMouseMoveHandler" />
      <MemberSignature Language="ILAsm" Value="see AddMouseMoveHandler, and RemoveMouseMoveHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.MouseMove" />
      <MemberSignature Language="VB.NET" Value="see AddMouseMoveHandler, and RemoveMouseMoveHandler" />
      <MemberSignature Language="F#" Value="see AddMouseMoveHandler, and RemoveMouseMoveHandler" Usage="see AddMouseMoveHandler, and RemoveMouseMoveHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-323">マウス ポインターが移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-323">Occurs when the mouse pointer moves.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-324">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-324">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-325">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-325">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-326">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-326">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-327">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-327">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-328">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-328">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
## <a name="routed-event-information"></a><span data-ttu-id="014c2-329">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-329">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-330">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-330">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.MouseMoveEvent>|  
|<span data-ttu-id="014c2-331">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-331">Routing strategy</span></span>|<span data-ttu-id="014c2-332">バブリング</span><span class="sxs-lookup"><span data-stu-id="014c2-332">Bubbling</span></span>|  
|<span data-ttu-id="014c2-333">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-333">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="014c2-334">対応するトンネリングイベントは<xref:System.Windows.Input.Mouse.PreviewMouseMove>です。</span><span class="sxs-lookup"><span data-stu-id="014c2-334">The corresponding tunneling event is <xref:System.Windows.Input.Mouse.PreviewMouseMove>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-335"><see cref="E:System.Windows.Input.Mouse.MouseMove" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-335">Identifies the <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-336">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-336">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-337">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-337">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-338">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-338">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="see AddMouseUpHandler, and RemoveMouseUpHandler" />
      <MemberSignature Language="ILAsm" Value="see AddMouseUpHandler, and RemoveMouseUpHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.MouseUp" />
      <MemberSignature Language="VB.NET" Value="see AddMouseUpHandler, and RemoveMouseUpHandler" />
      <MemberSignature Language="F#" Value="see AddMouseUpHandler, and RemoveMouseUpHandler" Usage="see AddMouseUpHandler, and RemoveMouseUpHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-339">任意のマウス ボタンが離されると発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-339">Occurs when any mouse button is released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-340">どのマウスボタンが離されたかは、イベントの引数を確認することによって決定されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-340">Which mouse button was released is determined by checking the arguments of the event.</span></span>  
  
 <span data-ttu-id="014c2-341">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-341">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-342">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-342">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-343">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-343">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-344">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-344">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-345">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-345">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="014c2-346">フレームワーク[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]は、 <xref:System.Windows.UIElement.MouseLeftButtonUp>と<xref:System.Windows.UIElement> [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] の<xref:System.Windows.UIElement.MouseRightButtonUp>2 つの異なるイベントとして提示することで、この添付イベントに基づいて構築されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-346">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework builds on this attached event by surfacing it as two different [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events on <xref:System.Windows.UIElement>: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="014c2-347">これらの実装は、 <xref:System.Windows.Input.Mouse.MouseUp>基になるイベントを処理し、イベントの引数を読み取って、マウスの左ボタンまたは右ボタンが関係していたかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="014c2-347">These implementations handle the underlying <xref:System.Windows.Input.Mouse.MouseUp> event and read the arguments of the event to determine whether the left or right mouse button was involved.</span></span> <span data-ttu-id="014c2-348">3つのボタンについては、[中央] ボタンのフレームワークレベルのイベントサポートがないため、 <xref:System.Windows.Input.Mouse.MouseUp>イベントを使用して、イベント引数の中央ボタンの条件を確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="014c2-348">For three-button, there is no framework-level event support for the center button, and you should use the <xref:System.Windows.Input.Mouse.MouseUp> event and check for the center button condition in the event arguments.</span></span>  
  
 <span data-ttu-id="014c2-349">マウスに関連するルーティングイベントの場合は、どのように処理されたかをマークする方法やタイミングに注意してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-349">For routed events that relate to the mouse, be careful about how or when you mark them handled.</span></span> <span data-ttu-id="014c2-350">特定のマウスアクションについて親要素にも通知する必要があるかどうかについて、適切な[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]選択を行うことが困難です。 <xref:System.Windows.Input.Mouse>これは、フレームワークが、基になるルーティングイベントがあるモデルを選択したときに、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]ルートに沿ったイベントすべて。</span><span class="sxs-lookup"><span data-stu-id="014c2-350">The difficulty in making the appropriate choices about whether parent elements should also be informed about any given mouse action is in fact why the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] framework chose the model of having the underlying <xref:System.Windows.Input.Mouse> routed event be surfaced as [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] events all along the route.</span></span>  
  
 <span data-ttu-id="014c2-351">ルーティングのマウスイベントにも同様の問題があります。</span><span class="sxs-lookup"><span data-stu-id="014c2-351">Similar issues exist with tunneling mouse events.</span></span>  <span data-ttu-id="014c2-352">イベントを処理し、そのイベントがソースに対してそれ以上の子によって処理されないようにする必要があります。また、複合部分にマウスの動作が期待される可能性があるコントロールの合成にはどのように影響しますか。</span><span class="sxs-lookup"><span data-stu-id="014c2-352">Should you handle the event and not have it be handled by children further towards the source, and how would that affect compositing in a control where the compositing pieces might have expected mouse behaviors?</span></span>  
  
## <a name="routed-event-information"></a><span data-ttu-id="014c2-353">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-353">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-354">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-354">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.MouseUpEvent>|  
|<span data-ttu-id="014c2-355">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-355">Routing strategy</span></span>|<span data-ttu-id="014c2-356">バブリング</span><span class="sxs-lookup"><span data-stu-id="014c2-356">Bubbling</span></span>|  
|<span data-ttu-id="014c2-357">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-357">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
 <span data-ttu-id="014c2-358">対応するトンネリングイベントは<xref:System.Windows.Input.Mouse.PreviewMouseUp>です。</span><span class="sxs-lookup"><span data-stu-id="014c2-358">The corresponding tunneling event is <xref:System.Windows.Input.Mouse.PreviewMouseUp>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-359"><see cref="E:System.Windows.Input.Mouse.MouseUp" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-359">Identifies the <see cref="E:System.Windows.Input.Mouse.MouseUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-360">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-360">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-361">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-361">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-362">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-362">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="see AddMouseWheelHandler, and RemoveMouseWheelHandler" />
      <MemberSignature Language="ILAsm" Value="see AddMouseWheelHandler, and RemoveMouseWheelHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="see AddMouseWheelHandler, and RemoveMouseWheelHandler" />
      <MemberSignature Language="F#" Value="see AddMouseWheelHandler, and RemoveMouseWheelHandler" Usage="see AddMouseWheelHandler, and RemoveMouseWheelHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-363">マウス ホイールを回すと発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-363">Occurs when the mouse wheel is rotated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-364">マウスポインターが置かれている場所よりもフォーカスまたはマウスキャプチャの方が優先されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-364">Focus or mouse capture take precedence over where the mouse pointer is.</span></span>  <span data-ttu-id="014c2-365">フォーカスまたはキャプチャされた要素からこのイベントを受け取った場合、その時点では、マウスポインターが実際に別の要素を超えている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="014c2-365">If you receive this event from a focused or captured element, the mouse pointer might in fact be over another element at the time.</span></span>  
  
 <span data-ttu-id="014c2-366">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-366">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-367">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-367">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-368">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-368">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-369">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-369">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-370">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-370">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="014c2-371">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-371">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-372">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-372">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.MouseWheelEvent>|  
|<span data-ttu-id="014c2-373">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-373">Routing strategy</span></span>|<span data-ttu-id="014c2-374">バブリング</span><span class="sxs-lookup"><span data-stu-id="014c2-374">Bubbling</span></span>|  
|<span data-ttu-id="014c2-375">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-375">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="014c2-376">対応するトンネリングイベントは<xref:System.Windows.Input.Mouse.PreviewMouseWheel>です。</span><span class="sxs-lookup"><span data-stu-id="014c2-376">The corresponding tunneling event is <xref:System.Windows.Input.Mouse.PreviewMouseWheel>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelDeltaForOneLine">
      <MemberSignature Language="C#" Value="public const int MouseWheelDeltaForOneLine = 120;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MouseWheelDeltaForOneLine = (120)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine" />
      <MemberSignature Language="VB.NET" Value="Public Const MouseWheelDeltaForOneLine As Integer  = 120" />
      <MemberSignature Language="C++ CLI" Value="public: int MouseWheelDeltaForOneLine = 120;" />
      <MemberSignature Language="F#" Value="val mutable MouseWheelDeltaForOneLine : int" Usage="System.Windows.Input.Mouse.MouseWheelDeltaForOneLine" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>120</MemberValue>
      <Docs>
        <summary><span data-ttu-id="014c2-377">1 行スクロールするためにマウス ホイールが回転する単位数を表します。</span><span class="sxs-lookup"><span data-stu-id="014c2-377">Represents the number of units the mouse wheel is rotated to scroll one line.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-378">現在[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]のでは、このフィールドの値は120です。</span><span class="sxs-lookup"><span data-stu-id="014c2-378">In the current [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)], the value of this field is 120.</span></span> <span data-ttu-id="014c2-379">フィールドの公開の目的は、ベンダーがより詳細なマウスホイールを作成できるようにすることです。これには、切り込みのない自由に回転するホイールが含まれる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="014c2-379">The intention of the field exposure is to allow for vendors to build finer-resolution mouse wheels in the future, that perhaps would include a freely rotating wheel without notches.</span></span> <span data-ttu-id="014c2-380">このようなデバイスは、ローテーションごとにより多くのメッセージを送信しますが、各メッセージにはより小さい値を指定することを想定しています。</span><span class="sxs-lookup"><span data-stu-id="014c2-380">The expectation is that such a device would send more messages per rotation, but with a smaller value in each message.</span></span> <span data-ttu-id="014c2-381">この可能性をサポートするには、その<xref:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine>量に到達するまで、受信デルタ値を追加する必要があります (したがって、差分ローテーションの場合は、同じ応答が返されます)。または、より頻繁に発生するメッセージに応答して部分的な行をスクロールすることもできます。</span><span class="sxs-lookup"><span data-stu-id="014c2-381">To support this possibility, you should either add the incoming delta values until the <xref:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine> amount is reached (so for a delta-rotation you get the same response), or scroll partial lines in response to the more frequent messages.</span></span> <span data-ttu-id="014c2-382">また、独自のスクロール粒度を選択して、そのデルタに到達するまで、独自に選択したデルタを累積することもできます。または、ユーザーが制御できるようにマウス感度のシステムパラメーターを参照し、これらをマウスホイールの差分しきい値に推定することもできます。</span><span class="sxs-lookup"><span data-stu-id="014c2-382">You could also choose your own scroll granularity and accumulate deltas of your own choosing until that delta is reached, or perhaps reference user-controllable system parameters for mouse sensitivity and extrapolate these to mouse wheel delta thresholds.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseWheelEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-383"><see cref="E:System.Windows.Input.Mouse.MouseWheel" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-383">Identifies the <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-384">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-384">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-385">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-385">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-386">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-386">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideCursor">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.Cursor OverrideCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.Cursor OverrideCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.OverrideCursor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property OverrideCursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::Cursor ^ OverrideCursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OverrideCursor : System.Windows.Input.Cursor with get, set" Usage="System.Windows.Input.Mouse.OverrideCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-387">アプリケーション全体のカーソルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="014c2-387">Gets or sets the cursor for the entire application.</span></span></summary>
        <value><span data-ttu-id="014c2-388">オーバーライドされたカーソル。<see langword="null" /> が設定されていない場合は <see cref="P:System.Windows.Input.Mouse.OverrideCursor" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-388">The override cursor or <see langword="null" /> if the <see cref="P:System.Windows.Input.Mouse.OverrideCursor" /> is not set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-389">に<xref:System.Windows.Input.Cursor>設定<xref:System.Windows.Input.Mouse.OverrideCursor%2A>されているは、アプリケーション全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-389">The <xref:System.Windows.Input.Cursor> that <xref:System.Windows.Input.Mouse.OverrideCursor%2A> is set to will be applied to the whole application.</span></span>  
  
 <span data-ttu-id="014c2-390">オーバーライド<xref:System.Windows.Input.Cursor>をクリアするには<xref:System.Windows.Input.Mouse.OverrideCursor%2A> 、 `null`をに設定します。</span><span class="sxs-lookup"><span data-stu-id="014c2-390">To clear the override <xref:System.Windows.Input.Cursor>, set <xref:System.Windows.Input.Mouse.OverrideCursor%2A> to `null`.</span></span>  
  
 <span data-ttu-id="014c2-391">を<xref:System.Windows.Input.Mouse.OverrideCursor%2A>に<xref:System.Windows.Input.Cursors.None%2A>設定すると、マウスカーソルは表示されませんが、マウスイベントは引き続き処理されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-391">Setting <xref:System.Windows.Input.Mouse.OverrideCursor%2A> to <xref:System.Windows.Input.Cursors.None%2A> will force the mouse cursor not to be displayed, but mouse events are still processed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="014c2-392">次の例は、 <xref:System.Windows.Controls.RadioButton> 1 つの要素とアプリケーション全体の間でカーソル変更の範囲を切り替えるために使用されるのイベントハンドラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="014c2-392">The following example shows an event handler for a <xref:System.Windows.Controls.RadioButton> that is used to toggle the scope of a cursor change between a single element and the entire application.</span></span>  <span data-ttu-id="014c2-393">イベントを発生さ`rbScopeElement`せたコントロールが<xref:System.Windows.Controls.RadioButton>である場合、 <xref:System.Windows.Input.Mouse.OverrideCursor%2A>カーソル変更のスコープを示すフラグが設定され、がに`null`設定されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-393">If the control that raised the event is the `rbScopeElement`<xref:System.Windows.Controls.RadioButton>, a flag that denotes the scope of the cursor change is set and <xref:System.Windows.Input.Mouse.OverrideCursor%2A> is set to `null`.</span></span>  <span data-ttu-id="014c2-394">イベントを発生させた`rbScopeApplication`コントロールが<xref:System.Windows.Controls.RadioButton>である場合、 <xref:System.Windows.Input.Mouse.OverrideCursor%2A>カーソル変更のスコープを示すフラグが設定され、がという<xref:System.Windows.FrameworkElement.Cursor%2A>名前`DisplayArea`の<xref:System.Windows.Controls.Border>コントロールのプロパティに設定されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-394">If the control that raised the event is the `rbScopeApplication`<xref:System.Windows.Controls.RadioButton>, a flag that denotes the scope of the cursor change is set and <xref:System.Windows.Input.Mouse.OverrideCursor%2A> is set to the <xref:System.Windows.FrameworkElement.Cursor%2A> property of the <xref:System.Windows.Controls.Border> control named `DisplayArea`.</span></span>  
  
 [!code-csharp[cursors#CursorsSampleOverrideCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#cursorssampleoverridecursor)]
 [!code-vb[cursors#CursorsSampleOverrideCursor](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#cursorssampleoverridecursor)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="see AddPreviewMouseDownHandler, and RemovePreviewMouseDownHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewMouseDownHandler, and RemovePreviewMouseDownHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewMouseDownHandler, and RemovePreviewMouseDownHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewMouseDownHandler, and RemovePreviewMouseDownHandler" Usage="see AddPreviewMouseDownHandler, and RemovePreviewMouseDownHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-395">任意のマウス ボタンが押されると発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-395">Occurs when any mouse button is depressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-396">どのマウスボタンが押されたかは、イベントの引数を確認することによって決定されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-396">Which mouse button was depressed is determined by checking the arguments of the event.</span></span> <span data-ttu-id="014c2-397">これは、入力を受け取る既存[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]の要素によって参照される添付イベント構文を通じて使用される添付イベント (トンネリングルーティング戦略を使用) です。</span><span class="sxs-lookup"><span data-stu-id="014c2-397">This is an attached event (using tunneling routing strategy) that is intended through attached event syntax to be referenced by existing [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements that take input.</span></span>  
  
 <span data-ttu-id="014c2-398">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-398">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-399">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-399">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-400">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-400">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-401">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-401">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-402">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-402">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="014c2-403">フレームワーク[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]は、 <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>と<xref:System.Windows.UIElement> [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] の<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>2 つの異なるイベントとして提示することで、この添付イベントに基づいて構築されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-403">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework builds on this attached event by surfacing it as two different [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events on <xref:System.Windows.UIElement>: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</span></span> <span data-ttu-id="014c2-404">これらの実装は、 <xref:System.Windows.Input.Mouse.PreviewMouseDown>基になるイベントを処理し、イベントの引数を読み取って、マウスの左ボタンまたは右ボタンが関係していたかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="014c2-404">These implementations handle the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown> event and read the arguments of the event to determine whether the left or right mouse button was involved.</span></span> <span data-ttu-id="014c2-405">3つのボタンについては、[中央] ボタンのフレームワークレベルのイベントサポートがないため、 <xref:System.Windows.Input.Mouse.PreviewMouseDown>イベントを使用して、イベント引数の中央ボタンの条件を確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="014c2-405">For three-button, there is no framework-level event support for the center button, and you should use the <xref:System.Windows.Input.Mouse.PreviewMouseDown> event and check for the center button condition in the event arguments.</span></span>  
  
 <span data-ttu-id="014c2-406">マウスに関連するルーティングイベントの場合は、どのように処理されたかをマークする方法やタイミングに注意してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-406">For routed events that relate to the mouse, be careful about how or when you mark them handled.</span></span> <span data-ttu-id="014c2-407">ルート付近のイベントを処理し、そのイベントをソースに対してさらに子によって処理することは、複合コントロールには適していない可能性があります。この場合、合成部分では、マウスの動作が期待されることがあります。</span><span class="sxs-lookup"><span data-stu-id="014c2-407">Handling the event near the root and handling it by a child further toward the source may not be appropriate for composited controls, where the compositing pieces might have expected mouse behaviors.</span></span> <span data-ttu-id="014c2-408">特定のマウスアクションについて他の要素にも通知する必要があるかどうかについて、適切[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]な選択を行うことが困難です<xref:System.Windows.Input.Mouse> 。これは、フレームワークが、基になるルーティングイベントを表示するモデルを選択した理由です。[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]ルートに沿ったイベント。</span><span class="sxs-lookup"><span data-stu-id="014c2-408">The difficulty in making the appropriate choices about whether other elements should also be informed about any given mouse action is in fact why the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] framework chose the model of having the underlying <xref:System.Windows.Input.Mouse> routed event be surfaced as [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] events along the route.</span></span>  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="014c2-409">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-409">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-410">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-410">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.PreviewMouseDownEvent>|  
|<span data-ttu-id="014c2-411">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-411">Routing strategy</span></span>|<span data-ttu-id="014c2-412">トンネリング</span><span class="sxs-lookup"><span data-stu-id="014c2-412">Tunneling</span></span>|  
|<span data-ttu-id="014c2-413">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-413">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="014c2-414">対応するバブルイベントは<xref:System.Windows.Input.Mouse.MouseDown>です。</span><span class="sxs-lookup"><span data-stu-id="014c2-414">The corresponding bubbling event is <xref:System.Windows.Input.Mouse.MouseDown>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-415"><see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-415">Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-416">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-416">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-417">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-417">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-418">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-418">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownOutsideCapturedElement">
      <MemberSignature Language="C#" Value="see AddPreviewMouseDownOutsideCapturedElementHandler, and RemovePreviewMouseDownOutsideCapturedElementHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewMouseDownOutsideCapturedElementHandler, and RemovePreviewMouseDownOutsideCapturedElementHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewMouseDownOutsideCapturedElementHandler, and RemovePreviewMouseDownOutsideCapturedElementHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewMouseDownOutsideCapturedElementHandler, and RemovePreviewMouseDownOutsideCapturedElementHandler" Usage="see AddPreviewMouseDownOutsideCapturedElementHandler, and RemovePreviewMouseDownOutsideCapturedElementHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-419">プライマリ マウス ボタンが、マウス イベントをキャプチャしている要素の外で押されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-419">Occurs when the primary mouse button is pressed outside the element that is capturing mouse events.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-420">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-420">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-421">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-421">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-422">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-422">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-423">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-423">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-424">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-424">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="014c2-425">このイベントは、基本要素では resurfaced ません。</span><span class="sxs-lookup"><span data-stu-id="014c2-425">This event is not resurfaced on base elements.</span></span> <span data-ttu-id="014c2-426">主に、コントロールの複合内でマウスのキャプチャとマウスの入力を調整しようとしている作成者を制御することが重要です。</span><span class="sxs-lookup"><span data-stu-id="014c2-426">It is mainly of concern to control authors that are attempting to reconcile mouse capture and mouse input within their control compositing.</span></span>  
  
<a name="routedEventInfo_PreviewMouseDownOutsideCaptureElement"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="014c2-427">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-427">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-428">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-428">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElementEvent>|  
|<span data-ttu-id="014c2-429">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-429">Routing strategy</span></span>|<span data-ttu-id="014c2-430">トンネリング</span><span class="sxs-lookup"><span data-stu-id="014c2-430">Tunneling</span></span>|  
|<span data-ttu-id="014c2-431">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-431">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownOutsideCapturedElementEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownOutsideCapturedElementEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownOutsideCapturedElementEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElementEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownOutsideCapturedElementEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownOutsideCapturedElementEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownOutsideCapturedElementEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElementEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-432"><see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-432">Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-433">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-433">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-434">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-434">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-435">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-435">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="see AddPreviewMouseMoveHandler, and RemovePreviewMouseMoveHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewMouseMoveHandler, and RemovePreviewMouseMoveHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewMouseMoveHandler, and RemovePreviewMouseMoveHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewMouseMoveHandler, and RemovePreviewMouseMoveHandler" Usage="see AddPreviewMouseMoveHandler, and RemovePreviewMouseMoveHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-436">マウスが要素上を移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-436">Occurs when the mouse moves over an element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-437">このイベントは、マウスポインターが要素の境界内で新しく移動されたときと、要素の境界内で残っている間にマウスポインターが移動したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-437">This event occurs both when the mouse pointer is newly moved in the element bounds, and also when the mouse pointer moves while still remaining in the element bounds.</span></span>  
  
 <span data-ttu-id="014c2-438">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-438">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-439">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-439">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-440">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-440">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-441">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-441">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-442">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-442">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="014c2-443">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-443">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-444">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-444">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.PreviewMouseMoveEvent>|  
|<span data-ttu-id="014c2-445">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-445">Routing strategy</span></span>|<span data-ttu-id="014c2-446">トンネリング</span><span class="sxs-lookup"><span data-stu-id="014c2-446">Tunneling</span></span>|  
|<span data-ttu-id="014c2-447">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-447">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="014c2-448">対応するバブルイベントは<xref:System.Windows.Input.Mouse.MouseMove>です。</span><span class="sxs-lookup"><span data-stu-id="014c2-448">The corresponding bubbling event is <xref:System.Windows.Input.Mouse.MouseMove>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-449"><see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-449">Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-450">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-450">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-451">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-451">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-452">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-452">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="see AddPreviewMouseUpHandler, and RemovePreviewMouseUpHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewMouseUpHandler, and RemovePreviewMouseUpHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewMouseUpHandler, and RemovePreviewMouseUpHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewMouseUpHandler, and RemovePreviewMouseUpHandler" Usage="see AddPreviewMouseUpHandler, and RemovePreviewMouseUpHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-453">任意のマウス ボタンが離されると発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-453">Occurs when any mouse button is released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-454">どのマウスボタンが離されたかは、イベントの引数を確認することによって決定されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-454">Which mouse button was released is determined by checking the arguments of the event.</span></span>  
  
 <span data-ttu-id="014c2-455">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-455">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-456">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-456">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-457">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-457">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-458">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-458">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-459">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-459">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="014c2-460">フレームワーク[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]は、 <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>と<xref:System.Windows.UIElement> [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] の<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>2 つの異なるイベントとして提示することで、この添付イベントに基づいて構築されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-460">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework builds on this attached event by surfacing it as two different [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events on <xref:System.Windows.UIElement>: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="014c2-461">これらの実装は、 <xref:System.Windows.Input.Mouse.PreviewMouseUp>基になるイベントを処理し、イベントの引数を読み取って、マウスの左ボタンまたは右ボタンが関係していたかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="014c2-461">These implementations handle the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp> event and read the arguments of the event to determine whether the left or right mouse button was involved.</span></span> <span data-ttu-id="014c2-462">3つのボタンについては、[中央] ボタンのフレームワークレベルのイベントサポートがないため、 <xref:System.Windows.Input.Mouse.PreviewMouseUp>イベントを使用して、イベント引数の中央ボタンの条件を確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="014c2-462">For three-button, there is no framework-level event support for the center button, and you should use the <xref:System.Windows.Input.Mouse.PreviewMouseUp> event and check for the center button condition in the event arguments.</span></span>  
  
 <span data-ttu-id="014c2-463">マウスに関連するルーティングイベントの場合は、どのように処理されたかをマークする方法やタイミングに注意してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-463">For routed events that relate to the mouse, be careful about how or when you mark them handled.</span></span> <span data-ttu-id="014c2-464">ルート付近でのイベントの処理は、ソースに対してさらに子によって処理されるのではなく、合成コントロールに適していない可能性があります。この場合、合成部分では、マウスの動作が期待されることがあります。</span><span class="sxs-lookup"><span data-stu-id="014c2-464">Handling the event near the root and not handling by a child further toward the source may not be appropriate for composited controls, where the compositing pieces might have expected mouse behaviors.</span></span> <span data-ttu-id="014c2-465">特定のマウスアクションについて他の要素にも通知する必要があるかどうかについて、適切[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]な選択を行うことが困難です<xref:System.Windows.Input.Mouse> 。これは、フレームワークが、基になるルーティングイベントを表示するモデルを選択した理由です。[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]ルートに沿ったイベント。</span><span class="sxs-lookup"><span data-stu-id="014c2-465">The difficulty in making the appropriate choices about whether other elements should also be informed about any given mouse action is in fact why the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] framework chose the model of having the underlying <xref:System.Windows.Input.Mouse> routed event be surfaced as [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] events along the route.</span></span>  
  
## <a name="routed-event-information"></a><span data-ttu-id="014c2-466">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-466">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-467">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-467">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.PreviewMouseUpEvent>|  
|<span data-ttu-id="014c2-468">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-468">Routing strategy</span></span>|<span data-ttu-id="014c2-469">トンネリング</span><span class="sxs-lookup"><span data-stu-id="014c2-469">Tunneling</span></span>|  
|<span data-ttu-id="014c2-470">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-470">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="014c2-471">対応するバブルイベントは<xref:System.Windows.Input.Mouse.MouseUp>です。</span><span class="sxs-lookup"><span data-stu-id="014c2-471">The corresponding bubbling event is <xref:System.Windows.Input.Mouse.MouseUp>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-472"><see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-472">Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-473">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-473">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-474">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-474">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-475">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-475">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpOutsideCapturedElement">
      <MemberSignature Language="C#" Value="see AddPreviewMouseUpOutsideCapturedElementHandler, and RemovePreviewMouseUpOutsideCapturedElementHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewMouseUpOutsideCapturedElementHandler, and RemovePreviewMouseUpOutsideCapturedElementHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewMouseUpOutsideCapturedElementHandler, and RemovePreviewMouseUpOutsideCapturedElementHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewMouseUpOutsideCapturedElementHandler, and RemovePreviewMouseUpOutsideCapturedElementHandler" Usage="see AddPreviewMouseUpOutsideCapturedElementHandler, and RemovePreviewMouseUpOutsideCapturedElementHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-476">プライマリ マウス ボタンが、マウス イベントをキャプチャしている要素の外で離されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-476">Occurs when the primary mouse button is released outside the element that is capturing mouse events.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-477">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-477">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-478">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-478">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-479">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-479">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-480">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-480">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-481">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-481">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="014c2-482">このイベントは、基本要素では resurfaced ません。</span><span class="sxs-lookup"><span data-stu-id="014c2-482">This event is not resurfaced on base elements.</span></span> <span data-ttu-id="014c2-483">主に、コントロールの複合内でマウスのキャプチャとマウスの入力を調整しようとしている作成者を制御することが重要です。</span><span class="sxs-lookup"><span data-stu-id="014c2-483">It is mainly of concern to control authors that are attempting to reconcile mouse capture and mouse input within their control compositing.</span></span>  
  
<a name="routedEventInfo_PreviewMouseUpOutsideCaptureElement"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="014c2-484">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-484">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-485">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-485">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElementEvent>|  
|<span data-ttu-id="014c2-486">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-486">Routing strategy</span></span>|<span data-ttu-id="014c2-487">トンネリング</span><span class="sxs-lookup"><span data-stu-id="014c2-487">Tunneling</span></span>|  
|<span data-ttu-id="014c2-488">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-488">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="014c2-489">対応するバブルイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="014c2-489">There is no corresponding bubbling event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpOutsideCapturedElementEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpOutsideCapturedElementEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpOutsideCapturedElementEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElementEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpOutsideCapturedElementEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpOutsideCapturedElementEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpOutsideCapturedElementEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElementEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-490"><see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-490">Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-491">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-491">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-492">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-492">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-493">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-493">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="see AddPreviewMouseWheelHandler, and RemovePreviewMouseWheelHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewMouseWheelHandler, and RemovePreviewMouseWheelHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewMouseWheelHandler, and RemovePreviewMouseWheelHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewMouseWheelHandler, and RemovePreviewMouseWheelHandler" Usage="see AddPreviewMouseWheelHandler, and RemovePreviewMouseWheelHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-494">マウス ホイールを回すと発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-494">Occurs when the mouse wheel rotates.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-495">マウスポインターがある場所よりもフォーカスまたはマウスキャプチャが優先されます。そのため、フォーカスまたはキャプチャされた要素からこのイベントを受け取った場合、その時点では、マウスポインターが実際に別の要素を超えている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="014c2-495">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might in fact be over another element at the time.</span></span>  
  
 <span data-ttu-id="014c2-496">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-496">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-497">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-497">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-498">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-498">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-499">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-499">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-500">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-500">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="014c2-501">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-501">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-502">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-502">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.PreviewMouseWheelEvent>|  
|<span data-ttu-id="014c2-503">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-503">Routing strategy</span></span>|<span data-ttu-id="014c2-504">トンネリング</span><span class="sxs-lookup"><span data-stu-id="014c2-504">Tunneling</span></span>|  
|<span data-ttu-id="014c2-505">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-505">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="014c2-506">対応するバブルイベントは<xref:System.Windows.Input.Mouse.MouseWheel>です。</span><span class="sxs-lookup"><span data-stu-id="014c2-506">The corresponding bubbling event is <xref:System.Windows.Input.Mouse.MouseWheel>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-507"><see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-507">Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-508">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-508">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-509">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-509">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-510">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-510">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryDevice">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.MouseDevice PrimaryDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.MouseDevice PrimaryDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.PrimaryDevice" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PrimaryDevice As MouseDevice" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::MouseDevice ^ PrimaryDevice { System::Windows::Input::MouseDevice ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PrimaryDevice : System.Windows.Input.MouseDevice" Usage="System.Windows.Input.Mouse.PrimaryDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-511">プライマリ マウス デバイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="014c2-511">Gets the primary mouse device.</span></span></summary>
        <value><span data-ttu-id="014c2-512">デバイス。</span><span class="sxs-lookup"><span data-stu-id="014c2-512">The device.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-513">このプロパティは、Windows Presentation Foundation のインフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="014c2-513">This property supports the Windows Presentation Foundation infrastructure and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseDevice" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="see AddQueryCursorHandler, and RemoveQueryCursorHandler" />
      <MemberSignature Language="ILAsm" Value="see AddQueryCursorHandler, and RemoveQueryCursorHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="see AddQueryCursorHandler, and RemoveQueryCursorHandler" />
      <MemberSignature Language="F#" Value="see AddQueryCursorHandler, and RemoveQueryCursorHandler" Usage="see AddQueryCursorHandler, and RemoveQueryCursorHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="014c2-514">要素が現在のマウス カーソルを照会したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="014c2-514">Occurs when an element queries for the current mouse cursor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-515">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="014c2-515">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="014c2-516">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="014c2-516">implements attached events as routed events.</span></span> <span data-ttu-id="014c2-517">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-517">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="014c2-518">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-518">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="014c2-519">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-519">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_Querycursor"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="014c2-520">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="014c2-520">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="014c2-521">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="014c2-521">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.QueryCursorEvent>|  
|<span data-ttu-id="014c2-522">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="014c2-522">Routing strategy</span></span>|<span data-ttu-id="014c2-523">バブリング</span><span class="sxs-lookup"><span data-stu-id="014c2-523">Bubbling</span></span>|  
|<span data-ttu-id="014c2-524">Delegate</span><span class="sxs-lookup"><span data-stu-id="014c2-524">Delegate</span></span>|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
 <span data-ttu-id="014c2-525">定義された対応するトンネリングイベントがありません。</span><span class="sxs-lookup"><span data-stu-id="014c2-525">There is no defined corresponding tunneling event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-526"><see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-526">Identifies the <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-527">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-527">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="014c2-528">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="014c2-528">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="014c2-529">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="014c2-529">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveGotMouseCaptureHandler">
      <MemberSignature Language="C#" Value="public static void RemoveGotMouseCaptureHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveGotMouseCaptureHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveGotMouseCaptureHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveGotMouseCaptureHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveGotMouseCaptureHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveGotMouseCaptureHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-530">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-530">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-531">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-531">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-532"><see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-532">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveLostMouseCaptureHandler">
      <MemberSignature Language="C#" Value="public static void RemoveLostMouseCaptureHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveLostMouseCaptureHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveLostMouseCaptureHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveLostMouseCaptureHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveLostMouseCaptureHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveLostMouseCaptureHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-533">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-533">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-534">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-534">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-535"><see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-535">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveMouseDownHandler">
      <MemberSignature Language="C#" Value="public static void RemoveMouseDownHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMouseDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMouseDownHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMouseDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveMouseDownHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveMouseDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-536">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-536">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-537">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-537">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-538"><see cref="E:System.Windows.Input.Mouse.MouseDown" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-538">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveMouseEnterHandler">
      <MemberSignature Language="C#" Value="public static void RemoveMouseEnterHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMouseEnterHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMouseEnterHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMouseEnterHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveMouseEnterHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveMouseEnterHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-539">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-539">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-540">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-540">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-541"><see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-541">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveMouseLeaveHandler">
      <MemberSignature Language="C#" Value="public static void RemoveMouseLeaveHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMouseLeaveHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMouseLeaveHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMouseLeaveHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveMouseLeaveHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveMouseLeaveHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-542">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-542">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-543">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-543">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-544"><see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-544">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveMouseMoveHandler">
      <MemberSignature Language="C#" Value="public static void RemoveMouseMoveHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMouseMoveHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMouseMoveHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMouseMoveHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveMouseMoveHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveMouseMoveHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-545">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-545">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-546">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-546">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-547"><see cref="E:System.Windows.Input.Mouse.MouseMove" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-547">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveMouseUpHandler">
      <MemberSignature Language="C#" Value="public static void RemoveMouseUpHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMouseUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMouseUpHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMouseUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveMouseUpHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveMouseUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-548">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-548">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-549">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-549">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-550"><see cref="E:System.Windows.Input.Mouse.MouseUp" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-550">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseUp" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveMouseWheelHandler">
      <MemberSignature Language="C#" Value="public static void RemoveMouseWheelHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMouseWheelHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseWheelEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMouseWheelHandler (element As DependencyObject, handler As MouseWheelEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMouseWheelHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseWheelEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveMouseWheelHandler : System.Windows.DependencyObject * System.Windows.Input.MouseWheelEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveMouseWheelHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseWheelEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-551">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-551">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-552">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-552">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-553"><see cref="E:System.Windows.Input.Mouse.MouseWheel" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-553">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewMouseDownHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewMouseDownHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewMouseDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemovePreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewMouseDownHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewMouseDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewMouseDownHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemovePreviewMouseDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-554">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-554">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-555">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-555">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-556"><see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-556">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewMouseDownOutsideCapturedElementHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewMouseDownOutsideCapturedElementHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewMouseDownOutsideCapturedElementHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemovePreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewMouseDownOutsideCapturedElementHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewMouseDownOutsideCapturedElementHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewMouseDownOutsideCapturedElementHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemovePreviewMouseDownOutsideCapturedElementHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-557">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-557">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-558">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-558">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-559"><see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-559">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewMouseMoveHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewMouseMoveHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewMouseMoveHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemovePreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewMouseMoveHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewMouseMoveHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewMouseMoveHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemovePreviewMouseMoveHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-560">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-560">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-561">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-561">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-562"><see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-562">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewMouseUpHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewMouseUpHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewMouseUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemovePreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewMouseUpHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewMouseUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewMouseUpHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemovePreviewMouseUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-563">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-563">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-564">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-564">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-565"><see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-565">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewMouseUpOutsideCapturedElementHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewMouseUpOutsideCapturedElementHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewMouseUpOutsideCapturedElementHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemovePreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewMouseUpOutsideCapturedElementHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewMouseUpOutsideCapturedElementHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewMouseUpOutsideCapturedElementHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemovePreviewMouseUpOutsideCapturedElementHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-566">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-566">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-567">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-567">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-568"><see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-568">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewMouseWheelHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewMouseWheelHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewMouseWheelHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseWheelEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemovePreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewMouseWheelHandler (element As DependencyObject, handler As MouseWheelEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewMouseWheelHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseWheelEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewMouseWheelHandler : System.Windows.DependencyObject * System.Windows.Input.MouseWheelEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemovePreviewMouseWheelHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseWheelEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-569">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-569">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-570">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-570">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-571"><see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-571">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveQueryCursorHandler">
      <MemberSignature Language="C#" Value="public static void RemoveQueryCursorHandler (System.Windows.DependencyObject element, System.Windows.Input.QueryCursorEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveQueryCursorHandler(class System.Windows.DependencyObject element, class System.Windows.Input.QueryCursorEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveQueryCursorHandler (element As DependencyObject, handler As QueryCursorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveQueryCursorHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::QueryCursorEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveQueryCursorHandler : System.Windows.DependencyObject * System.Windows.Input.QueryCursorEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveQueryCursorHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.QueryCursorEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="014c2-572">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-572">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="014c2-573">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="014c2-573">The event handler.</span></span></param>
        <summary><span data-ttu-id="014c2-574"><see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="014c2-574">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightButton">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.MouseButtonState RightButton { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.MouseButtonState RightButton" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.RightButton" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RightButton As MouseButtonState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::MouseButtonState RightButton { System::Windows::Input::MouseButtonState get(); };" />
      <MemberSignature Language="F#" Value="member this.RightButton : System.Windows.Input.MouseButtonState" Usage="System.Windows.Input.Mouse.RightButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-575">マウスの右ボタンの状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="014c2-575">Gets the state of the right button.</span></span></summary>
        <value><span data-ttu-id="014c2-576">マウスの右ボタンの状態。</span><span class="sxs-lookup"><span data-stu-id="014c2-576">The state of the right mouse button.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="014c2-577">次の例では、の状態が<xref:System.Windows.Input.Mouse.RightButton%2A> <xref:System.Windows.Input.MouseButtonState>列挙値<xref:System.Windows.Input.MouseButtonState.Pressed>と等しいかどうかを確認することによって、マウスの右ボタンが押されているかどうかを確認する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="014c2-577">The following example shows how to determine whether the right mouse button is pressed by checking if the state of the <xref:System.Windows.Input.Mouse.RightButton%2A> is equal to the <xref:System.Windows.Input.MouseButtonState> enumeration value <xref:System.Windows.Input.MouseButtonState.Pressed>.</span></span>  <span data-ttu-id="014c2-578">このボタンが押されている場合、サンプルの表示要素を更新するメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-578">If the button is pressed, a method is called which updates display elements in the sample.</span></span>  
  
 [!code-csharp[MouseRelatedSnippets#MouseRelatedSnippetsGetRightButtonMouse](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseRelatedSnippets/CSharp/Window1.xaml.cs#mouserelatedsnippetsgetrightbuttonmouse)]
 [!code-vb[MouseRelatedSnippets#MouseRelatedSnippetsGetRightButtonMouse](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseRelatedSnippets/visualbasic/window1.xaml.vb#mouserelatedsnippetsgetrightbuttonmouse)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseButtonEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SetCursor">
      <MemberSignature Language="C#" Value="public static bool SetCursor (System.Windows.Input.Cursor cursor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetCursor(class System.Windows.Input.Cursor cursor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.SetCursor(System.Windows.Input.Cursor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetCursor(System::Windows::Input::Cursor ^ cursor);" />
      <MemberSignature Language="F#" Value="static member SetCursor : System.Windows.Input.Cursor -&gt; bool" Usage="System.Windows.Input.Mouse.SetCursor cursor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cursor" Type="System.Windows.Input.Cursor" />
      </Parameters>
      <Docs>
        <param name="cursor"><span data-ttu-id="014c2-579">マウス ポインターの設定先のカーソル。</span><span class="sxs-lookup"><span data-stu-id="014c2-579">The cursor to set the mouse pointer to.</span></span></param>
        <summary><span data-ttu-id="014c2-580">指定した <see cref="T:System.Windows.Input.Cursor" /> にマウス ポインターを設定します。</span><span class="sxs-lookup"><span data-stu-id="014c2-580">Sets the mouse pointer to the specified <see cref="T:System.Windows.Input.Cursor" />.</span></span></summary>
        <returns><span data-ttu-id="014c2-581">カーソルが設定された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="014c2-581"><see langword="true" />, if the cursor was set; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="014c2-582">設定されているカーソルは、特定の要素には適用されませんが、アプリケーション全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-582">The cursor being set does not apply to any particular element, but rather it applies to the whole application.</span></span>  <span data-ttu-id="014c2-583">そのため、カーソルを設定した後でカーソルを設定するオブジェクトの上にマウスポインターを移動すると、カーソルが再び変更されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-583">So, if after setting the cursor the mouse pointer moves over an object which sets the cursor, the cursor will be changed again.</span></span>  
  
 <span data-ttu-id="014c2-584">マウスポインターを特定<xref:System.Windows.Input.Cursor>のに強制的に適用し、 <xref:System.Windows.Input.Mouse.OverrideCursor%2A>すべて<xref:System.Windows.Input.Cursor>の要素に対してこれを強制するには、プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="014c2-584">To force the mouse pointer to a specific <xref:System.Windows.Input.Cursor> and to force this <xref:System.Windows.Input.Cursor> on all elements, set the <xref:System.Windows.Input.Mouse.OverrideCursor%2A> property.</span></span>  
  
 <span data-ttu-id="014c2-585">特定の要素にカーソルを設定するに<xref:System.Windows.FrameworkElement.Cursor%2A> <xref:System.Windows.FrameworkElement>は、または<xref:System.Windows.FrameworkContentElement>のプロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="014c2-585">To set the cursor on a specific element, use the <xref:System.Windows.FrameworkElement.Cursor%2A> property on either <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span>  <span data-ttu-id="014c2-586">基本要素の詳細については、「[基本要素の概要](~/docs/framework/wpf/advanced/base-elements-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="014c2-586">For more information on the base elements, see the [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.Cursors" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="Synchronize">
      <MemberSignature Language="C#" Value="public static void Synchronize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Synchronize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.Synchronize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Synchronize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Synchronize();" />
      <MemberSignature Language="F#" Value="static member Synchronize : unit -&gt; unit" Usage="System.Windows.Input.Mouse.Synchronize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="014c2-587">マウスを強制的に再同期します。</span><span class="sxs-lookup"><span data-stu-id="014c2-587">Forces the mouse to resynchronize.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.MouseDevice" />
        <altmember cref="M:System.Windows.Input.Mouse.Synchronize" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCursor">
      <MemberSignature Language="C#" Value="public static void UpdateCursor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UpdateCursor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.UpdateCursor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UpdateCursor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UpdateCursor();" />
      <MemberSignature Language="F#" Value="static member UpdateCursor : unit -&gt; unit" Usage="System.Windows.Input.Mouse.UpdateCursor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="014c2-588">マウス カーソルを強制的に更新します。</span><span class="sxs-lookup"><span data-stu-id="014c2-588">Forces the mouse cursor to be updated.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XButton1">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.MouseButtonState XButton1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.MouseButtonState XButton1" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.XButton1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property XButton1 As MouseButtonState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::MouseButtonState XButton1 { System::Windows::Input::MouseButtonState get(); };" />
      <MemberSignature Language="F#" Value="member this.XButton1 : System.Windows.Input.MouseButtonState" Usage="System.Windows.Input.Mouse.XButton1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-589">マウスの第 1 拡張ボタンの状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="014c2-589">Gets the state of the first extended button.</span></span></summary>
        <value><span data-ttu-id="014c2-590">マウスの第 1 拡張ボタンの状態。</span><span class="sxs-lookup"><span data-stu-id="014c2-590">The state of the first extended mouse button.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="014c2-591">次の例では、の<xref:System.Windows.Input.Mouse.XButton1%2A>状態が<xref:System.Windows.Input.MouseButtonState>列挙値<xref:System.Windows.Input.MouseButtonState.Pressed>と等しいかどうかをチェックすることによって、最初の拡張マウスボタンが押されているかどうかを確認する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="014c2-591">The following example shows how to determine whether the first extended mouse button is pressed by checking if the state of <xref:System.Windows.Input.Mouse.XButton1%2A> is equal to the <xref:System.Windows.Input.MouseButtonState> enumeration value <xref:System.Windows.Input.MouseButtonState.Pressed>.</span></span>  <span data-ttu-id="014c2-592">このボタンが押されている場合、サンプルの表示要素を更新するメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-592">If the button is pressed, a method is called which updates display elements in the sample.</span></span>  
  
 [!code-csharp[MouseRelatedSnippets#MouseRelatedSnippetsGetX1ButtonMouse](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseRelatedSnippets/CSharp/Window1.xaml.cs#mouserelatedsnippetsgetx1buttonmouse)]
 [!code-vb[MouseRelatedSnippets#MouseRelatedSnippetsGetX1ButtonMouse](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseRelatedSnippets/visualbasic/window1.xaml.vb#mouserelatedsnippetsgetx1buttonmouse)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseButtonEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="XButton2">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.MouseButtonState XButton2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.MouseButtonState XButton2" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.XButton2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property XButton2 As MouseButtonState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::MouseButtonState XButton2 { System::Windows::Input::MouseButtonState get(); };" />
      <MemberSignature Language="F#" Value="member this.XButton2 : System.Windows.Input.MouseButtonState" Usage="System.Windows.Input.Mouse.XButton2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="014c2-593">マウスの第 2 拡張ボタンの状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="014c2-593">Gets the state of the second extended button.</span></span></summary>
        <value><span data-ttu-id="014c2-594">マウスの第 2 拡張ボタンの状態。</span><span class="sxs-lookup"><span data-stu-id="014c2-594">The state of the second extended mouse button.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="014c2-595">次の例では、の<xref:System.Windows.Input.Mouse.XButton2%2A>状態が<xref:System.Windows.Input.MouseButtonState>列挙値<xref:System.Windows.Input.MouseButtonState.Pressed>と等しいかどうかをチェックして、2番目の拡張マウスボタンが押されているかどうかを確認する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="014c2-595">The following example shows how to determine whether the second extended mouse button is pressed by checking if the state of <xref:System.Windows.Input.Mouse.XButton2%2A> is equal to the <xref:System.Windows.Input.MouseButtonState> enumeration value <xref:System.Windows.Input.MouseButtonState.Pressed>.</span></span>  <span data-ttu-id="014c2-596">このボタンが押されている場合、サンプルの表示要素を更新するメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="014c2-596">If the button is pressed, a method is called which updates display elements in the sample.</span></span>  
  
 [!code-csharp[MouseRelatedSnippets#MouseRelatedSnippetsGetX2ButtonMouse](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseRelatedSnippets/CSharp/Window1.xaml.cs#mouserelatedsnippetsgetx2buttonmouse)]
 [!code-vb[MouseRelatedSnippets#MouseRelatedSnippetsGetX2ButtonMouse](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseRelatedSnippets/visualbasic/window1.xaml.vb#mouserelatedsnippetsgetx2buttonmouse)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseButtonEventArgs" />
      </Docs>
    </Member>
  </Members>
</Type>
