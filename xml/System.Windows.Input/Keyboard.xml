<Type Name="Keyboard" FullName="System.Windows.Input.Keyboard">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f86c9bedb646354cdd97f445a1426be77f4b45c1" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65004685" /></Metadata><TypeSignature Language="C#" Value="public static class Keyboard" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Keyboard extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Keyboard" />
  <TypeSignature Language="VB.NET" Value="Public Class Keyboard" />
  <TypeSignature Language="C++ CLI" Value="public ref class Keyboard abstract sealed" />
  <TypeSignature Language="F#" Value="type Keyboard = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e8684-101">キーボード デバイスを表します。</span><span class="sxs-lookup"><span data-stu-id="e8684-101">Represents the keyboard device.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-102">クラス<xref:System.Windows.Input.Keyboard>には、キーボードの状態に関する情報を提供するキーボード関連のイベント、メソッド、およびプロパティが用意されています。</span><span class="sxs-lookup"><span data-stu-id="e8684-102">The <xref:System.Windows.Input.Keyboard> class provides keyboard-related events, methods, and properties that provide information regarding the state of the keyboard.</span></span>  
  
 <span data-ttu-id="e8684-103">を添付イベントとし<xref:System.Windows.Input.Keyboard>て定義する各イベントは、基本要素クラス<xref:System.Windows.UIElement>および<xref:System.Windows.ContentElement>新しいルーティングイベントによっても再公開されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-103">Each of the events that <xref:System.Windows.Input.Keyboard> defines as an attached event is also re-exposed by the base element classes <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> as a new routed event.</span></span> <span data-ttu-id="e8684-104">一般に、 <xref:System.Windows.UIElement> <xref:System.Windows.Input.Keyboard>イベントを使用するのではなく、と<xref:System.Windows.ContentElement>でアプリケーションのキーボードイベントを処理する方が便利です。</span><span class="sxs-lookup"><span data-stu-id="e8684-104">Generally, it is more convenient to handle keyboard events for an application on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>, rather than using the <xref:System.Windows.Input.Keyboard> events.</span></span> <span data-ttu-id="e8684-105">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-105">For details, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e8684-106">要素がキーボード入力を受け取るには、要素にフォーカスを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e8684-106">In order for an element to receive keyboard input, the element must be focusable.</span></span> <span data-ttu-id="e8684-107">既定<xref:System.Windows.UIElement>では、ほとんどの派生オブジェクトはフォーカスを設定できます。</span><span class="sxs-lookup"><span data-stu-id="e8684-107">Most <xref:System.Windows.UIElement> derived objects are focusable by default.</span></span> <span data-ttu-id="e8684-108">それ以外の場合は、要素にフォーカスを<xref:System.Windows.UIElement.Focusable%2A>設定するには、基本`true`要素のプロパティをに設定します。</span><span class="sxs-lookup"><span data-stu-id="e8684-108">Otherwise, to make an element focusable, set the <xref:System.Windows.UIElement.Focusable%2A> property on the base element to `true`.</span></span>  <span data-ttu-id="e8684-109">基本要素の詳細については、「[基本要素の概要](~/docs/framework/wpf/advanced/base-elements-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-109">For more information on the base elements, see [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).</span></span>  
  
 <span data-ttu-id="e8684-110"><xref:System.Windows.Controls.Panel>クラス ( <xref:System.Windows.Controls.StackPanel>や<xref:System.Windows.Controls.Canvas>など) では、の<xref:System.Windows.UIElement.Focusable%2A>既定値が`false`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-110"><xref:System.Windows.Controls.Panel> classes, such as <xref:System.Windows.Controls.StackPanel> and <xref:System.Windows.Controls.Canvas>, set the default value of <xref:System.Windows.UIElement.Focusable%2A> to `false`.</span></span> <span data-ttu-id="e8684-111">そのため、これらのオブジェクトでキーボードフォーカスを<xref:System.Windows.UIElement.Focusable%2A>取得するには`true`、をに設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e8684-111">Therefore, for these objects to obtain keyboard focus, <xref:System.Windows.UIElement.Focusable%2A> must be set to `true`.</span></span>  
  
 <span data-ttu-id="e8684-112">キーボードフォーカスは、キーボード入力を受け取るオブジェクトを参照します。</span><span class="sxs-lookup"><span data-stu-id="e8684-112">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="e8684-113">キーボードフォーカスを持つ要素が<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>に`true`設定されています。</span><span class="sxs-lookup"><span data-stu-id="e8684-113">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="e8684-114">キーボードフォーカスを持つ要素は、デスクトップ全体に1つだけ存在できます。</span><span class="sxs-lookup"><span data-stu-id="e8684-114">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="e8684-115">論理フォーカスとは、フォーカスがあるフォーカススコープ内のオブジェクトを指します。</span><span class="sxs-lookup"><span data-stu-id="e8684-115">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="e8684-116">フォーカス、キーボードフォーカス、および論理フォーカスの詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」と「[フォーカスの概要](~/docs/framework/wpf/advanced/focus-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-116">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="e8684-117"><xref:System.Windows.Input.Keyboard>クラスの静的メンバーは、呼び出し元のスレッド<xref:System.Windows.Input.KeyboardDevice>のプライマリに委任されるため、必ずしもスレッドセーフであるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="e8684-117">The static members of the <xref:System.Windows.Input.Keyboard> class delegate to the primary <xref:System.Windows.Input.KeyboardDevice> of the calling thread, so they are not necessarily thread-safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8684-118">次の例は、 <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>メソッドを使用して、キーが切り替えられた状態かどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e8684-118">The following example shows how to use the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method to determine if a key is in the toggled state.</span></span> <span data-ttu-id="e8684-119"><xref:System.Windows.Input.Key> に<xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>渡されたが切り替えられると、ボタンの背景が変わります。</span><span class="sxs-lookup"><span data-stu-id="e8684-119">If the <xref:System.Windows.Input.Key> passed to <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> is toggled, the background of a button is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardIsToggled](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardistoggled)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardIsToggled](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardistoggled)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
    <altmember cref="T:System.Windows.Input.KeyEventArgs" />
  </Docs>
  <Members>
    <Member MemberName="AddGotKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddGotKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddGotKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddGotKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddGotKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddGotKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddGotKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-120">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-120">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-121">追加するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-121">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="e8684-122"><see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="e8684-122">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-123">このメソッドは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>添付イベントのコードアクセスおよび属性処理に対して、添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-123">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKeyboardInputProviderAcquireFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddKeyboardInputProviderAcquireFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddKeyboardInputProviderAcquireFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddKeyboardInputProviderAcquireFocusHandler (element As DependencyObject, handler As KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddKeyboardInputProviderAcquireFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardInputProviderAcquireFocusEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddKeyboardInputProviderAcquireFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddKeyboardInputProviderAcquireFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-124">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-124">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-125">追加するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-125">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="e8684-126"><see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="e8684-126">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-127">このメソッドは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] <xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType>添付イベントのコードアクセスおよび属性処理に対して、添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-127">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKeyDownHandler">
      <MemberSignature Language="C#" Value="public static void AddKeyDownHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddKeyDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddKeyDownHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddKeyDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddKeyDownHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddKeyDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-128">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-128">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-129">追加するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-129">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="e8684-130"><see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="e8684-130">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-131">このメソッドは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>添付イベントのコードアクセスおよび属性処理に対して、添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-131">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKeyUpHandler">
      <MemberSignature Language="C#" Value="public static void AddKeyUpHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddKeyUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddKeyUpHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddKeyUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddKeyUpHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddKeyUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-132">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-132">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-133">追加するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-133">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="e8684-134"><see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="e8684-134">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-135">このメソッドは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>添付イベントのコードアクセスおよび属性処理に対して、添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-135">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLostKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddLostKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddLostKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddLostKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddLostKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddLostKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddLostKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-136">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-136">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-137">追加するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-137">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="e8684-138"><see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="e8684-138">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-139">このメソッドは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>添付イベントのコードアクセスおよび属性処理に対して、添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-139">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewGotKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewGotKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewGotKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewGotKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewGotKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewGotKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewGotKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-140">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-140">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-141">追加するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-141">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="e8684-142"><see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="e8684-142">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-143">このメソッドは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>添付イベントのコードアクセスおよび属性処理に対して、添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-143">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewKeyboardInputProviderAcquireFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewKeyboardInputProviderAcquireFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewKeyboardInputProviderAcquireFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewKeyboardInputProviderAcquireFocusHandler (element As DependencyObject, handler As KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewKeyboardInputProviderAcquireFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardInputProviderAcquireFocusEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewKeyboardInputProviderAcquireFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewKeyboardInputProviderAcquireFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-144">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-144">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-145">追加するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-145">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="e8684-146"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="e8684-146">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-147">このメソッドは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] <xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType>添付イベントのコードアクセスおよび属性処理に対して、添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-147">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewKeyDownHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewKeyDownHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewKeyDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewKeyDownHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewKeyDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewKeyDownHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewKeyDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-148">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-148">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-149">追加するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-149">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="e8684-150"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="e8684-150">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-151">このメソッドは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>添付イベントのコードアクセスおよび属性処理に対して、添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-151">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewKeyUpHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewKeyUpHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewKeyUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewKeyUpHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewKeyUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewKeyUpHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewKeyUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-152">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-152">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-153">追加するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-153">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="e8684-154"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="e8684-154">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-155">このメソッドは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>添付イベントのコードアクセスおよび属性処理に対して、添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-155">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewLostKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewLostKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewLostKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewLostKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewLostKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewLostKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewLostKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-156">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-156">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-157">追加するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-157">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="e8684-158"><see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> 添付イベントのハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="e8684-158">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-159">このメソッドは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>添付イベントのコードアクセスおよび属性処理に対して、添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-159">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearFocus">
      <MemberSignature Language="C#" Value="public static void ClearFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.ClearFocus" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearFocus();" />
      <MemberSignature Language="F#" Value="static member ClearFocus : unit -&gt; unit" Usage="System.Windows.Input.Keyboard.ClearFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e8684-160">フォーカスをクリアします。</span><span class="sxs-lookup"><span data-stu-id="e8684-160">Clears focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-161">フォーカスが Win32 ウィンドウ内にある場合、WPF は<xref:System.Windows.Input.Keyboard.ClearFocus%2A>メニューが閉じられると、フォーカスの復元時にメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e8684-161">If focus is within a Win32 window, WPF calls the <xref:System.Windows.Input.Keyboard.ClearFocus%2A> method on restoration of focus when a menu is closed.</span></span>  
  
 <span data-ttu-id="e8684-162">メニューモードを終了すると、ホストされている子 HWND に Win32 フォーカスが戻り、WPF フォーカスを持つ要素は存在しません。</span><span class="sxs-lookup"><span data-stu-id="e8684-162">When leaving menu mode, Win32 focus is returned to the hosted child HWND, and no element has WPF focus.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRestoreFocusMode">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RestoreFocusMode DefaultRestoreFocusMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.RestoreFocusMode DefaultRestoreFocusMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Keyboard.DefaultRestoreFocusMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultRestoreFocusMode As RestoreFocusMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RestoreFocusMode DefaultRestoreFocusMode { System::Windows::Input::RestoreFocusMode get(); void set(System::Windows::Input::RestoreFocusMode value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRestoreFocusMode : System.Windows.Input.RestoreFocusMode with get, set" Usage="System.Windows.Input.Keyboard.DefaultRestoreFocusMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RestoreFocusMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8684-163">フォーカスを復元するときの [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] の動作を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="e8684-163">Gets or sets the behavior of [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] when restoring focus.</span></span></summary>
        <value><span data-ttu-id="e8684-164">フォーカスを復元するときの [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] の動作を指定する列挙値。</span><span class="sxs-lookup"><span data-stu-id="e8684-164">An enumeration value that specifies the behavior of [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] when restoring focus.</span></span> <span data-ttu-id="e8684-165">既定値は、<see cref="F:System.Windows.Input.RestoreFocusMode.Auto" /> です。</span><span class="sxs-lookup"><span data-stu-id="e8684-165">The default in <see cref="F:System.Windows.Input.RestoreFocusMode.Auto" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public static System.Windows.IInputElement Focus (System.Windows.IInputElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.IInputElement Focus(class System.Windows.IInputElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Focus (element As IInputElement) As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::IInputElement ^ Focus(System::Windows::IInputElement ^ element);" />
      <MemberSignature Language="F#" Value="static member Focus : System.Windows.IInputElement -&gt; System.Windows.IInputElement" Usage="System.Windows.Input.Keyboard.Focus element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-166">キーボード フォーカスの設定対象の要素。</span><span class="sxs-lookup"><span data-stu-id="e8684-166">The element on which to set keyboard focus.</span></span></param>
        <summary><span data-ttu-id="e8684-167">指定した要素にキーボード フォーカスを設定します。</span><span class="sxs-lookup"><span data-stu-id="e8684-167">Sets keyboard focus on the specified element.</span></span></summary>
        <returns><span data-ttu-id="e8684-168">キーボード フォーカスを持つ要素。</span><span class="sxs-lookup"><span data-stu-id="e8684-168">The element with keyboard focus.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-169">要素がキーボード入力を受け取るには、要素にフォーカスを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e8684-169">For an element to receive keyboard input, the element must be focusable.</span></span> <span data-ttu-id="e8684-170">要素にフォーカスを設定できるように<xref:System.Windows.UIElement.Focusable%2A>するには、基本要素`true`のプロパティをに設定します。</span><span class="sxs-lookup"><span data-stu-id="e8684-170">To make an element focusable, set the <xref:System.Windows.UIElement.Focusable%2A> property on the base element to `true`.</span></span>  <span data-ttu-id="e8684-171">基本要素の詳細については、「[基本要素の概要](~/docs/framework/wpf/advanced/base-elements-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-171">For more information on the base elements, see [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).</span></span>  <span data-ttu-id="e8684-172"><xref:System.Windows.Controls.Panel>`false` <xref:System.Windows.UIElement.Focusable%2A> <xref:System.Windows.UIElement.Focusable%2A>やなどのクラスは、の既定値をに設定します。したがって、これらのオブジェクトでキーボードフォーカスを取得する`true`には、をに設定する必要があります。 <xref:System.Windows.Controls.Canvas> <xref:System.Windows.Controls.StackPanel></span><span class="sxs-lookup"><span data-stu-id="e8684-172"><xref:System.Windows.Controls.Panel> classes, such as <xref:System.Windows.Controls.StackPanel> and <xref:System.Windows.Controls.Canvas>, set the default value of <xref:System.Windows.UIElement.Focusable%2A> to `false`; therefore, for these objects to obtain keyboard focus, <xref:System.Windows.UIElement.Focusable%2A> must be set to `true`.</span></span>  
  
 <span data-ttu-id="e8684-173">キーボードフォーカスは、キーボード入力を受け取るオブジェクトを参照します。</span><span class="sxs-lookup"><span data-stu-id="e8684-173">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="e8684-174">キーボードフォーカスを持つ要素が<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>に`true`設定されています。</span><span class="sxs-lookup"><span data-stu-id="e8684-174">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="e8684-175">キーボードフォーカスを持つ要素は、デスクトップ全体に1つだけ存在できます。</span><span class="sxs-lookup"><span data-stu-id="e8684-175">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="e8684-176">論理フォーカスとは、フォーカスがあるフォーカススコープ内のオブジェクトを指します。</span><span class="sxs-lookup"><span data-stu-id="e8684-176">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="e8684-177">フォーカス、キーボードフォーカス、および論理フォーカスの詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」と「[フォーカスの概要](~/docs/framework/wpf/advanced/focus-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-177">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="e8684-178">キーボードフォーカスを持つ要素には、要素が属するフォーカス範囲の論理フォーカスもあります。</span><span class="sxs-lookup"><span data-stu-id="e8684-178">An element with keyboard focus also has logical focus for the focus scope the element belongs to.</span></span>  <span data-ttu-id="e8684-179">論理フォーカスを持つ要素は、キーボードフォーカスを持つことができます。</span><span class="sxs-lookup"><span data-stu-id="e8684-179">An element with logical focus may or may not have keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8684-180">次の例は、 <xref:System.Windows.FrameworkElement.Loaded> <xref:System.Windows.Controls.Button>にキーボードフォーカスを設定するイベントハンドラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="e8684-180">The following example shows a <xref:System.Windows.FrameworkElement.Loaded> event handler that sets keyboard focus on a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[focussample#FocusSampleSetFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplesetfocus)]
 [!code-vb[focussample#FocusSampleSetFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplesetfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusedElement">
      <MemberSignature Language="C#" Value="public static System.Windows.IInputElement FocusedElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.IInputElement FocusedElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Keyboard.FocusedElement" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property FocusedElement As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::IInputElement ^ FocusedElement { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FocusedElement : System.Windows.IInputElement" Usage="System.Windows.Input.Keyboard.FocusedElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8684-181">キーボード フォーカスを持つ要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="e8684-181">Gets the element that has keyboard focus.</span></span></summary>
        <value><span data-ttu-id="e8684-182">フォーカスがある要素。</span><span class="sxs-lookup"><span data-stu-id="e8684-182">The focused element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-183">キーボードフォーカスは、キーボード入力を受け取るオブジェクトを参照します。</span><span class="sxs-lookup"><span data-stu-id="e8684-183">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="e8684-184">キーボードフォーカスを持つ要素が<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>に`true`設定されています。</span><span class="sxs-lookup"><span data-stu-id="e8684-184">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="e8684-185">キーボードフォーカスを持つ要素は、デスクトップ全体に1つだけ存在できます。</span><span class="sxs-lookup"><span data-stu-id="e8684-185">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="e8684-186">論理フォーカスとは、フォーカスがあるフォーカススコープ内のオブジェクトを指します。</span><span class="sxs-lookup"><span data-stu-id="e8684-186">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="e8684-187">フォーカス、キーボードフォーカス、および論理フォーカスの詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」と「[フォーカスの概要](~/docs/framework/wpf/advanced/focus-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-187">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="e8684-188">キーボードフォーカスを持つ要素には、要素が属するフォーカス範囲の論理フォーカスもあります。</span><span class="sxs-lookup"><span data-stu-id="e8684-188">An element with keyboard focus also has logical focus for the focus scope the element belongs to.</span></span>  <span data-ttu-id="e8684-189">論理フォーカスを持つ要素は、キーボードフォーカスを持つことができます。</span><span class="sxs-lookup"><span data-stu-id="e8684-189">An element with logical focus may or may not have keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8684-190">次の例では、キーボードフォーカスを持つ要素を取得し<xref:System.Windows.Controls.Control>、それをにキャストします。</span><span class="sxs-lookup"><span data-stu-id="e8684-190">The following example gets the element with keyboard focus and casts it to a <xref:System.Windows.Controls.Control>.</span></span>  <span data-ttu-id="e8684-191">キーボードフォーカスを持つ要素が<xref:System.Windows.Controls.Control>である場合、要素の背景が変更されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-191">If the element with keyboard focus is a <xref:System.Windows.Controls.Control>, the background of the element is changed.</span></span>  
  
 [!code-csharp[focussample#GetKeyboardFocusedElement](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#getkeyboardfocusedelement)]
 [!code-vb[focussample#GetKeyboardFocusedElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#getkeyboardfocusedelement)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeyStates">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.KeyStates GetKeyStates (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Input.KeyStates GetKeyStates(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Input::KeyStates GetKeyStates(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="static member GetKeyStates : System.Windows.Input.Key -&gt; System.Windows.Input.KeyStates" Usage="System.Windows.Input.Keyboard.GetKeyStates key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyStates</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="e8684-192">指定されたキー。</span><span class="sxs-lookup"><span data-stu-id="e8684-192">The specified key.</span></span></param>
        <summary><span data-ttu-id="e8684-193">指定したキーの状態のセットを取得します。</span><span class="sxs-lookup"><span data-stu-id="e8684-193">Gets the set of key states for the specified key.</span></span></summary>
        <returns><span data-ttu-id="e8684-194"><see cref="T:System.Windows.Input.KeyStates" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="e8684-194">A bitwise combination of the <see cref="T:System.Windows.Input.KeyStates" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-195"><xref:System.Windows.Input.KeyStates>はビットフィールドの列挙体です。そのため、1つのキーが複数の状態になる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e8684-195"><xref:System.Windows.Input.KeyStates> is a bit field enumeration; therefore, it is possible for a key to be in multiple states.</span></span>  <span data-ttu-id="e8684-196">たとえば、キーが押された状態であったり、切り替えられた状態であったりする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e8684-196">For example, a key could be in the pressed state as well as in the toggled state.</span></span>  <span data-ttu-id="e8684-197">ビット比較演算を使用して、キーが含まれている正確な状態または状態を判断します。</span><span class="sxs-lookup"><span data-stu-id="e8684-197">Use bit comparison operations to determine the exact state or states the key is in.</span></span>  
  
 <span data-ttu-id="e8684-198">クラス<xref:System.Windows.Input.Keyboard>には、キー状態情報を取得するために使用できるいくつかの静的メソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="e8684-198">The <xref:System.Windows.Input.Keyboard> class provides a number of static methods which can also be used to obtain key state information.</span></span>  <span data-ttu-id="e8684-199">メソッドには<xref:System.Windows.Input.Keyboard.IsKeyDown%2A>、 <xref:System.Windows.Input.Keyboard.IsKeyUp%2A>、、および<xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>があります。</span><span class="sxs-lookup"><span data-stu-id="e8684-199">The methods are: <xref:System.Windows.Input.Keyboard.IsKeyDown%2A>, <xref:System.Windows.Input.Keyboard.IsKeyUp%2A>, and <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8684-200">次の例は、 <xref:System.Windows.Input.Keyboard.GetKeyStates%2A>メソッドを使用して、 <xref:System.Windows.Input.Key.Return>キーが<xref:System.Windows.Input.KeyStates.Down>状態であるかどうかを確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e8684-200">The following example shows how to use the <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> method to determine if the <xref:System.Windows.Input.Key.Return> key is in the <xref:System.Windows.Input.KeyStates.Down> state.</span></span>  <span data-ttu-id="e8684-201">ビットと演算を使用して、から<xref:System.Windows.Input.KeyStates> <xref:System.Windows.Input.Keyboard.GetKeyStates%2A>返されたと<xref:System.Windows.Input.Key.Down>の状態を比較します。</span><span class="sxs-lookup"><span data-stu-id="e8684-201">A bit AND operation is used to compare the <xref:System.Windows.Input.KeyStates> returned from <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> and the <xref:System.Windows.Input.Key.Down> state.</span></span> <span data-ttu-id="e8684-202">キーが押されている場合は、の<xref:System.Windows.Controls.Button>背景が変更されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-202">If the key is down, the background of a <xref:System.Windows.Controls.Button> is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardGetKeyStates](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardgetkeystates)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardGetKeyStates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardgetkeystates)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
        <altmember cref="P:System.Windows.Input.KeyEventArgs.KeyStates" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" />
      <MemberSignature Language="F#" Value="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" Usage="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8684-203">要素がキーボード フォーカスを受け取ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="e8684-203">Occurs when an element receives keyboard focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-204">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="e8684-204">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="e8684-205">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="e8684-205">implements attached events as routed events.</span></span> <span data-ttu-id="e8684-206">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-206">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="e8684-207">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8684-207">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="e8684-208">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-208">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="e8684-209">キーボードフォーカスは、キーボード入力を受け取るオブジェクトを参照します。</span><span class="sxs-lookup"><span data-stu-id="e8684-209">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="e8684-210">キーボードフォーカスを持つ要素が<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>に`true`設定されています。</span><span class="sxs-lookup"><span data-stu-id="e8684-210">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="e8684-211">キーボードフォーカスを持つ要素は、デスクトップ全体に1つだけ存在できます。</span><span class="sxs-lookup"><span data-stu-id="e8684-211">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="e8684-212">論理フォーカスとは、フォーカスがあるフォーカススコープ内のオブジェクトを指します。</span><span class="sxs-lookup"><span data-stu-id="e8684-212">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="e8684-213">フォーカス、キーボードフォーカス、および論理フォーカスの詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」と「[フォーカスの概要](~/docs/framework/wpf/advanced/focus-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-213">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="e8684-214"><xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus>イベントまたはイベントが処理されると、キーボード<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus>フォーカスが変わります。</span><span class="sxs-lookup"><span data-stu-id="e8684-214">If the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> event or the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> event is handled, keyboard focus does change.</span></span>  
  
<a name="routedEventInfo_GotKeyboardFocusEvent"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e8684-215">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e8684-215">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e8684-216">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="e8684-216">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.GotKeyboardFocusEvent>|  
|<span data-ttu-id="e8684-217">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e8684-217">Routing strategy</span></span>|<span data-ttu-id="e8684-218">バブリング</span><span class="sxs-lookup"><span data-stu-id="e8684-218">Bubbling</span></span>|  
|<span data-ttu-id="e8684-219">Delegate</span><span class="sxs-lookup"><span data-stu-id="e8684-219">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="e8684-220">対応するトンネリングイベントは<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="e8684-220">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8684-221">次の例では<xref:System.Windows.Controls.TextBox> 、を作成し、イベント<xref:System.Windows.UIElement.GotKeyboardFocus>と<xref:System.Windows.Input.Keyboard.LostKeyboardFocus>イベントのイベントハンドラーをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="e8684-221">The following example creates a <xref:System.Windows.Controls.TextBox> and attaches event handlers for the <xref:System.Windows.UIElement.GotKeyboardFocus> event and the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus> event.</span></span>  <span data-ttu-id="e8684-222">が<xref:System.Windows.Controls.TextBox>キーボードフォーカスを取得すると、背景色が変更され、 <xref:System.Windows.Controls.TextBox>のテキストがクリアされます。</span><span class="sxs-lookup"><span data-stu-id="e8684-222">When the <xref:System.Windows.Controls.TextBox> obtains keyboard focus, the background color is changed and the text of the <xref:System.Windows.Controls.TextBox> is cleared.</span></span>  <span data-ttu-id="e8684-223">が<xref:System.Windows.Controls.TextBlock>キーボードフォーカスを失った場合、背景色が変更され、サンプルで使用される変数をリセットするメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-223">When the <xref:System.Windows.Controls.TextBlock> loses keyboard focus, the background color is changed and a method is called which resets variables used in the sample.</span></span>  
  
 [!code-xml[keyboardsample#KeyboardSampleXAMLHandlerHookup](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml#keyboardsamplexamlhandlerhookup)]  
  
 [!code-csharp[keyboardsample#KeyboardSampleGotFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml.cs#keyboardsamplegotfocus)]
 [!code-vb[keyboardsample#KeyboardSampleGotFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyboardSample/visualbasic/window1.xaml.vb#keyboardsamplegotfocus)]  
  
 [!code-csharp[keyboardsample#KeyboardSampleLostFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml.cs#keyboardsamplelostfocus)]
 [!code-vb[keyboardsample#KeyboardSampleLostFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyboardSample/visualbasic/window1.xaml.vb#keyboardsamplelostfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8684-224"><see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-224">Identifies the <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-225">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-225">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="e8684-226">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e8684-226">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="e8684-227">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-227">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyDown">
      <MemberSignature Language="C#" Value="public static bool IsKeyDown (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyDown(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.IsKeyDown(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKeyDown(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="static member IsKeyDown : System.Windows.Input.Key -&gt; bool" Usage="System.Windows.Input.Keyboard.IsKeyDown key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="e8684-228">指定されたキー。</span><span class="sxs-lookup"><span data-stu-id="e8684-228">The specified key.</span></span></param>
        <summary><span data-ttu-id="e8684-229">指定したキーが押されたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="e8684-229">Determines whether the specified key is pressed.</span></span></summary>
        <returns><span data-ttu-id="e8684-230"><paramref name="key" /> が押された状態の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-230"><see langword="true" /> if <paramref name="key" /> is in the down state; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-231"><xref:System.Windows.Input.Keyboard.GetKeyStates%2A>メソッドを使用すると、特定のキーの状態のセットを確認できます。</span><span class="sxs-lookup"><span data-stu-id="e8684-231">The <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> method can be used to determine the set of states of a specific key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8684-232">次の例は、 <xref:System.Windows.Input.Keyboard.IsKeyDown%2A>メソッドを使用して特定のキーの状態を確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e8684-232">The following example shows how to use the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method to determine the state of a specific key.</span></span>  <span data-ttu-id="e8684-233">キーが<xref:System.Windows.Input.Keyboard.IsKeyDown%2A>メソッドに渡されます。 <xref:System.Windows.Input.Key.Return></span><span class="sxs-lookup"><span data-stu-id="e8684-233">The <xref:System.Windows.Input.Key.Return> key is passed to the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method.</span></span>  <span data-ttu-id="e8684-234">メソッドがを返し`true`た場合、 <xref:System.Windows.Controls.Button>の背景が変更されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-234">If the method returns `true`, the background of a <xref:System.Windows.Controls.Button> is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardIsKeyDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardiskeydown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardIsKeyDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardiskeydown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
        <altmember cref="P:System.Windows.Input.KeyEventArgs.IsDown" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyToggled">
      <MemberSignature Language="C#" Value="public static bool IsKeyToggled (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyToggled(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.IsKeyToggled(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKeyToggled(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="static member IsKeyToggled : System.Windows.Input.Key -&gt; bool" Usage="System.Windows.Input.Keyboard.IsKeyToggled key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="e8684-235">指定されたキー。</span><span class="sxs-lookup"><span data-stu-id="e8684-235">The specified key.</span></span></param>
        <summary><span data-ttu-id="e8684-236">指定したキーが切り替えられたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="e8684-236">Determines whether the specified key is toggled.</span></span></summary>
        <returns><span data-ttu-id="e8684-237"><paramref name="key" /> が切り替わった状態の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-237"><see langword="true" /> if <paramref name="key" /> is in the toggled state; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-238"><xref:System.Windows.Input.Keyboard.GetKeyStates%2A>メソッドを使用すると、特定のキーの状態のセットを確認できます。</span><span class="sxs-lookup"><span data-stu-id="e8684-238">The <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> method can be used to determine the set of states of a specific key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8684-239">次の例は、 <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>メソッドを使用して特定のキーの状態を確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e8684-239">The following example shows how to use the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method to determine the state of a specific key.</span></span> <span data-ttu-id="e8684-240">キーが<xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>メソッドに渡されます。 <xref:System.Windows.Input.Key.Return></span><span class="sxs-lookup"><span data-stu-id="e8684-240">The <xref:System.Windows.Input.Key.Return> key is passed to the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method.</span></span>  <span data-ttu-id="e8684-241">メソッドがを返し`true`た場合、 <xref:System.Windows.Controls.Button>の背景が変更されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-241">If the method returns `true`, then the background of a <xref:System.Windows.Controls.Button> is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardIsToggled](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardistoggled)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardIsToggled](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardistoggled)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
        <altmember cref="P:System.Windows.Input.KeyEventArgs.IsToggled" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyUp">
      <MemberSignature Language="C#" Value="public static bool IsKeyUp (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyUp(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.IsKeyUp(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKeyUp(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="static member IsKeyUp : System.Windows.Input.Key -&gt; bool" Usage="System.Windows.Input.Keyboard.IsKeyUp key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="e8684-242">チェックするキー。</span><span class="sxs-lookup"><span data-stu-id="e8684-242">The key to check.</span></span></param>
        <summary><span data-ttu-id="e8684-243">指定したキーが離されたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="e8684-243">Determines whether the specified key is released.</span></span></summary>
        <returns><span data-ttu-id="e8684-244"><paramref name="key" /> が離された状態の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-244"><see langword="true" /> if <paramref name="key" /> is in the up state; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-245"><xref:System.Windows.Input.Keyboard.GetKeyStates%2A>メソッドを使用すると、特定のキーの状態のセットを確認できます。</span><span class="sxs-lookup"><span data-stu-id="e8684-245">The <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> method can be used to determine the set of states of a specific key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8684-246">次の例は、 <xref:System.Windows.Input.Keyboard.IsKeyUp%2A>メソッドを使用して特定のキーの状態を確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e8684-246">The following example shows how to use the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method to determine the state of a specific key.</span></span>  <span data-ttu-id="e8684-247">キーが<xref:System.Windows.Input.Keyboard.IsKeyUp%2A>メソッドに渡されます。 <xref:System.Windows.Input.Key.Return></span><span class="sxs-lookup"><span data-stu-id="e8684-247">The <xref:System.Windows.Input.Key.Return> key is passed to the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method.</span></span>  <span data-ttu-id="e8684-248">メソッドがを返し`true`た場合、 <xref:System.Windows.Controls.Button>の背景が変更されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-248">If the method returns `true`, then the background of a <xref:System.Windows.Controls.Button> is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardIsKeyUp](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardiskeyup)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardIsKeyUp](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardiskeyup)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
        <altmember cref="P:System.Windows.Input.KeyEventArgs.IsUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardInputProviderAcquireFocus">
      <MemberSignature Language="C#" Value="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" />
      <MemberSignature Language="VB.NET" Value="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="F#" Value="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" Usage="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8684-249">キーボード入力プロバイダーがフォーカスを取得するときに発生します。</span><span class="sxs-lookup"><span data-stu-id="e8684-249">Occurs when the keyboard input provider acquires focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-250">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="e8684-250">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="e8684-251">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="e8684-251">implements attached events as routed events.</span></span> <span data-ttu-id="e8684-252">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-252">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="e8684-253">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8684-253">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="e8684-254">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-254">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_KeyboardInputProviderAcquireFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e8684-255">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e8684-255">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e8684-256">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="e8684-256">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocusEvent>|  
|<span data-ttu-id="e8684-257">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e8684-257">Routing strategy</span></span>|<span data-ttu-id="e8684-258">バブリング</span><span class="sxs-lookup"><span data-stu-id="e8684-258">Bubbling</span></span>|  
|<span data-ttu-id="e8684-259">Delegate</span><span class="sxs-lookup"><span data-stu-id="e8684-259">Delegate</span></span>|<xref:System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler>|  
  
-   <span data-ttu-id="e8684-260">対応するトンネリングイベントは<xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus>です。</span><span class="sxs-lookup"><span data-stu-id="e8684-260">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardInputProviderAcquireFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyboardInputProviderAcquireFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyboardInputProviderAcquireFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyboardInputProviderAcquireFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyboardInputProviderAcquireFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyboardInputProviderAcquireFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8684-261"><see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-261">Identifies the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-262">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-262">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="e8684-263">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e8684-263">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="e8684-264">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-264">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="see AddKeyDownHandler, and RemoveKeyDownHandler" />
      <MemberSignature Language="ILAsm" Value="see AddKeyDownHandler, and RemoveKeyDownHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.KeyDown" />
      <MemberSignature Language="VB.NET" Value="see AddKeyDownHandler, and RemoveKeyDownHandler" />
      <MemberSignature Language="F#" Value="see AddKeyDownHandler, and RemoveKeyDownHandler" Usage="see AddKeyDownHandler, and RemoveKeyDownHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8684-265">キーボードのキーが押されると発生します。</span><span class="sxs-lookup"><span data-stu-id="e8684-265">Occurs when a key on the keyboard is pressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-266">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="e8684-266">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="e8684-267">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="e8684-267">implements attached events as routed events.</span></span> <span data-ttu-id="e8684-268">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-268">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="e8684-269">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8684-269">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="e8684-270">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-270">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e8684-271">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e8684-271">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e8684-272">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="e8684-272">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.KeyDownEvent>|  
|<span data-ttu-id="e8684-273">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e8684-273">Routing strategy</span></span>|<span data-ttu-id="e8684-274">バブリング</span><span class="sxs-lookup"><span data-stu-id="e8684-274">Bubbling</span></span>|  
|<span data-ttu-id="e8684-275">Delegate</span><span class="sxs-lookup"><span data-stu-id="e8684-275">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="e8684-276">対応するトンネリングイベントは<xref:System.Windows.Input.Keyboard.PreviewKeyDown>です。</span><span class="sxs-lookup"><span data-stu-id="e8684-276">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewKeyDown>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8684-277">次の例で<xref:System.Windows.Controls.TextBox>は、 <xref:System.Windows.UIElement.KeyDown>イベントのイベントハンドラーをアタッチするを作成します。</span><span class="sxs-lookup"><span data-stu-id="e8684-277">The following example creates <xref:System.Windows.Controls.TextBox> that attaches an event handler for the <xref:System.Windows.UIElement.KeyDown> event.</span></span>  <span data-ttu-id="e8684-278">が押されると、イベントハンドラーによっ<xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.TextBlock>て内のテキストがに表示されます。 <xref:System.Windows.Input.Key.Return></span><span class="sxs-lookup"><span data-stu-id="e8684-278">When the <xref:System.Windows.Input.Key.Return> is pressed, the event handler displays the text in the <xref:System.Windows.Controls.TextBox> in a <xref:System.Windows.Controls.TextBlock>.</span></span>  
  
 [!code-xml[keydown#KeyDownUI](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyDown/CSharp/Window1.xaml#keydownui)]  
  
 [!code-csharp[keydown#KeyDownSample](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyDown/CSharp/Window1.xaml.cs#keydownsample)]
 [!code-vb[keydown#KeyDownSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyDown/VisualBasic/Window1.xaml.vb#keydownsample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8684-279"><see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-279">Identifies the <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-280">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-280">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="e8684-281">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e8684-281">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="e8684-282">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-282">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="see AddKeyUpHandler, and RemoveKeyUpHandler" />
      <MemberSignature Language="ILAsm" Value="see AddKeyUpHandler, and RemoveKeyUpHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.KeyUp" />
      <MemberSignature Language="VB.NET" Value="see AddKeyUpHandler, and RemoveKeyUpHandler" />
      <MemberSignature Language="F#" Value="see AddKeyUpHandler, and RemoveKeyUpHandler" Usage="see AddKeyUpHandler, and RemoveKeyUpHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8684-283">キーボードのキーを離すと発生します。</span><span class="sxs-lookup"><span data-stu-id="e8684-283">Occurs when a key on the keyboard is released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-284">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="e8684-284">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="e8684-285">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="e8684-285">implements attached events as routed events.</span></span> <span data-ttu-id="e8684-286">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-286">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="e8684-287">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8684-287">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="e8684-288">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-288">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e8684-289">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e8684-289">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e8684-290">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="e8684-290">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.KeyUpEvent>|  
|<span data-ttu-id="e8684-291">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e8684-291">Routing strategy</span></span>|<span data-ttu-id="e8684-292">バブリング</span><span class="sxs-lookup"><span data-stu-id="e8684-292">Bubbling</span></span>|  
|<span data-ttu-id="e8684-293">Delegate</span><span class="sxs-lookup"><span data-stu-id="e8684-293">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="e8684-294">対応するトンネリングイベントは<xref:System.Windows.Input.Keyboard.PreviewKeyUp>です。</span><span class="sxs-lookup"><span data-stu-id="e8684-294">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewKeyUp>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8684-295"><see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-295">Identifies the <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-296">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-296">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="e8684-297">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e8684-297">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="e8684-298">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-298">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" />
      <MemberSignature Language="F#" Value="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" Usage="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8684-299">要素がキーボード フォーカスを失うと発生します。</span><span class="sxs-lookup"><span data-stu-id="e8684-299">Occurs when an element loses keyboard focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-300">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="e8684-300">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="e8684-301">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="e8684-301">implements attached events as routed events.</span></span> <span data-ttu-id="e8684-302">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-302">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="e8684-303">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8684-303">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="e8684-304">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-304">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="e8684-305">キーボードフォーカスは、キーボード入力を受け取るオブジェクトを参照します。</span><span class="sxs-lookup"><span data-stu-id="e8684-305">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="e8684-306">キーボードフォーカスを持つ要素が<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>に`true`設定されています。</span><span class="sxs-lookup"><span data-stu-id="e8684-306">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="e8684-307">キーボードフォーカスを持つ要素は、デスクトップ全体に1つだけ存在できます。</span><span class="sxs-lookup"><span data-stu-id="e8684-307">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="e8684-308">論理フォーカスとは、フォーカスがあるフォーカススコープ内のオブジェクトを指します。</span><span class="sxs-lookup"><span data-stu-id="e8684-308">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="e8684-309">フォーカス、キーボードフォーカス、および論理フォーカスの詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」と「[フォーカスの概要](~/docs/framework/wpf/advanced/focus-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-309">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="e8684-310"><xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus>イベントまたはイベントが処理された場合、キーボードフォーカス<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus>は変わりません。</span><span class="sxs-lookup"><span data-stu-id="e8684-310">If the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> event or the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> event is handled, keyboard focus does not change.</span></span>  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e8684-311">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e8684-311">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e8684-312">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="e8684-312">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.LostKeyboardFocusEvent>|  
|<span data-ttu-id="e8684-313">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e8684-313">Routing strategy</span></span>|<span data-ttu-id="e8684-314">バブリング</span><span class="sxs-lookup"><span data-stu-id="e8684-314">Bubbling</span></span>|  
|<span data-ttu-id="e8684-315">Delegate</span><span class="sxs-lookup"><span data-stu-id="e8684-315">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="e8684-316">対応するトンネリングイベントは<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="e8684-316">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8684-317">次の例では<xref:System.Windows.Controls.TextBox> 、を作成し、イベント<xref:System.Windows.UIElement.GotKeyboardFocus>と<xref:System.Windows.Input.Keyboard.LostKeyboardFocus>イベントのイベントハンドラーをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="e8684-317">The following example creates a <xref:System.Windows.Controls.TextBox> and attaches event handlers for the <xref:System.Windows.UIElement.GotKeyboardFocus> event and the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus> event.</span></span>  <span data-ttu-id="e8684-318">が<xref:System.Windows.Controls.TextBox>キーボードフォーカスを取得すると、背景色が変更され、 <xref:System.Windows.Controls.TextBox>のテキストがクリアされます。</span><span class="sxs-lookup"><span data-stu-id="e8684-318">When the <xref:System.Windows.Controls.TextBox> obtains keyboard focus, the background color is changed and the text of the <xref:System.Windows.Controls.TextBox> is cleared.</span></span>  <span data-ttu-id="e8684-319">が<xref:System.Windows.Controls.TextBlock>キーボードフォーカスを失った場合、背景色が変更され、サンプルで使用される変数をリセットするメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-319">When the <xref:System.Windows.Controls.TextBlock> loses keyboard focus, the background color is changed and a method is called that resets variables used in the sample.</span></span>  
  
 [!code-xml[keyboardsample#KeyboardSampleXAMLHandlerHookup](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml#keyboardsamplexamlhandlerhookup)]  
  
 [!code-csharp[keyboardsample#KeyboardSampleGotFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml.cs#keyboardsamplegotfocus)]
 [!code-vb[keyboardsample#KeyboardSampleGotFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyboardSample/visualbasic/window1.xaml.vb#keyboardsamplegotfocus)]  
  
 [!code-csharp[keyboardsample#KeyboardSampleLostFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml.cs#keyboardsamplelostfocus)]
 [!code-vb[keyboardsample#KeyboardSampleLostFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyboardSample/visualbasic/window1.xaml.vb#keyboardsamplelostfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8684-320"><see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-320">Identifies the <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-321">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-321">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="e8684-322">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e8684-322">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="e8684-323">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-323">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.ModifierKeys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Keyboard.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys" Usage="System.Windows.Input.Keyboard.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8684-324">現在押されている <see cref="T:System.Windows.Input.ModifierKeys" /> のセットを取得します。</span><span class="sxs-lookup"><span data-stu-id="e8684-324">Gets the set of <see cref="T:System.Windows.Input.ModifierKeys" /> that are currently pressed.</span></span></summary>
        <value><span data-ttu-id="e8684-325"><see cref="T:System.Windows.Input.ModifierKeys" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="e8684-325">A bitwise combination of the <see cref="T:System.Windows.Input.ModifierKeys" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-326"><xref:System.Windows.Input.ModifierKeys>はビットフィールドの列挙体であるため、複数の修飾子キーを同時に押すことができます。</span><span class="sxs-lookup"><span data-stu-id="e8684-326"><xref:System.Windows.Input.ModifierKeys> is a bit field enumeration, so it is possible for multiple modifier keys to be pressed at the same time.</span></span>  <span data-ttu-id="e8684-327">ビット演算を使用して、押された修飾キーの正確なセットを判別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-327">Use bit operations to determine the exact set of modifier keys pressed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8684-328">次の例では、ビットと比較を使用し<xref:System.Windows.Input.ModifierKeys.Control>て、修飾子キーが押されたかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e8684-328">The following example uses a bit AND comparison to determine if the <xref:System.Windows.Input.ModifierKeys.Control> modifier key is pressed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyboardModifiersBitOperation](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyboardmodifiersbitoperation)]
 [!code-vb[keyargssnippetsample#KeyboardModifiersBitOperation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyboardmodifiersbitoperation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" Usage="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8684-329">要素がキーボード フォーカスを取得中の場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="e8684-329">Occurs when an element is in the process of acquiring keyboard focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-330">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="e8684-330">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="e8684-331">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="e8684-331">implements attached events as routed events.</span></span> <span data-ttu-id="e8684-332">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-332">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="e8684-333">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8684-333">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="e8684-334">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-334">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="e8684-335"><xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus>イベントまたはイベントが処理された場合、キーボードフォーカス<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus>は変わりません。</span><span class="sxs-lookup"><span data-stu-id="e8684-335">If the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> event or the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> event is handled, keyboard focus does not change.</span></span>  
  
 <span data-ttu-id="e8684-336">キーボードフォーカスは、キーボード入力を受け取るオブジェクトを参照します。</span><span class="sxs-lookup"><span data-stu-id="e8684-336">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="e8684-337">キーボードフォーカスを持つ要素が<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>に`true`設定されています。</span><span class="sxs-lookup"><span data-stu-id="e8684-337">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="e8684-338">キーボードフォーカスを持つ要素は、デスクトップ全体に1つだけ存在できます。</span><span class="sxs-lookup"><span data-stu-id="e8684-338">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="e8684-339">論理フォーカスとは、フォーカスがあるフォーカススコープ内のオブジェクトを指します。</span><span class="sxs-lookup"><span data-stu-id="e8684-339">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="e8684-340">フォーカス、キーボードフォーカス、および論理フォーカスの詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」と「[フォーカスの概要](~/docs/framework/wpf/advanced/focus-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-340">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewGotKeyborad"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e8684-341">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e8684-341">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e8684-342">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="e8684-342">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent>|  
|<span data-ttu-id="e8684-343">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e8684-343">Routing strategy</span></span>|<span data-ttu-id="e8684-344">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e8684-344">Tunneling</span></span>|  
|<span data-ttu-id="e8684-345">Delegate</span><span class="sxs-lookup"><span data-stu-id="e8684-345">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="e8684-346">対応するバブルイベントは<xref:System.Windows.Input.Keyboard.GotKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="e8684-346">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.GotKeyboardFocus>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8684-347"><see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-347">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-348">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-348">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="e8684-349">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e8684-349">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="e8684-350">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-350">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyboardInputProviderAcquireFocus">
      <MemberSignature Language="C#" Value="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" Usage="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8684-351">キーボード入力プロバイダーがフォーカスを取得中の場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="e8684-351">Occurs when the keyboard input provider is in the process of acquiring focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-352">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="e8684-352">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="e8684-353">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="e8684-353">implements attached events as routed events.</span></span> <span data-ttu-id="e8684-354">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-354">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="e8684-355">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8684-355">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="e8684-356">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-356">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyboardInputProviderAcquireFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e8684-357">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e8684-357">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e8684-358">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="e8684-358">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocusEvent>|  
|<span data-ttu-id="e8684-359">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e8684-359">Routing strategy</span></span>|<span data-ttu-id="e8684-360">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e8684-360">Tunneling</span></span>|  
|<span data-ttu-id="e8684-361">Delegate</span><span class="sxs-lookup"><span data-stu-id="e8684-361">Delegate</span></span>|<xref:System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler>|  
  
-   <span data-ttu-id="e8684-362">対応するバブルイベントは<xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus>です。</span><span class="sxs-lookup"><span data-stu-id="e8684-362">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyboardInputProviderAcquireFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyboardInputProviderAcquireFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyboardInputProviderAcquireFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyboardInputProviderAcquireFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyboardInputProviderAcquireFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyboardInputProviderAcquireFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8684-363"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-363">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-364">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-364">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="e8684-365">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e8684-365">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="e8684-366">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-366">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" Usage="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8684-367">キーボードのキーが押されると発生します。</span><span class="sxs-lookup"><span data-stu-id="e8684-367">Occurs when a key on the keyboard is pressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-368">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="e8684-368">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="e8684-369">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="e8684-369">implements attached events as routed events.</span></span> <span data-ttu-id="e8684-370">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-370">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="e8684-371">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8684-371">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="e8684-372">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-372">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e8684-373">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e8684-373">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e8684-374">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="e8684-374">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewKeyDownEvent>|  
|<span data-ttu-id="e8684-375">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e8684-375">Routing strategy</span></span>|<span data-ttu-id="e8684-376">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e8684-376">Tunneling</span></span>|  
|<span data-ttu-id="e8684-377">Delegate</span><span class="sxs-lookup"><span data-stu-id="e8684-377">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="e8684-378">対応するバブルイベントは<xref:System.Windows.Input.Keyboard.KeyDown>です。</span><span class="sxs-lookup"><span data-stu-id="e8684-378">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.KeyDown>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8684-379"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-379">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-380">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-380">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="e8684-381">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e8684-381">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="e8684-382">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-382">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" Usage="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8684-383">キーボードのキーを離すと発生します。</span><span class="sxs-lookup"><span data-stu-id="e8684-383">Occurs when a key on the keyboard is released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-384">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="e8684-384">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="e8684-385">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="e8684-385">implements attached events as routed events.</span></span> <span data-ttu-id="e8684-386">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-386">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="e8684-387">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8684-387">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="e8684-388">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-388">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e8684-389">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e8684-389">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e8684-390">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="e8684-390">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewKeyUpEvent>|  
|<span data-ttu-id="e8684-391">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e8684-391">Routing strategy</span></span>|<span data-ttu-id="e8684-392">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e8684-392">Tunneling</span></span>|  
|<span data-ttu-id="e8684-393">Delegate</span><span class="sxs-lookup"><span data-stu-id="e8684-393">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="e8684-394">対応するバブルイベントは<xref:System.Windows.Input.Keyboard.KeyUp>です。</span><span class="sxs-lookup"><span data-stu-id="e8684-394">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.KeyUp>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8684-395"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-395">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-396">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-396">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="e8684-397">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e8684-397">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="e8684-398">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-398">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" Usage="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8684-399">要素がキーボード フォーカスを喪失中の場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="e8684-399">Occurs when an element is in the process of losing keyboard focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-400">これは添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="e8684-400">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="e8684-401">添付イベントをルーティングイベントとして実装します。</span><span class="sxs-lookup"><span data-stu-id="e8684-401">implements attached events as routed events.</span></span> <span data-ttu-id="e8684-402">添付イベントは、基本的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]には、イベントを定義していないオブジェクトで処理できるイベントを参照するため[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の言語の概念です。これは、イベントがルートを走査できるようにすることによって展開されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-402">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="e8684-403">アタッチされたイベントには、コードで直接処理構文がありません。コードでルーティングイベントのハンドラーをアタッチするには、指定された Add \* Handler メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8684-403">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="e8684-404">詳細については、「[添付イベントの概要](~/docs/framework/wpf/advanced/attached-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-404">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="e8684-405"><xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus>イベントまたはイベントが処理された場合、キーボードフォーカス<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus>は変わりません。</span><span class="sxs-lookup"><span data-stu-id="e8684-405">If the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> event or the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> event is handled, keyboard focus does not change.</span></span>  
  
 <span data-ttu-id="e8684-406">キーボードフォーカスは、キーボード入力を受け取るオブジェクトを参照します。</span><span class="sxs-lookup"><span data-stu-id="e8684-406">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="e8684-407">キーボードフォーカスを持つ要素が<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>に`true`設定されています。</span><span class="sxs-lookup"><span data-stu-id="e8684-407">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="e8684-408">キーボードフォーカスを持つ要素は、デスクトップ全体に1つだけ存在できます。</span><span class="sxs-lookup"><span data-stu-id="e8684-408">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="e8684-409">論理フォーカスとは、フォーカスがあるフォーカススコープ内のオブジェクトを指します。</span><span class="sxs-lookup"><span data-stu-id="e8684-409">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="e8684-410">フォーカス、キーボードフォーカス、および論理フォーカスの詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」と「[フォーカスの概要](~/docs/framework/wpf/advanced/focus-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8684-410">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e8684-411">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e8684-411">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e8684-412">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="e8684-412">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent>|  
|<span data-ttu-id="e8684-413">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e8684-413">Routing strategy</span></span>|<span data-ttu-id="e8684-414">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e8684-414">Tunneling</span></span>|  
|<span data-ttu-id="e8684-415">Delegate</span><span class="sxs-lookup"><span data-stu-id="e8684-415">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="e8684-416">対応するバブルイベントは<xref:System.Windows.Input.Keyboard.LostKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="e8684-416">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.LostKeyboardFocus>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8684-417"><see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> 添付イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-417">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-418">ルーティングイベント識別子は、ルーティングイベントが登録されたときに作成されます。結果は、ルーティングイベントを登録するクラスのフィールドとして格納されます。</span><span class="sxs-lookup"><span data-stu-id="e8684-418">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="e8684-419">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e8684-419">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="e8684-420">多くの場合、これらの識別子をイベントシステムメソッドのパラメーターとして使用して、特定のルーティングイベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="e8684-420">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryDevice">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.KeyboardDevice PrimaryDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.KeyboardDevice PrimaryDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Keyboard.PrimaryDevice" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PrimaryDevice As KeyboardDevice" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::KeyboardDevice ^ PrimaryDevice { System::Windows::Input::KeyboardDevice ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PrimaryDevice : System.Windows.Input.KeyboardDevice" Usage="System.Windows.Input.Keyboard.PrimaryDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8684-421">プライマリ キーボード入力デバイスを取得します。</span><span class="sxs-lookup"><span data-stu-id="e8684-421">Gets the primary keyboard input device.</span></span></summary>
        <value><span data-ttu-id="e8684-422">デバイス。</span><span class="sxs-lookup"><span data-stu-id="e8684-422">The device.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-423">このプロパティは、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="e8684-423">This property supports the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyboardDevice" />
      </Docs>
    </Member>
    <Member MemberName="RemoveGotKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemoveGotKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveGotKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveGotKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveGotKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveGotKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveGotKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-424">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-424">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-425">削除するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-425">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="e8684-426"><see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="e8684-426">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-427">このメソッドは、 <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>添付イベントへのコードアクセスの添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-427">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKeyboardInputProviderAcquireFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemoveKeyboardInputProviderAcquireFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveKeyboardInputProviderAcquireFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveKeyboardInputProviderAcquireFocusHandler (element As DependencyObject, handler As KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveKeyboardInputProviderAcquireFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardInputProviderAcquireFocusEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveKeyboardInputProviderAcquireFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveKeyboardInputProviderAcquireFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-428">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-428">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-429">削除するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-429">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="e8684-430"><see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="e8684-430">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-431">このメソッドは、 <xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType>添付イベントへのコードアクセスの添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-431">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKeyDownHandler">
      <MemberSignature Language="C#" Value="public static void RemoveKeyDownHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveKeyDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveKeyDownHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveKeyDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveKeyDownHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveKeyDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-432">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-432">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-433">削除するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-433">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="e8684-434"><see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="e8684-434">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-435">このメソッドは、 <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>添付イベントへのコードアクセスの添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-435">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKeyUpHandler">
      <MemberSignature Language="C#" Value="public static void RemoveKeyUpHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveKeyUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveKeyUpHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveKeyUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveKeyUpHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveKeyUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-436">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-436">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-437">削除するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-437">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="e8684-438"><see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="e8684-438">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-439">このメソッドは、 <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>添付イベントへのコードアクセスの添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-439">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveLostKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemoveLostKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveLostKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveLostKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveLostKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveLostKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveLostKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-440">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-440">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-441">削除するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-441">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="e8684-442"><see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="e8684-442">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-443">このメソッドは、 <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>添付イベントへのコードアクセスの添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-443">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewGotKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewGotKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewGotKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewGotKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewGotKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewGotKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewGotKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-444">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-444">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-445">削除するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-445">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="e8684-446"><see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="e8684-446">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-447">このメソッドは、 <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>添付イベントへのコードアクセスの添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-447">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewKeyboardInputProviderAcquireFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewKeyboardInputProviderAcquireFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewKeyboardInputProviderAcquireFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewKeyboardInputProviderAcquireFocusHandler (element As DependencyObject, handler As KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewKeyboardInputProviderAcquireFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardInputProviderAcquireFocusEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewKeyboardInputProviderAcquireFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewKeyboardInputProviderAcquireFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-448">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-448">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-449">削除するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-449">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="e8684-450"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="e8684-450">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-451">このメソッドは、 <xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType>添付イベントへのコードアクセスの添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-451">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewKeyDownHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewKeyDownHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewKeyDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewKeyDownHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewKeyDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewKeyDownHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewKeyDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-452">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-452">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-453">削除するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-453">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="e8684-454"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="e8684-454">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-455">このメソッドは、 <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>添付イベントへのコードアクセスの添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-455">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewKeyUpHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewKeyUpHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewKeyUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewKeyUpHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewKeyUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewKeyUpHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewKeyUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-456">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-456">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-457">削除するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-457">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="e8684-458"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="e8684-458">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-459">このメソッドは、 <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>添付イベントへのコードアクセスの添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-459">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewLostKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewLostKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewLostKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewLostKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewLostKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewLostKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewLostKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="e8684-460">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="e8684-460">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="e8684-461">削除するイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e8684-461">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="e8684-462"><see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> 添付イベントのハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="e8684-462">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8684-463">このメソッドは、 <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>添付イベントへのコードアクセスの添付プロパティアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="e8684-463">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>