<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="099ff6d693419d96182b49bf1a612df0839cebbb" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36505323" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <TypeSignature Language="F#" Value="type RoutedCommand = class&#xA;    interface ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines a command that implements <see cref="T:System.Windows.Input.ICommand" /> and is routed through the element tree.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>と<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>のメソッド、<xref:System.Windows.Input.RoutedCommand>で標準的な場合と同様のコマンドは、アプリケーション ロジックを含まない<xref:System.Windows.Input.ICommand>、これらのメソッドが、オブジェクトを参照して、要素ツリーを走査するイベントを生成する代わりが、<xref:System.Windows.Input.CommandBinding>.  イベント ハンドラーがアタッチされている、<xref:System.Windows.Input.CommandBinding>コマンド ロジックが含まれています。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドが発生し、<xref:System.Windows.Input.CommandManager.PreviewExecuted>と<xref:System.Windows.Input.CommandManager.Executed>イベント。  <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッドが発生し、<xref:System.Windows.Input.CommandManager.PreviewCanExecute>と<xref:System.Windows.Input.CommandManager.CanExecute>イベント。  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
 \<*object* *property*="*predefinedCommandName*"/>  
  
 \- または -  
  
 \<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/>  
  
 \- または -  
  
 \<*object* *property*="{ *customClassName*.*customCommandName*}"/>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a>XAML 値  
 *predefinedClassName*  
 定義済みのコマンド クラスの 1 つ。  
  
 *predefinedCommandName*  
 定義済みのコマンドのいずれか。  
  
 *customClassName*  
 カスタム コマンドが含まれるカスタム クラス。 カスタム クラスは一般的に必要な`xlmns`プレフィックスのマッピングは、参照してください[XAML 名前空間と WPF XAML 向け Namespace マッピング](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)です。  
  
 *customCommandName*  
 カスタム コマンド。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Declared name for serialization.</param>
        <param name="ownerType">The type which is registering the command.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name and owner type.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ownerType" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type * System.Windows.Input.InputGestureCollection -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType, inputGestures)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">Declared name for serialization.</param>
        <param name="ownerType">The type that is registering the command.</param>
        <param name="inputGestures">Default input gestures associated with this command.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name, owner type, and collection of gestures.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">the length of <paramref name="name" /> is zero  \- or -  <paramref name="ownerType" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.CanExecute : obj * System.Windows.IInputElement -&gt; bool" Usage="routedCommand.CanExecute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">A user defined data type.</param>
        <param name="target">The command target.</param>
        <summary>Determines whether this <see cref="T:System.Windows.Input.RoutedCommand" /> can execute in its current state.</summary>
        <returns>
          <see langword="true" /> if the command can execute on the current command target; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 かどうかを実際のロジック、<xref:System.Windows.Input.RoutedCommand>現在上で実行できるコマンドの対象に含まれていない、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッドではなく<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>を発生させます、<xref:System.Windows.Input.CommandManager.PreviewCanExecute>と<xref:System.Windows.Input.CommandManager.CanExecute>トンネルおよびまでバブル イベント要素ツリーを使用して、オブジェクトを探して、<xref:System.Windows.Input.CommandBinding>です。  場合、<xref:System.Windows.Input.CommandBinding>を<xref:System.Windows.Input.RoutedCommand>が見つかると、次に、<xref:System.Windows.Input.CanExecuteRoutedEventHandler>にアタッチされている<xref:System.Windows.Input.CommandBinding>と呼びます。  これらのハンドラーを判断する際のプログラミング ロジックを指定する、<xref:System.Windows.Input.RoutedCommand>かを実行できます。  
  
 <xref:System.Windows.Input.CommandManager.PreviewCanExecute>と<xref:System.Windows.Input.CommandManager.PreviewExecuted>上のイベントが発生する、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>です。  場合、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>に設定されていない、 <xref:System.Windows.Input.ICommandSource>、<xref:System.Windows.Input.CommandManager.PreviewCanExecute>と<xref:System.Windows.Input.CommandManager.CanExecute>キーボード フォーカスを持つ要素のイベントが発生します。  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Input.ICommand.CanExecuteChanged>イベント ハンドラーのカスタム実装から<xref:System.Windows.Input.ICommandSource>です。  
  
 `this.Command` この例では、<xref:System.Windows.Input.ICommandSource.Command%2A>プロパティを<xref:System.Windows.Input.ICommandSource>です。  コマンドがない場合`null`、コマンドにキャスト、<xref:System.Windows.Input.RoutedCommand>です。  コマンドがの場合、 <xref:System.Windows.Input.RoutedCommand>、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>を渡すメソッドが呼び出された、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>と<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。  コマンドがない場合、<xref:System.Windows.Input.RoutedCommand>にキャスト、<xref:System.Windows.Input.ICommand>と<xref:System.Windows.Input.ICommand.CanExecute%2A>を渡すメソッドが呼び出された、<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。  
  
 場合、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッドを返します。 `true`、し、コントロールが有効では、それ以外の、コントロールは無効にします。  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberSignature Language="F#" Value="member this.CanExecuteChanged : EventHandler " Usage="member this.CanExecuteChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when changes to the command source are detected by the command manager. These changes often affect whether the command should execute on the current command target.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.RoutedCommand>リッスン、<xref:System.Windows.Input.CommandManager.RequerySuggested>によって発生するイベント、<xref:System.Windows.Input.CommandManager>です。 <xref:System.Windows.Input.CommandManager.RequerySuggested>条件が満たされたときにイベントが発生したかどうかを変更することがありますキーボード フォーカスの変化など、コマンドを実行する必要があります。  コマンドを受信すると、<xref:System.Windows.Input.CommandManager.RequerySuggested>を発生させるイベントを<xref:System.Windows.Input.RoutedCommand.CanExecuteChanged>イベント。  このイベントとクエリのコマンド ソースが一般に、待機、<xref:System.Windows.Input.RoutedCommand>によって、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッドです。  多くのコマンド ソースが無効になります自体のコマンドのバインドの一部としてのコマンドを実行できない場合。  この例は、ときに、<xref:System.Windows.Controls.MenuItem>自体を淡色表示アウトすると、コマンドを実行できません。  
  
 一部の状況で、<xref:System.Windows.Input.CommandManager>は、実行するコマンドの機能を変更する条件の変化を認識しません。  このような場合は、強制することができます、<xref:System.Windows.Input.CommandManager>が発生する、<xref:System.Windows.Input.CommandManager.RequerySuggested>を呼び出してイベント、<xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>メソッド、これはさらに、<xref:System.Windows.Input.RoutedCommand>させる、<xref:System.Windows.Input.RoutedCommand.CanExecuteChanged>イベント。  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Input.ICommand.CanExecuteChanged>イベント ハンドラーのカスタム実装から<xref:System.Windows.Input.ICommandSource>です。  
  
 `this.Command` この例では、<xref:System.Windows.Input.ICommandSource.Command%2A>プロパティを<xref:System.Windows.Input.ICommandSource>です。  コマンドがない場合`null`、コマンドにキャスト、<xref:System.Windows.Input.RoutedCommand>です。  コマンドがの場合、 <xref:System.Windows.Input.RoutedCommand>、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>を渡すメソッドが呼び出された、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>と<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。  コマンドがない場合、<xref:System.Windows.Input.RoutedCommand>にキャスト、<xref:System.Windows.Input.ICommand>と<xref:System.Windows.Input.ICommand.CanExecute%2A>を渡すメソッドが呼び出された、<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。  
  
 場合、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッドを返します。 `true`、し、コントロールが有効です。 それ以外の場合、コントロールが無効になります。  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.Execute : obj * System.Windows.IInputElement -&gt; unit" Usage="routedCommand.Execute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">User defined parameter to be passed to the handler.</param>
        <param name="target">Element at which to begin looking for command handlers.</param>
        <summary>Executes the <see cref="T:System.Windows.Input.RoutedCommand" /> on the current command target.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 実際のロジックを実行する、<xref:System.Windows.Input.RoutedCommand>に含まれていない、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドです。  <xref:System.Windows.Input.RoutedCommand.Execute%2A> 発生させる、<xref:System.Windows.Input.CommandManager.PreviewExecuted>と<xref:System.Windows.Input.CommandManager.Executed>イベントでは、トンネルおよびバブル チャート、要素からツリーを持つオブジェクトを探して、<xref:System.Windows.Input.CommandBinding>です。  場合、<xref:System.Windows.Input.CommandBinding>を<xref:System.Windows.Input.RoutedCommand>が見つかると、次に、<xref:System.Windows.Input.ExecutedRoutedEventHandler>にアタッチされている<xref:System.Windows.Input.CommandBinding>と呼びます。  これらのハンドラーを実行するプログラミング ロジックを指定する、<xref:System.Windows.Input.RoutedCommand>です。  
  
 <xref:System.Windows.Input.CommandManager.PreviewExecuted>と<xref:System.Windows.Input.CommandManager.Executed>上のイベントが発生する、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>です。  場合、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>に設定されていない、 <xref:System.Windows.Input.ICommandSource>、<xref:System.Windows.Input.CommandManager.PreviewExecuted>と<xref:System.Windows.Input.CommandManager.Executed>キーボード フォーカスを持つ要素のイベントが発生します。  
  
   
  
## Examples  
 次の例は、カスタムの実装から<xref:System.Windows.Input.ICommandSource>サンプルです。  
  
 `this.Command` コマンドのプロパティは、この例では、<xref:System.Windows.Input.ICommandSource>です。  コマンドにキャストはコマンドが null でない場合、<xref:System.Windows.Input.RoutedCommand>です。  ある場合、 <xref:System.Windows.Input.RoutedCommand>、<xref:System.Windows.Input.RoutedCommand.Execute%2A>を渡すメソッドが呼び出された、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>と<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。  コマンドがない場合、<xref:System.Windows.Input.RoutedCommand>にキャスト、<xref:System.Windows.Input.ICommand>と<xref:System.Windows.Input.ICommand.Execute%2A>を渡すメソッドが呼び出された、<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputGestures : System.Windows.Input.InputGestureCollection" Usage="System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of <see cref="T:System.Windows.Input.InputGesture" /> objects that are associated with this command.</summary>
        <value>入力ジェスチャ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、新しいを追加する方法を示しています。<xref:System.Windows.Input.MouseGesture>を、<xref:System.Windows.Input.RoutedCommand>です。  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.Input.RoutedCommand.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the command.</summary>
        <value>コマンドの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 参照するときに、このプロパティを使用することができます、<xref:System.Windows.Input.RoutedCommand>で[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type that is registered with the command.</summary>
        <value>コマンドの所有者の型。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to <see langword="null" />.</param>
        <summary>For a description of this members, see <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</summary>
        <returns>
          <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Input.RoutedCommand> のインスタンスが <xref:System.Windows.Input.ICommand> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to <see langword="null" />.</param>
        <summary>For a description of this members, see <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Input.RoutedCommand> のインスタンスが <xref:System.Windows.Input.ICommand> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## Examples  
 関連項目  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>