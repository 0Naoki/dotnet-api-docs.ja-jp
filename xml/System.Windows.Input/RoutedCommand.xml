<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d7469aafedfab5bf01be9f8214fc44809973b73" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30659626" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="73cc6-101">
        <see cref="T:System.Windows.Input.ICommand" /> を実装し、要素ツリーを通じてルーティングされるコマンドを定義します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="73cc6-101">Defines a command that implements <see cref="T:System.Windows.Input.ICommand" /> and is routed through the element tree.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="73cc6-102"><xref:System.Windows.Input.RoutedCommand.Execute%2A>と<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッドを<xref:System.Windows.Input.RoutedCommand>で標準的な場合と同様のコマンドは、アプリケーション ロジックを含まない<xref:System.Windows.Input.ICommand>、これらのメソッドが、オブジェクトを参照して、要素ツリーを走査するイベントを生成する代わりが、<xref:System.Windows.Input.CommandBinding>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-102">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a <xref:System.Windows.Input.RoutedCommand> do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="73cc6-103">イベント ハンドラーがアタッチされている、<xref:System.Windows.Input.CommandBinding>コマンド ロジックが含まれています。</span><span class="sxs-lookup"><span data-stu-id="73cc6-103">The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.</span></span>  
  
 <span data-ttu-id="73cc6-104"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドが発生し、<xref:System.Windows.Input.CommandManager.PreviewExecuted>と<xref:System.Windows.Input.CommandManager.Executed>イベント。</span><span class="sxs-lookup"><span data-stu-id="73cc6-104">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.</span></span>  <span data-ttu-id="73cc6-105"><xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッドが発生し、<xref:System.Windows.Input.CommandManager.PreviewCanExecute>と<xref:System.Windows.Input.CommandManager.CanExecute>イベント。</span><span class="sxs-lookup"><span data-stu-id="73cc6-105">The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.</span></span>  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="73cc6-106">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="73cc6-106">XAML Attribute Usage</span></span>  
 <span data-ttu-id="73cc6-107">\<*object* *property*="*predefinedCommandName*"/></span><span class="sxs-lookup"><span data-stu-id="73cc6-107">\<*object* *property*="*predefinedCommandName*"/></span></span>  
  
 <span data-ttu-id="73cc6-108">\- または</span><span class="sxs-lookup"><span data-stu-id="73cc6-108">\- or -</span></span>  
  
 <span data-ttu-id="73cc6-109">\<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/></span><span class="sxs-lookup"><span data-stu-id="73cc6-109">\<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/></span></span>  
  
 <span data-ttu-id="73cc6-110">\- または</span><span class="sxs-lookup"><span data-stu-id="73cc6-110">\- or -</span></span>  
  
 <span data-ttu-id="73cc6-111">\<*object* *property*="{ *customClassName*.*customCommandName*}"/></span><span class="sxs-lookup"><span data-stu-id="73cc6-111">\<*object* *property*="{ *customClassName*.*customCommandName*}"/></span></span>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a><span data-ttu-id="73cc6-112">XAML 値</span><span class="sxs-lookup"><span data-stu-id="73cc6-112">XAML Values</span></span>  
 <span data-ttu-id="73cc6-113">*predefinedClassName*</span><span class="sxs-lookup"><span data-stu-id="73cc6-113">*predefinedClassName*</span></span>  
 <span data-ttu-id="73cc6-114">定義済みのコマンド クラスの 1 つ。</span><span class="sxs-lookup"><span data-stu-id="73cc6-114">One of the predefined command classes.</span></span>  
  
 <span data-ttu-id="73cc6-115">*predefinedCommandName*</span><span class="sxs-lookup"><span data-stu-id="73cc6-115">*predefinedCommandName*</span></span>  
 <span data-ttu-id="73cc6-116">定義済みのコマンドのいずれか。</span><span class="sxs-lookup"><span data-stu-id="73cc6-116">One of the predefined commands.</span></span>  
  
 <span data-ttu-id="73cc6-117">*customClassName*</span><span class="sxs-lookup"><span data-stu-id="73cc6-117">*customClassName*</span></span>  
 <span data-ttu-id="73cc6-118">カスタム コマンドが含まれるカスタム クラス。</span><span class="sxs-lookup"><span data-stu-id="73cc6-118">A custom class which contains the custom command.</span></span> <span data-ttu-id="73cc6-119">カスタム クラスは一般的に必要な`xlmns`プレフィックスのマッピングは、参照してください[XAML 名前空間と WPF XAML 向け Namespace マッピング](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-119">Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span></span>  
  
 <span data-ttu-id="73cc6-120">*customCommandName*</span><span class="sxs-lookup"><span data-stu-id="73cc6-120">*customCommandName*</span></span>  
 <span data-ttu-id="73cc6-121">カスタム コマンド。</span><span class="sxs-lookup"><span data-stu-id="73cc6-121">A custom command.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="73cc6-122">
            <see cref="T:System.Windows.Input.RoutedCommand" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-122">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="73cc6-123">
            <see cref="T:System.Windows.Input.RoutedCommand" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-123">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="73cc6-124">シリアル化のための宣言名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-124">Declared name for serialization.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="73cc6-125">このコマンドを登録するタイプ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-125">The type which is registering the command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="73cc6-126">指定した名前と所有者型を使用して、<see cref="T:System.Windows.Input.RoutedCommand" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-126">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name and owner type.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="73cc6-127">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-127">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="73cc6-128">
            <paramref name="ownerType" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-128">
              <paramref name="ownerType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="73cc6-129">シリアル化のための宣言名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-129">Declared name for serialization.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="73cc6-130">このコマンドを登録する型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-130">The type that is registering the command.</span>
          </span>
        </param>
        <param name="inputGestures">
          <span data-ttu-id="73cc6-131">このコマンドに関連付けられた、既定の入力ジェスチャ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-131">Default input gestures associated with this command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="73cc6-132">指定した名前、所有者型、およびジェスチャのコレクションを使用して、<see cref="T:System.Windows.Input.RoutedCommand" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-132">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name, owner type, and collection of gestures.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="73cc6-133">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-133">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="73cc6-134">
            <paramref name="name" /> の長さが 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-134">the length of <paramref name="name" /> is zero</span>
          </span>
          <span data-ttu-id="73cc6-135">\- または</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-135">\- or -</span>
          </span>
          <span data-ttu-id="73cc6-136">
            <paramref name="ownerType" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-136">
              <paramref name="ownerType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="73cc6-137">ユーザー定義のデータ型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-137">A user defined data type.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="73cc6-138">コマンドの対象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-138">The command target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="73cc6-139">現在の状態でこの <see cref="T:System.Windows.Input.RoutedCommand" /> を実行できるかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-139">Determines whether this <see cref="T:System.Windows.Input.RoutedCommand" /> can execute in its current state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="73cc6-140">現在のコマンドの対象に対してコマンドを実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-140">
              <see langword="true" /> if the command can execute on the current command target; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="73cc6-141">かどうかを実際のロジック、<xref:System.Windows.Input.RoutedCommand>現在上で実行できるコマンドの対象に含まれていない、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッドではなく<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>を発生させます、<xref:System.Windows.Input.CommandManager.PreviewCanExecute>と<xref:System.Windows.Input.CommandManager.CanExecute>トンネルおよび要素を介してバブル ツリーを持つオブジェクトを探しているイベント、<xref:System.Windows.Input.CommandBinding>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-141">The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods, rather <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="73cc6-142">場合、<xref:System.Windows.Input.CommandBinding>を<xref:System.Windows.Input.RoutedCommand>が見つかると、次に、<xref:System.Windows.Input.CanExecuteRoutedEventHandler>にアタッチされている<xref:System.Windows.Input.CommandBinding>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="73cc6-142">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="73cc6-143">これらのハンドラーを判断する際のプログラミング ロジックを指定する、<xref:System.Windows.Input.RoutedCommand>かを実行できます。</span><span class="sxs-lookup"><span data-stu-id="73cc6-143">These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.</span></span>  
  
 <span data-ttu-id="73cc6-144"><xref:System.Windows.Input.CommandManager.PreviewCanExecute>と<xref:System.Windows.Input.CommandManager.PreviewExecuted>上のイベントが発生する、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-144">The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="73cc6-145">場合、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>に設定されていない、 <xref:System.Windows.Input.ICommandSource>、<xref:System.Windows.Input.CommandManager.PreviewCanExecute>と<xref:System.Windows.Input.CommandManager.CanExecute>キーボード フォーカスを持つ要素のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="73cc6-145">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="73cc6-146">次の例は、<xref:System.Windows.Input.ICommand.CanExecuteChanged>イベント ハンドラーのカスタム実装から<xref:System.Windows.Input.ICommandSource>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-146">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="73cc6-147">`this.Command` この例では、<xref:System.Windows.Input.ICommandSource.Command%2A>プロパティを<xref:System.Windows.Input.ICommandSource>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-147">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="73cc6-148">コマンドがない場合`null`、コマンドにキャスト、<xref:System.Windows.Input.RoutedCommand>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-148">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="73cc6-149">コマンドがの場合、 <xref:System.Windows.Input.RoutedCommand>、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>を渡すメソッドが呼び出された、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>と<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-149">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="73cc6-150">コマンドがない場合、<xref:System.Windows.Input.RoutedCommand>にキャスト、<xref:System.Windows.Input.ICommand>と<xref:System.Windows.Input.ICommand.CanExecute%2A>を渡すメソッドが呼び出された、<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-150">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="73cc6-151">場合、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッドを返します。 `true`、し、コントロールが有効では、それ以外の、コントロールは無効にします。</span><span class="sxs-lookup"><span data-stu-id="73cc6-151">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disable.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="73cc6-152">
            <paramref name="target" /> が <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-152">
              <paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="73cc6-153">コマンド ソースに対する変更がコマンド マネージャーによって検出されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-153">Occurs when changes to the command source are detected by the command manager.</span>
          </span>
          <span data-ttu-id="73cc6-154">これらの変更は、多くの場合、現在のコマンドの対象に対してコマンドを実行するかどうかに影響します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-154">These changes often affect whether the command should execute on the current command target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="73cc6-155"><xref:System.Windows.Input.RoutedCommand>リッスン、<xref:System.Windows.Input.CommandManager.RequerySuggested>によって発生するイベント、<xref:System.Windows.Input.CommandManager>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-155">The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>.</span></span> <span data-ttu-id="73cc6-156"><xref:System.Windows.Input.CommandManager.RequerySuggested>条件が満たされたときにイベントが発生したかどうかを変更することがありますキーボード フォーカスの変化など、コマンドを実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="73cc6-156">The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.</span></span>  <span data-ttu-id="73cc6-157">コマンドを受信すると、<xref:System.Windows.Input.CommandManager.RequerySuggested>を発生させるイベントを<xref:System.Windows.Input.RoutedCommand.CanExecuteChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="73cc6-157">When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  <span data-ttu-id="73cc6-158">このイベントとクエリのコマンド ソースが一般に、待機、<xref:System.Windows.Input.RoutedCommand>によって、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="73cc6-158">Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.</span></span>  <span data-ttu-id="73cc6-159">多くのコマンド ソースが無効になります自体のコマンドのバインドの一部としてのコマンドを実行できない場合。</span><span class="sxs-lookup"><span data-stu-id="73cc6-159">Most command sources will disable themselves if the command cannot be executed, as part of their command binding.</span></span>  <span data-ttu-id="73cc6-160">この例は、ときに、<xref:System.Windows.Controls.MenuItem>自体を淡色表示アウトすると、コマンドを実行できません。</span><span class="sxs-lookup"><span data-stu-id="73cc6-160">An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.</span></span>  
  
 <span data-ttu-id="73cc6-161">一部の状況で、<xref:System.Windows.Input.CommandManager>は、実行するコマンドの機能を変更する条件の変化を認識しません。</span><span class="sxs-lookup"><span data-stu-id="73cc6-161">In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.</span></span>  <span data-ttu-id="73cc6-162">このような場合は、強制することができます、<xref:System.Windows.Input.CommandManager>が発生する、<xref:System.Windows.Input.CommandManager.RequerySuggested>を呼び出してイベント、<xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>メソッド、これはさらに、<xref:System.Windows.Input.RoutedCommand>させる、<xref:System.Windows.Input.RoutedCommand.CanExecuteChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="73cc6-162">In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="73cc6-163">次の例は、<xref:System.Windows.Input.ICommand.CanExecuteChanged>イベント ハンドラーのカスタム実装から<xref:System.Windows.Input.ICommandSource>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-163">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="73cc6-164">`this.Command` この例では、<xref:System.Windows.Input.ICommandSource.Command%2A>プロパティを<xref:System.Windows.Input.ICommandSource>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-164">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="73cc6-165">コマンドがない場合`null`、コマンドにキャスト、<xref:System.Windows.Input.RoutedCommand>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-165">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="73cc6-166">コマンドがの場合、 <xref:System.Windows.Input.RoutedCommand>、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>を渡すメソッドが呼び出された、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>と<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-166">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="73cc6-167">コマンドがない場合、<xref:System.Windows.Input.RoutedCommand>にキャスト、<xref:System.Windows.Input.ICommand>と<xref:System.Windows.Input.ICommand.CanExecute%2A>を渡すメソッドが呼び出された、<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-167">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="73cc6-168">場合、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッドを返します。 `true`、し、コントロールが有効です。 それ以外の場合、コントロールが無効になります。</span><span class="sxs-lookup"><span data-stu-id="73cc6-168">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disabled.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="73cc6-169">ハンドラーに渡されるユーザー定義パラメーター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-169">User defined parameter to be passed to the handler.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="73cc6-170">コマンド ハンドラーの検索を開始する要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-170">Element at which to begin looking for command handlers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="73cc6-171">現在のコマンドの対象で <see cref="T:System.Windows.Input.RoutedCommand" /> を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-171">Executes the <see cref="T:System.Windows.Input.RoutedCommand" /> on the current command target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="73cc6-172">実際のロジックを実行する、<xref:System.Windows.Input.RoutedCommand>に含まれていない、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="73cc6-172">The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the <xref:System.Windows.Input.RoutedCommand.Execute%2A> methods.</span></span>  <span data-ttu-id="73cc6-173"><xref:System.Windows.Input.RoutedCommand.Execute%2A> 発生させる、<xref:System.Windows.Input.CommandManager.PreviewExecuted>と<xref:System.Windows.Input.CommandManager.Executed>イベントでは、トンネルおよびバブル チャート、要素からツリーを持つオブジェクトを探して、<xref:System.Windows.Input.CommandBinding>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-173"><xref:System.Windows.Input.RoutedCommand.Execute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="73cc6-174">場合、<xref:System.Windows.Input.CommandBinding>を<xref:System.Windows.Input.RoutedCommand>が見つかると、次に、<xref:System.Windows.Input.ExecutedRoutedEventHandler>にアタッチされている<xref:System.Windows.Input.CommandBinding>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="73cc6-174">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="73cc6-175">これらのハンドラーを実行するプログラミング ロジックを指定する、<xref:System.Windows.Input.RoutedCommand>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-175">These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 <span data-ttu-id="73cc6-176"><xref:System.Windows.Input.CommandManager.PreviewExecuted>と<xref:System.Windows.Input.CommandManager.Executed>上のイベントが発生する、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-176">The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="73cc6-177">場合、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>に設定されていない、 <xref:System.Windows.Input.ICommandSource>、<xref:System.Windows.Input.CommandManager.PreviewExecuted>と<xref:System.Windows.Input.CommandManager.Executed>キーボード フォーカスを持つ要素のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="73cc6-177">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="73cc6-178">次の例は、カスタムの実装から<xref:System.Windows.Input.ICommandSource>サンプルです。</span><span class="sxs-lookup"><span data-stu-id="73cc6-178">The following example is from a custom implementation of <xref:System.Windows.Input.ICommandSource> sample.</span></span>  
  
 <span data-ttu-id="73cc6-179">`this.Command` コマンドのプロパティは、この例では、<xref:System.Windows.Input.ICommandSource>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-179">`this.Command` in this example is the Command property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="73cc6-180">コマンドにキャストはコマンドが null でない場合、<xref:System.Windows.Input.RoutedCommand>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-180">If the command is not null, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="73cc6-181">ある場合、 <xref:System.Windows.Input.RoutedCommand>、<xref:System.Windows.Input.RoutedCommand.Execute%2A>を渡すメソッドが呼び出された、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>と<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-181">If it is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="73cc6-182">コマンドがない場合、<xref:System.Windows.Input.RoutedCommand>にキャスト、<xref:System.Windows.Input.ICommand>と<xref:System.Windows.Input.ICommand.Execute%2A>を渡すメソッドが呼び出された、<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-182">If the command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="73cc6-183">
            <paramref name="target" /> が <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-183">
              <paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="73cc6-184">このコマンドに関連付けられている <see cref="T:System.Windows.Input.InputGesture" /> オブジェクトのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-184">Gets the collection of <see cref="T:System.Windows.Input.InputGesture" /> objects that are associated with this command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="73cc6-185">入力ジェスチャ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-185">The input gestures.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="73cc6-186">次の例は、新しいを追加する方法を示しています。<xref:System.Windows.Input.MouseGesture>を、<xref:System.Windows.Input.RoutedCommand>です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-186">The following example shows how to add a new <xref:System.Windows.Input.MouseGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="73cc6-187">コマンド名を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-187">Gets the name of the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="73cc6-188">コマンドの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-188">The name of the command.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="73cc6-189">参照するときに、このプロパティを使用することができます、<xref:System.Windows.Input.RoutedCommand>で[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-189">This property can be used when referencing a <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="73cc6-190">このコマンドに登録された型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-190">Gets the type that is registered with the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="73cc6-191">コマンドの所有者の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-191">The type of the command owner.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="73cc6-192">コマンドにより使用されるデータです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-192">Data used by the command.</span>
          </span>
          <span data-ttu-id="73cc6-193">コマンドにデータを渡す必要がない場合は、このオブジェクトを <see langword="null" /> に設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-193">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="73cc6-194">このメンバーの説明については、<see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" /> のトピックを参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-194">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="73cc6-195">このコマンドを実行できる場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-195">
              <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="73cc6-196">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-196">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="73cc6-197">これは、<xref:System.Windows.Input.RoutedCommand> のインスタンスが <xref:System.Windows.Input.ICommand> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="73cc6-197">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="73cc6-198">コマンドにより使用されるデータです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-198">Data used by the command.</span>
          </span>
          <span data-ttu-id="73cc6-199">コマンドにデータを渡す必要がない場合は、このオブジェクトを <see langword="null" /> に設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-199">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="73cc6-200">このメンバーの説明については、<see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" /> のトピックを参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="73cc6-200">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="73cc6-201">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="73cc6-201">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="73cc6-202">これは、<xref:System.Windows.Input.RoutedCommand> のインスタンスが <xref:System.Windows.Input.ICommand> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="73cc6-202">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="73cc6-203">参照</span><span class="sxs-lookup"><span data-stu-id="73cc6-203">See Also</span></span>  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>