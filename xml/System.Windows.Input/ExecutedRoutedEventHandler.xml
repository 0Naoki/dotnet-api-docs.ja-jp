<Type Name="ExecutedRoutedEventHandler" FullName="System.Windows.Input.ExecutedRoutedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5e7060feb6bd9cc789b91cd51b75c1f71d708b5f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExecutedRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ExecutedRoutedEventHandler(sender As Object, e As ExecutedRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ExecutedRoutedEventHandler(System::Object ^ sender, ExecutedRoutedEventArgs ^ e);" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">
      <span data-ttu-id="6cfab-101">イベント ハンドラーがアタッチされているオブジェクト。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6cfab-101">The object where the event handler is attached.</span>
      </span>
    </param>
    <param name="e">
      <span data-ttu-id="6cfab-102">イベントのデータ。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6cfab-102">The event data.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="6cfab-103">
        <see cref="E:System.Windows.Input.CommandBinding.Executed" /> と <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> のルーティング イベントだけでなく、関連する添付イベントも処理するメソッドを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6cfab-103">Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> and <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> routed events, as well as related attached events.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cfab-104">このデリゲートには実装ロジックが含まれています、<xref:System.Windows.Input.RoutedCommand>です。</span><span class="sxs-lookup"><span data-stu-id="6cfab-104">This delegate contains the implementation logic for a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="6cfab-105">コマンドの実装ロジックを分離することにより、さまざまなソースと種類から呼び出されるコマンドと、コマンドのロジックの集中管理を有効にします。</span><span class="sxs-lookup"><span data-stu-id="6cfab-105">Separating the implementation logic from the command allows the command to be invoked from different sources and types, and enables the centralization of command logic.</span></span>  
  
 <span data-ttu-id="6cfab-106">このデリゲートにも使用<xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType>と<xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>にアタッチされるイベントは、<xref:System.Windows.Input.CommandManager>コマンド実行のインフラストラクチャの大半を実装するクラス。</span><span class="sxs-lookup"><span data-stu-id="6cfab-106">This delegate is also used for <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> and <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>, which are attached events on the <xref:System.Windows.Input.CommandManager> class that implements much of the commanding infrastructure.</span></span> <span data-ttu-id="6cfab-107">最も実用的なハンドラーが処理されます、<xref:System.Windows.Input.CommandBinding.Executed>特定からのイベント<xref:System.Windows.Input.CommandBinding>ではなくで機能するよりも、<xref:System.Windows.Input.CommandManager>レベル。</span><span class="sxs-lookup"><span data-stu-id="6cfab-107">But most practical handlers will handle the <xref:System.Windows.Input.CommandBinding.Executed> events from a particular <xref:System.Windows.Input.CommandBinding>, rather than work at the <xref:System.Windows.Input.CommandManager> level.</span></span>  
  
 <span data-ttu-id="6cfab-108">内で<xref:System.Windows.Input.ExecutedRoutedEventArgs>、次のプロパティは関心のある一般的には実行されたコマンドを実行した結果のルーティング イベントのイベント ハンドラーを記述する場合。</span><span class="sxs-lookup"><span data-stu-id="6cfab-108">Within <xref:System.Windows.Input.ExecutedRoutedEventArgs>, the following properties are generally of interest when you write an event handler for a routed event that results from an executed command:</span></span>  
  
-   <span data-ttu-id="6cfab-109"><xref:System.Windows.RoutedEventArgs.Source%2A> コマンドが実行された対象を報告します。</span><span class="sxs-lookup"><span data-stu-id="6cfab-109"><xref:System.Windows.RoutedEventArgs.Source%2A> reports the target where the command was executed.</span></span> <span data-ttu-id="6cfab-110">見なすことも、コマンドを実行すると、<xref:System.Windows.RoutedEventArgs.Source%2A>複数通常でルーティング イベントの条件、ルーティングされたイベントを発生させたオブジェクトとして。</span><span class="sxs-lookup"><span data-stu-id="6cfab-110">Once the command is executed, you can also think of the <xref:System.Windows.RoutedEventArgs.Source%2A> more generally in routed event terms, as the object that raised a routed event.</span></span>  
  
-   <span data-ttu-id="6cfab-111"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> 実行コマンドを報告します。</span><span class="sxs-lookup"><span data-stu-id="6cfab-111"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> reports the command that executed.</span></span> <span data-ttu-id="6cfab-112">このプロパティは、コマンドのショートカット キーを使用する場合、および可能性のある複数のコマンドを処理するハンドラーを記述する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="6cfab-112">This property is useful if you use command bindings and if you write handlers that potentially handle multiple commands.</span></span>  
  
-   <span data-ttu-id="6cfab-113"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> 実行中のコマンドで渡されたコマンド固有のパラメーターをレポートします。</span><span class="sxs-lookup"><span data-stu-id="6cfab-113"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> reports any command-specific parameters that were passed by the executing command.</span></span> <span data-ttu-id="6cfab-114">すべてのコマンドを使用してまたはコマンド固有のパラメーターを想定します。</span><span class="sxs-lookup"><span data-stu-id="6cfab-114">Not all commands use or expect command-specific parameters.</span></span>  
  
-   <span data-ttu-id="6cfab-115"><xref:System.Windows.RoutedEventArgs.Handled%2A> 経路上の別の要素で、実行されるコマンドから生成されるルーティング イベントは処理されたかどうかを報告します。</span><span class="sxs-lookup"><span data-stu-id="6cfab-115"><xref:System.Windows.RoutedEventArgs.Handled%2A> reports whether the routed event that resulted from the executed command was already handled by a different element along the route.</span></span> <span data-ttu-id="6cfab-116">ハンドラーを設定するイベントを処理するときに、意味のある作業を実行して推奨される方法は、ルーティングされたイベント ハンドラーを<xref:System.Windows.RoutedEventArgs.Handled%2A>に`true`です。</span><span class="sxs-lookup"><span data-stu-id="6cfab-116">For routed event handlers, it is a recommended practice to have handlers that do meaningful work when handling the event to set <xref:System.Windows.RoutedEventArgs.Handled%2A> to `true`.</span></span> <span data-ttu-id="6cfab-117">これを防止、イベントのハンドラーを一般的なイベントをもう一度経路さらに処理します。</span><span class="sxs-lookup"><span data-stu-id="6cfab-117">This prevents typical handlers for the event from handling the event again further along the route.</span></span> <span data-ttu-id="6cfab-118">ルーティング イベントを処理する方法の詳細については、次を参照してください。 [Handled、クラス処理とルーティング イベントをマーク](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)です。</span><span class="sxs-lookup"><span data-stu-id="6cfab-118">For more information on handling routed events, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
 <span data-ttu-id="6cfab-119">このデリゲート用のハンドラーを表すも<xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType>と<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>にアタッチされるイベントは、<xref:System.Windows.Input.CommandManager>コマンド実行のインフラストラクチャの大半を実装するクラス。</span><span class="sxs-lookup"><span data-stu-id="6cfab-119">This delegate also represents handlers for <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> and <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>, which are attached events on the <xref:System.Windows.Input.CommandManager> class that implements much of the commanding infrastructure.</span></span> <span data-ttu-id="6cfab-120">最も実用的なハンドラーが処理されます、<xref:System.Windows.Input.CommandBinding.Executed>特定からのイベント<xref:System.Windows.Input.CommandBinding>ではなくで機能するよりも、<xref:System.Windows.Input.CommandManager>レベル。</span><span class="sxs-lookup"><span data-stu-id="6cfab-120">But most practical handlers will handle the <xref:System.Windows.Input.CommandBinding.Executed> events from a particular <xref:System.Windows.Input.CommandBinding>, rather than work at the <xref:System.Windows.Input.CommandManager> level.</span></span>  
  
 <span data-ttu-id="6cfab-121">コマンド実行の詳細については、「[コマンド実行の概要](~/docs/framework/wpf/advanced/commanding-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6cfab-121">For more information on commanding, see [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cfab-122">この例で作成、<xref:System.Windows.Input.ExecutedRoutedEventHandler>コマンドを実行すると、ターゲットの視覚プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6cfab-122">This example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that sets a visual property on the target when the command is executed.</span></span> <span data-ttu-id="6cfab-123">例にも含まれています、<xref:System.Windows.Input.CanExecuteRoutedEventHandler>同じコマンド。</span><span class="sxs-lookup"><span data-stu-id="6cfab-123">The example also includes the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> for the same command.</span></span>  
  
 [!code-csharp[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/Custom_RoutedCommand/CSharp/Window1.xaml.cs#custom_routedcommandhandlers)]
 [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Custom_RoutedCommand/visualbasic/window1.xaml.vb#custom_routedcommandhandlers)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  </Docs>
</Type>