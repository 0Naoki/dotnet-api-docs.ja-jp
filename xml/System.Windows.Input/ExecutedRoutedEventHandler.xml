<Type Name="ExecutedRoutedEventHandler" FullName="System.Windows.Input.ExecutedRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e128fe4824481b4e3dc209fbcdd4599518ff8ebd" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70485048" /></Metadata><TypeSignature Language="C#" Value="public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExecutedRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ExecutedRoutedEventHandler(sender As Object, e As ExecutedRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ExecutedRoutedEventHandler(System::Object ^ sender, ExecutedRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type ExecutedRoutedEventHandler = delegate of obj * ExecutedRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender"><span data-ttu-id="153e7-101">イベント ハンドラーがアタッチされているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="153e7-101">The object where the event handler is attached.</span></span></param>
    <param name="e"><span data-ttu-id="153e7-102">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="153e7-102">The event data.</span></span></param>
    <summary><span data-ttu-id="153e7-103"><see cref="E:System.Windows.Input.CommandBinding.Executed" /> と <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> のルーティング イベントだけでなく、関連する添付イベントも処理するメソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="153e7-103">Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> and <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> routed events, as well as related attached events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="153e7-104">このデリゲートには、 <xref:System.Windows.Input.RoutedCommand>の実装ロジックが含まれています。</span><span class="sxs-lookup"><span data-stu-id="153e7-104">This delegate contains the implementation logic for a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="153e7-105">コマンドから実装ロジックを分離すると、さまざまなソースと型からコマンドを呼び出すことができ、コマンドロジックを一元化できます。</span><span class="sxs-lookup"><span data-stu-id="153e7-105">Separating the implementation logic from the command allows the command to be invoked from different sources and types, and enables the centralization of command logic.</span></span>  
  
 <span data-ttu-id="153e7-106">このデリゲートは、 <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType>および<xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>にも使用されます。これは<xref:System.Windows.Input.CommandManager> 、コマンドのインフラストラクチャの多くを実装するクラスの添付イベントです。</span><span class="sxs-lookup"><span data-stu-id="153e7-106">This delegate is also used for <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> and <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>, which are attached events on the <xref:System.Windows.Input.CommandManager> class that implements much of the commanding infrastructure.</span></span> <span data-ttu-id="153e7-107">しかし、ほとんどの実用的な<xref:System.Windows.Input.CommandBinding.Executed>ハンドラーでは、 <xref:System.Windows.Input.CommandBinding> <xref:System.Windows.Input.CommandManager>レベルで作業するのではなく、特定ののイベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="153e7-107">But most practical handlers will handle the <xref:System.Windows.Input.CommandBinding.Executed> events from a particular <xref:System.Windows.Input.CommandBinding>, rather than work at the <xref:System.Windows.Input.CommandManager> level.</span></span>  
  
 <span data-ttu-id="153e7-108">で<xref:System.Windows.Input.ExecutedRoutedEventArgs>は、実行されたコマンドの結果として発生するルーティングイベントのイベントハンドラーを記述するときに、通常、次のプロパティが重要になります。</span><span class="sxs-lookup"><span data-stu-id="153e7-108">Within <xref:System.Windows.Input.ExecutedRoutedEventArgs>, the following properties are generally of interest when you write an event handler for a routed event that results from an executed command:</span></span>  
  
-   <span data-ttu-id="153e7-109"><xref:System.Windows.RoutedEventArgs.Source%2A>コマンドが実行されたターゲットを報告します。</span><span class="sxs-lookup"><span data-stu-id="153e7-109"><xref:System.Windows.RoutedEventArgs.Source%2A> reports the target where the command was executed.</span></span> <span data-ttu-id="153e7-110">コマンドが実行されたら、ルーティングイベントを発生さ<xref:System.Windows.RoutedEventArgs.Source%2A>せたオブジェクトとして、ルーティングイベントの用語の方が一般的であると考えることもできます。</span><span class="sxs-lookup"><span data-stu-id="153e7-110">Once the command is executed, you can also think of the <xref:System.Windows.RoutedEventArgs.Source%2A> more generally in routed event terms, as the object that raised a routed event.</span></span>  
  
-   <span data-ttu-id="153e7-111"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A>実行されたコマンドを報告します。</span><span class="sxs-lookup"><span data-stu-id="153e7-111"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> reports the command that executed.</span></span> <span data-ttu-id="153e7-112">このプロパティは、コマンドバインドを使用する場合や、複数のコマンドを処理する可能性があるハンドラーを記述する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="153e7-112">This property is useful if you use command bindings and if you write handlers that potentially handle multiple commands.</span></span>  
  
-   <span data-ttu-id="153e7-113"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A>実行中のコマンドによって渡されたコマンド固有のパラメーターを報告します。</span><span class="sxs-lookup"><span data-stu-id="153e7-113"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> reports any command-specific parameters that were passed by the executing command.</span></span> <span data-ttu-id="153e7-114">すべてのコマンドがコマンド固有のパラメーターを使用したり、使用したりするわけではありません。</span><span class="sxs-lookup"><span data-stu-id="153e7-114">Not all commands use or expect command-specific parameters.</span></span>  
  
-   <span data-ttu-id="153e7-115"><xref:System.Windows.RoutedEventArgs.Handled%2A>実行されたコマンドからのルーティングイベントが、ルート上の別の要素によって既に処理されているかどうかを報告します。</span><span class="sxs-lookup"><span data-stu-id="153e7-115"><xref:System.Windows.RoutedEventArgs.Handled%2A> reports whether the routed event that resulted from the executed command was already handled by a different element along the route.</span></span> <span data-ttu-id="153e7-116">ルーティングイベントハンドラーの場合、に<xref:System.Windows.RoutedEventArgs.Handled%2A> `true`設定するイベントを処理するときに、意味のある処理を行うハンドラーを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="153e7-116">For routed event handlers, it is a recommended practice to have handlers that do meaningful work when handling the event to set <xref:System.Windows.RoutedEventArgs.Handled%2A> to `true`.</span></span> <span data-ttu-id="153e7-117">これにより、イベントの一般的なハンドラーが、ルートに沿ってもう一度イベントを処理するのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="153e7-117">This prevents typical handlers for the event from handling the event again further along the route.</span></span> <span data-ttu-id="153e7-118">ルーティングイベントの処理の詳細については、「[ルーティングイベントを処理済みとしてマークする」および「クラス処理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="153e7-118">For more information on handling routed events, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
 <span data-ttu-id="153e7-119">このデリゲート<xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> は、 <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType> およびのハンドラーも表します。これは、コマンドのインフラストラクチャの多くを実装するクラスのアタッチされたイベントです。 <xref:System.Windows.Input.CommandManager></span><span class="sxs-lookup"><span data-stu-id="153e7-119">This delegate also represents handlers for <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> and <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>, which are attached events on the <xref:System.Windows.Input.CommandManager> class that implements much of the commanding infrastructure.</span></span> <span data-ttu-id="153e7-120">しかし、ほとんどの実用的な<xref:System.Windows.Input.CommandBinding.Executed>ハンドラーでは、 <xref:System.Windows.Input.CommandBinding> <xref:System.Windows.Input.CommandManager>レベルで作業するのではなく、特定ののイベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="153e7-120">But most practical handlers will handle the <xref:System.Windows.Input.CommandBinding.Executed> events from a particular <xref:System.Windows.Input.CommandBinding>, rather than work at the <xref:System.Windows.Input.CommandManager> level.</span></span>  
  
 <span data-ttu-id="153e7-121">コマンド実行の詳細については、「[コマンド実行の概要](~/docs/framework/wpf/advanced/commanding-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="153e7-121">For more information on commanding, see [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="153e7-122">この例では<xref:System.Windows.Input.ExecutedRoutedEventHandler> 、コマンドの実行時にターゲットにビジュアルプロパティを設定するを作成します。</span><span class="sxs-lookup"><span data-stu-id="153e7-122">This example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that sets a visual property on the target when the command is executed.</span></span> <span data-ttu-id="153e7-123">この例では、 <xref:System.Windows.Input.CanExecuteRoutedEventHandler>同じコマンドのも含まれています。</span><span class="sxs-lookup"><span data-stu-id="153e7-123">The example also includes the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> for the same command.</span></span>  
  
 [!code-csharp[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/Custom_RoutedCommand/CSharp/Window1.xaml.cs#custom_routedcommandhandlers)]
 [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Custom_RoutedCommand/visualbasic/window1.xaml.vb#custom_routedcommandhandlers)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  </Docs>
</Type>
