<Type Name="ICommand" FullName="System.Windows.Input.ICommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ea5eff6a81bd27b0ab5ad70e628f1d59b7ee7f56" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30647936" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ICommand" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICommand" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICommand" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="be14d-101">コマンドを定義します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="be14d-101">Defines a command.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be14d-102"><xref:System.Windows.Input.RoutedCommand> および<xref:System.Windows.Input.RoutedUICommand>の 2 つの実装には、<xref:System.Windows.Input.ICommand>インターフェイスで[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="be14d-102"><xref:System.Windows.Input.RoutedCommand> and <xref:System.Windows.Input.RoutedUICommand> are two implementations of the <xref:System.Windows.Input.ICommand> interface in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</span></span>  
  
## <a name="icommand-in-windows-runtime-apps"></a><span data-ttu-id="be14d-103">ICommand で Windows ランタイム アプリ</span><span class="sxs-lookup"><span data-stu-id="be14d-103">ICommand in Windows Runtime apps</span></span>  
 <span data-ttu-id="be14d-104"><xref:System.Windows.Input.ICommand>インターフェイスは、Windows ランタイムに関する .NET アプリで記述されているコマンドのコード コントラクト。</span><span class="sxs-lookup"><span data-stu-id="be14d-104">The <xref:System.Windows.Input.ICommand> interface is the code contract for commands that are written in .NET for Windows Runtime apps.</span></span> <span data-ttu-id="be14d-105">これらのコマンドは、Windows ランタイム XAML などの UI 要素のコマンド実行の動作を提供`Button`と具体的には、`AppBarButton`です。</span><span class="sxs-lookup"><span data-stu-id="be14d-105">These commands provide the commanding behavior for UI elements such as a Windows Runtime XAML `Button` and in particular an `AppBarButton`.</span></span> <span data-ttu-id="be14d-106">Windows ランタイム アプリ用のコマンドを定義している場合を使用する基本的には、.NET アプリ用のコマンドを定義するのに使用すると同じ手法です。</span><span class="sxs-lookup"><span data-stu-id="be14d-106">If you're defining commands for Windows Runtime apps you use basically the same techniques you'd use for defining commands for a .NET app.</span></span> <span data-ttu-id="be14d-107">実装するクラスを定義することで、コマンドを実装する<xref:System.Windows.Input.ICommand>および実装では具体的には、<xref:System.Windows.Input.ICommand.Execute%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="be14d-107">Implement the command by defining a class that implements <xref:System.Windows.Input.ICommand> and specifically implement the <xref:System.Windows.Input.ICommand.Execute%2A> method.</span></span>  
  
 <span data-ttu-id="be14d-108">Windows ランタイムの XAML をサポートしない x`:Static`を使用しようとしていないため、 `x:Static` Windows ランタイムの XAML からコマンドを使用する場合、マークアップ拡張機能です。</span><span class="sxs-lookup"><span data-stu-id="be14d-108">XAML for Windows Runtime does not support x`:Static`, so don't attempt to use the `x:Static` markup extension if the command is used from Windows Runtime XAML.</span></span> <span data-ttu-id="be14d-109">また、XAML 構文を次に示すはインターフェイスを実装して Windows ランタイムの使用状況のコマンドを定義している場合、実際に適用されませんので、Windows ランタイムには定義済みのコマンドのすべてのライブラリはありません。</span><span class="sxs-lookup"><span data-stu-id="be14d-109">Also, the Windows Runtime does not have any predefined command libraries, so the XAML syntax shown here doesn't really apply for the case where you're implementing the interface and defining the command for Windows Runtime usage.</span></span>  
  
<a name="xamlTextUsage_ICommand"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="be14d-110">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="be14d-110">XAML Attribute Usage</span></span>  
 <span data-ttu-id="be14d-111">\<*object property*="*predefinedCommandName*"/></span><span class="sxs-lookup"><span data-stu-id="be14d-111">\<*object property*="*predefinedCommandName*"/></span></span>  
  
 <span data-ttu-id="be14d-112">\- または</span><span class="sxs-lookup"><span data-stu-id="be14d-112">\- or -</span></span>  
  
 <span data-ttu-id="be14d-113">\<*object property*="*predefinedCommandName.predefinedCommandName*"/></span><span class="sxs-lookup"><span data-stu-id="be14d-113">\<*object property*="*predefinedCommandName.predefinedCommandName*"/></span></span>  
  
 <span data-ttu-id="be14d-114">\- または</span><span class="sxs-lookup"><span data-stu-id="be14d-114">\- or -</span></span>  
  
 <span data-ttu-id="be14d-115">\<*object property*="{ *customClassName.customCommandName*}"/></span><span class="sxs-lookup"><span data-stu-id="be14d-115">\<*object property*="{ *customClassName.customCommandName*}"/></span></span>  
  
<a name="xamlValues_ICommand"></a>   
## <a name="xaml-values"></a><span data-ttu-id="be14d-116">XAML 値</span><span class="sxs-lookup"><span data-stu-id="be14d-116">XAML Values</span></span>  
 <span data-ttu-id="be14d-117">*predefinedClassName*</span><span class="sxs-lookup"><span data-stu-id="be14d-117">*predefinedClassName*</span></span>  
 <span data-ttu-id="be14d-118">定義済みのコマンド クラスの 1 つ。</span><span class="sxs-lookup"><span data-stu-id="be14d-118">One of the predefined command classes.</span></span>  
  
 <span data-ttu-id="be14d-119">*predefinedCommandName*</span><span class="sxs-lookup"><span data-stu-id="be14d-119">*predefinedCommandName*</span></span>  
 <span data-ttu-id="be14d-120">定義済みのコマンドのいずれか。</span><span class="sxs-lookup"><span data-stu-id="be14d-120">One of the predefined commands.</span></span>  
  
 <span data-ttu-id="be14d-121">*customClassName*</span><span class="sxs-lookup"><span data-stu-id="be14d-121">*customClassName*</span></span>  
 <span data-ttu-id="be14d-122">カスタム コマンドが含まれたカスタム クラス。</span><span class="sxs-lookup"><span data-stu-id="be14d-122">A custom class that contains the custom command.</span></span> <span data-ttu-id="be14d-123">カスタム クラスは一般的に必要な`xlmns`プレフィックスのマッピングは、参照してください[XAML 名前空間と WPF XAML 向け Namespace マッピング](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)です。</span><span class="sxs-lookup"><span data-stu-id="be14d-123">Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span></span>  
  
 <span data-ttu-id="be14d-124">*customCommandName*</span><span class="sxs-lookup"><span data-stu-id="be14d-124">*customCommandName*</span></span>  
 <span data-ttu-id="be14d-125">カスタム コマンド。</span><span class="sxs-lookup"><span data-stu-id="be14d-125">A custom command.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="be14d-126">コマンドにより使用されるデータです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be14d-126">Data used by the command.</span>
          </span>
          <span data-ttu-id="be14d-127">コマンドにデータを渡す必要がない場合は、このオブジェクトを <see langword="null" /> に設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be14d-127">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="be14d-128">現在の状態でコマンドが実行可能かどうかを決定するメソッドを定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be14d-128">Defines the method that determines whether the command can execute in its current state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="be14d-129">このコマンドを実行できる場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be14d-129">
              <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be14d-130">コマンド ソースが通常は、呼び出し、<xref:System.Windows.Input.ICommand.CanExecute%2A>メソッドと、<xref:System.Windows.Input.ICommand.CanExecuteChanged>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="be14d-130">Typically, a command source calls the <xref:System.Windows.Input.ICommand.CanExecute%2A> method when the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommandSource" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.ICommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CanExecuteChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="be14d-131">コマンドを実行するかどうかに影響するような変更があった場合に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be14d-131">Occurs when changes occur that affect whether or not the command should execute.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be14d-132">通常は、コマンド ソースが呼び出す<xref:System.Windows.Input.ICommand.CanExecute%2A>でこのイベントが発生したときにコマンド。</span><span class="sxs-lookup"><span data-stu-id="be14d-132">Normally, a command source calls <xref:System.Windows.Input.ICommand.CanExecute%2A> on the command when this event occurs.</span></span>  
  
 <span data-ttu-id="be14d-133">通常は、コマンドを実行できない場合コマンド ソース無効になります。</span><span class="sxs-lookup"><span data-stu-id="be14d-133">Normally, if the command cannot execute, the command source disables itself.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommandSource" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ICommand.Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="be14d-134">コマンドにより使用されるデータです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be14d-134">Data used by the command.</span>
          </span>
          <span data-ttu-id="be14d-135">コマンドにデータを渡す必要がない場合は、このオブジェクトを <see langword="null" /> に設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be14d-135">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="be14d-136">コマンドが起動される際に呼び出すメソッドを定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be14d-136">Defines the method to be called when the command is invoked.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.ICommandSource" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>