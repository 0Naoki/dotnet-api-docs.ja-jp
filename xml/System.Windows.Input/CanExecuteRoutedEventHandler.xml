<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d59f4554561d75bef1c57729e43a1f1ef365511f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69173320" /></Metadata><TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventHandler = delegate of obj * CanExecuteRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender"><span data-ttu-id="a713e-101">ハンドラーを起動しているコマンドの対象。</span><span class="sxs-lookup"><span data-stu-id="a713e-101">The command target that is invoking the handler.</span></span></param>
    <param name="e"><span data-ttu-id="a713e-102">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="a713e-102">The event data.</span></span></param>
    <summary><span data-ttu-id="a713e-103"><see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> イベントを処理するメソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="a713e-103">Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a713e-104">は<xref:System.Windows.Input.CanExecuteRoutedEventHandler> 、イベントソースに関連付けられたコマンドをコマンドターゲットで実行できるかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="a713e-104">The <xref:System.Windows.Input.CanExecuteRoutedEventHandler> determines if the command associated with the event source is able to execute on the command target.</span></span> <span data-ttu-id="a713e-105">コマンドにターゲットを指定するコマンドソースがある場合は、を使用して`sender`ターゲット情報を取得できます。</span><span class="sxs-lookup"><span data-stu-id="a713e-105">If the command has a command source that specifies a target, then the target information can be obtained through `sender`.</span></span> <span data-ttu-id="a713e-106">が設定されていない場合、キーボードフォーカスを持つ要素はターゲットになり、を通じ`sender`て取得することもできます。 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A></span><span class="sxs-lookup"><span data-stu-id="a713e-106">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set, the element with keyboard focus is the target, and can also be obtained through `sender`.</span></span>  <span data-ttu-id="a713e-107">コマンドがターゲット<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType>で実行可能であると判断された場合は、プロパティをに`true`設定する必要があります。 `false`それ以外の場合はに設定します。</span><span class="sxs-lookup"><span data-stu-id="a713e-107">If it is determined that the command can execute on the target, then the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> property should be set to `true`; otherwise, set it to `false`.</span></span>  
  
 <span data-ttu-id="a713e-108">コマンド、ソース、およびターゲットを決定するためにイベントデータに依存する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="a713e-108">You do not need to rely on event data to determine the command, source, and target.</span></span> <span data-ttu-id="a713e-109">ハンドラーの使用を既知のコマンド呼び出しに限定することができますが、これは、コマンドの構造がコマンドのルーティングに大きく依存しており、イベント内の潜在的なターゲットの連続で同じコマンドを実行する場合には、これを実現するのが困難です。回送.</span><span class="sxs-lookup"><span data-stu-id="a713e-109">You can limit the usage of the handler to known possible command invocations, although this is more difficult to accomplish if your command structure relies extensively on the command routing to execute the same command on successive potential targets in an event route.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a713e-110">をに<xref:System.Windows.Input.CanExecuteRoutedEventHandler> 設定`true`するの例を次に示します。 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A></span><span class="sxs-lookup"><span data-stu-id="a713e-110">The following example shows a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.</span></span>  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>
