<Type Name="KeyGesture" FullName="System.Windows.Input.KeyGesture">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af3cf6906527baf13ce4f41f7aba1f115dce8177" /><Meta Name="ms.sourcegitcommit" Value="e7974886b08aa83a8fb461e8550f31a7d4331ee3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="07/23/2019" /><Meta Name="ms.locfileid" Value="68399730" /></Metadata><TypeSignature Language="C#" Value="public class KeyGesture : System.Windows.Input.InputGesture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyGesture extends System.Windows.Input.InputGesture" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyGesture" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyGesture&#xA;Inherits InputGesture" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyGesture : System::Windows::Input::InputGesture" />
  <TypeSignature Language="F#" Value="type KeyGesture = class&#xA;    inherit InputGesture" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputGesture</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>コマンドを呼び出すために使用できる、キーの組み合わせを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ほとんどの場合、 <xref:System.Windows.Input.KeyGesture>は1つ<xref:System.Windows.Input.ModifierKeys>以上のに関連付けられている必要があります。 この規則の例外として、関数キーとテンキーのキーがあります。これは<xref:System.Windows.Input.KeyGesture> 、単独で有効にすることができます。 たとえば、F12 キーのみを使用<xref:System.Windows.Input.KeyGesture>してを作成できますが、 <xref:System.Windows.Input.KeyGesture>で X キーを使用するには、修飾子キーと対にする必要があります。  
  
 一般に、  
  
 を使用<xref:System.Windows.Input.KeyBinding>すると、を<xref:System.Windows.Input.KeyGesture>に<xref:System.Windows.Input.ICommand>バインドして、が<xref:System.Windows.Input.KeyGesture>発生したときにコマンドが呼び出されるようにすることができます。  
  
 使用<xref:System.Windows.Input.KeyGesture>する[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]場合、通常はで[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]設定されるプロパティ<xref:System.Windows.Input.KeyBinding.Gesture%2A>はです。これは、ジェスチャが標準キーと修飾子キーの両方を表している場合に使用されます。 また、 <xref:System.Windows.Input.KeyBinding.Gesture%2A>プロパティを関数キーだけに設定することも、修飾子キーの組み合わせを使用することもできます。 ただし、意図したコマンドバインディングが修飾子<xref:System.Windows.Input.KeyBinding.Key%2A>のない関数キーの場合、または<xref:System.Windows.Input.KeyBinding.Modifiers%2A>目的のコマンドバインドが修飾子キーの場合にのみ使用される場合は、プロパティを設定する方が一般的です。  
  
<a name="xamlAttributeUsage_KeyGesture"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object property="oneOrMoreModifierKeys+key"/>  
- or -  
<object property="functionKey"/>  
```  
  
<a name="xamlValues_KeyGesture"></a>   
## <a name="xaml-values"></a>XAML 値  
 `functionKey`  
 <xref:System.Windows.Input.Key>  
  
 1つのキー値。関数キー (F1 + 12) またはテンキーのキーのいずれかである必要があります。  
  
 `oneOrMoreModifierKeys`  
 列挙体で定義される<xref:System.Windows.Input.ModifierKeys> 、"+" 文字で区切られた1つ以上の修飾キー。  
  
 `key`  
 <xref:System.Windows.Input.Key>  
  
 1つのキー値。  
  
   
  
## Examples  
 次の例は、を<xref:System.Windows.Input.ApplicationCommands.Close%2A> <xref:System.Windows.Input.KeyGesture>使用して<xref:System.Windows.Input.KeyBinding>コマンドをにバインドする方法を示しています。  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 次の例は、の<xref:System.Windows.Input.KeyGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]を使用する方法を示しています。 使用方法に[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]よって要素が`<KeyGesture>`直接宣言されるわけではないことに注意してください。 は、パラメーターなしのパブリックコンストラクターを<xref:System.Windows.Input.KeyGesture>公開しないため、このオブジェクト要素の使用はできません。 代わりに、typeconverter [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]動作を使用して、インライン全体<xref:System.Windows.Input.KeyGesture>を`Gesture`属性値として宣言します。  
  
 [!code-xaml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.InputGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Input.KeyGesture" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key">このジェスチャに関連付けられるキー。</param>
        <summary><see cref="T:System.Windows.Input.KeyGesture" /> を指定して、<see cref="T:System.Windows.Input.Key" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ほとんどの場合、 <xref:System.Windows.Input.KeyGesture>は1つ<xref:System.Windows.Input.ModifierKeys>以上のに関連付けられている必要があります。  この規則の例外として、関数キーとテンキーのキーがあります。これは<xref:System.Windows.Input.KeyGesture> 、単独で有効にすることができます。  
  
   
  
## Examples  
 次の例は、このコンストラクターを使用してを<xref:System.Windows.Input.KeyGesture>作成し、それ<xref:System.Windows.Input.KeyBinding>をに関連付ける方法を示しています。  次<xref:System.Windows.Input.KeyBinding> <xref:System.Windows.Window>に、がのに追加されます。<xref:System.Windows.Input.InputBindingCollection>  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithnomodifier)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithnomodifier)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="key" /> は有効な <see cref="T:System.Windows.Input.Key" /> ではありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> は有効な <see cref="T:System.Windows.Input.KeyGesture" /> ではありません。</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="key">ジェスチャに関連付けられているキー。</param>
        <param name="modifiers">ジェスチャに関連付けられている変換キー。</param>
        <summary>指定された <see cref="T:System.Windows.Input.KeyGesture" /> と <see cref="T:System.Windows.Input.Key" /> を使用して、<see cref="T:System.Windows.Input.ModifierKeys" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ほとんどの場合、 <xref:System.Windows.Input.KeyGesture>は1つ<xref:System.Windows.Input.ModifierKeys>以上のに関連付けられている必要があります。 この規則の例外として、関数キーとテンキーのキーがあります。これは<xref:System.Windows.Input.KeyGesture> 、単独で有効にすることができます。  
  
   
  
## Examples  
 次の例は、このコンストラクターを使用してを<xref:System.Windows.Input.KeyGesture>作成し、それ<xref:System.Windows.Input.KeyBinding>をに関連付ける方法を示しています。 次<xref:System.Windows.Input.KeyBinding> <xref:System.Windows.Window>に、がのに追加されます。<xref:System.Windows.Input.InputBindingCollection>  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers" /> は有効な <see cref="T:System.Windows.Input.ModifierKeys" /> ではありません。  
  
- または - 
 <paramref name="key" /> は有効な <see cref="T:System.Windows.Input.Key" /> ではありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> と <paramref name="modifiers" /> では、有効な <see cref="T:System.Windows.Input.KeyGesture" /> になりません。</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers, string displayString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers, System::String ^ displayString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys * string -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers, displayString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
        <Parameter Name="displayString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">ジェスチャに関連付けられているキー。</param>
        <param name="modifiers">ジェスチャに関連付けられている変換キー。</param>
        <param name="displayString"><see cref="T:System.Windows.Input.KeyGesture" /> の文字列形式。</param>
        <summary><see cref="T:System.Windows.Input.KeyGesture" />、<see cref="T:System.Windows.Input.Key" />、および表示文字列を指定して、<see cref="T:System.Windows.Input.ModifierKeys" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティは、 `displayString`パラメーターに設定されます。 <xref:System.Windows.Input.KeyGesture.DisplayString%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers" /> は有効な <see cref="T:System.Windows.Input.ModifierKeys" /> ではありません。  
  
- または - 
 <paramref name="key" /> は有効な <see cref="T:System.Windows.Input.Key" /> ではありません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="displayString" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> と <paramref name="modifiers" /> では、有効な <see cref="T:System.Windows.Input.KeyGesture" /> になりません。</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="DisplayString">
      <MemberSignature Language="C#" Value="public string DisplayString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.DisplayString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayString : string" Usage="System.Windows.Input.KeyGesture.DisplayString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Input.KeyGesture" /> の文字列表現を取得します。</summary>
        <value>この <see cref="T:System.Windows.Input.KeyGesture" /> の表示文字列。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表示文字列がコンストラクターで設定されていない場合は、空の文字列が返されます。  
  
 このプロパティが空の場合、 <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>メソッドは、 <xref:System.Windows.Input.KeyGesture.Key%2A>および<xref:System.Windows.Input.KeyGesture.Modifiers%2A>から作成された文字列を返します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="GetDisplayStringForCulture">
      <MemberSignature Language="C#" Value="public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDisplayStringForCulture(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDisplayStringForCulture (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetDisplayStringForCulture(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetDisplayStringForCulture : System.Globalization.CultureInfo -&gt; string" Usage="keyGesture.GetDisplayStringForCulture culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">カルチャ固有の情報。</param>
        <summary><see cref="T:System.Windows.Input.KeyGesture" /> の表示に使用できる文字列を返します。</summary>
        <returns>表示する文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表示文字列がコンストラクターによって設定された場合、その文字列が返されます。それ以外の場合は、および<xref:System.Windows.Input.KeyGesture.Key%2A> <xref:System.Windows.Input.KeyGesture.Modifiers%2A>から、指定した<xref:System.Globalization.CultureInfo>オブジェクトによって管理される必要な変換を使用して、文字列が作成されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key" Usage="System.Windows.Input.KeyGesture.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Input.KeyGesture" /> に関連付けられているキーを取得します。</summary>
        <value>ジェスチャに関連付けられているキー。  既定値は <see cref="F:System.Windows.Input.Key.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ほとんどの場合、 <xref:System.Windows.Input.KeyGesture>は1つ<xref:System.Windows.Input.ModifierKeys>以上のに関連付けられている必要があります。  この規則の例外として、関数キーとテンキーのキーがあります。これは<xref:System.Windows.Input.KeyGesture> 、単独で有効にすることができます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Matches(object targetElement, class System.Windows.Input.InputEventArgs inputEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Matches(System::Object ^ targetElement, System::Windows::Input::InputEventArgs ^ inputEventArgs);" />
      <MemberSignature Language="F#" Value="override this.Matches : obj * System.Windows.Input.InputEventArgs -&gt; bool" Usage="keyGesture.Matches (targetElement, inputEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetElement" Type="System.Object" />
        <Parameter Name="inputEventArgs" Type="System.Windows.Input.InputEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetElement">ターゲット。</param>
        <param name="inputEventArgs">このジェスチャの比較対象となる入力イベント データ。</param>
        <summary>指定した <see cref="T:System.Windows.Input.KeyGesture" /> オブジェクトに関連付けられた入力に、この <see cref="T:System.Windows.Input.InputEventArgs" /> が一致するかどうかを判断します。</summary>
        <returns>イベント データがこの <see cref="T:System.Windows.Input.KeyGesture" /> に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `targetElement`を使用すると、特定の要素に対してコマンドを呼び出す必要があるかどうかについて、より具体的な決定を行うことができます。  
  
   
  
## Examples  
 次の例は、が<xref:System.Windows.Input.KeyGesture> <xref:System.Windows.Input.InputEventArgs>のインスタンスに関連付けられている入力と一致するかどうかをテストする方法を示しています。 メソッドを使用<xref:System.Windows.Input.KeyGesture> <xref:System.Windows.UIElement.KeyDown>して、イベントデータとを比較するイベントハンドラーが作成されます。 <xref:System.Windows.Input.KeyGesture.Matches%2A>  
  
 [!code-csharp[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keydownhandlerkeygesturematches)]
 [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keydownhandlerkeygesturematches)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys" Usage="System.Windows.Input.KeyGesture.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Input.KeyGesture" /> に関連付けられている変換キーを取得します。</summary>
        <value>ジェスチャに関連付けられている変換キー。 既定値は <see cref="F:System.Windows.Input.ModifierKeys.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ほとんどの場合、 <xref:System.Windows.Input.KeyGesture>は1つ<xref:System.Windows.Input.ModifierKeys>以上のに関連付けられている必要があります。 この規則の例外として、関数キーとテンキーのキーがあります。これは<xref:System.Windows.Input.KeyGesture> 、単独で有効にすることができます。 たとえば、F12 キーのみを使用<xref:System.Windows.Input.KeyGesture>してを作成できますが、 <xref:System.Windows.Input.KeyGesture>で X キーを使用するには、修飾子キーと対にする必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
  </Members>
</Type>