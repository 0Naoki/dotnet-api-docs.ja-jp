<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CommandManager.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5174db82edff5383f90d1d46c76c2a625f61f628a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">174db82edff5383f90d1d46c76c2a625f61f628a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.CommandManager">
          <source>Provides command related utility methods that register <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> objects for class owners and commands, add and remove command event handlers, and provides services for querying the status of a command.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> オブジェクトと <ph id="ph2">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> オブジェクトをクラス所有者およびコマンドに登録するコマンド関連ユーティリティ メソッドの提供、コマンドのイベント ハンドラーの追加と削除、およびコマンド ステータスの照会サービスの提供を行います。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> is responsible for managing routed commands.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>ルーティング コマンドの管理を行います。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>For more information about commanding, see <bpt id="p1">[</bpt>Commanding Overview<ept id="p1">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept>.</source>
          <target state="translated">コマンド実行の詳細については、次を参照してください。<bpt id="p1">[</bpt>コマンド実行の概要<ept id="p1">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A&gt;</ph> to register a <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> to a class as opposed to an instance.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A&gt;</ph>を登録する、<ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>クラス インスタンスとは対照的にします。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph> to register an <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> to a class as opposed to an instance.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph>を登録する、<ph id="ph2">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>クラス インスタンスとは対照的にします。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> method forces the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> to raise the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph>メソッド フォース、<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>させる、<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event informs a command source to query the command it is associated with to determine whether or not the command can execute.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph>イベントは、コマンド ソース クエリに関連付けられているコマンドを実行できるかどうかを決定するコマンドに通知します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The element to attach <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> の割り当て先の要素。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">実行可能ハンドラー。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Attaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> to the specified element.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> を指定した要素に割り当てます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and attaches them to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> which is a command source for the <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>それらに接続し、<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>はのコマンド ソース、<ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>コマンド。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>First, the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is created and associated with the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">最初に、<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>が作成され、関連付け、<ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>コマンド。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> are created.</source>
          <target state="translated">次に、<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>が作成されます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>And finally, the handlers are attached to the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>.</source>
          <target state="translated">ハンドラーが最後に、関連付けられている、<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>を使用して、<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> または <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The element to attach <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> の割り当て先の要素。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The executed handler.</source>
          <target state="translated">実行済みハンドラー。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Attaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> to the specified element.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> を指定した要素に割り当てます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and attaches them to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> which is a command source for the <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>それらに接続し、<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>はのコマンド ソース、<ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>コマンド。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>First, the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is created and associated with the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">最初に、<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>が作成され、関連付け、<ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>コマンド。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> are created.</source>
          <target state="translated">次に、<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>が作成されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>And finally, the handlers are attached to the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>.</source>
          <target state="translated">ハンドラーが最後に、関連付けられている、<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>を使用して、<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> または <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The element to attach <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> の割り当て先の要素。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">実行可能ハンドラー。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Attaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> to the specified element.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> を指定した要素に割り当てます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and attaches them to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> which is a command source for the <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>それらに接続し、<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>はのコマンド ソース、<ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>コマンド。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>First, the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is created and associated with the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">最初に、<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>が作成され、関連付け、<ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>コマンド。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> are created.</source>
          <target state="translated">次に、<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>が作成されます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Finally, the handlers are attached to the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>.</source>
          <target state="translated">ハンドラーが最後に、関連付けられている、<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>を使用して、<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> または <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The element to attach <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> の割り当て先の要素。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">実行可能ハンドラー。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Attaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> to the specified element.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> を指定した要素に割り当てます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and attaches them to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> which is a command source for the <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>それらに接続し、<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>はのコマンド ソース、<ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>コマンド。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>First, the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is created and associated with the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">最初に、<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>が作成され、関連付け、<ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph>コマンド。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> are created.</source>
          <target state="translated">次に、<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>が作成されます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Finally, the handlers are attached to the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>.</source>
          <target state="translated">ハンドラーが最後に、関連付けられている、<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>を使用して、<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> または <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.CommandManager.CanExecuteEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.CanExecute" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.CanExecute" /&gt;</ph> 添付イベントを識別します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.CommandManager.ExecutedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.Executed" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.Executed" /&gt;</ph> 添付イベントを識別します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
          <source>Forces the <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandManager" /&gt;</ph> to raise the <ph id="ph2">&lt;see cref="E:System.Windows.Input.CommandManager.RequerySuggested" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandManager" /&gt;</ph> に、<ph id="ph2">&lt;see cref="E:System.Windows.Input.CommandManager.RequerySuggested" /&gt;</ph> イベントを強制的に発生させます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> only pays attention to certain conditions in determining when the command target has changed, such as change in keyboard focus.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>コマンドの対象が変更されたとき、キーボード フォーカスの変化などを判断する特定の条件にのみ注目します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
          <source>In situations where the <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> does not sufficiently determine a change in conditions that cause a command to not be able to execute, <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> can be called to force the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> to raise the <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event.</source>
          <target state="translated">状況で場所、<ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>コマンドを実行できないことが条件の変更は十分に判断されません<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph>を強制的に呼び出すことができます、<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>させる、<ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
          <source>The following example uses a <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherTimer&gt;</ph> to periodically call <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> to force the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> to raise the <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherTimer&gt;</ph>を定期的に呼び出す<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph>を強制的に、<ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>させる、<ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.CommandManager.PreviewCanExecuteEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /&gt;</ph> 添付イベントを識別します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.CommandManager.PreviewExecutedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /&gt;</ph> 添付イベントを識別します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source>The class with which to register <bpt id="p1">&lt;c&gt;</bpt>commandBinding<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>commandBinding<ept id="p1">&lt;/c&gt;</ept> を登録するクラス。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source>The command binding to register.</source>
          <target state="translated">登録するコマンド バインディング。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source>Registers a <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> with the specified type.</source>
          <target state="translated">指定した型に <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> を登録します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source>This method enables a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> to be associated with a class instead than an instance of a class.</source>
          <target state="translated">このメソッドにより、<ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>と関連するクラス、クラスのインスタンスよりもには、代わりにします。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> or <ph id="ph2">&lt;paramref name="commandBinding" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> または <ph id="ph2">&lt;paramref name="commandBinding" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source>The type to register <bpt id="p1">&lt;c&gt;</bpt>inputBinding<ept id="p1">&lt;/c&gt;</ept> with.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>inputBinding<ept id="p1">&lt;/c&gt;</ept> の登録に使用する型。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source>The input binding to register.</source>
          <target state="translated">登録する入力バインディング。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source>Registers the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> with the specified type.</source>
          <target state="translated">指定した型に、指定した <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> を登録します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source>This method enables an <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> to be associated with a type instead of an instance of a class.</source>
          <target state="translated">このメソッドにより、<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>クラスのインスタンスではなく型に関連付ける。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inputBinding" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> または <ph id="ph2">&lt;paramref name="inputBinding" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The element to remove <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> from.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> の削除元となる要素。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">実行可能ハンドラー。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Detaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> from the specified element.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> の割り当てを、指定した要素から解除します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The following example detaches a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> which had previously been attached to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">次の例のデタッチ、<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>これが以前にアタッチされていません、<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> または <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The element to remove <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> from.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> の削除元となる要素。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The executed handler.</source>
          <target state="translated">実行済みハンドラー。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Detaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> from the specified element.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> の割り当てを、指定した要素から解除します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The following example detaches a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> which had previously been attached to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">次の例のデタッチ、<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>これが以前にアタッチされていません、<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> または <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The element to remove <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> from.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> の削除元となる要素。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">実行可能ハンドラー。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Detaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> from the specified element.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> の割り当てを、指定した要素から解除します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The following example detaches a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> which had previously been attached to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">次の例のデタッチ、<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>これが以前にアタッチされていません、<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> または <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The element to remove <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> from.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> の削除元となる要素。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The executed handler.</source>
          <target state="translated">実行済みハンドラー。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Detaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> from the specified element.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> の割り当てを、指定した要素から解除します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The following example detaches a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> which had previously been attached to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">次の例のデタッチ、<ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph>これが以前にアタッチされていません、<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> または <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="E:System.Windows.Input.CommandManager.RequerySuggested">
          <source>Occurs when the <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandManager" /&gt;</ph> detects conditions that might change the ability of a command to execute.</source>
          <target state="translated">コマンドを実行できるかどうかを変更する可能性のある条件が <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandManager" /&gt;</ph> によって検出された場合に発生します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.CommandManager.RequerySuggested">
          <source>This event holds onto the handler as a weak reference.</source>
          <target state="translated">このイベントは、弱い参照としてハンドラーに格納します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.CommandManager.RequerySuggested">
          <source>Objects that listen for this event should keep a strong reference to their event handler to avoid it being garbage collected.</source>
          <target state="translated">このイベントをリッスンしているオブジェクトは、れると、ガベージ コレクションを回避するには、そのイベント ハンドラーに強い参照を保持する必要があります。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.CommandManager.RequerySuggested">
          <source>This can be accomplished by having a private field and assigning the handler as the value before or after attaching to this event.</source>
          <target state="translated">これは、このイベントにアタッチした後、プライベート フィールドを持つとする前に、または値として、ハンドラーを割り当てることで達成できます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>