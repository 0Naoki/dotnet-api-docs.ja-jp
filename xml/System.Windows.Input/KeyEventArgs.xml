<Type Name="KeyEventArgs" FullName="System.Windows.Input.KeyEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b5ce8ef1ff9c5ab01c9aedf6c60bf0a2c215c836" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69172925" /></Metadata><TypeSignature Language="C#" Value="public class KeyEventArgs : System.Windows.Input.KeyboardEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyEventArgs extends System.Windows.Input.KeyboardEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyEventArgs&#xA;Inherits KeyboardEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyEventArgs : System::Windows::Input::KeyboardEventArgs" />
  <TypeSignature Language="F#" Value="type KeyEventArgs = class&#xA;    inherit KeyboardEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.KeyboardEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0873b-101"><see cref="E:System.Windows.UIElement.KeyUp" /> および <see cref="E:System.Windows.UIElement.KeyDown" /> ルーティング イベントに加えて、関連添付イベントおよびプレビュー イベントのデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="0873b-101">Provides data for the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> routed events, as well as related attached and Preview events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0873b-102">このイベントデータクラスは、次の添付イベントで使用されます。</span><span class="sxs-lookup"><span data-stu-id="0873b-102">This event data class is used with the following attached events:</span></span>  
  
-   <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>  
  
 <span data-ttu-id="0873b-103">このイベントデータクラスは、基本要素の次のルーティングイベントでも使用されます。</span><span class="sxs-lookup"><span data-stu-id="0873b-103">This event data class is also used with the following routed events on base elements.</span></span> <span data-ttu-id="0873b-104">これらのルーティングイベントは、前に示した添付イベントを転送して、の[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]一般的な要素モデルによりアクセスできるようにします。</span><span class="sxs-lookup"><span data-stu-id="0873b-104">These routed events forward the previously listed attached events to make them more accessible to the general element model in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span>  
  
-   <xref:System.Windows.UIElement.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=nameWithType>  
  
 <span data-ttu-id="0873b-105">添付イベントと基本要素のルーティングイベントは、イベントデータを共有します。また、ルーティングイベントのバブルおよびトンネリングバージョンも、イベントデータを共有します。</span><span class="sxs-lookup"><span data-stu-id="0873b-105">The attached events and the base element routed events share their event data, and the bubbling and tunneling versions of the routed events also share event data.</span></span> <span data-ttu-id="0873b-106">これは、イベントがルーティングされるときにイベントの処理される特性に影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0873b-106">This can affect the handled characteristics of the event as it travels the event route.</span></span> <span data-ttu-id="0873b-107">詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0873b-107">For details, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="0873b-108">キーは、上下の状態またはダウン状態と切り替え状態の両方にできます。</span><span class="sxs-lookup"><span data-stu-id="0873b-108">A key can be in both the up and toggled states or the down and toggled states.</span></span> <span data-ttu-id="0873b-109">このため、キーが上または下にあるかどうかを判断することは<xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> 、値を数値としてチェックするだけではありません。</span><span class="sxs-lookup"><span data-stu-id="0873b-109">For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value.</span></span> <span data-ttu-id="0873b-110">代わりに、値をフラグの列挙体として扱うことによって、値を確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0873b-110">Instead, you should check the value by treating it as a flag enumeration.</span></span> <span data-ttu-id="0873b-111">最初のビットの比較を使用します。`AND`</span><span class="sxs-lookup"><span data-stu-id="0873b-111">Use an `AND` comparison of the first bit.</span></span> <span data-ttu-id="0873b-112">または、ヘルパープロパティ<xref:System.Windows.Input.KeyEventArgs.IsUp%2A> <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>、、およびを<xref:System.Windows.Input.KeyEventArgs.IsToggled%2A>使用して、特定のキーが稼働しているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="0873b-112">Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyEventHandler" />
    <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
    <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyEventArgs (System.Windows.Input.KeyboardDevice keyboard, System.Windows.PresentationSource inputSource, int timestamp, System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.KeyboardDevice keyboard, class System.Windows.PresentationSource inputSource, int32 timestamp, valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyEventArgs(System::Windows::Input::KeyboardDevice ^ keyboard, System::Windows::PresentationSource ^ inputSource, int timestamp, System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyEventArgs : System.Windows.Input.KeyboardDevice * System.Windows.PresentationSource * int * System.Windows.Input.Key -&gt; System.Windows.Input.KeyEventArgs" Usage="new System.Windows.Input.KeyEventArgs (keyboard, inputSource, timestamp, key)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keyboard" Type="System.Windows.Input.KeyboardDevice" />
        <Parameter Name="inputSource" Type="System.Windows.PresentationSource" />
        <Parameter Name="timestamp" Type="System.Int32" />
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="keyboard"><span data-ttu-id="0873b-113">このイベントに関連付けられた論理キーボード デバイス。</span><span class="sxs-lookup"><span data-stu-id="0873b-113">The logical keyboard device associated with this event.</span></span></param>
        <param name="inputSource"><span data-ttu-id="0873b-114">入力ソース。</span><span class="sxs-lookup"><span data-stu-id="0873b-114">The input source.</span></span></param>
        <param name="timestamp"><span data-ttu-id="0873b-115">入力が発生した時刻。</span><span class="sxs-lookup"><span data-stu-id="0873b-115">The time when the input occurred.</span></span></param>
        <param name="key"><span data-ttu-id="0873b-116">イベントが参照するキー。</span><span class="sxs-lookup"><span data-stu-id="0873b-116">The key referenced by the event.</span></span></param>
        <summary><span data-ttu-id="0873b-117"><see cref="T:System.Windows.Input.KeyEventArgs" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="0873b-117">Initializes a new instance of the <see cref="T:System.Windows.Input.KeyEventArgs" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="DeadCharProcessedKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key DeadCharProcessedKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key DeadCharProcessedKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.DeadCharProcessedKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeadCharProcessedKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key DeadCharProcessedKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.DeadCharProcessedKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.DeadCharProcessedKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0873b-118">1 つの組み合わせ文字を作成するデッド キー構成の一部であるキーを取得します。</span><span class="sxs-lookup"><span data-stu-id="0873b-118">Gets the key that is part of dead key composition to create a single combined character.</span></span></summary>
        <value><span data-ttu-id="0873b-119">1 つの組み合わせ文字を作成するデッド キー構成の一部であるキー。</span><span class="sxs-lookup"><span data-stu-id="0873b-119">The key that is part of dead key composition to create a single combined character.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0873b-120">押されたキーを押すと、表示される文字は生成されませんが、キーが、次の文字キーが押されたときに生成される文字と結合されることを示します。</span><span class="sxs-lookup"><span data-stu-id="0873b-120">A dead key, when pressed, produces no visible character but indicates that the key is to be combined with the character produced by the next letter key pressed.</span></span>  <span data-ttu-id="0873b-121">が<xref:System.Windows.Input.KeyEventArgs.Key%2A>を<xref:System.Windows.Input.Key.DeadCharProcessed?displayProperty=nameWithType>返す場合は、このプロパティを使用して、入力された実際のキーを取得できます。</span><span class="sxs-lookup"><span data-stu-id="0873b-121">If <xref:System.Windows.Input.KeyEventArgs.Key%2A> returns <xref:System.Windows.Input.Key.DeadCharProcessed?displayProperty=nameWithType>, you can use this property to get the actual key that was entered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImeProcessedKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key ImeProcessedKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key ImeProcessedKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.ImeProcessedKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ImeProcessedKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key ImeProcessedKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.ImeProcessedKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.ImeProcessedKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0873b-122">キーが [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)] によって処理される場合、イベントで参照されるキーボード キーを取得します。</span><span class="sxs-lookup"><span data-stu-id="0873b-122">Gets the keyboard key referenced by the event, if the key will be processed by an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)].</span></span></summary>
        <value><span data-ttu-id="0873b-123">イベントが参照する <see cref="T:System.Windows.Input.Key" />。</span><span class="sxs-lookup"><span data-stu-id="0873b-123">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="InputSource">
      <MemberSignature Language="C#" Value="public System.Windows.PresentationSource InputSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PresentationSource InputSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.InputSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputSource As PresentationSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PresentationSource ^ InputSource { System::Windows::PresentationSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputSource : System.Windows.PresentationSource" Usage="System.Windows.Input.KeyEventArgs.InputSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PresentationSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0873b-124">この入力を提供した入力ソースを取得します。</span><span class="sxs-lookup"><span data-stu-id="0873b-124">Gets the input source that provided this input.</span></span></summary>
        <value><span data-ttu-id="0873b-125">入力ソース。</span><span class="sxs-lookup"><span data-stu-id="0873b-125">The input source.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="0873b-126">入力ソースを取得するための。</span><span class="sxs-lookup"><span data-stu-id="0873b-126">for getting the input source.</span></span> <span data-ttu-id="0873b-127">関連付けられた列挙型:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="0873b-127">Associated enumerations: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="keyEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler"><span data-ttu-id="0873b-128">型固有の方法で呼び出しを行うジェネリック ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="0873b-128">The generic handler to call in a type-specific way.</span></span></param>
        <param name="genericTarget"><span data-ttu-id="0873b-129">ハンドラーを呼び出す対象。</span><span class="sxs-lookup"><span data-stu-id="0873b-129">The target to call the handler on.</span></span></param>
        <summary><span data-ttu-id="0873b-130">型固有の方法でイベント ハンドラーを呼び出します。これにより、イベント システムの効率を高めることができます。</span><span class="sxs-lookup"><span data-stu-id="0873b-130">Invokes event handlers in a type-specific way, which can increase event system efficiency.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0873b-131">この実装は、 <xref:System.Windows.Input.KeyEventHandler>ジェネリックハンドラーをとしてキャストした後、それを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0873b-131">This implementation casts the generic handler as a <xref:System.Windows.Input.KeyEventHandler> and then invokes it.</span></span> <span data-ttu-id="0873b-132">この実装パターンとその理由の詳細については、 <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> 「」および「[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0873b-132">For details on this implementation pattern and the reasons for it, see <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> and [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDown">
      <MemberSignature Language="C#" Value="public bool IsDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDown" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDown : bool" Usage="System.Windows.Input.KeyEventArgs.IsDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0873b-133">イベントによって参照されるキーが押された状態かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0873b-133">Gets a value that indicates whether the key referenced by the event is in the down state.</span></span></summary>
        <value><span data-ttu-id="0873b-134">キーが押されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0873b-134"><see langword="true" /> if the key is down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0873b-135">クラス<xref:System.Windows.Input.Keyboard>は、キーボードのキーの状態に関する情報も提供します。</span><span class="sxs-lookup"><span data-stu-id="0873b-135">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span> <span data-ttu-id="0873b-136">たとえば、メソッドは<xref:System.Windows.Input.Keyboard.IsKeyDown%2A> 、指定されたキーが押されているかどうかを返します。</span><span class="sxs-lookup"><span data-stu-id="0873b-136">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method returns whether a specified key is down.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0873b-137">次の例では、 <xref:System.Windows.Input.KeyEventArgs> <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>プロパティの状態を取得することによって、のインスタンスに関連付けられているキーが押されているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="0873b-137">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsDown%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisdown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisdown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsRepeat">
      <MemberSignature Language="C#" Value="public bool IsRepeat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRepeat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsRepeat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRepeat As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRepeat { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRepeat : bool" Usage="System.Windows.Input.KeyEventArgs.IsRepeat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0873b-138">イベントによって参照されるキーボード キーが繰り返されたキーかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0873b-138">Gets a value that indicates whether the keyboard key referenced by the event is a repeated key.</span></span></summary>
        <value><span data-ttu-id="0873b-139">キーが繰り返されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0873b-139"><see langword="true" /> if the key is repeated; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="0873b-140">既定値はありません。</span><span class="sxs-lookup"><span data-stu-id="0873b-140">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0873b-141">次の例では、 <xref:System.Windows.Input.KeyEventArgs> <xref:System.Windows.Input.KeyEventArgs.IsRepeat%2A>プロパティの状態を取得することによって、のインスタンスに関連付けられたキーが繰り返されたキーであるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="0873b-141">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is a repeated key by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsRepeat%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsRepeat](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisrepeat)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsRepeat](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisrepeat)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsToggled">
      <MemberSignature Language="C#" Value="public bool IsToggled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsToggled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsToggled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsToggled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsToggled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsToggled : bool" Usage="System.Windows.Input.KeyEventArgs.IsToggled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0873b-142">イベントによって参照されるキーが切り替わった状態かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0873b-142">Gets a value that indicates whether the key referenced by the event is in the toggled state.</span></span></summary>
        <value><span data-ttu-id="0873b-143">キーが切り替わっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0873b-143"><see langword="true" /> if the key is toggled; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="0873b-144">既定値はありません。</span><span class="sxs-lookup"><span data-stu-id="0873b-144">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0873b-145">クラス<xref:System.Windows.Input.Keyboard>は、キーボードのキーの状態に関する情報も提供します。</span><span class="sxs-lookup"><span data-stu-id="0873b-145">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span> <span data-ttu-id="0873b-146">たとえば、メソッドは<xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> 、指定されたキーが切り替わっているかどうかを返します。</span><span class="sxs-lookup"><span data-stu-id="0873b-146">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method returns whether a specified key is toggled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0873b-147">次の例では、 <xref:System.Windows.Input.KeyEventArgs> <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A>プロパティの状態を取得して、のインスタンスに関連付けられているキーを切り替えるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="0873b-147">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is toggled by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsToggled](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsistoggled)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsToggled](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsistoggled)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsUp">
      <MemberSignature Language="C#" Value="public bool IsUp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsUp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUp { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUp : bool" Usage="System.Windows.Input.KeyEventArgs.IsUp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0873b-148">イベントによって参照されるキーが離された状態かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="0873b-148">Gets a value that indicates whether the key referenced by the event is in the up state.</span></span></summary>
        <value><span data-ttu-id="0873b-149">キーが離されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0873b-149"><see langword="true" /> if the key is up; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="0873b-150">既定値はありません。</span><span class="sxs-lookup"><span data-stu-id="0873b-150">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0873b-151">クラス<xref:System.Windows.Input.Keyboard>は、キーボードのキーの状態に関する情報も提供します。</span><span class="sxs-lookup"><span data-stu-id="0873b-151">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span>  <span data-ttu-id="0873b-152">たとえば、 <xref:System.Windows.Input.Keyboard.IsKeyUp%2A>メソッドは、指定されたが稼働しているかどうかを返します。</span><span class="sxs-lookup"><span data-stu-id="0873b-152">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method returns whether a specified is up.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0873b-153">次の例では、 <xref:System.Windows.Input.KeyEventArgs> <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>プロパティの状態を取得することによってのインスタンスに関連付けられているキーを確認します。</span><span class="sxs-lookup"><span data-stu-id="0873b-153">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is up by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsUp%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsUp](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisup)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsUp](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisup)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0873b-154">イベントに関連付けられているキーボード キーを取得します。</span><span class="sxs-lookup"><span data-stu-id="0873b-154">Gets the keyboard key associated with the event.</span></span></summary>
        <value><span data-ttu-id="0873b-155">イベントが参照する <see cref="T:System.Windows.Input.Key" />。</span><span class="sxs-lookup"><span data-stu-id="0873b-155">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0873b-156">次の例では<xref:System.Windows.Input.KeyEventHandler> 、を作成し、に関連付け<xref:System.Windows.Input.KeyEventArgs>られ<xref:System.Windows.Input.Key.Return>ているキーがキーであるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="0873b-156">The following example creates a <xref:System.Windows.Input.KeyEventHandler> and checks whether the key associated with the <xref:System.Windows.Input.KeyEventArgs> is the <xref:System.Windows.Input.Key.Return> key.</span></span>  
  
 [!code-csharp[keydown#KeyDownSample](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyDown/CSharp/Window1.xaml.cs#keydownsample)]
 [!code-vb[keydown#KeyDownSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyDown/VisualBasic/Window1.xaml.vb#keydownsample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="KeyStates">
      <MemberSignature Language="C#" Value="public System.Windows.Input.KeyStates KeyStates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.KeyStates KeyStates" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.KeyStates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyStates As KeyStates" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::KeyStates KeyStates { System::Windows::Input::KeyStates get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyStates : System.Windows.Input.KeyStates" Usage="System.Windows.Input.KeyEventArgs.KeyStates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyStates</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0873b-157">このイベントに関連付けられているキーボード キーの状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="0873b-157">Gets the state of the keyboard key associated with this event.</span></span></summary>
        <value><span data-ttu-id="0873b-158">キーの状態。</span><span class="sxs-lookup"><span data-stu-id="0873b-158">The state of the key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0873b-159">キーは、上下の状態またはダウン状態と切り替え状態の両方にできます。</span><span class="sxs-lookup"><span data-stu-id="0873b-159">A key can be in both the up and toggled states or the down and toggled states.</span></span> <span data-ttu-id="0873b-160">このため、キーが上または下にあるかどうかを判断することは<xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> 、値を数値としてチェックするだけではありません。</span><span class="sxs-lookup"><span data-stu-id="0873b-160">For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value.</span></span> <span data-ttu-id="0873b-161">代わりに、値をフラグの列挙体として扱うことによって、値を確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0873b-161">Instead, you should check the value by treating it as a flag enumeration.</span></span> <span data-ttu-id="0873b-162">最初のビットの比較を使用します。`AND`</span><span class="sxs-lookup"><span data-stu-id="0873b-162">Use an `AND` comparison of the first bit.</span></span> <span data-ttu-id="0873b-163">または、ヘルパープロパティ<xref:System.Windows.Input.KeyEventArgs.IsUp%2A> <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>、、およびを<xref:System.Windows.Input.KeyEventArgs.IsToggled%2A>使用して、特定のキーが稼働しているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="0873b-163">Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0873b-164">次の例では、 <xref:System.Windows.Input.KeyEventArgs>キーと<xref:System.Windows.Input.KeyStates.Down>列挙値<xref:System.Windows.Input.KeyEventArgs.KeyStates%2A>のでビットごと`AND`の比較を実行して、のインスタンスに関連付けられているキーがダウンしているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="0873b-164">The following example checks whether a key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by performing a bitwise `AND` comparison on the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> of the key and the <xref:System.Windows.Input.KeyStates.Down> enumeration value.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeystatesdown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeystatesdown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="SystemKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key SystemKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key SystemKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.SystemKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SystemKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key SystemKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.SystemKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.SystemKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0873b-165">キーがシステムによって処理される場合、イベントで参照されるキーボード キーを取得します。</span><span class="sxs-lookup"><span data-stu-id="0873b-165">Gets the keyboard key referenced by the event, if the key will be processed by the system.</span></span></summary>
        <value><span data-ttu-id="0873b-166">イベントが参照する <see cref="T:System.Windows.Input.Key" />。</span><span class="sxs-lookup"><span data-stu-id="0873b-166">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
  </Members>
</Type>
