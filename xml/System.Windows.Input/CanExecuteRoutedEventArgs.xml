<Type Name="CanExecuteRoutedEventArgs" FullName="System.Windows.Input.CanExecuteRoutedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cf063e482ab96a7cca46a0b12514643ff62d0ebb" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37562554" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CanExecuteRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CanExecuteRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanExecuteRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="9338a-101">
        <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> および <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> ルーティング イベントのデータを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="9338a-101">Provides data for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> and <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> routed events.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9338a-102">コマンド ソースでは、通常、このような<xref:System.Windows.Controls.MenuItem>、呼び出しは、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッドを<xref:System.Windows.Input.RoutedCommand>コマンドできますか、現在のコマンド ターゲットで実行できないかを判断します。</span><span class="sxs-lookup"><span data-stu-id="9338a-102">Typically, a command source, such a <xref:System.Windows.Controls.MenuItem>, will call the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> to determine if the command can or cannot execute on the current command target.</span></span>  <span data-ttu-id="9338a-103">場合<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>に設定されている`false`イベント ハンドラーから、コマンド ソースは自体が無効にします。</span><span class="sxs-lookup"><span data-stu-id="9338a-103">If <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false` from an event handler, the command source will disable itself.</span></span>  <span data-ttu-id="9338a-104">たとえば場合、<xref:System.Windows.Controls.MenuItem>コマンドとコマンドのコマンド ソースが現在のコマンド ターゲットで実行できないように動作している、<xref:System.Windows.Controls.MenuItem>自体を淡色表示されます。</span><span class="sxs-lookup"><span data-stu-id="9338a-104">For example, if a <xref:System.Windows.Controls.MenuItem> is acting as the command source for a command and the command cannot execute on the current command target, then the <xref:System.Windows.Controls.MenuItem> will gray itself out.</span></span>  
  
 <span data-ttu-id="9338a-105"><xref:System.Windows.Input.ICommand.CanExecuteChanged>イベントは、実行するコマンドの機能が変更されたときに、コマンド ソースを通知します。</span><span class="sxs-lookup"><span data-stu-id="9338a-105">The <xref:System.Windows.Input.ICommand.CanExecuteChanged> event notifies a command source when the ability of a command to execute may have changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9338a-106">次の例を<xref:System.Windows.Input.CanExecuteRoutedEventHandler>を返す`true`コマンド ターゲットがコントロールの場合にのみです。</span><span class="sxs-lookup"><span data-stu-id="9338a-106">The follow example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that returns `true` only if the command target is a control.</span></span>  <span data-ttu-id="9338a-107">まず、<xref:System.Windows.RoutedEventArgs.Source%2A>にキャストされた、<xref:System.Windows.Controls.Control>します。</span><span class="sxs-lookup"><span data-stu-id="9338a-107">First, <xref:System.Windows.RoutedEventArgs.Source%2A> is cast to a <xref:System.Windows.Controls.Control>.</span></span>  <span data-ttu-id="9338a-108">場合<xref:System.Windows.RoutedEventArgs.Source%2A>は、 <xref:System.Windows.Controls.Control>、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>に設定されている`true`。 それ以外に設定されている`false`します。</span><span class="sxs-lookup"><span data-stu-id="9338a-108">If <xref:System.Windows.RoutedEventArgs.Source%2A> is a <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, it is set to `false`.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanExecute" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Property CanExecute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanExecute { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanExecute : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9338a-109">このイベントに関連付けられている <see cref="T:System.Windows.Input.RoutedCommand" /> をコマンド ターゲットに対して実行できるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9338a-109">Gets or sets a value that indicates whether the <see cref="T:System.Windows.Input.RoutedCommand" /> associated with this event can be executed on the command target.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9338a-110">イベントに関連付けられているコマンドをコマンド ターゲットに対して実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9338a-110">
              <see langword="true" /> if the event can be executed on the command target; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="9338a-111">既定値は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9338a-111">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9338a-112">多くはコマンドなどのソース、<xref:System.Windows.Controls.MenuItem>と<xref:System.Windows.Controls.Button>、ときに無効になって<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>は`false`ときに有効になっていると、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>は`true`。</span><span class="sxs-lookup"><span data-stu-id="9338a-112">Many command sources, such as <xref:System.Windows.Controls.MenuItem> and <xref:System.Windows.Controls.Button>, are disabled when <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is `false` and enabled when the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9338a-113">次の例を<xref:System.Windows.Input.CanExecuteRoutedEventHandler>のみを返すコマンド ターゲットがコントロールの場合は true。</span><span class="sxs-lookup"><span data-stu-id="9338a-113">The follow example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that only returns true if the command target is a control.</span></span>  <span data-ttu-id="9338a-114">最初、<xref:System.Windows.RoutedEventArgs.Source%2A>イベント データにキャスト、<xref:System.Windows.Controls.Control>します。</span><span class="sxs-lookup"><span data-stu-id="9338a-114">First the <xref:System.Windows.RoutedEventArgs.Source%2A> event data is cast to a <xref:System.Windows.Controls.Control>.</span></span>  <span data-ttu-id="9338a-115">ある場合、 <xref:System.Windows.Controls.Control>、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>に設定されている`true`。 それ以外に設定されている`false`します。</span><span class="sxs-lookup"><span data-stu-id="9338a-115">If it is a <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, it is set to `false`.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9338a-116">このイベントに関連付けられているコマンドを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9338a-116">Gets the command associated with this event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9338a-117">コマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9338a-117">The command.</span>
          </span>
          <span data-ttu-id="9338a-118">コマンドがカスタム コマンドである場合を除き、これは通常 <see cref="T:System.Windows.Input.RoutedCommand" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9338a-118">Unless the command is a custom command, this is generally a <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
          </span>
          <span data-ttu-id="9338a-119">既定値はありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9338a-119">There is no default value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9338a-120">コマンド実行の詳細については、次を参照してください。、[コマンド実行の概要](~/docs/framework/wpf/advanced/commanding-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="9338a-120">For more information on commanding, see the [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9338a-121">次の例では、作成、<xref:System.Windows.Input.CanExecuteRoutedEventHandler>複数のコマンドを処理します。</span><span class="sxs-lookup"><span data-stu-id="9338a-121">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which handles multiple commands.</span></span>  <span data-ttu-id="9338a-122">場合、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A>プロパティと等しい、<xref:System.Windows.Input.MediaCommands.Play%2A>コマンドとメソッド`IsPlaying`返します`false`、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>に設定されている`true`、それ以外の<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>に設定されている`false`します。</span><span class="sxs-lookup"><span data-stu-id="9338a-122">If the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> property is equal to the <xref:System.Windows.Input.MediaCommands.Play%2A> command and the method `IsPlaying` returns `false`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false`.</span></span>  <span data-ttu-id="9338a-123">場合、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A>プロパティと等しい、<xref:System.Windows.Input.MediaCommands.Stop%2A>コマンドとメソッド`IsPlaying`返します`true`、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>に設定されている`true`、それ以外の<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>に設定されている`false`します。</span><span class="sxs-lookup"><span data-stu-id="9338a-123">If the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> property is equal to the <xref:System.Windows.Input.MediaCommands.Stop%2A> command and the method `IsPlaying` returns `true`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false`.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="ContinueRouting">
      <MemberSignature Language="C#" Value="public bool ContinueRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueRouting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueRouting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueRouting { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueRouting : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9338a-124">コマンドを呼び出した入力ルーティング イベントのルーティングを要素ツリーで続行するかどうかを決定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9338a-124">Determines whether the input routed event that invoked the command should continue to route through the element tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9338a-125">要素ツリーでルーティング イベントのルーティングを続行する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9338a-125">
              <see langword="true" /> if the routed event should continue to route through element tree; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="9338a-126">既定値は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9338a-126">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="canExecuteRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9338a-127">コマンド固有のデータを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9338a-127">Gets the command specific data.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9338a-128">コマンドのデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9338a-128">The command data.</span>
          </span>
          <span data-ttu-id="9338a-129">既定値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9338a-129">The default value is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9338a-130">実行時に、コマンドに固有の情報を渡すコマンド パラメーターです。</span><span class="sxs-lookup"><span data-stu-id="9338a-130">The command parameter is used to pass specific information to the command when it is executed.</span></span>  <span data-ttu-id="9338a-131">データの型は、コマンドによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="9338a-131">The type of the data is defined by the command.</span></span>  
  
 <span data-ttu-id="9338a-132"><xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> `null`します。</span><span class="sxs-lookup"><span data-stu-id="9338a-132"><xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> can be `null`.</span></span> <span data-ttu-id="9338a-133">多くのコマンドを処理またはコマンド パラメーターが必要ないしないでください。</span><span class="sxs-lookup"><span data-stu-id="9338a-133">Many commands do not process or expect command parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9338a-134">次の例を使用する表示を<xref:System.Windows.Controls.Button>カスタム コマンドのコマンド ソースとして。</span><span class="sxs-lookup"><span data-stu-id="9338a-134">The following example shows up to use a <xref:System.Windows.Controls.Button> as the command source for a custom command.</span></span>  <span data-ttu-id="9338a-135"><xref:System.Windows.Input.ICommandSource.Command%2A>のプロパティ、<xref:System.Windows.Controls.Button>カスタムに設定されている<xref:System.Windows.Input.RoutedCommand>と呼ばれる`customComand`と<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>の値を渡すために使用、<xref:System.Windows.Controls.Primitives.RangeBase.Value%2A>のプロパティを<xref:System.Windows.Controls.Slider>コントロール。</span><span class="sxs-lookup"><span data-stu-id="9338a-135">The <xref:System.Windows.Input.ICommandSource.Command%2A> property of the <xref:System.Windows.Controls.Button> is set to the custom <xref:System.Windows.Input.RoutedCommand> called `customComand` and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass the value of the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property of a <xref:System.Windows.Controls.Slider> control.</span></span>  <span data-ttu-id="9338a-136">バインドするデータ バインドを使用して、これは、成果、<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>を<xref:System.Windows.Controls.Primitives.RangeBase.Value%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="9338a-136">This is accomplishment by using databinding to bind the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> to the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property.</span></span>  <span data-ttu-id="9338a-137">バインディング式のコンバーターがカスタム<xref:System.Windows.Data.IValueConverter>に変換する<xref:System.Windows.Controls.Primitives.RangeBase.Value%2A>に、<xref:System.Int32>にバインドする前に、<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9338a-137">The converter in the binding expression is a custom <xref:System.Windows.Data.IValueConverter> which converts <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> into an <xref:System.Int32> before binding it to the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 [!code-xaml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>