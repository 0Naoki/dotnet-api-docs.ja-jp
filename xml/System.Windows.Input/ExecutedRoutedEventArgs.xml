<Type Name="ExecutedRoutedEventArgs" FullName="System.Windows.Input.ExecutedRoutedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ad6f24df943eea4caf01127e6eefc0fc165f9a2a" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37562384" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ExecutedRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExecutedRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExecutedRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExecutedRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type ExecutedRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="12399-101">
        <see cref="E:System.Windows.Input.CommandManager.Executed" /> および <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> ルーティング イベントのデータを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="12399-101">Provides data for the <see cref="E:System.Windows.Input.CommandManager.Executed" /> and <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> routed events.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12399-102"><xref:System.Windows.Input.ExecutedRoutedEventHandler> コマンドのロジックを実装するメソッドを表す、<xref:System.Windows.Input.RoutedCommand>します。</span><span class="sxs-lookup"><span data-stu-id="12399-102"><xref:System.Windows.Input.ExecutedRoutedEventHandler> represents the method that implements the command logic of a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="12399-103">コマンドの実装ロジックを分離することにより、さまざまなソースと種類から呼び出されるコマンドと、コマンド ロジックの集中管理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="12399-103">Separating the implementation logic from the command allows the command to be invoked from different sources and types and enables the centralization of command logic.</span></span>  
  
 <span data-ttu-id="12399-104">このイベント データ クラスを使用しても<xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType>と<xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="12399-104">This event data class is also used for <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> and <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12399-105">最も実用的なハンドラーが処理されます、<xref:System.Windows.Input.CommandBinding.Executed>特定からのイベント<xref:System.Windows.Input.CommandBinding>ではなく、機能により、<xref:System.Windows.Input.CommandManager>レベル。</span><span class="sxs-lookup"><span data-stu-id="12399-105">But most practical handlers will handle the <xref:System.Windows.Input.CommandBinding.Executed> events from a particular <xref:System.Windows.Input.CommandBinding>, rather than work at the <xref:System.Windows.Input.CommandManager> level.</span></span>  
  
 <span data-ttu-id="12399-106">コマンド実行の詳細については、「[コマンド実行の概要](~/docs/framework/wpf/advanced/commanding-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12399-106">For more information on commanding, see [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12399-107">次の例では、作成、<xref:System.Windows.Input.ExecutedRoutedEventHandler>を開く、<xref:System.Windows.MessageBox>コマンドを実行するとします。</span><span class="sxs-lookup"><span data-stu-id="12399-107">The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that opens a <xref:System.Windows.MessageBox> when the command is executed.</span></span>  
  
 [!code-csharp[commandwithhandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandwithhandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Docs>
  <Members>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ExecutedRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.ExecutedRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12399-108">呼び出されたコマンドを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12399-108">Gets the command that was invoked.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12399-109">このイベントに関連付けられているコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12399-109">The command associated with this event.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12399-110">イベントに関連付けられているコマンドの特定の実装にキャストできる<xref:System.Windows.Input.ICommand>などを<xref:System.Windows.Input.RoutedCommand>型がわかっている場合、します。</span><span class="sxs-lookup"><span data-stu-id="12399-110">The command associated with the event can be cast to the specific implementation of <xref:System.Windows.Input.ICommand>, such as a <xref:System.Windows.Input.RoutedCommand>, if the type is known.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12399-111">次の例では、作成、<xref:System.Windows.Input.ExecutedRoutedEventHandler>複数のコマンドを処理します。</span><span class="sxs-lookup"><span data-stu-id="12399-111">The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that handles multiple commands.</span></span> <span data-ttu-id="12399-112">ハンドラーのチェック、<xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A>プロパティを<xref:System.Windows.Input.ExecutedRoutedEventArgs>を呼び出す方法を決定します。</span><span class="sxs-lookup"><span data-stu-id="12399-112">The handler checks the <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> property on the <xref:System.Windows.Input.ExecutedRoutedEventArgs> to determine which method to call.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCmdHander](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecmdhander)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCmdHander](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecmdhander)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="executedRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.ExecutedRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12399-113">コマンドのデータ パラメーターを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12399-113">Gets data parameter of the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12399-114">コマンド固有のデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12399-114">The command-specific data.</span>
          </span>
          <span data-ttu-id="12399-115">既定値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12399-115">The default value is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12399-116">このプロパティは、特定のコマンドで定義されている汎用的なデータ パラメーターを表します。</span><span class="sxs-lookup"><span data-stu-id="12399-116">This property represents a generic data parameter that is defined by the particular command.</span></span>  
  
 <span data-ttu-id="12399-117">このパラメーターが必要でない場合`null`渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="12399-117">If this parameter is not needed, `null` can be passed.</span></span>  
  
 <span data-ttu-id="12399-118">通常、<xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A>は実行時に、コマンドに固有の情報を渡すために使用します。</span><span class="sxs-lookup"><span data-stu-id="12399-118">Normally, the <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> is used to pass specific information to the command when it is executed.</span></span>  <span data-ttu-id="12399-119">データの型は、コマンドによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="12399-119">The type of the data is defined by the command.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12399-120">次の例では、作成、<xref:System.Windows.Input.ExecutedRoutedEventHandler>カスタムの<xref:System.Windows.Input.RoutedCommand>します。</span><span class="sxs-lookup"><span data-stu-id="12399-120">The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> for a custom <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="12399-121">ハンドラーの更新プログラム、<xref:System.Windows.Controls.TextBox>と現在の時刻と<xref:System.Windows.Controls.Primitives.RangeBase.Value%2A>のプロパティを<xref:System.Windows.Controls.Slider>コントロールを通じてハンドラーに渡される、<xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="12399-121">The handler updates a <xref:System.Windows.Controls.TextBox> with the current time and the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property of a <xref:System.Windows.Controls.Slider> control that is passed to the handler through the <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampleexecuted)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampleexecuted)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
  </Members>
</Type>