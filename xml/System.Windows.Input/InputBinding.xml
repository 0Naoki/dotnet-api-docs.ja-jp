<Type Name="InputBinding" FullName="System.Windows.Input.InputBinding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="257352587cbebd153130af2566c44f8aadc46dea" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69172596" /></Metadata><TypeSignature Language="C#" Value="public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.Freezable implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits Freezable&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::Freezable, System::Windows::Input::ICommandSource" />
  <TypeSignature Language="F#" Value="type InputBinding = class&#xA;    inherit Freezable&#xA;    interface ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.0">System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><see cref="T:System.Windows.Input.InputGesture" /> とコマンドの間のバインディングを表します。 コマンドは、<see cref="T:System.Windows.Input.RoutedCommand" /> の可能性があります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー入力がを<xref:System.Windows.Input.InputBinding>作成することによってコマンドを呼び出すように指定できます。 ユーザーが指定された入力<xref:System.Windows.Input.ICommand>を実行すると、 <xref:System.Windows.Input.InputBinding.Command%2A>プロパティに設定されたが実行されます。  
  
 、、および<xref:System.Windows.Input.InputBinding> <xref:System.Windows.Input.InputBinding.CommandParameter%2A> <xref:System.Windows.Input.InputBinding.Command%2A>の各プロパティでバインディングを作成することによって、がオブジェクトで定義されているコマンドを呼び出すように指定できます。<xref:System.Windows.Input.InputBinding.CommandTarget%2A> これにより、カスタムコマンドを定義し、ユーザー入力に関連付けることができます。 詳細については、「例」の2番目の例を参照してください。  
  
 は、にを<xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> <xref:System.Windows.Input.CommandManager>登録することによって、特定のオブジェクトまたはクラスレベルで定義できます。<xref:System.Windows.Input.InputBinding>  
  
 クラス<xref:System.Windows.Input.InputBinding>自体は、パブリックのパラメーターなしのコンストラクターを公開しないため、XAML の使用をサポートしていません (パラメーターなしのコンストラクターは存在しますが、保護されています)。 ただし、派生クラスはパブリックコンストラクターを公開できるため、から<xref:System.Windows.Input.InputBinding>継承される派生クラスのプロパティを XAML 使用法で設定できます。 Xaml で<xref:System.Windows.Input.InputBinding>インスタンス化でき、xaml でプロパティを設定できる2つの既存の派生<xref:System.Windows.Input.KeyBinding>クラス<xref:System.Windows.Input.MouseBinding>は、とです。 XAML で設定さ[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]れ、値がプロパティで<xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType>あるために1つ<xref:System.Windows.Input.InputBinding>以上のオブジェクトを受け取る、プログラミングの一般的なプロパティ。  
  
<a name="xamlObjectElementUsage_InputBinding"></a>   
## <a name="xaml-object-element-usage"></a>XAML オブジェクト要素の使用方法  
 \<*inputBindingDerivedClass…/*>  
  
<a name="xamlValues_InputBinding"></a>   
## <a name="xaml-values"></a>XAML 値  
 `inputBindingDerivedClass`  
 <xref:System.Windows.Input.KeyBinding> <xref:System.Windows.Input.InputBinding> や<xref:System.Windows.Input.MouseBinding>などのオブジェクト要素構文をサポートするの派生クラス。 「解説」を参照してください。  
  
   
  
## Examples  
 次の例は、を使用<xref:System.Windows.Input.KeyBinding>して<xref:System.Windows.Input.ApplicationCommands.Open%2A>を<xref:System.Windows.Input.KeyGesture>コマンドにバインドする方法を示しています。 キージェスチャを実行すると、Open コマンドが呼び出されます。  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 次の例は、カスタムコマンドをオブジェクトに<xref:System.Windows.Input.InputBinding>バインドする方法を示しています。 これらの例では、ユーザーが次のいずれかの操作を実行して背景色を変更できるようにするアプリケーションを作成します。  
  
-   ボタンをクリックします。  
  
-   CTRL + C キーを押します。  
  
-   (の<xref:System.Windows.Controls.StackPanel> <xref:System.Windows.Controls.ListBox>外側) を右クリックします。  
  
 最初の例では、と`SimpleDelegateCommand`いう名前のクラスを作成します。 このクラスは、コマンドを作成するオブジェクトがコマンドの実行時に発生するアクションを定義できるように、デリゲートを受け入れます。 `SimpleDelegateCommand`では、コマンドを呼び出すキーとマウスの入力を指定するプロパティも定義されています。 `GestureKey`キーボード入力を指定します。 `GestureModifier``MouseGesture`マウス入力を指定します。  
  
 [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]
 [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  
  
 次の例では、を`ColorChangeCommand`作成して初期`SimpleDelegateCommand`化します。これはです。 また、この例では、コマンドが呼び出されたときに実行さ`GestureKey`れる`GestureModifier`メソッドを`MouseGesture`定義し、、、およびの各プロパティを設定します。 アプリケーションは、 <xref:System.Windows.Window>のコンストラクター `InitializeCommand`などで、プログラムの開始時にメソッドを呼び出します。  
  
 [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]
 [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  
  
 最後に、次の例では、ユーザーインターフェイスを作成します。 この例では<xref:System.Windows.Input.KeyBinding> 、と<xref:System.Windows.Input.MouseBinding>を含む<xref:System.Windows.Controls.StackPanel> <xref:System.Windows.Controls.Button>に、およびを追加します。<xref:System.Windows.Controls.ListBox> ユーザーが内<xref:System.Windows.Controls.ListBox>の項目を選択すると、背景の色を選択した色に変更できます。 `CommandParameter`どちらの場合も、プロパティは<xref:System.Windows.Controls.ListBox>内`Command`の選択された項目にバインドされ、プロパティはに`ColorChangeCommand`バインドされます。 、 <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType> 、<xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>および`SimpleDelegateCommand`の各プロパティは、クラスの対応するプロパティにバインドされます。 <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType>  
  
 [!code-xaml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.UIElement.InputBindings" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Input.InputBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InputBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Input.InputBinding" /> から派生したクラスの基本の初期化を行います。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.InputBinding>は技術的には抽象クラスではありませんが、パラメーターなしのコンストラクターは意図的に保護されたアクセスになります。 これには、XAML の<xref:System.Windows.Input.InputBinding> "抽象" クラスを作成する効果があります。 の既存のプロパティ[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]には、型<xref:System.Windows.Input.InputBinding>のオブジェクトを想定する xaml が使用されてい<xref:System.Windows.Input.InputBinding>ますが、xaml でインスタンスを指定することはできません。 代わりに、デバイス固有<xref:System.Windows.Input.InputBinding>の派生クラスの1つを値として指定できます ( <xref:System.Windows.Input.MouseBinding> <xref:System.Windows.Input.KeyBinding>たとえば、または)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>XAML の使用をサポート<see cref="T:System.Windows.Input.InputBinding" />するカスタムを実装する場合は、このコンストラクターを使用して基本の初期化を行います。</para></block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.InputGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As InputGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InputBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::InputGesture ^ gesture);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.InputBinding : System.Windows.Input.ICommand * System.Windows.Input.InputGesture -&gt; System.Windows.Input.InputBinding" Usage="new System.Windows.Input.InputBinding (command, gesture)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.InputGesture" />
      </Parameters>
      <Docs>
        <param name="command"><paramref name="gesture" /> に関連付けるコマンド。</param>
        <param name="gesture"><paramref name="command" /> に関連付ける入力ジェスチャ。</param>
        <summary>コマンドおよび入力ジェスチャを指定して、<see cref="T:System.Windows.Input.InputBinding" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既存の入力バインドクラスを使用するソフトウェア開発者は、カスタムコマンドを定義する場合でも、通常、このコンストラクターは使用しません。 代わりに、派生クラスのコンストラクター (<xref:System.Windows.Input.KeyBinding>および<xref:System.Windows.Input.MouseBinding>) を使用するか、このコンストラクターをカスタムクラスの基本インスタンス化として使用します。 クラスは<xref:System.Windows.Input.InputBinding> 、原則としてさまざまな入力デバイスをサポートしていますが、実際には、入力バインドが表すデバイスを選択する必要があります。 入力バインドに設定できる値<xref:System.Windows.Input.InputBinding.Gesture%2A>は1つだけで、ジェスチャはデバイス固有です。  
  
   
  
## Examples  
 次の例は、 <xref:System.Windows.Input.KeyGesture>このコンストラクターを使用し<xref:System.Windows.Input.RoutedCommand>てをに関連付ける方法を示しています。  
  
 [!code-csharp[commandlibrarysnippets#InputBindingAddingCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcommand)]
 [!code-vb[commandlibrarysnippets#InputBindingAddingCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcommand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="command" /> または <paramref name="gesture" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.CloneCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">複製する対象のオブジェクト。</param>
        <summary>指定されたオブジェクトのプロパティの基本 (アニメーション化されていない) 値をコピーします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.CloneCurrentValueCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCurrentValueCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">複製する対象のオブジェクト。</param>
        <summary>指定されたオブジェクトのプロパティの現在の値をコピーします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.InputBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この入力バインドに関連付けられる <see cref="T:System.Windows.Input.ICommand" /> を取得または設定します。</summary>
        <value>関連付けられているコマンド。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラス<xref:System.Windows.Input.InputBinding>は、パブリックなパラメーターなしのコンストラクターを公開しないため、XAML の使用をサポートしません (パラメーターなしのコンストラクターがありますが、保護されています)。 ただし、派生クラスはパブリックコンストラクターを公開できるため、から<xref:System.Windows.Input.InputBinding>継承されたプロパティを使用できます。 Xaml で<xref:System.Windows.Input.InputBinding>インスタンス化でき、xaml の使用によってプロパティを設定できる2つ<xref:System.Windows.Input.KeyBinding>の<xref:System.Windows.Input.MouseBinding>既存の派生クラスは、とです。  
  
 <xref:System.Windows.Input.ICommand>特定の既存<xref:System.Windows.Input.ICommand>の実装が文字列の形式で値を指定できるようにする型コンバーターを参照します。 この型変換の動作によって、このプロパティの属性値の形式が設定されます。 また<xref:System.Windows.Input.InputBinding.Command%2A>、、 <xref:System.Windows.Input.InputBinding.CommandParameter%2A> <xref:System.Windows.Input.InputBinding.CommandTarget%2A>、およびの各プロパティを、オブジェクトで定義されているにバインドすることもできます。<xref:System.Windows.Input.ICommand> これにより、カスタムコマンドを定義し、ユーザー入力に関連付けることができます。 詳細については、「」の<xref:System.Windows.Input.InputBinding>2 番目の例を参照してください。  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
 <`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/>  
  
<a name="xamlPropertyElementUsage_Command"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Command>  
    <iCommandImplementation/>  
  </inputBindingDerivedClass.Command>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a>XAML 値  
 `inputBindingDerivedClass`  
 <xref:System.Windows.Input.KeyBinding> <xref:System.Windows.Input.InputBinding> や<xref:System.Windows.Input.MouseBinding>などのオブジェクト要素構文をサポートするの派生クラス。 「解説」を参照してください。  
  
 `iCommandImplementation`  
 オブジェクト要素構文を<xref:System.Windows.Input.ICommand>サポートするのオブジェクト実装 (パラメーターなしのパブリックコンストラクターがある)。  
  
   
  
## Examples  
 次の例は、を使用<xref:System.Windows.Input.KeyBinding>して<xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType>を<xref:System.Windows.Input.KeyGesture>コマンドにバインドする方法を示しています。 キージェスチャを実行すると、Open コマンドが呼び出されます。  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Windows.Input.InputBinding.Command" /> 値は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj with get, set" Usage="System.Windows.Input.InputBinding.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>特定のコマンドのコマンド固有のデータを取得または設定します。</summary>
        <value>コマンド固有のデータ。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.InputBinding.CommandParameter%2A>プロパティは、実行時に特定の情報をコマンドに渡すために使用されます。 データの型は、コマンドで定義されます。 多くのコマンドでは、コマンドパラメーターは想定されていません。これらのコマンドでは、渡されたコマンドパラメーターは無視されます。  
  
 入力バインディングが関連付けられている<xref:System.Windows.Input.RoutedCommand>コマンドがである場合、入力<xref:System.Windows.Input.RoutedCommand>バインディングのは<xref:System.Windows.Input.InputBinding.CommandParameter%2A> 、コマンドが処理されるとき<xref:System.Windows.Input.ExecutedRoutedEventArgs>に、 <xref:System.Windows.Input.CanExecuteRoutedEventArgs>およびイベントデータを通じてハンドラーに渡されます。  
  
 Command パラメーターのデータ型と目的は、各コマンドに対して異なる方法で定義`null`され、にすることができます。 、 <xref:System.Windows.Input.InputBinding.Command%2A> <xref:System.Windows.Input.InputBinding.CommandParameter%2A> 、および<xref:System.Windows.Input.InputBinding.CommandTarget%2A>の各プロパティを、オブジェクトで定義されているにバインドできます。<xref:System.Windows.Input.ICommand> これにより、カスタムコマンドを定義し、ユーザー入力に関連付けることができます。 詳細については、「」の<xref:System.Windows.Input.InputBinding>2 番目の例を参照してください。  
  
 クラス<xref:System.Windows.Input.InputBinding>は、パブリックなパラメーターなしのコンストラクターを公開しないため、XAML の使用をサポートしません (パラメーターなしのコンストラクターがありますが、保護されています)。 ただし、派生クラスはパブリックコンストラクターを公開できるため、から<xref:System.Windows.Input.InputBinding>継承されたプロパティを XAML 使用法で設定できます。 Xaml で<xref:System.Windows.Input.InputBinding>インスタンス化でき、xaml でプロパティを設定できる2つの既存の<xref:System.Windows.Input.KeyBinding>派生<xref:System.Windows.Input.MouseBinding>クラスは、とです。  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<inputBindingDerivedClass CommandParameter="commandParameterString"/>  
```  
  
<a name="xamlPropertyElementUsage_CommandParameter"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.CommandParameter>  
    <commandParameterObject/>  
  </inputBindingDerivedClass.CommandParameter>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a>XAML 値  
 `inputBindingDerivedClass`  
 <xref:System.Windows.Input.KeyBinding> <xref:System.Windows.Input.InputBinding> や<xref:System.Windows.Input.MouseBinding>などのオブジェクト要素構文をサポートするの派生クラス。 「解説」を参照してください。  
  
 `commandParameterString`  
 特定のコマンドによって処理される文字列。 文字列は、XAML で簡単に設定できるため、コマンドパラメーターに使用される共通の型です。 期待される文字列形式とその目的については、入力バインディングが関連付けられている特定のコマンドに関するドキュメントを参照してください。 多くのコマンドではパラメーターは想定されていません。  
  
 `commandParameterObject`  
 特定のコマンドによって処理されるオブジェクト。 すべての[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]既存のコマンドは、文字列を使用します。 したがって、このプロパティ要素の構文は、カスタムコマンドのシナリオにのみ関連します。 この構文をサポートするには、 `commandParameterObject`オブジェクトがオブジェクト要素構文もサポートしている必要があります (パラメーターなしのパブリックコンストラクターを持つ必要があります)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandParameterProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Input.InputBinding.Command" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement with get, set" Usage="System.Windows.Input.InputBinding.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コマンドの対象要素を取得または設定します。</summary>
        <value>コマンドの対象。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows Presentation Foundation <xref:System.Windows.Input.InputBinding.CommandTarget%2A>のコマンドのシステムでは、 <xref:System.Windows.Input.ICommandSource>オブジェクトのプロパティは、 <xref:System.Windows.Input.ICommand>がである場合に<xref:System.Windows.Input.RoutedCommand>のみ適用できます。 <xref:System.Windows.Input.ICommandSource> で <xref:System.Windows.Input.InputBinding.CommandTarget%2A> が設定されていて、対応するコマンドが <xref:System.Windows.Input.RoutedCommand> ではない場合、コマンド ターゲットは無視されます。  
  
 と共<xref:System.Windows.Input.RoutedCommand>に使用する場合、コマンドターゲットは、イベント<xref:System.Windows.Input.CommandManager.Executed>と<xref:System.Windows.Input.CommandManager.CanExecute>イベントが発生する対象のオブジェクトです。 <xref:System.Windows.Input.InputBinding.CommandTarget%2A>プロパティが設定されていない場合、キーボードフォーカスを持つ要素がターゲットとして使用されます。  
  
 クラス<xref:System.Windows.Input.InputBinding>自体は、パブリックのパラメーターなしのコンストラクターを公開しないため、XAML の使用をサポートしていません (パラメーターなしのコンストラクターは存在しますが、保護されています)。 ただし、派生クラスはパブリックコンストラクターを公開できるため、から<xref:System.Windows.Input.InputBinding>継承されるプロパティを XAML 使用法で設定できます。 Xaml で<xref:System.Windows.Input.InputBinding>インスタンス化でき、xaml でプロパティを設定できる2つの既存の<xref:System.Windows.Input.KeyBinding>派生<xref:System.Windows.Input.MouseBinding>クラスは、とです。  
  
<a name="xamlAttributeUsage_CommandTarget"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<inputBindingDerivedClass CommandTarget="bindingToTarget"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a>XAML 値  
 `inputBindingDerivedClass`  
 <xref:System.Windows.Input.KeyBinding> <xref:System.Windows.Input.InputBinding> や<xref:System.Windows.Input.MouseBinding>などのオブジェクト要素構文をサポートするの派生クラス。 「解説」を参照してください。  
  
 `bindingToTarget`  
 既存の名前付き要素へのオブジェクト参照を返すことができるバインディング構文の型を使用する文字列。 「解説」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandTargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="inputBinding.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Input.InputBinding" /> のインスタンスを作成します。</summary>
        <returns>新しいオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Gesture : System.Windows.Input.InputGesture with get, set" Usage="System.Windows.Input.InputBinding.Gesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この入力バインドに関連付けられる <see cref="T:System.Windows.Input.InputGesture" /> を取得または設定します。</summary>
        <value>関連付けられたジェスチャ。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 入力ジェスチャは、コマンドを呼び出すアクションです。 で[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の入力ジェスチャの例<xref:System.Windows.Input.KeyGesture>と<xref:System.Windows.Input.MouseGesture>して、とがあります。 は、 <xref:System.Windows.Input.Key>との<xref:System.Windows.Input.ModifierKeys>セットの組み合わせです。 <xref:System.Windows.Input.KeyGesture> は、 <xref:System.Windows.Input.MouseAction>との<xref:System.Windows.Input.ModifierKeys>セットの組み合わせです。 <xref:System.Windows.Input.MouseGesture>  
  
 クラス<xref:System.Windows.Input.InputBinding>自体は、パブリックのパラメーターなしのコンストラクターを公開しないため、XAML の使用をサポートしていません (パラメーターなしのコンストラクターは存在しますが、保護されています)。 ただし、派生クラスはパブリックコンストラクターを公開できるため、から<xref:System.Windows.Input.InputBinding>継承されるプロパティを XAML 使用法で設定できます。 Xaml で<xref:System.Windows.Input.InputBinding>インスタンス化でき、xaml でプロパティを設定できる2つの既存の<xref:System.Windows.Input.KeyBinding>派生<xref:System.Windows.Input.MouseBinding>クラスは、とです。  
  
<a name="xamlAttributeUsage_gesture"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
 <<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/>  
  
- または -
  
 <<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/>  
  
- または -
  
 <`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/>  
  
<a name="xamlPropertyElementUsage_gesture"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Gesture>  
    <inputGestureImplementation/>  
  </inputBindingDerivedClass.Gesture>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_gesture"></a>   
## <a name="xaml-values"></a>XAML 値  
 `inputBindingDerivedClass`  
 <xref:System.Windows.Input.KeyBinding> <xref:System.Windows.Input.InputBinding> や<xref:System.Windows.Input.MouseBinding>などのオブジェクト要素構文をサポートするの派生クラス。 「解説」を参照してください。  
  
 `inputGestureImplementation`  
 オブジェクト要素構文をサポート<xref:System.Windows.Input.InputGesture>するのカスタム派生クラス。  
  
   
  
## Examples  
 次の例は、を使用<xref:System.Windows.Input.KeyBinding>してを<xref:System.Windows.Input.KeyGesture>に<xref:System.Windows.Input.RoutedCommand>バインドする方法を示しています。 ALT + L キー <xref:System.Windows.Input.ApplicationCommands.Close%2A>を押すと、コマンドが呼び出されます。 <xref:System.Windows.Input.KeyGesture>  
  
 [!code-xaml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.GetAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">複製する対象のオブジェクト。</param>
        <summary>基本プロパティ値 (アニメーション化されていない値) を使用して、このインスタンスを、指定した <see cref="T:System.Windows.Freezable" /> の固定された複製にします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetCurrentValueAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">複製する対象のオブジェクト。</param>
        <summary>現在のインスタンスを、指定した <see cref="T:System.Windows.Freezable" /> の固定された複製にします。 オブジェクトに、アニメーション化された依存関係プロパティが存在する場合、現在アニメーション化されている値がコピーされます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
