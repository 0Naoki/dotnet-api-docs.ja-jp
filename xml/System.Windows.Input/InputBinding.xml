<Type Name="InputBinding" FullName="System.Windows.Input.InputBinding">
  <TypeSignature Language="C#" Value="public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.Freezable implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits Freezable&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::Freezable, System::Windows::Input::ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="2eb8d-101"><see cref="T:System.Windows.Input.InputGesture" /> とコマンドの間のバインディングを表します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-101">Represents a binding between an <see cref="T:System.Windows.Input.InputGesture" /> and a command.</span></span> <span data-ttu-id="2eb8d-102">コマンドは、<see cref="T:System.Windows.Input.RoutedCommand" /> の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-102">The command is potentially a <see cref="T:System.Windows.Input.RoutedCommand" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2eb8d-103">ユーザー入力が作成することでコマンドを呼び出すことを指定することができます、<xref:System.Windows.Input.InputBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-103">You can specify that user input invokes a command by creating a <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="2eb8d-104">ユーザーが、指定された入力を実行するときに、<xref:System.Windows.Input.ICommand>に設定されている、<xref:System.Windows.Input.InputBinding.Command%2A>プロパティを実行します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-104">When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.</span></span>  
  
 <span data-ttu-id="2eb8d-105">指定することができます、<xref:System.Windows.Input.InputBinding>でバインディングを作成することで、オブジェクトで定義されているコマンドを呼び出す、 <xref:System.Windows.Input.InputBinding.Command%2A>、 <xref:System.Windows.Input.InputBinding.CommandParameter%2A>、および<xref:System.Windows.Input.InputBinding.CommandTarget%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-105">You can specify that the <xref:System.Windows.Input.InputBinding> invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties.</span></span> <span data-ttu-id="2eb8d-106">これにより、カスタム コマンドを定義し、ユーザー入力に関連付けることができます。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-106">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="2eb8d-107">詳細については、2 番目の例「例」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-107">For more information, see the second example in the Examples section.</span></span>  
  
 <span data-ttu-id="2eb8d-108"><xref:System.Windows.Input.InputBinding>登録することによって特定のオブジェクトで、またはクラス レベルで定義できます、<xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A>で、<xref:System.Windows.Input.CommandManager>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-108">An <xref:System.Windows.Input.InputBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 <span data-ttu-id="2eb8d-109"><xref:System.Windows.Input.InputBinding>クラス自体はパブリックの既定のコンス トラクターが公開しないために XAML の使用方法をサポートしません (既定のコンス トラクターがあるが、保護されている)。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-109">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="2eb8d-110">ただし、派生クラスのパブリック コンス トラクターを公開でき、そのためのプロパティを設定、派生クラスから継承されている<xref:System.Windows.Input.InputBinding>XAML の使用方法とします。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-110">However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="2eb8d-111">既存の 2 つ<xref:System.Windows.Input.InputBinding>-派生クラスであり、XAML でインスタンス化することがあり、XAML でのプロパティを設定することができますが、<xref:System.Windows.Input.KeyBinding>と<xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-111">Two existing <xref:System.Windows.Input.InputBinding>-derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="2eb8d-112">一般的なプロパティ[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]XAML では 1 つまたは複数に設定されているプログラミング<xref:System.Windows.Input.InputBinding>オブジェクトの値としては、<xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-112">The typical property in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming that is set in XAML and takes one or more <xref:System.Windows.Input.InputBinding> objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> property.</span></span>  
  
<a name="xamlObjectElementUsage_InputBinding"></a>   
## <a name="xaml-object-element-usage"></a><span data-ttu-id="2eb8d-113">XAML オブジェクト要素の使用方法</span><span class="sxs-lookup"><span data-stu-id="2eb8d-113">XAML Object Element Usage</span></span>  
 <span data-ttu-id="2eb8d-114">\<*inputBindingDerivedClass…/*></span><span class="sxs-lookup"><span data-stu-id="2eb8d-114">\<*inputBindingDerivedClass…/*></span></span>  
  
<a name="xamlValues_InputBinding"></a>   
## <a name="xaml-values"></a><span data-ttu-id="2eb8d-115">XAML 値</span><span class="sxs-lookup"><span data-stu-id="2eb8d-115">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="2eb8d-116">派生クラス<xref:System.Windows.Input.InputBinding>などオブジェクト要素の構文をサポートする<xref:System.Windows.Input.KeyBinding>または<xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-116">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="2eb8d-117">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-117">See Remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2eb8d-118">次の例を使用する方法を示しています、<xref:System.Windows.Input.KeyBinding>にバインドする、<xref:System.Windows.Input.KeyGesture>を<xref:System.Windows.Input.ApplicationCommands.Open%2A>コマンド。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-118">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span> <span data-ttu-id="2eb8d-119">キーのジェスチャを実行すると、開いているコマンドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-119">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="2eb8d-120">次の例は、カスタム コマンドをバインドする方法を示して<xref:System.Windows.Input.InputBinding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-120">The following examples show how to bind a custom command to <xref:System.Windows.Input.InputBinding> objects.</span></span> <span data-ttu-id="2eb8d-121">これらの例では、ユーザーを次のアクションのいずれかを実行して背景色を変更できるようにアプリケーションを作成します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-121">These examples create an application that enables the user to change the background color by performing one of the following actions:</span></span>  
  
-   <span data-ttu-id="2eb8d-122">ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-122">Clicking a button.</span></span>  
  
-   <span data-ttu-id="2eb8d-123">Ctrl キーを押しながら C キーを押してます。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-123">Pressing CTRL+C.</span></span>  
  
-   <span data-ttu-id="2eb8d-124">右クリックし、 <xref:System.Windows.Controls.StackPanel> (外、 <xref:System.Windows.Controls.ListBox>)。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-124">Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).</span></span>  
  
 <span data-ttu-id="2eb8d-125">最初の例では、という名前のクラスを作成する`SimpleDelegateCommand`です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-125">The first example creates a class named `SimpleDelegateCommand`.</span></span> <span data-ttu-id="2eb8d-126">このクラスは、コマンドを作成するオブジェクトは、コマンドが実行されるときに発生するアクションを定義できるように、デリゲートを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-126">This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes.</span></span> <span data-ttu-id="2eb8d-127">`SimpleDelegateCommand` またキーし、マウスの新機能を指定するプロパティを定義入力は、コマンドを起動します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-127">`SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command.</span></span> <span data-ttu-id="2eb8d-128">`GestureKey` および`GestureModifier`キーボード入力の指定`MouseGesture`マウス入力を指定します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-128">`GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.</span></span>  
  
 [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]
 [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  
  
 <span data-ttu-id="2eb8d-129">次の例を作成して、初期化、 `ColorChangeCommand`、これは、`SimpleDelegateCommand`です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-129">The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`.</span></span> <span data-ttu-id="2eb8d-130">コマンドが呼び出され、設定したときに実行するメソッドも定義、 `GestureKey`、 `GestureModifier`、および`MouseGesture`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-130">The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties.</span></span> <span data-ttu-id="2eb8d-131">アプリケーションを呼び出すと、`InitializeCommand`メソッドは、プログラムの開始などのコンス トラクターと、<xref:System.Windows.Window>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-131">An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.</span></span>  
  
 [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]
 [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  
  
 <span data-ttu-id="2eb8d-132">最後に、次の例では、ユーザー インターフェイスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-132">Finally, the following example creates the user interface.</span></span> <span data-ttu-id="2eb8d-133">この例で追加、<xref:System.Windows.Input.KeyBinding>と<xref:System.Windows.Input.MouseBinding>を<xref:System.Windows.Controls.StackPanel>を格納している、<xref:System.Windows.Controls.Button>と<xref:System.Windows.Controls.ListBox>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-133">The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>.</span></span> <span data-ttu-id="2eb8d-134">ユーザーが内の項目を選択すると、 <xref:System.Windows.Controls.ListBox>、そのユーザーは、選択した色を背景の色を変更できます。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-134">When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color.</span></span> <span data-ttu-id="2eb8d-135">各ケースで、`CommandParameter`プロパティが選択した項目にバインドされる、 <xref:System.Windows.Controls.ListBox>、および`Command`プロパティにバインドされる、`ColorChangeCommand`です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-135">In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`.</span></span> <span data-ttu-id="2eb8d-136"><xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>、 <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>、および<xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType>プロパティ対応するプロパティにバインドされて、`SimpleDelegateCommand`クラスです。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-136">The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.</span></span>  
  
 [!code-xaml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.UIElement.InputBindings" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2eb8d-137"><see cref="T:System.Windows.Input.InputBinding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-137">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InputBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2eb8d-138"><see cref="T:System.Windows.Input.InputBinding" /> から派生したクラスの基本の初期化を行います。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-138">Provides base initialization for classes derived from <see cref="T:System.Windows.Input.InputBinding" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2eb8d-139"><xref:System.Windows.Input.InputBinding> 技術的には、抽象クラスではありませんが、既定のコンス トラクターが意図的にはアクセスを保護します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-139"><xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the default constructor is deliberately protected access.</span></span> <span data-ttu-id="2eb8d-140">これは、作成の効果<xref:System.Windows.Input.InputBinding>XAML の"abstract"のクラスです。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-140">This has the effect of making <xref:System.Windows.Input.InputBinding> an "abstract" class for XAML.</span></span> <span data-ttu-id="2eb8d-141">既存のプロパティがある[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]型のオブジェクトを期待する XAML の使用方法のある<xref:System.Windows.Input.InputBinding>を指定することはできませんが、 <xref:System.Windows.Input.InputBinding> XAML でインスタンス。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-141">There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that have XAML usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in XAML.</span></span> <span data-ttu-id="2eb8d-142">デバイスに固有のいずれかを指定する代わりに、<xref:System.Windows.Input.InputBinding>値として、派生したクラスは、たとえば<xref:System.Windows.Input.KeyBinding>または<xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-142">Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="2eb8d-143">カスタムを実装する場合<see cref="T:System.Windows.Input.InputBinding" />XAML の使用方法をサポートする、基本の初期化をこのコンス トラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-143">If you implement a custom <see cref="T:System.Windows.Input.InputBinding" /> that supports a XAML usage, use this constructor for base initialization.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.InputGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As InputGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InputBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::InputGesture ^ gesture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.InputGesture" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="2eb8d-144"><c>gesture</c> に関連付けるコマンド。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-144">The command to associate with <c>gesture</c>.</span></span></param>
        <param name="gesture"><span data-ttu-id="2eb8d-145"><c>command</c> に関連付ける入力ジェスチャ。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-145">The input gesture to associate with <c>command</c>.</span></span></param>
        <summary><span data-ttu-id="2eb8d-146">コマンドおよび入力ジェスチャを指定して、<see cref="T:System.Windows.Input.InputBinding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-146">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class with the specified command and input gesture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2eb8d-147">既存の入力バインディング クラスを使用して、ソフトウェア開発者は、カスタム コマンドを定義する場合でも、通常はこのコンス トラクターを使用しません。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-147">If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</span></span> <span data-ttu-id="2eb8d-148">派生クラスのコンス トラクターをするか、使用する代わりに、(<xref:System.Windows.Input.KeyBinding>と<xref:System.Windows.Input.MouseBinding>)、またはこのコンス トラクターをカスタム クラスの基本のインスタンスとして使用されます。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-148">Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class.</span></span> <span data-ttu-id="2eb8d-149">ただし、<xref:System.Windows.Input.InputBinding>クラスは、原則として、実際には、入力バインドを表すどのデバイスを選択する必要がありますのさまざまな入力デバイスをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-149">Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent.</span></span> <span data-ttu-id="2eb8d-150">のみを設定する 1 つだけ<xref:System.Windows.Input.InputBinding.Gesture%2A>入力バインディング、およびジェスチャの値は、デバイスに固有です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-150">You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2eb8d-151">次の例に関連付けるには、このコンス トラクターを使用する方法を示しています、<xref:System.Windows.Input.KeyGesture>で、<xref:System.Windows.Input.RoutedCommand>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-151">The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcomand)]
 [!code-vb[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcomand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2eb8d-152"><paramref name="command" /> または <paramref name="gesture" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-152"><paramref name="command" /> or <paramref name="gesture" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="2eb8d-153">複製する対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-153">The object to clone.</span></span></param>
        <summary><span data-ttu-id="2eb8d-154">指定されたオブジェクトのプロパティの基本 (アニメーション化されていない) 値をコピーします。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-154">Copies the base (non-animated) values of the properties of the specified object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="2eb8d-155">複製する対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-155">The object to clone.</span></span></param>
        <summary><span data-ttu-id="2eb8d-156">指定されたオブジェクトのプロパティの現在の値をコピーします。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-156">Copies the current values of the properties of the specified object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2eb8d-157">この入力バインドに関連付けられる <see cref="T:System.Windows.Input.ICommand" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-157">Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this input binding.</span></span></summary>
        <value><span data-ttu-id="2eb8d-158">関連付けられているコマンド。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-158">The associated command.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2eb8d-159"><xref:System.Windows.Input.InputBinding>クラスはパブリックの既定のコンス トラクターが公開しないために XAML の使用方法をサポートしません (既定のコンス トラクターを持つが保護されている)。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-159">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</span></span> <span data-ttu-id="2eb8d-160">ただし、派生クラスのパブリック コンス トラクターを公開できますおよびから継承されたプロパティがそのため、使用できます<xref:System.Windows.Input.InputBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-160">However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="2eb8d-161">既存の 2 つ<xref:System.Windows.Input.InputBinding>派生クラスであり、XAML でインスタンス化することがあり、XAML の使用法とプロパティを設定できますが、<xref:System.Windows.Input.KeyBinding>と<xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-161">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties with XAML usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 <span data-ttu-id="2eb8d-162"><xref:System.Windows.Input.ICommand> 既存の特定できるようにする型コンバーターを参照して<xref:System.Windows.Input.ICommand>値を指定する文字列の形式で実装します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-162"><xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string.</span></span> <span data-ttu-id="2eb8d-163">この型変換動作は、このプロパティの属性値の形式を設定します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-163">This type conversion behavior sets the attribute value form of this property.</span></span> <span data-ttu-id="2eb8d-164">バインドすることも、 <xref:System.Windows.Input.InputBinding.Command%2A>、 <xref:System.Windows.Input.InputBinding.CommandParameter%2A>、および<xref:System.Windows.Input.InputBinding.CommandTarget%2A>プロパティを<xref:System.Windows.Input.ICommand>オブジェクトで定義されています。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-164">You can also bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="2eb8d-165">これにより、カスタム コマンドを定義し、ユーザー入力に関連付けることができます。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-165">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="2eb8d-166">詳細については、2 番目の例を参照してください。<xref:System.Windows.Input.InputBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-166">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="2eb8d-167">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="2eb8d-167">XAML Attribute Usage</span></span>  
 <span data-ttu-id="2eb8d-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span><span class="sxs-lookup"><span data-stu-id="2eb8d-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span></span>  
  
<a name="xamlPropertyElementUsage_Command"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="2eb8d-169">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="2eb8d-169">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Command>  
    <iCommandImplementation/>  
  </inputBindingDerivedClass.Command>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a><span data-ttu-id="2eb8d-170">XAML 値</span><span class="sxs-lookup"><span data-stu-id="2eb8d-170">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="2eb8d-171">派生クラス<xref:System.Windows.Input.InputBinding>などオブジェクト要素の構文をサポートする<xref:System.Windows.Input.KeyBinding>または<xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-171">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="2eb8d-172">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-172">See Remarks.</span></span>  
  
 `iCommandImplementation`  
 <span data-ttu-id="2eb8d-173">オブジェクトの実装<xref:System.Windows.Input.ICommand>オブジェクト要素の構文をサポートしている (既定のパブリック コンス トラクターを持つ)。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-173">An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public default constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2eb8d-174">次の例を使用する方法を示しています、<xref:System.Windows.Input.KeyBinding>にバインドする、<xref:System.Windows.Input.KeyGesture>を<xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType>コマンド。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-174">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> command.</span></span> <span data-ttu-id="2eb8d-175">キーのジェスチャを実行すると、開いているコマンドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-175">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2eb8d-176"><see cref="P:System.Windows.Input.InputBinding.Command" /> 値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-176">The <see cref="P:System.Windows.Input.InputBinding.Command" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2eb8d-177">特定のコマンドのコマンド固有のデータを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-177">Gets or sets the command-specific data for a particular command.</span></span></summary>
        <value><span data-ttu-id="2eb8d-178">コマンド固有のデータ。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-178">The command-specific data.</span></span> <span data-ttu-id="2eb8d-179">既定値は、<see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-179">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2eb8d-180"><xref:System.Windows.Input.InputBinding.CommandParameter%2A>を実行するときに、コマンドに固有の情報を渡すプロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-180">The <xref:System.Windows.Input.InputBinding.CommandParameter%2A> property is used to pass specific information to the command when it is executed.</span></span> <span data-ttu-id="2eb8d-181">データの型は、コマンドによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-181">The type of the data is defined by the command.</span></span> <span data-ttu-id="2eb8d-182">多くのコマンドにはコマンドのパラメーターです。 予期しません。これらのコマンドでは、渡された任意のコマンド パラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-182">Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</span></span>  
  
 <span data-ttu-id="2eb8d-183">入力バインディングが関連付けられているコマンドが、 <xref:System.Windows.Input.RoutedCommand>、<xref:System.Windows.Input.InputBinding.CommandParameter%2A>に渡される入力バインドの<xref:System.Windows.Input.RoutedCommand>を通じてハンドラー、<xref:System.Windows.Input.ExecutedRoutedEventArgs>と<xref:System.Windows.Input.CanExecuteRoutedEventArgs>コマンドが処理されるときにイベント データ。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-183">If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.InputBinding.CommandParameter%2A> of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.</span></span>  
  
 <span data-ttu-id="2eb8d-184">データ型とコマンド パラメーターの目的コマンドごとに別々 に定義でき、`null`です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-184">The data type and purpose of the command parameter are defined differently for each command and can be `null`.</span></span> <span data-ttu-id="2eb8d-185">バインドすることができます、 <xref:System.Windows.Input.InputBinding.Command%2A>、 <xref:System.Windows.Input.InputBinding.CommandParameter%2A>、および<xref:System.Windows.Input.InputBinding.CommandTarget%2A>プロパティを<xref:System.Windows.Input.ICommand>オブジェクトで定義されています。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-185">You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="2eb8d-186">これにより、カスタム コマンドを定義し、ユーザー入力に関連付けることができます。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-186">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="2eb8d-187">詳細については、2 番目の例を参照してください。<xref:System.Windows.Input.InputBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-187">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
 <span data-ttu-id="2eb8d-188"><xref:System.Windows.Input.InputBinding>クラスはパブリックの既定のコンス トラクターが公開しないために XAML の使用方法をサポートしません (既定のコンス トラクターを持つが保護されている)。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-188">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</span></span> <span data-ttu-id="2eb8d-189">ただし、派生クラスのパブリック コンス トラクターを公開でき、そのためから継承されたプロパティを設定できます<xref:System.Windows.Input.InputBinding>と XAML を使用します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-189">However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with XAML usage.</span></span> <span data-ttu-id="2eb8d-190">既存の 2 つ<xref:System.Windows.Input.InputBinding>派生クラスであり、XAML でインスタンス化することがあり、XAML でのプロパティを設定することができますが、<xref:System.Windows.Input.KeyBinding>と<xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-190">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="2eb8d-191">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="2eb8d-191">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandParameter="commandParameterString"/>  
```  
  
<a name="xamlPropertyElementUsage_CommandParameter"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="2eb8d-192">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="2eb8d-192">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.CommandParameter>  
    <commandParameterObject/>  
  </inputBindingDerivedClass.CommandParameter>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a><span data-ttu-id="2eb8d-193">XAML 値</span><span class="sxs-lookup"><span data-stu-id="2eb8d-193">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="2eb8d-194">派生クラス<xref:System.Windows.Input.InputBinding>などオブジェクト要素の構文をサポートする<xref:System.Windows.Input.KeyBinding>または<xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-194">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="2eb8d-195">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-195">See Remarks.</span></span>  
  
 `commandParameterString`  
 <span data-ttu-id="2eb8d-196">特定のコマンドによって処理される文字列。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-196">A string that is processed by a particular command.</span></span> <span data-ttu-id="2eb8d-197">文字列は、XAML で簡単に設定することができますので、コマンド パラメーターに使用する共通の型です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-197">Strings are the common type used for command parameters because they can be easily set in XAML.</span></span> <span data-ttu-id="2eb8d-198">期待される文字列の形式とその目的は、入力バインディングが関連付けられている特定のコマンドのドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-198">For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</span></span> <span data-ttu-id="2eb8d-199">多くのコマンドでは、パラメーターは期待できません。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-199">Many commands do not expect parameters.</span></span>  
  
 `commandParameterObject`  
 <span data-ttu-id="2eb8d-200">特定のコマンドによって処理されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-200">An object that is processed by a particular command.</span></span> <span data-ttu-id="2eb8d-201">すべての既存[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]コマンドは、文字列を使用します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-201">All existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commands use strings.</span></span> <span data-ttu-id="2eb8d-202">そのため、このプロパティ要素構文では、カスタム コマンド シナリオに関連するだけです。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-202">Therefore, this property element syntax is only relevant for custom command scenarios.</span></span> <span data-ttu-id="2eb8d-203">この構文をサポートするために、`commandParameterObject`オブジェクトは、オブジェクトの要素の構文 (パブリック既定コンス トラクターがあります) もサポートする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-203">In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2eb8d-204"><see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-204">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2eb8d-205"><see cref="P:System.Windows.Input.InputBinding.Command" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-205">Identifies the <see cref="P:System.Windows.Input.InputBinding.Command" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2eb8d-206">コマンドの対象要素を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-206">Gets or sets the target element of the command.</span></span></summary>
        <value><span data-ttu-id="2eb8d-207">コマンドの対象。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-207">The target of the command.</span></span> <span data-ttu-id="2eb8d-208">既定値は、<see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-208">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2eb8d-209">システムのコマンドを実行する Windows Presentation foundation、<xref:System.Windows.Input.InputBinding.CommandTarget%2A>プロパティを<xref:System.Windows.Input.ICommandSource>オブジェクトは、該当する場合にのみ、<xref:System.Windows.Input.ICommand>は、<xref:System.Windows.Input.RoutedCommand>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-209">In the Windows Presentation Foundation commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="2eb8d-210">場合、<xref:System.Windows.Input.InputBinding.CommandTarget%2A>に設定されている、 <xref:System.Windows.Input.ICommandSource> 、対応するコマンドが、<xref:System.Windows.Input.RoutedCommand>コマンドの対象は無視されます。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-210">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 <span data-ttu-id="2eb8d-211">使用すると、 <xref:System.Windows.Input.RoutedCommand>、コマンドの対象が対象となるオブジェクト、<xref:System.Windows.Input.CommandManager.Executed>と<xref:System.Windows.Input.CommandManager.CanExecute>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-211">When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised.</span></span> <span data-ttu-id="2eb8d-212">場合、<xref:System.Windows.Input.InputBinding.CommandTarget%2A>プロパティが設定されていない、キーボード フォーカスを持つ要素がターゲットとして使用します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-212">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property is not set, the element with keyboard focus is used as the target.</span></span>  
  
 <span data-ttu-id="2eb8d-213"><xref:System.Windows.Input.InputBinding>自体クラスはパブリックの既定のコンス トラクターが公開しないために、XAML で使用をサポートしません (既定のコンス トラクターがあるが、保護されている)。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-213">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="2eb8d-214">ただし、派生クラスは、パブリック コンス トラクターを公開でき、したがってから継承されたプロパティを設定できます<xref:System.Windows.Input.InputBinding>XAML の使用方法とします。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-214">However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="2eb8d-215">既存の 2 つ<xref:System.Windows.Input.InputBinding>派生クラスであり、XAML でインスタンス化することがあり、XAML でのプロパティを設定することができますが、<xref:System.Windows.Input.KeyBinding>と<xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-215">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandTarget"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="2eb8d-216">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="2eb8d-216">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandTarget="bindingToTarget"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a><span data-ttu-id="2eb8d-217">XAML 値</span><span class="sxs-lookup"><span data-stu-id="2eb8d-217">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="2eb8d-218">派生クラス<xref:System.Windows.Input.InputBinding>などオブジェクト要素の構文をサポートする<xref:System.Windows.Input.KeyBinding>または<xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-218">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="2eb8d-219">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-219">See Remarks.</span></span>  
  
 `bindingToTarget`  
 <span data-ttu-id="2eb8d-220">要素の名前付きを既存のオブジェクト参照を返すことができるバインド構文の型を使用する文字列。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-220">A string that uses a type of binding syntax that can return an object reference to an existing named element.</span></span> <span data-ttu-id="2eb8d-221">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-221">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2eb8d-222"><see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-222">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2eb8d-223"><see cref="T:System.Windows.Input.InputBinding" /> のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-223">Creates an instance of an <see cref="T:System.Windows.Input.InputBinding" />.</span></span></summary>
        <returns><span data-ttu-id="2eb8d-224">新しいオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-224">The new object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2eb8d-225">この入力バインドに関連付けられる <see cref="T:System.Windows.Input.InputGesture" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-225">Gets or sets the <see cref="T:System.Windows.Input.InputGesture" /> associated with this input binding.</span></span></summary>
        <value><span data-ttu-id="2eb8d-226">関連付けられたジェスチャ。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-226">The associated gesture.</span></span> <span data-ttu-id="2eb8d-227">既定値は、<see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-227">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2eb8d-228">入力ジェスチャは、コマンドを起動する動作です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-228">The input gesture is the action that invokes the command.</span></span> <span data-ttu-id="2eb8d-229">入力ジェスチャの例については[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]は<xref:System.Windows.Input.KeyGesture>と<xref:System.Windows.Input.MouseGesture>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-229">Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>.</span></span> <span data-ttu-id="2eb8d-230">A<xref:System.Windows.Input.KeyGesture>の組み合わせ、<xref:System.Windows.Input.Key>と一連の<xref:System.Windows.Input.ModifierKeys>します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-230">A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span> <span data-ttu-id="2eb8d-231">A<xref:System.Windows.Input.MouseGesture>の組み合わせ、<xref:System.Windows.Input.MouseAction>と一連の<xref:System.Windows.Input.ModifierKeys>します。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-231">A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span>  
  
 <span data-ttu-id="2eb8d-232"><xref:System.Windows.Input.InputBinding>自体クラスはパブリックの既定のコンス トラクターが公開しないために、XAML で使用をサポートしません (既定のコンス トラクターがあるが、保護されている)。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-232">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="2eb8d-233">ただし、派生クラスは、パブリック コンス トラクターを公開でき、したがってから継承されたプロパティを設定できます<xref:System.Windows.Input.InputBinding>XAML の使用方法とします。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-233">However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="2eb8d-234">既存の 2 つ<xref:System.Windows.Input.InputBinding>派生クラスであり、XAML でインスタンス化することがあり、XAML でのプロパティを設定することができますが、<xref:System.Windows.Input.KeyBinding>と<xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-234">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_gesture"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="2eb8d-235">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="2eb8d-235">XAML Attribute Usage</span></span>  
 <span data-ttu-id="2eb8d-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span><span class="sxs-lookup"><span data-stu-id="2eb8d-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span></span>  
  
 <span data-ttu-id="2eb8d-237">\- または</span><span class="sxs-lookup"><span data-stu-id="2eb8d-237">\- or -</span></span>  
  
 <span data-ttu-id="2eb8d-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span><span class="sxs-lookup"><span data-stu-id="2eb8d-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span></span>  
  
 <span data-ttu-id="2eb8d-239">\- または</span><span class="sxs-lookup"><span data-stu-id="2eb8d-239">\- or -</span></span>  
  
 <span data-ttu-id="2eb8d-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span><span class="sxs-lookup"><span data-stu-id="2eb8d-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span></span>  
  
<a name="xamlPropertyElementUsage_gesture"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="2eb8d-241">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="2eb8d-241">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Gesture>  
    <inputGestureImplementation/>  
  </inputBindingDerivedClass.Gesture>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_gesture"></a>   
## <a name="xaml-values"></a><span data-ttu-id="2eb8d-242">XAML 値</span><span class="sxs-lookup"><span data-stu-id="2eb8d-242">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="2eb8d-243">派生クラス<xref:System.Windows.Input.InputBinding>などオブジェクト要素の構文をサポートする<xref:System.Windows.Input.KeyBinding>または<xref:System.Windows.Input.MouseBinding>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-243">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="2eb8d-244">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-244">See Remarks.</span></span>  
  
 `inputGestureImplementation`  
 <span data-ttu-id="2eb8d-245">カスタムの派生クラス<xref:System.Windows.Input.InputGesture>オブジェクト要素の構文をサポートします。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-245">A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2eb8d-246">次の例を使用する方法を示しています、<xref:System.Windows.Input.KeyBinding>にバインドする、<xref:System.Windows.Input.KeyGesture>を<xref:System.Windows.Input.RoutedCommand>です。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-246">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="2eb8d-247">ときに、 <xref:System.Windows.Input.KeyGesture> alt キーを押しながら L キーが押された、<xref:System.Windows.Input.ApplicationCommands.Close%2A>コマンドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-247">When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.</span></span>  
  
 [!code-xaml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="2eb8d-248">複製する対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-248">The object to clone.</span></span></param>
        <summary><span data-ttu-id="2eb8d-249">基本プロパティ値 (アニメーション化されていない値) を使用して、このインスタンスを、指定した <see cref="T:System.Windows.Freezable" /> の固定された複製にします。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-249">Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> by using base (non-animated) property values.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="2eb8d-250">複製する対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-250">The object to clone.</span></span></param>
        <summary><span data-ttu-id="2eb8d-251">現在のインスタンスを、指定した <see cref="T:System.Windows.Freezable" /> の固定された複製にします。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-251">Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />.</span></span> <span data-ttu-id="2eb8d-252">オブジェクトに、アニメーション化された依存関係プロパティが存在する場合、現在アニメーション化されている値がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2eb8d-252">If the object has animated dependency properties, their current animated values are copied.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>