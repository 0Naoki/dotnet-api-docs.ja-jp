<Type Name="MouseGesture" FullName="System.Windows.Input.MouseGesture">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aa5427c66218c3380f88d1d8f4b5698423c45bfa" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70554383" /></Metadata><TypeSignature Language="C#" Value="public class MouseGesture : System.Windows.Input.InputGesture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MouseGesture extends System.Windows.Input.InputGesture" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.MouseGesture" />
  <TypeSignature Language="VB.NET" Value="Public Class MouseGesture&#xA;Inherits InputGesture" />
  <TypeSignature Language="C++ CLI" Value="public ref class MouseGesture : System::Windows::Input::InputGesture" />
  <TypeSignature Language="F#" Value="type MouseGesture = class&#xA;    inherit InputGesture" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputGesture</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.MouseGestureConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.MouseGestureValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>コマンドの呼び出しに使用できるマウス入力ジェスチャを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 とは異なり、 <xref:System.Windows.Input.MouseAction>は、有効<xref:System.Windows.Input.MouseGesture>なにするため<xref:System.Windows.Input.ModifierKeys>にとペアにする必要はありません。 <xref:System.Windows.Input.KeyGesture>  
  
 <xref:System.Windows.Input.RoutedCommand> <xref:System.Windows.Input.ICommand>は、が発生 <xref:System.Windows.Input.MouseGesture> したときにコマンドが呼び出されるよう<xref:System.Windows.Input.MouseBinding>に、を介して (または他の実装) にバインドできます。 <xref:System.Windows.Input.MouseGesture>  
  
 属性の使用では、通常、で[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]設定されるプロパティは、ジェスチャがマウスアクションと1つ以上の修飾子キーの両方を表すことができる場合にはです。 <xref:System.Windows.Input.MouseBinding.Gesture%2A> <xref:System.Windows.Input.MouseGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] また、 <xref:System.Windows.Input.MouseBinding.Gesture%2A>プロパティをマウス操作だけに設定することもできます。 一般に、修飾子を指定しない場合でも<xref:System.Windows.Input.KeyBinding.Gesture%2A> 、を[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]設定<xref:System.Windows.Input.MouseBinding.MouseAction%2A>するのではなく、の属性のみを使用することをお勧めします。 これにより、あいまいさが解消され、最も効率的な構文が提供され、シリアル化の最も簡単な表現が提供されます。  
  
 <xref:System.Windows.Input.MouseGesture>オブジェクト要素の使用は可能ですが、通常はプロパティ要素の<xref:System.Windows.Input.MouseBinding.Gesture%2A>構文を<xref:System.Windows.Input.MouseBinding>使用せずにインラインのプロパティを設定できるため、一般的ではありません。 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]  
  
<a name="xamlAttributeUsage_MouseGesture"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object property="mouseAction"/>  
- or -  
<object property="oneOrMoreModifierKeys+mouseAction"/>  
```  
  
<a name="xamlValues_MouseGesture"></a>   
## <a name="xaml-values"></a>XAML 値  
 `mouseAction`  
 <xref:System.Windows.Input.MouseAction>  
  
 1つのマウス操作。  
  
 `oneOrMoreModifierKeys`  
 列挙体で定義される<xref:System.Windows.Input.ModifierKeys> 1 つ以上の修飾子キー。 複数の修飾子キーが指定されている場合は、各修飾子キーが "+" 文字で区切られます。  
  
   
  
## Examples  
 を作成<xref:System.Windows.Input.MouseGesture>し、を<xref:System.Windows.Input.RoutedCommand>使用<xref:System.Windows.Input.MouseBinding>してそれをに関連付ける方法を次の例に示します。  <xref:System.Windows.Input.ModifierKeys.Control>キーが押されている間にマウスホイールをクリックする<xref:System.Windows.Input.ApplicationCommands.Open%2A>と、が呼び出されます。  
  
 [!code-xaml[commandlibrarysnippets#MouseBindingMouseGestureXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#mousebindingmousegesturexaml)]  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedtoinputbinding)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedtoinputbinding)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Input.MouseGesture" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseGesture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseGesture.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MouseGesture();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Input.MouseGesture" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseGesture (System.Windows.Input.MouseAction mouseAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.MouseAction mouseAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MouseGesture(System::Windows::Input::MouseAction mouseAction);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.MouseGesture : System.Windows.Input.MouseAction -&gt; System.Windows.Input.MouseGesture" Usage="new System.Windows.Input.MouseGesture mouseAction" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="mouseAction" Type="System.Windows.Input.MouseAction" />
      </Parameters>
      <Docs>
        <param name="mouseAction">このジェスチャに関連付けられているアクション。</param>
        <summary>指定した <see cref="T:System.Windows.Input.MouseAction" /> を使用して <see cref="T:System.Windows.Input.MouseGesture" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="mouseAction" /> は有効な <see cref="T:System.Windows.Input.MouseAction" /> 値ではありません。</exception>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseGesture (System.Windows.Input.MouseAction mouseAction, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.MouseAction mouseAction, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MouseGesture(System::Windows::Input::MouseAction mouseAction, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.MouseGesture : System.Windows.Input.MouseAction * System.Windows.Input.ModifierKeys -&gt; System.Windows.Input.MouseGesture" Usage="new System.Windows.Input.MouseGesture (mouseAction, modifiers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mouseAction" Type="System.Windows.Input.MouseAction" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="mouseAction">このジェスチャに関連付けられているアクション。</param>
        <param name="modifiers">このジェスチャに関連付けられている変換キー。</param>
        <summary>指定した <see cref="T:System.Windows.Input.MouseGesture" /> と <see cref="T:System.Windows.Input.MouseAction" /> を使用して、<see cref="T:System.Windows.Input.ModifierKeys" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="mouseAction" /> が有効な <see cref="T:System.Windows.Input.MouseAction" /> 値ではありません。 
- または - 
 <paramref name="modifiers" /> は有効な <see cref="T:System.Windows.Input.ModifierKeys" /> 値ではありません。</exception>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Matches(object targetElement, class System.Windows.Input.InputEventArgs inputEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Matches(System::Object ^ targetElement, System::Windows::Input::InputEventArgs ^ inputEventArgs);" />
      <MemberSignature Language="F#" Value="override this.Matches : obj * System.Windows.Input.InputEventArgs -&gt; bool" Usage="mouseGesture.Matches (targetElement, inputEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetElement" Type="System.Object" />
        <Parameter Name="inputEventArgs" Type="System.Windows.Input.InputEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetElement">ターゲット。</param>
        <param name="inputEventArgs">このジェスチャの比較対象となる入力イベント データ。</param>
        <summary>指定した <see cref="T:System.Windows.Input.MouseGesture" /> オブジェクトに関連付けられた入力に、<see cref="T:System.Windows.Input.InputEventArgs" /> が一致するかどうかを判断します。</summary>
        <returns>イベント データがこの <see cref="T:System.Windows.Input.MouseGesture" /> に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、が<xref:System.Windows.Input.MouseGesture> <xref:System.Windows.Input.InputEventArgs>のインスタンスに関連付けられている入力と一致するかどうかをテストする方法を示しています。 イベント<xref:System.Windows.UIElement.MouseDown>ハンドラーは、 <xref:System.Windows.Input.MouseGesture.Matches%2A>メソッドを使用して<xref:System.Windows.Input.MouseGesture> 、イベントデータをと比較します。  
  
 [!code-csharp[commandlibrarysnippets#KeyDownHandlerMouseGestureMatches](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keydownhandlermousegesturematches)]
 [!code-vb[commandlibrarysnippets#KeyDownHandlerMouseGestureMatches](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keydownhandlermousegesturematches)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.MouseGesture.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); void set(System::Windows::Input::ModifierKeys value); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys with get, set" Usage="System.Windows.Input.MouseGesture.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Input.MouseGesture" /> に関連付けられている変換キーを取得または設定します。</summary>
        <value>このジェスチャに関連付けられている変換キー。 既定値は <see cref="F:System.Windows.Input.ModifierKeys.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 とは異なり、 <xref:System.Windows.Input.MouseAction>を有効<xref:System.Windows.Input.MouseGesture>なにするために<xref:System.Windows.Input.ModifierKeys> 、をと組み合わせて使用する必要はありません。 <xref:System.Windows.Input.KeyGesture>  
  
 <xref:System.Windows.Input.ModifierKeys>はビットフィールドの列挙体であるため、複数の修飾子キーを同時に押すことができます。 ビット演算を使用して、押された修飾キーの正確なセットを判別します。  
  
<a name="xamlAttributeUsage_Modifiers"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object Modifiers="oneOrMoreModifierKeys"/>  
```  
  
<a name="xamlValues_Modifiers"></a>   
## <a name="xaml-values"></a>XAML 値  
 *oneOrMoreModifierKeys*  
 列挙体で定義される<xref:System.Windows.Input.ModifierKeys> 、"+" 文字で区切られた1つ以上の修飾キー。  
  
   
  
## Examples  
 を作成<xref:System.Windows.Input.MouseGesture>し、を<xref:System.Windows.Input.RoutedCommand>使用<xref:System.Windows.Input.MouseBinding>してそれをに関連付ける方法を次の例に示します。  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedtoinputbinding)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedtoinputbinding)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="MouseAction">
      <MemberSignature Language="C#" Value="public System.Windows.Input.MouseAction MouseAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.MouseAction MouseAction" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.MouseGesture.MouseAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MouseAction As MouseAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::MouseAction MouseAction { System::Windows::Input::MouseAction get(); void set(System::Windows::Input::MouseAction value); };" />
      <MemberSignature Language="F#" Value="member this.MouseAction : System.Windows.Input.MouseAction with get, set" Usage="System.Windows.Input.MouseGesture.MouseAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このジェスチャに関連付けられている <see cref="T:System.Windows.Input.MouseAction" /> を取得または設定します。</summary>
        <value>このジェスチャに関連付けられているマウス アクション。 既定値は <see cref="F:System.Windows.Input.MouseAction.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 とは異なり、 <xref:System.Windows.Input.MouseAction>を有効<xref:System.Windows.Input.MouseGesture>なにするために<xref:System.Windows.Input.ModifierKeys> 、をと組み合わせて使用する必要はありません。 <xref:System.Windows.Input.KeyGesture>  
  
   
  
## Examples  
 を作成<xref:System.Windows.Input.MouseGesture>し、を<xref:System.Windows.Input.RoutedCommand>使用<xref:System.Windows.Input.MouseBinding>してそれをに関連付ける方法を次の例に示します。  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedtoinputbinding)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedtoinputbinding)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
  </Members>
</Type>
