<Type Name="IList&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b5da70a2f413b34d3f0831128f920baea87c1ff7" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52733305" /></Metadata><TypeSignature Language="C#" Value="public interface IList&lt;TValue&gt; : ICloneable, Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer&lt;TValue&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IList`1&lt;TValue&gt; implements class Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1&lt;!TValue&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.IList`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IList(Of TValue)&#xA;Implements IBidirectionalContainer(Of TValue), ICloneable, ICollection" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public interface class IList : ICloneable, Microsoft::VisualC::StlClr::Generic::IBidirectionalContainer&lt;TValue&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type IList&lt;'Value&gt; = interface&#xA;    interface IBidirectionalContainer&lt;'Value&gt;&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue"><span data-ttu-id="7f885-101">リスト要素の型。</span><span class="sxs-lookup"><span data-stu-id="7f885-101">The type of a list element.</span></span></typeparam>
    <summary><span data-ttu-id="7f885-102">STL/CLR <see href="https://docs.microsoft.com/cpp/dotnet/list-stl-clr">リスト</see> オブジェクトのインターフェイスを定義します。</span><span class="sxs-lookup"><span data-stu-id="7f885-102">Defines the interface for an STL/CLR <see href="https://docs.microsoft.com/cpp/dotnet/list-stl-clr">list</see> object.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="assign">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7f885-103">コンテナーのすべての要素を、指定した要素で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="7f885-103">Replaces all elements of the container with the specified elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-104">詳細については、次を参照してください。 [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-104">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (System.Collections.IEnumerable _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(class System.Collections.IEnumerable _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_Right As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(System::Collections::IEnumerable ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member assign : System.Collections.IEnumerable -&gt; unit" Usage="iList.assign _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="7f885-105">要素がコンテナーに挿入される列挙体。</span><span class="sxs-lookup"><span data-stu-id="7f885-105">The enumeration whose elements are to be inserted into the container.</span></span></param>
        <summary><span data-ttu-id="7f885-106">被制御シーケンスを、指定した列挙子で指定されるシーケンスで置き換えます。</span><span class="sxs-lookup"><span data-stu-id="7f885-106">Replaces the controlled sequence with the sequence that is designated by the given enumerator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-107">詳細については、次を参照してください。 [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-107">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_First As IInputIterator(Of TValue), _Last As IInputIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member assign : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; unit" Usage="iList.assign (_First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_First"><span data-ttu-id="7f885-108">コンテナーに挿入する要素の範囲の先頭位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-108">The beginning position of the range of elements to insert into the container.</span></span></param>
        <param name="_Last"><span data-ttu-id="7f885-109">コンテナーに挿入する要素の範囲の後の最初の位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-109">The first position beyond the range of elements to insert into the container.</span></span></param>
        <summary><span data-ttu-id="7f885-110">被制御シーケンスをシーケンス <c>[</c><paramref name="_First" /><c>,</c><paramref name="_Last" /><c>)</c> で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="7f885-110">Replaces the controlled sequence with the sequence <c>[</c><paramref name="_First" /><c>,</c><paramref name="_Last" /><c>)</c>.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-111">詳細については、次を参照してください。 [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-111">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (int _Count, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(int32 _Count, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_Count As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(int _Count, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member assign : int * 'Value -&gt; unit" Usage="iList.assign (_Count, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Count" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Count"><span data-ttu-id="7f885-112">コンテナーに挿入する要素の数。</span><span class="sxs-lookup"><span data-stu-id="7f885-112">The number of elements to insert into the container.</span></span></param>
        <param name="_Val"><span data-ttu-id="7f885-113">コンテナーに挿入する要素の値。</span><span class="sxs-lookup"><span data-stu-id="7f885-113">The value of the elements to insert into the container.</span></span></param>
        <summary><span data-ttu-id="7f885-114">被制御シーケンスを、指定した数の指定の要素で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="7f885-114">Replaces the controlled sequence with the specified number of the given element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-115">詳細については、次を参照してください。 [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-115">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="back">
      <MemberSignature Language="C#" Value="public TValue back ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue back() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.back" />
      <MemberSignature Language="VB.NET" Value="Public Function back () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue % back();" />
      <MemberSignature Language="F#" Value="abstract member back : unit -&gt; " Usage="iList.back " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f885-116">コンテナーの最後の要素にアクセスします。</span><span class="sxs-lookup"><span data-stu-id="7f885-116">Accesses the last element of the container.</span></span></summary>
        <returns><span data-ttu-id="7f885-117">被制御シーケンスの最後の要素。被制御シーケンスは空でない必要があります。</span><span class="sxs-lookup"><span data-stu-id="7f885-117">The last element of the controlled sequence, which must be non-empty.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-118">詳細については、次を参照してください。 [list::back (STL/CLR)](/cpp/dotnet/list-stl-clr#back)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-118">For more information, see [list::back (STL/CLR)](/cpp/dotnet/list-stl-clr#back).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="back_item">
      <MemberSignature Language="C#" Value="public TValue back_item { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue back_item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.IList`1.back_item" />
      <MemberSignature Language="VB.NET" Value="Public Property back_item As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue back_item { TValue get(); void set(TValue value); };" />
      <MemberSignature Language="F#" Value="member this.back_item : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.IList&lt;'Value&gt;.back_item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f885-119">コンテナーの最後の要素にアクセスします。</span><span class="sxs-lookup"><span data-stu-id="7f885-119">Accesses the last element of the container.</span></span></summary>
        <value><span data-ttu-id="7f885-120">被制御シーケンスの最後の要素。被制御シーケンスは空でない必要があります。</span><span class="sxs-lookup"><span data-stu-id="7f885-120">The last element of the controlled sequence, which must be non-empty.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-121">詳細については、次を参照してください。 [list::back_item (STL/CLR)](/cpp/dotnet/list-stl-clr#back_item)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-121">For more information, see [list::back_item (STL/CLR)](/cpp/dotnet/list-stl-clr#back_item).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="begin">
      <MemberSignature Language="C#" Value="public void begin (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void begin(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function begin (ByRef  As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ begin(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member begin :  -&gt; unit" Usage="iList.begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="7f885-122">被制御シーケンスの最初の要素、または空のシーケンスの末尾の次の位置を指定するランダム アクセス反復子。</span><span class="sxs-lookup"><span data-stu-id="7f885-122">A random-access iterator that designates the first element of the controlled sequence, or just beyond the end of an empty sequence.</span></span> <span data-ttu-id="7f885-123">これを使用して被制御シーケンスの現在の先頭 (<paramref name="current" />) を指定する反復子を取得しますが、このステータスは被制御シーケンスの長さが変わると変化することがあります。</span><span class="sxs-lookup"><span data-stu-id="7f885-123">You use it to obtain an iterator that designates the <paramref name="current" /> beginning of the controlled sequence, but its status can change if the length of the controlled sequence changes.</span></span></param>
        <summary><span data-ttu-id="7f885-124">被制御シーケンスの先頭を指定します。</span><span class="sxs-lookup"><span data-stu-id="7f885-124">Designates the beginning of the controlled sequence.</span></span></summary>
        <returns><span data-ttu-id="7f885-125">反復子。</span><span class="sxs-lookup"><span data-stu-id="7f885-125">An iterator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="7f885-126">詳細については、次を参照してください。 [list::begin (STL/CLR)](/cpp/dotnet/list-stl-clr#begin)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-126">For more information, see [list::begin (STL/CLR)](/cpp/dotnet/list-stl-clr#begin).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="clear">
      <MemberSignature Language="C#" Value="public void clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void clear();" />
      <MemberSignature Language="F#" Value="abstract member clear : unit -&gt; unit" Usage="iList.clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f885-127">コンテナーからすべての要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="7f885-127">Removes all elements from the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-128">詳細については、次を参照してください。 [list::clear (STL/CLR)](/cpp/dotnet/list-stl-clr#clear)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-128">For more information, see [list::clear (STL/CLR)](/cpp/dotnet/list-stl-clr#clear).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="empty">
      <MemberSignature Language="C#" Value="public bool empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.empty" />
      <MemberSignature Language="VB.NET" Value="Public Function empty () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool empty();" />
      <MemberSignature Language="F#" Value="abstract member empty : unit -&gt; bool" Usage="iList.empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f885-129">コンテナーに要素が存在しないかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="7f885-129">Tests whether the container has no elements.</span></span></summary>
        <returns><span data-ttu-id="7f885-130">コンテナーに要素が存在しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7f885-130"><see langword="true" /> if the container has no elements; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-131">詳細については、次を参照してください。 [list::empty (STL/CLR)](/cpp/dotnet/list-stl-clr#empty)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-131">For more information, see [list::empty (STL/CLR)](/cpp/dotnet/list-stl-clr#empty).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="end">
      <MemberSignature Language="C#" Value="public void end (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void end(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function end (ByRef  As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ end(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member end :  -&gt; unit" Usage="iList.end " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="7f885-132">被制御シーケンスの末尾の次の位置を指すランダム アクセス反復子。</span><span class="sxs-lookup"><span data-stu-id="7f885-132">A random-access iterator that points just beyond the end of the controlled sequence.</span></span> <span data-ttu-id="7f885-133">被制御シーケンスの末尾を指定する反復子を取得する場合に、これを使用します。</span><span class="sxs-lookup"><span data-stu-id="7f885-133">You use it to obtain an iterator that designates the end of the controlled sequence.</span></span> <span data-ttu-id="7f885-134">このステータスは、被制御シーケンスの長さが変わっても変化しません。</span><span class="sxs-lookup"><span data-stu-id="7f885-134">Its status does not change if the length of the controlled sequence changes.</span></span></param>
        <summary><span data-ttu-id="7f885-135">被制御シーケンスの末尾を指定します。</span><span class="sxs-lookup"><span data-stu-id="7f885-135">Designates the end of the controlled sequence.</span></span></summary>
        <returns><span data-ttu-id="7f885-136">反復子。</span><span class="sxs-lookup"><span data-stu-id="7f885-136">An iterator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="7f885-137">詳細については、次を参照してください。 [list::end (STL/CLR)](/cpp/dotnet/list-stl-clr#end)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-137">For more information, see [list::end (STL/CLR)](/cpp/dotnet/list-stl-clr#end).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="erase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7f885-138">コンテナーから要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="7f885-138">Removes elements from the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-139">詳細については、次を参照してください。 [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-139">For more information, see [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void erase(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerBidirectionalIterator(Of TValue), _Where As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where);" />
      <MemberSignature Language="F#" Value="abstract member erase :  * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.erase (, _Where)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="7f885-140">削除された要素の後の最初の残存要素を指定する反復子。このような要素が存在しない場合は <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />。</span><span class="sxs-lookup"><span data-stu-id="7f885-140">An iterator that designates the first element remaining beyond any elements removed, or <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> if no such element exists.</span></span></param>
        <param name="_Where"><span data-ttu-id="7f885-141">消去する要素の位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-141">The position of the element to erase.</span></span></param>
        <summary><span data-ttu-id="7f885-142">指定した反復子が指す被制御シーケンスの単一要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="7f885-142">Removes the single element of the controlled sequence pointed to by the given iterator.</span></span></summary>
        <returns><span data-ttu-id="7f885-143">反復子。</span><span class="sxs-lookup"><span data-stu-id="7f885-143">An iterator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="7f885-144">詳細については、次を参照してください。 [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-144">For more information, see [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Last_iter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void erase(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _First_iter, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Last_iter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerBidirectionalIterator(Of TValue), _First_iter As ContainerBidirectionalIterator(Of TValue), _Last_iter As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _First_iter, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Last_iter);" />
      <MemberSignature Language="F#" Value="abstract member erase :  * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.erase (, _First_iter, _Last_iter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_First_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Last_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="7f885-145">削除された要素の後の最初の残存要素を指定する反復子。このような要素が存在しない場合は <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />。</span><span class="sxs-lookup"><span data-stu-id="7f885-145">An iterator that designates the first element remaining beyond any elements removed, or <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> if no such element exists.</span></span></param>
        <param name="_First_iter"><span data-ttu-id="7f885-146">消去する要素の範囲の先頭位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-146">The beginning position of the range of elements to erase.</span></span></param>
        <param name="_Last_iter"><span data-ttu-id="7f885-147">消去する要素の範囲の次の最初の位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-147">The first position beyond the range of elements to erase.</span></span></param>
        <summary><span data-ttu-id="7f885-148">被制御シーケンス内の範囲 \[*\_First\_iter*, *\_Last\_iter*) に含まれる要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="7f885-148">Removes the elements of the controlled sequence in the range \[*\_First\_iter*, *\_Last\_iter*).</span></span></summary>
        <returns><span data-ttu-id="7f885-149">反復子。</span><span class="sxs-lookup"><span data-stu-id="7f885-149">An iterator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="7f885-150">詳細については、次を参照してください。 [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-150">For more information, see [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="front">
      <MemberSignature Language="C#" Value="public TValue front ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue front() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.front" />
      <MemberSignature Language="VB.NET" Value="Public Function front () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue % front();" />
      <MemberSignature Language="F#" Value="abstract member front : unit -&gt; " Usage="iList.front " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f885-151">コンテナーの最初の要素にアクセスします。</span><span class="sxs-lookup"><span data-stu-id="7f885-151">Accesses the first element of the container.</span></span></summary>
        <returns><span data-ttu-id="7f885-152">被制御シーケンスの最初の要素。被制御シーケンスは空でない必要があります。</span><span class="sxs-lookup"><span data-stu-id="7f885-152">The first element of the controlled sequence, which must be non-empty.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-153">詳細については、次を参照してください。 [list::front (STL/CLR)](/cpp/dotnet/list-stl-clr#front)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-153">For more information, see [list::front (STL/CLR)](/cpp/dotnet/list-stl-clr#front).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="front_item">
      <MemberSignature Language="C#" Value="public TValue front_item { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue front_item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.IList`1.front_item" />
      <MemberSignature Language="VB.NET" Value="Public Property front_item As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue front_item { TValue get(); void set(TValue value); };" />
      <MemberSignature Language="F#" Value="member this.front_item : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.IList&lt;'Value&gt;.front_item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f885-154">コンテナーの最初の要素にアクセスします。</span><span class="sxs-lookup"><span data-stu-id="7f885-154">Accesses the first element of the container.</span></span></summary>
        <value><span data-ttu-id="7f885-155">被制御シーケンスの最初の要素。被制御シーケンスは空でない必要があります。</span><span class="sxs-lookup"><span data-stu-id="7f885-155">The first element of the controlled sequence, which must be non-empty.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-156">詳細については、次を参照してください。 [list::front_item (STL/CLR)](/cpp/dotnet/list-stl-clr#front_item)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-156">For more information, see [list::front_item (STL/CLR)](/cpp/dotnet/list-stl-clr#front_item).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="insert">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7f885-157">コンテナーに要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="7f885-157">Adds elements to the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-158">詳細については、次を参照してください。 [list::insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-158">For more information, see [list::insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where_iter, System.Collections.IEnumerable _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where_iter, class System.Collections.IEnumerable _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where_iter As ContainerBidirectionalIterator(Of TValue), _Right As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where_iter, System::Collections::IEnumerable ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * System.Collections.IEnumerable -&gt; unit" Usage="iList.insert (_Where_iter, _Right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="_Where_iter"><span data-ttu-id="7f885-159">その前に挿入するコンテナー内の位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-159">The position in the container to insert before.</span></span></param>
        <param name="_Right"><span data-ttu-id="7f885-160">要素がコンテナーに挿入される列挙体。</span><span class="sxs-lookup"><span data-stu-id="7f885-160">The enumeration whose elements are to be inserted into the container.</span></span></param>
        <summary><span data-ttu-id="7f885-161">指定した列挙子の要素をコンテナーに挿入します。</span><span class="sxs-lookup"><span data-stu-id="7f885-161">Inserts the elements of the specified enumerator into the container.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function insert (ByRef  As ContainerBidirectionalIterator(Of TValue), _Where As ContainerBidirectionalIterator(Of TValue), _Val As TValue) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert :  * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * 'Value -&gt; unit" Usage="iList.insert (, _Where, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="7f885-162">新しく挿入される要素を指定する反復子。</span><span class="sxs-lookup"><span data-stu-id="7f885-162">An iterator that designates the newly inserted element.</span></span></param>
        <param name="_Where"><span data-ttu-id="7f885-163">コンテナー内の新しく挿入する要素の直後の位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-163">The position in the container immediately following the newly inserted elements.</span></span></param>
        <param name="_Val"><span data-ttu-id="7f885-164">コンテナーに挿入する要素の値。</span><span class="sxs-lookup"><span data-stu-id="7f885-164">The value of the element to insert into the container.</span></span></param>
        <summary><span data-ttu-id="7f885-165">指定した値の単一の要素をコンテナーに挿入します。</span><span class="sxs-lookup"><span data-stu-id="7f885-165">Inserts an element of the given value into the container.</span></span></summary>
        <returns><span data-ttu-id="7f885-166">反復子。</span><span class="sxs-lookup"><span data-stu-id="7f885-166">An iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where As ContainerBidirectionalIterator(Of TValue), _First As IInputIterator(Of TValue), _Last As IInputIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; unit" Usage="iList.insert (_Where, _First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where"><span data-ttu-id="7f885-167">コンテナー内の新しく挿入する要素の直後の位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-167">The position in the container immediately following the newly inserted elements.</span></span></param>
        <param name="_First"><span data-ttu-id="7f885-168">コンテナーに挿入する要素の範囲の先頭位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-168">The beginning position of the range of elements to insert into the container.</span></span></param>
        <param name="_Last"><span data-ttu-id="7f885-169">コンテナーに挿入する要素の範囲の後の最初の位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-169">The first position beyond the range of elements to insert into the container.</span></span></param>
        <summary><span data-ttu-id="7f885-170">シーケンス (<paramref name="_First" />, <paramref name="_Last" />) をコンテナーに挿入します。</span><span class="sxs-lookup"><span data-stu-id="7f885-170">Inserts the sequence [<paramref name="_First" />, <paramref name="_Last" />) into the container.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, int _Count, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, int32 _Count, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where As ContainerBidirectionalIterator(Of TValue), _Count As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, int _Count, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * int * 'Value -&gt; unit" Usage="iList.insert (_Where, _Count, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Count" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Where"><span data-ttu-id="7f885-171">コンテナー内の新しく挿入する要素の直後の位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-171">The position in the container immediately following the newly inserted elements.</span></span></param>
        <param name="_Count"><span data-ttu-id="7f885-172">コンテナーに挿入する要素の数。</span><span class="sxs-lookup"><span data-stu-id="7f885-172">The number of elements to insert into the container.</span></span></param>
        <param name="_Val"><span data-ttu-id="7f885-173">コンテナーに挿入する要素の値。</span><span class="sxs-lookup"><span data-stu-id="7f885-173">The value of the element to insert into the container.</span></span></param>
        <summary><span data-ttu-id="7f885-174">指定した値の単一の要素をコンテナーに挿入します。</span><span class="sxs-lookup"><span data-stu-id="7f885-174">Inserts an element of the given value into the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="7f885-175">詳細については、次を参照してください。 [list::insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-175">For more information, see [list::insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert).</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="merge">
      <MemberSignature Language="C#" Value="public void merge (Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right, Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void merge(class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right, class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TValue, !TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub merge (_Right As IList(Of TValue), _Pred As BinaryDelegate(Of TValue, TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void merge(Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right, Microsoft::VisualC::StlClr::BinaryDelegate&lt;TValue, TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member merge : Microsoft.VisualC.StlClr.IList&lt;'Value&gt; * Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Value, 'Value, bool&gt; -&gt; unit" Usage="iList.merge (_Right, _Pred)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="7f885-176">このコンテナーにマージされるコンテナー。</span><span class="sxs-lookup"><span data-stu-id="7f885-176">The container to merge into this container.</span></span></param>
        <param name="_Pred"><span data-ttu-id="7f885-177">要素のペアを比較するためのブール ファンクタ。</span><span class="sxs-lookup"><span data-stu-id="7f885-177">The Boolean functor for comparing pairs of elements.</span></span></param>
        <summary><span data-ttu-id="7f885-178">2 つの順序付けされた被制御シーケンスをマージします。</span><span class="sxs-lookup"><span data-stu-id="7f885-178">Merges two ordered controlled sequences.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-179">詳細については、次を参照してください。 [list::merge (STL/CLR)](/cpp/dotnet/list-stl-clr#merge)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-179">For more information, see [list::merge (STL/CLR)](/cpp/dotnet/list-stl-clr#merge).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="pop_back">
      <MemberSignature Language="C#" Value="public void pop_back ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void pop_back() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.pop_back" />
      <MemberSignature Language="VB.NET" Value="Public Sub pop_back ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void pop_back();" />
      <MemberSignature Language="F#" Value="abstract member pop_back : unit -&gt; unit" Usage="iList.pop_back " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f885-180">コンテナーから最後の要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="7f885-180">Removes the last element from the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-181">詳細については、次を参照してください。 [list::pop_back (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_back)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-181">For more information, see [list::pop_back (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_back).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="pop_front">
      <MemberSignature Language="C#" Value="public void pop_front ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void pop_front() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.pop_front" />
      <MemberSignature Language="VB.NET" Value="Public Sub pop_front ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void pop_front();" />
      <MemberSignature Language="F#" Value="abstract member pop_front : unit -&gt; unit" Usage="iList.pop_front " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f885-182">コンテナーから最初の要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="7f885-182">Removes the first element from the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-183">詳細については、次を参照してください。 [list::pop_front (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_front)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-183">For more information, see [list::pop_front (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_front).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="push_back">
      <MemberSignature Language="C#" Value="public void push_back (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void push_back(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.push_back(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub push_back (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void push_back(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member push_back : 'Value -&gt; unit" Usage="iList.push_back _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val"><span data-ttu-id="7f885-184">コンテナーに追加する要素の値。</span><span class="sxs-lookup"><span data-stu-id="7f885-184">The value of the element to append to the container.</span></span></param>
        <summary><span data-ttu-id="7f885-185">コンテナーの末尾に新しい要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="7f885-185">Adds a new element to the end of the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-186">詳細については、次を参照してください。 [list::push_back (STL/CLR)](/cpp/dotnet/list-stl-clr#push_back)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-186">For more information, see [list::push_back (STL/CLR)](/cpp/dotnet/list-stl-clr#push_back).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="push_front">
      <MemberSignature Language="C#" Value="public void push_front (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void push_front(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.push_front(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub push_front (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void push_front(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member push_front : 'Value -&gt; unit" Usage="iList.push_front _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val"><span data-ttu-id="7f885-187">コンテナーの先頭に挿入する要素の値。</span><span class="sxs-lookup"><span data-stu-id="7f885-187">The value of the element to insert at the beginning of the container.</span></span></param>
        <summary><span data-ttu-id="7f885-188">コンテナーの先頭に新しい要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="7f885-188">Adds a new element to the beginning of the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-189">詳細については、次を参照してください。 [list::push_front (STL/CLR)](/cpp/dotnet/list-stl-clr#push_front)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-189">For more information, see [list::push_front (STL/CLR)](/cpp/dotnet/list-stl-clr#push_front).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rbegin">
      <MemberSignature Language="C#" Value="public void rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void rbegin(class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rbegin (ByRef  As ReverseBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rbegin(Microsoft::VisualC::StlClr::Generic::ReverseBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rbegin :  -&gt; unit" Usage="iList.rbegin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="7f885-190">被制御シーケンスの最後の要素、または空のシーケンスの先頭を越えた位置を指定する反転反復子。</span><span class="sxs-lookup"><span data-stu-id="7f885-190">A reverse iterator that designates the last element of the controlled sequence, or the position just beyond the beginning of an empty sequence.</span></span> <span data-ttu-id="7f885-191">したがって、これは反転シーケンスの <paramref name="beginning" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="7f885-191">Hence, it designates the <paramref name="beginning" /> of the reverse sequence.</span></span> <span data-ttu-id="7f885-192">これを使用して被制御シーケンスの逆順に見た現在の (<paramref name="current" />) 先頭を指定する反復子を取得しますが、このステータスは被制御シーケンスの長さが変わると変化することがあります。</span><span class="sxs-lookup"><span data-stu-id="7f885-192">You use it to obtain an iterator that designates the <paramref name="current" /> beginning of the controlled sequence that is seen in reverse order, but its status can change if the length of the controlled sequence changes.</span></span></param>
        <summary><span data-ttu-id="7f885-193">反転被制御シーケンスの先頭を指定します。</span><span class="sxs-lookup"><span data-stu-id="7f885-193">Designates the beginning of the reversed controlled sequence.</span></span></summary>
        <returns><span data-ttu-id="7f885-194">反復子。</span><span class="sxs-lookup"><span data-stu-id="7f885-194">An iterator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="7f885-195">詳細については、次を参照してください。 [list::rbegin (STL/CLR)](/cpp/dotnet/list-stl-clr#rbegin)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-195">For more information, see [list::rbegin (STL/CLR)](/cpp/dotnet/list-stl-clr#rbegin).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="remove">
      <MemberSignature Language="C#" Value="public void remove (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void remove(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub remove (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void remove(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member remove : 'Value -&gt; unit" Usage="iList.remove _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val"><span data-ttu-id="7f885-196">コンテナーから削除する要素の値。</span><span class="sxs-lookup"><span data-stu-id="7f885-196">The value of the element to remove from the container.</span></span></param>
        <summary><span data-ttu-id="7f885-197">指定した値を持つ要素をコンテナーから削除します。</span><span class="sxs-lookup"><span data-stu-id="7f885-197">Removes an element that has a specified value from the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-198">詳細については、次を参照してください。 [list::remove (STL/CLR)](/cpp/dotnet/list-stl-clr#remove)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-198">For more information, see [list::remove (STL/CLR)](/cpp/dotnet/list-stl-clr#remove).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="remove_if">
      <MemberSignature Language="C#" Value="public void remove_if (Microsoft.VisualC.StlClr.UnaryDelegate&lt;TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void remove_if(class Microsoft.VisualC.StlClr.UnaryDelegate`2&lt;!TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.remove_if(Microsoft.VisualC.StlClr.UnaryDelegate{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub remove_if (_Pred As UnaryDelegate(Of TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void remove_if(Microsoft::VisualC::StlClr::UnaryDelegate&lt;TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member remove_if : Microsoft.VisualC.StlClr.UnaryDelegate&lt;'Value, bool&gt; -&gt; unit" Usage="iList.remove_if _Pred" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.UnaryDelegate&lt;TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Pred"><span data-ttu-id="7f885-199">削除する要素を判断するためのブール テスト。</span><span class="sxs-lookup"><span data-stu-id="7f885-199">A Boolean test that determines which elements will be removed.</span></span></param>
        <summary><span data-ttu-id="7f885-200">指定したテストに合格した要素をコンテナーから削除します。</span><span class="sxs-lookup"><span data-stu-id="7f885-200">Removes elements from the container that pass a specified test.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="7f885-201">詳細については、次を参照してください。 [list::remove_if (STL/CLR)](/cpp/dotnet/list-stl-clr#remove_if)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-201">For more information, see [list::remove_if (STL/CLR)](/cpp/dotnet/list-stl-clr#remove_if).</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rend">
      <MemberSignature Language="C#" Value="public void rend (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void rend(class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rend (ByRef  As ReverseBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rend(Microsoft::VisualC::StlClr::Generic::ReverseBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rend :  -&gt; unit" Usage="iList.rend " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="7f885-202">被制御シーケンスの先頭の次の位置を指す反転反復子。</span><span class="sxs-lookup"><span data-stu-id="7f885-202">A reverse iterator that points just beyond the beginning of the controlled sequence.</span></span> <span data-ttu-id="7f885-203">したがって、これは反転シーケンスの <paramref name="end" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="7f885-203">Hence, it designates the <paramref name="end" /> of the reverse sequence.</span></span> <span data-ttu-id="7f885-204">これを使用して被制御シーケンスの逆順に見た現在の末尾 (<paramref name="current" />) を指定する反復子を取得しますが、このステータスは被制御シーケンスの長さが変わると変化することがあります。</span><span class="sxs-lookup"><span data-stu-id="7f885-204">You use it to obtain an iterator that designates the <paramref name="current" /> end of the controlled sequence seen in reverse order, but its status can change if the length of the controlled sequence changes.</span></span></param>
        <summary><span data-ttu-id="7f885-205">反転被制御シーケンスの末尾を指定します。</span><span class="sxs-lookup"><span data-stu-id="7f885-205">Designates the end of the reversed controlled sequence.</span></span></summary>
        <returns><span data-ttu-id="7f885-206">反復子。</span><span class="sxs-lookup"><span data-stu-id="7f885-206">An iterator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="7f885-207">詳細については、次を参照してください。 [list::rend (STL/CLR)](/cpp/dotnet/list-stl-clr#rend)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-207">For more information, see [list::rend (STL/CLR)](/cpp/dotnet/list-stl-clr#rend).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="resize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7f885-208">コンテナー内の要素の数を変更します。</span><span class="sxs-lookup"><span data-stu-id="7f885-208">Changes the number of elements in the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-209">詳細については、次を参照してください。 [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-209">For more information, see [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="resize">
      <MemberSignature Language="C#" Value="public void resize (int _Newsize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void resize(int32 _Newsize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub resize (_Newsize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void resize(int _Newsize);" />
      <MemberSignature Language="F#" Value="abstract member resize : int -&gt; unit" Usage="iList.resize _Newsize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Newsize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Newsize"><span data-ttu-id="7f885-210">コンテナーの新しいサイズ。</span><span class="sxs-lookup"><span data-stu-id="7f885-210">The new size of the container.</span></span></param>
        <summary><span data-ttu-id="7f885-211">コンテナー内の要素の数を、指定したサイズに変更します。</span><span class="sxs-lookup"><span data-stu-id="7f885-211">Changes the number of elements in the container to the specified size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-212">詳細については、次を参照してください。 [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-212">For more information, see [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="resize">
      <MemberSignature Language="C#" Value="public void resize (int _Newsize, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void resize(int32 _Newsize, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub resize (_Newsize As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void resize(int _Newsize, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member resize : int * 'Value -&gt; unit" Usage="iList.resize (_Newsize, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Newsize" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Newsize"><span data-ttu-id="7f885-213">コンテナーの新しいサイズ。</span><span class="sxs-lookup"><span data-stu-id="7f885-213">The new size of the container.</span></span></param>
        <param name="_Val"><span data-ttu-id="7f885-214">埋め込み要素の値。</span><span class="sxs-lookup"><span data-stu-id="7f885-214">The value of the padding elements.</span></span></param>
        <summary><span data-ttu-id="7f885-215">コンテナー内の要素の数を、指定したサイズに変更します。</span><span class="sxs-lookup"><span data-stu-id="7f885-215">Changes the number of elements in the container to the specified size.</span></span> <span data-ttu-id="7f885-216">新しいサイズが元のサイズより大きい場合、指定した値がコンテナーに追加されます。</span><span class="sxs-lookup"><span data-stu-id="7f885-216">If the new size is larger than the old size, the given values will be appended to the container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-217">詳細については、次を参照してください。 [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-217">For more information, see [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="reverse">
      <MemberSignature Language="C#" Value="public void reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.reverse" />
      <MemberSignature Language="VB.NET" Value="Public Sub reverse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void reverse();" />
      <MemberSignature Language="F#" Value="abstract member reverse : unit -&gt; unit" Usage="iList.reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f885-218">被制御シーケンスの要素を反転させます。</span><span class="sxs-lookup"><span data-stu-id="7f885-218">Reverses the elements of the controlled sequence.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-219">詳細については、次を参照してください。 [list::reverse (STL/CLR)](/cpp/dotnet/list-stl-clr#reverse)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-219">For more information, see [list::reverse (STL/CLR)](/cpp/dotnet/list-stl-clr#reverse).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="size">
      <MemberSignature Language="C#" Value="public int size ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 size() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.size" />
      <MemberSignature Language="VB.NET" Value="Public Function size () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int size();" />
      <MemberSignature Language="F#" Value="abstract member size : unit -&gt; int" Usage="iList.size " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f885-220">コンテナー内の要素の数をカウントします。</span><span class="sxs-lookup"><span data-stu-id="7f885-220">Counts the number of elements in the container.</span></span></summary>
        <returns><span data-ttu-id="7f885-221">被制御シーケンスの長さ。</span><span class="sxs-lookup"><span data-stu-id="7f885-221">The length of the controlled sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-222">詳細については、次を参照してください。 [list::size (STL/CLR)](/cpp/dotnet/list-stl-clr#size)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-222">For more information, see [list::size (STL/CLR)](/cpp/dotnet/list-stl-clr#size).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="sort">
      <MemberSignature Language="C#" Value="public void sort (Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void sort(class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TValue, !TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub sort (_Pred As BinaryDelegate(Of TValue, TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void sort(Microsoft::VisualC::StlClr::BinaryDelegate&lt;TValue, TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member sort : Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Value, 'Value, bool&gt; -&gt; unit" Usage="iList.sort _Pred" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Pred"><span data-ttu-id="7f885-223">順序付けのための要素の比較に使用される演算子。</span><span class="sxs-lookup"><span data-stu-id="7f885-223">The operator that will be used to compare elements for ordering.</span></span></param>
        <summary><span data-ttu-id="7f885-224">被制御シーケンスを順序付けます。</span><span class="sxs-lookup"><span data-stu-id="7f885-224">Orders the controlled sequence.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-225">詳細については、次を参照してください。 [list::sort (STL/CLR)](/cpp/dotnet/list-stl-clr#sort)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-225">For more information, see [list::sort (STL/CLR)](/cpp/dotnet/list-stl-clr#sort).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="splice">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7f885-226">ノード間のリンクを並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="7f885-226">Reorders links between nodes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-227">詳細については、次を参照してください。 [list::splice (STL/CLR)](/cpp/dotnet/list-stl-clr#splice)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-227">For more information, see [list::splice (STL/CLR)](/cpp/dotnet/list-stl-clr#splice).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="splice">
      <MemberSignature Language="C#" Value="public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void splice(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub splice (_Where As ContainerBidirectionalIterator(Of TValue), _Right As IList(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void splice(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member splice : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.IList&lt;'Value&gt; -&gt; unit" Usage="iList.splice (_Where, _Right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where"><span data-ttu-id="7f885-228">その前にスプライス (挿入) するコンテナー内の位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-228">The position in the container before which to splice.</span></span></param>
        <param name="_Right"><span data-ttu-id="7f885-229">スプライス元コンテナー。</span><span class="sxs-lookup"><span data-stu-id="7f885-229">The container to splice from.</span></span> <span data-ttu-id="7f885-230">スプライス操作後、このコンテナーからすべての要素が削除されます。</span><span class="sxs-lookup"><span data-stu-id="7f885-230">All elements will be removed from this container after the splice operation.</span></span></param>
        <summary><span data-ttu-id="7f885-231">コンテナー内の指定した位置の前に、指定したシーケンスを挿入します。</span><span class="sxs-lookup"><span data-stu-id="7f885-231">Inserts the given sequence into the container before the specified position.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="splice">
      <MemberSignature Language="C#" Value="public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _First);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void splice(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _First) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub splice (_Where As ContainerBidirectionalIterator(Of TValue), _Right As IList(Of TValue), _First As ContainerBidirectionalIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void splice(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _First);" />
      <MemberSignature Language="F#" Value="abstract member splice : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.IList&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.splice (_Where, _Right, _First)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where"><span data-ttu-id="7f885-232">その前にスプライス (挿入) するコンテナー内の位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-232">The position in the container before which to splice.</span></span></param>
        <param name="_Right"><span data-ttu-id="7f885-233">スプライス元コンテナー。</span><span class="sxs-lookup"><span data-stu-id="7f885-233">The container to splice from.</span></span></param>
        <param name="_First"><span data-ttu-id="7f885-234">スプライスする要素の位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-234">The position of the element to splice.</span></span></param>
        <summary><span data-ttu-id="7f885-235">指定したコンテナーから <paramref name="_First" /> が指す要素を削除し、削除した要素を <paramref name="_Where" /> が指す被制御シーケンス内の要素の前に挿入します。</span><span class="sxs-lookup"><span data-stu-id="7f885-235">Removes the element from the given container pointed to by <paramref name="_First" /> and inserts it before the element in the controlled sequence pointed to by <paramref name="_Where" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="splice">
      <MemberSignature Language="C#" Value="public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void splice(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub splice (_Where As ContainerBidirectionalIterator(Of TValue), _Right As IList(Of TValue), _First As ContainerBidirectionalIterator(Of TValue), _Last As ContainerBidirectionalIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void splice(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member splice : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.IList&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.splice (_Where, _Right, _First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where"><span data-ttu-id="7f885-236">その前にスプライス (挿入) するコンテナー内の位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-236">The position in the container before which to splice.</span></span></param>
        <param name="_Right"><span data-ttu-id="7f885-237">スプライス元コンテナー。</span><span class="sxs-lookup"><span data-stu-id="7f885-237">The container to splice from.</span></span></param>
        <param name="_First"><span data-ttu-id="7f885-238">スプライスする要素の範囲の先頭位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-238">The beginning position of the range of elements to splice.</span></span></param>
        <param name="_Last"><span data-ttu-id="7f885-239">スプライスする要素の範囲の後の最初の位置。</span><span class="sxs-lookup"><span data-stu-id="7f885-239">The first position beyond the range of elements to splice.</span></span></param>
        <summary><span data-ttu-id="7f885-240">指定したコンテナーから要素の範囲 (<paramref name="_First" />, <paramref name="_Last" />) を削除し、削除した要素の範囲を <paramref name="_Where" /> が指す被制御シーケンス内の要素の前に挿入します。</span><span class="sxs-lookup"><span data-stu-id="7f885-240">Removes the range of elements [<paramref name="_First" />, <paramref name="_Last" />) from the given container and inserts it before the element in the controlled sequence pointed to by <paramref name="_Where" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="swap">
      <MemberSignature Language="C#" Value="public void swap (Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void swap(class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub swap (_Right As IList(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void swap(Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member swap : Microsoft.VisualC.StlClr.IList&lt;'Value&gt; -&gt; unit" Usage="iList.swap _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="7f885-241">コンテンツの交換先のコンテナー。</span><span class="sxs-lookup"><span data-stu-id="7f885-241">The container to swap contents with.</span></span></param>
        <summary><span data-ttu-id="7f885-242">2 つのコンテナーのコンテンツを交換します。</span><span class="sxs-lookup"><span data-stu-id="7f885-242">Swaps the contents of two containers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-243">詳細については、次を参照してください。 [list::swap (STL/CLR)](/cpp/dotnet/list-stl-clr#swap)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-243">For more information, see [list::swap (STL/CLR)](/cpp/dotnet/list-stl-clr#swap).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="unique">
      <MemberSignature Language="C#" Value="public void unique (Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void unique(class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TValue, !TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub unique (_Pred As BinaryDelegate(Of TValue, TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void unique(Microsoft::VisualC::StlClr::BinaryDelegate&lt;TValue, TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member unique : Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Value, 'Value, bool&gt; -&gt; unit" Usage="iList.unique _Pred" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Pred"><span data-ttu-id="7f885-244">要素のペアが一意かどうかを判断する比較子。</span><span class="sxs-lookup"><span data-stu-id="7f885-244">The comparer that determines whether element pairs are unique.</span></span> <span data-ttu-id="7f885-245">一意でない要素はコンテナーから削除されます。</span><span class="sxs-lookup"><span data-stu-id="7f885-245">An element that is not unique will be removed from the container.</span></span></param>
        <summary><span data-ttu-id="7f885-246">指定されたテストに合格した隣接する要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="7f885-246">Removes adjacent elements that pass a specified test.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f885-247">詳細については、次を参照してください。 [list::unique (STL/CLR)](/cpp/dotnet/list-stl-clr#unique)します。</span><span class="sxs-lookup"><span data-stu-id="7f885-247">For more information, see [list::unique (STL/CLR)](/cpp/dotnet/list-stl-clr#unique).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>