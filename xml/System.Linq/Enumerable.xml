<Type Name="Enumerable" FullName="System.Linq.Enumerable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e5a371b01b2a045720a514eec9bc886fa70bb508" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56782113" /></Metadata><TypeSignature Language="C#" Value="public static class Enumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Enumerable extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Enumerable" />
  <TypeSignature Language="VB.NET" Value="Public Module Enumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enumerable abstract sealed" />
  <TypeSignature Language="F#" Value="type Enumerable = class" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b2f2d-101"><see cref="T:System.Collections.Generic.IEnumerable`1" /> を実装するオブジェクトをクエリするための一連の <see langword="static" /> (Visual Basic では <see langword="Shared" />) メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-101">Provides a set of <see langword="static" /> (<see langword="Shared" /> in Visual Basic) methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-102">このクラスのメソッドは、その実装をソース データを照会するために標準クエリ演算子の実装を提供<xref:System.Collections.Generic.IEnumerable%601>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-102">The methods in this class provide an implementation of the standard query operators for querying data sources that implement <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="b2f2d-103">標準クエリ演算子は次の汎用メソッド、[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]パターンし、いずれかでデータを走査、フィルター、およびプロジェクション操作を表現するために有効にします。NET ベースのプログラミング言語です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-103">The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</span></span>  
  
 <span data-ttu-id="b2f2d-104">このクラスのメソッドの大部分を拡張する拡張メソッドとして定義されている<xref:System.Collections.Generic.IEnumerable%601>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-104">The majority of the methods in this class are defined as extension methods that extend <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="b2f2d-105">つまり、実装しているオブジェクトのインスタンス メソッドのように呼び出すことが<xref:System.Collections.Generic.IEnumerable%601>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-105">This means they can be called like an instance method on any object that implements <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="b2f2d-106">値のシーケンスを返すクエリで使用されるメソッドは、クエリ オブジェクトが列挙されるまで、ターゲット データを使用しません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-106">Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated.</span></span> <span data-ttu-id="b2f2d-107">これは、遅延実行と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-107">This is known as deferred execution.</span></span> <span data-ttu-id="b2f2d-108">シングルトン値を返すクエリで使用するメソッドを実行し、ターゲット データをすぐに使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-108">Methods that are used in a query that returns a singleton value execute and consume the target data immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/24cda21e-8af8-4632-b519-c404a839b9b2"><span data-ttu-id="b2f2d-109">標準クエリ演算子の概要</span><span class="sxs-lookup"><span data-stu-id="b2f2d-109">Standard Query Operators Overview</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md"><span data-ttu-id="b2f2d-110">拡張メソッド (C# プログラミング ガイド)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-110">Extension Methods (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md"><span data-ttu-id="b2f2d-111">拡張メソッド (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-111">Extension Methods (Visual Basic)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Aggregate&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Aggregate&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TSource,TSource&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Aggregate&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, !!TSource, !!TSource&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource) (source As IEnumerable(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TSource, TSource&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * Func&lt;'Source, 'Source, 'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Aggregate (source, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="func" Type="System.Func&lt;TSource,TSource,TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-112"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-112">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-113">集計対象の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-113">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span></span></param>
        <param name="func"><span data-ttu-id="b2f2d-114">各要素に対して呼び出すアキュムレータ関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-114">An accumulator function to be invoked on each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-115">シーケンスにアキュムレータ関数を適用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-115">Applies an accumulator function over a sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-116">最終的なアキュムレータ値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-116">The final accumulator value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-117"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29>メソッドでは、値のシーケンスに対して計算を実行する単純な。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-117">The <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="b2f2d-118">このメソッドを呼び出すことで機能`func`内の各要素に 1 回`source`1 つ目を除きます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-118">This method works by calling `func` one time for each element in `source` except the first one.</span></span> <span data-ttu-id="b2f2d-119">毎回`func`が呼び出され、<xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29>シーケンスと、集計値から、両方の要素を渡します (最初の引数として`func`)。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-119">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="b2f2d-120">最初の要素の`source`最初の集計値として使用されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-120">The first element of `source` is used as the initial aggregate value.</span></span> <span data-ttu-id="b2f2d-121">結果`func`前の集計値を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-121">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="b2f2d-122"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> 最終的な結果を返します`func`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-122"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> returns the final result of `func`.</span></span>  
  
 <span data-ttu-id="b2f2d-123">このオーバー ロード、<xref:System.Linq.Enumerable.Aggregate%2A>の最初の要素を使用しているために、メソッドはすべてのケースに適した`source`最初の集計値として。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-123">This overload of the <xref:System.Linq.Enumerable.Aggregate%2A> method isn't suitable for all cases because it uses the first element of `source` as the initial aggregate value.</span></span> <span data-ttu-id="b2f2d-124">戻り値の要素のみを含める必要がある場合は、別のオーバー ロードを選択する必要があります`source`特定の条件を満たします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-124">You should choose another overload if the return value should include only the elements of `source` that meet a certain condition.</span></span> <span data-ttu-id="b2f2d-125">たとえば、このオーバー ロードは偶数の数値の合計を計算する場合は、信頼性の高い`source`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-125">For example, this overload isn't reliable if you want to calculate the sum of the even numbers in `source`.</span></span> <span data-ttu-id="b2f2d-126">結果は最初の要素があってものではなく奇数の場合は、正しいできません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-126">The result will be incorrect if the first element is odd instead of even.</span></span>  
  
 <span data-ttu-id="b2f2d-127">一般的な集計操作を簡素化する標準クエリ演算子も含める汎用 count メソッドでは、 <xref:System.Linq.Enumerable.Count%2A>、および 4 つの数値の集計メソッドでは、namely <xref:System.Linq.Enumerable.Min%2A>、 <xref:System.Linq.Enumerable.Max%2A>、<xref:System.Linq.Enumerable.Sum%2A>と<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-127">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-128">次のコード例を使用して、文字列内の単語の順序を反転する方法を示します<xref:System.Linq.Enumerable.Aggregate%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-128">The following code example demonstrates how to reverse the order of words in a string by using <xref:System.Linq.Enumerable.Aggregate%2A>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#1)]
 [!code-vb[System.Linq.Enumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-129"><paramref name="source" /> または <paramref name="func" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-129"><paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-130"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-130"><paramref name="source" /> contains no elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate&gt;">
      <MemberSignature Language="C#" Value="public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TAccumulate Aggregate&lt;TSource, TAccumulate&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate) (source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TAccumulate Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TAccumulate seed, Func&lt;TAccumulate, TSource, TAccumulate&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; -&gt; 'Accumulate" Usage="System.Linq.Enumerable.Aggregate (source, seed, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TAccumulate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-131"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-131">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TAccumulate"><span data-ttu-id="b2f2d-132">アキュムレータ値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-132">The type of the accumulator value.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-133">集計対象の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-133">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span></span></param>
        <param name="seed"><span data-ttu-id="b2f2d-134">最初のアキュムレータ値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-134">The initial accumulator value.</span></span></param>
        <param name="func"><span data-ttu-id="b2f2d-135">各要素に対して呼び出すアキュムレータ関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-135">An accumulator function to be invoked on each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-136">シーケンスにアキュムレータ関数を適用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-136">Applies an accumulator function over a sequence.</span></span> <span data-ttu-id="b2f2d-137">指定されたシード値が最初のアキュムレータ値として使用されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-137">The specified seed value is used as the initial accumulator value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-138">最終的なアキュムレータ値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-138">The final accumulator value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-139"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29>メソッドでは、値のシーケンスに対して計算を実行する単純な。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-139">The <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="b2f2d-140">このメソッドを呼び出すことで機能`func`内の各要素に 1 回`source`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-140">This method works by calling `func` one time for each element in `source`.</span></span> <span data-ttu-id="b2f2d-141">毎回`func`が呼び出され、<xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29>シーケンスと、集計値から、両方の要素を渡します (最初の引数として`func`)。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-141">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="b2f2d-142">値、`seed`パラメーターは、最初の集計値として使用されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-142">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="b2f2d-143">結果`func`前の集計値を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-143">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="b2f2d-144"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> 最終的な結果を返します`func`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-144"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> returns the final result of `func`.</span></span>  
  
 <span data-ttu-id="b2f2d-145">一般的な集計操作を簡素化する標準クエリ演算子も含める汎用 count メソッドでは、 <xref:System.Linq.Enumerable.Count%2A>、および 4 つの数値の集計メソッドでは、namely <xref:System.Linq.Enumerable.Min%2A>、 <xref:System.Linq.Enumerable.Max%2A>、<xref:System.Linq.Enumerable.Sum%2A>と<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-145">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-146">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Aggregate%2A>アキュムレータ関数を適用して、シード値を使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-146">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and use a seed value.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#2)]
 [!code-vb[System.Linq.Enumerable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-147"><paramref name="source" /> または <paramref name="func" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-147"><paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Aggregate&lt;TSource, TAccumulate, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func, class System.Func`2&lt;!!TAccumulate, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate, TResult) (source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TAccumulate seed, Func&lt;TAccumulate, TSource, TAccumulate&gt; ^ func, Func&lt;TAccumulate, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; * Func&lt;'Accumulate, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Aggregate (source, seed, func, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-148"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-148">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TAccumulate"><span data-ttu-id="b2f2d-149">アキュムレータ値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-149">The type of the accumulator value.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-150">結果の値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-150">The type of the resulting value.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-151">集計対象の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-151">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span></span></param>
        <param name="seed"><span data-ttu-id="b2f2d-152">最初のアキュムレータ値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-152">The initial accumulator value.</span></span></param>
        <param name="func"><span data-ttu-id="b2f2d-153">各要素に対して呼び出すアキュムレータ関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-153">An accumulator function to be invoked on each element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="b2f2d-154">最終的なアキュムレータ値を結果値に変換する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-154">A function to transform the final accumulator value into the result value.</span></span></param>
        <summary><span data-ttu-id="b2f2d-155">シーケンスにアキュムレータ関数を適用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-155">Applies an accumulator function over a sequence.</span></span> <span data-ttu-id="b2f2d-156">指定したシード値は最初のアキュムレータ値として使用され、指定した関数は結果値の選択に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-156">The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-157">変換された最終的なアキュムレータ値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-157">The transformed final accumulator value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-158"><xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>メソッドでは、値のシーケンスに対して計算を実行する単純な。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-158">The <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="b2f2d-159">このメソッドを呼び出すことで機能`func`内の各要素に 1 回`source`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-159">This method works by calling `func` one time for each element in `source`.</span></span> <span data-ttu-id="b2f2d-160">毎回`func`が呼び出され、<xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>シーケンスと、集計値から、両方の要素を渡します (最初の引数として`func`)。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-160">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="b2f2d-161">値、`seed`パラメーターは、最初の集計値として使用されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-161">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="b2f2d-162">結果`func`前の集計値を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-162">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="b2f2d-163">最終結果`func`に渡される`resultSelector`の最終的な結果を取得する<xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-163">The final result of `func` is passed to `resultSelector` to obtain the final result of <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>.</span></span>  
  
 <span data-ttu-id="b2f2d-164">一般的な集計操作を簡素化する標準クエリ演算子も含める汎用 count メソッドでは、 <xref:System.Linq.Enumerable.Count%2A>、および 4 つの数値の集計メソッドでは、namely <xref:System.Linq.Enumerable.Min%2A>、 <xref:System.Linq.Enumerable.Max%2A>、<xref:System.Linq.Enumerable.Sum%2A>と<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-164">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-165">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Aggregate%2A>アキュムレータ関数と結果のセレクターを適用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-165">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and a result selector.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#3)]
 [!code-vb[System.Linq.Enumerable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-166"><paramref name="source" />、<paramref name="func" />、または <paramref name="resultSelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-166"><paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="All&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool All&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool All&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function All(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool All(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member All : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; bool" Usage="System.Linq.Enumerable.All (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-167"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-167">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-168">述語を適用する要素を格納している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-168">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to apply the predicate to.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-169">各要素が条件を満たしているかどうかをテストする関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-169">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="b2f2d-170">シーケンスのすべての要素が条件を満たしているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-170">Determines whether all elements of a sequence satisfy a condition.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-171">指定された述語でソース シーケンスのすべての要素がテストに合格する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-171"><see langword="true" /> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-172">このメソッドには、コレクションのすべての要素は返しません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-172">This method does not return all the elements of a collection.</span></span> <span data-ttu-id="b2f2d-173">代わりに、コレクションのすべての要素が条件を満たすかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-173">Instead, it determines whether all the elements of a collection satisfy a condition.</span></span>  
  
 <span data-ttu-id="b2f2d-174">列挙体`source`が停止しているは、結果を判断できるようになります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-174">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="b2f2d-175">Visual Basic のクエリ式の構文、`Aggregate Into All()`の呼び出しに変換句<xref:System.Linq.Enumerable.All%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-175">In Visual Basic query expression syntax, an `Aggregate Into All()` clause translates to an invocation of <xref:System.Linq.Enumerable.All%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-176">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.All%2A>シーケンス内のすべての要素が条件を満たすかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-176">The following code example demonstrates how to use <xref:System.Linq.Enumerable.All%2A> to determine whether all the elements in a sequence satisfy a condition.</span></span> <span data-ttu-id="b2f2d-177">変数`allStartWithB`はすべて、ペットの名前が"B"で開始する場合、または場合、`pets`配列が空です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-177">Variable `allStartWithB` is true if all the pet names start with "B" or if the `pets` array is empty.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#4)]
 [!code-vb[System.Linq.Enumerable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#4)]  
  
 <span data-ttu-id="b2f2d-178">ブール値を<xref:System.Linq.Enumerable.All%2A>メソッドは、通常の述語で使用を返します、`where`句 (`Where` Visual Basic で句) またはへの直接呼び出し、<xref:System.Linq.Enumerable.Where%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-178">The Boolean value that the <xref:System.Linq.Enumerable.All%2A> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Enumerable.Where%2A> method.</span></span> <span data-ttu-id="b2f2d-179">次の例では、このように使用、`All`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-179">The following example demonstrates this use of the `All` method.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#129](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#129)]
 [!code-vb[System.Linq.Enumerable#129](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#129)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-180"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-180"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-181">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-181">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Any&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-182">シーケンスの要素が存在するか、または条件を満たすかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-182">Determines whether any element of a sequence exists or satisfies a condition.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Any : seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.Any source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-183"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-183">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-184">空かどうかを確認する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-184">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to check for emptiness.</span></span></param>
        <summary><span data-ttu-id="b2f2d-185">シーケンスに要素が含まれているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-185">Determines whether a sequence contains any elements.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-186">ソース シーケンスに要素が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-186"><see langword="true" /> if the source sequence contains any elements; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-187">このメソッドは、コレクションの要素のいずれかを返しません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-187">This method does not return any one element of a collection.</span></span> <span data-ttu-id="b2f2d-188">代わりに、すべての要素がコレクションに含まれるかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-188">Instead, it determines whether the collection contains any elements.</span></span>  
  
 <span data-ttu-id="b2f2d-189">列挙体`source`が停止しているは、結果を判断できるようになります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-189">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="b2f2d-190">Visual Basic のクエリ式の構文、`Aggregate Into Any()`の呼び出しに変換句<xref:System.Linq.Enumerable.Any%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-190">In Visual Basic query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-191">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Any%2A>シーケンスに要素が含まれるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-191">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether a sequence contains any elements.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#5)]
 [!code-vb[System.Linq.Enumerable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#5)]  
  
 <span data-ttu-id="b2f2d-192">ブール値を<xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>メソッドは、通常の述語で使用を返します、`where`句 (`Where` Visual Basic で句) またはへの直接呼び出し、<xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-192">The Boolean value that the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method.</span></span> <span data-ttu-id="b2f2d-193">次の例では、このように使用、`Any`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-193">The following example demonstrates this use of the `Any` method.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#130](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#130)]
 [!code-vb[System.Linq.Enumerable#130](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#130)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-194"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-194"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-195">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-195">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Any : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; bool" Usage="System.Linq.Enumerable.Any (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-196"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-196">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-197">述語を適用する要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-197">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to apply the predicate to.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-198">各要素が条件を満たしているかどうかをテストする関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-198">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="b2f2d-199">シーケンスの任意の要素が条件を満たしているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-199">Determines whether any element of a sequence satisfies a condition.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-200">指定された述語でソース シーケンスの要素がテストに合格する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-200"><see langword="true" /> if any elements in the source sequence pass the test in the specified predicate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-201">このメソッドは、コレクションの要素のいずれかを返しません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-201">This method does not return any one element of a collection.</span></span> <span data-ttu-id="b2f2d-202">代わりに、コレクションのすべての要素が条件を満たすかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-202">Instead, it determines whether any elements of a collection satisfy a condition.</span></span>  
  
 <span data-ttu-id="b2f2d-203">列挙体`source`が停止しているは、結果を判断できるようになります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-203">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="b2f2d-204">Visual Basic のクエリ式の構文、`Aggregate Into Any()`の呼び出しに変換句<xref:System.Linq.Enumerable.Any%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-204">In Visual Basic query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-205">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Any%2A>シーケンス内の任意の要素が条件を満たすかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-205">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether any element in a sequence satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#6)]
 [!code-vb[System.Linq.Enumerable#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-206"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-206"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-207">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-207">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Append&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Append&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource) (source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Append(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Append : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Append (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="element" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-208"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-208">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-209">値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-209">A sequence of values.</span></span></param>
        <param name="element"><span data-ttu-id="b2f2d-210"><paramref name="source" /> に追加する値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-210">The value to append to <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="b2f2d-211">シーケンスの末尾に値を追加します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-211">Appends a value to the end of the sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-212"><paramref name="element" /> で終わる新しいシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-212">A new sequence that ends with <paramref name="element" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-213">このメソッドでは、コレクションの要素は変更されません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-213">This method does not modify the elements of the collection.</span></span> <span data-ttu-id="b2f2d-214">代わりに、新しい要素のコレクションのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-214">Instead, it creates a copy of the collection with the new element.</span></span>
  
## Examples  
 <span data-ttu-id="b2f2d-215">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Append%2A>値をシーケンスの末尾に追加します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-215">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Append%2A> to append a value to the end of the sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#201](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#201)]
 [!code-vb[System.Linq.Enumerable#201](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#201)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-216"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-216"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; AsEnumerable&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; AsEnumerable&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ AsEnumerable(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-217"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-217">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-218"><see cref="T:System.Collections.Generic.IEnumerable`1" /> として型指定するシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-218">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></param>
        <summary><span data-ttu-id="b2f2d-219"><see cref="T:System.Collections.Generic.IEnumerable`1" /> として型指定された入力を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-219">Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-220"><see cref="T:System.Collections.Generic.IEnumerable`1" /> として型指定された入力シーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-220">The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-221"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>メソッドも何も起こりません以外のコンパイル時の型を変更する`source`を実装する型から<xref:System.Collections.Generic.IEnumerable%601>に<xref:System.Collections.Generic.IEnumerable%601>自体。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-221">The <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method has no effect other than to change the compile-time type of `source` from a type that implements <xref:System.Collections.Generic.IEnumerable%601> to <xref:System.Collections.Generic.IEnumerable%601> itself.</span></span>  
  
 <span data-ttu-id="b2f2d-222"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> シーケンスを実装する場合、クエリの実装の間での選択に使用できる<xref:System.Collections.Generic.IEnumerable%601>も使用可能なパブリック クエリ メソッドの別のセットを備えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-222"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> can be used to choose between query implementations when a sequence implements <xref:System.Collections.Generic.IEnumerable%601> but also has a different set of public query methods available.</span></span> <span data-ttu-id="b2f2d-223">たとえば、ジェネリック クラスを指定`Table`を実装する<xref:System.Collections.Generic.IEnumerable%601>など、独自のメソッドがありますと`Where`、 `Select`、および`SelectMany`への呼び出し`Where`パブリックは起動`Where`のメソッド`Table`.</span><span class="sxs-lookup"><span data-stu-id="b2f2d-223">For example, given a generic class `Table` that implements <xref:System.Collections.Generic.IEnumerable%601> and has its own methods such as `Where`, `Select`, and `SelectMany`, a call to `Where` would invoke the public `Where` method of `Table`.</span></span> <span data-ttu-id="b2f2d-224">A`Table`データベース テーブルを表す型でしたが、`Where`述語の引数として式ツリーを受け取り、リモート実行のツリーを SQL に変換するメソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-224">A `Table` type that represents a database table could have a `Where` method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution.</span></span> <span data-ttu-id="b2f2d-225">リモート実行が望ましくない場合、たとえば、述語が、ローカル メソッドを呼び出すため、<xref:System.Linq.Enumerable.AsEnumerable%2A>メソッドは、カスタム メソッドを非表示にし、代わりに、標準クエリ演算子を使用するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-225">If remote execution is not desired, for example because the predicate invokes a local method, the <xref:System.Linq.Enumerable.AsEnumerable%2A> method can be used to hide the custom methods and instead make the standard query operators available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-226">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>の型を非表示にするカスタム`Where`メソッド、標準クエリ演算子の実装が必要な場合。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-226">The following code example demonstrates how to use <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to hide a type's custom `Where` method when the standard query operator implementation is desired.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#108](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#108)]
 [!code-vb[System.Linq.Enumerable#108](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Average">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-227">数値のシーケンスの平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-227">Computes the average of a sequence of numeric values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static decimal Average (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-228">平均値計算の対象となる <see cref="T:System.Decimal" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-228">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-229"><see cref="T:System.Decimal" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-229">Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-230">値のシーケンスの平均値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-230">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-231">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-231">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-232">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>値のシーケンスの平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-232">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-233"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-233"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-234"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-234"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-235">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-235">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-236">平均値計算の対象となる <see cref="T:System.Double" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-236">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-237"><see cref="T:System.Double" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-237">Computes the average of a sequence of <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-238">値のシーケンスの平均値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-238">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-239">要素の合計が大きすぎてとして表すかどうか、 <xref:System.Double>、このメソッドは、正または負の無限大を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-239">If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.</span></span>  
  
 <span data-ttu-id="b2f2d-240">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-240">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-241">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-241">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-242"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-242"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-243"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-243"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-244">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-244">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;int&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-245">平均値計算の対象となる <see cref="T:System.Int32" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-245">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-246"><see cref="T:System.Int32" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-246">Computes the average of a sequence of <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-247">値のシーケンスの平均値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-247">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-248">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-248">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-249">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-249">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-250"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-250"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-251"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-251"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-252">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-252">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;int64&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-253">平均値計算の対象となる <see cref="T:System.Int64" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-253">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-254"><see cref="T:System.Int64" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-254">Computes the average of a sequence of <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-255">値のシーケンスの平均値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-255">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-256">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-256">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-257">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-257">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-258"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-258"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-259"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-259"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-260">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-260">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-261">平均を計算する Null 許容型の <see cref="T:System.Decimal" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-261">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-262">Null 許容型の <see cref="T:System.Decimal" /> 値のシーケンスの平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-262">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-263">値のシーケンスの平均値、または、ソース シーケンスが空または <see langword="null" /> である値のみを含む場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-263">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-264">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-264">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-265">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-265">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-266"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-266"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-267">シーケンス内の要素の合計は <see cref="F:System.Decimal.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-267">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-268">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-268">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-269">平均を計算する Null 許容型の <see cref="T:System.Double" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-269">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-270">Null 許容型の <see cref="T:System.Double" /> 値のシーケンスの平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-270">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-271">値のシーケンスの平均値、または、ソース シーケンスが空または <see langword="null" /> である値のみを含む場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-271">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-272">要素の合計が大きすぎてとして表すかどうか、 <xref:System.Double>、このメソッドは、正または負の無限大を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-272">If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.</span></span>  
  
 <span data-ttu-id="b2f2d-273">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-273">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-274">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-274">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-275"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-275"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-276">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-276">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-277">平均を計算する Null 許容型の <see cref="T:System.Int32" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-277">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-278">Null 許容型の <see cref="T:System.Int32" /> 値のシーケンスの平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-278">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-279">値のシーケンスの平均値、または、ソース シーケンスが空または <see langword="null" /> である値のみを含む場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-279">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-280">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-280">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-281">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-281">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-282"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-282"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-283">シーケンス内の要素の合計は <see cref="F:System.Int64.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-283">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-284">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-284">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-285">平均を計算する Null 許容型の <see cref="T:System.Int64" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-285">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-286">Null 許容型の <see cref="T:System.Int64" /> 値のシーケンスの平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-286">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-287">値のシーケンスの平均値、または、ソース シーケンスが空または <see langword="null" /> である値のみを含む場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-287">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-288">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-288">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-289">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-289">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-290"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-290"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-291">シーケンス内の要素の合計は <see cref="F:System.Int64.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-291">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-292">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-292">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-293">平均を計算する Null 許容型の <see cref="T:System.Single" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-293">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-294">Null 許容型の <see cref="T:System.Single" /> 値のシーケンスの平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-294">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-295">値のシーケンスの平均値、または、ソース シーケンスが空または <see langword="null" /> である値のみを含む場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-295">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-296">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-296">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-297">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-297">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-298"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-298"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-299">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-299">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static float Average (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-300">平均値計算の対象となる <see cref="T:System.Single" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-300">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-301"><see cref="T:System.Single" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-301">Computes the average of a sequence of <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-302">値のシーケンスの平均値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-302">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-303">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-303">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-304">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-304">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-305"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-305"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-306"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-306"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-307">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-307">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-308"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-308">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-309">平均値の計算に使用される値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-309">A sequence of values that are used to calculate an average.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-310">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-310">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-311">入力シーケンスの各要素に対して変換関数を呼び出して取得する <see cref="T:System.Decimal" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-311">Computes the average of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-312">値のシーケンスの平均値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-312">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-313">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-313">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-314">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-314">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-315"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-315"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-316"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-316"><paramref name="source" /> contains no elements.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-317">シーケンス内の要素の合計は <see cref="F:System.Decimal.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-317">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-318">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-318">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-319"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-319">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-320">平均値計算の対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-320">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-321">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-321">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-322">入力シーケンスの各要素に対して変換関数を呼び出して取得する <see cref="T:System.Double" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-322">Computes the average of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-323">値のシーケンスの平均値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-323">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-324">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-324">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-325">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-325">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-326"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-326"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-327"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-327"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-328">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-328">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-329"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-329">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-330">平均値計算の対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-330">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-331">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-331">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-332">入力シーケンスの各要素に対して変換関数を呼び出して取得する <see cref="T:System.Int32" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-332">Computes the average of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-333">値のシーケンスの平均値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-333">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-334">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-334">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-335">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-335">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-336"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-336"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-337"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-337"><paramref name="source" /> contains no elements.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-338">シーケンス内の要素の合計は <see cref="F:System.Int64.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-338">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-339">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-339">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-340">ソースの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-340">The type of the elements of source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-341">平均値計算の対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-341">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-342">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-342">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-343">入力シーケンスの各要素に対して変換関数を呼び出して取得する <see cref="T:System.Int64" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-343">Computes the average of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-344">値のシーケンスの平均値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-344">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-345">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-345">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-346">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-346">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-347"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-347"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-348"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-348"><paramref name="source" /> contains no elements.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-349">シーケンス内の要素の合計は <see cref="F:System.Int64.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-349">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-350">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-350">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-351"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-351">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-352">平均値計算の対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-352">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-353">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-353">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-354">入力シーケンスの各要素に対して変換関数を呼び出して取得する null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-354">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-355">値のシーケンスの平均値、または、ソース シーケンスが空または <see langword="null" /> である値のみを含む場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-355">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-356">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-356">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-357">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-357">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-358"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-358"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-359">シーケンス内の要素の合計は <see cref="F:System.Decimal.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-359">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-360">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-360">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-361"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-361">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-362">平均値計算の対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-362">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-363">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-363">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-364">入力シーケンスの各要素に対して変換関数を呼び出して取得する null 許容の <see cref="T:System.Double" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-364">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-365">値のシーケンスの平均値、または、ソース シーケンスが空または <see langword="null" /> である値のみを含む場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-365">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-366">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-366">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-367">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-367">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-368"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-368"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-369">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-369">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-370"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-370">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-371">平均値計算の対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-371">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-372">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-372">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-373">入力シーケンスの各要素に対して変換関数を呼び出して取得する null 許容の <see cref="T:System.Int32" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-373">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-374">値のシーケンスの平均値、または、ソース シーケンスが空または <see langword="null" /> である値のみを含む場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-374">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-375">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-375">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-376">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-376">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-377"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-377"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-378">シーケンス内の要素の合計は <see cref="F:System.Int64.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-378">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-379">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-379">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-380"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-380">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-381">平均値計算の対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-381">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-382">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-382">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-383">入力シーケンスの各要素に対して変換関数を呼び出して取得する null 許容の <see cref="T:System.Int64" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-383">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-384">値のシーケンスの平均値、または、ソース シーケンスが空または <see langword="null" /> である値のみを含む場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-384">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-385">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-385">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-386">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-386">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-387">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-387">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-388"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-388">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-389">平均値計算の対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-389">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-390">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-390">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-391">入力シーケンスの各要素に対して変換関数を呼び出して取得する null 許容の <see cref="T:System.Single" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-391">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-392">値のシーケンスの平均値、または、ソース シーケンスが空または <see langword="null" /> である値のみを含む場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-392">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-393">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-393">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-394">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-394">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-395"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-395"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-396">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-396">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-397"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-397">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-398">平均値計算の対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-398">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-399">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-399">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-400">入力シーケンスの各要素に対して変換関数を呼び出して取得する <see cref="T:System.Single" /> 値のシーケンスの平均値を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-400">Computes the average of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-401">値のシーケンスの平均値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-401">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-402">Visual Basic のクエリ式の構文、`Aggregate Into Average()`の呼び出しに変換句<xref:System.Linq.Enumerable.Average%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-402">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-403">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-403">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-404"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-404"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-405"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-405"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-406">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-406">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Cast&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Cast(Of TResult) (source As IEnumerable) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Cast(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member Cast : System.Collections.IEnumerable -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Cast source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-407"><paramref name="source" /> の要素のキャスト後の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-407">The type to cast the elements of <paramref name="source" /> to.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-408"><paramref name="TResult" /> 型にキャストされる要素が格納されている <see cref="T:System.Collections.IEnumerable" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-408">The <see cref="T:System.Collections.IEnumerable" /> that contains the elements to be cast to type <paramref name="TResult" />.</span></span></param>
        <summary><span data-ttu-id="b2f2d-409"><see cref="T:System.Collections.IEnumerable" /> の要素を、指定した型にキャストします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-409">Casts the elements of an <see cref="T:System.Collections.IEnumerable" /> to the specified type.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-410">指定された型にキャストされたソース シーケンスの各要素を格納する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-410">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains each element of the source sequence cast to the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-411">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-411">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-412">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-412">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-413">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-413">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-414"><xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>メソッドが必要な型情報を提供することによって、非ジェネリック コレクションで呼び出される標準クエリ演算子を使用できます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-414">The <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information.</span></span> <span data-ttu-id="b2f2d-415">たとえば、<xref:System.Collections.ArrayList>を実装しません<xref:System.Collections.Generic.IEnumerable%601>が呼び出すことによって<xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>上、<xref:System.Collections.ArrayList>オブジェクト、標準クエリ演算子のシーケンスをクエリに使用できます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-415">For example, <xref:System.Collections.ArrayList> does not implement <xref:System.Collections.Generic.IEnumerable%601>, but by calling <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> on the <xref:System.Collections.ArrayList> object, the standard query operators can then be used to query the sequence.</span></span>  
  
 <span data-ttu-id="b2f2d-416">要素を型に変換できない場合`TResult`、このメソッドは、<xref:System.InvalidCastException>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-416">If an element cannot be converted to type `TResult`, this method throws a <xref:System.InvalidCastException>.</span></span>

 <span data-ttu-id="b2f2d-417">このメソッドのソース シーケンスが<xref:System.Collections.IEnumerable>、つまり、要素のコンパイル時の静的な型である`object`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-417">The source sequence for this method is <xref:System.Collections.IEnumerable>, which means the elements have the compile-time static type of `object`.</span></span> <span data-ttu-id="b2f2d-418">このメソッドによって実行される唯一の型変換は、参照変換またはボックス化解除変換されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-418">The only type conversions that are performed by this method are reference conversions and unboxing conversions.</span></span> <span data-ttu-id="b2f2d-419">コレクション内の要素のランタイム型が対象の型と一致する必要があります。 または値の型の場合は、要素のランタイム型が対象の型のボックス化変換の結果をする必要があります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-419">The runtime type of the elements in the collection must match the target type, or in the case of value types, the runtime type of elements must be the result of a boxing conversion of the target type.</span></span> <span data-ttu-id="b2f2d-420">別の数値型の間など、他の型の変換は許可されません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-420">Other conversion types, such as those between different numeric types, are not allowed.</span></span> 
 
 <span data-ttu-id="b2f2d-421">型に変換できる要素のみを取得する`TResult`を使用して、<xref:System.Linq.Enumerable.OfType%2A>メソッドの代わりに<xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-421">To obtain only those elements that can be converted to type `TResult`, use the <xref:System.Linq.Enumerable.OfType%2A> method instead of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span>  
  
 <span data-ttu-id="b2f2d-422">クエリ式では、明示的に型指定された繰り返し変数の呼び出しに変換されます。<xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-422">In a query expression, an explicitly typed iteration variable translates to an invocation of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span> <span data-ttu-id="b2f2d-423">この例では、明示的に型指定された範囲変数の構文を使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-423">This example shows the syntax for an explicitly typed range variable.</span></span>  
  
```csharp  
from int i in objects  
```  
  
```vb  
From i As Integer In objects  
```  

<span data-ttu-id="b2f2d-424">使用して、`select`暗黙的な数値変換のように、その他の型の変換を実行するクエリの句。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-424">Use the `select` clause of a query to perform other conversion types, like the implicit numeric conversions.</span></span> <span data-ttu-id="b2f2d-425">次の例では、両方は使用して、`Cast`メソッドと`select`ボックス化変換された整数のシーケンスを代替のシーケンスに変換するステートメント。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-425">The following example uses both the `Cast` method and a `select` statement to convert a sequence of boxed integers to a sequence of doubles.</span></span>

```csharp
IEnumerable sequence = Enumerable.Range(0, 10);
var doubles = from int item in sequence
                select (double)item;
``` 

```vb
Dim sequence As IEnumerable = Enumerable.Range(0, 10)
Dim doubles = From item As Integer In sequence
                Select CType(item, Double)
```

## Examples  
 <span data-ttu-id="b2f2d-426">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>で標準クエリ演算子の使用を有効にする、<xref:System.Collections.ArrayList>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-426">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> to enable the use of the standard query operators on an <xref:System.Collections.ArrayList>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#19)]
 [!code-vb[System.Linq.Enumerable#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-427"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-427"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="b2f2d-428">シーケンスの要素を <paramref name="TResult" /> 型にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-428">An element in the sequence cannot be cast to type <paramref name="TResult" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/from-clause.md"><span data-ttu-id="b2f2d-429">from 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-429">from clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/from-clause.md"><span data-ttu-id="b2f2d-430">From 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-430">From Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Concat&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Concat(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Concat(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Concat (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-431">入力シーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-431">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="b2f2d-432">連結する最初のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-432">The first sequence to concatenate.</span></span></param>
        <param name="second"><span data-ttu-id="b2f2d-433">最初のシーケンスに連結するシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-433">The sequence to concatenate to the first sequence.</span></span></param>
        <summary><span data-ttu-id="b2f2d-434">2 つのシーケンスを連結します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-434">Concatenates two sequences.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-435">2 つの入力シーケンスの連結された要素が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-435">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the concatenated elements of the two input sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-436">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-436">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-437">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-437">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-438">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-438">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-439"><xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>メソッドとは異なります、<xref:System.Linq.Enumerable.Union%2A>メソッドのため、<xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>メソッドは、入力シーケンスで元のすべての要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-439">The <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns all the original elements in the input sequences.</span></span> <span data-ttu-id="b2f2d-440"><xref:System.Linq.Enumerable.Union%2A>メソッドは、一意の要素のみを返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-440">The <xref:System.Linq.Enumerable.Union%2A> method returns only unique elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-441">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>を 2 つのシーケンスを連結します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-441">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to concatenate two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#20)]
 [!code-vb[System.Linq.Enumerable#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#20)]  
  
 <span data-ttu-id="b2f2d-442">コレクション、配列などのシーケンスを作成し、適用は、2 つのシーケンスを連結することも、 <xref:System.Linq.Enumerable.SelectMany%2A> identity セレクター関数を引数としてメソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-442">An alternative way of concatenating two sequences is to construct a collection, for example an array, of sequences and then apply the <xref:System.Linq.Enumerable.SelectMany%2A> method, passing it the identity selector function.</span></span> <span data-ttu-id="b2f2d-443">次の例では、このように使用<xref:System.Linq.Enumerable.SelectMany%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-443">The following example demonstrates this use of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#112](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#112)]
 [!code-vb[System.Linq.Enumerable#112](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-444"><paramref name="first" /> または <paramref name="second" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-444"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-445">指定した要素がシーケンスに格納されているかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-445">Determines whether a sequence contains a specified element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IEnumerable(Of TSource), value As TSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource value);" />
      <MemberSignature Language="F#" Value="static member Contains : seq&lt;'Source&gt; * 'Source -&gt; bool" Usage="System.Linq.Enumerable.Contains (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-446"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-446">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-447">値の検索対象となるシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-447">A sequence in which to locate a value.</span></span></param>
        <param name="value"><span data-ttu-id="b2f2d-448">シーケンス内で検索する値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-448">The value to locate in the sequence.</span></span></param>
        <summary><span data-ttu-id="b2f2d-449">既定の等値比較子を使用して、指定した要素がシーケンスに含まれているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-449">Determines whether a sequence contains a specified element by using the default equality comparer.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-450">指定した値を持つ要素がソース シーケンスに含まれている場合は <see langword="true" />。それ以外は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-450"><see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-451">場合の種類`source`実装<xref:System.Collections.Generic.ICollection%601>、`Contains`結果を取得するその実装のメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-451">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, the `Contains` method in that implementation is invoked to obtain the result.</span></span> <span data-ttu-id="b2f2d-452">それ以外の場合、このメソッドを決定するかどうか`source`指定した要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-452">Otherwise, this method determines whether `source` contains the specified element.</span></span>  
  
 <span data-ttu-id="b2f2d-453">列挙体は、一致する要素が見つかるとすぐに終了します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-453">Enumeration is terminated as soon as a matching element is found.</span></span>  
  
 <span data-ttu-id="b2f2d-454">要素が既定の等値比較子を使用して、指定された値と比較して<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-454">Elements are compared to the specified value by using the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-455">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>を配列に特定の要素が含まれるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-455">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to determine whether an array contains a specific element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#21)]
 [!code-vb[System.Linq.Enumerable#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-456"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-456"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IEnumerable(Of TSource), value As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource value, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Contains : seq&lt;'Source&gt; * 'Source * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.Contains (source, value, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-457"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-457">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-458">値の検索対象となるシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-458">A sequence in which to locate a value.</span></span></param>
        <param name="value"><span data-ttu-id="b2f2d-459">シーケンス内で検索する値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-459">The value to locate in the sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-460">値を比較する等値比較子。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-460">An equality comparer to compare values.</span></span></param>
        <summary><span data-ttu-id="b2f2d-461">指定した <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して、指定した要素がシーケンスに含まれているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-461">Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-462">指定した値を持つ要素がソース シーケンスに含まれている場合は <see langword="true" />。それ以外は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-462"><see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-463">列挙体は、一致する要素が見つかるとすぐに終了します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-463">Enumeration is terminated as soon as a matching element is found.</span></span>  
  
 <span data-ttu-id="b2f2d-464">場合`comparer`は`null`、既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>、指定された値の要素を比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-464">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements to the specified value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-465">次の例で使用できる等値比較子を実装する方法を示しています、<xref:System.Linq.Enumerable.Contains%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-465">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Contains%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="b2f2d-466">この比較演算子を実装すると後のシーケンスを使用することができます`Product`内のオブジェクト、<xref:System.Linq.Enumerable.Contains%2A>メソッドを次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-466">After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Contains%2A> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#6)]
 [!code-vb[CSLINQCustomComparer#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-467"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-467"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Count&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-468">シーケンス内の要素数を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-468">Returns the number of elements in a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IEnumerable(Of TSource)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Count : seq&lt;'Source&gt; -&gt; int" Usage="System.Linq.Enumerable.Count source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-469"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-469">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-470">カウントする要素が格納されているシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-470">A sequence that contains elements to be counted.</span></span></param>
        <summary><span data-ttu-id="b2f2d-471">シーケンス内の要素数を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-471">Returns the number of elements in a sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-472">入力シーケンス内の要素数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-472">The number of elements in the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-473">場合の種類`source`実装<xref:System.Collections.Generic.ICollection%601>、その実装は、数の要素の取得に使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-473">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements.</span></span> <span data-ttu-id="b2f2d-474">それ以外の場合、このメソッドは、数を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-474">Otherwise, this method determines the count.</span></span>  
  
 <span data-ttu-id="b2f2d-475">使用して、<xref:System.Linq.Enumerable.LongCount%2A>メソッドと期待を超える結果を許可する<xref:System.Int32.MaxValue>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-475">Use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="b2f2d-476">Visual Basic のクエリ式の構文、`Aggregate Into Count()`の呼び出しに変換句<xref:System.Linq.Enumerable.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-476">In Visual Basic query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-477">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>配列の要素をカウントします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-477">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#22)]
 [!code-vb[System.Linq.Enumerable#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-478"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-478"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-479"><paramref name="source" /> 内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-479">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-480">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-480">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Count : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; int" Usage="System.Linq.Enumerable.Count (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-481"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-481">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-482">テストおよびカウントする要素が格納されているシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-482">A sequence that contains elements to be tested and counted.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-483">各要素が条件を満たしているかどうかをテストする関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-483">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="b2f2d-484">条件を満たす、指定されたシーケンス内の要素の数を表す数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-484">Returns a number that represents how many elements in the specified sequence satisfy a condition.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-485">述語関数の条件を満たす、シーケンス内の要素数を表す数値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-485">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-486">場合の種類`source`実装<xref:System.Collections.Generic.ICollection%601>、その実装は、数の要素の取得に使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-486">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements.</span></span> <span data-ttu-id="b2f2d-487">それ以外の場合、このメソッドは、数を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-487">Otherwise, this method determines the count.</span></span>  
  
 <span data-ttu-id="b2f2d-488">使用する必要があります、<xref:System.Linq.Enumerable.LongCount%2A>メソッドと期待を超える結果を許可する<xref:System.Int32.MaxValue>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-488">You should use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="b2f2d-489">Visual Basic のクエリ式の構文、`Aggregate Into Count()`の呼び出しに変換句<xref:System.Linq.Enumerable.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-489">In Visual Basic query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-490">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>条件を満たす配列内の要素をカウントします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-490">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#23)]
 [!code-vb[System.Linq.Enumerable#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-491"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-491"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-492"><paramref name="source" /> 内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-492">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-493">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-493">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-494"><see cref="T:System.Collections.Generic.IEnumerable`1" /> の要素を返します。シーケンスが空の場合は既定値を持つシングルトン コレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-494">Returns the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, or a default valued singleton collection if the sequence is empty.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.DefaultIfEmpty source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-495"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-495">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-496">シーケンスが空の場合に、既定値を返すシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-496">The sequence to return a default value for if it is empty.</span></span></param>
        <summary><span data-ttu-id="b2f2d-497">指定したシーケンスの要素を返します。シーケンスが空の場合はシングルトン コレクションにある型パラメーターの既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-497">Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-498"><paramref name="TSource" /> が空の場合、<paramref name="source" /> 型の既定値を格納する <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクト。それ以外の場合は <paramref name="source" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-498">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that contains the default value for the <paramref name="TSource" /> type if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-499">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-499">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-500">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-500">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-501">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-501">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-502">参照および null 許容型の既定値は`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-502">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-503">このメソッドと結合されている場合は、左外部結合を生成するために使用できます、 <xref:System.Linq.Enumerable.GroupJoin%2A>) メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-503">This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-504">次のコード例を使用する方法を示します<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>ソース シーケンスが空である場合に、既定値を指定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-504">The following code examples demonstrate how to use <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to provide a default value in case the source sequence is empty.</span></span>  
  
 <span data-ttu-id="b2f2d-505">この例では、空のシーケンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-505">This example uses a non-empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#24)]
 [!code-vb[System.Linq.Enumerable#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#24)]  
  
 <span data-ttu-id="b2f2d-506">この例では、空のシーケンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-506">This example uses an empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#25)]
 [!code-vb[System.Linq.Enumerable#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-507"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-507"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="b2f2d-508">結合</span><span class="sxs-lookup"><span data-stu-id="b2f2d-508">Joining</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IEnumerable(Of TSource), defaultValue As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource defaultValue);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.DefaultIfEmpty (source, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="defaultValue" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-509"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-509">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-510">シーケンスが空の場合に、指定された値を返すシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-510">The sequence to return the specified value for if it is empty.</span></span></param>
        <param name="defaultValue"><span data-ttu-id="b2f2d-511">シーケンスが空の場合に返す値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-511">The value to return if the sequence is empty.</span></span></param>
        <summary><span data-ttu-id="b2f2d-512">指定されたシーケンスの要素を返します。シーケンスが空の場合はシングルトン コレクションにある型パラメーターの既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-512">Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-513"><paramref name="defaultValue" /> が空の場合は <paramref name="source" /> が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。それ以外の場合は <paramref name="source" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-513">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-514">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-514">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-515">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-515">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-516">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-516">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-517">このメソッドと結合されている場合は、左外部結合を生成するために使用できます、 <xref:System.Linq.Enumerable.GroupJoin%2A>) メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-517">This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-518">次のコード例は、使用する方法を示します、<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>メソッドと、既定値を指定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-518">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method and specify a default value.</span></span> <span data-ttu-id="b2f2d-519">最初のシーケンスが空でない、2 番目のシーケンスが空です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-519">The first sequence is not empty and the second sequence is empty.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#26)]
 [!code-vb[System.Linq.Enumerable#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#26)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="b2f2d-520">結合</span><span class="sxs-lookup"><span data-stu-id="b2f2d-520">Joining</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Distinct&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-521">シーケンスから一意の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-521">Returns distinct elements from a sequence.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-522">結果のシーケンスが順序付きではありません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-522">The result sequence is unordered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Distinct source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-523"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-523">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-524">重複する要素を削除する対象となるシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-524">The sequence to remove duplicate elements from.</span></span></param>
        <summary><span data-ttu-id="b2f2d-525">既定の等値比較子を使用して値を比較することにより、シーケンスから一意の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-525">Returns distinct elements from a sequence by using the default equality comparer to compare values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-526">ソース シーケンスの一意の要素を格納する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-526">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-527">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-527">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-528">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-528">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-529">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-529">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-530"><xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>メソッドは、重複する値を含まない順序なしのシーケンスを返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-530">The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values.</span></span> <span data-ttu-id="b2f2d-531">既定の等値比較子を使用して<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-531">It uses the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-532">Visual Basic のクエリ式の構文を`Distinct`句がの呼び出しに変換されます<xref:System.Linq.Enumerable.Distinct%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-532">In Visual Basic query expression syntax, a `Distinct` clause translates to an invocation of <xref:System.Linq.Enumerable.Distinct%2A>.</span></span>  
  
 <span data-ttu-id="b2f2d-533">既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>、実装する型の値を比較するために使用、<xref:System.IEquatable%601>ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-533">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.IEquatable%601> generic interface.</span></span> <span data-ttu-id="b2f2d-534">カスタム データ型を比較する必要がありますをこのインターフェイスを実装し、独自<xref:System.Object.GetHashCode%2A>と<xref:System.Object.Equals%2A>型のメソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-534">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
 <span data-ttu-id="b2f2d-535">使用する例については<xref:System.Collections.Generic.IEqualityComparer%601>カスタム比較子を定義するを参照してください。<xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-535">For an example that uses <xref:System.Collections.Generic.IEqualityComparer%601> to define a custom comparer, see <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-536">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>を整数のシーケンスから一意の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-536">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return distinct elements from a sequence of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#27)]
 [!code-vb[System.Linq.Enumerable#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#27)]  
  
 <span data-ttu-id="b2f2d-537">実装する必要をいくつかのカスタム データ型のオブジェクトのシーケンスから一意の要素を取得する場合、<xref:System.IEquatable%601>クラスのジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-537">If you want to return distinct elements from sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in the class.</span></span> <span data-ttu-id="b2f2d-538">次のコード例は、カスタム データ型にこのインターフェイスを実装し、提供する方法を示しています。<xref:System.Object.GetHashCode%2A>と<xref:System.Object.Equals%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-538">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#1)]
 [!code-vb[CSLINQEncapsulatedComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#1)]  
  
 <span data-ttu-id="b2f2d-539">このインターフェイスを実装した後のシーケンスを使用することができます`Product`内のオブジェクト、<xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>メソッドを次の例に示すように。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-539">After you implement this interface, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#5)]
 [!code-vb[CSLINQEncapsulatedComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-540"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-540"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/distinct-clause.md"><span data-ttu-id="b2f2d-541">Distinct 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-541">Distinct Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Distinct (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-542"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-542">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-543">重複する要素を削除する対象となるシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-543">The sequence to remove duplicate elements from.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-544">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-544">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="b2f2d-545">指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して値を比較することにより、シーケンスから一意の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-545">Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-546">ソース シーケンスの一意の要素を格納する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-546">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-547">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-547">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-548">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-548">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-549">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-549">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-550"><xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>メソッドは、重複する値を含まない順序なしのシーケンスを返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-550">The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values.</span></span> <span data-ttu-id="b2f2d-551">場合`comparer`は`null`、既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>値を比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-551">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-552">次の例で使用できる等値比較子を実装する方法を示しています、<xref:System.Linq.Enumerable.Distinct%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-552">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="b2f2d-553">この比較演算子を実装すると後のシーケンスを使用することができます`Product`内のオブジェクト、<xref:System.Linq.Enumerable.Distinct%2A>メソッドを次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-553">After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%2A> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#5)]
 [!code-vb[CSLINQCustomComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-554"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-554"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAt&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAt&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAt&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAt(Of TSource) (source As IEnumerable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAt(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAt : seq&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Enumerable.ElementAt (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-555"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-555">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-556">返される要素が含まれる <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-556">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="index"><span data-ttu-id="b2f2d-557">取得する要素の、0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-557">The zero-based index of the element to retrieve.</span></span></param>
        <summary><span data-ttu-id="b2f2d-558">シーケンス内の指定されたインデックス位置にある要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-558">Returns the element at a specified index in a sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-559">ソース シーケンス内の指定された位置にある要素。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-559">The element at the specified position in the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-560">場合の種類`source`実装<xref:System.Collections.Generic.IList%601>、その実装の使用を指定したインデックス位置にある要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-560">If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index.</span></span> <span data-ttu-id="b2f2d-561">それ以外の場合、このメソッドは、指定した要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-561">Otherwise, this method obtains the specified element.</span></span>  
  
 <span data-ttu-id="b2f2d-562">場合、このメソッドが例外をスロー`index`が範囲外です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-562">This method throws an exception if `index` is out of range.</span></span> <span data-ttu-id="b2f2d-563">指定されたインデックスが範囲外の場合は、既定値を返す代わりに、使用、<xref:System.Linq.Enumerable.ElementAtOrDefault%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-563">To instead return a default value when the specified index is out of range, use the <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-564">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.ElementAt%2A>を特定の位置にある要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-564">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAt%2A> to return an element at a specific position.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#28)]
 [!code-vb[System.Linq.Enumerable#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-565"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-565"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b2f2d-566"><paramref name="index" /> が 0 未満か <paramref name="source" /> に含まれている要素数以上の値です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-566"><paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAtOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAtOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAtOrDefault(Of TSource) (source As IEnumerable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAtOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAtOrDefault : seq&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Enumerable.ElementAtOrDefault (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-567"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-567">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-568">返される要素が含まれる <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-568">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="index"><span data-ttu-id="b2f2d-569">取得する要素の、0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-569">The zero-based index of the element to retrieve.</span></span></param>
        <summary><span data-ttu-id="b2f2d-570">シーケンス内の指定されたインデックス位置にある要素を返します。インデックスが範囲外の場合は既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-570">Returns the element at a specified index in a sequence or a default value if the index is out of range.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-571">インデックスがソース シーケンスの範囲外の場合は <see langword="default" /> (<paramref name="TSource" />)。それ以外の場合は、ソース シーケンスの指定した位置にある要素。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-571"><see langword="default" />(<paramref name="TSource" />) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-572">場合の種類`source`実装<xref:System.Collections.Generic.IList%601>、その実装の使用を指定したインデックス位置にある要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-572">If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index.</span></span> <span data-ttu-id="b2f2d-573">それ以外の場合、このメソッドは、指定した要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-573">Otherwise, this method obtains the specified element.</span></span>  
  
 <span data-ttu-id="b2f2d-574">参照および null 許容型の既定値は`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-574">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-575"><xref:System.Linq.Enumerable.ElementAtOrDefault%2A> を使用する方法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-575">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAtOrDefault%2A>.</span></span> <span data-ttu-id="b2f2d-576">この例では、配列の境界外にあるインデックスを使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-576">This example uses an index that is outside the bounds of the array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#29)]
 [!code-vb[System.Linq.Enumerable#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-577"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-577"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Empty&lt;TResult&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Empty&lt;TResult&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Empty``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Empty(Of TResult) () As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Empty();" />
      <MemberSignature Language="F#" Value="static member Empty : unit -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-578">返されるジェネリック <see cref="T:System.Collections.Generic.IEnumerable`1" /> の型パラメーターに割り当てる型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-578">The type to assign to the type parameter of the returned generic <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></typeparam>
        <summary><span data-ttu-id="b2f2d-579">指定した型引数を持つ空の <see cref="T:System.Collections.Generic.IEnumerable`1" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-579">Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has the specified type argument.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-580">型引数が <paramref name="TResult" /> である空の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-580">An empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose type argument is <paramref name="TResult" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-581"><xref:System.Linq.Enumerable.Empty%60%601>メソッドは型の空のシーケンスをキャッシュ`TResult`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-581">The <xref:System.Linq.Enumerable.Empty%60%601> method caches an empty sequence of type `TResult`.</span></span> <span data-ttu-id="b2f2d-582">返されるオブジェクトが列挙されたときに要素は生成されません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-582">When the object it returns is enumerated, it yields no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-583">場合によっては、このメソッドはユーザー定義のメソッドに空のシーケンスを渡すことの<xref:System.Collections.Generic.IEnumerable%601>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-583">In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="b2f2d-584">などのメソッドのニュートラル要素を生成するも使用できます<xref:System.Linq.Enumerable.Union%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-584">It can also be used to generate a neutral element for methods such as <xref:System.Linq.Enumerable.Union%2A>.</span></span> <span data-ttu-id="b2f2d-585">この使用例については例を参照してください<xref:System.Linq.Enumerable.Empty%60%601>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-585">See the Example section for an example of this use of <xref:System.Linq.Enumerable.Empty%60%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-586">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Empty%60%601>空を生成する<xref:System.Collections.Generic.IEnumerable%601>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-586">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Empty%60%601> to generate an empty <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#30)]
 [!code-vb[System.Linq.Enumerable#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#30)]  
  
 <span data-ttu-id="b2f2d-587">次のコード例に示しますの可能性のあるアプリケーション、<xref:System.Linq.Enumerable.Empty%60%601>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-587">The following code example demonstrates a possible application of the <xref:System.Linq.Enumerable.Empty%60%601> method.</span></span> <span data-ttu-id="b2f2d-588"><xref:System.Linq.Enumerable.Aggregate%2A>メソッドは、文字列の配列のコレクションに適用されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-588">The <xref:System.Linq.Enumerable.Aggregate%2A> method is applied to a collection of string arrays.</span></span> <span data-ttu-id="b2f2d-589">結果に、コレクション内の各配列の要素が追加<xref:System.Collections.Generic.IEnumerable%601>その配列には、次の 4 つ以上の要素が含まれている場合のみです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-589">The elements of each array in the collection are added to the resulting <xref:System.Collections.Generic.IEnumerable%601> only if that array contains four or more elements.</span></span> <span data-ttu-id="b2f2d-590"><xref:System.Linq.Enumerable.Empty%2A> シード値を生成するために使用<xref:System.Linq.Enumerable.Aggregate%2A>のため、配列、コレクション内に 4 つ以上の要素が存在しない場合、空のシーケンスだけが返されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-590"><xref:System.Linq.Enumerable.Empty%2A> is used to generate the seed value for <xref:System.Linq.Enumerable.Aggregate%2A> because if no array in the collection has four or more elements, only the empty sequence is returned.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#31)]
 [!code-vb[System.Linq.Enumerable#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Except&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-591">2 つのシーケンスの差集合を生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-591">Produces the set difference of two sequences.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="b2f2d-592">2 つのセットの差集合は、2 番目のセットに表示されない最初のセットのメンバーとして定義されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-592">The set difference of two sets is defined as the members of the first set that don't appear in the second set.</span></span>  
  
<span data-ttu-id="b2f2d-593">このメソッドは、該当する要素を返します。`first`には表示されません`second`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-593">This method returns those elements in `first` that don't appear in `second`.</span></span> <span data-ttu-id="b2f2d-594">該当する要素が返されない`second`には表示されません`first`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-594">It doesn't return those elements in `second` that don't appear in `first`.</span></span>
<span data-ttu-id="b2f2d-595">一意の要素のみが返されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-595">Only unique elements are returned.</span></span>

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note-some.md)]

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/dotnet/api/system.linq.enumerable.intersect"><span data-ttu-id="b2f2d-596">Enumerable.Intersect メソッド</span><span class="sxs-lookup"><span data-stu-id="b2f2d-596">Enumerable.Intersect Method</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Except : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Except (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-597">入力シーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-597">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="b2f2d-598"><paramref name="second" /> には含まれていないが、返される要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-598">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</span></span></param>
        <param name="second"><span data-ttu-id="b2f2d-599">最初のシーケンスにも含まれ、返されたシーケンスからは削除される要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-599">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span></span></param>
        <summary><span data-ttu-id="b2f2d-600">既定の等値比較子を使用して値を比較することにより、2 つのシーケンスの差集合を生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-600">Produces the set difference of two sequences by using the default equality comparer to compare values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-601">2 つのシーケンスの要素の差集合が格納されているシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-601">A sequence that contains the set difference of the elements of two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-602">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-602">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-603">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-603">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-604">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-604">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
    
 <span data-ttu-id="b2f2d-605">既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>型の値を比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-605">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types.</span></span> <span data-ttu-id="b2f2d-606">カスタム データ型を比較するには、オーバーライドする必要があります、<xref:System.Object.Equals%2A>と<xref:System.Object.GetHashCode%2A>メソッド、および必要に応じて実装、<xref:System.IEquatable%601>カスタム型でジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-606">To compare a custom data type, you need to override the <xref:System.Object.Equals%2A> and the <xref:System.Object.GetHashCode%2A> methods, and optionally implement the <xref:System.IEquatable%601> generic interface in the custom type.</span></span> <span data-ttu-id="b2f2d-607">詳細については、<xref:System.Collections.Generic.EqualityComparer%601.Default%2A> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-607">For more information, see the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> property.</span></span>
  
## Examples  
 <span data-ttu-id="b2f2d-608">次のコード例は、使用する方法を示します、`Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)`番号の 2 つのシーケンスを比較し、要素を返すメソッドは、最初のシーケンスにのみ表示されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-608">The following code example demonstrates how to use the `Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method to compare two sequences of numbers and return elements that appear only in the first sequence.</span></span>  
  
 [!code-csharp-interactive[System.Linq.Enumerable#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#34)]
 [!code-vb[System.Linq.Enumerable#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#34)]  
  
  <span data-ttu-id="b2f2d-609">実装する必要があるいくつかのカスタム データ型のオブジェクトのシーケンスを比較する場合は、<xref:System.IEquatable%601>ヘルパー クラスでジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-609">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in a helper class.</span></span> <span data-ttu-id="b2f2d-610">次のコード例は、カスタム データ型にこのインターフェイスを実装し、オーバーライドする方法を示しています。<xref:System.Object.GetHashCode%2A>と<xref:System.Object.Equals%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-610">The following code example shows how to implement this interface in a custom data type and override <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]
 [!code-vb[CSLINQEncapsulatedComparer#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#9)]  
  
 <span data-ttu-id="b2f2d-611">このインターフェイスを実装した後のシーケンスを使用することができます`ProductA`内のオブジェクト、`Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)`メソッドを次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-611">After you implement this interface, you can use sequences of `ProductA` objects in the `Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method, as shown in the following example:</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#7)]
 [!code-vb[CSLINQEncapsulatedComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#7)]  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-612"><paramref name="first" /> または <paramref name="second" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-612"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Except : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Except (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-613">入力シーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-613">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="b2f2d-614"><paramref name="second" /> には含まれていないが、返される要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-614">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</span></span></param>
        <param name="second"><span data-ttu-id="b2f2d-615">最初のシーケンスにも含まれ、返されたシーケンスからは削除される要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-615">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-616">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-616">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="b2f2d-617">指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して値を比較することにより、2 つのシーケンスの差集合を生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-617">Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-618">2 つのシーケンスの要素の差集合が格納されているシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-618">A sequence that contains the set difference of the elements of two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-619">場合`comparer`は`null`、既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>値を比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-619">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>
  
## Examples  
 <span data-ttu-id="b2f2d-620">実装する必要があるいくつかのカスタム データ型のオブジェクトのシーケンスを比較する場合は、<xref:System.Collections.Generic.IEqualityComparer%601>ヘルパー クラスでジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-620">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helper class.</span></span> <span data-ttu-id="b2f2d-621">次のコード例は、カスタム データ型にこのインターフェイスを実装し、提供する方法を示しています。<xref:System.Object.GetHashCode%2A>と<xref:System.Object.Equals%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-621">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span> <span data-ttu-id="b2f2d-622">次の例で使用できる等値比較子を実装する方法を示しています、<xref:System.Linq.Enumerable.Except%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-622">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Except%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="b2f2d-623">この比較演算子を実装すると後のシーケンスを使用することができます`Product`内のオブジェクト、<xref:System.Linq.Enumerable.Except%2A>メソッドを次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-623">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Except%2A> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#7)]
 [!code-vb[CSLINQCustomComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-624"><paramref name="first" /> または <paramref name="second" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-624"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="First&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-625">シーケンスの最初の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-625">Returns the first element of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member First : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.First source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-626"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-626">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-627">最初の要素を返す <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-627">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-628">シーケンスの最初の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-628">Returns the first element of a sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-629">指定されたシーケンスの最初の要素。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-629">The first element in the specified sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-630"><xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>場合、メソッドが例外をスロー`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-630">The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements.</span></span> <span data-ttu-id="b2f2d-631">代わりに、ソース シーケンスが空の場合は、既定値を返すを使用して、<xref:System.Linq.Enumerable.FirstOrDefault%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-631">To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-632">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>を配列の最初の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-632">The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the first element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#35)]
 [!code-vb[System.Linq.Enumerable#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-633"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-633"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-634">ソース シーケンスが空です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-634">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member First : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.First (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-635"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-635">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-636">返される要素が含まれる <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-636">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-637">各要素が条件を満たしているかどうかをテストする関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-637">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="b2f2d-638">指定された条件を満たす、シーケンスの最初の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-638">Returns the first element in a sequence that satisfies a specified condition.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-639">指定された述語関数でテストに合格する、シーケンスの最初の要素。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-639">The first element in the sequence that passes the test in the specified predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-640"><xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>で一致する要素が見つからない場合、メソッドが例外をスロー`source`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-640">The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`.</span></span> <span data-ttu-id="b2f2d-641">一致する要素が見つからない場合は、既定値を返す代わりを使用して、<xref:System.Linq.Enumerable.FirstOrDefault%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-641">To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-642">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>を条件を満たす、配列の最初の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-642">The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the first element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#36)]
 [!code-vb[System.Linq.Enumerable#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-643"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-643"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-644"><paramref name="predicate" /> の条件を満たす要素はありません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-644">No element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="b2f2d-645">または</span><span class="sxs-lookup"><span data-stu-id="b2f2d-645">-or-</span></span> 
<span data-ttu-id="b2f2d-646">ソース シーケンスが空です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-646">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FirstOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-647">シーケンスの最初の要素を返します。要素が見つからない場合は既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-647">Returns the first element of a sequence, or a default value if no element is found.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.FirstOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-648"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-648">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-649">最初の要素を返す <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-649">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-650">シーケンスの最初の要素を返します。シーケンスに要素が含まれていない場合は既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-650">Returns the first element of a sequence, or a default value if the sequence contains no elements.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-651"><paramref name="TSource" /> が空の場合は <see langword="default" />(<paramref name="source" />)。それ以外の場合は <paramref name="source" /> の最初の要素。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-651"><see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-652">参照および null 許容型の既定値は`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-652">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-653"><xref:System.Linq.Enumerable.FirstOrDefault%2A>メソッドが既定値を指定する方法を提供していません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-653">The <xref:System.Linq.Enumerable.FirstOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="b2f2d-654">以外の既定値を指定したい場合`default(TSource)`を使用して、<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>メソッドの使用例」で説明します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-654">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-655">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>で空の配列。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-655">The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#37)]
 [!code-vb[System.Linq.Enumerable#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#37)]  
  
 <span data-ttu-id="b2f2d-656">値も`default(TSource)`コレクションに要素が含まれていない場合は、使用する既定値はありません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-656">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="b2f2d-657">不要な既定値の結果をチェックし、必要に応じてを変更して、代わりに使用することができます、<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>コレクションが空の場合に使用する既定値を指定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-657">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="b2f2d-658">次に呼び出す<xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>最初の要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-658">Then, call <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the first element.</span></span> <span data-ttu-id="b2f2d-659">次のコード例では、両方の手法を使用して、月を表す数値のコレクションが空の場合は、1 の既定値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-659">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty.</span></span> <span data-ttu-id="b2f2d-660">整数の既定値は 0 で、任意の月に対応していない、ため、既定値必要があります 1 として代わりに指定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-660">Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="b2f2d-661">クエリの実行が完了した後、不要な既定値の最初の結果変数がチェックされます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-661">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="b2f2d-662">2 番目の結果の変数を使用して取得されます<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>1 の既定値を指定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-662">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#126](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#126)]
 [!code-vb[System.Linq.Enumerable#126](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#126)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-663"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-663"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.FirstOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-664"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-664">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-665">返される要素が含まれる <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-665">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-666">各要素が条件を満たしているかどうかをテストする関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-666">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="b2f2d-667">条件を満たす、シーケンスの最初の要素を返します。このような要素が見つからない場合は既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-667">Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-668"><paramref name="TSource" /> が空の場合または <paramref name="source" /> で指定されたテストに合格する要素がない場合は <see langword="default" />(<paramref name="predicate" />)。それ以外の場合は、<paramref name="source" /> で指定されたテストに合格する、<paramref name="predicate" /> の最初の要素。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-668"><see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-669">参照および null 許容型の既定値は`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-669">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-670">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>述語内で渡すことで。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-670">The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="b2f2d-671">メソッドの 2 番目の呼び出しで要素が存在しない条件を満たす配列にします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-671">In the second call to the method, there is no element in the array that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#38)]
 [!code-vb[System.Linq.Enumerable#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-672"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-672"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-673">シーケンスの要素をグループ化します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-673">Groups the elements of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-674"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-674">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-675"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-675">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-676">グループ化する要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-676">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-677">各要素のキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-677">A function to extract the key for each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-678">指定されたキー セレクター関数に従ってシーケンスの要素をグループ化します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-678">Groups the elements of a sequence according to a specified key selector function.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-679">C# では <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c>、Visual Basic では <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c>。各 <see cref="T:System.Linq.IGrouping`2" /> オブジェクトには、オブジェクトのシーケンスとキーが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-679">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-680">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-680">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-681">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-681">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-682">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-682">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-683">例については`GroupBy`、次のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-683">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="b2f2d-684"><xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>メソッドのコレクションを返します<xref:System.Linq.IGrouping%602>オブジェクト、発生した個別のキーごとに 1 つ。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-684">The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="b2f2d-685"><xref:System.Linq.IGrouping%602>は、<xref:System.Collections.Generic.IEnumerable%601>もがその要素に関連付けられているキー。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-685">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="b2f2d-686"><xref:System.Linq.IGrouping%602>オブジェクト内の要素の順序に基づいて注文で見つかった`source`それぞれの最初のキーを生成<xref:System.Linq.IGrouping%602>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-686">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="b2f2d-687">グループ内の要素に表示される順序で見つかった`source`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-687">Elements in a grouping are yielded in the order they appear in `source`.</span></span>  
  
 <span data-ttu-id="b2f2d-688">既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>キーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-688">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="b2f2d-689">クエリ式の構文で、 `group by` (Visual C#) または`Group By Into`の呼び出しに変換します (Visual Basic) 句<xref:System.Linq.Enumerable.GroupBy%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-689">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="b2f2d-690">詳細と使用例については、次を参照してください。 [group 句](~/docs/csharp/language-reference/keywords/group-clause.md)と[By 句のグループ](~/docs/visual-basic/language-reference/queries/group-by-clause.md)します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-690">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-691"><paramref name="source" /> または <paramref name="keySelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-691"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="b2f2d-692">group 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-692">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="b2f2d-693">Group By 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-693">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-694"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-694">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-695"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-695">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-696">グループ化する要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-696">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-697">各要素のキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-697">A function to extract the key for each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-698">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-698">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="b2f2d-699">指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、指定された比較子を使用してキーを比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-699">Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-700">C# では <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c>、Visual Basic では <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c>。各 <see cref="T:System.Linq.IGrouping`2" /> オブジェクトには、オブジェクトのコレクションとキーが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-700">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-701">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-701">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-702">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-702">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-703">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-703">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-704">例については`GroupBy`、次のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-704">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="b2f2d-705"><xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>メソッドのコレクションを返します<xref:System.Linq.IGrouping%602>オブジェクト、発生した個別のキーごとに 1 つ。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-705">The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="b2f2d-706"><xref:System.Linq.IGrouping%602>は、<xref:System.Collections.Generic.IEnumerable%601>もがその要素に関連付けられているキー。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-706">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="b2f2d-707"><xref:System.Linq.IGrouping%602>オブジェクト内の要素の順序に基づいて注文で見つかった`source`それぞれの最初のキーを生成<xref:System.Linq.IGrouping%602>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-707">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="b2f2d-708">グループ内の要素に表示される順序で見つかった`source`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-708">Elements in a grouping are yielded in the order they appear in `source`.</span></span>  
  
 <span data-ttu-id="b2f2d-709">場合`comparer`は`null`、既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>キーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-709">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="b2f2d-710">2 つのキーが等しいと評価と見なされた場合`comparer`、最初のキーは、そのグループ化キーとして選択されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-710">If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.</span></span>  
  
 <span data-ttu-id="b2f2d-711">クエリ式の構文で、 `group by` (Visual C#) または`Group By Into`の呼び出しに変換します (Visual Basic) 句<xref:System.Linq.Enumerable.GroupBy%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-711">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="b2f2d-712">詳細と使用例については、次を参照してください。 [group 句](~/docs/csharp/language-reference/keywords/group-clause.md)と[By 句のグループ](~/docs/visual-basic/language-reference/queries/group-by-clause.md)します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-712">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-713"><paramref name="source" /> または <paramref name="keySelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-713"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="b2f2d-714">group 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-714">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="b2f2d-715">Group By 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-715">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As IEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-716"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-716">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-717"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-717">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="b2f2d-718"><see cref="T:System.Linq.IGrouping`2" /> 内の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-718">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-719">グループ化する要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-719">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-720">各要素のキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-720">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="b2f2d-721">ソースの各要素を <see cref="T:System.Linq.IGrouping`2" /> の要素に割り当てる関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-721">A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <summary><span data-ttu-id="b2f2d-722">指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、指定された関数を使用して各グループの要素を射影します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-722">Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-723">C# では <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c>、Visual Basic では <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c>。各 <see cref="T:System.Linq.IGrouping`2" /> オブジェクトには、<paramref name="TElement" /> 型のオブジェクトのコレクションとキーが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-723">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-724">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-724">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-725">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-725">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-726">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-726">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-727"><xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>メソッドのコレクションを返します<xref:System.Linq.IGrouping%602>オブジェクト、発生した個別のキーごとに 1 つ。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-727">The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="b2f2d-728"><xref:System.Linq.IGrouping%602>は、<xref:System.Collections.Generic.IEnumerable%601>もがその要素に関連付けられているキー。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-728">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="b2f2d-729"><xref:System.Linq.IGrouping%602>オブジェクト内の要素の順序に基づいて注文で見つかった`source`それぞれの最初のキーを生成<xref:System.Linq.IGrouping%602>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-729">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="b2f2d-730">グループ内の要素はそれらを生成した要素に表示される順序で返されます`source`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-730">Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.</span></span>  
  
 <span data-ttu-id="b2f2d-731">既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>キーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-731">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-732">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>シーケンスの要素をグループ化します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-732">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to group the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#39)]
 [!code-vb[System.Linq.Enumerable#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#39)]  
  
 <span data-ttu-id="b2f2d-733">クエリ式の構文で、 `group by` (Visual C#) または`Group By Into`の呼び出しに変換します (Visual Basic) 句<xref:System.Linq.Enumerable.GroupBy%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-733">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="b2f2d-734">次の例では、クエリ式の変換は、上記の例のクエリと同じです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-734">The translation of the query expression in the following example is equivalent to the query in the example above.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#122](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#122)]
 [!code-vb[System.Linq.Enumerable#122](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#122)]  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-735">Visual C# または Visual Basic のクエリ式で、要素とキーの選択式は、逆の順序でへの呼び出しの引数の位置から、<xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-735">In a Visual C# or Visual Basic query expression, the element and key selection expressions occur in the reverse order from their argument positions in a call to the <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-736"><paramref name="source" />、<paramref name="keySelector" />、または <paramref name="elementSelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-736"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="b2f2d-737">group 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-737">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="b2f2d-738">Group By 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-738">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-739"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-739">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-740"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-740">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="b2f2d-741"><see cref="T:System.Linq.IGrouping`2" /> 内の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-741">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-742">グループ化する要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-742">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-743">各要素のキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-743">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="b2f2d-744">ソースの各要素を <see cref="T:System.Linq.IGrouping`2" /> の要素に割り当てる関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-744">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-745">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-745">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="b2f2d-746">キー セレクター関数に従ってシーケンスの要素をグループ化します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-746">Groups the elements of a sequence according to a key selector function.</span></span> <span data-ttu-id="b2f2d-747">キーの比較には、比較子を使用し、各グループの要素の射影には、指定された関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-747">The keys are compared by using a comparer and each group's elements are projected by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-748">C# では <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c>、Visual Basic では <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c>。各 <see cref="T:System.Linq.IGrouping`2" /> オブジェクトには、<paramref name="TElement" /> 型のオブジェクトのコレクションとキーが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-748">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-749">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-749">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-750">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-750">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-751">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-751">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-752">例については`GroupBy`、次のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-752">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="b2f2d-753"><xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>メソッドのコレクションを返します<xref:System.Linq.IGrouping%602>オブジェクト、発生した個別のキーごとに 1 つ。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-753">The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="b2f2d-754"><xref:System.Linq.IGrouping%602>は、<xref:System.Collections.Generic.IEnumerable%601>もがその要素に関連付けられているキー。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-754">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="b2f2d-755"><xref:System.Linq.IGrouping%602>オブジェクト内の要素の順序に基づいて注文で見つかった`source`それぞれの最初のキーを生成<xref:System.Linq.IGrouping%602>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-755">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="b2f2d-756">グループ内の要素はそれらを生成した要素に表示される順序で返されます`source`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-756">Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.</span></span>  
  
 <span data-ttu-id="b2f2d-757">場合`comparer`は`null`、既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>キーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-757">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="b2f2d-758">2 つのキーが等しいと評価と見なされた場合`comparer`、最初のキーは、そのグループ化キーとして選択されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-758">If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.</span></span>  
  
 <span data-ttu-id="b2f2d-759">クエリ式の構文で、 `group by` (Visual C#) または`Group By Into`の呼び出しに変換します (Visual Basic) 句<xref:System.Linq.Enumerable.GroupBy%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-759">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="b2f2d-760">詳細と使用例については、次を参照してください。 [group 句](~/docs/csharp/language-reference/keywords/group-clause.md)と[By 句のグループ](~/docs/visual-basic/language-reference/queries/group-by-clause.md)します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-760">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-761"><paramref name="source" />、<paramref name="keySelector" />、または <paramref name="elementSelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-761"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="b2f2d-762">group 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-762">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="b2f2d-763">Group By 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-763">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-764"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-764">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-765"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-765">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-766"><paramref name="resultSelector" /> によって返される結果値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-766">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-767">グループ化する要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-767">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-768">各要素のキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-768">A function to extract the key for each element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="b2f2d-769">各グループから結果値を作成する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-769">A function to create a result value from each group.</span></span></param>
        <summary><span data-ttu-id="b2f2d-770">指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、各グループとそのキーから結果値を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-770">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-771"><paramref name="TResult" /> 型の要素のコレクション。各要素は、グループとそのキーの射影を表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-771">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-772">クエリ式の構文で、 `group by` (Visual C#) または`Group By Into`の呼び出しに変換します (Visual Basic) 句<xref:System.Linq.Enumerable.GroupBy%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-772">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-773">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>シーケンスの要素をグループ化し、プロジェクトの種類の結果のシーケンス`TResult`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-773">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29> to group the elements of a sequence and project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#15)]
 [!code-vb[System.Linq.Enumerable#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="b2f2d-774">group 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-774">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="b2f2d-775">Group By 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-775">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-776"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-776">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-777"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-777">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-778"><paramref name="resultSelector" /> によって返される結果値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-778">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-779">グループ化する要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-779">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-780">各要素のキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-780">A function to extract the key for each element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="b2f2d-781">各グループから結果値を作成する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-781">A function to create a result value from each group.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-782">キーの比較対象となる <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-782">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span></span></param>
        <summary><span data-ttu-id="b2f2d-783">指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、各グループとそのキーから結果値を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-783">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span> <span data-ttu-id="b2f2d-784">キーの比較には、指定された比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-784">The keys are compared by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-785"><paramref name="TResult" /> 型の要素のコレクション。各要素は、グループとそのキーの射影を表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-785">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="b2f2d-786">group 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-786">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="b2f2d-787">Group By 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-787">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-788"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-788">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-789"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-789">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="b2f2d-790">各 <see cref="T:System.Linq.IGrouping`2" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-790">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-791"><paramref name="resultSelector" /> によって返される結果値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-791">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-792">グループ化する要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-792">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-793">各要素のキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-793">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="b2f2d-794">ソースの各要素を <see cref="T:System.Linq.IGrouping`2" /> の要素に割り当てる関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-794">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="b2f2d-795">各グループから結果値を作成する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-795">A function to create a result value from each group.</span></span></param>
        <summary><span data-ttu-id="b2f2d-796">指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、各グループとそのキーから結果値を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-796">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span> <span data-ttu-id="b2f2d-797">各グループの要素は、指定された関数を使用して射影されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-797">The elements of each group are projected by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-798"><paramref name="TResult" /> 型の要素のコレクション。各要素は、グループとそのキーの射影を表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-798">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-799">クエリ式の構文で、 `group by` (Visual C#) または`Group By Into`の呼び出しに変換します (Visual Basic) 句<xref:System.Linq.Enumerable.GroupBy%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-799">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-800">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>シーケンスの射影された要素をグループ化し、次にプロジェクトの種類の結果のシーケンス`TResult`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-800">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29> to group the projected elements of a sequence and then project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#125](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#125)]
 [!code-vb[System.Linq.Enumerable#125](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#125)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="b2f2d-801">group 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-801">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="b2f2d-802">Group By 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-802">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-803"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-803">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-804"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-804">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="b2f2d-805">各 <see cref="T:System.Linq.IGrouping`2" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-805">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-806"><paramref name="resultSelector" /> によって返される結果値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-806">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-807">グループ化する要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-807">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-808">各要素のキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-808">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="b2f2d-809">ソースの各要素を <see cref="T:System.Linq.IGrouping`2" /> の要素に割り当てる関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-809">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="b2f2d-810">各グループから結果値を作成する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-810">A function to create a result value from each group.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-811">キーの比較対象となる <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-811">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span></span></param>
        <summary><span data-ttu-id="b2f2d-812">指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、各グループとそのキーから結果値を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-812">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span> <span data-ttu-id="b2f2d-813">キー値の比較には、指定された比較子を使用し、各グループの要素の射影には、指定された関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-813">Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-814"><paramref name="TResult" /> 型の要素のコレクション。各要素は、グループとそのキーの射影を表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-814">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="b2f2d-815">group 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-815">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="b2f2d-816">Group By 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-816">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-817">キーが等しいかどうかに基づいて 2 つのシーケンスの要素を相互に関連付け、その結果をグループ化します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-817">Correlates the elements of two sequences based on key equality, and groups the results.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupJoin(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="b2f2d-818">最初のシーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-818">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="b2f2d-819">2 番目のシーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-819">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-820">キー セレクター関数によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-820">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-821">結果の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-821">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="b2f2d-822">結合する最初のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-822">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="b2f2d-823">最初のシーケンスに結合するシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-823">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="b2f2d-824">最初のシーケンスの各要素から結合キーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-824">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="b2f2d-825">2 番目のシーケンスの各要素から結合キーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-825">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="b2f2d-826">最初のシーケンスの要素と、2 番目のシーケンスの一致する要素のコレクションから結果の要素を作成する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-826">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span></span></param>
        <summary><span data-ttu-id="b2f2d-827">キーが等しいかどうかに基づいて 2 つのシーケンスの要素を相互に関連付け、その結果をグループ化します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-827">Correlates the elements of two sequences based on equality of keys and groups the results.</span></span> <span data-ttu-id="b2f2d-828">キーの比較には既定の等値比較子が使用されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-828">The default equality comparer is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-829">2 つのシーケンスに対してグループ化結合を実行して取得する、<paramref name="TResult" /> 型の要素が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-829">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-830">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-830">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-831">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-831">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-832">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-832">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-833">既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>をハッシュしてキーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-833">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="b2f2d-834"><xref:System.Linq.Enumerable.GroupJoin%2A> つまり生成階層的な結果の要素を`outer`から一致する要素のコレクションとペアになる`inner`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-834"><xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`.</span></span> <span data-ttu-id="b2f2d-835">`GroupJoin` 使用すると、結果を全体の各要素に一致する一連の基本`outer`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-835">`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-836">相関関係を持つ要素がない場合`inner`の指定された要素の`outer`、その要素の一致項目のシーケンスが空になりますは、結果に表示されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-836">If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.</span></span>  
  
 <span data-ttu-id="b2f2d-837">`resultSelector`関数ごとに 1 つのみ`outer`要素すべてのコレクションと共に、`inner`と一致する要素、`outer`要素。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-837">The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element.</span></span> <span data-ttu-id="b2f2d-838">これに対し、<xref:System.Linq.Enumerable.Join%2A>から 1 つの要素を含む組を結果のセレクター関数が呼び出されたメソッド`outer`と 1 つの要素から`inner`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-838">This differs from the <xref:System.Linq.Enumerable.Join%2A> method, in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.</span></span>  
  
 <span data-ttu-id="b2f2d-839">`GroupJoin` 要素の順序を保持`outer`の各要素に対して`outer`から一致する要素の順序`inner`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-839">`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.</span></span>  
  
 <span data-ttu-id="b2f2d-840"><xref:System.Linq.Enumerable.GroupJoin%2A> 従来のリレーショナル データベース用語では直接相当するものを与えません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-840"><xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms.</span></span> <span data-ttu-id="b2f2d-841">ただし、このメソッドは内部結合と左外部結合のスーパー セットを実装します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-841">However, this method does implement a superset of inner joins and left outer joins.</span></span> <span data-ttu-id="b2f2d-842">グループ化結合では、これらの操作の両方を記述できます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-842">Both of these operations can be written in terms of a grouped join.</span></span> <span data-ttu-id="b2f2d-843">参照してください[結合操作](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-843">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 <span data-ttu-id="b2f2d-844">クエリ式の構文で、 `join … into` (Visual C#) または`Group Join`の呼び出しに変換します (Visual Basic) 句<xref:System.Linq.Enumerable.GroupJoin%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-844">In query expression syntax, a `join … into` (Visual C#) or `Group Join` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupJoin%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-845">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29>2 つのシーケンスに対してグループ化結合を実行します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-845">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29> to perform a grouped join on two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#40)]
 [!code-vb[System.Linq.Enumerable#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-846"><paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKeySelector" />、<paramref name="innerKeySelector" />、または <paramref name="resultSelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-846"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="b2f2d-847">結合演算</span><span class="sxs-lookup"><span data-stu-id="b2f2d-847">Join Operations</span></span></related>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/join-clause.md"><span data-ttu-id="b2f2d-848">join 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-848">join clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-join-clause.md"><span data-ttu-id="b2f2d-849">Group Join 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-849">Group Join Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupJoin(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="b2f2d-850">最初のシーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-850">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="b2f2d-851">2 番目のシーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-851">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-852">キー セレクター関数によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-852">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-853">結果の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-853">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="b2f2d-854">結合する最初のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-854">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="b2f2d-855">最初のシーケンスに結合するシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-855">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="b2f2d-856">最初のシーケンスの各要素から結合キーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-856">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="b2f2d-857">2 番目のシーケンスの各要素から結合キーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-857">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="b2f2d-858">最初のシーケンスの要素と、2 番目のシーケンスの一致する要素のコレクションから結果の要素を作成する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-858">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-859">キーをハッシュして比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-859">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span></span></param>
        <summary><span data-ttu-id="b2f2d-860">キーが等しいかどうかに基づいて 2 つのシーケンスの要素を相互に関連付け、その結果をグループ化します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-860">Correlates the elements of two sequences based on key equality and groups the results.</span></span> <span data-ttu-id="b2f2d-861">指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用してキーを比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-861">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-862">2 つのシーケンスに対してグループ化結合を実行して取得する、<paramref name="TResult" /> 型の要素が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-862">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-863">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-863">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-864">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-864">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-865">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-865">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-866">場合`comparer`は`null`、既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>をハッシュしてキーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-866">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="b2f2d-867"><xref:System.Linq.Enumerable.GroupJoin%2A> つまり生成階層的な結果の要素を`outer`から一致する要素のコレクションとペアになる`inner`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-867"><xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`.</span></span> <span data-ttu-id="b2f2d-868">`GroupJoin` 使用すると、結果を全体の各要素に一致する一連の基本`outer`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-868">`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-869">相関関係を持つ要素がない場合`inner`の指定された要素の`outer`、その要素の一致項目のシーケンスが空になりますは、結果に表示されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-869">If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.</span></span>  
  
 <span data-ttu-id="b2f2d-870">`resultSelector`関数ごとに 1 つのみ`outer`要素すべてのコレクションと共に、`inner`と一致する要素、`outer`要素。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-870">The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element.</span></span> <span data-ttu-id="b2f2d-871">これに対し、<xref:System.Linq.Enumerable.Join%2A>メソッドのペアから 1 つの要素が含まれている結果のセレクター関数が呼び出される`outer`と 1 つの要素から`inner`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-871">This differs from the <xref:System.Linq.Enumerable.Join%2A> method in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.</span></span>  
  
 <span data-ttu-id="b2f2d-872">`GroupJoin` 要素の順序を保持`outer`の各要素に対して`outer`から一致する要素の順序`inner`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-872">`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.</span></span>  
  
 <span data-ttu-id="b2f2d-873"><xref:System.Linq.Enumerable.GroupJoin%2A> 従来のリレーショナル データベース用語では直接相当するものを与えません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-873"><xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms.</span></span> <span data-ttu-id="b2f2d-874">ただし、このメソッドは内部結合と左外部結合のスーパー セットを実装します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-874">However, this method does implement a superset of inner joins and left outer joins.</span></span> <span data-ttu-id="b2f2d-875">グループ化結合では、これらの操作の両方を記述できます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-875">Both of these operations can be written in terms of a grouped join.</span></span> <span data-ttu-id="b2f2d-876">参照してください[結合操作](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-876">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-877"><paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKeySelector" />、<paramref name="innerKeySelector" />、または <paramref name="resultSelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-877"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="b2f2d-878">結合操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-878">Performing Join Operations</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Intersect&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-879">2 つのシーケンスの積集合を生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-879">Produces the set intersection of two sequences.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note-some.md)]

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/dotnet/api/system.linq.enumerable.except"><span data-ttu-id="b2f2d-880">Enumerable.except の各メソッド</span><span class="sxs-lookup"><span data-stu-id="b2f2d-880">Enumerable.Except Method</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Intersect : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Intersect (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-881">入力シーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-881">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="b2f2d-882"><paramref name="second" /> にも含まれる、返される一意の要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-882">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</span></span></param>
        <param name="second"><span data-ttu-id="b2f2d-883">最初のシーケンスにも含まれる、返される一意の要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-883">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span></span></param>
        <summary><span data-ttu-id="b2f2d-884">既定の等値比較子を使用して値を比較することにより、2 つのシーケンスの積集合を生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-884">Produces the set intersection of two sequences by using the default equality comparer to compare values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-885">2 つのシーケンスの積集合を構成する要素が格納されているシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-885">A sequence that contains the elements that form the set intersection of two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-886">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-886">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-887">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-887">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-888">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-888">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-889">A と B の 2 つのセットの積集合は、A、B にも表示されるすべての要素がないその他の要素を含むセットとして定義されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-889">The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</span></span>  
  
 <span data-ttu-id="b2f2d-890">このメソッドによって返されるオブジェクトが列挙されたときに`Intersect`で表示される順序で両方のシーケンスで発生している一意の要素を生成`first`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-890">When the object returned by this method is enumerated, `Intersect` yields distinct elements occurring in both sequences in the order in which they appear in `first`.</span></span>  
  
 <span data-ttu-id="b2f2d-891">既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>型の値を比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-891">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types.</span></span> <span data-ttu-id="b2f2d-892">カスタム データ型を比較するには、オーバーライドする必要があります、<xref:System.Object.Equals%2A>と<xref:System.Object.GetHashCode%2A>メソッド、および必要に応じて実装、<xref:System.IEquatable%601>カスタム型でジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-892">To compare a custom data type, you need to override the <xref:System.Object.Equals%2A> and the <xref:System.Object.GetHashCode%2A> methods, and optionally implement the <xref:System.IEquatable%601> generic interface in the custom type.</span></span> <span data-ttu-id="b2f2d-893">詳細については、<xref:System.Collections.Generic.EqualityComparer%601.Default%2A> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-893">For more information, see the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> property.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-894">次のコード例は、使用する方法を示します`Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)`を整数の 2 つのシーケンスの各表示される要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-894">The following code example demonstrates how to use `Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` to return the elements that appear in each of two sequences of integers.</span></span>  
  
 [!code-csharp-interactive[System.Linq.Enumerable#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#41)]
 [!code-vb[System.Linq.Enumerable#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#41)]  
  
 <span data-ttu-id="b2f2d-895">実装する必要があるいくつかのカスタム データ型のオブジェクトのシーケンスを比較する場合は、<xref:System.IEquatable%601>ヘルパー クラスでジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-895">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in a helper class.</span></span> <span data-ttu-id="b2f2d-896">次のコード例は、カスタム データ型にこのインターフェイスを実装し、オーバーライドする方法を示しています。<xref:System.Object.GetHashCode%2A>と<xref:System.Object.Equals%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-896">The following code example shows how to implement this interface in a custom data type and override <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
 [!code-vb[CSLINQEncapsulatedComparer#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#9)]  

 <span data-ttu-id="b2f2d-897">このインターフェイスを実装した後のシーケンスを使用することができます`ProductA`内のオブジェクト、`Intersect`メソッドを次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-897">After you implement this interface, you can use sequences of `ProductA` objects in the `Intersect` method, as shown in the following example:</span></span>
  
[!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]  
[!code-vb[CSLINQEncapsulatedComparer#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#10)]  

[!code-csharp[CSLINQEncapsulatedComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#3)]
[!code-vb[CSLINQEncapsulatedComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-898"><paramref name="first" /> または <paramref name="second" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-898"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Intersect : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Intersect (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-899">入力シーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-899">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="b2f2d-900"><paramref name="second" /> にも含まれる、返される一意の要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-900">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</span></span></param>
        <param name="second"><span data-ttu-id="b2f2d-901">最初のシーケンスにも含まれる、返される一意の要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-901">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-902">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-902">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="b2f2d-903">指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して値を比較することにより、2 つのシーケンスの積集合を生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-903">Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-904">2 つのシーケンスの積集合を構成する要素が格納されているシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-904">A sequence that contains the elements that form the set intersection of two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-905">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-905">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-906">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-906">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-907">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-907">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-908">A と B の 2 つのセットの積集合は、A、B にも表示されるすべての要素がないその他の要素を含むセットとして定義されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-908">The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</span></span>  
  
 <span data-ttu-id="b2f2d-909">このメソッドによって返されるオブジェクトが列挙されたときに`Intersect`で表示される順序で両方のシーケンスで発生している一意の要素を生成`first`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-909">When the object returned by this method is enumerated, `Intersect` yields distinct elements occurring in both sequences in the order in which they appear in `first`.</span></span>  
  
 <span data-ttu-id="b2f2d-910">場合`comparer`は`null`、既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>値を比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-910">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
## Examples  
 <span data-ttu-id="b2f2d-911">次の例で使用できる等値比較子を実装する方法を示しています、`Intersect`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-911">The following example shows how to implement an equality comparer that can be used in the `Intersect` method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="b2f2d-912">この比較演算子を実装すると後のシーケンスを使用することができます`Product`内のオブジェクト、`Intersect`メソッドを次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-912">After you implement this comparer, you can use sequences of `Product` objects in the `Intersect` method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]
 [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  
[!code-csharp[CSLINQCustomComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#3)]
[!code-vb[CSLINQCustomComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-913"><paramref name="first" /> または <paramref name="second" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-913"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-914">一致するキーに基づいて 2 つのシーケンスの要素を相互に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-914">Correlates the elements of two sequences based on matching keys.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Join(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, TInner, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Join : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="b2f2d-915">最初のシーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-915">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="b2f2d-916">2 番目のシーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-916">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-917">キー セレクター関数によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-917">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-918">結果の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-918">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="b2f2d-919">結合する最初のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-919">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="b2f2d-920">最初のシーケンスに結合するシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-920">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="b2f2d-921">最初のシーケンスの各要素から結合キーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-921">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="b2f2d-922">2 番目のシーケンスの各要素から結合キーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-922">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="b2f2d-923">一致する 2 つの要素から結果の要素を作成する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-923">A function to create a result element from two matching elements.</span></span></param>
        <summary><span data-ttu-id="b2f2d-924">一致するキーに基づいて 2 つのシーケンスの要素を相互に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-924">Correlates the elements of two sequences based on matching keys.</span></span> <span data-ttu-id="b2f2d-925">キーの比較には既定の等値比較子が使用されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-925">The default equality comparer is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-926">2 つのシーケンスに対して内部結合を実行して取得する、<paramref name="TResult" /> 型の要素が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-926">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-927">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-927">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-928">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-928">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-929">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-929">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-930">既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>をハッシュしてキーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-930">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="b2f2d-931">結合は、共通のキーに基づいて情報の 2 つのソースの要素を関連付けるの操作を表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-931">A join refers to the operation of correlating the elements of two sources of information based on a common key.</span></span> <span data-ttu-id="b2f2d-932"><xref:System.Linq.Enumerable.Join%2A> 2 つの情報ソースとする 1 つのメソッドの呼び出しでまとめて一致はキーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-932"><xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call.</span></span> <span data-ttu-id="b2f2d-933">使用してこれに対し`SelectMany`、1 つ以上のメソッド呼び出しと同じ操作を実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-933">This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.</span></span>  
  
 <span data-ttu-id="b2f2d-934"><xref:System.Linq.Enumerable.Join%2A> 要素の順序を保持`outer`との一致する要素の順序、これらの要素の各`inner`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-934"><xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.</span></span>  
  
 <span data-ttu-id="b2f2d-935">クエリ式の構文で、 `join` (Visual C#) または`Join`の呼び出しに変換します (Visual Basic) 句<xref:System.Linq.Enumerable.Join%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-935">In query expression syntax, a `join` (Visual C#) or `Join` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Join%2A>.</span></span>  
  
 <span data-ttu-id="b2f2d-936">リレーショナル データベース用語で、<xref:System.Linq.Enumerable.Join%2A>メソッドは内部等結合を実装します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-936">In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin.</span></span> <span data-ttu-id="b2f2d-937">'内部' は、その他のシーケンスに一致する要素のみが結果に含まれることを意味します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-937">'Inner' means that only elements that have a match in the other sequence are included in the results.</span></span> <span data-ttu-id="b2f2d-938">'等' になっている結合で等しいかどうか比較されるキー。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-938">An 'equijoin' is a join in which the keys are compared for equality.</span></span> <span data-ttu-id="b2f2d-939">左外部結合操作が専用の標準クエリ演算子をことができますを使用して実行を持たない、<xref:System.Linq.Enumerable.GroupJoin%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-939">A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method.</span></span> <span data-ttu-id="b2f2d-940">参照してください[結合操作](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-940">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-941">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29>共通のキーに基づいて 2 つのシーケンスの内部結合を実行します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-941">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29> to perform an inner join of two sequences based on a common key.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#42)]
 [!code-vb[System.Linq.Enumerable#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-942"><paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKeySelector" />、<paramref name="innerKeySelector" />、または <paramref name="resultSelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-942"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="b2f2d-943">結合</span><span class="sxs-lookup"><span data-stu-id="b2f2d-943">Joining</span></span></related>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/join-clause.md"><span data-ttu-id="b2f2d-944">join 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-944">join clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/join-clause.md"><span data-ttu-id="b2f2d-945">Join 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-945">Join Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Join(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, TInner, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Join : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="b2f2d-946">最初のシーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-946">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="b2f2d-947">2 番目のシーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-947">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-948">キー セレクター関数によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-948">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-949">結果の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-949">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="b2f2d-950">結合する最初のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-950">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="b2f2d-951">最初のシーケンスに結合するシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-951">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="b2f2d-952">最初のシーケンスの各要素から結合キーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-952">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="b2f2d-953">2 番目のシーケンスの各要素から結合キーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-953">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="b2f2d-954">一致する 2 つの要素から結果の要素を作成する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-954">A function to create a result element from two matching elements.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-955">キーをハッシュして比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-955">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span></span></param>
        <summary><span data-ttu-id="b2f2d-956">一致するキーに基づいて 2 つのシーケンスの要素を相互に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-956">Correlates the elements of two sequences based on matching keys.</span></span> <span data-ttu-id="b2f2d-957">指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用してキーを比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-957">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-958">2 つのシーケンスに対して内部結合を実行して取得する、<paramref name="TResult" /> 型の要素が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-958">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-959">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-959">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-960">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-960">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-961">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-961">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-962">場合`comparer`は`null`、既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>をハッシュしてキーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-962">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="b2f2d-963">結合は、共通のキーに基づいて情報の 2 つのソースの要素を関連付けるの操作を表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-963">A join refers to the operation of correlating the elements of two sources of information based on a common key.</span></span> <span data-ttu-id="b2f2d-964"><xref:System.Linq.Enumerable.Join%2A> 2 つの情報ソースとする 1 つのメソッドの呼び出しでまとめて一致はキーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-964"><xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call.</span></span> <span data-ttu-id="b2f2d-965">使用してこれに対し`SelectMany`、1 つ以上のメソッド呼び出しと同じ操作を実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-965">This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.</span></span>  
  
 <span data-ttu-id="b2f2d-966"><xref:System.Linq.Enumerable.Join%2A> 要素の順序を保持`outer`との一致する要素の順序、これらの要素の各`inner`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-966"><xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.</span></span>  
  
 <span data-ttu-id="b2f2d-967">リレーショナル データベース用語で、<xref:System.Linq.Enumerable.Join%2A>メソッドは内部等結合を実装します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-967">In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin.</span></span> <span data-ttu-id="b2f2d-968">'内部' は、その他のシーケンスに一致する要素のみが結果に含まれることを意味します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-968">'Inner' means that only elements that have a match in the other sequence are included in the results.</span></span> <span data-ttu-id="b2f2d-969">'等' になっている結合で等しいかどうか比較されるキー。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-969">An 'equijoin' is a join in which the keys are compared for equality.</span></span> <span data-ttu-id="b2f2d-970">左外部結合操作が専用の標準クエリ演算子をことができますを使用して実行を持たない、<xref:System.Linq.Enumerable.GroupJoin%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-970">A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method.</span></span> <span data-ttu-id="b2f2d-971">参照してください[結合操作](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-971">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-972"><paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKeySelector" />、<paramref name="innerKeySelector" />、または <paramref name="resultSelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-972"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="b2f2d-973">結合</span><span class="sxs-lookup"><span data-stu-id="b2f2d-973">Joining</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Last&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-974">シーケンスの最後の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-974">Returns the last element of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Last : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Last source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-975"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-975">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-976">最後の要素を返す <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-976">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-977">シーケンスの最後の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-977">Returns the last element of a sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-978">ソース シーケンスの最後の位置にある値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-978">The value at the last position in the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-979"><xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>場合、メソッドが例外をスロー`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-979">The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements.</span></span> <span data-ttu-id="b2f2d-980">代わりに、ソース シーケンスが空の場合は、既定値を返すを使用して、<xref:System.Linq.Enumerable.LastOrDefault%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-980">To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-981">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>を配列の最後の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-981">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the last element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#43)]
 [!code-vb[System.Linq.Enumerable#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-982"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-982"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-983">ソース シーケンスが空です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-983">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Last : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Last (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-984"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-984">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-985">返される要素が含まれる <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-985">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-986">各要素が条件を満たしているかどうかをテストする関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-986">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="b2f2d-987">指定された条件を満たす、シーケンスの最後の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-987">Returns the last element of a sequence that satisfies a specified condition.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-988">指定された述語関数でテストに合格する、シーケンスの最後の要素。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-988">The last element in the sequence that passes the test in the specified predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-989"><xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>で一致する要素が見つからない場合、メソッドが例外をスロー`source`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-989">The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`.</span></span> <span data-ttu-id="b2f2d-990">一致する要素が見つからない場合は、既定値を返す代わりを使用して、<xref:System.Linq.Enumerable.LastOrDefault%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-990">To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-991">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>を条件を満たす、配列の最後の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-991">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the last element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#44)]
 [!code-vb[System.Linq.Enumerable#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-992"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-992"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-993"><paramref name="predicate" /> の条件を満たす要素はありません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-993">No element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="b2f2d-994">または</span><span class="sxs-lookup"><span data-stu-id="b2f2d-994">-or-</span></span> 
<span data-ttu-id="b2f2d-995">ソース シーケンスが空です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-995">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LastOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-996">シーケンスの最後の要素を返します。要素が見つからない場合は既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-996">Returns the last element of a sequence, or a default value if no element is found.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.LastOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-997"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-997">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-998">最後の要素を返す <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-998">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-999">シーケンスの最後の要素を返します。シーケンスに要素が含まれていない場合は既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-999">Returns the last element of a sequence, or a default value if the sequence contains no elements.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1000">ソース シーケンスが空の場合は <see langword="default" /> (<paramref name="TSource" />)。それ以外の場合は <see cref="T:System.Collections.Generic.IEnumerable`1" /> の最後の要素。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1000"><see langword="default" />(<paramref name="TSource" />) if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1001">参照および null 許容型の既定値は`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1001">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1002"><xref:System.Linq.Enumerable.LastOrDefault%2A>メソッドが既定値を指定する方法を提供していません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1002">The <xref:System.Linq.Enumerable.LastOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="b2f2d-1003">以外の既定値を指定したい場合`default(TSource)`を使用して、<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>メソッドの使用例」で説明します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1003">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1004">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>で空の配列。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1004">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#45)]
 [!code-vb[System.Linq.Enumerable#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#45)]  
  
 <span data-ttu-id="b2f2d-1005">値も`default(TSource)`コレクションに要素が含まれていない場合は、使用する既定値はありません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1005">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="b2f2d-1006">不要な既定値の結果をチェックし、必要に応じてを変更して、代わりに使用することができます、<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>コレクションが空の場合に使用する既定値を指定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1006">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="b2f2d-1007">次に呼び出す<xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>の最後の要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1007">Then, call <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the last element.</span></span> <span data-ttu-id="b2f2d-1008">次のコード例では、両方の手法を使用して、月の日数を数値のコレクションが空の場合は、1 の既定値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1008">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty.</span></span> <span data-ttu-id="b2f2d-1009">整数の既定値は 0 で、月の日に対応していない、ため、既定値必要があります 1 として代わりに指定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1009">Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="b2f2d-1010">クエリの実行が完了した後、不要な既定値の最初の結果変数がチェックされます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1010">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="b2f2d-1011">2 番目の結果の変数を使用して取得されます<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>1 の既定値を指定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1011">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#127](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#127)]
 [!code-vb[System.Linq.Enumerable#127](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#127)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1012"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1012"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.LastOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1013"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1013">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1014">返される要素が含まれる <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1014">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-1015">各要素が条件を満たしているかどうかをテストする関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1015">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1016">条件を満たす、シーケンスの最後の要素を返します。このような要素が見つからない場合は既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1016">Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1017">シーケンスが空の場合、または述語関数でテストに合格する要素がない場合は <see langword="default" /> (<paramref name="TSource" />)。それ以外の場合は、述語関数でテストに合格する最後の要素。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1017"><see langword="default" />(<paramref name="TSource" />) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1018">参照および null 許容型の既定値は`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1018">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1019">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>述語内で渡すことで。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1019">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="b2f2d-1020">メソッドの 2 番目の呼び出しで要素が存在しない条件を満たす、シーケンスにします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1020">In the second call to the method, there is no element in the sequence that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#46)]
 [!code-vb[System.Linq.Enumerable#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1021"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1021"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LongCount&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-1022">シーケンス内の要素数を表す <see cref="T:System.Int64" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1022">Returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IEnumerable(Of TSource)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LongCount : seq&lt;'Source&gt; -&gt; int64" Usage="System.Linq.Enumerable.LongCount source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1023"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1023">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1024">カウントする要素が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1024">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1025">シーケンス内の要素の合計数を表す <see cref="T:System.Int64" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1025">Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1026">ソース シーケンスの要素数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1026">The number of elements in the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1027">このメソッドを使用して、なく<xref:System.Linq.Enumerable.Count%2A>よりも大きい値を指定する結果が予期したタイミング<xref:System.Int32.MaxValue>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1027">Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="b2f2d-1028">Visual Basic のクエリ式の構文、`Aggregate Into LongCount()`の呼び出しに変換句<xref:System.Linq.Enumerable.LongCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1028">In Visual Basic query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1029">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>配列の要素をカウントします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1029">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#47)]
 [!code-vb[System.Linq.Enumerable#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1030"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1030"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-1031">要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1031">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1032">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1032">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LongCount : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; int64" Usage="System.Linq.Enumerable.LongCount (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1033"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1033">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1034">カウントする要素が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1034">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-1035">各要素が条件を満たしているかどうかをテストする関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1035">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1036">シーケンス内で条件を満たす要素の数を表す <see cref="T:System.Int64" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1036">Returns an <see cref="T:System.Int64" /> that represents how many elements in a sequence satisfy a condition.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1037">述語関数の条件を満たす、シーケンス内の要素数を表す数値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1037">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1038">このメソッドを使用して、なく<xref:System.Linq.Enumerable.Count%2A>よりも大きい値を指定する結果が予期したタイミング<xref:System.Int32.MaxValue>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1038">Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="b2f2d-1039">Visual Basic のクエリ式の構文、`Aggregate Into LongCount()`の呼び出しに変換句<xref:System.Linq.Enumerable.LongCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1039">In Visual Basic query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1040">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>条件を満たす配列内の要素をカウントします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1040">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#48)]
 [!code-vb[System.Linq.Enumerable#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1041"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1041"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-1042">一致する要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1042">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1043">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1043">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Max">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-1044">値のシーケンスの最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1044">Returns the maximum value in a sequence of values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static decimal Max (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Max(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1045">最大値を確認する対象となる <see cref="T:System.Decimal" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1045">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1046"><see cref="T:System.Decimal" /> 値のシーケンスの最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1046">Returns the maximum value in a sequence of <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1047">シーケンスの最大値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1047">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1048"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29>メソッドは、<xref:System.Decimal>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1048">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1049">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1049">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1050">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>シーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1050">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1051"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1051"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1052"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1052"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1053">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1053">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static double Max (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Max(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1054">最大値を確認する対象となる <see cref="T:System.Double" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1054">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1055"><see cref="T:System.Double" /> 値のシーケンスの最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1055">Returns the maximum value in a sequence of <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1056">シーケンスの最大値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1056">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1057"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>メソッドは、<xref:System.Double>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1057">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1058">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1058">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1059">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>シーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1059">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1060"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1060"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1061"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1061"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1062">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1062">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static int Max (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Max(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1063">最大値を確認する対象となる <see cref="T:System.Int32" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1063">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1064"><see cref="T:System.Int32" /> 値のシーケンスの最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1064">Returns the maximum value in a sequence of <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1065">シーケンスの最大値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1065">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1066"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>メソッドは、<xref:System.Int32>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1066">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1067">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1067">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1068">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>シーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1068">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1069"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1069"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1070"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1070"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1071">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1071">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static long Max (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Max(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1072">最大値を確認する対象となる <see cref="T:System.Int64" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1072">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1073"><see cref="T:System.Int64" /> 値のシーケンスの最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1073">Returns the maximum value in a sequence of <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1074">シーケンスの最大値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1074">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1075"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>メソッドは、<xref:System.Int64>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1075">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1076">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1076">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1077">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>シーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1077">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1078"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1078"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1079"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1079"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1080">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1080">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1081">最大値を確認する対象となる null 許容の <see cref="T:System.Decimal" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1081">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1082">null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1082">Returns the maximum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1083">シーケンスの最大値に対応する <c>Nullable&lt;Decimal&gt;</c> 型 (C# の場合) または <c>Nullable(Of Decimal)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1083">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1084"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29>メソッドは、<xref:System.Decimal>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1084">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1085">ソース シーケンスが空かは値のみを含むかどうか`null`、この関数を返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1085">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1086">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1086">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1087">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>シーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1087">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1088"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1088"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1089">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1089">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1090">最大値を確認する対象となる null 許容の <see cref="T:System.Double" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1090">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1091">null 許容の <see cref="T:System.Double" /> 値のシーケンスの最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1091">Returns the maximum value in a sequence of nullable <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1092">シーケンスの最大値に対応する <c>Nullable&lt;Double&gt;</c> 型 (C# の場合) または <c>Nullable(Of Double)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1092">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1093"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>メソッドは、<xref:System.Double>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1093">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1094">ソース シーケンスが空かは値のみを含むかどうか`null`、この関数を返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1094">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1095">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1095">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1096">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>シーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1096">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1097"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1097"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1098">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1098">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1099">最大値を確認する対象となる null 許容の <see cref="T:System.Int32" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1099">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1100">null 許容の <see cref="T:System.Int32" /> 値のシーケンスの最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1100">Returns the maximum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1101">シーケンスの最大値に対応する <c>Nullable&lt;Int32&gt;</c> 型 (C# の場合) または <c>Nullable(Of Int32)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1101">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1102"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>メソッドは、<xref:System.Int32>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1102">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1103">ソース シーケンスが空かは値のみを含むかどうか`null`、この関数を返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1103">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1104">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1104">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1105">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>シーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1105">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1106"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1106"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1107">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1107">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1108">最大値を確認する対象となる null 許容の <see cref="T:System.Int64" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1108">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1109">null 許容の <see cref="T:System.Int64" /> 値のシーケンスの最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1109">Returns the maximum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1110">シーケンスの最大値に対応する <c>Nullable&lt;Int64&gt;</c> 型 (C# の場合) または <c>Nullable(Of Int64)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1110">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1111"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>メソッドは、<xref:System.Int64>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1111">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1112">ソース シーケンスが空かは値のみを含むかどうか`null`、この関数を返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1112">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1113">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1113">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1114">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>シーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1114">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1115"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1115"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1116">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1116">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1117">最大値を確認する対象となる null 許容の <see cref="T:System.Single" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1117">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1118">null 許容の <see cref="T:System.Single" /> 値のシーケンスの最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1118">Returns the maximum value in a sequence of nullable <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1119">シーケンスの最大値に対応する <c>Nullable&lt;Single&gt;</c> 型 (C# の場合) または <c>Nullable(Of Single)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1119">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1120"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>メソッドは、<xref:System.Single>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1120">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1121">ソース シーケンスが空かは値のみを含むかどうか`null`、この関数を返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1121">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1122">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1122">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1123">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>シーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1123">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1124"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1124"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1125">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1125">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Max(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1126">最大値を確認する対象となる <see cref="T:System.Single" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1126">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1127"><see cref="T:System.Single" /> 値のシーケンスの最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1127">Returns the maximum value in a sequence of <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1128">シーケンスの最大値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1128">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1129"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>メソッドは、<xref:System.Single>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1129">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1130">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1130">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1131">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>シーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1131">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1132"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1132"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1133"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1133"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1134">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1134">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1135"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1135">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1136">最大値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1136">A sequence of values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1137">ジェネリック シーケンスの最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1137">Returns the maximum value in a generic sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1138">シーケンスの最大値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1138">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1139">場合型`TSource`実装<xref:System.IComparable%601>、<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>メソッドでは、その実装を使用して、値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1139">If type `TSource` implements <xref:System.IComparable%601>, the <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method uses that implementation to compare values.</span></span> <span data-ttu-id="b2f2d-1140">場合は、型`TSource`実装<xref:System.IComparable>、その実装を使用して値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1140">Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1141">場合`TSource`は参照型であり、ソース シーケンスが空であるかは値のみが含まれます`null`、このメソッドが戻る`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1141">If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this method returns `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1142">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1142">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1143">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>のシーケンスの最大値を決定する<xref:System.IComparable%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1143">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the maximum value in a sequence of <xref:System.IComparable%601> objects.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#57](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#57)]
 [!code-vb[System.Linq.Enumerable#57](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1144"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1144"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1145">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1145">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1146"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1146">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1147">最大値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1147">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1148">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1148">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1149">シーケンスの各要素に対して変換関数を呼び出し、<see cref="T:System.Decimal" /> の最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1149">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1150">シーケンスの最大値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1150">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1151"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29>メソッドは、<xref:System.Decimal>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1151">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1152">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Decimal>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1152">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="b2f2d-1153">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1153">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1154">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1154">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1155"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1155"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1156"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1156"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1157">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1157">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1158"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1158">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1159">最大値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1159">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1160">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1160">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1161">シーケンスの各要素に対して変換関数を呼び出し、<see cref="T:System.Double" /> の最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1161">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1162">シーケンスの最大値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1162">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1163"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>メソッドは、<xref:System.Double>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1163">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1164">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Double>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1164">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="b2f2d-1165">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1165">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1166">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1166">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1167"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1167"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1168"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1168"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1169">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1169">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1170"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1170">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1171">最大値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1171">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1172">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1172">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1173">シーケンスの各要素に対して変換関数を呼び出し、<see cref="T:System.Int32" /> の最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1173">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1174">シーケンスの最大値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1174">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1175"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>メソッドは、<xref:System.Int32>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1175">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1176">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Int32>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1176">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="b2f2d-1177">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1177">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1178">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1178">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1179"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1179"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1180"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1180"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1181">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1181">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1182"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1182">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1183">最大値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1183">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1184">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1184">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1185">シーケンスの各要素に対して変換関数を呼び出し、<see cref="T:System.Int64" /> の最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1185">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1186">シーケンスの最大値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1186">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1187"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>メソッドは、<xref:System.Int64>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1187">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1188">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Int64>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1188">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="b2f2d-1189">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1189">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1190">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1190">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1191"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1191"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1192"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1192"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1193">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1193">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1194"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1194">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1195">最大値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1195">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1196">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1196">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1197">シーケンスの各要素に対して変換関数を呼び出し、null 許容の <see cref="T:System.Decimal" /> の最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1197">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1198">シーケンスの最大値に対応する <c>Nullable&lt;Decimal&gt;</c> 型 (C# の場合) または <c>Nullable(Of Decimal)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1198">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1199"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29>メソッドは、<xref:System.Decimal>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1199">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1200">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`に数値型では、具体的には`Nullable<Decimal>`(C#) または`Nullable(Of Decimal)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1200">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1201">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1201">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1202">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1202">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1203"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1203"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1204">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1204">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1205"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1205">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1206">最大値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1206">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1207">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1207">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1208">シーケンスの各要素に対して変換関数を呼び出し、null 許容の <see cref="T:System.Double" /> の最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1208">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1209">シーケンスの最大値に対応する <c>Nullable&lt;Double&gt;</c> 型 (C# の場合) または <c>Nullable(Of Double)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1209">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1210"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29>メソッドは、<xref:System.Double>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1210">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1211">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`に数値型では、具体的には`Nullable<Double>`(C#) または`Nullable(Of Double)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1211">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1212">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1212">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1213">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1213">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1214"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1214"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1215">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1215">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1216"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1216">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1217">最大値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1217">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1218">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1218">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1219">シーケンスの各要素に対して変換関数を呼び出し、null 許容の <see cref="T:System.Int32" /> の最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1219">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1220">シーケンスの最大値に対応する <c>Nullable&lt;Int32&gt;</c> 型 (C# の場合) または <c>Nullable(Of Int32)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1220">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1221"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29>メソッドは、<xref:System.Int32>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1221">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1222">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`に数値型では、具体的には`Nullable<Int32>`(C#) または`Nullable(Of Int32)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1222">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1223">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1223">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1224">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1224">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1225"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1225"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1226">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1226">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1227"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1227">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1228">最大値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1228">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1229">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1229">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1230">シーケンスの各要素に対して変換関数を呼び出し、null 許容の <see cref="T:System.Int64" /> の最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1230">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1231">シーケンスの最大値に対応する <c>Nullable&lt;Int64&gt;</c> 型 (C# の場合) または <c>Nullable(Of Int64)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1231">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1232"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29>メソッドは、<xref:System.Int64>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1232">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1233">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`に数値型では、具体的には`Nullable<Int64>`(C#) または`Nullable(Of Int64)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1233">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1234">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1234">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1235">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1235">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1236"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1236"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1237">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1237">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1238"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1238">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1239">最大値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1239">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1240">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1240">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1241">シーケンスの各要素に対して変換関数を呼び出し、null 許容の <see cref="T:System.Single" /> の最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1241">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1242">シーケンスの最大値に対応する <c>Nullable&lt;Single&gt;</c> 型 (C# の場合) または <c>Nullable(Of Single)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1242">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1243"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29>メソッドは、<xref:System.Single>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1243">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1244">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`に数値型では、具体的には`Nullable<Single>`(C#) または`Nullable(Of Single)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1244">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1245">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1245">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1246">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1246">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1247"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1247"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1248">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1248">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1249"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1249">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1250">最大値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1250">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1251">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1251">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1252">シーケンスの各要素に対して変換関数を呼び出し、<see cref="T:System.Single" /> の最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1252">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1253">シーケンスの最大値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1253">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1254"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29>メソッドは、<xref:System.Single>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1254">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1255">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Single>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1255">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="b2f2d-1256">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1256">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1257">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1257">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1258"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1258"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1259"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1259"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1260">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1260">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Max&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Max&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1261"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1261">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-1262"><paramref name="selector" /> によって返される値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1262">The type of the value returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1263">最大値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1263">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1264">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1264">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1265">ジェネリック シーケンスの各要素に対して変換関数を呼び出し、結果の最大値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1265">Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1266">シーケンスの最大値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1266">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1267">場合型`TResult`実装<xref:System.IComparable%601>、このメソッドでは、その実装を使用して、値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1267">If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="b2f2d-1268">場合は、型`TResult`実装<xref:System.IComparable>、その実装を使用して値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1268">Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1269">Visual Basic のクエリ式の構文、`Aggregate Into Max()`の呼び出しに変換句<xref:System.Linq.Enumerable.Max%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1269">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1270">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1270">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1271"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1271"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1272">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1272">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Min">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-1273">値のシーケンスの最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1273">Returns the minimum value in a sequence of values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static decimal Min (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Min(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1274">最小値を確認する対象となる <see cref="T:System.Decimal" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1274">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1275"><see cref="T:System.Decimal" /> 値のシーケンスの最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1275">Returns the minimum value in a sequence of <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1276">シーケンスの最小値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1276">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1277"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29>メソッドは、<xref:System.Decimal>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1277">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1278">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1278">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1279">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>シーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1279">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1280"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1280"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1281"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1281"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1282">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1282">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static double Min (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Min(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1283">最小値を確認する対象となる <see cref="T:System.Double" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1283">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1284"><see cref="T:System.Double" /> 値のシーケンスの最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1284">Returns the minimum value in a sequence of <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1285">シーケンスの最小値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1285">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1286"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>メソッドは、<xref:System.Double>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1286">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1287">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1287">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1288">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>シーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1288">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1289"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1289"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1290"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1290"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1291">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1291">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static int Min (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Min(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1292">最小値を確認する対象となる <see cref="T:System.Int32" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1292">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1293"><see cref="T:System.Int32" /> 値のシーケンスの最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1293">Returns the minimum value in a sequence of <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1294">シーケンスの最小値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1294">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1295"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>メソッドは、<xref:System.Int32>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1295">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1296">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1296">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1297">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>シーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1297">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1298"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1298"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1299"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1299"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1300">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1300">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static long Min (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Min(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1301">最小値を確認する対象となる <see cref="T:System.Int64" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1301">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1302"><see cref="T:System.Int64" /> 値のシーケンスの最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1302">Returns the minimum value in a sequence of <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1303">シーケンスの最小値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1303">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1304"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>メソッドは、<xref:System.Int64>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1304">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1305">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1305">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1306">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>シーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1306">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1307"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1307"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1308"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1308"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1309">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1309">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1310">最小値を確認する対象となる null 許容の <see cref="T:System.Decimal" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1310">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1311">null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1311">Returns the minimum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1312">シーケンスの最小値に対応する <c>Nullable&lt;Decimal&gt;</c> 型 (C# の場合) または <c>Nullable(Of Decimal)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1312">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1313"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29>メソッドは、<xref:System.Decimal>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1313">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1314">ソース シーケンスが空かは値のみを含むかどうか`null`、この関数を返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1314">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1315">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1315">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1316">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>シーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1316">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1317"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1317"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1318">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1318">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1319">最小値を確認する対象となる null 許容の <see cref="T:System.Double" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1319">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1320">null 許容の <see cref="T:System.Double" /> 値のシーケンスの最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1320">Returns the minimum value in a sequence of nullable <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1321">シーケンスの最小値に対応する <c>Nullable&lt;Double&gt;</c> 型 (C# の場合) または <c>Nullable(Of Double)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1321">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1322"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>メソッドは、<xref:System.Double>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1322">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1323">ソース シーケンスが空かは値のみを含むかどうか`null`、この関数を返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1323">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1324">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1324">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1325">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>シーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1325">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1326"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1326"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1327">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1327">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1328">最小値を確認する対象となる null 許容の <see cref="T:System.Int32" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1328">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1329">null 許容の <see cref="T:System.Int32" /> 値のシーケンスの最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1329">Returns the minimum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1330">シーケンスの最小値に対応する <c>Nullable&lt;Int32&gt;</c> 型 (C# の場合) または <c>Nullable(Of Int32)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1330">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1331"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>メソッドは、<xref:System.Int32>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1331">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1332">ソース シーケンスが空かは値のみを含むかどうか`null`、この関数を返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1332">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1333">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1333">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1334">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>シーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1334">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1335"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1335"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1336">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1336">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1337">最小値を確認する対象となる null 許容の <see cref="T:System.Int64" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1337">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1338">null 許容の <see cref="T:System.Int64" /> 値のシーケンスの最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1338">Returns the minimum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1339">シーケンスの最小値に対応する <c>Nullable&lt;Int64&gt;</c> 型 (C# の場合) または <c>Nullable(Of Int64)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1339">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1340"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>メソッドは、<xref:System.Int64>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1340">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1341">ソース シーケンスが空かは値のみを含むかどうか`null`、この関数を返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1341">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1342">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1342">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1343">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>シーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1343">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1344"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1344"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1345">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1345">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1346">最小値を確認する対象となる null 許容の <see cref="T:System.Single" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1346">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1347">null 許容の <see cref="T:System.Single" /> 値のシーケンスの最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1347">Returns the minimum value in a sequence of nullable <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1348">シーケンスの最小値に対応する <c>Nullable&lt;Single&gt;</c> 型 (C# の場合) または <c>Nullable(Of Single)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1348">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1349"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>メソッドは、<xref:System.Single>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1349">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1350">ソース シーケンスが空かは値のみを含むかどうか`null`、この関数を返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1350">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1351">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1351">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1352">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>シーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1352">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1353"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1353"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1354">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1354">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Min(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1355">最小値を確認する対象となる <see cref="T:System.Single" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1355">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1356"><see cref="T:System.Single" /> 値のシーケンスの最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1356">Returns the minimum value in a sequence of <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1357">シーケンスの最小値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1357">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1358"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>メソッドは、<xref:System.Single>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1358">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1359">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1359">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1360">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>シーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1360">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1361"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1361"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1362"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1362"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1363">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1363">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1364"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1364">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1365">最小値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1365">A sequence of values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1366">ジェネリック シーケンスの最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1366">Returns the minimum value in a generic sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1367">シーケンスの最小値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1367">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1368">場合型`TSource`実装<xref:System.IComparable%601>、このメソッドでは、その実装を使用して、値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1368">If type `TSource` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="b2f2d-1369">場合は、型`TSource`実装<xref:System.IComparable>、その実装を使用して値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1369">Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1370">場合`TSource`は参照型であり、ソース シーケンスが空であるかは値のみが含まれます`null`、この関数を返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1370">If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1371">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1371">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1372">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>のシーケンスの最小値を決定する<xref:System.IComparable%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1372">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the minimum value in a sequence of <xref:System.IComparable%601> objects.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#67](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#67)]
 [!code-vb[System.Linq.Enumerable#67](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1373"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1373"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1374">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1374">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1375"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1375">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1376">最小値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1376">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1377">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1377">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1378">シーケンスの各要素に対して変換関数を呼び出し、<see cref="T:System.Decimal" /> の最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1378">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1379">シーケンスの最小値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1379">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1380"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29>メソッドは、<xref:System.Decimal>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1380">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1381">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Decimal>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1381">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="b2f2d-1382">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1382">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1383">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1383">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1384"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1384"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1385"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1385"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1386">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1386">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1387"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1387">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1388">最小値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1388">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1389">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1389">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1390">シーケンスの各要素に対して変換関数を呼び出し、<see cref="T:System.Double" /> の最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1390">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1391">シーケンスの最小値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1391">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1392"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>メソッドは、<xref:System.Double>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1392">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1393">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Double>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1393">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="b2f2d-1394">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1394">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1395">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1395">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1396"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1396"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1397"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1397"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1398">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1398">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1399"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1399">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1400">最小値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1400">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1401">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1401">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1402">シーケンスの各要素に対して変換関数を呼び出し、<see cref="T:System.Int32" /> の最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1402">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1403">シーケンスの最小値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1403">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1404"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>メソッドは、<xref:System.Int32>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1404">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1405">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Int32>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1405">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="b2f2d-1406">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1406">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1407">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1407">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1408"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1408"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1409"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1409"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1410">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1410">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1411"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1411">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1412">最小値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1412">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1413">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1413">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1414">シーケンスの各要素に対して変換関数を呼び出し、<see cref="T:System.Int64" /> の最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1414">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1415">シーケンスの最小値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1415">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1416"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>メソッドは、<xref:System.Int64>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1416">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1417">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Int64>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1417">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="b2f2d-1418">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1418">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1419">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1419">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1420"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1420"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1421"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1421"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1422">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1422">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1423"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1423">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1424">最小値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1424">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1425">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1425">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1426">シーケンスの各要素に対して変換関数を呼び出し、null 許容の <see cref="T:System.Decimal" /> の最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1426">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1427">シーケンスの最小値に対応する <c>Nullable&lt;Decimal&gt;</c> 型 (C# の場合) または <c>Nullable(Of Decimal)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1427">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1428"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29>メソッドは、<xref:System.Decimal>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1428">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1429">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`に数値型では、具体的には`Nullable<Decimal>`(C#) または`Nullable(Of Decimal)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1429">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1430">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1430">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1431">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1431">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1432"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1432"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1433">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1433">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1434"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1434">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1435">最小値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1435">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1436">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1436">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1437">シーケンスの各要素に対して変換関数を呼び出し、null 許容の <see cref="T:System.Double" /> の最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1437">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1438">シーケンスの最小値に対応する <c>Nullable&lt;Double&gt;</c> 型 (C# の場合) または <c>Nullable(Of Double)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1438">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1439"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29>メソッドは、<xref:System.Double>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1439">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1440">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`に数値型では、具体的には`Nullable<Double>`(C#) または`Nullable(Of Double)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1440">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1441">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1441">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1442">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1442">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1443"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1443"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1444">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1444">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1445"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1445">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1446">最小値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1446">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1447">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1447">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1448">シーケンスの各要素に対して変換関数を呼び出し、null 許容の <see cref="T:System.Int32" /> の最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1448">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1449">シーケンスの最小値に対応する <c>Nullable&lt;Int32&gt;</c> 型 (C# の場合) または <c>Nullable(Of Int32)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1449">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1450"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29>メソッドは、<xref:System.Int32>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1450">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1451">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`、具体的には、数値型にソースのメンバーを射影する`Nullable<Int32>`(C#) または`Nullable(Of Int32)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1451">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of source into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1452">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1452">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1453">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1453">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1454"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1454"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1455">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1455">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1456"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1456">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1457">最小値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1457">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1458">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1458">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1459">シーケンスの各要素に対して変換関数を呼び出し、null 許容の <see cref="T:System.Int64" /> の最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1459">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1460">シーケンスの最小値に対応する <c>Nullable&lt;Int64&gt;</c> 型 (C# の場合) または <c>Nullable(Of Int64)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1460">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1461"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29>メソッドは、<xref:System.Int64>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1461">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1462">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`に数値型では、具体的には`Nullable<Int64>`(C#) または`Nullable(Of Int64)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1462">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1463">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1463">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1464">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1464">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1465"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1465"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1466">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1466">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1467"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1467">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1468">最小値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1468">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1469">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1469">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1470">シーケンスの各要素に対して変換関数を呼び出し、null 許容の <see cref="T:System.Single" /> の最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1470">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1471">シーケンスの最小値に対応する <c>Nullable&lt;Single&gt;</c> 型 (C# の場合) または <c>Nullable(Of Single)</c> 型 (Visual Basic の場合) の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1471">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1472"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29>メソッドは、<xref:System.Single>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1472">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1473">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`に数値型では、具体的には`Nullable<Single>`(C#) または`Nullable(Of Single)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1473">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1474">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1474">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1475">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1475">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1476"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1476"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1477">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1477">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1478"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1478">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1479">最小値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1479">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1480">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1480">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1481">シーケンスの各要素に対して変換関数を呼び出し、<see cref="T:System.Single" /> の最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1481">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1482">シーケンスの最小値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1482">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1483"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29>メソッドは、<xref:System.Single>の実装<xref:System.IComparable%601>値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1483">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1484">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Single>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1484">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="b2f2d-1485">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1485">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1486">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1486">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1487"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1487"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1488"><paramref name="source" /> に要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1488"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1489">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1489">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Min&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Min&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1490"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1490">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-1491"><paramref name="selector" /> によって返される値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1491">The type of the value returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1492">最小値を確認する対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1492">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1493">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1493">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1494">ジェネリック シーケンスの各要素に対して変換関数を呼び出し、結果の最小値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1494">Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1495">シーケンスの最小値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1495">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1496">場合型`TResult`実装<xref:System.IComparable%601>、このメソッドでは、その実装を使用して、値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1496">If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="b2f2d-1497">場合は、型`TResult`実装<xref:System.IComparable>、その実装を使用して値を比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1497">Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-1498">Visual Basic のクエリ式の構文、`Aggregate Into Min()`の呼び出しに変換句<xref:System.Linq.Enumerable.Min%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1498">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1499">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>射影された値のシーケンスの最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1499">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1500"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1500"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1501">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1501">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; OfType&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OfType(Of TResult) (source As IEnumerable) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ OfType(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member OfType : System.Collections.IEnumerable -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.OfType source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-1502">シーケンスの要素をフィルター処理する型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1502">The type to filter the elements of the sequence on.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1503">フィルター処理する要素を含む <see cref="T:System.Collections.IEnumerable" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1503">The <see cref="T:System.Collections.IEnumerable" /> whose elements to filter.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1504">指定された型に基づいて <see cref="T:System.Collections.IEnumerable" /> の要素をフィルター処理します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1504">Filters the elements of an <see cref="T:System.Collections.IEnumerable" /> based on a specified type.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1505"><paramref name="TResult" /> 型の入力シーケンスの要素を格納する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1505">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence of type <paramref name="TResult" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1506">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1506">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1507">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1507">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1508">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1508">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1509"><xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29>メソッド内の要素のみを返します`source`型にキャストできる`TResult`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1509">The <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29> method returns only those elements in `source` that can be cast to type `TResult`.</span></span> <span data-ttu-id="b2f2d-1510">代わりに、要素を型にキャストできない場合に例外を発生させる`TResult`を使用して、<xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1510">To instead receive an exception if an element cannot be cast to type `TResult`, use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span>  
  
 <span data-ttu-id="b2f2d-1511">このメソッドは、パラメーター化されていない型をなどが含まれるコレクションに適用できるいくつかの標準クエリ演算子メソッドの 1 つ、<xref:System.Collections.ArrayList>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1511">This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <xref:System.Collections.ArrayList>.</span></span> <span data-ttu-id="b2f2d-1512">これは、ため<xref:System.Linq.Enumerable.OfType%2A>型を拡張<xref:System.Collections.IEnumerable>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1512">This is because <xref:System.Linq.Enumerable.OfType%2A> extends the type <xref:System.Collections.IEnumerable>.</span></span> <span data-ttu-id="b2f2d-1513"><xref:System.Linq.Enumerable.OfType%2A> 基づいているコレクションにのみ適用することはできません、パラメーター化されたで<xref:System.Collections.Generic.IEnumerable%601>には、パラメーター化されていないに基づくコレクション型を<xref:System.Collections.IEnumerable>も入力します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1513"><xref:System.Linq.Enumerable.OfType%2A> cannot only be applied to collections that are based on the parameterized <xref:System.Collections.Generic.IEnumerable%601> type, but collections that are based on the non-parameterized <xref:System.Collections.IEnumerable> type also.</span></span>  
  
 <span data-ttu-id="b2f2d-1514">適用することで<xref:System.Linq.Enumerable.OfType%2A>を実装するコレクションに<xref:System.Collections.IEnumerable>、する標準クエリ演算子を使用してコレクションをクエリすることができます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1514">By applying <xref:System.Linq.Enumerable.OfType%2A> to a collection that implements <xref:System.Collections.IEnumerable>, you gain the ability to query the collection by using the standard query operators.</span></span> <span data-ttu-id="b2f2d-1515">などの型引数を指定する<xref:System.Object>に<xref:System.Linq.Enumerable.OfType%2A>型のオブジェクトが返されます`IEnumerable<Object>`(C#) または`IEnumerable(Of Object)`Visual basic で標準クエリ演算子を適用できます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1515">For example, specifying a type argument of <xref:System.Object> to <xref:System.Linq.Enumerable.OfType%2A> would return an object of type `IEnumerable<Object>` in C# or `IEnumerable(Of Object)` in Visual Basic, to which the standard query operators can be applied.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1516">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.OfType%2A>の要素をフィルター処理する、<xref:System.Collections.IEnumerable>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1516">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OfType%2A> to filter the elements of an <xref:System.Collections.IEnumerable>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#69](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#69)]
 [!code-vb[System.Linq.Enumerable#69](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1517"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1517"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-1518">シーケンスの要素を昇順に並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1518">Sorts the elements of a sequence in ascending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1519"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1519">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-1520"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1520">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1521">順序付ける値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1521">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-1522">要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1522">A function to extract a key from an element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1523">シーケンスの要素をキーに従って昇順に並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1523">Sorts the elements of a sequence in ascending order according to a key.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1524">要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1524">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1525">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1525">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1526">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1526">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1527">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1527">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1528">を、要素自体の値によって、シーケンスを順序付けるに identity 関数を指定します (`x => x` Visual C# または`Function(x) x`Visual basic) の`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1528">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="b2f2d-1529">型を拡張する 2 つのメソッドが定義されている<xref:System.Linq.IOrderedEnumerable%601>、これは、このメソッドの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1529">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="b2f2d-1530">これら 2 つの方法では、namely`ThenBy`と`ThenByDescending`シーケンスを並べ替えるには、追加の並べ替え条件を指定できます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1530">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="b2f2d-1531">`ThenBy` `ThenByDescending`を返すことも、 <xref:System.Linq.IOrderedEnumerable%601>、つまり、任意の数を連続して呼び出すの`ThenBy`または`ThenByDescending`行んだことができます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1531">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-1532"><xref:System.Linq.IOrderedEnumerable%601>継承<xref:System.Collections.Generic.IEnumerable%601>、呼び出すことができます<xref:System.Linq.Enumerable.OrderBy%2A>または<xref:System.Linq.Enumerable.OrderByDescending%2A>への呼び出しの結果に<xref:System.Linq.Enumerable.OrderBy%2A>、 <xref:System.Linq.Enumerable.OrderByDescending%2A>、<xref:System.Linq.Enumerable.ThenBy%2A>または<xref:System.Linq.Enumerable.ThenByDescending%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1532">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="b2f2d-1533">これを行うには、新しいプライマリ順序を以前に確立された順序を無視するが導入されています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1533">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="b2f2d-1534">このメソッドは、既定の比較子を使用してキーを比較<xref:System.Collections.Generic.Comparer%601.Default%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1534">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="b2f2d-1535">このメソッドは、安定した並べ替え; を実行します。つまり、2 つの要素のキーが等しい場合は、要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1535">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="b2f2d-1536">これに対し、不安定な並べ替えは、同じキーを持つ要素の順序は保持されません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1536">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="b2f2d-1537">クエリ式の構文で、 `orderby` (Visual C#) または`Order By`の呼び出しに変換します (Visual Basic) 句<xref:System.Linq.Enumerable.OrderBy%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1537">In query expression syntax, an `orderby` (Visual C#) or `Order By` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1538">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>シーケンスの要素を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1538">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to sort the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#70](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#70)]
 [!code-vb[System.Linq.Enumerable#70](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1539"><paramref name="source" /> または <paramref name="keySelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1539"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        <related type="Article" href="~/docs/csharp/language-reference/keywords/orderby-clause.md"><span data-ttu-id="b2f2d-1540">orderby 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1540">orderby clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/order-by-clause.md"><span data-ttu-id="b2f2d-1541">Order By 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1541">Order By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1542"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1542">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-1543"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1543">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1544">順序付ける値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1544">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-1545">要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1545">A function to extract a key from an element.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-1546">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1546">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1547">指定された比較子を使用してシーケンスの要素を昇順に並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1547">Sorts the elements of a sequence in ascending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1548">要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1548">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1549">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1549">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1550">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1550">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1551">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1551">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1552">を、要素自体の値によって、シーケンスを順序付けるに identity 関数を指定します (`x => x` Visual C# または`Function(x) x`Visual basic) の`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1552">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="b2f2d-1553">型を拡張する 2 つのメソッドが定義されている<xref:System.Linq.IOrderedEnumerable%601>、これは、このメソッドの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1553">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="b2f2d-1554">これら 2 つの方法では、namely`ThenBy`と`ThenByDescending`シーケンスを並べ替えるには、追加の並べ替え条件を指定できます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1554">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="b2f2d-1555">`ThenBy` `ThenByDescending`を返すことも、 <xref:System.Linq.IOrderedEnumerable%601>、つまり、任意の数を連続して呼び出すの`ThenBy`または`ThenByDescending`行んだことができます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1555">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-1556"><xref:System.Linq.IOrderedEnumerable%601>継承<xref:System.Collections.Generic.IEnumerable%601>、呼び出すことができます<xref:System.Linq.Enumerable.OrderBy%2A>または<xref:System.Linq.Enumerable.OrderByDescending%2A>への呼び出しの結果に<xref:System.Linq.Enumerable.OrderBy%2A>、 <xref:System.Linq.Enumerable.OrderByDescending%2A>、<xref:System.Linq.Enumerable.ThenBy%2A>または<xref:System.Linq.Enumerable.ThenByDescending%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1556">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="b2f2d-1557">これを行うには、新しいプライマリ順序を以前に確立された順序を無視するが導入されています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1557">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="b2f2d-1558">場合`comparer`は`null`、既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A>キーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1558">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="b2f2d-1559">このメソッドは、安定した並べ替え; を実行します。つまり、2 つの要素のキーが等しい場合は、要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1559">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="b2f2d-1560">これに対し、不安定な並べ替えは、同じキーを持つ要素の順序は保持されません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1560">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1561"><paramref name="source" /> または <paramref name="keySelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1561"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-1562">シーケンスの要素を降順に並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1562">Sorts the elements of a sequence in descending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByDescending(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1563"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1563">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-1564"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1564">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1565">順序付ける値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1565">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-1566">要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1566">A function to extract a key from an element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1567">シーケンスの要素をキーに従って降順に並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1567">Sorts the elements of a sequence in descending order according to a key.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1568">要素がキーに従って降順に並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1568">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1569">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1569">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1570">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1570">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1571">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1571">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1572">を、要素自体の値によって、シーケンスを順序付けるに identity 関数を指定します (`x => x` Visual C# または`Function(x) x`Visual basic) の`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1572">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="b2f2d-1573">このメソッドの例は、次を参照してください。<xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1573">For an example of this method, see <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>.</span></span>  
  
 <span data-ttu-id="b2f2d-1574">型を拡張する 2 つのメソッドが定義されている<xref:System.Linq.IOrderedEnumerable%601>、これは、このメソッドの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1574">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="b2f2d-1575">これら 2 つの方法では、namely`ThenBy`と`ThenByDescending`シーケンスを並べ替えるには、追加の並べ替え条件を指定できます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1575">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="b2f2d-1576">`ThenBy` `ThenByDescending`を返すことも、 <xref:System.Linq.IOrderedEnumerable%601>、つまり、任意の数を連続して呼び出すの`ThenBy`または`ThenByDescending`行んだことができます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1576">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-1577"><xref:System.Linq.IOrderedEnumerable%601>継承<xref:System.Collections.Generic.IEnumerable%601>、呼び出すことができます<xref:System.Linq.Enumerable.OrderBy%2A>または<xref:System.Linq.Enumerable.OrderByDescending%2A>への呼び出しの結果に<xref:System.Linq.Enumerable.OrderBy%2A>、 <xref:System.Linq.Enumerable.OrderByDescending%2A>、<xref:System.Linq.Enumerable.ThenBy%2A>または<xref:System.Linq.Enumerable.ThenByDescending%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1577">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="b2f2d-1578">これを行うには、新しいプライマリ順序を以前に確立された順序を無視するが導入されています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1578">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="b2f2d-1579">このメソッドは、既定の比較子を使用してキーを比較<xref:System.Collections.Generic.Comparer%601.Default%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1579">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="b2f2d-1580">このメソッドは、安定した並べ替え; を実行します。つまり、2 つの要素のキーが等しい場合は、要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1580">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="b2f2d-1581">これに対し、不安定な並べ替えは、同じキーを持つ要素の順序は保持されません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1581">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="b2f2d-1582">クエリ式の構文で、 `orderby descending` (Visual C#) または`Order By Descending`の呼び出しに変換します (Visual Basic) 句<xref:System.Linq.Enumerable.OrderByDescending%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1582">In query expression syntax, an `orderby descending` (Visual C#) or `Order By Descending` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderByDescending%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1583"><paramref name="source" /> または <paramref name="keySelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1583"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        <related type="Article" href="~/docs/csharp/language-reference/keywords/orderby-clause.md"><span data-ttu-id="b2f2d-1584">orderby 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1584">orderby clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/order-by-clause.md"><span data-ttu-id="b2f2d-1585">Order By 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1585">Order By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByDescending(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1586"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1586">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-1587"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1587">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1588">順序付ける値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1588">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-1589">要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1589">A function to extract a key from an element.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-1590">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1590">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1591">指定された比較子を使用してシーケンスの要素を降順に並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1591">Sorts the elements of a sequence in descending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1592">要素がキーに従って降順に並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1592">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1593">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1593">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1594">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1594">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1595">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1595">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1596">を、要素自体の値によって、シーケンスを順序付けるに identity 関数を指定します (`x => x` Visual C# または`Function(x) x`Visual basic) の`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1596">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="b2f2d-1597">型を拡張する 2 つのメソッドが定義されている<xref:System.Linq.IOrderedEnumerable%601>、これは、このメソッドの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1597">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="b2f2d-1598">これら 2 つの方法では、namely`ThenBy`と`ThenByDescending`シーケンスを並べ替えるには、追加の並べ替え条件を指定できます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1598">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="b2f2d-1599">`ThenBy` `ThenByDescending`を返すことも、 <xref:System.Linq.IOrderedEnumerable%601>、つまり、任意の数を連続して呼び出すの`ThenBy`または`ThenByDescending`行んだことができます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1599">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-1600"><xref:System.Linq.IOrderedEnumerable%601>継承<xref:System.Collections.Generic.IEnumerable%601>、呼び出すことができます<xref:System.Linq.Enumerable.OrderBy%2A>または<xref:System.Linq.Enumerable.OrderByDescending%2A>への呼び出しの結果に<xref:System.Linq.Enumerable.OrderBy%2A>、 <xref:System.Linq.Enumerable.OrderByDescending%2A>、<xref:System.Linq.Enumerable.ThenBy%2A>または<xref:System.Linq.Enumerable.ThenByDescending%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1600">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="b2f2d-1601">これを行うには、新しいプライマリ順序を以前に確立された順序を無視するが導入されています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1601">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="b2f2d-1602">場合`comparer`は`null`、既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A>キーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1602">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="b2f2d-1603">このメソッドは、安定した並べ替え; を実行します。つまり、2 つの要素のキーが等しい場合は、要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1603">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="b2f2d-1604">これに対し、不安定な並べ替えは、同じキーを持つ要素の順序は保持されません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1604">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1605">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>変換関数およびカスタム comparer を使用して降順のシーケンスの要素を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1605">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to sort the elements of a sequence in descending order by using a transform function and a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#71](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#71)]
 [!code-vb[System.Linq.Enumerable#71](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1606"><paramref name="source" /> または <paramref name="keySelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1606"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <Member MemberName="Prepend&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Prepend&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Prepend&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Prepend(Of TSource) (source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Prepend(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Prepend : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Prepend (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="element" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1607"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1607">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1608">値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1608">A sequence of values.</span></span></param>
        <param name="element"><span data-ttu-id="b2f2d-1609"><paramref name="source" /> に追加する値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1609">The value to prepend to <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1610">シーケンスの先頭に値を追加します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1610">Adds a value to the beginning of the sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1611"><paramref name="element" /> で始まる新しいシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1611">A new sequence that begins with <paramref name="element" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[    
          
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-1612">このメソッドでは、コレクションの要素は変更されません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1612">This method does not modify the elements of the collection.</span></span> <span data-ttu-id="b2f2d-1613">代わりに、新しい要素のコレクションのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1613">Instead, it creates a copy of the collection with the new element.</span></span>
  
## Examples  
 <span data-ttu-id="b2f2d-1614">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Prepend%2A>前に、シーケンスの先頭に値を付加します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1614">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Prepend%2A> to prepend a value to the beginning of the sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#202](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#202)]
 [!code-vb[System.Linq.Enumerable#202](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1615"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1615"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; Range (int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;int32&gt; Range(int32 start, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Range (start As Integer, count As Integer) As IEnumerable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;int&gt; ^ Range(int start, int count);" />
      <MemberSignature Language="F#" Value="static member Range : int * int -&gt; seq&lt;int&gt;" Usage="System.Linq.Enumerable.Range (start, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="b2f2d-1616">シーケンス内の最初の整数の値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1616">The value of the first integer in the sequence.</span></span></param>
        <param name="count"><span data-ttu-id="b2f2d-1617">生成する連続した整数の数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1617">The number of sequential integers to generate.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1618">指定した範囲内の整数のシーケンスを生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1618">Generates a sequence of integral numbers within a specified range.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1619">連続した整数の範囲を含む <c>IEnumerable&lt;Int32&gt;</c> (C# の場合) または <c>IEnumerable(Of Int32)</c> (Visual Basic の場合)。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1619">An <c>IEnumerable&lt;Int32&gt;</c> in C# or <c>IEnumerable(Of Int32)</c> in Visual Basic that contains a range of sequential integral numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1620">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1620">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1621">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1621">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1622">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1622">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1623">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Range%2A>値のシーケンスを生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1623">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Range%2A> to generate a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#72](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#72)]
 [!code-vb[System.Linq.Enumerable#72](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b2f2d-1624"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1624"><paramref name="count" /> is less than 0.</span></span>  
  
<span data-ttu-id="b2f2d-1625">または</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1625">-or-</span></span> 
 <span data-ttu-id="b2f2d-1626"><paramref name="start" /> + <paramref name="count" /> -1 が <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1626"><paramref name="start" /> + <paramref name="count" /> -1 is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Repeat&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Repeat&lt;TResult&gt; (TResult element, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Repeat&lt;TResult&gt;(!!TResult element, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Repeat(Of TResult) (element As TResult, count As Integer) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Repeat(TResult element, int count);" />
      <MemberSignature Language="F#" Value="static member Repeat : 'Result * int -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Repeat (element, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="element" Type="TResult" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-1627">結果のシーケンスで繰り返される値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1627">The type of the value to be repeated in the result sequence.</span></span></typeparam>
        <param name="element"><span data-ttu-id="b2f2d-1628">繰り返される値。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1628">The value to be repeated.</span></span></param>
        <param name="count"><span data-ttu-id="b2f2d-1629">生成されたシーケンスで値を繰り返す回数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1629">The number of times to repeat the value in the generated sequence.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1630">繰り返される 1 つの値を含むシーケンスを生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1630">Generates a sequence that contains one repeated value.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1631">繰り返される値を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1631">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a repeated value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1632">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1632">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1633">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1633">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1634">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1634">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1635">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Repeat%2A>繰り返される値のシーケンスを生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1635">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Repeat%2A> to generate a sequence of a repeated value.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#73](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#73)]
 [!code-vb[System.Linq.Enumerable#73](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b2f2d-1636"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1636"><paramref name="count" /> is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Reverse&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Reverse(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Reverse(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Reverse : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Reverse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1637"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1637">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1638">反転させる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1638">A sequence of values to reverse.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1639">シーケンスの要素の順序を反転させます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1639">Inverts the order of the elements in a sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1640">要素が入力シーケンスの要素に逆順で対応しているシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1640">A sequence whose elements correspond to those of the input sequence in reverse order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1641">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1641">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1642">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1642">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1643">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1643">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1644">異なり<xref:System.Linq.Enumerable.OrderBy%2A>、このメソッドの並べ替え順序が決定自体実際の値は考慮されません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1644">Unlike <xref:System.Linq.Enumerable.OrderBy%2A>, this sorting method does not consider the actual values themselves in determining the order.</span></span> <span data-ttu-id="b2f2d-1645">はなく、その要素を返すだけ生成元となる逆の順序で、基になるソースによって。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1645">Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1646">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Reverse%2A>配列内の要素の順序を逆にします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1646">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Reverse%2A> to reverse the order of elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#74](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#74)]
 [!code-vb[System.Linq.Enumerable#74](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1647"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1647"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Select&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-1648">シーケンスの各要素を新しいフォームに射影します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1648">Projects each element of a sequence into a new form.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : seq&lt;'Source&gt; * Func&lt;'Source, int, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1649"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1649">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-1650"><paramref name="selector" /> によって返される値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1650">The type of the value returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1651">変換関数を呼び出す対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1651">A sequence of values to invoke a transform function on.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1652">各ソース要素に適用する変換関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1652">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1653">要素のインデックスを組み込むことにより、シーケンスの各要素を新しいフォームに射影します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1653">Projects each element of a sequence into a new form by incorporating the element's index.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1654"><paramref name="source" /> の各要素に対して変換関数を呼び出した結果として得られる要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1654">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1655">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1655">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1656">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1656">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1657">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1657">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1658">最初の引数`selector`を処理する要素を表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1658">The first argument to `selector` represents the element to process.</span></span> <span data-ttu-id="b2f2d-1659">2 番目の引数`selector`ソース シーケンス内の要素の 0 から始まるインデックスを表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1659">The second argument to `selector` represents the zero-based index of that element in the source sequence.</span></span> <span data-ttu-id="b2f2d-1660">これは、既知の順序で要素があり、たとえば特定のインデックス位置にある要素で何か操作する場合に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1660">This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</span></span> <span data-ttu-id="b2f2d-1661">1 つまたは複数の要素のインデックスを取得する場合に便利ですできます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1661">It can also be useful if you want to retrieve the index of one or more elements.</span></span>  
  
 <span data-ttu-id="b2f2d-1662">この投影手法は、変換関数を必要と`selector`、ソース シーケンス内の各値の 1 つの値を生成するために、`source`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1662">This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`.</span></span> <span data-ttu-id="b2f2d-1663">場合`selector`コンシューマーのサブシーケンスを手動でスキャンするまでは、コレクション自体が値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1663">If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</span></span> <span data-ttu-id="b2f2d-1664">このような状況では、値の 1 つの結合されたシーケンスを返すようにクエリの方がよい場合があります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1664">In such a situation, it might be better for your query to return a single coalesced sequence of values.</span></span> <span data-ttu-id="b2f2d-1665">これを実現するには、使用、<xref:System.Linq.Enumerable.SelectMany%2A>メソッドの代わりに<xref:System.Linq.Enumerable.Select%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1665">To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>.</span></span> <span data-ttu-id="b2f2d-1666">`SelectMany`同じように動作`Select`、変換関数によって拡張し、コレクションを返します点が異なります`SelectMany`に返されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1666">Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1667">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29>プロジェクトの値のシーケンスを各要素のインデックスを使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1667">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29> to project over a sequence of values and use the index of each element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#76](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#76)]
 [!code-vb[System.Linq.Enumerable#76](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1668"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1668"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1669"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1669">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-1670"><paramref name="selector" /> によって返される値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1670">The type of the value returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1671">変換関数を呼び出す対象となる値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1671">A sequence of values to invoke a transform function on.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1672">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1672">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1673">シーケンスの各要素を新しいフォームに射影します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1673">Projects each element of a sequence into a new form.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1674"><paramref name="source" /> の各要素に対して変換関数を呼び出した結果として得られる要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1674">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1675">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1675">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1676">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1676">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1677">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1677">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1678">この投影手法は、変換関数を必要と`selector`、ソース シーケンス内の各値の 1 つの値を生成するために、`source`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1678">This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`.</span></span> <span data-ttu-id="b2f2d-1679">場合`selector`コンシューマーのサブシーケンスを手動でスキャンするまでは、コレクション自体が値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1679">If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</span></span> <span data-ttu-id="b2f2d-1680">このような状況では、値の 1 つの結合されたシーケンスを返すようにクエリの方がよい場合があります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1680">In such a situation, it might be better for your query to return a single coalesced sequence of values.</span></span> <span data-ttu-id="b2f2d-1681">これを実現するには、使用、<xref:System.Linq.Enumerable.SelectMany%2A>メソッドの代わりに<xref:System.Linq.Enumerable.Select%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1681">To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>.</span></span> <span data-ttu-id="b2f2d-1682">`SelectMany`同じように動作`Select`、変換関数によって拡張し、コレクションを返します点が異なります`SelectMany`に返されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1682">Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.</span></span>  
  
 <span data-ttu-id="b2f2d-1683">クエリ式の構文で、 `select` (Visual C#) または`Select`の呼び出しに変換します (Visual Basic) 句<xref:System.Linq.Enumerable.Select%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1683">In query expression syntax, a `select` (Visual C#) or `Select` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Select%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1684">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>値のシーケンスに対して射影します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1684">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to project over a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#75](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#75)]
 [!code-vb[System.Linq.Enumerable#75](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1685"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1685"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/select-clause.md"><span data-ttu-id="b2f2d-1686">select 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1686">select clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/select-clause.md"><span data-ttu-id="b2f2d-1687">Select 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1687">Select Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectMany&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-1688">シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に射影し、結果のシーケンスを 1 つのシーケンスに平坦化します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1688">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, IEnumerable(Of TResult))) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Result&gt;&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1689"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1689">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-1690"><paramref name="selector" /> によって返されるシーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1690">The type of the elements of the sequence returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1691">射影する値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1691">A sequence of values to project.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1692">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1692">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1693">シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に射影し、結果のシーケンスを 1 つのシーケンスに平坦化します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1693">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1694">入力シーケンスの各要素に対して一対多の変換関数を呼び出した結果として得られる要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1694">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1695">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1695">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1696">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1696">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1697">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1697">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1698"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>メソッドの入力シーケンスを列挙します、各要素にマップする変換関数を使用して、 <xref:System.Collections.Generic.IEnumerable%601>、列挙して、これらの各要素を生成<xref:System.Collections.Generic.IEnumerable%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1698">The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object.</span></span> <span data-ttu-id="b2f2d-1699">つまりの各要素に対して`source`、`selector`が呼び出されると値のシーケンスが返されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1699">That is, for each element of `source`, `selector` is invoked and a sequence of values is returned.</span></span> <span data-ttu-id="b2f2d-1700"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> このコレクションを 1 次元の 2 次元のコレクションをフラット化<xref:System.Collections.Generic.IEnumerable%601>され返されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1700"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it.</span></span> <span data-ttu-id="b2f2d-1701">たとえば、次のクエリで使用<xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>の注文を取得する (型の`Order`) 型のデータベース内の各顧客の結果は、 `IEnumerable<Order>` (C#) または`IEnumerable(Of Order)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1701">For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in Visual Basic.</span></span> <span data-ttu-id="b2f2d-1702">代わりにクエリを使用して場合<xref:System.Linq.Enumerable.Select%2A>の注文を取得するには、注文のコレクションのコレクションを組み合わせることはできませんし、結果は型`IEnumerable<List<Order>>`(C#) または`IEnumerable(Of List(Of Order))`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1702">If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1703">クエリ式の構文で各`from`句 (Visual C#) または`From`の呼び出しに変換されるいずれかの句 (Visual Basic) の頭文字の後<xref:System.Linq.Enumerable.SelectMany%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1703">In query expression syntax, each `from` clause (Visual C#) or `From` clause (Visual Basic) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1704">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>配列に対して一対多の射影を実行します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1704">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#77](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#77)]
 [!code-vb[System.Linq.Enumerable#77](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1705"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1705"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/from-clause.md"><span data-ttu-id="b2f2d-1706">from 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1706">from clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/from-clause.md"><span data-ttu-id="b2f2d-1707">From 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1707">From Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, IEnumerable(Of TResult))) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Result&gt;&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1708"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1708">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-1709"><paramref name="selector" /> によって返されるシーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1709">The type of the elements of the sequence returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1710">射影する値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1710">A sequence of values to project.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-1711">各ソース要素に適用する変換関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1711">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1712">シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に射影し、結果のシーケンスを 1 つのシーケンスに平坦化します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1712">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, and flattens the resulting sequences into one sequence.</span></span> <span data-ttu-id="b2f2d-1713">各ソース要素のインデックスは、その要素の射影されたフォームで使用されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1713">The index of each source element is used in the projected form of that element.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1714">入力シーケンスの各要素に対して一対多の変換関数を呼び出した結果として得られる要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1714">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1715">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1715">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1716">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1716">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1717">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1717">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1718"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>メソッドの入力シーケンスを列挙します、各要素にマップする変換関数を使用して、 <xref:System.Collections.Generic.IEnumerable%601>、列挙して、これらの各要素を生成<xref:System.Collections.Generic.IEnumerable%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1718">The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object.</span></span> <span data-ttu-id="b2f2d-1719">つまりの各要素に対して`source`、`selector`が呼び出されると値のシーケンスが返されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1719">That is, for each element of `source`, `selector` is invoked and a sequence of values is returned.</span></span> <span data-ttu-id="b2f2d-1720"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> このコレクションを 1 次元の 2 次元のコレクションをフラット化<xref:System.Collections.Generic.IEnumerable%601>され返されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1720"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it.</span></span> <span data-ttu-id="b2f2d-1721">たとえば、次のクエリで使用<xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>の注文を取得する (型の`Order`) 型のデータベース内の各顧客の結果は、 `IEnumerable<Order>` (C#) または`IEnumerable(Of Order)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1721">For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in Visual Basic.</span></span> <span data-ttu-id="b2f2d-1722">代わりにクエリを使用して場合<xref:System.Linq.Enumerable.Select%2A>の注文を取得するには、注文のコレクションのコレクションを組み合わせることはできませんし、結果は型`IEnumerable<List<Order>>`(C#) または`IEnumerable(Of List(Of Order))`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1722">If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1723">最初の引数`selector`を処理する要素を表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1723">The first argument to `selector` represents the element to process.</span></span> <span data-ttu-id="b2f2d-1724">2 番目の引数`selector`ソース シーケンス内の要素の 0 から始まるインデックスを表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1724">The second argument to `selector` represents the zero-based index of that element in the source sequence.</span></span> <span data-ttu-id="b2f2d-1725">これは、既知の順序で要素があり、たとえば特定のインデックス位置にある要素で何か操作する場合に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1725">This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</span></span> <span data-ttu-id="b2f2d-1726">1 つまたは複数の要素のインデックスを取得する場合に便利ですできます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1726">It can also be useful if you want to retrieve the index of one or more elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1727">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>配列に対して一対多の射影を実行し、外部の各要素のインデックスを使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1727">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array and use the index of each outer element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#78](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#78)]
 [!code-vb[System.Linq.Enumerable#78](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1728"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1728"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1729"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1729">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TCollection"><span data-ttu-id="b2f2d-1730"><paramref name="collectionSelector" /> によって収集される中間要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1730">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-1731">結果のシーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1731">The type of the elements of the resulting sequence.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1732">射影する値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1732">A sequence of values to project.</span></span></param>
        <param name="collectionSelector"><span data-ttu-id="b2f2d-1733">入力シーケンスの各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1733">A transform function to apply to each element of the input sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="b2f2d-1734">中間シーケンスの各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1734">A transform function to apply to each element of the intermediate sequence.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1735">シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に射影し、結果のシーケンスを 1 つのシーケンスに平坦化して、その各要素に対して結果のセレクター関数を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1735">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1736"><paramref name="collectionSelector" /> の各要素で一対多の変換関数 <paramref name="source" /> を呼び出し、こうしたシーケンスの各要素とそれに対応するソース要素を結果の要素に割り当てた結果として得られる要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1736">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1737">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1737">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1738">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1738">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1739">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1739">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1740"><xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>メソッドは、の要素を保持する必要がある場合に便利な`source`への呼び出し後に発生するクエリ ロジックのスコープ内<xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1740">The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="b2f2d-1741">コード例については、「使用例」のセクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1741">See the Example section for a code example.</span></span> <span data-ttu-id="b2f2d-1742">型のオブジェクトの間で双方向リレーションシップがあるかどうか`TSource`型のオブジェクトと`TCollection`、つまり、型のオブジェクトの場合`TCollection`取得するプロパティを提供します、`TSource`オブジェクト、それを生成したこの不要オーバー ロード<xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1742">If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="b2f2d-1743">使用する代わりに、<xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>に戻ると、`TSource`オブジェクト、`TCollection`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1743">Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.</span></span>  
  
 <span data-ttu-id="b2f2d-1744">クエリ式の構文で各`from`句 (Visual C#) または`From`の呼び出しに変換されるいずれかの句 (Visual Basic) の頭文字の後<xref:System.Linq.Enumerable.SelectMany%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1744">In query expression syntax, each `from` clause (Visual C#) or `From` clause (Visual Basic) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1745">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>配列に対して一対多の射影を実行し、結果のセレクター関数を使用して、対応する各要素を最後の呼び出しのスコープ内のソース シーケンスから`Select`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1745">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> to perform a one-to-many projection over an array and use a result selector function to keep each corresponding element from the source sequence in scope for the final call to `Select`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#124](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#124)]
 [!code-vb[System.Linq.Enumerable#124](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#124)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1746"><paramref name="source" />、<paramref name="collectionSelector" />、または <paramref name="resultSelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1746"><paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/from-clause.md"><span data-ttu-id="b2f2d-1747">from 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1747">from clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/from-clause.md"><span data-ttu-id="b2f2d-1748">From 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1748">From Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, Integer, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1749"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1749">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TCollection"><span data-ttu-id="b2f2d-1750"><paramref name="collectionSelector" /> によって収集される中間要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1750">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-1751">結果のシーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1751">The type of the elements of the resulting sequence.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1752">射影する値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1752">A sequence of values to project.</span></span></param>
        <param name="collectionSelector"><span data-ttu-id="b2f2d-1753">各ソース要素に適用する変換関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1753">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="b2f2d-1754">中間シーケンスの各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1754">A transform function to apply to each element of the intermediate sequence.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1755">シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に射影し、結果のシーケンスを 1 つのシーケンスに平坦化して、その各要素に対して結果のセレクター関数を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1755">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span></span> <span data-ttu-id="b2f2d-1756">各ソース要素のインデックスは、その要素の中間の射影されたフォームで使用されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1756">The index of each source element is used in the intermediate projected form of that element.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1757"><paramref name="collectionSelector" /> の各要素で一対多の変換関数 <paramref name="source" /> を呼び出し、こうしたシーケンスの各要素とそれに対応するソース要素を結果の要素に割り当てた結果として得られる要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1757">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1758">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1758">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1759">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1759">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1760">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1760">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1761"><xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>メソッドは、の要素を保持する必要がある場合に便利な`source`への呼び出し後に発生するクエリ ロジックのスコープ内<xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1761">The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="b2f2d-1762">コード例については、「使用例」のセクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1762">See the Example section for a code example.</span></span> <span data-ttu-id="b2f2d-1763">型のオブジェクトの間で双方向リレーションシップがあるかどうか`TSource`型のオブジェクトと`TCollection`、つまり、型のオブジェクトの場合`TCollection`取得するプロパティを提供します、`TSource`オブジェクト、それを生成したこの不要オーバー ロード<xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1763">If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="b2f2d-1764">使用する代わりに、<xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>に戻ると、`TSource`オブジェクト、`TCollection`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1764">Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1765"><paramref name="source" />、<paramref name="collectionSelector" />、または <paramref name="resultSelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1765"><paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SequenceEqual&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-1766">等値比較子に従って 2 つのシーケンスが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1766">Determines whether two sequences are equal according to an equality comparer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.SequenceEqual (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1767">入力シーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1767">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="b2f2d-1768"><paramref name="second" /> と比較する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1768">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</span></span></param>
        <param name="second"><span data-ttu-id="b2f2d-1769">最初のシーケンスと比較する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1769">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1770">要素の型に対して既定の等値比較子を使用して要素を比較することで、2 つのシーケンスが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1770">Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1771">2 つのソース シーケンスが同じ長さで、それらに対応する要素がその型の既定の等値比較子に従って等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1771"><see langword="true" /> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1772">`SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)`メソッドは、並列の 2 つのソース シーケンスを列挙しの既定の等値比較子を使用して対応する要素を比較`TSource`、<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1772">The `SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for `TSource`, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span></span> 

 <span data-ttu-id="b2f2d-1773">既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>型の値を比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1773">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types.</span></span> <span data-ttu-id="b2f2d-1774">カスタム データ型を比較するには、オーバーライドする必要があります、<xref:System.Object.Equals%2A>と<xref:System.Object.GetHashCode%2A>メソッド、および必要に応じて実装、<xref:System.IEquatable%601>カスタム型でジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1774">To compare a custom data type, you need to override the <xref:System.Object.Equals%2A> and the <xref:System.Object.GetHashCode%2A> methods, and optionally implement the <xref:System.IEquatable%601> generic interface in the custom type.</span></span> <span data-ttu-id="b2f2d-1775">詳細については、<xref:System.Collections.Generic.EqualityComparer%601.Default%2A> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1775">For more information, see the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> property.</span></span>
  
## Examples  
 <span data-ttu-id="b2f2d-1776">次のコード例を使用する方法を示します`SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)`を 2 つのシーケンスが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1776">The following code examples demonstrate how to use `SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` to determine whether two sequences are equal.</span></span> <span data-ttu-id="b2f2d-1777">最初の 2 つの例では、メソッドは、比較対象のシーケンスが同じオブジェクトへの参照を含めるかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1777">In the first two examples, the method determines whether the compared sequences contain references to the same objects.</span></span> <span data-ttu-id="b2f2d-1778">3 番目と 4 番目の例では、メソッドは、シーケンス内のオブジェクトの実際のデータを比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1778">In the third and fourth examples, the method compares the actual data of the objects within the sequences.</span></span>  
  
 <span data-ttu-id="b2f2d-1779">この例では、シーケンスは等しいです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1779">In this example the sequences are equal.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#32)]
 [!code-vb[System.Linq.Enumerable#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#32)]  
  
 <span data-ttu-id="b2f2d-1780">次のコード例が等しくない 2 つのシーケンスを比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1780">The following code example compares two sequences that are not equal.</span></span> <span data-ttu-id="b2f2d-1781">シーケンスは、同一のデータを含めることが含まれているオブジェクトに異なる参照があるため、シーケンスは考慮されませんと等しいことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1781">Note that the sequences contain identical data, but because the objects that they contain have different references, the sequences are not considered equal.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#33)]
 [!code-vb[System.Linq.Enumerable#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#33)]  
  
 <span data-ttu-id="b2f2d-1782">実装する必要の参照を比較するだけではなくシーケンス内のオブジェクトの実際のデータを比較する場合、<xref:System.Collections.Generic.IEqualityComparer%601>クラスでジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1782">If you want to compare the actual data of the objects in the sequences instead of just comparing their references, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in your class.</span></span> <span data-ttu-id="b2f2d-1783">次のコード例は、ヘルパー クラスでこのインターフェイスを実装し、提供する方法を示しています。<xref:System.Object.GetHashCode%2A>と<xref:System.Object.Equals%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1783">The following code example shows how to implement this interface in a helper class and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
 [!code-vb[CSLINQEncapsulatedComparer#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#9)]  

 <span data-ttu-id="b2f2d-1784">このインターフェイスを実装した後のシーケンスを使用することができます`ProductA`内のオブジェクト、`SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)`メソッドを次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1784">After you implement this interface, you can use sequences of `ProductA` objects in the `SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method, as shown in the following example:</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#8)]
 [!code-vb[CSLINQEncapsulatedComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1785"><paramref name="first" /> または <paramref name="second" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1785"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.SequenceEqual (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1786">入力シーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1786">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="b2f2d-1787"><paramref name="second" /> と比較する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1787">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</span></span></param>
        <param name="second"><span data-ttu-id="b2f2d-1788">最初のシーケンスと比較する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1788">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-1789">要素の比較に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1789">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1790">指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して要素を比較することで、2 つのシーケンスが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1790">Determines whether two sequences are equal by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1791">2 つのソース シーケンスが同じ長さで、<paramref name="comparer" /> に従ってそれらに対応する要素が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1791"><see langword="true" /> if the two source sequences are of equal length and their corresponding elements compare equal according to <paramref name="comparer" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1792"><xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>メソッドは、並列の 2 つのソース シーケンスを列挙し、対応する要素を比較するを使用して、指定<xref:System.Collections.Generic.IEqualityComparer%601>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1792">The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <xref:System.Collections.Generic.IEqualityComparer%601>.</span></span> <span data-ttu-id="b2f2d-1793">場合`comparer`は`null`、既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>要素を比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1793">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1794">次の例で使用できる等値比較子を実装する方法を示しています、<xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1794">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="b2f2d-1795">この比較演算子を実装すると後のシーケンスを使用することができます`Product`内のオブジェクト、<xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>メソッドを次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1795">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#8)]
 [!code-vb[CSLINQCustomComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1796"><paramref name="first" /> または <paramref name="second" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1796"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Single&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-1797">シーケンスの 1 つの特定の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1797">Returns a single, specific element of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Single : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Single source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1798"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1798">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1799">1 つの要素を返す <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1799">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1800">シーケンスの唯一の要素を返します。シーケンス内の要素が 1 つだけではない場合は、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1800">Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1801">入力シーケンスの 1 つの要素。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1801">The single element of the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1802"><xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>入力シーケンスが空の場合、メソッドが例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1802">The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if the input sequence is empty.</span></span> <span data-ttu-id="b2f2d-1803">代わりに返される`null`入力シーケンスが空の場合を使用して、<xref:System.Linq.Enumerable.SingleOrDefault%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1803">To instead return `null` when the input sequence is empty, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1804">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>を配列の唯一の要素を選択します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1804">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#79](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#79)]
 [!code-vb[System.Linq.Enumerable#79](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#79)]  
  
 <span data-ttu-id="b2f2d-1805">次のコード例を示している<xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>シーケンスに正確に 1 つの要素が含まれていない場合は、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1805">The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> throws an exception when the sequence does not contain exactly one element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#80](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#80)]
 [!code-vb[System.Linq.Enumerable#80](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1806"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1806"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1807">入力シーケンスに複数の要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1807">The input sequence contains more than one element.</span></span>  
  
<span data-ttu-id="b2f2d-1808">または</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1808">-or-</span></span> 
<span data-ttu-id="b2f2d-1809">入力シーケンスが空です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1809">The input sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Single : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Single (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1810"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1810">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1811">1 つの要素を返す <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1811">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-1812">要素が条件を満たしているかどうかをテストする関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1812">A function to test an element for a condition.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1813">指定された条件を満たす、シーケンスの唯一の要素を返します。そのような要素が複数存在する場合は、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1813">Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1814">条件を満たす、入力シーケンスの 1 つの要素。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1814">The single element of the input sequence that satisfies a condition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1815"><xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>メソッドは、入力シーケンスに一致する要素が含まれていない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1815">The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if the input sequence contains no matching element.</span></span> <span data-ttu-id="b2f2d-1816">代わりに返される`null`一致する要素が見つからない場合は、使用<xref:System.Linq.Enumerable.SingleOrDefault%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1816">To instead return `null` when no matching element is found, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1817">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>条件を満たす、配列の唯一の要素を選択します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1817">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#81](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#81)]
 [!code-vb[System.Linq.Enumerable#81](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#81)]  
  
 <span data-ttu-id="b2f2d-1818">次のコード例を示している<xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>シーケンスに条件を満たす要素が 1 つだけが含まれていない場合は、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1818">The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> throws an exception when the sequence does not contain exactly one element that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#82](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#82)]
 [!code-vb[System.Linq.Enumerable#82](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1819"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1819"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1820"><paramref name="predicate" /> の条件を満たす要素はありません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1820">No element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="b2f2d-1821">または</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1821">-or-</span></span> 
<span data-ttu-id="b2f2d-1822"><paramref name="predicate" /> の条件を満たす要素が複数あります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1822">More than one element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="b2f2d-1823">または</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1823">-or-</span></span> 
<span data-ttu-id="b2f2d-1824">ソース シーケンスが空です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1824">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SingleOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-1825">シーケンスの 1 つの特定の要素を返します。そのような要素が見つからない場合は既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1825">Returns a single, specific element of a sequence, or a default value if that element is not found.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.SingleOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1826"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1826">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1827">1 つの要素を返す <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1827">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1828">シーケンスの唯一の要素を返します。シーケンスが空の場合、既定値を返します。シーケンス内に要素が複数ある場合、このメソッドは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1828">Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1829">入力シーケンスの 1 つの要素。シーケンスに要素が含まれない場合は <see langword="default" /> (<paramref name="TSource" />)。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1829">The single element of the input sequence, or <see langword="default" />(<paramref name="TSource" />) if the sequence contains no elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1830">参照および null 許容型の既定値は`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1830">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1831"><xref:System.Linq.Enumerable.SingleOrDefault%2A>メソッドが既定値を指定する方法を提供していません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1831">The <xref:System.Linq.Enumerable.SingleOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="b2f2d-1832">以外の既定値を指定したい場合`default(TSource)`を使用して、<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>メソッドの使用例」で説明します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1832">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1833">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>を配列の唯一の要素を選択します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1833">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#83](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#83)]
 [!code-vb[System.Linq.Enumerable#83](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#83)]  
  
 <span data-ttu-id="b2f2d-1834">次のコード例を示している<xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>シーケンスに正確に 1 つの要素が含まれていない場合は、既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1834">The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> returns a default value when the sequence does not contain exactly one element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#84](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#84)]
 [!code-vb[System.Linq.Enumerable#84](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#84)]  
  
 <span data-ttu-id="b2f2d-1835">値も`default(TSource)`コレクションに要素が含まれていない場合は、使用する既定値はありません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1835">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="b2f2d-1836">不要な既定値の結果をチェックし、必要に応じてを変更して、代わりに使用することができます、<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>コレクションが空の場合に使用する既定値を指定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1836">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="b2f2d-1837">次に呼び出す<xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1837">Then, call <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the element.</span></span> <span data-ttu-id="b2f2d-1838">次のコード例では、両方の手法を使用して、ページ番号のコレクションが空の場合は、1 の既定値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1838">The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty.</span></span> <span data-ttu-id="b2f2d-1839">整数の既定値は 0 であり、通常は有効なページ数でないため、既定値必要があります 1 として代わりに指定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1839">Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="b2f2d-1840">クエリの実行が完了した後、不要な既定値の最初の結果変数がチェックされます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1840">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="b2f2d-1841">2 番目の結果の変数を使用して取得されます<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>1 の既定値を指定します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1841">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#128](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#128)]
 [!code-vb[System.Linq.Enumerable#128](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#128)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1842"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1842"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1843">入力シーケンスに複数の要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1843">The input sequence contains more than one element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.SingleOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1844"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1844">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1845">1 つの要素を返す <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1845">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-1846">要素が条件を満たしているかどうかをテストする関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1846">A function to test an element for a condition.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1847">指定された条件を満たす、シーケンスの唯一の要素を返します。そのような要素が存在しない場合、既定値を返します。複数の要素が条件を満たす場合、このメソッドは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1847">Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1848">条件を満たす、入力シーケンスの 1 つの要素。そのような要素が見つからない場合は <see langword="default" /> (<paramref name="TSource" />)。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1848">The single element of the input sequence that satisfies the condition, or <see langword="default" />(<paramref name="TSource" />) if no such element is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1849">参照および null 許容型の既定値は`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1849">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1850">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>条件を満たす、配列の唯一の要素を選択します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1850">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#85](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#85)]
 [!code-vb[System.Linq.Enumerable#85](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#85)]  
  
 <span data-ttu-id="b2f2d-1851">次のコード例を示している<xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>シーケンスに条件を満たす要素が 1 つだけが含まれていない場合は、既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1851">The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#86](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#86)]
 [!code-vb[System.Linq.Enumerable#86](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1852"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1852"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b2f2d-1853"><paramref name="predicate" /> の条件を満たす要素が複数あります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1853">More than one element satisfies the condition in <paramref name="predicate" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Skip&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Skip(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Skip : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Skip (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1854"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1854">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1855">返される要素が含まれる <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1855">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span></span></param>
        <param name="count"><span data-ttu-id="b2f2d-1856">残りの要素を返す前にスキップする要素の数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1856">The number of elements to skip before returning the remaining elements.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1857">シーケンス内の指定された数の要素をバイパスし、残りの要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1857">Bypasses a specified number of elements in a sequence and then returns the remaining elements.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1858">入力シーケンスで指定されたインデックスの後に出現する要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1858">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1859">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1859">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1860">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1860">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1861">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1861">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1862">場合`source`未満`count`要素、空<xref:System.Collections.Generic.IEnumerable%601>が返されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1862">If `source` contains fewer than `count` elements, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span> <span data-ttu-id="b2f2d-1863">場合`count`がゼロのすべての要素に小さい`source`は返されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1863">If `count` is less than or equal to zero, all elements of `source` are yielded.</span></span>  
  
 <span data-ttu-id="b2f2d-1864"><xref:System.Linq.Enumerable.Take%2A>と<xref:System.Linq.Enumerable.Skip%2A>メソッドは、機能を補完します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1864">The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements.</span></span> <span data-ttu-id="b2f2d-1865">シーケンスの指定`coll`および整数`n`の結果を連結`coll.Take(n)`と`coll.Skip(n)`と同じシーケンスを生成`coll`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1865">Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="b2f2d-1866">Visual Basic のクエリ式の構文を`Skip`句がの呼び出しに変換されます<xref:System.Linq.Enumerable.Skip%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1866">In Visual Basic query expression syntax, a `Skip` clause translates to an invocation of <xref:System.Linq.Enumerable.Skip%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1867">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Skip%2A>を要素の並べ替え済み配列の指定した数をスキップし、残りの要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1867">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Skip%2A> to skip a specified number of elements in a sorted array and return the remaining elements.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#87](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#87)]
 [!code-vb[System.Linq.Enumerable#87](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1868"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1868"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/skip-clause.md"><span data-ttu-id="b2f2d-1869">Skip 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1869">Skip Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SkipLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipLast&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipLast(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipLast(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member SkipLast : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SkipWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-1870">指定された条件が満たされる限り、シーケンスの要素をバイパスした後、残りの要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1870">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1871"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1871">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1872">返される要素が含まれる <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1872">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-1873">各要素が条件を満たしているかどうかをテストする関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1873">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1874">指定された条件が満たされる限り、シーケンスの要素をバイパスした後、残りの要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1874">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1875"><paramref name="predicate" /> で指定されたテストに合格しない連続する最初の要素から入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1875">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1876"><xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>メソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1876">The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1877">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1877">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1878">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1878">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1879">このメソッドの各要素はテスト`source`を使用して`predicate`し、結果の場合、要素をスキップ`true`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1879">This method tests each element of `source` by using `predicate` and skips the element if the result is `true`.</span></span> <span data-ttu-id="b2f2d-1880">述語の関数から制御が戻た後`false`要素、その要素との残りの要素の`source`見つかったのない複数の呼び出しがあると`predicate`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1880">After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.</span></span>  
  
 <span data-ttu-id="b2f2d-1881">場合`predicate`返します`true`シーケンス、空のすべての要素の<xref:System.Collections.Generic.IEnumerable%601>が返されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1881">If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="b2f2d-1882"><xref:System.Linq.Enumerable.TakeWhile%2A>と<xref:System.Linq.Enumerable.SkipWhile%2A>メソッドは、機能を補完します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1882">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="b2f2d-1883">シーケンスの指定`coll`と純粋関数`p`の結果を連結`coll.TakeWhile(p)`と`coll.SkipWhile(p)`と同じシーケンスを生成`coll`。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1883">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="b2f2d-1884">Visual Basic のクエリ式の構文を`Skip While`句がの呼び出しに変換されます<xref:System.Linq.Enumerable.SkipWhile%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1884">In Visual Basic query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1885">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>条件が true であれば、配列の要素をスキップします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1885">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#88](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#88)]
 [!code-vb[System.Linq.Enumerable#88](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1886"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1886"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/skip-while-clause.md"><span data-ttu-id="b2f2d-1887">Skip While 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1887">Skip While Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-1888"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1888">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-1889">返される要素が含まれる <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1889">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-1890">各ソース要素が条件に当てはまるかどうかをテストする関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1890">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1891">指定された条件が満たされる限り、シーケンスの要素をバイパスした後、残りの要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1891">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span></span> <span data-ttu-id="b2f2d-1892">要素のインデックスは、述語関数のロジックで使用されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1892">The element's index is used in the logic of the predicate function.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1893"><paramref name="predicate" /> で指定されたテストに合格しない連続する最初の要素から入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1893">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1894">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1894">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-1895">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1895">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-1896">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1896">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-1897"><xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29>メソッドの各要素はテスト`source`を使用して`predicate`し、結果の場合、要素をスキップ`true`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1897">The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and skips the element if the result is `true`.</span></span> <span data-ttu-id="b2f2d-1898">述語の関数から制御が戻た後`false`要素、その要素との残りの要素の`source`見つかったのない複数の呼び出しがあると`predicate`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1898">After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.</span></span>  
  
 <span data-ttu-id="b2f2d-1899">場合`predicate`返します`true`シーケンス、空のすべての要素の<xref:System.Collections.Generic.IEnumerable%601>が返されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1899">If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="b2f2d-1900">最初の引数`predicate`をテストする要素を表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1900">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="b2f2d-1901">2 番目の引数内の要素の 0 から始まるインデックスを表す`source`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1901">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
 <span data-ttu-id="b2f2d-1902"><xref:System.Linq.Enumerable.TakeWhile%2A>と<xref:System.Linq.Enumerable.SkipWhile%2A>メソッドは、機能を補完します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1902">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="b2f2d-1903">シーケンスの指定`coll`と純粋関数`p`の結果を連結`coll.TakeWhile(p)`と`coll.SkipWhile(p)`と同じシーケンスを生成`coll`。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1903">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="b2f2d-1904">Visual Basic のクエリ式の構文を`Skip While`句がの呼び出しに変換されます<xref:System.Linq.Enumerable.SkipWhile%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1904">In Visual Basic query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1905">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29>要素のインデックスに依存している条件が true であれば、配列の要素をスキップします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1905">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition that depends on the element's index is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#89](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#89)]
 [!code-vb[System.Linq.Enumerable#89](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1906"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1906"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/skip-while-clause.md"><span data-ttu-id="b2f2d-1907">Skip While 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1907">Skip While Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sum">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-1908">数値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1908">Computes the sum of a sequence of numeric values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static decimal Sum (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1909">合計を計算する対象となる <see cref="T:System.Decimal" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1909">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1910"><see cref="T:System.Decimal" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1910">Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1911">シーケンスの値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1911">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1912"><xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29>場合は 0 を返します`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1912">The <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-1913">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1913">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1914">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>一連の値を合計します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1914">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1915"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1915"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-1916">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1916">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1917">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1917">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static double Sum (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1918">合計を計算する対象となる <see cref="T:System.Double" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1918">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1919"><see cref="T:System.Double" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1919">Computes the sum of a sequence of <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1920">シーケンスの値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1920">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1921">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1921">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-1922">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1922">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1923">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>一連の値を合計します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1923">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1924"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1924"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1925">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1925">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static int Sum (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1926">合計を計算する対象となる <see cref="T:System.Int32" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1926">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1927"><see cref="T:System.Int32" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1927">Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1928">シーケンスの値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1928">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1929">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1929">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-1930">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1930">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1931">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>一連の値を合計します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1931">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1932"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1932"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-1933">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1933">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1934">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1934">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static long Sum (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1935">合計を計算する対象となる <see cref="T:System.Int64" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1935">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1936"><see cref="T:System.Int64" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1936">Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1937">シーケンスの値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1937">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1938">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1938">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-1939">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1939">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1940">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>一連の値を合計します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1940">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1941"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1941"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-1942">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1942">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1943">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1943">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1944">合計を計算する対象となる null 許容の <see cref="T:System.Decimal" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1944">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1945">null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1945">Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1946">シーケンスの値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1946">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1947">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1947">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-1948">結果は値が含まれます`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1948">The result doesnot include values that are `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1949">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1949">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1950">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>一連の値を合計します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1950">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1951"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1951"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-1952">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1952">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1953">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1953">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1954">合計を計算する対象となる null 許容の <see cref="T:System.Double" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1954">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1955">null 許容の <see cref="T:System.Double" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1955">Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1956">シーケンスの値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1956">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1957">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1957">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-1958">結果は、値を含まない`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1958">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1959">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1959">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1960">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>一連の値を合計します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1960">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1961"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1961"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1962">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1962">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1963">合計を計算する対象となる null 許容の <see cref="T:System.Int32" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1963">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1964">null 許容の <see cref="T:System.Int32" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1964">Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1965">シーケンスの値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1965">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1966">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1966">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-1967">結果は、値を含まない`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1967">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1968">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1968">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1969">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>一連の値を合計します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1969">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1970"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1970"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-1971">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1971">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1972">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1972">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1973">合計を計算する対象となる null 許容の <see cref="T:System.Int64" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1973">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1974">null 許容の <see cref="T:System.Int64" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1974">Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1975">シーケンスの値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1975">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1976">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1976">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-1977">結果は、値を含まない`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1977">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1978">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1978">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1979">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>一連の値を合計します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1979">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1980"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1980"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-1981">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1981">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1982">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1982">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1983">合計を計算する対象となる null 許容の <see cref="T:System.Single" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1983">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1984">null 許容の <see cref="T:System.Single" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1984">Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1985">シーケンスの値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1985">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1986">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1986">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-1987">結果は、値を含まない`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1987">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-1988">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1988">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1989">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>一連の値を合計します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1989">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1990"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1990"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1991">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1991">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static float Sum (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b2f2d-1992">合計を計算する対象となる <see cref="T:System.Single" /> 値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1992">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="b2f2d-1993"><see cref="T:System.Single" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1993">Computes the sum of a sequence of <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-1994">シーケンスの値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1994">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-1995">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1995">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-1996">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1996">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-1997">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>一連の値を合計します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1997">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-1998"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1998"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-1999">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-1999">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2000"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2000">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2001">合計の計算に使用される値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2001">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-2002">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2002">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2003">入力シーケンスの各要素に対して変換関数を呼び出して取得する <see cref="T:System.Decimal" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2003">Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2004">射影された値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2004">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2005">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2005">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-2006">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Decimal>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2006">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="b2f2d-2007">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2007">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2008">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>シーケンスの射影された値の合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2008">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2009"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2009"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-2010">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2010">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-2011">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2011">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2012"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2012">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2013">合計の計算に使用される値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2013">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-2014">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2014">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2015">入力シーケンスの各要素に対して変換関数を呼び出して取得する <see cref="T:System.Double" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2015">Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2016">射影された値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2016">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2017">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2017">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-2018">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Double>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2018">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="b2f2d-2019">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2019">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2020">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>シーケンスの射影された値の合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2020">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2021"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2021"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-2022">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2022">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2023"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2023">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2024">合計の計算に使用される値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2024">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-2025">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2025">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2026">入力シーケンスの各要素に対して変換関数を呼び出して取得する <see cref="T:System.Int32" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2026">Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2027">射影された値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2027">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2028">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2028">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-2029">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Int32>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2029">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="b2f2d-2030">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2030">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2031">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>シーケンスの射影された値の合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2031">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2032"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2032"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-2033">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2033">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-2034">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2034">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2035"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2035">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2036">合計の計算に使用される値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2036">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-2037">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2037">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2038">入力シーケンスの各要素に対して変換関数を呼び出して取得する <see cref="T:System.Int64" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2038">Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2039">射影された値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2039">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2040">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2040">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-2041">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Int64>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2041">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="b2f2d-2042">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2042">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2043">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>シーケンスの射影された値の合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2043">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2044"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2044"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-2045">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2045">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-2046">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2046">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2047"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2047">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2048">合計の計算に使用される値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2048">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-2049">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2049">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2050">入力シーケンスの各要素に対して変換関数を呼び出して取得する null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2050">Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2051">射影された値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2051">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2052">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2052">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-2053">結果には値が含まれていない`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2053">The result does not included values that are `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-2054">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`に数値型では、具体的には`Nullable<Decimal>`(C#) または`Nullable(Of Decimal)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2054">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2055">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2055">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2056">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>シーケンスの射影された値の合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2056">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2057"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2057"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-2058">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2058">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-2059">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2059">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2060"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2060">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2061">合計の計算に使用される値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2061">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-2062">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2062">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2063">入力シーケンスの各要素に対して変換関数を呼び出して取得する null 許容の <see cref="T:System.Double" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2063">Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2064">射影された値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2064">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2065">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2065">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-2066">結果は、値を含まない`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2066">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-2067">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`に数値型では、具体的には`Nullable<Double>`(C#) または`Nullable(Of Double)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2067">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2068">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2068">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2069">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>シーケンスの射影された値の合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2069">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2070"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2070"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-2071">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2071">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2072"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2072">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2073">合計の計算に使用される値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2073">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-2074">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2074">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2075">入力シーケンスの各要素に対して変換関数を呼び出して取得する null 許容の <see cref="T:System.Int32" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2075">Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2076">射影された値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2076">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2077">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2077">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-2078">結果は、値を含まない`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2078">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-2079">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`に数値型では、具体的には`Nullable<Int32>`(C#) または`Nullable(Of Int32)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2079">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2080">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2080">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2081">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>シーケンスの射影された値の合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2081">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2082"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2082"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-2083">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2083">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-2084">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2084">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2085"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2085">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2086">合計の計算に使用される値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2086">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-2087">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2087">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2088">入力シーケンスの各要素に対して変換関数を呼び出して取得する null 許容の <see cref="T:System.Int64" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2088">Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2089">射影された値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2089">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2090">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2090">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-2091">結果は、値を含まない`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2091">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-2092">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に`Nullable<Int64>`(C#) または`Nullable(Of Int64)`Visual Basic で</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2092">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic</span></span>  
  
 <span data-ttu-id="b2f2d-2093">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2093">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2094">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>シーケンスの射影された値の合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2094">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2095"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2095"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b2f2d-2096">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2096">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-2097">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2097">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2098"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2098">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2099">合計の計算に使用される値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2099">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-2100">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2100">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2101">入力シーケンスの各要素に対して変換関数を呼び出して取得する null 許容の <see cref="T:System.Single" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2101">Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2102">射影された値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2102">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2103">このメソッドが戻る場合は 0`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2103">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-2104">結果は、値を含まない`null`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2104">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="b2f2d-2105">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`に数値型では、具体的には`Nullable<Single>`(C#) または`Nullable(Of Single)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2105">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2106">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2106">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2107">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>シーケンスの射影された値の合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2107">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2108"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2108"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-2109">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2109">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2110"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2110">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2111">合計の計算に使用される値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2111">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="b2f2d-2112">各要素に適用する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2112">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2113">入力シーケンスの各要素に対して変換関数を呼び出して取得する <see cref="T:System.Single" /> 値のシーケンスの合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2113">Computes the sum of the sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2114">射影された値の合計。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2114">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2115"><xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29>場合は 0 を返します`source`要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2115">The <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="b2f2d-2116">関数を提供する場合、このメソッドを任意の値のシーケンスに適用することができます`selector`のメンバーを射影する`source`を数値の型に特に<xref:System.Single>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2116">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="b2f2d-2117">Visual Basic のクエリ式の構文、`Aggregate Into Sum()`の呼び出しに変換句<xref:System.Linq.Enumerable.Sum%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2117">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2118">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>シーケンスの射影された値の合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2118">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2119"><paramref name="source" /> または <paramref name="selector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2119"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="b2f2d-2120">Aggregate 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2120">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Take&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Take(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Take : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Take (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2121"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2121">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2122">要素を返すシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2122">The sequence to return elements from.</span></span></param>
        <param name="count"><span data-ttu-id="b2f2d-2123">返す要素数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2123">The number of elements to return.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2124">シーケンスの先頭から、指定された数の連続する要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2124">Returns a specified number of contiguous elements from the start of a sequence.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2125">入力シーケンスの先頭から、指定された数の要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2125">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of elements from the start of the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2126">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2126">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-2127">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2127">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-2128">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2128">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2129"><xref:System.Linq.Enumerable.Take%2A> 列挙`source`まで要素を生成し、`count`要素が生成されているまたは`source`ない多くの要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2129"><xref:System.Linq.Enumerable.Take%2A> enumerates `source` and yields elements until `count` elements have been yielded or `source` contains no more elements.</span></span> <span data-ttu-id="b2f2d-2130">場合`count`内の要素の数を超える`source`のすべての要素`source`が返されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2130">If `count` exceeds the number of elements in `source`, all elements of `source` are returned.</span></span>  
  
 <span data-ttu-id="b2f2d-2131">場合`count`がゼロ未満`source`列挙され、空でない<xref:System.Collections.Generic.IEnumerable%601>が返されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2131">If `count` is less than or equal to zero, `source` is not enumerated and an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="b2f2d-2132"><xref:System.Linq.Enumerable.Take%2A>と<xref:System.Linq.Enumerable.Skip%2A>メソッドは、機能を補完します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2132">The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements.</span></span> <span data-ttu-id="b2f2d-2133">シーケンスの指定`coll`および整数`n`の結果を連結`coll.Take(n)`と`coll.Skip(n)`と同じシーケンスを生成`coll`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2133">Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="b2f2d-2134">Visual Basic のクエリ式の構文を`Take`句がの呼び出しに変換されます<xref:System.Linq.Enumerable.Take%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2134">In Visual Basic query expression syntax, a `Take` clause translates to an invocation of <xref:System.Linq.Enumerable.Take%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2135">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Take%2A>をシーケンスの先頭から要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2135">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Take%2A> to return elements from the start of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#99](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#99)]
 [!code-vb[System.Linq.Enumerable#99](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2136"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2136"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/take-clause.md"><span data-ttu-id="b2f2d-2137">Take 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2137">Take Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TakeLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeLast&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeLast(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeLast(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member TakeLast : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TakeWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-2138">指定された条件を満たされる限り、シーケンスから要素を返した後、残りの要素をスキップします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2138">Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2139"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2139">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2140">要素を返すシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2140">A sequence to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-2141">各要素が条件を満たしているかどうかをテストする関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2141">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2142">指定された条件が満たされる限り、シーケンスから要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2142">Returns elements from a sequence as long as a specified condition is true.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2143">テストに合格しなくなった要素の前に出現する、入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2143">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2144">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2144">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-2145">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2145">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-2146">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2146">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2147"><xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>メソッドの各要素はテスト`source`を使用して`predicate`し、結果がある場合、要素を生成`true`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2147">The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`.</span></span> <span data-ttu-id="b2f2d-2148">述語関数で返されるときに、列挙が停止する`false`要素の場合、または`source`ない多くの要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2148">Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.</span></span>  
  
 <span data-ttu-id="b2f2d-2149"><xref:System.Linq.Enumerable.TakeWhile%2A>と<xref:System.Linq.Enumerable.SkipWhile%2A>メソッドは、機能を補完します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2149">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="b2f2d-2150">シーケンスの指定`coll`と純粋関数`p`の結果を連結`coll.TakeWhile(p)`と`coll.SkipWhile(p)`と同じシーケンスを生成`coll`。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2150">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="b2f2d-2151">Visual Basic のクエリ式の構文を`Take While`句がの呼び出しに変換されます<xref:System.Linq.Enumerable.TakeWhile%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2151">In Visual Basic query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2152">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>を条件が true であれば、シーケンスの先頭から要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2152">The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#100](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#100)]
 [!code-vb[System.Linq.Enumerable#100](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2153"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2153"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/take-while-clause.md"><span data-ttu-id="b2f2d-2154">Take While 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2154">Take While Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2155"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2155">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2156">要素を返すシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2156">The sequence to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-2157">各ソース要素が条件に当てはまるかどうかをテストする関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2157">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2158">指定された条件が満たされる限り、シーケンスから要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2158">Returns elements from a sequence as long as a specified condition is true.</span></span> <span data-ttu-id="b2f2d-2159">要素のインデックスは、述語関数のロジックで使用されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2159">The element's index is used in the logic of the predicate function.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2160">テストに合格しなくなった要素の前に出現する、入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2160">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that occur before the element at which the test no longer passes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2161">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2161">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-2162">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2162">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-2163">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2163">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2164"><xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29>メソッドの各要素はテスト`source`を使用して`predicate`し、結果がある場合、要素を生成`true`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2164">The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`.</span></span> <span data-ttu-id="b2f2d-2165">述語関数で返されるときに、列挙が停止する`false`要素の場合、または`source`ない多くの要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2165">Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.</span></span>  
  
 <span data-ttu-id="b2f2d-2166">最初の引数`predicate`をテストする要素を表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2166">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="b2f2d-2167">2 番目の引数内の要素の 0 から始まるインデックスを表す`source`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2167">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
 <span data-ttu-id="b2f2d-2168"><xref:System.Linq.Enumerable.TakeWhile%2A>と<xref:System.Linq.Enumerable.SkipWhile%2A>メソッドは、機能を補完します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2168">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="b2f2d-2169">シーケンスの指定`coll`と純粋関数`p`の結果を連結`coll.TakeWhile(p)`と`coll.SkipWhile(p)`と同じシーケンスを生成`coll`。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2169">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="b2f2d-2170">Visual Basic のクエリ式の構文を`Take While`句がの呼び出しに変換されます<xref:System.Linq.Enumerable.TakeWhile%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2170">In Visual Basic query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2171">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29>を要素のインデックスを使用する条件が真である限り、シーケンスの先頭から要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2171">The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition that uses the element's index is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#101](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#101)]
 [!code-vb[System.Linq.Enumerable#101](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2172"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2172"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/take-while-clause.md"><span data-ttu-id="b2f2d-2173">Take While 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2173">Take While Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-2174">シーケンス内の後続の要素を昇順で配置します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2174">Performs a subsequent ordering of the elements in a sequence in ascending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2175"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2175">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-2176"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2176">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2177">並べ替える要素を格納している <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2177">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-2178">各要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2178">A function to extract a key from each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2179">キーに従って、シーケンス内の後続の要素を昇順で配置します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2179">Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2180">要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2180">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2181">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2181">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-2182">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2182">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-2183">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2183">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2184">を、要素自体の値によって、シーケンスを順序付けるに identity 関数を指定します (`x => x` Visual C# または`Function(x) x`Visual basic) の`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2184">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="b2f2d-2185"><xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A>型を拡張するよう定義は<xref:System.Linq.IOrderedEnumerable%601>、これらのメソッドの戻り値の型でもあります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2185"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="b2f2d-2186">この設計では、任意の数を適用することで複数の並べ替え条件を指定できます。<xref:System.Linq.Enumerable.ThenBy%2A>または<xref:System.Linq.Enumerable.ThenByDescending%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2186">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-2187"><xref:System.Linq.IOrderedEnumerable%601>継承<xref:System.Collections.Generic.IEnumerable%601>、呼び出すことができます<xref:System.Linq.Enumerable.OrderBy%2A>または<xref:System.Linq.Enumerable.OrderByDescending%2A>への呼び出しの結果に<xref:System.Linq.Enumerable.OrderBy%2A>、 <xref:System.Linq.Enumerable.OrderByDescending%2A>、<xref:System.Linq.Enumerable.ThenBy%2A>または<xref:System.Linq.Enumerable.ThenByDescending%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2187">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="b2f2d-2188">これを行うには、新しいプライマリ順序を以前に確立された順序を無視するが導入されています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2188">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="b2f2d-2189">このメソッドは、既定の比較子を使用してキーを比較<xref:System.Collections.Generic.Comparer%601.Default%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2189">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="b2f2d-2190">このメソッドは、安定した並べ替え; を実行します。つまり、2 つの要素のキーが等しい場合は、要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2190">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="b2f2d-2191">これに対し、不安定な並べ替えは、同じキーを持つ要素の順序は保持されません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2191">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="b2f2d-2192">クエリ式の構文で、 `orderby [first criterion], [second criterion]` (Visual C#) または`Order By [first criterion], [second criterion]`の呼び出しに変換します (Visual Basic) 句<xref:System.Linq.Enumerable.ThenBy%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2192">In query expression syntax, an `orderby [first criterion], [second criterion]` (Visual C#) or `Order By [first criterion], [second criterion]` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.ThenBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2193">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>シーケンス内の要素の 2 番目の並べ替えを実行します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2193">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to perform a secondary ordering of the elements in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#102](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#102)]
 [!code-vb[System.Linq.Enumerable#102](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2194"><paramref name="source" /> または <paramref name="keySelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2194"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/orderby-clause.md"><span data-ttu-id="b2f2d-2195">orderby 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2195">orderby clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/order-by-clause.md"><span data-ttu-id="b2f2d-2196">Order By 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2196">Order By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2197"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2197">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-2198"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2198">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2199">並べ替える要素を格納している <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2199">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-2200">各要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2200">A function to extract a key from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-2201">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2201">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2202">指定された比較子を使用して、シーケンス内の後続の要素を昇順で配置します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2202">Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2203">要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2203">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2204">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2204">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-2205">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2205">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-2206">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2206">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2207">を、要素自体の値によって、シーケンスを順序付けるに identity 関数を指定します (`x => x` Visual C# または`Function(x) x`Visual basic) の`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2207">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="b2f2d-2208"><xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A>型を拡張するよう定義は<xref:System.Linq.IOrderedEnumerable%601>、これらのメソッドの戻り値の型でもあります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2208"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="b2f2d-2209">この設計では、任意の数を適用することで複数の並べ替え条件を指定できます。<xref:System.Linq.Enumerable.ThenBy%2A>または<xref:System.Linq.Enumerable.ThenByDescending%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2209">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-2210"><xref:System.Linq.IOrderedEnumerable%601>継承<xref:System.Collections.Generic.IEnumerable%601>、呼び出すことができます<xref:System.Linq.Enumerable.OrderBy%2A>または<xref:System.Linq.Enumerable.OrderByDescending%2A>への呼び出しの結果に<xref:System.Linq.Enumerable.OrderBy%2A>、 <xref:System.Linq.Enumerable.OrderByDescending%2A>、<xref:System.Linq.Enumerable.ThenBy%2A>または<xref:System.Linq.Enumerable.ThenByDescending%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2210">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="b2f2d-2211">これを行うには、新しいプライマリ順序を以前に確立された順序を無視するが導入されています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2211">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="b2f2d-2212">場合`comparer`は`null`、既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A>キーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2212">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="b2f2d-2213">このメソッドは、安定した並べ替え; を実行します。つまり、2 つの要素のキーが等しい場合は、要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2213">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="b2f2d-2214">これに対し、不安定な並べ替えは、同じキーを持つ要素の順序は保持されません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2214">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2215"><paramref name="source" /> または <paramref name="keySelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2215"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-2216">シーケンス内の後続の要素を降順で配置します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2216">Performs a subsequent ordering of the elements in a sequence in descending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2217"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2217">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-2218"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2218">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2219">並べ替える要素を格納している <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2219">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-2220">各要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2220">A function to extract a key from each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2221">キーに従って、シーケンス内の後続の要素を降順で配置します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2221">Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2222">要素がキーに従って降順に並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2222">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2223">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2223">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-2224">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2224">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-2225">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2225">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2226">を、要素自体の値によって、シーケンスを順序付けるに identity 関数を指定します (`x => x` Visual C# または`Function(x) x`Visual basic) の`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2226">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="b2f2d-2227"><xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A>型を拡張するよう定義は<xref:System.Linq.IOrderedEnumerable%601>、これらのメソッドの戻り値の型でもあります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2227"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="b2f2d-2228">この設計では、任意の数を適用することで複数の並べ替え条件を指定できます。<xref:System.Linq.Enumerable.ThenBy%2A>または<xref:System.Linq.Enumerable.ThenByDescending%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2228">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-2229"><xref:System.Linq.IOrderedEnumerable%601>継承<xref:System.Collections.Generic.IEnumerable%601>、呼び出すことができます<xref:System.Linq.Enumerable.OrderBy%2A>または<xref:System.Linq.Enumerable.OrderByDescending%2A>への呼び出しの結果に<xref:System.Linq.Enumerable.OrderBy%2A>、 <xref:System.Linq.Enumerable.OrderByDescending%2A>、<xref:System.Linq.Enumerable.ThenBy%2A>または<xref:System.Linq.Enumerable.ThenByDescending%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2229">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="b2f2d-2230">これを行うには、新しいプライマリ順序を以前に確立された順序を無視するが導入されています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2230">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="b2f2d-2231">この並べ替え方法は、既定の比較子を使用してキーを比較<xref:System.Collections.Generic.Comparer%601.Default%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2231">This sorting method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="b2f2d-2232">このメソッドは、安定した並べ替え; を実行します。つまり、2 つの要素のキーが等しい場合は、要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2232">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="b2f2d-2233">これに対し、不安定な並べ替えは、同じキーを持つ要素の順序は保持されません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2233">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="b2f2d-2234">クエリ式構文 (Visual C#) で、`orderby [first criterion], [second criterion] descending`句がの呼び出しに変換されます<xref:System.Linq.Enumerable.ThenByDescending%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2234">In Visual C# query expression syntax, an `orderby [first criterion], [second criterion] descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span>  
  
 <span data-ttu-id="b2f2d-2235">Visual Basic のクエリ式の構文、`Order By [first criterion], [second criterion] Descending`の呼び出しに変換句<xref:System.Linq.Enumerable.ThenByDescending%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2235">In Visual Basic query expression syntax, an `Order By [first criterion], [second criterion] Descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2236"><paramref name="source" /> または <paramref name="keySelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2236"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/orderby-clause.md"><span data-ttu-id="b2f2d-2237">orderby 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2237">orderby clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/order-by-clause.md"><span data-ttu-id="b2f2d-2238">Order By 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2238">Order By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2239"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2239">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-2240"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2240">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2241">並べ替える要素を格納している <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2241">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-2242">各要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2242">A function to extract a key from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-2243">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2243">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2244">指定された比較子を使用して、シーケンス内の後続の要素を降順で配置します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2244">Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2245">要素がキーに従って降順に並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2245">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2246">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2246">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-2247">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2247">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-2248">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2248">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2249">を、要素自体の値によって、シーケンスを順序付けるに identity 関数を指定します (`x => x` Visual C# または`Function(x) x`Visual basic) の`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2249">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="b2f2d-2250"><xref:System.Linq.Enumerable.ThenBy%2A> <xref:System.Linq.Enumerable.ThenByDescending%2A>型を拡張するよう定義は<xref:System.Linq.IOrderedEnumerable%601>、これらのメソッドの戻り値の型でもあります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2250"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="b2f2d-2251">この設計では、任意の数を適用することで複数の並べ替え条件を指定できます。<xref:System.Linq.Enumerable.ThenBy%2A>または<xref:System.Linq.Enumerable.ThenByDescending%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2251">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b2f2d-2252"><xref:System.Linq.IOrderedEnumerable%601>継承<xref:System.Collections.Generic.IEnumerable%601>、呼び出すことができます<xref:System.Linq.Enumerable.OrderBy%2A>または<xref:System.Linq.Enumerable.OrderByDescending%2A>への呼び出しの結果に<xref:System.Linq.Enumerable.OrderBy%2A>、 <xref:System.Linq.Enumerable.OrderByDescending%2A>、<xref:System.Linq.Enumerable.ThenBy%2A>または<xref:System.Linq.Enumerable.ThenByDescending%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2252">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="b2f2d-2253">これを行うには、新しいプライマリ順序を以前に確立された順序を無視するが導入されています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2253">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="b2f2d-2254">場合`comparer`は`null`、既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A>キーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2254">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="b2f2d-2255">このメソッドは、安定した並べ替え; を実行します。つまり、2 つの要素のキーが等しい場合は、要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2255">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="b2f2d-2256">これに対し、不安定な並べ替えは、同じキーを持つ要素の順序は保持されません。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2256">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2257">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>カスタム比較子を使用して、降順のシーケンス内の要素の 2 番目の並べ替えを実行します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2257">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#103](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#103)]
 [!code-vb[System.Linq.Enumerable#103](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2258"><paramref name="source" /> または <paramref name="keySelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2258"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource[] ToArray&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource[] ToArray&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToArray(Of TSource) (source As IEnumerable(Of TSource)) As TSource()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static cli::array &lt;TSource&gt; ^ ToArray(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToArray : seq&lt;'Source&gt; -&gt; 'Source[]" Usage="System.Linq.Enumerable.ToArray source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2259"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2259">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2260">配列の作成元の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2260">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create an array from.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2261"><see cref="T:System.Collections.Generic.IEnumerable`1" /> から配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2261">Creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2262">入力シーケンスの要素を含む配列。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2262">An array that contains the elements from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2263"><xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>メソッドは、強制的に即時のクエリの評価し、クエリの結果を格納する配列を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2263">The <xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns an array that contains the query results.</span></span> <span data-ttu-id="b2f2d-2264">このメソッドは、クエリの結果のキャッシュされたコピーを取得するためにクエリに追加できます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2264">You can append this method to your query in order to obtain a cached copy of the query results.</span></span>  
  
 <span data-ttu-id="b2f2d-2265"><xref:System.Linq.Enumerable.ToList%2A> 同様の動作を返しますが、<xref:System.Collections.Generic.List%601>配列の代わりにします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2265"><xref:System.Linq.Enumerable.ToList%2A> has similar behavior but returns a <xref:System.Collections.Generic.List%601> instead of an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2266">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.ToArray%2A>を強制的に即時のクエリ評価し、結果の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2266">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToArray%2A> to force immediate query evaluation and return an array of results.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#104](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#104)]
 [!code-vb[System.Linq.Enumerable#104](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2267"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2267"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-2268"><see cref="T:System.Collections.Generic.IEnumerable`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2268">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As Dictionary(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TSource&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2269"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2269">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-2270"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2270">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2271"><see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2271">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-2272">各要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2272">A function to extract a key from each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2273">指定されたキー セレクター関数に従って、<see cref="T:System.Collections.Generic.Dictionary`2" /> から <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2273">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2274">キーと値を格納している <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2274">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2275"><xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>メソッドは既定の等値比較子を使用して<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>キーを比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2275">The <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2276">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>を作成する、<xref:System.Collections.Generic.Dictionary%602>キー セレクターを使用しています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2276">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to create a <xref:System.Collections.Generic.Dictionary%602> by using a key selector.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#105](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#105)]
 [!code-vb[System.Linq.Enumerable#105](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2277"><paramref name="source" /> または <paramref name="keySelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2277"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b2f2d-2278">または</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2278">-or-</span></span> 
 <span data-ttu-id="b2f2d-2279"><paramref name="keySelector" /> が <see langword="null" /> のキーを生成しています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2279"><paramref name="keySelector" /> produces a key that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b2f2d-2280"><paramref name="keySelector" /> が 2 つの要素に対して重複するキーを生成しています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2280"><paramref name="keySelector" /> produces duplicate keys for two elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TSource&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2281"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2281">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-2282"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2282">The type of the keys returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2283"><see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2283">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-2284">各要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2284">A function to extract a key from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-2285">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2285">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2286">指定されたキー セレクター関数およびキーの比較子に従って、<see cref="T:System.Collections.Generic.Dictionary`2" /> から <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2286">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2287">キーと値を格納している <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2287">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2288">場合`comparer`は`null`、既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>キーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2288">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2289"><paramref name="source" /> または <paramref name="keySelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2289"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b2f2d-2290">または</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2290">-or-</span></span> 
 <span data-ttu-id="b2f2d-2291"><paramref name="keySelector" /> が <see langword="null" /> のキーを生成しています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2291"><paramref name="keySelector" /> produces a key that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b2f2d-2292"><paramref name="keySelector" /> が 2 つの要素に対して重複するキーを生成しています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2292"><paramref name="keySelector" /> produces duplicate keys for two elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2293"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2293">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-2294"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2294">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="b2f2d-2295"><paramref name="elementSelector" /> によって返される値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2295">The type of the value returned by <paramref name="elementSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2296"><see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2296">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-2297">各要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2297">A function to extract a key from each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="b2f2d-2298">各要素から結果の要素値を生成する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2298">A transform function to produce a result element value from each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2299">指定されたキー セレクター関数および要素セレクター関数に従って、<see cref="T:System.Collections.Generic.Dictionary`2" /> から <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2299">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2300">入力シーケンスから選択された <paramref name="TElement" /> 型の値を格納する <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2300">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2301"><xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>メソッドは既定の等値比較子を使用して<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>キーを比較します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2301">The <xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2302"><paramref name="source" />、<paramref name="keySelector" />、または <paramref name="elementSelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2302"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b2f2d-2303">または</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2303">-or-</span></span> 
 <span data-ttu-id="b2f2d-2304"><paramref name="keySelector" /> が <see langword="null" /> のキーを生成しています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2304"><paramref name="keySelector" /> produces a key that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b2f2d-2305"><paramref name="keySelector" /> が 2 つの要素に対して重複するキーを生成しています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2305"><paramref name="keySelector" /> produces duplicate keys for two elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2306"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2306">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-2307"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2307">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="b2f2d-2308"><paramref name="elementSelector" /> によって返される値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2308">The type of the value returned by <paramref name="elementSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2309"><see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2309">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-2310">各要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2310">A function to extract a key from each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="b2f2d-2311">各要素から結果の要素値を生成する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2311">A transform function to produce a result element value from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-2312">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2312">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2313">指定されたキー セレクター関数、比較子、および要素セレクター関数に従って、<see cref="T:System.Collections.Generic.Dictionary`2" /> から <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2313">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer, and an element selector function.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2314">入力シーケンスから選択された <paramref name="TElement" /> 型の値を格納する <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2314">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2315">場合`comparer`は`null`、既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>キーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2315">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2316"><paramref name="source" />、<paramref name="keySelector" />、または <paramref name="elementSelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2316"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b2f2d-2317">または</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2317">-or-</span></span> 
 <span data-ttu-id="b2f2d-2318"><paramref name="keySelector" /> が <see langword="null" /> のキーを生成しています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2318"><paramref name="keySelector" /> produces a key that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b2f2d-2319"><paramref name="keySelector" /> が 2 つの要素に対して重複するキーを生成しています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2319"><paramref name="keySelector" /> produces duplicate keys for two elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToHashSet&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.HashSet`1&lt;!!TSource&gt; ToHashSet&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSet(Of TSource) (source As IEnumerable(Of TSource)) As HashSet(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::HashSet&lt;TSource&gt; ^ ToHashSet(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToHashSet : seq&lt;'Source&gt; -&gt; System.Collections.Generic.HashSet&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToHashSet source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2320"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2320">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2321"><see cref="T:System.Collections.Generic.HashSet`1" /> の作成元の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2321">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2322"><see cref="T:System.Collections.Generic.IEnumerable`1" /> から <see cref="T:System.Collections.Generic.HashSet`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2322">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2323">入力シーケンスから選択された TSource 型の値を格納する <see cref="T:System.Collections.Generic.HashSet`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2323">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type TSource selected from the input sequence.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToHashSet&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.HashSet`1&lt;!!TSource&gt; ToHashSet&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSet(Of TSource) (source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As HashSet(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::HashSet&lt;TSource&gt; ^ ToHashSet(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToHashSet : seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Collections.Generic.HashSet&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToHashSet (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2324"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2324">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2325"><see cref="T:System.Collections.Generic.HashSet`1" /> の作成元の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2325">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-2326">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2326">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2327"><paramref name="comparer" /> を使用して <see cref="T:System.Collections.Generic.IEnumerable`1" />から <see cref="T:System.Collections.Generic.HashSet`1" /> を作成し、キーを比較します</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2327">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> using the <paramref name="comparer" /> to compare keys</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2328">入力シーケンスから選択された <paramref name="TSource" /> 型の値を格納する <see cref="T:System.Collections.Generic.HashSet`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2328">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type <paramref name="TSource" /> selected from the input sequence.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToList&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;TSource&gt; ToList&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;!!TSource&gt; ToList&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToList(Of TSource) (source As IEnumerable(Of TSource)) As List(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::List&lt;TSource&gt; ^ ToList(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToList : seq&lt;'Source&gt; -&gt; System.Collections.Generic.List&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToList source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2329"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2329">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2330"><see cref="T:System.Collections.Generic.IEnumerable`1" /> の作成元の <see cref="T:System.Collections.Generic.List`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2330">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2331"><see cref="T:System.Collections.Generic.IEnumerable`1" /> から <see cref="T:System.Collections.Generic.List`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2331">Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2332">入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.List`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2332">A <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2333"><xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>メソッドが強制的に即時のクエリの評価を返します、<xref:System.Collections.Generic.List%601>クエリの結果を格納しています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2333">The <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns a <xref:System.Collections.Generic.List%601> that contains the query results.</span></span> <span data-ttu-id="b2f2d-2334">このメソッドは、クエリの結果のキャッシュされたコピーを取得するためにクエリに追加できます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2334">You can append this method to your query in order to obtain a cached copy of the query results.</span></span>  
  
 <span data-ttu-id="b2f2d-2335"><xref:System.Linq.Enumerable.ToArray%2A> 同様の動作の代わりに配列を返しますが、<xref:System.Collections.Generic.List%601>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2335"><xref:System.Linq.Enumerable.ToArray%2A> has similar behavior but returns an array instead of a <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2336">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.ToList%2A>強制的に即時のクエリの評価を返す、<xref:System.Collections.Generic.List%601>クエリの結果を格納しています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2336">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToList%2A> to force immediate query evaluation and return a <xref:System.Collections.Generic.List%601> that contains the query results.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#106](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#106)]
 [!code-vb[System.Linq.Enumerable#106](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2337"><paramref name="source" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2337"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLookup&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-2338"><see cref="T:System.Linq.Lookup`2" /> からジェネリックの <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2338">Creates a generic <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TSource&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2339"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2339">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-2340"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2340">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2341"><see cref="T:System.Collections.Generic.IEnumerable`1" /> の作成元の <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2341">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-2342">各要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2342">A function to extract a key from each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2343">指定されたキー セレクター関数に従って、<see cref="T:System.Linq.Lookup`2" /> から <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2343">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2344">キーと値を格納している <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2344">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2345"><xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>メソッドを返します。 を<xref:System.Linq.Lookup%602>、値のコレクションにキーをマップする一対多の辞書。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2345">The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="b2f2d-2346">A<xref:System.Linq.Lookup%602>とは異なります、 <xref:System.Collections.Generic.Dictionary%602>、単一の値のキーの一対一のマッピングを実行します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2346">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="b2f2d-2347">既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>キーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2347">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2348"><paramref name="source" /> または <paramref name="keySelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2348"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TSource&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2349"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2349">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-2350"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2350">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2351"><see cref="T:System.Collections.Generic.IEnumerable`1" /> の作成元の <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2351">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-2352">各要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2352">A function to extract a key from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-2353">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2353">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2354">指定されたキー セレクター関数およびキーの比較子に従って、<see cref="T:System.Linq.Lookup`2" /> から <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2354">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2355">キーと値を格納している <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2355">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2356"><xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>メソッドを返します。 を<xref:System.Linq.Lookup%602>、値のコレクションにキーをマップする一対多の辞書。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2356">The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="b2f2d-2357">A<xref:System.Linq.Lookup%602>とは異なります、 <xref:System.Collections.Generic.Dictionary%602>、単一の値のキーの一対一のマッピングを実行します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2357">A <xref:System.Linq.Lookup%602> is different to a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="b2f2d-2358">場合`comparer`は`null`、既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>キーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2358">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2359"><paramref name="source" /> または <paramref name="keySelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2359"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TElement&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2360"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2360">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-2361"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2361">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="b2f2d-2362"><paramref name="elementSelector" /> によって返される値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2362">The type of the value returned by <paramref name="elementSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2363"><see cref="T:System.Collections.Generic.IEnumerable`1" /> の作成元の <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2363">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-2364">各要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2364">A function to extract a key from each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="b2f2d-2365">各要素から結果の要素値を生成する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2365">A transform function to produce a result element value from each element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2366">指定されたキー セレクター関数および要素セレクター関数に従って、<see cref="T:System.Linq.Lookup`2" /> から <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2366">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2367">入力シーケンスから選択された <paramref name="TElement" /> 型の値を格納する <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2367">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2368"><xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>メソッドを返します。 を<xref:System.Linq.Lookup%602>、値のコレクションにキーをマップする一対多の辞書。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2368">The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="b2f2d-2369">A<xref:System.Linq.Lookup%602>とは異なります、 <xref:System.Collections.Generic.Dictionary%602>、単一の値のキーの一対一のマッピングを実行します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2369">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="b2f2d-2370">既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>キーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2370">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2371">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>を作成する、<xref:System.Linq.Lookup%602>キー セレクター関数および要素セレクター関数を使用しています。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2371">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to create a <xref:System.Linq.Lookup%602> by using a key selector function and an element selector function.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#107](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#107)]
 [!code-vb[System.Linq.Enumerable#107](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2372"><paramref name="source" />、<paramref name="keySelector" />、または <paramref name="elementSelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2372"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TElement&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2373"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2373">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="b2f2d-2374"><paramref name="keySelector" /> によって返されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2374">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="b2f2d-2375"><paramref name="elementSelector" /> によって返される値の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2375">The type of the value returned by <paramref name="elementSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2376"><see cref="T:System.Collections.Generic.IEnumerable`1" /> の作成元の <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2376">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="b2f2d-2377">各要素からキーを抽出する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2377">A function to extract a key from each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="b2f2d-2378">各要素から結果の要素値を生成する変換関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2378">A transform function to produce a result element value from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-2379">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2379">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2380">指定されたキー セレクター関数、比較子、および要素セレクター関数に従って、<see cref="T:System.Linq.Lookup`2" /> から <see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2380">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer and an element selector function.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2381">入力シーケンスから選択された <paramref name="TElement" /> 型の値を格納する <see cref="T:System.Linq.Lookup`2" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2381">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2382"><xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>メソッドを返します。 を<xref:System.Linq.Lookup%602>、値のコレクションにキーをマップする一対多の辞書。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2382">The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="b2f2d-2383">A<xref:System.Linq.Lookup%602>とは異なります、 <xref:System.Collections.Generic.Dictionary%602>、単一の値のキーの一対一のマッピングを実行します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2383">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="b2f2d-2384">場合`comparer`は`null`、既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>キーを比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2384">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2385"><paramref name="source" />、<paramref name="keySelector" />、または <paramref name="elementSelector" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2385"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Union&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-2386">2 つのシーケンスの和集合を生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2386">Produces the set union of two sequences.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note-some.md)]

]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Union : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Union (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2387">入力シーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2387">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="b2f2d-2388">和集合の最初のセットを形成する一意の要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2388">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span></span></param>
        <param name="second"><span data-ttu-id="b2f2d-2389">和集合の 2 番目のセットを形成する一意の要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2389">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2390">既定の等値比較子を使用して、2 つのシーケンスの和集合を生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2390">Produces the set union of two sequences by using the default equality comparer.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2391">2 つの入力シーケンスの要素 (重複する要素は除く) を格納している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2391">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2392">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2392">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-2393">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2393">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-2394">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2394">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2395">このメソッドは、戻り値のセットから重複を除外します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2395">This method excludes duplicates from the return set.</span></span> <span data-ttu-id="b2f2d-2396">これは、異なる動作を<xref:System.Linq.Enumerable.Concat%2A>メソッドで、重複を含めて入力シーケンスのすべての要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2396">This is different behavior to the <xref:System.Linq.Enumerable.Concat%2A> method, which returns all the elements in the input sequences including duplicates.</span></span>  
  
 <span data-ttu-id="b2f2d-2397">既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>、実装する型の値を比較するために使用、<xref:System.Collections.Generic.IEqualityComparer%601>ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2397">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="b2f2d-2398">カスタム データ型を比較する必要がありますをこのインターフェイスを実装し、独自<xref:System.Object.GetHashCode%2A>と<xref:System.Object.Equals%2A>型のメソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2398">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
 <span data-ttu-id="b2f2d-2399">このメソッドによって返されるオブジェクトが列挙されたときに`Union`列挙`first`と`second`をこの順序で既に生成されていない各の要素を生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2399">When the object returned by this method is enumerated, `Union` enumerates `first` and `second` in that order and yields each element that has not already been yielded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2400">次のコード例は、使用する方法を示します`Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)`整数の 2 つのシーケンスの和集合を取得します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2400">The following code example demonstrates how to use `Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` to obtain the union of two sequences of integers.</span></span>  
  
 [!code-csharp-interactive[System.Linq.Enumerable#109](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#109)]
 [!code-vb[System.Linq.Enumerable#109](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#109)]  
  
 <span data-ttu-id="b2f2d-2401">実装する必要があるいくつかのカスタム データ型のオブジェクトのシーケンスを比較する場合は、<xref:System.IEquatable%601>ヘルパー クラスでジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2401">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in a helper class.</span></span> <span data-ttu-id="b2f2d-2402">次のコード例は、カスタム データ型にこのインターフェイスを実装し、オーバーライドする方法を示しています。<xref:System.Object.GetHashCode%2A>と<xref:System.Object.Equals%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2402">The following code example shows how to implement this interface in a custom data type and override <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
 [!code-vb[CSLINQEncapsulatedComparer#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#9)]  

 <span data-ttu-id="b2f2d-2403">このインターフェイスを実装した後のシーケンスを使用することができます`ProductA`内のオブジェクト、`Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)`メソッドを次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2403">After you implement this interface, you can use sequences of `ProductA` objects in the `Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]
 [!code-vb[CSLINQEncapsulatedComparer#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#10)]

[!code-csharp[CSLINQEncapsulatedComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#4)]
[!code-vb[CSLINQEncapsulatedComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2404"><paramref name="first" /> または <paramref name="second" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2404"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Union : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Union (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2405">入力シーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2405">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="b2f2d-2406">和集合の最初のセットを形成する一意の要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2406">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span></span></param>
        <param name="second"><span data-ttu-id="b2f2d-2407">和集合の 2 番目のセットを形成する一意の要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2407">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span></span></param>
        <param name="comparer"><span data-ttu-id="b2f2d-2408">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2408">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2409">指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して 2 つのシーケンスの和集合を生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2409">Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2410">2 つの入力シーケンスの要素 (重複する要素は除く) を格納している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2410">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2411">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2411">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-2412">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2412">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-2413">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2413">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2414">場合`comparer`は`null`、既定の等値比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>値を比較するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2414">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
 <span data-ttu-id="b2f2d-2415">このメソッドによって返されるオブジェクトが列挙されたときに<xref:System.Linq.Enumerable.Union%2A>列挙`first`と`second`をこの順序で既に生成されていない各の要素を生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2415">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.</span></span>  
  
 <span data-ttu-id="b2f2d-2416"><xref:System.Linq.Enumerable.Concat%2A>メソッドとは異なります、<xref:System.Linq.Enumerable.Union%2A>メソッドのため、<xref:System.Linq.Enumerable.Concat%2A>メソッドは、一方で重複を含む、入力シーケンス内のすべての要素を返します<xref:System.Linq.Enumerable.Union%2A>一意の値のみを返します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2416">The <xref:System.Linq.Enumerable.Concat%2A> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%2A> method returns all the elements in the input sequences including duplicates, whereas <xref:System.Linq.Enumerable.Union%2A> returns only unique values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2417">次の例で使用できる等値比較子を実装する方法を示しています、<xref:System.Linq.Enumerable.Union%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2417">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Union%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="b2f2d-2418">この比較演算子を実装すると後のシーケンスを使用することができます`Product`内のオブジェクト、<xref:System.Linq.Enumerable.Union%2A>メソッドを次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2418">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Union%2A> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]
 [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  
[!code-csharp[CSLINQCustomComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#4)]
[!code-vb[CSLINQCustomComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2419"><paramref name="first" /> または <paramref name="second" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2419"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Where&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b2f2d-2420">述語に基づいて値のシーケンスをフィルター処理します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2420">Filters a sequence of values based on a predicate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2421"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2421">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2422">フィルター処理する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2422">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-2423">各要素が条件を満たしているかどうかをテストする関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2423">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2424">述語に基づいて値のシーケンスをフィルター処理します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2424">Filters a sequence of values based on a predicate.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2425">条件を満たす、入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2425">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2426">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2426">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-2427">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2427">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-2428">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2428">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2429">クエリ式の構文で、 `where` (Visual C#) または`Where`の呼び出しに変換します (Visual Basic) 句<xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2429">In query expression syntax, a `where` (Visual C#) or `Where` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2430">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>シーケンスをフィルター処理します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2430">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to filter a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#110](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#110)]
 [!code-vb[System.Linq.Enumerable#110](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2431"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2431"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/where-clause.md"><span data-ttu-id="b2f2d-2432">where 句 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2432">where clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/where-clause.md"><span data-ttu-id="b2f2d-2433">Where 句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2433">Where Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b2f2d-2434"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2434">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b2f2d-2435">フィルター処理する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2435">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span></span></param>
        <param name="predicate"><span data-ttu-id="b2f2d-2436">各ソース要素が条件に当てはまるかどうかをテストする関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2436">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2437">述語に基づいて値のシーケンスをフィルター処理します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2437">Filters a sequence of values based on a predicate.</span></span> <span data-ttu-id="b2f2d-2438">各要素のインデックスは、述語関数のロジックで使用されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2438">Each element's index is used in the logic of the predicate function.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2439">条件を満たす、入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2439">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2440">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2440">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-2441">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2441">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-2442">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2442">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2443">最初の引数`predicate`をテストする要素を表します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2443">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="b2f2d-2444">2 番目の引数内の要素の 0 から始まるインデックスを表す`source`します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2444">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2445">次のコード例は、使用する方法を示します<xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29>を各要素のインデックスを含む述語に基づいてシーケンスをフィルター処理します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2445">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to filter a sequence based on a predicate that involves the index of each element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#111](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#111)]
 [!code-vb[System.Linq.Enumerable#111](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2446"><paramref name="source" /> または <paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2446"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Zip&lt;TFirst,TSecond,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IEnumerable&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSecond&gt; second, class System.Func`3&lt;!!TFirst, !!TSecond, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip(Of TFirst, TSecond, TResult) (first As IEnumerable(Of TFirst), second As IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFirst, typename TSecond, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Zip(System::Collections::Generic::IEnumerable&lt;TFirst&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSecond&gt; ^ second, Func&lt;TFirst, TSecond, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Zip : seq&lt;'First&gt; * seq&lt;'Second&gt; * Func&lt;'First, 'Second, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Zip (first, second, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst" />
        <TypeParameter Name="TSecond" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TFirst&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSecond&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TFirst,TSecond,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFirst"><span data-ttu-id="b2f2d-2447">1 番目の入力シーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2447">The type of the elements of the first input sequence.</span></span></typeparam>
        <typeparam name="TSecond"><span data-ttu-id="b2f2d-2448">2 番目の入力シーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2448">The type of the elements of the second input sequence.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="b2f2d-2449">結果のシーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2449">The type of the elements of the result sequence.</span></span></typeparam>
        <param name="first"><span data-ttu-id="b2f2d-2450">マージする 1 番目のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2450">The first sequence to merge.</span></span></param>
        <param name="second"><span data-ttu-id="b2f2d-2451">マージする 2 番目のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2451">The second sequence to merge.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="b2f2d-2452">2 つのシーケンスの要素をマージする方法を指定する関数。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2452">A function that specifies how to merge the elements from the two sequences.</span></span></param>
        <summary><span data-ttu-id="b2f2d-2453">2 つのシーケンスの対応する要素に対して、1 つの指定した関数を適用し、結果として 1 つのシーケンスを生成します。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2453">Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</span></span></summary>
        <returns><span data-ttu-id="b2f2d-2454">2 つの入力シーケンスのマージされた要素が格納されている <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2454">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains merged elements of two input sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2f2d-2455">このメソッドは、遅延実行を使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2455">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="b2f2d-2456">即時の戻り値は、操作を実行するために必要なすべての情報を格納するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2456">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="b2f2d-2457">か、呼び出すことによって、オブジェクトが列挙されるまで、このメソッドによって表されるクエリは実行されません、`GetEnumerator`メソッドを使用して直接または`foreach`Visual C# または`For Each`Visual Basic で。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2457">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="b2f2d-2458">メソッドは、最初のシーケンスの各要素と 2 番目のシーケンスで、同じインデックスを持つ要素をマージします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2458">The method merges each element of the first sequence with an element that has the same index in the second sequence.</span></span> <span data-ttu-id="b2f2d-2459">メソッドに、シーケンスには、同じ数の要素がない、うち 1 つの末尾に到達するまでのシーケンスをマージします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2459">If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</span></span> <span data-ttu-id="b2f2d-2460">たとえば、1 つのシーケンスに 3 つの要素があり、ユーザーが 4 個のもう 1 つは、結果のシーケンスはのみに 3 つの要素があります。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2460">For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2f2d-2461">次のコード例は、使用する方法を示します、<xref:System.Linq.Enumerable.Zip%2A>メソッドを 2 つのシーケンスをマージします。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2461">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.Zip%2A> method to merge two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#200](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#200)]
 [!code-vb[System.Linq.Enumerable#200](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#200)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b2f2d-2462"><paramref name="first" /> または <paramref name="second" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b2f2d-2462"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>