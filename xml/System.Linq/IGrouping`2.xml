<Type Name="IGrouping&lt;TKey,TElement&gt;" FullName="System.Linq.IGrouping&lt;TKey,TElement&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="437dfcb6e83ef51b61ada590d84a404bfdbf3010" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51316983" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IGrouping&lt;out TKey,out TElement&gt; : System.Collections.Generic.IEnumerable&lt;out TElement&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IGrouping`2&lt;+ TKey, + TElement&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!TElement&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IGrouping`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IGrouping(Of Out TKey, Out TElement)&#xA;Implements IEnumerable(Of Out TElement)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TElement&gt;&#xA;public interface class IGrouping : System::Collections::Generic::IEnumerable&lt;TElement&gt;" />
  <TypeSignature Language="F#" Value="type IGrouping&lt;'Key, 'Element&gt; = interface&#xA;    interface seq&lt;'Element&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TElement">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TElement&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">
      <see cref="T:System.Linq.IGrouping`2" /> のキーの型。</typeparam>
    <typeparam name="TElement">
      <see cref="T:System.Linq.IGrouping`2" /> 内の値の型。</typeparam>
    <summary>共通のキーを持つオブジェクトのコレクションを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Linq.IGrouping%602>は、<xref:System.Collections.Generic.IEnumerable%601>をさらに、キーを持ちます。 キーの各値に共通の属性が表して、<xref:System.Linq.IGrouping%602>します。  
  
 値、<xref:System.Linq.IGrouping%602>の要素として非常にアクセスする<xref:System.Collections.Generic.IEnumerable%601>にアクセスします。 値を使用してアクセスするなど、 `foreach` Visual c# でまたは`For Each`を反復処理するループを Visual Basic で、<xref:System.Linq.IGrouping%602>オブジェクト。 例のセクションには、キーと値の両方にアクセスする方法を示すコード例が含まれています、<xref:System.Linq.IGrouping%602>オブジェクト。  
  
 <xref:System.Linq.IGrouping%602>型によって使用されます、<xref:System.Linq.Enumerable.GroupBy%2A>標準クエリ演算子メソッドは、型の要素のシーケンスを返す<xref:System.Linq.IGrouping%602>します。  
  
   
  
## Examples  
 次の例では、使用する方法、<xref:System.Linq.IGrouping%602>オブジェクト。  
  
 この例で<xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>の配列で呼び出される<xref:System.Reflection.MemberInfo>によって返されるオブジェクト<xref:System.Type.GetMembers%2A>します。 <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> 値に基づくオブジェクトをグループ化、<xref:System.Reflection.MemberInfo.MemberType%2A>プロパティ。 一意の値ごと<xref:System.Reflection.MemberInfo.MemberType%2A>の配列で<xref:System.Reflection.MemberInfo>オブジェクトの新しいキーとなります<xref:System.Linq.IGrouping%602>オブジェクト、および<xref:System.Reflection.MemberInfo>をそのキーの形式を持つオブジェクト、<xref:System.Linq.IGrouping%602>値のオブジェクトのシーケンス。  
  
 最後に、<xref:System.Linq.Enumerable.First%2A>のシーケンスのメソッドが呼び出される<xref:System.Linq.IGrouping%602>最初だけを取得するオブジェクト<xref:System.Linq.IGrouping%602>オブジェクト。  
  
 例では、出力のキー、<xref:System.Linq.IGrouping%602>オブジェクトと<xref:System.Reflection.MemberInfo.Name%2A>内の各値のプロパティ、<xref:System.Linq.IGrouping%602>値のオブジェクトのシーケンス。 アクセスすることに注意して、<xref:System.Linq.IGrouping%602>値のオブジェクトのシーケンスを使用するだけです、<xref:System.Linq.IGrouping%602>変数自体。  
  
 [!code-csharp[System.Linq.IGrouping#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.IGrouping/CS/igrouping.cs#1)]
 [!code-vb[System.Linq.IGrouping#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.IGrouping/VB/IGrouping.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public TKey Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TKey Key" />
      <MemberSignature Language="DocId" Value="P:System.Linq.IGrouping`2.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As TKey" />
      <MemberSignature Language="F#" Value="member this.Key : 'Key" Usage="System.Linq.IGrouping&lt;'Key, 'Element&gt;.Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TKey Key { TKey get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Linq.IGrouping`2" /> のキーを取得します。</summary>
        <value>
          <see cref="T:System.Linq.IGrouping`2" /> のキー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 キー、<xref:System.Linq.IGrouping%602>内の各値に共通する属性を表す、<xref:System.Linq.IGrouping%602>します。  
  
   
  
## Examples  
 次の例では、使用する方法、<xref:System.Linq.IGrouping%602.Key%2A>プロパティごとにラベルを付ける<xref:System.Linq.IGrouping%602>オブジェクトのシーケンスの<xref:System.Linq.IGrouping%602>オブジェクト。 <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>のシーケンスを取得するメソッドが使用される<xref:System.Linq.IGrouping%602>オブジェクト。 `foreach` Visual c# または`For Each`Visual Basic でループを反復処理して各<xref:System.Linq.IGrouping%602>オブジェクト、そのキーとが含まれている値の数を出力します。  
  
 [!code-csharp[System.Linq.IGrouping#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.IGrouping/CS/igrouping.cs#2)]
 [!code-vb[System.Linq.IGrouping#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.IGrouping/VB/IGrouping.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>