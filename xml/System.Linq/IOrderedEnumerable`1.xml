<Type Name="IOrderedEnumerable&lt;TElement&gt;" FullName="System.Linq.IOrderedEnumerable&lt;TElement&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1d116ef4580660d681c9ea51991421c6a1e1d295" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70575793" /></Metadata><TypeSignature Language="C#" Value="public interface IOrderedEnumerable&lt;TElement&gt; : System.Collections.Generic.IEnumerable&lt;TElement&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOrderedEnumerable`1&lt;TElement&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!TElement&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IOrderedEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOrderedEnumerable(Of TElement)&#xA;Implements IEnumerable(Of TElement)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TElement&gt;&#xA;public interface class IOrderedEnumerable : System::Collections::Generic::IEnumerable&lt;TElement&gt;" />
  <TypeSignature Language="F#" Value="type IOrderedEnumerable&lt;'Element&gt; = interface&#xA;    interface seq&lt;'Element&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TElement" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TElement&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TElement"><span data-ttu-id="0550a-101">シーケンスの要素の型。</span><span class="sxs-lookup"><span data-stu-id="0550a-101">The type of the elements of the sequence.</span></span></typeparam>
    <summary><span data-ttu-id="0550a-102">並べ替えられたシーケンスを表します。</span><span class="sxs-lookup"><span data-stu-id="0550a-102">Represents a sorted sequence.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0550a-103">この型は、から<xref:System.Collections.Generic.IEnumerable%601>継承されるため、列挙可能です。</span><span class="sxs-lookup"><span data-stu-id="0550a-103">This type is enumerable because it inherits from <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="0550a-104">拡張メソッド<xref:System.Linq.Enumerable.ThenBy%2A>と<xref:System.Linq.Enumerable.ThenByDescending%2A>は、型<xref:System.Linq.IOrderedEnumerable%601>のオブジェクトを操作します。</span><span class="sxs-lookup"><span data-stu-id="0550a-104">The extension methods <xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> operate on objects of type <xref:System.Linq.IOrderedEnumerable%601>.</span></span> <span data-ttu-id="0550a-105">型<xref:System.Linq.IOrderedEnumerable%601>のオブジェクトを取得するに<xref:System.Linq.IOrderedEnumerable%601>は、いずれかのプライマリ並べ替えメソッドを<xref:System.Linq.Enumerable.OrderBy%2A>呼び<xref:System.Linq.Enumerable.OrderByDescending%2A>出すか、を返すを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0550a-105">An object of type <xref:System.Linq.IOrderedEnumerable%601> can be obtained by calling one of the primary sort methods, <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A>, which return an <xref:System.Linq.IOrderedEnumerable%601>.</span></span> <span data-ttu-id="0550a-106"><xref:System.Linq.Enumerable.ThenBy%2A>また、下位の並べ替えメソッドも、型<xref:System.Linq.IOrderedEnumerable%601>のオブジェクトを返します。 <xref:System.Linq.Enumerable.ThenByDescending%2A></span><span class="sxs-lookup"><span data-stu-id="0550a-106"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A>, the subordinate sort methods, in turn also return an object of type <xref:System.Linq.IOrderedEnumerable%601>.</span></span> <span data-ttu-id="0550a-107">この設計では、またはの連続する<xref:System.Linq.Enumerable.ThenBy%2A>任意<xref:System.Linq.Enumerable.ThenByDescending%2A>の数の呼び出しを行うことができます。各呼び出しでは、前の呼び出しで返された並べ替えられたデータに対して下位の順序が実行されます。</span><span class="sxs-lookup"><span data-stu-id="0550a-107">This design allows for any number of consecutive calls to <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>, where each call performs a subordinate ordering on the sorted data returned from the previous call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0550a-108">次の例は、文字列の配列でプライマリとセカンダリの順序付けを実行する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="0550a-108">The following example demonstrates how to perform a primary and secondary ordering on an array of strings.</span></span> <span data-ttu-id="0550a-109">また、結果として<xref:System.Linq.IOrderedEnumerable%601>得られるが列挙可能であることも示します。</span><span class="sxs-lookup"><span data-stu-id="0550a-109">It also demonstrates that the resulting <xref:System.Linq.IOrderedEnumerable%601> is enumerable.</span></span>  
  
 [!code-csharp[System.Linq.IOrderedEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/CS/IOrderedEnumerable.cs#1)]
 [!code-vb[System.Linq.IOrderedEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/VB/IOrderedEnumerable.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateOrderedEnumerable&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedEnumerable&lt;TElement&gt; CreateOrderedEnumerable&lt;TKey&gt; (Func&lt;TElement,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer, bool descending);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedEnumerable`1&lt;!TElement&gt; CreateOrderedEnumerable&lt;TKey&gt;(class System.Func`2&lt;!TElement, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer, bool descending) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateOrderedEnumerable(Of TKey) (keySelector As Func(Of TElement, TKey), comparer As IComparer(Of TKey), descending As Boolean) As IOrderedEnumerable(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey&gt;&#xA; System::Linq::IOrderedEnumerable&lt;TElement&gt; ^ CreateOrderedEnumerable(Func&lt;TElement, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer, bool descending);" />
      <MemberSignature Language="F#" Value="abstract member CreateOrderedEnumerable : Func&lt;'Element, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; * bool -&gt; System.Linq.IOrderedEnumerable&lt;'Element&gt;" Usage="iOrderedEnumerable.CreateOrderedEnumerable (keySelector, comparer, descending)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TElement,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        <Parameter Name="descending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="0550a-110"><paramref name="keySelector" /> によって生成されるキーの型。</span><span class="sxs-lookup"><span data-stu-id="0550a-110">The type of the key produced by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="keySelector"><span data-ttu-id="0550a-111">各要素のキーの抽出に使用される <see cref="T:System.Func`2" />。</span><span class="sxs-lookup"><span data-stu-id="0550a-111">The <see cref="T:System.Func`2" /> used to extract the key for each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="0550a-112">返されたシーケンスでの配置用のキーの比較に使用される <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="0550a-112">The <see cref="T:System.Collections.Generic.IComparer`1" /> used to compare keys for placement in the returned sequence.</span></span></param>
        <param name="descending"><span data-ttu-id="0550a-113">要素を降順に並べ替える <see langword="true" />、要素を昇順に並べ替える <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0550a-113"><see langword="true" /> to sort the elements in descending order; <see langword="false" /> to sort the elements in ascending order.</span></span></param>
        <summary><span data-ttu-id="0550a-114">キーに従って <see cref="T:System.Linq.IOrderedEnumerable`1" /> の要素に対して後続の並べ替えを実行します。</span><span class="sxs-lookup"><span data-stu-id="0550a-114">Performs a subsequent ordering on the elements of an <see cref="T:System.Linq.IOrderedEnumerable`1" /> according to a key.</span></span></summary>
        <returns><span data-ttu-id="0550a-115">要素がキーに従って並べ替えられている <see cref="T:System.Linq.IOrderedEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="0550a-115">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0550a-116">このメソッドによって提供される機能は、 <xref:System.Linq.Enumerable.ThenBy%2A>が<xref:System.Linq.Enumerable.ThenByDescending%2A> `true`また`false`はのどちら`descending`であるかによって、またはによって提供される機能と似ています。</span><span class="sxs-lookup"><span data-stu-id="0550a-116">The functionality provided by this method is like that provided by <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>, depending on whether `descending` is `true` or `false`.</span></span> <span data-ttu-id="0550a-117">どちらも、既に並べ替えられた型<xref:System.Linq.IOrderedEnumerable%601>のシーケンスの下位の順序付けを実行します。</span><span class="sxs-lookup"><span data-stu-id="0550a-117">They both perform a subordinate ordering of an already sorted sequence of type <xref:System.Linq.IOrderedEnumerable%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0550a-118">次のコード例では、 <xref:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable*> <xref:System.Linq.IOrderedEnumerable%601>を使用してで2次的な順序を実行する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="0550a-118">The following code example demonstrates how to use <xref:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable*> to perform a secondary ordering on an <xref:System.Linq.IOrderedEnumerable%601>.</span></span>  
  
 [!code-csharp[System.Linq.IOrderedEnumerable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/CS/IOrderedEnumerable.cs#2)]
 [!code-vb[System.Linq.IOrderedEnumerable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/VB/IOrderedEnumerable.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
