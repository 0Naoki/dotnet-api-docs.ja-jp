<Type Name="Lookup&lt;TKey,TElement&gt;" FullName="System.Linq.Lookup&lt;TKey,TElement&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="284934248862ceef6883f62936de361c7c920db7" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52220247" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Lookup&lt;TKey,TElement&gt; : System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;, System.Linq.ILookup&lt;TKey,TElement&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Lookup`2&lt;TKey, TElement&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!TKey, !TElement&gt;&gt;, class System.Collections.IEnumerable, class System.Linq.ILookup`2&lt;!TKey, !TElement&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Lookup`2" />
  <TypeSignature Language="VB.NET" Value="Public Class Lookup(Of TKey, TElement)&#xA;Implements IEnumerable(Of IGrouping(Of TKey, TElement)), ILookup(Of TKey, TElement)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TElement&gt;&#xA;public ref class Lookup : System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt;, System::Linq::ILookup&lt;TKey, TElement&gt;" />
  <TypeSignature Language="F#" Value="type Lookup&lt;'Key, 'Element&gt; = class&#xA;    interface seq&lt;IGrouping&lt;'Key, 'Element&gt;&gt;&#xA;    interface ILookup&lt;'Key, 'Element&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TElement" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.ILookup&lt;TKey,TElement&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">
      <span data-ttu-id="3221d-101">
        <see cref="T:System.Linq.Lookup`2" /> 内のキーの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3221d-101">The type of the keys in the <see cref="T:System.Linq.Lookup`2" />.</span>
      </span>
    </typeparam>
    <typeparam name="TElement">
      <span data-ttu-id="3221d-102">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 内の各 <see cref="T:System.Linq.Lookup`2" /> 値の要素の型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3221d-102">The type of the elements of each <see cref="T:System.Collections.Generic.IEnumerable`1" /> value in the <see cref="T:System.Linq.Lookup`2" />.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="3221d-103">それぞれ 1 つ以上の値に割り当てられたキーのコレクションを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3221d-103">Represents a collection of keys each mapped to one or more values.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3221d-104">A<xref:System.Linq.Lookup%602>に似ています、<xref:System.Collections.Generic.Dictionary%602>します。</span><span class="sxs-lookup"><span data-stu-id="3221d-104">A <xref:System.Linq.Lookup%602> resembles a <xref:System.Collections.Generic.Dictionary%602>.</span></span> <span data-ttu-id="3221d-105">される点が異なりますを<xref:System.Collections.Generic.Dictionary%602>は単一の値をキーにマップを<xref:System.Linq.Lookup%602>値のコレクションにキーをマップします。</span><span class="sxs-lookup"><span data-stu-id="3221d-105">The difference is that a <xref:System.Collections.Generic.Dictionary%602> maps keys to single values, whereas a <xref:System.Linq.Lookup%602> maps keys to collections of values.</span></span>  
  
 <span data-ttu-id="3221d-106">インスタンスを作成することができます、<xref:System.Linq.Lookup%602>呼び出して<xref:System.Linq.Enumerable.ToLookup%2A>を実装するオブジェクトの<xref:System.Collections.Generic.IEnumerable%601>します。</span><span class="sxs-lookup"><span data-stu-id="3221d-106">You can create an instance of a <xref:System.Linq.Lookup%602> by calling <xref:System.Linq.Enumerable.ToLookup%2A> on an object that implements <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3221d-107">新しいインスタンスを作成するパブリック コンス トラクターはありません、<xref:System.Linq.Lookup%602>します。</span><span class="sxs-lookup"><span data-stu-id="3221d-107">There is no public constructor to create a new instance of a <xref:System.Linq.Lookup%602>.</span></span> <span data-ttu-id="3221d-108">さらに、<xref:System.Linq.Lookup%602>オブジェクトは不変、つまり、追加または要素またはからキーを削除することはできません、<xref:System.Linq.Lookup%602>オブジェクトが作成されています。</span><span class="sxs-lookup"><span data-stu-id="3221d-108">Additionally, <xref:System.Linq.Lookup%602> objects are immutable, that is, you cannot add or remove elements or keys from a <xref:System.Linq.Lookup%602> object after it has been created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3221d-109">次の例では、作成、<xref:System.Linq.Lookup%602>オブジェクトのコレクションから。</span><span class="sxs-lookup"><span data-stu-id="3221d-109">The following example creates a <xref:System.Linq.Lookup%602> from a collection of objects.</span></span> <span data-ttu-id="3221d-110">列挙し、<xref:System.Linq.Lookup%602>各キーと値のキーの関連付けられているコレクション内の各値を出力します。</span><span class="sxs-lookup"><span data-stu-id="3221d-110">It then enumerates the <xref:System.Linq.Lookup%602> and outputs each key and each value in the key's associated collection of values.</span></span> <span data-ttu-id="3221d-111">プロパティを使用する方法も示します<xref:System.Linq.Lookup%602.Count%2A>と<xref:System.Linq.Lookup%602.Item%2A>メソッドと<xref:System.Linq.Lookup%602.Contains%2A>と<xref:System.Linq.Lookup%602.GetEnumerator%2A>します。</span><span class="sxs-lookup"><span data-stu-id="3221d-111">It also demonstrates how to use the properties <xref:System.Linq.Lookup%602.Count%2A> and <xref:System.Linq.Lookup%602.Item%2A> and the methods <xref:System.Linq.Lookup%602.Contains%2A> and <xref:System.Linq.Lookup%602.GetEnumerator%2A>.</span></span>  
  
 [!code-csharp[System.Linq.Lookup#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Lookup/CS/lookup.cs#1)]
 [!code-vb[System.Linq.Lookup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Lookup/VB/Lookup.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplyResultSelector&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TResult&gt; ApplyResultSelector&lt;TResult&gt; (Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; ApplyResultSelector&lt;TResult&gt;(class System.Func`3&lt;!TKey, class System.Collections.Generic.IEnumerable`1&lt;!TElement&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyResultSelector(Of TResult) (resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ ApplyResultSelector(Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="member this.ApplyResultSelector : Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="lookup.ApplyResultSelector resultSelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Linq.Lookup`2/&lt;ApplyResultSelector&gt;d__1`1))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Linq.Lookup`2/&lt;ApplyResultSelector&gt;d__13`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3221d-112">
            <paramref name="resultSelector" /> によって生成される結果の値の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-112">The type of the result values produced by <paramref name="resultSelector" />.</span>
          </span>
        </typeparam>
        <param name="resultSelector">
          <span data-ttu-id="3221d-113">各キーとその関連する値からの結果の値を導き出す関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-113">A function to project a result value from each key and its associated values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3221d-114">各キーとその関連する値に変換関数を適用し、結果を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-114">Applies a transform function to each key and its associated values and returns the results.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3221d-115">
            <see cref="T:System.Linq.Lookup`2" /> 内にあるキーと値コレクションの各ペアの 1 つの値が格納されるコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-115">A collection that contains one value for each key/value collection pair in the <see cref="T:System.Linq.Lookup`2" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Lookup`2.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'Key -&gt; bool&#xA;override this.Contains : 'Key -&gt; bool" Usage="lookup.Contains key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.ILookup`2.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="3221d-116">
            <see cref="T:System.Linq.Lookup`2" /> 内で検索するキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-116">The key to find in the <see cref="T:System.Linq.Lookup`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3221d-117">指定したキーが <see cref="T:System.Linq.Lookup`2" /> 内にあるかどうかを確認します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-117">Determines whether a specified key is in the <see cref="T:System.Linq.Lookup`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3221d-118">
            <paramref name="key" /> が <see cref="T:System.Linq.Lookup`2" /> 内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-118">
              <see langword="true" /> if <paramref name="key" /> is in the <see cref="T:System.Linq.Lookup`2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3221d-119">次の例を使用する方法を示します<xref:System.Linq.Lookup%602.Contains%2A>を決定するかどうかを<xref:System.Linq.Lookup%602>指定したキーが含まれています。</span><span class="sxs-lookup"><span data-stu-id="3221d-119">The following example demonstrates how to use <xref:System.Linq.Lookup%602.Contains%2A> to determine whether a <xref:System.Linq.Lookup%602> contains a specified key.</span></span> <span data-ttu-id="3221d-120">このコード例が示されている例の一部、<xref:System.Linq.Lookup%602>クラス。</span><span class="sxs-lookup"><span data-stu-id="3221d-120">This code example is part of a larger example provided for the <xref:System.Linq.Lookup%602> class.</span></span>  
  
 [!code-csharp[System.Linq.Lookup#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Lookup/CS/lookup.cs#4)]
 [!code-vb[System.Linq.Lookup#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Lookup/VB/Lookup.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Lookup`2.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Linq.Lookup&lt;'Key, 'Element&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.ILookup`2.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3221d-121">
            <see cref="T:System.Linq.Lookup`2" /> 内のキーと値コレクションのペアの数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-121">Gets the number of key/value collection pairs in the <see cref="T:System.Linq.Lookup`2" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3221d-122">
            <see cref="T:System.Linq.Lookup`2" /> 内のキーと値コレクションのペアの数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-122">The number of key/value collection pairs in the <see cref="T:System.Linq.Lookup`2" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3221d-123">値、<xref:System.Linq.Lookup%602.Count%2A>項目に追加されたり削除されたりすることはできませんので、プロパティは変更されません、<xref:System.Linq.Lookup%602>オブジェクトが作成されています。</span><span class="sxs-lookup"><span data-stu-id="3221d-123">The value of the <xref:System.Linq.Lookup%602.Count%2A> property does not change because items cannot be added to or removed from a <xref:System.Linq.Lookup%602> object after it has been created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3221d-124">次の例を使用する方法を示します<xref:System.Linq.Lookup%602.Count%2A>内のキー/値コレクションのペアの数を決定する、<xref:System.Linq.Lookup%602>します。</span><span class="sxs-lookup"><span data-stu-id="3221d-124">The following example demonstrates how to use <xref:System.Linq.Lookup%602.Count%2A> to determine the number of key/value collection pairs in a <xref:System.Linq.Lookup%602>.</span></span> <span data-ttu-id="3221d-125">このコード例が示されている例の一部、<xref:System.Linq.Lookup%602>クラス。</span><span class="sxs-lookup"><span data-stu-id="3221d-125">This code example is part of a larger example provided for the <xref:System.Linq.Lookup%602> class.</span></span>  
  
 [!code-csharp[System.Linq.Lookup#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Lookup/CS/lookup.cs#2)]
 [!code-vb[System.Linq.Lookup#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Lookup/VB/Lookup.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Linq.IGrouping`2&lt;!TKey, !TElement&gt;&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Lookup`2.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="lookup.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Linq.Lookup`2/&lt;GetEnumerator&gt;d__1))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Linq.Lookup`2/&lt;GetEnumerator&gt;d__12))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3221d-126">
            <see cref="T:System.Linq.Lookup`2" /> を反復処理するジェネリック列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-126">Returns a generic enumerator that iterates through the <see cref="T:System.Linq.Lookup`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3221d-127">
            <see cref="T:System.Linq.Lookup`2" /> の列挙子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-127">An enumerator for the <see cref="T:System.Linq.Lookup`2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3221d-128">次の例を使用する方法を示します<xref:System.Linq.Lookup%602.GetEnumerator%2A>をキーと値の反復処理する、<xref:System.Linq.Lookup%602>します。</span><span class="sxs-lookup"><span data-stu-id="3221d-128">The following example demonstrates how to use <xref:System.Linq.Lookup%602.GetEnumerator%2A> to iterate through the keys and values of a <xref:System.Linq.Lookup%602>.</span></span> <span data-ttu-id="3221d-129">このコード例が示されている例の一部、<xref:System.Linq.Lookup%602>クラス。</span><span class="sxs-lookup"><span data-stu-id="3221d-129">This code example is part of a larger example provided for the <xref:System.Linq.Lookup%602> class.</span></span>  
  
 [!code-csharp[System.Linq.Lookup#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Lookup/CS/lookup.cs#5)]
 [!code-vb[System.Linq.Lookup#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Lookup/VB/Lookup.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TElement&gt; this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TElement&gt; Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Lookup`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TKey) As IEnumerable(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;TElement&gt; ^ default[TKey] { System::Collections::Generic::IEnumerable&lt;TElement&gt; ^ get(TKey key); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : seq&lt;'Element&gt;" Usage="System.Linq.Lookup&lt;'Key, 'Element&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.ILookup`2.Item(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="3221d-130">必要な値のコレクションのキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-130">The key of the desired collection of values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3221d-131">指定したキーによりインデックス付けされた値のコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-131">Gets the collection of values indexed by the specified key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3221d-132">指定したキーによりインデックス付けされた値のコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-132">The collection of values indexed by the specified key.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3221d-133">このインデックス付きプロパティの値の特定のコレクションのインデックスを作成する機能を提供する、 <xref:System.Linq.Lookup%602> 、次の構文を使用して: `myLookup[key]` Visual c# または`myLookup(key)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="3221d-133">This indexed property provides the ability to index a specific collection of values in the <xref:System.Linq.Lookup%602> by using the following syntax: `myLookup[key]` in Visual C# or `myLookup(key)` in Visual Basic.</span></span> <span data-ttu-id="3221d-134">場合、`key`が見つからない、コレクション内に空のシーケンスが返されます。</span><span class="sxs-lookup"><span data-stu-id="3221d-134">If the `key` is not found in the collection, an empty sequence is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3221d-135">次の例を使用する方法を示します<xref:System.Linq.Lookup%602.Item%2A>に直接インデックスを作成、<xref:System.Linq.Lookup%602>します。</span><span class="sxs-lookup"><span data-stu-id="3221d-135">The following example demonstrates how to use <xref:System.Linq.Lookup%602.Item%2A> to index directly into a <xref:System.Linq.Lookup%602>.</span></span> <span data-ttu-id="3221d-136">このコード例が示されている例の一部、<xref:System.Linq.Lookup%602>クラス。</span><span class="sxs-lookup"><span data-stu-id="3221d-136">This code example is part of a larger example provided for the <xref:System.Linq.Lookup%602> class.</span></span>  
  
 [!code-csharp[System.Linq.Lookup#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Lookup/CS/lookup.cs#3)]
 [!code-vb[System.Linq.Lookup#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Lookup/VB/Lookup.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3221d-137">
            <see cref="T:System.Linq.Lookup`2" /> を反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-137">Returns an enumerator that iterates through the <see cref="T:System.Linq.Lookup`2" />.</span>
          </span>
          <span data-ttu-id="3221d-138">このクラスは継承できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-138">This class cannot be inherited.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3221d-139">
            <see cref="T:System.Linq.Lookup`2" /> の列挙子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3221d-139">An enumerator for the <see cref="T:System.Linq.Lookup`2" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>