<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Lookup`2.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae25fbb5-14a8-44f2-90c2-3c6d6fcaae7fbce0c33c358c210c3ec845aee721d6b9450d344e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bce0c33c358c210c3ec845aee721d6b9450d344e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b899505ed6d42225f2b3c9150bfdc080d0d1f9b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/28/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The type of the keys in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 内のキーの型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The type of the elements of each <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> value in the <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 内の各 <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 値の要素の型。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Linq.Lookup`2">
          <source>Represents a collection of keys each mapped to one or more values.</source>
          <target state="translated">それぞれ 1 つ以上の値にマップされているキーのコレクションを表します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> resembles a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>に似ています、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The difference is that a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> maps keys to single values, whereas a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> maps keys to collections of values.</source>
          <target state="translated">その違いは、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>一方、キーを 1 つの値を割り当てる、<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>キー値のコレクションを割り当てます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>You can create an instance of a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> by calling <ph id="ph2">&lt;xref:System.Linq.Enumerable.ToLookup%2A&gt;</ph> on an object that implements <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">インスタンスを作成することができます、<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>を呼び出して<ph id="ph2">&lt;xref:System.Linq.Enumerable.ToLookup%2A&gt;</ph>を実装するオブジェクトで<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>There is no public constructor to create a new instance of a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">新しいインスタンスを作成するパブリック コンス トラクターはありません、<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>Additionally, <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> objects are immutable, that is, you cannot add or remove elements or keys from a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> object after it has been created.</source>
          <target state="translated">さらに、<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>オブジェクトは不変、つまり、追加または要素またはからキーを削除することはできません、<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>が作成された後のオブジェクトします。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> from a collection of objects.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>オブジェクトのコレクションから。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>It then enumerates the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> and outputs each key and each value in the key's associated collection of values.</source>
          <target state="translated">列挙し、<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>し、各キーと値のキーの関連付けられているコレクション内の各値を出力します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>It also demonstrates how to use the properties <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph> and the methods <ph id="ph3">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph>.</source>
          <target state="translated">プロパティを使用する方法も示します<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph>およびメソッド<ph id="ph3">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>The type of the result values produced by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">によって生成される結果の値の型<bpt id="p1">&lt;c&gt;</bpt>ある resultSelector<ept id="p1">&lt;/c&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>A function to project a result value from each key and its associated values.</source>
          <target state="translated">各キーとその関連する値からの結果の値を導き出す関数。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>Applies a transform function to each key and its associated values and returns the results.</source>
          <target state="translated">各キーとその関連する値に変換関数を適用し、結果を返します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>A collection that contains one value for each key/value collection pair in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 内にあるキーと値コレクションの各ペアの 1 つの値が格納されるコレクション。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>The key to find in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 内で検索するキー。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>Determines whether a specified key is in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">指定したキーが <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 内にあるかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is in the <ph id="ph3">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="key" /&gt;</ph> が <ph id="ph3">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 内にある場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph> to determine whether a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> contains a specified key.</source>
          <target state="translated">次の例を使用する方法を示します<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph>を決定するかどうか、<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>指定したキーが含まれています。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Linq.Lookup`2.Count">
          <source>Gets the number of key/value collection pairs in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 内のキーと値コレクションのペアの数を取得します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>The number of key/value collection pairs in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 内のキーと値コレクションのペアの数。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>The value of the <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> property does not change because items cannot be added to or removed from a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> object after it has been created.</source>
          <target state="translated">値、<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph>項目を追加またはから削除できないために、プロパティは変更されません、<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>が作成された後のオブジェクトします。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> to determine the number of key/value collection pairs in a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">次の例を使用する方法を示します<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph>キーと値のコレクション ペアの数を決定する、<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>Returns a generic enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> を反復処理するジェネリック列挙子を返します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>An enumerator for the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> の列挙子。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph> to iterate through the keys and values of a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">次の例を使用する方法を示します<ph id="ph1">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph>キーと値の反復処理に、<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>The key of the desired collection of values.</source>
          <target state="translated">目的の値のコレクションのキー。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>Gets the collection of values indexed by the specified key.</source>
          <target state="translated">指定したキーによってインデックス付けされた値のコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>The collection of values indexed by the specified key.</source>
          <target state="translated">指定したキーによってインデックス付けされた値のコレクション。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>This indexed property provides the ability to index a specific collection of values in the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> by using the following syntax: <ph id="ph2">`myLookup[key]`</ph> in Visual C# or <ph id="ph3">`myLookup(key)`</ph> in Visual Basic.</source>
          <target state="translated">このインデックス付きプロパティの値の特定のコレクションのインデックスを作成する機能を提供する、<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>次の構文を使用して: <ph id="ph2">`myLookup[key]`</ph> Visual C# の場合、または<ph id="ph3">`myLookup(key)`</ph>Visual Basic でします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>If the <ph id="ph1">`key`</ph> is not found in the collection, an empty sequence is returned.</source>
          <target state="translated">場合、<ph id="ph1">`key`</ph>が見つからない、コレクション内に空のシーケンスが返されます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph> to index directly into a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">次の例を使用する方法を示します<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph>に直接インデックスを<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> を反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator for the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> の列挙子。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>