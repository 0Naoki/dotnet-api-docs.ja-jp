<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ccde6b6dea6124df4d2707d9caf57d0392b3c9b7" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70490558" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">データ ソース内のデータの型。</typeparam>
    <summary>データの型がわかっている場合に特定のデータ ソースに対するクエリを評価する機能を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インターフェイス<xref:System.Linq.IQueryable%601>は、クエリプロバイダーによる実装を目的としています。  
  
 このインターフェイスは、 <xref:System.Collections.Generic.IEnumerable%601>クエリを表す場合、そのクエリの結果を列挙できるように、インターフェイスを継承します。 列挙は、 <xref:System.Linq.IQueryable%601>オブジェクトに関連付けられている式ツリーを強制的に実行します。 列挙可能な結果を返さないクエリは、 <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>メソッドが呼び出されたときに実行されます。  
  
 "式ツリーの実行" の定義は、クエリプロバイダーに固有です。 たとえば、式ツリーを基になるデータソースに適したクエリ言語に変換することが必要になる場合があります。  
  
 インターフェイス<xref:System.Linq.IQueryable%601>を使用すると、クエリをポリモーフィックにすることができます。 つまり、 `IQueryable`データソースに対するクエリは式ツリーとして表現されるため、さまざまな種類のデータソースに対して実行できます。  
  
 クラス`static` <xref:System.Linq.Queryable.ThenByDescending%2A> <xref:System.Linq.Queryable.AsQueryable%2A>`Shared` <xref:System.Linq.Queryable.ThenBy%2A>で定義されている (Visual Basic) メソッド( <xref:System.Linq.IQueryable%601>  、、およびを除く) は、インターフェイスを実装する型のオブジェクトを拡張します。 <xref:System.Linq.Queryable>  
  
 独自の LINQ プロバイダーを作成する方法の詳細については、MSDN ブログの「 [linq: IQueryable プロバイダーの構築](https://go.microsoft.com/fwlink/?LinkID=112370)」を参照してください。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>
