<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d66c61830c60670687228ad8681be7fa396883aa" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51880363" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">データ ソース内のデータの型。</typeparam>
    <summary>データの型がわかっている特定のデータ ソースに対するクエリを評価する機能を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Linq.IQueryable%601>インターフェイスは、クエリ プロバイダーで実装するためです。  
  
 このインターフェイスの継承、<xref:System.Collections.Generic.IEnumerable%601>インターフェイスのクエリを表す場合そのクエリの結果を列挙できるようにします。 列挙型に関連付けられている式ツリーの強制、<xref:System.Linq.IQueryable%601>実行対象のオブジェクト。 列挙可能な結果を返さないクエリの実行時に、<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>メソッドが呼び出されます。  
  
 「式ツリーの実行」の定義は、クエリ プロバイダーに固有です。 たとえば、式ツリーを基になるデータ ソースの適切なクエリ言語への変換が必要があります。  
  
 <xref:System.Linq.IQueryable%601>インターフェイスをポリモーフィックでクエリを使用できます。 つまり、ために対してクエリを`IQueryable`データ ソースは、式ツリーとして表される、さまざまな種類のデータ ソースに対して実行できます。  
  
 `static` (`Shared` Visual Basic で)、クラスで定義されているメソッド<xref:System.Linq.Queryable>(除く<xref:System.Linq.Queryable.AsQueryable%2A>、 <xref:System.Linq.Queryable.ThenBy%2A>、および<xref:System.Linq.Queryable.ThenByDescending%2A>) を実装する型のオブジェクトを拡張、<xref:System.Linq.IQueryable%601>インターフェイス。  
  
 独自の LINQ プロバイダーを作成する方法の詳細については、次を参照してください。 [LINQ: IQueryable プロバイダーを構築](https://go.microsoft.com/fwlink/?LinkID=112370)MSDN ブログ。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>