<Type Name="Binder" FullName="System.Reflection.Binder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f869abb652c1fe266ac609209e86d2fa7f433b6b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30480136" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Binder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Binder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Binder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Binder" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binder abstract" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>メンバーの候補リストからメンバーを選択し、実引数型から仮引数型への型変換を実行します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 実装、<xref:System.Reflection.Binder>クラスがなどのメソッドによって使用される<xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>パラメーターの型と引数値のセットに基づいて実行するには可能なメンバーのセットから選択を<xref:System.Type.GetMethod%2A?displayProperty=nameWithType>メソッドとパラメーターの型に基づいて選択されます。  
  
 既定の実装、<xref:System.Reflection.Binder>によってクラスが提供される、<xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType>プロパティです。  
  
   
  
## Examples  
 次の例を実装しのすべてのメンバーを示しています、`Binder`クラスです。 プライベート メソッド`CanConvertFrom`指定された型の互換性のある型を検索します。  
  
 [!code-cpp[Binder_1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Binder_1/CPP/binder.cpp#1)]
 [!code-csharp[Binder_1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Binder_1/CS/binder.cs#1)]
 [!code-vb[Binder_1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Binder_1/VB/binder.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>継承する場合<see cref="T:System.Reflection.Binder" />、次のメンバーをオーバーライドする必要があります: <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />、 <see cref="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" />、 <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" />、 <see cref="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" />、 <see cref="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" />、および<see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />です。</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Binder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Binder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Reflection.Binder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターは、この型の状態を初期化するために、派生クラスのコンス トラクターによって呼び出されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindToField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo BindToField(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.FieldInfo[] match, object value, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BindToField (bindingAttr As BindingFlags, match As FieldInfo(), value As Object, culture As CultureInfo) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ BindToField(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ match, System::Object ^ value, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.FieldInfo[]" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <see cref="T:System.Reflection.BindingFlags" /> 値のビットごとの組み合わせ。</param>
        <param name="match">条件に合う候補である一連のフィールド。 たとえば、<see cref="Overload:System.Type.InvokeMember" /> で <see cref="T:System.Reflection.Binder" /> オブジェクトが使用される場合、このパラメーターには、メンバー名が正しいためにリフレクションで条件に合う可能性ありと判定された一連のフィールドが指定されます。 <see cref="P:System.Type.DefaultBinder" /> に用意されている既定の実装では、この配列の順序が変わります。</param>
        <param name="value">条件に合うフィールドを検索するために使用されるフィールド値。</param>
        <param name="culture">型を強制変換するバインダー実装で、データ型の強制変換を制御するのに使用される <see cref="T:System.Globalization.CultureInfo" /> のインスタンス。 <c>culture</c>が <see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" />が使用されます。  
  
 メモ   たとえば、バインダーの実装で文字列の値を数値型に強制変換することを許可している場合、このパラメーターでは、1000 を表す <see langword="String" /> を <see langword="Double" /> の値に変換して指定する必要があります。これは、カルチャによって 1000 の表記が異なるためです。 既定のバインダーは、このような文字列の強制変換を行いません。</param>
        <summary>指定した条件に基づいて、指定されている一連のフィールドからフィールドを選択します。</summary>
        <returns>一致するフィールド。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`bindingAttr`は含まれません<xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>、によって提供される既定のバインダー実装<xref:System.Type.DefaultBinder%2A?displayProperty=nameWithType>の最初の要素を単純に返します`match`です。 選択は実行されません。  
  
 このメソッドによって提供されるバインディングの制御<xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">既定のバインダーでは、<paramref name="bindingAttr" /> には <see cref="F:System.Reflection.BindingFlags.SetField" /> が含まれ、<paramref name="match" /> には <paramref name="value" /> とも同等に一致するフィールドが複数含まれます。 たとえば、<paramref name="value" /> には <c>IMyClass</c> インターフェイスを実装した <c>MyClass</c> オブジェクトが含まれ、<paramref name="match" /> には <c>MyClass</c> 型のフィールドと <c>IMyClass</c> 型のフィールドが含まれる場合があります。</exception>
        <exception cref="T:System.MissingFieldException">既定のバインダーでは、<paramref name="bindingAttr" /> には <see cref="F:System.Reflection.BindingFlags.SetField" /> が含まれ、<paramref name="match" /> には <paramref name="value" /> を受け入れ可能なフィールドは含まれません。</exception>
        <exception cref="T:System.NullReferenceException">既定のバインダーでは、<paramref name="bindingAttr" /> には <see cref="F:System.Reflection.BindingFlags.SetField" /> が含まれ、<paramref name="match" /> は <see langword="null" /> または空の配列となります。  
  
 - または -  
  
 <paramref name="bindingAttr" /> に <see cref="F:System.Reflection.BindingFlags.SetField" /> が含まれ、<paramref name="value" /> は <see langword="null" /> になります。</exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
      </Docs>
    </Member>
    <Member MemberName="BindToMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBase BindToMethod(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MethodBase[] match, object[]&amp; args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] names, [out] object&amp; state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BindToMethod (bindingAttr As BindingFlags, match As MethodBase(), ByRef args As Object(), modifiers As ParameterModifier(), culture As CultureInfo, names As String(), ByRef state As Object) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodBase ^ BindToMethod(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::MethodBase ^&gt; ^ match, cli::array &lt;System::Object ^&gt; ^ % args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ names, [Runtime::InteropServices::Out] System::Object ^ % state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.MethodBase[]" />
        <Parameter Name="args" Type="System.Object[]&amp;" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="state" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <see cref="T:System.Reflection.BindingFlags" /> 値のビットごとの組み合わせ。</param>
        <param name="match">条件に合う候補である一連のメソッド。 たとえば、<see cref="Overload:System.Type.InvokeMember" /> で <see cref="T:System.Reflection.Binder" /> オブジェクトが使用される場合、このパラメーターには、メンバー名が正しいために条件に合う可能性ありとリフレクションで判定された一連のメソッドが指定されます。 <see cref="P:System.Type.DefaultBinder" /> に用意されている既定の実装では、この配列の順序が変わります。</param>
        <param name="args">渡される引数。 バインダーでは、この配列内の引数の順序が変わる可能性があります。たとえば、<c>names</c> パラメーターを使用して位置の順序以外の順序を指定する場合は、既定のバインダーによって引数の順序が変更されます。 バインダーの実装により引数の型が強制変換される場合、引数の型と値も同様に変更されることがあります。</param>
        <param name="modifiers">バインディングが型の変更されたパラメーター シグネチャと連動できるようにするパラメーター修飾子の配列。 既定のバインダー実装は、このパラメーターを使用しません。</param>
        <param name="culture">型を強制変換するバインダー実装で、データ型の強制変換を制御するのに使用される <see cref="T:System.Globalization.CultureInfo" /> のインスタンス。 <c>culture</c>が <see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" />が使用されます。  
  
 メモ   たとえば、バインダーの実装で文字列の値を数値型に強制変換することを許可している場合、このパラメーターでは、1000 を表す <see langword="String" /> を <see langword="Double" /> の値に変換して指定する必要があります。これは、カルチャによって 1000 の表記が異なるためです。 既定のバインダーは、このような文字列の強制変換を行いません。</param>
        <param name="names">照合時にパラメーター名を使用する場合はパラメーター名。引数を単に位置順で扱う場合は <see langword="null" />。 たとえば、引数が位置の順序で指定されない場合は、パラメーター名を使用する必要があります。</param>
        <param name="state">メソッドが返された後は、<c>state</c> には引数の並べ替えを追跡し続けるバインダー提供オブジェクトが含まれます。 バインダーがこのオブジェクトを作成し、このオブジェクトの唯一のコンシューマーとなります。 <see langword="BindToMethod" /> から制御が戻ったときに <c>state</c> が <see langword="null" /> でない場合、<c>args</c> を元の順序に戻さないためには、<c>state</c> を <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> メソッドに渡す必要があります。これはたとえば、<see langword="ref" /> パラメーター (Visual Basic では <see langword="ByRef" /> パラメーター) の値を取得できるようにするためです。</param>
        <summary>指定された引数に基づいて、指定されている一連のメソッドから呼び出すメソッドを選択します。</summary>
        <returns>一致するメソッド。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のバインダーでは、値を持つパラメーターの両方を考慮に入れますと`params`配列 (`ParamArray` Visual Basic の配列)。 したがって、可能であれば一致を見つける場合を`args`と`match`同じ数要素にはが含まれていません。  
  
 バインダーにより、クライアントは、引数の配列がによって操作されている場合、元の形式への引数の配列のマッピングを<xref:System.Reflection.Binder.BindToMethod%2A>です。 このような引数が存在する場合は、参照渡しの引数を戻るには、この再割り当て機能を使用します。 名前で引数を渡した場合、バインダーは、引数の配列を並べ替えます。 `state`パラメーターの追跡の並べ替え、ため、バインダーの引数<xref:System.Reflection.Binder.ReorderArgumentArray%2A>を元の形式に引数の配列を並べ替えるにはメソッドです。  
  
 <xref:System.Reflection.Binder.BindToMethod%2A>メソッドを使って、<xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">既定のバインダーでは、<paramref name="match" /> には <paramref name="args" /> とも同等に一致するメソッドが複数含まれます。 たとえば、<paramref name="args" /> には <c>IMyClass</c> インターフェイスを実装した <c>MyClass</c> オブジェクトが含まれ、<paramref name="match" /> には <c>MyClass</c> を使用するメソッドと <c>IMyClass</c> を使用するメソッドが含まれる場合があります。</exception>
        <exception cref="T:System.MissingMethodException">既定のバインダーでは、<paramref name="match" /> には <paramref name="args" /> で指定された引数を受け取ることのできるメソッドは含まれません。</exception>
        <exception cref="T:System.ArgumentException">既定のバインダーでは、<paramref name="match" /> は <see langword="null" /> または空の配列です。</exception>
        <altmember cref="T:System.Reflection.MethodBase" />
      </Docs>
    </Member>
    <Member MemberName="CanChangeType">
      <MemberSignature Language="C#" Value="public virtual bool CanChangeType (object value, Type type, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanChangeType(object value, class System.Type type, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.CanChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanChangeType(System::Object ^ value, Type ^ type, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="type">To be added.</param>
        <param name="culture">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ChangeType(object value, class System.Type type, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ChangeType(System::Object ^ value, Type ^ type, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">新しい <see langword="Type" /> に変更するオブジェクト。</param>
        <param name="type">
          <c>value</c> の変換後の新しい <see langword="Type" />。</param>
        <param name="culture">データ型の強制変換を制御するために使用する <see cref="T:System.Globalization.CultureInfo" /> のインスタンス。 <c>culture</c>が <see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" />が使用されます。  
  
 メモ   たとえば、このパラメーターでは、1000 を表す <see langword="String" /> を <see langword="Double" /> の値に変換して指定する必要があります。これは、カルチャによって 1000 の表記が異なるためです。</param>
        <summary>指定されている <see langword="Object" /> を特定の <see langword="Type" /> に変更します。</summary>
        <returns>指定されている値を新しい型で保持しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 リフレクションには、共通型システムのアクセシビリティ規則がモデル化します。 たとえば、呼び出し元が、同じアセンブリ内にある場合は、呼び出し元は、必要はありません特殊なアクセス許可内部メンバーの。 それ以外の場合、呼び出し元が必要な<xref:System.Security.Permissions.ReflectionPermission>します。 これは、保護されているメンバーの参照と一貫性のある、プライベート、およびなどです。  
  
 一般的な方針は`ChangeType`拡大変換で、データが失われることのみを実行する必要があります。 拡大型の強制の例には、64 ビット符号付き整数である値を 32 ビット符号付き整数の値が強制変換します。 これは、データが失われる可能性があります縮小強制変換と区別されます。 縮小強制変換の例の強制型変換は 32 ビット符号付き整数に 64 ビット符号付き整数。  
  
 次の表に、既定では、実行の強制型変換`ChangeType`です。  
  
|変換元の型|変換後の型|  
|-----------------|-----------------|  
|任意の型|その基本型です。|  
|任意の型|実装するインターフェイスです。|  
|Char|UInt16、UInt32、Int32、UInt64、Int64、Single、Double|  
|Byte|Char、UInt16、Int16、UInt32、Int32、UInt64、Int64、Single、Double|  
|SByte|Int16、Int32、Int64、Single、Double|  
|UInt16|UInt32、Int32、UInt64、Int64、Single、Double|  
|Int16|Int32、Int64、Single、Double|  
|UInt32|UInt64、Int64、Single、Double|  
|Int32|Int64、Single、Double|  
|UInt64|Single、Double|  
|Int64|Single、Double|  
|Single|倍精度浮動小数点型|  
|非参照|参照渡しされます。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderArgumentArray">
      <MemberSignature Language="C#" Value="public abstract void ReorderArgumentArray (ref object[] args, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReorderArgumentArray(object[]&amp; args, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ReorderArgumentArray (ByRef args As Object(), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ReorderArgumentArray(cli::array &lt;System::Object ^&gt; ^ % args, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]&amp;" RefType="ref" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="args">渡される実引数。 引数の型と値の両方が変更される可能性があります。</param>
        <param name="state">引数の並べ替えを追跡するバインダー提供オブジェクト。</param>
        <summary>
          <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /> から制御が戻ったときに、<paramref name="args" /> 引数を <see langword="BindToMethod" /> から返された時点の値に復元します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、共通言語ランタイムはこのメソッドを呼び出して`state`は`null`から戻った後`BindToMethod`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBase SelectMethod(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MethodBase[] match, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectMethod (bindingAttr As BindingFlags, match As MethodBase(), types As Type(), modifiers As ParameterModifier()) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodBase ^ SelectMethod(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::MethodBase ^&gt; ^ match, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.MethodBase[]" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <see cref="T:System.Reflection.BindingFlags" /> 値のビットごとの組み合わせ。</param>
        <param name="match">条件に合う候補である一連のメソッド。 たとえば、<see cref="Overload:System.Type.InvokeMember" /> で <see cref="T:System.Reflection.Binder" /> オブジェクトが使用される場合、このパラメーターには、メンバー名が正しいために条件に合う可能性ありとリフレクションで判定された一連のメソッドが指定されます。 <see cref="P:System.Type.DefaultBinder" /> に用意されている既定の実装では、この配列の順序が変わります。</param>
        <param name="types">一致するメソッドを検索するために使用されるパラメーター型。</param>
        <param name="modifiers">バインディングが型の変更されたパラメーター シグネチャと連動できるようにするパラメーター修飾子の配列。</param>
        <summary>引数の型に基づいて、指定されているメソッド セットからメソッドを選択します。</summary>
        <returns>一致するメソッドが見つかった場合は一致するメソッド。それ以外の場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドが返す`null`条件に一致するメソッドがない場合。 このメソッドによって提供される選択を制御する、`GetConstructor`と`GetMethod`メソッド`Type`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">既定のバインダーでは、<paramref name="match" /> には、<paramref name="types" /> によって示されるパラメーター型とも同等に一致するメソッドが複数含まれます。 たとえば、<paramref name="types" /> 内の配列に <c>MyClass</c> の <see cref="T:System.Type" /> オブジェクトが含まれ、<paramref name="match" /> 内の配列に <c>MyClass</c> の基本クラスを使用するメソッドと、<c>MyClass</c> が実装するインターフェイスを使用するメソッドが含まれている場合があります。</exception>
        <exception cref="T:System.ArgumentException">既定のバインダーでは、<paramref name="match" /> は <see langword="null" /> または空の配列です。  
  
 - または -  
  
 <paramref name="types" /> の要素は <see cref="T:System.Type" /> から派生していますが、<see langword="RuntimeType" /> 型ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectProperty">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo SelectProperty(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.PropertyInfo[] match, class System.Type returnType, class System.Type[] indexes, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectProperty (bindingAttr As BindingFlags, match As PropertyInfo(), returnType As Type, indexes As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::PropertyInfo ^ SelectProperty(System::Reflection::BindingFlags bindingAttr, cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ match, Type ^ returnType, cli::array &lt;Type ^&gt; ^ indexes, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="match" Type="System.Reflection.PropertyInfo[]" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="indexes" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <see cref="T:System.Reflection.BindingFlags" /> 値のビットごとの組み合わせ。</param>
        <param name="match">条件に合う候補であるプロパティ セット。 たとえば、<see cref="Overload:System.Type.InvokeMember" /> で <see cref="T:System.Reflection.Binder" /> オブジェクトが使用される場合、このパラメーターには、メンバー名が正しいために条件に合う可能性ありとリフレクションで判定された一連のプロパティが指定されます。 <see cref="P:System.Type.DefaultBinder" /> に用意されている既定の実装では、この配列の順序が変わります。</param>
        <param name="returnType">条件に一致したプロパティに必要な戻り値。</param>
        <param name="indexes">検索対象のプロパティのインデックス型。 クラスのインデクサーなど、インデックス プロパティに使用されます。</param>
        <param name="modifiers">バインディングが型の変更されたパラメーター シグネチャと連動できるようにするパラメーター修飾子の配列。</param>
        <summary>指定した条件に基づいて、指定されている一連のプロパティからプロパティを選択します。</summary>
        <returns>一致するプロパティ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドによって提供される選択を制御する、`GetProperty`メソッド`Type`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">既定のバインダーでは、<paramref name="match" /> には <paramref name="returnType" /> と <paramref name="indexes" /> とも同等に一致するプロパティが複数含まれます。</exception>
        <exception cref="T:System.ArgumentException">既定のバインダーでは、<paramref name="match" /> は <see langword="null" /> または空の配列です。</exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
      </Docs>
    </Member>
  </Members>
</Type>