<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9aaf43973195666dd08ebb47e5dd2fc7f8617f14" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996703" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>検査専用の目的で読み込まれる型のオブジェクトの閉じた領域を表します。 各 MetadataLoadContext は独自のバインディング規則を持つことができ、その他のすべての MetadataLoadContexts から分離されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

A`MetadataLoadContext`ディクショナリにアセンブリ名をバインドする役割を果たします<xref:System.Reflection.Assembly>コンテキストまたはアンロードする必要のある以前に読み込まれたインスタンス。

アセンブリは、メタデータとして厳密に扱われます。 ターゲット プラットフォーム、CPU アーキテクチャ、またはポインターのサイズに基づくアセンブリの読み込みに制限はありません。 コア アセンブリとして指定されたアセンブリに制限はありません (**mscorlib**)。

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver"><see cref="T:System.Reflection.MetadataAssemblyResolver" /> のインスタンス。</param>
        <param name="coreAssemblyName">などの主要な型を含むアセンブリの名前<see cref="T:System.Object" />します。 通常、"mscorlib"になります。</param>
        <summary>新しい <see cref="T:System.Reflection.MetadataLoadContext" /> オブジェクトを作成します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定など、既知の型を格納する「システム アセンブリ」を示すアセンブリ<see cref="T:System.Int32" />します。</summary>
        <value><see cref="T:System.Reflection.Assembly" /> インスタンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

これらの既知の型への参照に、通常の型とは異なり、アセンブリ参照が含まれていないために、他のアセンブリとは異なるコア アセンブリが扱われます。
            
通常、このアセンブリが名前付き"mscorlib"または"netstandard"。 コア アセンブリが見つからない場合、値になります`null`メソッドのシグネチャを解析するものも含め、その他の多くのリフレクション メソッドは例外をスローします。
            
`CoreAssembly`を渡すことによって決定されますが、`coreAssemblyName`に渡されるパラメーター、<xref:System.Reflection.MetadataAssemblyResolver>コンス トラクターを<xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType>メソッド。

ない場合は`coreAssemblyName`のコンス トラクターの引数が指定されました<xref:System.Reflection.MetadataLoadContext>、"mscorlib"、"System.Runtime"および"netstandard"を含む、既定値が使用されます。
            
指定されたコア アセンブリは主要な型を直接格納する必要はありません。 入力が他のアセンブリに転送します。 そのため、完全に指定されたコア アセンブリと mscorlib ファサードを使用して許容されます。
            
なお<xref:System.Runtime>など、相互運用機能に関連する擬似的なカスタム属性の型のいくつか除外するため、理想的なコア アセンブリでない<xref:System.Runtime.InteropServices.DllImportAttribute>します。 ただし、これらの属性に関心がない場合に役立ちます。 [Customattributes] API には、コア アセンブリに必要な型が含まれていない場合にこれらの属性はスキップします。
            
コア アセンブリが必要になるまで読み込まれません。 次の Api では、コア アセンブリの検索はトリガーされません。

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.FullName?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
コア アセンブリが見つからないか、コア アセンブリには、型がないの動作に影響する場合、<xref:System.Reflection.MetadataLoadContext>次のようにします。
            
* Api を署名または typespecs を解析し、結果として返す必要がある<xref:System.Type>オブジェクトは例外をスローします。 例:

 * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
 * System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>
 * <xref:System.Type.BaseType?displayProperty-nameWithType>
 * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>
            
* よく知られている中核となる型に型を比較する必要がある Api は、例外をスローしないと、比較が評価されます`false`します。 コア アセンブリを指定しない場合など<xref:System.Type.IsPrimitive>戻ります`false`という名前の型をも、すべての<xref:System.Int32>します。 同様に、<xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType>戻ります<xref:System.TypeCode.Object>のすべてのものです。
            
* メタデータ エンティティは、擬似的なカスタム属性としてフラグにその画面を設定、擬似的なカスタム属性の型、必要なコンス トラクターまたはコンス トラクターのパラメーターの型のいずれかのコア アセンブリを含んでいない場合、<xref:System.Reflection.MetadataLoadContext>はスローされません。 返される属性の一覧から擬似的なカスタム属性が省略されます。
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アセンブリ ファイルのファイルのロック) などのすべてのネイティブ リソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

後の破棄は、安全ではありませんを使用する<xref:System.Reflection.Assembly>によって管理されているオブジェクト、<xref:System.Reflection.MetadataLoadContext>ものによって管理されているすべてのリフレクション オブジェクトまたは<xref:System.Reflection.Assembly>オブジェクト。

によって提供されるオブジェクトが、<xref:System.Reflection.MetadataLoadContext>をスローするよう努力、 <xref:System.ObjectDisposedException>、これは保証されません。

一部の Api は、固定または以前にキャッシュされたデータを返す可能性があります。 オブジェクトにアクセスする*中に*、<xref:System.Reflection.MetadataLoadContext.Dispose%2A>をアンマネージ アクセス違反と failfast メソッドの呼び出しがあります。
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>読み込まれたアセンブリのアトミックなスナップショットを返す、<see cref="T:System.Reflection.MetadataLoadContext" />します。</summary>
        <returns>列挙可能なコレクション<see xref="T:System.Reflection.Assembly" />オブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><see cref="T:System.Reflection.AssemblyName" /> インスタンス。</param>
        <summary>アセンブリに指定したアセンブリ名を解決します。 アセンブリは、以前この名前にバインドされた、そのアセンブリが返されます。 それ以外の場合、<see cref="T:System.Reflection.MetadataLoadContext" />呼び出し、指定した<see cref="T:System.Reflection.MetadataAssemblyResolver" />します。</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
このメソッドの動作がの動作と一致することに注意してください、<xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType>イベントを解決するには、動作と一致しません<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>します。 (後者の場合はその解決イベントを発生させることがなく。)
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">競合回避モジュールを返します<see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">A<see cref="T:System.String" />アセンブリ名を表します。</param>
        <summary>アセンブリに指定したアセンブリ名を解決します。 アセンブリは、以前この名前にバインドされた、そのアセンブリが返されます。 それ以外の場合、<see cref="T:System.Reflection.MetadataLoadContext" />呼び出し、指定した<see cref="T:System.Reflection.MetadataAssemblyResolver" />します。</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
このメソッドの動作がの動作と一致することに注意してください。<xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType>イベントを解決するには、< xxref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType > の動作と一致しません。 (後者の場合はその解決イベントを発生させることがなく。)
]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">競合回避モジュールを返します<see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath">A<see cref="T:System.String" />アセンブリへのパスを表します。</param>
        <summary>ディスク上の特定のパスからアセンブリを読み込み、内でそのアセンブリ名のバインド、<see cref="T:System.Reflection.MetadataLoadContext" />します。 同じ名前の前のアセンブリに読み込まれた既にかどうか、 <see cref="T:System.Reflection.MetadataLoadContext" />、以前のアセンブリが返されます。</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> インスタンス。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">2 つのアセンブリには、同じ Mvid はありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly">A<see cref="T:System.Byte[]" />アセンブリを保持しています。</param>
        <summary>バイト配列からアセンブリを読み込み、内でそのアセンブリ名のバインド、<see cref="T:System.Reflection.MetadataLoadContext" />します。 同じ名前の前のアセンブリに読み込まれた既にかどうか、 <see cref="T:System.Reflection.MetadataLoadContext" />、以前のアセンブリが返されます。</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> インスタンス。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">2 つのアセンブリには、同じ Mvid はありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly">A<see cref="T:System.IO.Stream" />アセンブリを保持しています。</param>
        <summary>ストリームからアセンブリを読み込み、内でそのアセンブリ名のバインド、<see cref="T:System.Reflection.MetadataLoadContext" />します。 同じ名前の前のアセンブリに読み込まれた既にかどうか、 <see cref="T:System.Reflection.MetadataLoadContext" />、以前のアセンブリが返されます。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <xref:System.Reflection.MetadataLoadContext>の所有権を取得、<xref:System.IO.Stream>このメソッドに渡されます。 元の所有者の位置を変更、破棄する必要がありますいない、 <xref:System.IO.Stream>、またはその位置は変更しないでおくことを前提としています。

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException">2 つのアセンブリには、同じ Mvid はありません。</exception>
      </Docs>
    </Member>
  </Members>
</Type>