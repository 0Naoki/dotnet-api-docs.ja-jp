<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2b6a57dbb5dc6a01c5eba76ff27d3fa458a46188" /><Meta Name="ms.sourcegitcommit" Value="93667418e6e77da6ba7109a407c61b8969cec4ec" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="07/05/2019" /><Meta Name="ms.locfileid" Value="67571127" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="5229e-101">検査のみの目的で読み込まれる Type オブジェクトの閉ざされた領域を表します。</span><span class="sxs-lookup"><span data-stu-id="5229e-101">Represents a closed universe of Type objects loaded for inspection-only purposes.</span></span> <span data-ttu-id="5229e-102">各 MetadataLoadContext は独自のバインド規則を持つことができ、その他のすべての MetadataLoadContext から分離されています。</span><span class="sxs-lookup"><span data-stu-id="5229e-102">Each MetadataLoadContext can have its own binding rules and is isolated from all other MetadataLoadContexts.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="5229e-103">A`MetadataLoadContext`ディクショナリにアセンブリ名をバインドする役割を果たします<xref:System.Reflection.Assembly>コンテキストまたはアンロードする必要のある以前に読み込まれたインスタンス。</span><span class="sxs-lookup"><span data-stu-id="5229e-103">A `MetadataLoadContext` serves as a dictionary that binds assembly names to <xref:System.Reflection.Assembly> instances that were previously loaded into the context or need to be loaded.</span></span>

<span data-ttu-id="5229e-104">アセンブリは、メタデータとして厳密に扱われます。</span><span class="sxs-lookup"><span data-stu-id="5229e-104">Assemblies are treated strictly as metadata.</span></span> <span data-ttu-id="5229e-105">ターゲット プラットフォーム、CPU アーキテクチャ、またはポインターのサイズに基づくアセンブリの読み込みに制限はありません。</span><span class="sxs-lookup"><span data-stu-id="5229e-105">There are no restrictions on loading assemblies based on target platform, CPU architecture, or pointer size.</span></span> <span data-ttu-id="5229e-106">コア アセンブリとして指定されたアセンブリに制限はありません (**mscorlib**)。</span><span class="sxs-lookup"><span data-stu-id="5229e-106">There are no restrictions on the assembly designated as the core assembly (**mscorlib**).</span></span>

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver"><span data-ttu-id="5229e-107"><see cref="T:System.Reflection.MetadataAssemblyResolver" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="5229e-107">A <see cref="T:System.Reflection.MetadataAssemblyResolver" /> instance.</span></span></param>
        <param name="coreAssemblyName"><span data-ttu-id="5229e-108"><see cref="T:System.Object" /> などの中核となる型を含むアセンブリの名前です。</span><span class="sxs-lookup"><span data-stu-id="5229e-108">The name of the assembly that contains the core types such as <see cref="T:System.Object" />.</span></span> <span data-ttu-id="5229e-109">通常、これは "mscorlib" になります。</span><span class="sxs-lookup"><span data-stu-id="5229e-109">Typically, this would be "mscorlib".</span></span></param>
        <summary><span data-ttu-id="5229e-110">新しい <see cref="T:System.Reflection.MetadataLoadContext" /> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="5229e-110">Creates a new <see cref="T:System.Reflection.MetadataLoadContext" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5229e-111"><see cref="T:System.Int32" /> などの既知の型を格納する「システム アセンブリ」を示すアセンブリを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5229e-111">Gets or sets the assembly that denotes the "system assembly" that houses the well-known types such as <see cref="T:System.Int32" />.</span></span></summary>
        <value><span data-ttu-id="5229e-112"><see cref="T:System.Reflection.Assembly" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5229e-112">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="5229e-113">これらの既知の型への参照に、通常の型とは異なり、アセンブリ参照が含まれていないために、他のアセンブリとは異なるコア アセンブリが扱われます。</span><span class="sxs-lookup"><span data-stu-id="5229e-113">The core assembly is treated differently than other assemblies because references to these well-known types do not include the assembly reference, unlike normal types.</span></span>
            
<span data-ttu-id="5229e-114">通常、このアセンブリが名前付き"mscorlib"または"netstandard"。</span><span class="sxs-lookup"><span data-stu-id="5229e-114">Typically, this assembly is named "mscorlib" or "netstandard".</span></span> <span data-ttu-id="5229e-115">コア アセンブリが見つからない場合、値になります`null`メソッドのシグネチャを解析するものも含め、その他の多くのリフレクション メソッドは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="5229e-115">If the core assembly cannot be found, the value will be `null`, and many other reflection methods, including those that parse method signatures, will throw an exception.</span></span>
            
<span data-ttu-id="5229e-116">`CoreAssembly`を渡すことによって決定されますが、`coreAssemblyName`に渡されるパラメーター、<xref:System.Reflection.MetadataAssemblyResolver>コンス トラクターを<xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5229e-116">The `CoreAssembly` is determined by passing the `coreAssemblyName` parameter passed to the <xref:System.Reflection.MetadataAssemblyResolver> constructor to the <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="5229e-117">ない場合は`coreAssemblyName`のコンス トラクターの引数が指定されました<xref:System.Reflection.MetadataLoadContext>、"mscorlib"、"System.Runtime"および"netstandard"を含む、既定値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="5229e-117">If no `coreAssemblyName` argument was specified in the constructor of <xref:System.Reflection.MetadataLoadContext>, then default values are used, including "mscorlib", "System.Runtime" and "netstandard".</span></span>
            
<span data-ttu-id="5229e-118">指定されたコア アセンブリは主要な型を直接格納する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="5229e-118">The designated core assembly does not need to contain the core types directly.</span></span> <span data-ttu-id="5229e-119">入力が他のアセンブリに転送します。</span><span class="sxs-lookup"><span data-stu-id="5229e-119">It can type forward them to other assemblies.</span></span> <span data-ttu-id="5229e-120">そのため、完全に指定されたコア アセンブリと mscorlib ファサードを使用して許容されます。</span><span class="sxs-lookup"><span data-stu-id="5229e-120">Thus, it is perfectly permissible to use the mscorlib facade as the designated core assembly.</span></span>
            
<span data-ttu-id="5229e-121">なお<xref:System.Runtime>など、相互運用機能に関連する擬似的なカスタム属性の型のいくつか除外するため、理想的なコア アセンブリでない<xref:System.Runtime.InteropServices.DllImportAttribute>します。</span><span class="sxs-lookup"><span data-stu-id="5229e-121">Note that <xref:System.Runtime> is not an ideal core assembly because it excludes some of the interop-related pseudo-custom attribute types such as <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span> <span data-ttu-id="5229e-122">ただし、これらの属性に関心がない場合に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="5229e-122">However, it can serve if you have no interest in those attributes.</span></span> <span data-ttu-id="5229e-123">[Customattributes] API には、コア アセンブリに必要な型が含まれていない場合にこれらの属性はスキップします。</span><span class="sxs-lookup"><span data-stu-id="5229e-123">The CustomAttributes API will skip those attributes if the core assembly does not include the necessary types.</span></span>
            
<span data-ttu-id="5229e-124">コア アセンブリが必要になるまで読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="5229e-124">The core assembly is not loaded until necessary.</span></span> <span data-ttu-id="5229e-125">次の Api では、コア アセンブリの検索はトリガーされません。</span><span class="sxs-lookup"><span data-stu-id="5229e-125">The following APIs do not trigger the search for the core assembly:</span></span>

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.FullName?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
<span data-ttu-id="5229e-126">コア アセンブリが見つからないか、コア アセンブリには、型がないの動作に影響する場合、<xref:System.Reflection.MetadataLoadContext>次のようにします。</span><span class="sxs-lookup"><span data-stu-id="5229e-126">If a core assembly cannot be found or if the core assembly is missing types, this will affect the behavior of the <xref:System.Reflection.MetadataLoadContext> as follows:</span></span>
            
* <span data-ttu-id="5229e-127">Api を署名または typespecs を解析し、結果として返す必要がある<xref:System.Type>オブジェクトは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="5229e-127">APIs that need to parse signatures or typespecs and return the results as <xref:System.Type> objects will throw an exception.</span></span> <span data-ttu-id="5229e-128">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="5229e-128">For example:</span></span>

  * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
  * <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>
  * <xref:System.Type.BaseType?displayProperty-nameWithType>
  * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>

* <span data-ttu-id="5229e-129">よく知られている中核となる型に型を比較する必要がある Api は、例外をスローしないと、比較が評価されます`false`します。</span><span class="sxs-lookup"><span data-stu-id="5229e-129">APIs that need to compare types to well-known core types will not throw an exception, and the comparison will evaluate to `false`.</span></span> <span data-ttu-id="5229e-130">コア アセンブリを指定しない場合など<xref:System.Type.IsPrimitive>戻ります`false`という名前の型をも、すべての<xref:System.Int32>します。</span><span class="sxs-lookup"><span data-stu-id="5229e-130">For example, if you do not specify a core assembly, <xref:System.Type.IsPrimitive> will return `false` for everything, even types named <xref:System.Int32>.</span></span> <span data-ttu-id="5229e-131">同様に、<xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType>戻ります<xref:System.TypeCode.Object>のすべてのものです。</span><span class="sxs-lookup"><span data-stu-id="5229e-131">Similarly, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> will return <xref:System.TypeCode.Object> for everything.</span></span>
            
* <span data-ttu-id="5229e-132">メタデータ エンティティは、擬似的なカスタム属性としてフラグにその画面を設定、擬似的なカスタム属性の型、必要なコンス トラクターまたはコンス トラクターのパラメーターの型のいずれかのコア アセンブリを含んでいない場合、<xref:System.Reflection.MetadataLoadContext>はスローされません。</span><span class="sxs-lookup"><span data-stu-id="5229e-132">If a metadata entity sets flags that surface as a pseudo-custom attribute, and the core assembly does not contain the pseudo-custom attribute type, the necessary constructor or any of the parameter types of the constructor, the <xref:System.Reflection.MetadataLoadContext> will not throw.</span></span> <span data-ttu-id="5229e-133">返される属性の一覧から擬似的なカスタム属性が省略されます。</span><span class="sxs-lookup"><span data-stu-id="5229e-133">It will omit the pseudo-custom attribute from the list of returned attributes.</span></span>
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5229e-134">(アセンブリ ファイルのファイル ロックなど) 任意のネイティブ リソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="5229e-134">Releases any native resources (such as file locks on assembly files).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="5229e-135">後の破棄は、安全ではありませんを使用する<xref:System.Reflection.Assembly>によって管理されているオブジェクト、<xref:System.Reflection.MetadataLoadContext>ものによって管理されているすべてのリフレクション オブジェクトまたは<xref:System.Reflection.Assembly>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5229e-135">After disposal, it is not safe to use any <xref:System.Reflection.Assembly> objects dispensed by the <xref:System.Reflection.MetadataLoadContext> or any reflection objects dispensed by those <xref:System.Reflection.Assembly> objects.</span></span>

<span data-ttu-id="5229e-136">によって提供されるオブジェクトが、<xref:System.Reflection.MetadataLoadContext>をスローするよう努力、 <xref:System.ObjectDisposedException>、これは保証されません。</span><span class="sxs-lookup"><span data-stu-id="5229e-136">Though objects provided by the <xref:System.Reflection.MetadataLoadContext> strive to throw an <xref:System.ObjectDisposedException>, this is not guaranteed.</span></span>

<span data-ttu-id="5229e-137">一部の Api は、固定または以前にキャッシュされたデータを返す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5229e-137">Some APIs may return fixed or previously cached data.</span></span> <span data-ttu-id="5229e-138">オブジェクトにアクセスする*中に*、<xref:System.Reflection.MetadataLoadContext.Dispose%2A>をアンマネージ アクセス違反と failfast メソッドの呼び出しがあります。</span><span class="sxs-lookup"><span data-stu-id="5229e-138">Accessing objects *during* a <xref:System.Reflection.MetadataLoadContext.Dispose%2A> method call may result in an unmanaged access violation and failfast.</span></span>
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5229e-139"><see cref="T:System.Reflection.MetadataLoadContext" /> に読み込まれたアセンブリのアトミックなスナップショットを返します。</span><span class="sxs-lookup"><span data-stu-id="5229e-139">Return an atomic snapshot of the assemblies that have been loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span></summary>
        <returns><span data-ttu-id="5229e-140"><see xref="T:System.Reflection.Assembly" /> オブジェクトの列挙可能なコレクションです。</span><span class="sxs-lookup"><span data-stu-id="5229e-140">An enumerable collection of <see xref="T:System.Reflection.Assembly" /> objects.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="5229e-141"><see cref="T:System.Reflection.AssemblyName" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5229e-141">An <see cref="T:System.Reflection.AssemblyName" /> instance.</span></span></param>
        <summary><span data-ttu-id="5229e-142">指定したアセンブリ名をアセンブリに解決します。</span><span class="sxs-lookup"><span data-stu-id="5229e-142">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="5229e-143">アセンブリが以前この名前にバインドされている場合、そのアセンブリが返されます。</span><span class="sxs-lookup"><span data-stu-id="5229e-143">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="5229e-144">それ以外の場合、<see cref="T:System.Reflection.MetadataLoadContext" /> が指定した <see cref="T:System.Reflection.MetadataAssemblyResolver" /> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5229e-144">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="5229e-145"><see cref="T:System.Reflection.Assembly" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5229e-145">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="5229e-146">このメソッドの動作がの動作と一致することに注意してください、<xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType>イベントを解決するには、動作と一致しません<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="5229e-146">Note that the behavior of this method matches the behavior of the <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5229e-147">(後者の場合はその解決イベントを発生させることがなく。)</span><span class="sxs-lookup"><span data-stu-id="5229e-147">(The latter gives up without raising its resolve event.)</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="5229e-148">リゾルバーは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="5229e-148">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="5229e-149">アセンブリ名を表す <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="5229e-149">A <see cref="T:System.String" /> representing the assembly name.</span></span></param>
        <summary><span data-ttu-id="5229e-150">指定したアセンブリ名をアセンブリに解決します。</span><span class="sxs-lookup"><span data-stu-id="5229e-150">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="5229e-151">アセンブリが以前この名前にバインドされている場合、そのアセンブリが返されます。</span><span class="sxs-lookup"><span data-stu-id="5229e-151">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="5229e-152">それ以外の場合、<see cref="T:System.Reflection.MetadataLoadContext" /> が指定した <see cref="T:System.Reflection.MetadataAssemblyResolver" /> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5229e-152">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="5229e-153"><see cref="T:System.Reflection.Assembly" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5229e-153">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

<span data-ttu-id="5229e-154">このメソッドの動作がの動作と一致することに注意してください、<xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType>イベントを解決するには、動作と一致しません<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="5229e-154">Note that the behavior of this method matches the behavior of the <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5229e-155">(後者の場合はその解決イベントを発生させることがなく。)</span><span class="sxs-lookup"><span data-stu-id="5229e-155">(The latter gives up without raising its resolve event.)</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="5229e-156">リゾルバーは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="5229e-156">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath"><span data-ttu-id="5229e-157">アセンブリへのパスを表す <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="5229e-157">A <see cref="T:System.String" /> representing the path to the assembly.</span></span></param>
        <summary><span data-ttu-id="5229e-158">ディスク上の特定のパスからアセンブリを読み込み、<see cref="T:System.Reflection.MetadataLoadContext" /> でそのアセンブリ名をそれにバインドします。</span><span class="sxs-lookup"><span data-stu-id="5229e-158">Loads an assembly from a specific path on the disk and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="5229e-159">前の同じ名前のアセンブリが <see cref="T:System.Reflection.MetadataLoadContext" /> に既に読み込まれている場合、前のアセンブリが返されます。</span><span class="sxs-lookup"><span data-stu-id="5229e-159">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="5229e-160"><see cref="T:System.Reflection.Assembly" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5229e-160">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="5229e-161">2 つのアセンブリの Mvid は異なります。</span><span class="sxs-lookup"><span data-stu-id="5229e-161">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="5229e-162">アセンブリを保持している <see cref="T:System.Byte[]" />。</span><span class="sxs-lookup"><span data-stu-id="5229e-162">A <see cref="T:System.Byte[]" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="5229e-163">バイト配列からアセンブリを読み込み、<see cref="T:System.Reflection.MetadataLoadContext" /> でそのアセンブリ名をそれにバインドします。</span><span class="sxs-lookup"><span data-stu-id="5229e-163">Loads an assembly from a byte array and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="5229e-164">前の同じ名前のアセンブリが <see cref="T:System.Reflection.MetadataLoadContext" /> に既に読み込まれている場合、前のアセンブリが返されます。</span><span class="sxs-lookup"><span data-stu-id="5229e-164">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="5229e-165"><see cref="T:System.Reflection.Assembly" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5229e-165">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="5229e-166">2 つのアセンブリの Mvid は異なります。</span><span class="sxs-lookup"><span data-stu-id="5229e-166">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="5229e-167">アセンブリを保持している <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="5229e-167">A <see cref="T:System.IO.Stream" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="5229e-168">ストリームからアセンブリを読み込み、<see cref="T:System.Reflection.MetadataLoadContext" /> でそのアセンブリ名をそれにバインドします。</span><span class="sxs-lookup"><span data-stu-id="5229e-168">Loads an assembly from a stream and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="5229e-169">前の同じ名前のアセンブリが <see cref="T:System.Reflection.MetadataLoadContext" /> に既に読み込まれている場合、前のアセンブリが返されます。</span><span class="sxs-lookup"><span data-stu-id="5229e-169">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="5229e-170"><xref:System.Reflection.MetadataLoadContext>の所有権を取得、<xref:System.IO.Stream>このメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="5229e-170">The <xref:System.Reflection.MetadataLoadContext> takes ownership of the <xref:System.IO.Stream> passed into this method.</span></span> <span data-ttu-id="5229e-171">元の所有者の位置を変更、破棄する必要がありますいない、 <xref:System.IO.Stream>、またはその位置は変更しないでおくことを前提としています。</span><span class="sxs-lookup"><span data-stu-id="5229e-171">The original owner must not mutate its position, dispose the <xref:System.IO.Stream>, or assume that its position will stay unchanged.</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="5229e-172">2 つのアセンブリの Mvid は異なります。</span><span class="sxs-lookup"><span data-stu-id="5229e-172">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
