<Type Name="PropertyInfo" FullName="System.Reflection.PropertyInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b4e15e55e23a25e647575a01fc6d096bcd64f749" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48748950" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PropertyInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._PropertyInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit PropertyInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._PropertyInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PropertyInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PropertyInfo&#xA;Inherits MemberInfo&#xA;Implements _PropertyInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_PropertyInfo" />
  <TypeSignature Language="F#" Value="type PropertyInfo = class&#xA;    inherit MemberInfo&#xA;    interface _PropertyInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._PropertyInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._PropertyInfo))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="71d4c-101">プロパティの属性を取得し、プロパティのメタデータにアクセスできるようにします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="71d4c-101">Discovers the attributes of a property and provides access to property metadata.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-102">プロパティは、論理的にフィールドと同じです。</span><span class="sxs-lookup"><span data-stu-id="71d4c-102">Properties are logically the same as fields.</span></span> <span data-ttu-id="71d4c-103">プロパティが値を持つは通常、オブジェクトの状態の名前付き部分`get`と`set`アクセサー。</span><span class="sxs-lookup"><span data-stu-id="71d4c-103">A property is a named aspect of an object's state whose value is typically accessible through `get` and `set` accessors.</span></span> <span data-ttu-id="71d4c-104">プロパティがあります、読み取り専用に一連のルーチンがサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-104">Properties may be read-only, in which case a set routine is not supported.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71d4c-105">プロパティは、かどうかを判断する`static`、取得する必要があります、<xref:System.Reflection.MethodInfo>の`get`または`set`アクセサーを呼び出すことによって、<xref:System.Reflection.PropertyInfo.GetGetMethod%2A>または<xref:System.Reflection.PropertyInfo.GetSetMethod%2A>メソッドを調べ、<xref:System.Reflection.MethodBase.IsStatic%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="71d4c-105">To determine whether a property is `static`, you must obtain the <xref:System.Reflection.MethodInfo> for the `get` or `set` accessor, by calling the <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> or the <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> method, and examine its <xref:System.Reflection.MethodBase.IsStatic%2A> property.</span></span>  
  
 <span data-ttu-id="71d4c-106">このクラスのいくつかのメソッドがある、`get`アクセサーと`set`プロパティのアクセサー メソッドに特定の形式があります。</span><span class="sxs-lookup"><span data-stu-id="71d4c-106">Several methods in this class assume that the `get` accessor and `set` accessor methods of a property have certain formats.</span></span> <span data-ttu-id="71d4c-107">署名、`get`と`set`メソッドは、次の規則と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="71d4c-107">The signatures of the `get` and `set` methods must match the following convention:</span></span>  
  
-   <span data-ttu-id="71d4c-108">戻り値の型、`get`メソッドとの最後の引数、`set`メソッドは、同一である必要があります。</span><span class="sxs-lookup"><span data-stu-id="71d4c-108">The return type of the `get` method and the last argument of the `set` method must be identical.</span></span> <span data-ttu-id="71d4c-109">これは、プロパティの型です。</span><span class="sxs-lookup"><span data-stu-id="71d4c-109">This is the type of the property.</span></span>  
  
-   <span data-ttu-id="71d4c-110">`get`と`set`メソッドは、同じ数、種類、およびインデックスの順序をいる必要があります。</span><span class="sxs-lookup"><span data-stu-id="71d4c-110">The `get` and `set` methods must have the same number, type, and order of indices.</span></span>  
  
 <span data-ttu-id="71d4c-111">この形式に準拠していない場合の動作、`GetValue`と`SetValue`メソッドが定義されていません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-111">If this format is not followed, the behavior of the `GetValue` and `SetValue` methods is undefined.</span></span>  
  
 <span data-ttu-id="71d4c-112">呼び出す<xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType>で`PropertyInfo`ときに、`inherit`パラメーターの`GetCustomAttributes`は`true`型階層については説明しません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-112">Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> on `PropertyInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy.</span></span> <span data-ttu-id="71d4c-113">使用<xref:System.Attribute?displayProperty=nameWithType>カスタム属性を継承するようにします。</span><span class="sxs-lookup"><span data-stu-id="71d4c-113">Use <xref:System.Attribute?displayProperty=nameWithType> to inherit custom attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71d4c-114">この例では、さまざまなリフレクション クラスを使用して、アセンブリ内に含まれるメタデータを分析する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-114">This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71d4c-115">この例には、コマンド プロンプトでは、テキスト ファイルに次のようにリダイレクトする、データの約 55,000 行が生成されます: **example.exe > が**</span><span class="sxs-lookup"><span data-stu-id="71d4c-115">This example generates about 55,000 lines of data, which you can redirect to a text file at the command prompt, as follows: **example.exe > propertyinfo.txt**</span></span>  
  
 [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]
 [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]
 [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="71d4c-116">継承クラスの完全な信頼。</span>
      <span class="sxs-lookup">
        <span data-stu-id="71d4c-116">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="71d4c-117">部分的に信頼されたコードでは、このクラスを継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="71d4c-117">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <threadsafe>
      <span data-ttu-id="71d4c-118">この型はスレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="71d4c-118">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="71d4c-119">継承する場合<see cref="T:System.Reflection.PropertyInfo" />、次のメンバーをオーバーライドする必要があります: <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />、 <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />、 <see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />、 <see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />、 <see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />、および<see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" />します。</span>
        <span class="sxs-lookup">
          <span data-stu-id="71d4c-119">When you inherit from <see cref="T:System.Reflection.PropertyInfo" />, you must override the following members: <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />, <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />, and <see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" />.</span>
        </span>
      </para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PropertyInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PropertyInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-120">
            <see cref="T:System.Reflection.PropertyInfo" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-120">Initializes a new instance of the <see cref="T:System.Reflection.PropertyInfo" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="71d4c-121">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-121">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="71d4c-122">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-122">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.PropertyAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As PropertyAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::PropertyAttributes Attributes { System::Reflection::PropertyAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.PropertyAttributes" Usage="System.Reflection.PropertyInfo.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-123">このプロパティの属性を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-123">Gets the attributes for this property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="71d4c-124">このプロパティの属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-124">The attributes of this property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-125"><xref:System.Reflection.PropertyInfo.Attributes%2A>プロパティは、これによって表されるプロパティに関連付けられている属性を返します<xref:System.Reflection.PropertyInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="71d4c-125">The <xref:System.Reflection.PropertyInfo.Attributes%2A> property returns the attributes associated with the property represented by this <xref:System.Reflection.PropertyInfo> object.</span></span>  <span data-ttu-id="71d4c-126">属性は、主に修飾子がプロパティを作成するときに、コンパイラによって適用プロパティが既定のプロパティであるかどうかを示している、`SpecialName`プロパティ、という具合です。</span><span class="sxs-lookup"><span data-stu-id="71d4c-126">The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a `SpecialName` property, and so on.</span></span> <span data-ttu-id="71d4c-127">.NET Framework クラス ライブラリの値の型にあるほぼすべてのプロパティに注意してください、<xref:System.Reflection.PropertyInfo.Attributes%2A>プロパティは<xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-127">Note that, for almost all properties found in types in the .NET Framework class library, the value of the <xref:System.Reflection.PropertyInfo.Attributes%2A> property is <xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType>.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="71d4c-128">ほとんどの場合、おそらく、プロパティに関連付けられているカスタム属性を取得します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-128">In most cases, you probably want to retrieve the custom attributes associated with a property.</span></span> <span data-ttu-id="71d4c-129">これを行うには、値を取得、<xref:System.Reflection.MemberInfo.CustomAttributes%2A>プロパティ、またはのいずれかのオーバー ロードの呼び出し、<xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-129">To do this, retrieve the value of the <xref:System.Reflection.MemberInfo.CustomAttributes%2A> property, or call one of the overloads of the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.</span></span>  
  
 <span data-ttu-id="71d4c-130">取得する、<xref:System.Reflection.PropertyInfo.Attributes%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="71d4c-130">To get the <xref:System.Reflection.PropertyInfo.Attributes%2A> property:</span></span>  
  
1.  <span data-ttu-id="71d4c-131">取得、<xref:System.Type>プロパティが所属する型を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="71d4c-131">Get a <xref:System.Type> object that represents the type to which the property belongs.</span></span>  
  
2.  <span data-ttu-id="71d4c-132">取得、<xref:System.Reflection.PropertyInfo>オブジェクトのオーバー ロードを呼び出すことによって、<xref:System.Type.GetProperty%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-132">Get the <xref:System.Reflection.PropertyInfo> object by calling an overload of the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method.</span></span>  
  
3.  <span data-ttu-id="71d4c-133">プロパティの属性を取得、<xref:System.Reflection.PropertyInfo.Attributes%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="71d4c-133">Retrieve the property's attributes from the <xref:System.Reflection.PropertyInfo.Attributes%2A> property.</span></span>  
  
 <span data-ttu-id="71d4c-134">リフレクションを使用して動的に作成された型のプロパティの属性を定義することができますのオーバー ロードを呼び出すことによって生成、<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>メソッドとの値を指定して、`attributes`引数。</span><span class="sxs-lookup"><span data-stu-id="71d4c-134">You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> method and supplying a value for the `attributes` argument.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MemberInfo.CustomAttributes" />
        <altmember cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public abstract bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Reflection.PropertyInfo.CanRead" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.CanRead</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-135">プロパティを読み取ることができるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-135">Gets a value indicating whether the property can be read.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="71d4c-136">このプロパティを読み取ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-136">
              <see langword="true" /> if this property can be read; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-137">プロパティがない場合、`get`アクセサー、読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-137">If the property does not have a `get` accessor, it cannot be read.</span></span>  
  
 <span data-ttu-id="71d4c-138">取得する、`CanRead`プロパティ、クラスをまず取得`Type`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-138">To get the `CanRead` property, first get the class `Type`.</span></span> <span data-ttu-id="71d4c-139">`Type`、取得、`PropertyInfo`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-139">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="71d4c-140">`PropertyInfo`、取得、`CanRead`値。</span><span class="sxs-lookup"><span data-stu-id="71d4c-140">From the `PropertyInfo`, get the `CanRead` value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71d4c-141">次の例では、2 つのプロパティを定義します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-141">The following example defines two properties.</span></span> <span data-ttu-id="71d4c-142">最初のプロパティが読み取り可能な`CanRead`プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-142">The first property is readable and the `CanRead` property is `true`.</span></span> <span data-ttu-id="71d4c-143">2 番目のプロパティを読み取ることができません (get アクセサーはありません、)、`CanRead`プロパティは`false`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-143">The second property is not readable (there is no get accessor), and the `CanRead` property is `false`.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public abstract bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Reflection.PropertyInfo.CanWrite" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.CanWrite</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-144">プロパティに書き込むことができるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-144">Gets a value indicating whether the property can be written to.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="71d4c-145">このプロパティに書き込むことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-145">
              <see langword="true" /> if this property can be written to; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-146"><xref:System.Reflection.PropertyInfo.CanWrite%2A> 返します`true`プロパティがある場合、`set`アクセサー、アクセサーの場合でも`private`、 `internal` (または`Friend`Visual Basic で)、または`protected`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-146"><xref:System.Reflection.PropertyInfo.CanWrite%2A> returns `true` if the property has a `set` accessor, even if the accessor is `private`, `internal` (or `Friend` in Visual Basic), or `protected`.</span></span>   <span data-ttu-id="71d4c-147">プロパティがない場合、 `set` 、アクセサー メソッドを返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-147">If the property does not have a `set` accessor, the method returns `false`.</span></span>  
  
 <span data-ttu-id="71d4c-148">値を取得する、<xref:System.Reflection.PropertyInfo.CanWrite%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="71d4c-148">To get the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property:</span></span>  
  
1.  <span data-ttu-id="71d4c-149">取得、<xref:System.Type>プロパティを含む型のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="71d4c-149">Get the <xref:System.Type> object of the type that includes the property.</span></span>  
  
2.  <span data-ttu-id="71d4c-150">呼び出す、<xref:System.Type.GetProperty%2A?displayProperty=nameWithType>を取得する、<xref:System.Reflection.PropertyInfo>プロパティを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="71d4c-150">Call the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> to get the <xref:System.Reflection.PropertyInfo> object that represents the property.</span></span>  
  
3.  <span data-ttu-id="71d4c-151">値を取得、<xref:System.Reflection.PropertyInfo.CanWrite%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="71d4c-151">Retrieve the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71d4c-152">次の例では、2 つのプロパティを定義します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-152">The following example defines two properties.</span></span> <span data-ttu-id="71d4c-153">最初のプロパティが書き込み可能な`CanWrite`プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-153">The first property is writable and the `CanWrite` property is `true`.</span></span> <span data-ttu-id="71d4c-154">2 番目のプロパティが書き込み可能な (があるない`set`アクセサー)、および`CanWrite`プロパティは`false`。</span><span class="sxs-lookup"><span data-stu-id="71d4c-154">The second property is not writable (there is no `set` accessor), and the `CanWrite` property is `false`.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="propertyInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="71d4c-155">対象のインスタンスと比較する対象のオブジェクト、または <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-155">An object to compare with this instance, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-156">このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-156">Returns a value that indicates whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-157">
            <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-157">
              <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAccessors">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-158">このプロパティの <see langword="get" /> アクセサーと <see langword="set" /> アクセサーの配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-158">Returns an array of the <see langword="get" /> and <see langword="set" /> accessors on this property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAccessors">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetAccessors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetAccessors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetAccessors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessors () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetAccessors();" />
      <MemberSignature Language="F#" Value="abstract member GetAccessors : unit -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetAccessors : unit -&gt; System.Reflection.MethodInfo[]" Usage="propertyInfo.GetAccessors " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetAccessors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-159">現在のインスタンスがリフレクションしているプロパティの、パブリックな <see langword="get" /> アクセサー、および <see langword="set" /> アクセサーをリフレクションする要素で構成される配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-159">Returns an array whose elements reflect the public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-160">現在のインスタンスがリフレクションしているプロパティの、パブリックな <see langword="get" /> アクセサー、および <see langword="set" /> アクセサーをリフレクションする <see cref="T:System.Reflection.MethodInfo" /> オブジェクトの配列。見つからなかった場合、このメソッドは 0 要素の配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-160">An array of <see cref="T:System.Reflection.MethodInfo" /> objects that reflect the public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-161">呼び出す、<xref:System.Reflection.PropertyInfo.GetAccessors%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-161">To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:</span></span>  
  
1.  <span data-ttu-id="71d4c-162">取得、<xref:System.Type>クラスを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="71d4c-162">Get a <xref:System.Type> object that represents the class.</span></span>  
  
2.  <span data-ttu-id="71d4c-163"><xref:System.Type>オブジェクト、取得、<xref:System.Reflection.PropertyInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="71d4c-163">From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
3.  <span data-ttu-id="71d4c-164"><xref:System.Reflection.PropertyInfo>オブジェクトを呼び出し、<xref:System.Reflection.PropertyInfo.GetAccessors%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-164">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71d4c-165">次の例のパブリック アクセサーを取得する、`ClassWithProperty.Caption`それらについての情報のプロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-165">The following example retrieves the public accessors of the `ClassWithProperty.Caption` property and displays information about them.</span></span> <span data-ttu-id="71d4c-166">呼び出しも、<xref:System.Reflection.MethodBase.Invoke%2A>メソッドとプロパティ値を取得する get アクセス操作子のプロパティ値を設定する set アクセス操作子。</span><span class="sxs-lookup"><span data-stu-id="71d4c-166">It also calls the <xref:System.Reflection.MethodBase.Invoke%2A> method of the setter to set the property value and of the getter to retrieve the property value.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetAccessors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.getaccessors/cs/source.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetAccessors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.getaccessors/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="71d4c-167">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-167">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="71d4c-168">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-168">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetAccessors (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetAccessors(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAccessors (nonPublic As Boolean) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetAccessors(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetAccessors : bool -&gt; System.Reflection.MethodInfo[]" Usage="propertyInfo.GetAccessors nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetAccessors(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="71d4c-169">返された配列で非パブリック メソッドが返されるかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-169">Indicates whether non-public methods should be returned in the returned array.</span>
          </span>
          <span data-ttu-id="71d4c-170">非パブリック メソッドが含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-170">
              <see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-171">現在のインスタンスがリフレクションしているプロパティのパブリックな (指定された場合は非パブリックも) <see langword="get" /> アクセサー、および <see langword="set" /> アクセサーをリフレクションする要素で構成される配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-171">Returns an array whose elements reflect the public and, if specified, non-public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-172">現在のインスタンスがリフレクションしているプロパティの、<see langword="get" /> アクセサー、および <see langword="set" /> アクセサーをリフレクションする要素で構成される配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-172">An array whose elements reflect the <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span>
          </span>
          <span data-ttu-id="71d4c-173">
            <paramref name="nonPublic" /> が <see langword="true" /> の場合、この配列はパブリックと非パブリック両方の <see langword="get" /> アクセサー、および<see langword="set" /> アクセサーを格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-173">If <paramref name="nonPublic" /> is <see langword="true" />, this array contains public and non-public <see langword="get" /> and <see langword="set" /> accessors.</span>
          </span>
          <span data-ttu-id="71d4c-174">
            <paramref name="nonPublic" /> が <see langword="false" /> の場合、この配列はパブリックな <see langword="get" /> および <see langword="set" /> アクセサーだけを格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-174">If <paramref name="nonPublic" /> is <see langword="false" />, this array contains only public <see langword="get" /> and <see langword="set" /> accessors.</span>
          </span>
          <span data-ttu-id="71d4c-175">指定した表示設定でアクセサーが見つからなかった場合、このメソッドは 0 要素の配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-175">If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-176">呼び出す、<xref:System.Reflection.PropertyInfo.GetAccessors%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-176">To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:</span></span>  
  
1.  <span data-ttu-id="71d4c-177">取得、<xref:System.Type>クラスを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="71d4c-177">Get a <xref:System.Type> object that represents the class.</span></span>  
  
2.  <span data-ttu-id="71d4c-178"><xref:System.Type>オブジェクト、取得、<xref:System.Reflection.PropertyInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="71d4c-178">From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
3.  <span data-ttu-id="71d4c-179"><xref:System.Reflection.PropertyInfo>オブジェクトを呼び出し、<xref:System.Reflection.PropertyInfo.GetAccessors%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-179">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71d4c-180">次の例のアクセサーを取得する、`ClassWithProperty.Caption`それらについての情報のプロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-180">The following example retrieves the accessors of the `ClassWithProperty.Caption` property and displays information about them.</span></span> <span data-ttu-id="71d4c-181">呼び出しも、<xref:System.Reflection.MethodBase.Invoke%2A>メソッドとプロパティ値を取得する get アクセス操作子のプロパティ値を設定する set アクセス操作子。</span><span class="sxs-lookup"><span data-stu-id="71d4c-181">It also calls the <xref:System.Reflection.MethodBase.Invoke%2A> method of the setter to set the property value and of the getter to retrieve the property value.</span></span>  
  
 [!code-csharp[Classic PropertyInfo.GetAccessors1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetAccessors1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetAccessors1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetAccessors1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="71d4c-182">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-182">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="71d4c-183">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-183">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetConstantValue">
      <MemberSignature Language="C#" Value="public virtual object GetConstantValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetConstantValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetConstantValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConstantValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetConstantValue();" />
      <MemberSignature Language="F#" Value="abstract member GetConstantValue : unit -&gt; obj&#xA;override this.GetConstantValue : unit -&gt; obj" Usage="propertyInfo.GetConstantValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-184">コンパイラによってプロパティに関連付けられているリテラル値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-184">Returns a literal value associated with the property by a compiler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-185">プロパティに関連付けられているリテラル値を格納している <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-185">An <see cref="T:System.Object" /> that contains the literal value associated with the property.</span>
          </span>
          <span data-ttu-id="71d4c-186">リテラル値が、要素値がゼロに設定されているクラス型である場合、戻り値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-186">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-187">このメソッドは、マネージ コンパイラ、コード アナライザーの設計者に提供されます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-187">This method is provided for designers of managed compilers and code analyzers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71d4c-188">実行するコードが生じるために、リフレクションのみのコンテキストでこのメソッドを使わないでください。</span><span class="sxs-lookup"><span data-stu-id="71d4c-188">Do not use this method in the reflection-only context, because it might cause code to execute.</span></span> <span data-ttu-id="71d4c-189">代わりに、<xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A> メソッドを使用してください。</span><span class="sxs-lookup"><span data-stu-id="71d4c-189">Use the <xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A> method instead.</span></span>  
  
 <span data-ttu-id="71d4c-190">アンマネージ メタデータで定数テーブルは、フィールド、パラメーター、およびプロパティの定数値の格納に使用されます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-190">In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</span></span> <span data-ttu-id="71d4c-191">継続的な情報は、実行時の動作を直接は影響しません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-191">Constant information does not directly influence runtime behavior.</span></span> <span data-ttu-id="71d4c-192">コンパイラの検査、コンパイル時にこの情報のメタデータをインポートするときにします。</span><span class="sxs-lookup"><span data-stu-id="71d4c-192">Compilers inspect this information, at compile time, when importing metadata.</span></span> <span data-ttu-id="71d4c-193">使用する場合、定数の値は、コンパイラは Microsoft intermediate language (MSIL) ストリームに埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-193">If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</span></span> <span data-ttu-id="71d4c-194">実行時に定数のテーブルへのアクセスに使用できる MSIL 命令がありません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-194">There are no MSIL instructions that can be used to access the Constant table at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71d4c-195">定数値と定数のテーブルの詳細については、ECMA Partition II のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="71d4c-195">For more information on constant values and the Constant table, see the ECMA Partition II documentation.</span></span> <span data-ttu-id="71d4c-196">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="71d4c-196">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71d4c-197">アンマネージ メタデータの定数のテーブルには、現在のプロパティの定数値は含まれていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-197">The Constant table in unmanaged metadata does not contain a constant value for the current property.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="71d4c-198">値の型は、共通言語仕様 (CLS) によって許可されているどの型でもありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-198">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span>
          </span>
          <span data-ttu-id="71d4c-199">ECMA Partition II 仕様書、「メタデータ」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-199">See the ECMA Partition II specification, Metadata.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetGetMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-200">このプロパティの <see langword="MethodInfo" /> アクセサーを表す <see langword="get" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-200">Returns a <see langword="MethodInfo" /> representing the <see langword="get" /> accessor for this property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetGetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetGetMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetGetMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetGetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGetMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetGetMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetGetMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetGetMethod : unit -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetGetMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-201">このプロパティのパブリックな <see langword="get" /> アクセサーを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-201">Returns the public <see langword="get" /> accessor for this property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-202">このプロパティのパブリックな <see langword="MethodInfo" /> アクセサーを表す <see langword="get" /> オブジェクト。<see langword="null" /> アクセサーが非パブリックまたは存在しない場合は <see langword="get" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-202">A <see langword="MethodInfo" /> object representing the public <see langword="get" /> accessor for this property, or <see langword="null" /> if the <see langword="get" /> accessor is non-public or does not exist.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-203">これは抽象の実装を提供する便利なメソッド`GetGetMethod`メソッドを`nonPublic`パラメーターに設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-203">This is a convenience method that provides an implementation for the abstract `GetGetMethod` method with the `nonPublic` parameter set to `false`.</span></span>  
  
 <span data-ttu-id="71d4c-204">使用する、`GetGetMethod`メソッド、クラスをまず取得`Type`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-204">To use the `GetGetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="71d4c-205">`Type`、取得、<xref:System.Reflection.PropertyInfo>します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-205">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="71d4c-206"><xref:System.Reflection.PropertyInfo>を使用して、`GetGetMethod`メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-206">From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="71d4c-207">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-207">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="71d4c-208">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-208">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetGetMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetGetMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetGetMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetGetMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetGetMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetGetMethod : bool -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetGetMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="71d4c-209">パブリックでない <see langword="get" /> アクセサーが返されるかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-209">Indicates whether a non-public <see langword="get" /> accessor should be returned.</span>
          </span>
          <span data-ttu-id="71d4c-210">パブリックでないアクセサーが返される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-210">
              <see langword="true" /> if a non-public accessor is to be returned; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-211">派生クラス内でオーバーライドされた場合に、このプロパティのパブリックまたは非パブリックな <see langword="get" /> アクセサーを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-211">When overridden in a derived class, returns the public or non-public <see langword="get" /> accessor for this property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-212">
            <see langword="MethodInfo" /> が <see langword="get" /> の場合は、このプロパティの <paramref name="nonPublic" /> アクセサーを表す <see langword="true" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-212">A <see langword="MethodInfo" /> object representing the <see langword="get" /> accessor for this property, if <paramref name="nonPublic" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="71d4c-213">
            <see langword="null" /> が <paramref name="nonPublic" /> で <see langword="false" /> アクセサーが非パブリックの場合、または <see langword="get" /> が <paramref name="nonPublic" /> でも <see langword="true" /> アクセサーが存在しない場合は、<see langword="get" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-213">Returns <see langword="null" /> if <paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="get" /> accessor is non-public, or if <paramref name="nonPublic" /> is <see langword="true" /> but no <see langword="get" /> accessors exist.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-214">このプロパティは、 <xref:System.Reflection.MethodInfo> get アクセサーを表します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-214">This property is the <xref:System.Reflection.MethodInfo> representing the get accessor.</span></span>  
  
 <span data-ttu-id="71d4c-215">使用する、`GetGetMethod`メソッド、クラスをまず取得`Type`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-215">To use the `GetGetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="71d4c-216">`Type`、取得、<xref:System.Reflection.PropertyInfo>します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-216">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="71d4c-217"><xref:System.Reflection.PropertyInfo>を使用して、`GetGetMethod`メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-217">From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71d4c-218">次の例は、パブリックまたは非パブリック`get`指定したプロパティのアクセサー。</span><span class="sxs-lookup"><span data-stu-id="71d4c-218">The following example displays the public or non-public `get` accessor for the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="71d4c-219">要求されたメソッドはパブリックではないメソッドのため、呼び出し元にはこのパブリックでないメソッドに反映する <see cref="T:System.Security.Permissions.ReflectionPermission" /> がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-219">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="71d4c-220">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-220">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="71d4c-221">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-221">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="propertyInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-222">このインスタンスのハッシュ コードを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-222">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-223">32 ビット符号付き整数ハッシュ コード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-223">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexParameters">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ParameterInfo[] GetIndexParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ParameterInfo[] GetIndexParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetIndexParameters" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetIndexParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetIndexParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetIndexParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="propertyInfo.GetIndexParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetIndexParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-224">派生クラスによってオーバーライドされた場合に、プロパティのすべてのインデックス パラメーターの配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-224">When overridden in a derived class, returns an array of all the index parameters for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-225">インデックスのパラメーターを格納している <see langword="ParameterInfo" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-225">An array of type <see langword="ParameterInfo" /> containing the parameters for the indexes.</span>
          </span>
          <span data-ttu-id="71d4c-226">プロパティがインデックス付けされていない場合、配列の要素はゼロ (0) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-226">If the property is not indexed, the array has 0 (zero) elements.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-227">返される配列からの必要なパラメーター情報を抽出します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-227">Extract any required parameter information from the returned array.</span></span>  
  
 <span data-ttu-id="71d4c-228">使用する、`GetIndexParameters`メソッド、クラスをまず取得`Type`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-228">To use the `GetIndexParameters` method, first get the class `Type`.</span></span> <span data-ttu-id="71d4c-229">`Type`、取得、`PropertyInfo`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-229">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="71d4c-230">`PropertyInfo`を使用して、`GetIndexParameters`メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-230">From the `PropertyInfo`, use the `GetIndexParameters` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71d4c-231">次の例では、指定したプロパティのインデックス パラメーターが表示されます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-231">The following example displays the index parameters of the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="71d4c-232">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-232">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="71d4c-233">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-233">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo GetMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.GetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GetMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ GetMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GetMethod : System.Reflection.MethodInfo" Usage="System.Reflection.PropertyInfo.GetMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-234">このプロパティの <see langword="get" /> アクセサーを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-234">Gets the <see langword="get" /> accessor for this property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="71d4c-235">このプロパティの <see langword="get" /> アクセサー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-235">The <see langword="get" /> accessor for this property.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOptionalCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetOptionalCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetOptionalCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOptionalCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetOptionalCustomModifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetOptionalCustomModifiers : unit -&gt; Type[]&#xA;override this.GetOptionalCustomModifiers : unit -&gt; Type[]" Usage="propertyInfo.GetOptionalCustomModifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-236">プロパティのオプションのカスタム修飾子を表す型の配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-236">Returns an array of types representing the optional custom modifiers of the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-237">
            <see cref="T:System.Type" /> や <see cref="T:System.Runtime.CompilerServices.IsConst" /> など、現在のプロパティのオプションのカスタム修飾子を識別する <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-237">An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-238"><xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A>と<xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A>マネージ コンパイラの設計者のメソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="71d4c-238">The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="71d4c-239">カスタム修飾子の詳細については、次を参照してください。<xref:System.Runtime.CompilerServices.IsBoxed>および関連クラス、<xref:System.Runtime.CompilerServices>名前空間と、ECMA Partition II ドキュメント メタデータに指定します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-239">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="71d4c-240">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="71d4c-240">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRawConstantValue">
      <MemberSignature Language="C#" Value="public virtual object GetRawConstantValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRawConstantValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetRawConstantValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRawConstantValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetRawConstantValue();" />
      <MemberSignature Language="F#" Value="abstract member GetRawConstantValue : unit -&gt; obj&#xA;override this.GetRawConstantValue : unit -&gt; obj" Usage="propertyInfo.GetRawConstantValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-241">コンパイラによってプロパティに関連付けられているリテラル値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-241">Returns a literal value associated with the property by a compiler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-242">プロパティに関連付けられているリテラル値を格納している <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-242">An <see cref="T:System.Object" /> that contains the literal value associated with the property.</span>
          </span>
          <span data-ttu-id="71d4c-243">リテラル値が、要素値がゼロに設定されているクラス型である場合、戻り値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-243">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-244">このメソッドは、マネージ コンパイラ、コード アナライザーの設計者に提供されます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-244">This method is provided for designers of managed compilers and code analyzers.</span></span>  
  
 <span data-ttu-id="71d4c-245">このメソッドは、実行コンテキストとリフレクションのみのコンテキストの両方で使用できます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-245">This method can be used in both the execution context and the reflection-only context.</span></span>  
  
 <span data-ttu-id="71d4c-246">アンマネージ メタデータで定数テーブルは、フィールド、パラメーター、およびプロパティの定数値の格納に使用されます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-246">In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</span></span> <span data-ttu-id="71d4c-247">継続的な情報は、実行時の動作を直接は影響しません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-247">Constant information does not directly influence runtime behavior.</span></span> <span data-ttu-id="71d4c-248">コンパイラの検査、コンパイル時にこの情報のメタデータをインポートするときにします。</span><span class="sxs-lookup"><span data-stu-id="71d4c-248">Compilers inspect this information, at compile time, when importing metadata.</span></span> <span data-ttu-id="71d4c-249">使用する場合、定数の値は、コンパイラは Microsoft intermediate language (MSIL) ストリームに埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-249">If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</span></span> <span data-ttu-id="71d4c-250">実行時に定数のテーブルへのアクセスに使用できる MSIL 命令がありません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-250">There are no MSIL instructions that can be used to access the Constant table at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71d4c-251">定数値と定数のテーブルの詳細については、ECMA Partition II のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="71d4c-251">For more information on constant values and the Constant table, see the ECMA Partition II documentation.</span></span> <span data-ttu-id="71d4c-252">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="71d4c-252">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71d4c-253">アンマネージ メタデータの定数のテーブルには、現在のプロパティの定数値は含まれていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-253">The Constant table in unmanaged metadata does not contain a constant value for the current property.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="71d4c-254">値の型は、共通言語仕様 (CLS) によって許可されているどの型でもありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-254">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span>
          </span>
          <span data-ttu-id="71d4c-255">ECMA Partition II 仕様「Metadata Logical Format: Other Structures」の「Element Types used in Signatures」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-255">See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetRequiredCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetRequiredCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRequiredCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetRequiredCustomModifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetRequiredCustomModifiers : unit -&gt; Type[]&#xA;override this.GetRequiredCustomModifiers : unit -&gt; Type[]" Usage="propertyInfo.GetRequiredCustomModifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-256">プロパティの必須のカスタム修飾子を表す型の配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-256">Returns an array of types representing the required custom modifiers of the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-257">
            <see cref="T:System.Type" /> や <see cref="T:System.Runtime.CompilerServices.IsConst" /> など、現在のプロパティの必須のカスタム修飾子を識別する <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-257">An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-258"><xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A>と<xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A>マネージ コンパイラの設計者のメソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="71d4c-258">The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="71d4c-259">カスタム修飾子の詳細については、次を参照してください。<xref:System.Runtime.CompilerServices.IsBoxed>および関連クラス、<xref:System.Runtime.CompilerServices>名前空間と、ECMA Partition II ドキュメント メタデータに指定します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-259">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="71d4c-260">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="71d4c-260">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSetMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-261">このプロパティの <see cref="T:System.Reflection.MethodInfo" /> アクセサーを表す <see langword="set" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-261">Returns a <see cref="T:System.Reflection.MethodInfo" /> representing the <see langword="set" /> accessor for this property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetSetMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetSetMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetSetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetSetMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetSetMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetSetMethod : unit -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetSetMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-262">このプロパティのパブリックな <see langword="set" /> アクセサーを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-262">Returns the public <see langword="set" /> accessor for this property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-263">
            <see langword="MethodInfo" /> アクセサーがパブリックな場合は、このプロパティの <see langword="Set" /> メソッドを表す <see langword="set" /> オブジェクト。<see langword="null" /> アクセサーがパブリックではない場合は <see langword="set" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-263">The <see langword="MethodInfo" /> object representing the <see langword="Set" /> method for this property if the <see langword="set" /> accessor is public, or <see langword="null" /> if the <see langword="set" /> accessor is not public.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-264">これは抽象の実装を提供する便利なメソッド`GetSetMethod`メソッドを`nonPublic`パラメーターに設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-264">This is a convenience method that provides an implementation for the abstract `GetSetMethod` method with the `nonPublic` parameter set to `false`.</span></span>  
  
 <span data-ttu-id="71d4c-265">使用する、`GetSetMethod`メソッド、クラスをまず取得`Type`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-265">To use the `GetSetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="71d4c-266">`Type`、取得、<xref:System.Reflection.PropertyInfo>します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-266">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="71d4c-267">`PropertyInfo`を使用して、`GetSetMethod`メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-267">From the `PropertyInfo`, use the `GetSetMethod` method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="71d4c-268">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-268">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="71d4c-269">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-269">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetSetMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetSetMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetSetMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetSetMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetSetMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetSetMethod : bool -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetSetMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="71d4c-270">パブリックでないアクセサーの場合に、アクセサーを返すかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-270">Indicates whether the accessor should be returned if it is non-public.</span>
          </span>
          <span data-ttu-id="71d4c-271">パブリックでないアクセサーが返される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-271">
              <see langword="true" /> if a non-public accessor is to be returned; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-272">派生クラス内でオーバーライドされた場合に、このプロパティの <see langword="set" /> アクセサーを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-272">When overridden in a derived class, returns the <see langword="set" /> accessor for this property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-273">次の表に示すように、このプロパティの <see langword="Set" /> メソッド、または <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-273">This property's <see langword="Set" /> method, or <see langword="null" />, as shown in the following table.</span>
          </span>
          <list type="table">
            <listheader>
              <term>
                <span data-ttu-id="71d4c-274">[値]</span>
                <span class="sxs-lookup">
                  <span data-stu-id="71d4c-274">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="71d4c-275">条件</span>
                <span class="sxs-lookup">
                  <span data-stu-id="71d4c-275">Condition</span>
                </span>
              </description>
            </listheader>
            <item>
              <term>
                <span data-ttu-id="71d4c-276">このプロパティの <see langword="Set" /> メソッド。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="71d4c-276">The <see langword="Set" /> method for this property.</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="71d4c-277">
                  <see langword="set" /> アクセサーがパブリック。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="71d4c-277">The <see langword="set" /> accessor is public.</span>
                </span>
                <span data-ttu-id="71d4c-278">- または -</span>
                <span class="sxs-lookup">
                  <span data-stu-id="71d4c-278">-or-</span>
                </span>
                <span data-ttu-id="71d4c-279">
                  <paramref name="nonPublic" /> が <see langword="true" /> で、<see langword="set" /> アクセサーが非パブリック。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="71d4c-279">
                    <paramref name="nonPublic" /> is <see langword="true" /> and the <see langword="set" /> accessor is non-public.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="null" />
              </term>
              <description>
                <span data-ttu-id="71d4c-280">
                  <paramref name="nonPublic" /> が <see langword="true" /> で、プロパティが読み取り専用。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="71d4c-280">
                    <paramref name="nonPublic" /> is <see langword="true" />, but the property is read-only.</span>
                </span>
                <span data-ttu-id="71d4c-281">- または -</span>
                <span class="sxs-lookup">
                  <span data-stu-id="71d4c-281">-or-</span>
                </span>
                <span data-ttu-id="71d4c-282">
                  <paramref name="nonPublic" /> が <see langword="false" /> で、<see langword="set" /> アクセサーが非パブリック。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="71d4c-282">
                    <paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="set" /> accessor is non-public.</span>
                </span>
                <span data-ttu-id="71d4c-283">- または -</span>
                <span class="sxs-lookup">
                  <span data-stu-id="71d4c-283">-or-</span>
                </span>
                <span data-ttu-id="71d4c-284">
                  <see langword="set" /> アクセサーがない。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="71d4c-284">There is no <see langword="set" /> accessor.</span>
                </span>
              </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-285">使用する、`GetSetMethod`メソッド、クラスをまず取得`Type`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-285">To use the `GetSetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="71d4c-286">`Type`、取得、<xref:System.Reflection.PropertyInfo>します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-286">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="71d4c-287">`PropertyInfo`を使用して、`GetSetMethod`メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-287">From the `PropertyInfo`, use the `GetSetMethod` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71d4c-288">次の例では、表示、`set`指定したプロパティのアクセサー。</span><span class="sxs-lookup"><span data-stu-id="71d4c-288">The following example displays the `set` accessor for the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="71d4c-289">要求されたメソッドはパブリックではないメソッドのため、呼び出し元にはこのパブリックでないメソッドに反映する <see cref="T:System.Security.Permissions.ReflectionPermission" /> がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-289">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="71d4c-290">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-290">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="71d4c-291">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-291">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="propertyInfo.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-292">指定されたオブジェクトのプロパティ値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-292">Returns the property value of a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (obj As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="member this.GetValue : obj -&gt; obj" Usage="propertyInfo.GetValue obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="71d4c-293">プロパティ値が返されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-293">The object whose property value will be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-294">指定されたオブジェクトのプロパティ値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-294">Returns the property value of a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-295">指定されたオブジェクトのプロパティの値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-295">The property value of the specified object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-296">呼び出す、<xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29>インデックスのないプロパティの値を取得するオーバー ロードは、インデックス付きプロパティの値を取得しようとする場合、メソッドをスローする<xref:System.Reflection.TargetParameterCountException>例外。</span><span class="sxs-lookup"><span data-stu-id="71d4c-296">You call the <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <xref:System.Reflection.TargetParameterCountException> exception.</span></span> <span data-ttu-id="71d4c-297">プロパティのインデックスを作成するかどうかを呼び出すかを判断できます、<xref:System.Reflection.PropertyInfo.GetIndexParameters%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-297">You can determine whether a property is indexed or not by calling the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="71d4c-298">場合、返された長さ<xref:System.Reflection.ParameterInfo>配列が 0 で、プロパティがインデックス付けされていません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-298">If the length of the returned <xref:System.Reflection.ParameterInfo> array is zero, the property is not indexed.</span></span>  
  
 <span data-ttu-id="71d4c-299">これは抽象の実装を提供する便利なメソッド<xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29>メソッドを<xref:System.Reflection.BindingFlags>パラメーターに設定<xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType>、<xref:System.Reflection.Binder>に設定`null`、インデックスの値に設定のオブジェクトの配列`null`、および<xref:System.Globalization.CultureInfo>設定`null`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-299">This is a convenience method that provides an implementation for the abstract <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method with the <xref:System.Reflection.BindingFlags> parameter set to <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType>, the <xref:System.Reflection.Binder> set to `null`, the object array of index values set to `null`, and the <xref:System.Globalization.CultureInfo> set to `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71d4c-300">次の例では、定義、`Planet`を 2 つのプロパティを持つクラス: `Name`、;、惑星の名前と`Distance`、地球からの地球の距離。</span><span class="sxs-lookup"><span data-stu-id="71d4c-300">The following example defines a `Planet` class that has two properties: `Name`, the name of the planet; and `Distance`, the planet's distance from Earth.</span></span> <span data-ttu-id="71d4c-301">例では、インスタンス化、`Planet`地球 Jupiter を表し、それをオブジェクト、`GetPropertyValues`メソッドを使用してプロパティに関する情報を表示、<xref:System.Reflection.PropertyInfo.GetValue%2A>それぞれの値を取得するメソッドを`Planet`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="71d4c-301">The example instantiates a `Planet` object that represents the planet Jupiter and passes it to a `GetPropertyValues` method that displays information about the properties and uses the <xref:System.Reflection.PropertyInfo.GetValue%2A> method to get the value of each `Planet` property.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public virtual object GetValue (object obj, object[] index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj, object[] index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValue (obj As Object, index As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetValue(System::Object ^ obj, cli::array &lt;System::Object ^&gt; ^ index);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj * obj[] -&gt; obj&#xA;override this.GetValue : obj * obj[] -&gt; obj" Usage="propertyInfo.GetValue (obj, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="index" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="71d4c-302">プロパティ値が返されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-302">The object whose property value will be returned.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="71d4c-303">インデックス付きプロパティのインデックス値 (省略可能)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-303">Optional index values for indexed properties.</span>
          </span>
          <span data-ttu-id="71d4c-304">インデックス付きプロパティのインデックスは 0 から始まります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-304">The indexes of indexed properties are zero-based.</span>
          </span>
          <span data-ttu-id="71d4c-305">インデックス付きでないプロパティの場合は、この値を <see langword="null" /> にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-305">This value should be <see langword="null" /> for non-indexed properties.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-306">指定したオブジェクトのプロパティの値を返します。インデックス付きプロパティの場合は、オプションでインデックス値を設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-306">Returns the property value of a specified object with optional index values for indexed properties.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-307">指定されたオブジェクトのプロパティの値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-307">The property value of the specified object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-308">プロパティは、インデックスを作成するかどうかを調べるには、<xref:System.Reflection.PropertyInfo.GetIndexParameters%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-308">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="71d4c-309">結果の配列がある 0 (ゼロ) 要素は、プロパティはインデックス作成されません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-309">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="71d4c-310">これは抽象の実装を提供する便利なメソッド`GetValue`メソッドを`BindingFlags`のパラメーター `Default`、`Binder`に設定`null`、および`CultureInfo`に設定`null`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-310">This is a convenience method that provides an implementation for the abstract `GetValue` method with a `BindingFlags` parameter of `Default`, the `Binder` set to `null`, and the `CultureInfo` set to `null`.</span></span>  
  
 <span data-ttu-id="71d4c-311">静的プロパティは、個々 のオブジェクトの種類に属するため、静的プロパティの取得を渡すことによって`null`オブジェクトの引数として。</span><span class="sxs-lookup"><span data-stu-id="71d4c-311">Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument.</span></span> <span data-ttu-id="71d4c-312">たとえば、次のコードを使用して、静的なを取得する`CurrentCulture`プロパティの`CultureInfo`:</span><span class="sxs-lookup"><span data-stu-id="71d4c-312">For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :</span></span>  
  
```csharp  
PropertyInfo CurCultProp =   
    (typeof(CultureInfo)).GetProperty("CurrentCulture");   
Console.WriteLine("CurrCult: " +  
    CurCultProp.GetValue(null,null));  
```  
  
 <span data-ttu-id="71d4c-313">使用する、`GetValue`メソッド、クラスをまず取得`Type`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-313">To use the `GetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="71d4c-314">`Type`、取得、`PropertyInfo`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-314">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="71d4c-315">`PropertyInfo`を使用して、`GetValue`メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-315">From the `PropertyInfo`, use the `GetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71d4c-316">以降では、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、呼び出し元が許可されている場合は、非パブリック メンバーへのアクセスに使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグを設定し、許可セットまたはサブセットに非パブリック メンバーの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="71d4c-316">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="71d4c-317">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="71d4c-317">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="71d4c-318">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="71d4c-318">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71d4c-319">次の例では、インデックス付きプロパティの値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-319">The following example shows how to get the value of an indexed property.</span></span> <span data-ttu-id="71d4c-320"><xref:System.String.Chars%2A?displayProperty=nameWithType>プロパティは既定のプロパティ (c# のインデクサー)、<xref:System.String>クラス。</span><span class="sxs-lookup"><span data-stu-id="71d4c-320">The <xref:System.String.Chars%2A?displayProperty=nameWithType> property is the default property (the indexer in C#) of the <xref:System.String> class.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetValue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.PropertyInfo.GetValue Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.PropertyInfo.GetValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="71d4c-321">必要な引数の型が <paramref name="index" /> 配列に含まれていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-321">The <paramref name="index" /> array does not contain the type of arguments needed.</span>
          </span>
          <span data-ttu-id="71d4c-322">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-322">-or-</span>
          </span>
          <span data-ttu-id="71d4c-323">プロパティの <see langword="get" /> アクセサーが見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-323">The property's <see langword="get" /> accessor is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="71d4c-324">
                <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">Windows ストア アプリ用 .NET</see> または<see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">ポータブル クラス ライブラリ</see>では、<see cref="T:System.Exception" /> を代わりにキャッチします。</span>
              <span class="sxs-lookup">
                <span data-stu-id="71d4c-324">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="71d4c-325">オブジェクトがターゲット型と一致しません。あるいは、プロパティはインスタンス プロパティですが <paramref name="obj" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-325">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="71d4c-326">
            <paramref name="index" /> 内のパラメーターの数が、インデックス付きプロパティが受け取るパラメーターの数と一致していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-326">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="71d4c-327">
                <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">Windows ストア アプリ用 .NET</see> または<see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">ポータブル クラス ライブラリ</see>では、基本クラスの例外である <see cref="T:System.MemberAccessException" /> を代わりにキャッチします。</span>
              <span class="sxs-lookup">
                <span data-stu-id="71d4c-327">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="71d4c-328">クラス内のプライベート メソッドまたは保護されたメソッドへの正しくないアクセスが試行されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-328">There was an illegal attempt to access a private or protected method inside a class.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="71d4c-329">プロパティ値を取得しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-329">An error occurred while retrieving the property value.</span>
          </span>
          <span data-ttu-id="71d4c-330">たとえば、インデックス付きプロパティに対して指定されたインデックス値が範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-330">For example, an index value specified for an indexed property is out of range.</span>
          </span>
          <span data-ttu-id="71d4c-331">
            <see cref="P:System.Exception.InnerException" /> プロパティは、エラーの理由を示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-331">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="71d4c-332">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-332">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="71d4c-333">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-333">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public abstract object GetValue (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetValue(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ index, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="propertyInfo.GetValue (obj, invokeAttr, binder, index, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="index" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="71d4c-334">プロパティ値が返されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-334">The object whose property value will be returned.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="71d4c-335">呼び出し属性を指定する次の列挙型メンバーのビットごとの組み合わせ: <see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> と <see langword="SetProperty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-335">A bitwise combination of the following enumeration members that specify the invocation attribute: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="71d4c-336">適切な呼び出し属性を指定する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-336">You must specify a suitable invocation attribute.</span>
          </span>
          <span data-ttu-id="71d4c-337">たとえば、静的メンバーを呼び出すには、<see langword="Static" /> フラグを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-337">For example, to invoke a static member, set the <see langword="Static" /> flag.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="71d4c-338">バインディング、引数型の強制変換、メンバーの呼び出し、およびリフレクションを使用した <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-338">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span>
          </span>
          <span data-ttu-id="71d4c-339">
            <c>binder</c> が <see langword="null" /> の場合は、既定のバインダーが使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-339">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="71d4c-340">インデックス付きプロパティのインデックス値 (省略可能)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-340">Optional index values for indexed properties.</span>
          </span>
          <span data-ttu-id="71d4c-341">インデックス付きでないプロパティの場合は、この値を <see langword="null" /> にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-341">This value should be <see langword="null" /> for non-indexed properties.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="71d4c-342">リソースのローカライズ対象のカルチャ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-342">The culture for which the resource is to be localized.</span>
          </span>
          <span data-ttu-id="71d4c-343">リソースがこのカルチャ用にローカライズされていない場合は、一致する対象を検索するために <see cref="P:System.Globalization.CultureInfo.Parent" /> プロパティが連続して呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-343">If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent" /> property will be called successively in search of a match.</span>
          </span>
          <span data-ttu-id="71d4c-344">この値が <see langword="null" /> の場合は、<see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> プロパティからカルチャ固有の情報が習得されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-344">If this value is <see langword="null" />, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-345">派生クラスでオーバーライドされると、指定したバインディング、インデックス、およびカルチャ固有の情報を含む指定されたオブジェクトのプロパティ値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-345">When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-346">指定されたオブジェクトのプロパティの値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-346">The property value of the specified object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-347">プロパティは、インデックスを作成するかどうかを調べるには、<xref:System.Reflection.PropertyInfo.GetIndexParameters%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-347">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="71d4c-348">結果の配列がある 0 (ゼロ) 要素は、プロパティはインデックス作成されません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-348">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="71d4c-349">静的プロパティは、個々 のオブジェクトの種類に属するため、静的プロパティの取得を渡すことによって`null`オブジェクトの引数として。</span><span class="sxs-lookup"><span data-stu-id="71d4c-349">Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument.</span></span> <span data-ttu-id="71d4c-350">たとえば、次のコードを使用して、静的なを取得する`CurrentCulture`プロパティの`CultureInfo`:</span><span class="sxs-lookup"><span data-stu-id="71d4c-350">For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :</span></span>  
  
```csharp  
PropertyInfo CurCultProp =   
       (typeof(CultureInfo)).GetProperty("CurrentCulture");   
Console.WriteLine("CurrCult: " +  
       CurCultProp.GetValue(null,null));  
```  
  
 <span data-ttu-id="71d4c-351">使用する、`GetValue`メソッド、クラスをまず取得`Type`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-351">To use the `GetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="71d4c-352">`Type`、取得、`PropertyInfo`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-352">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="71d4c-353">`PropertyInfo`を使用して、`GetValue`メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-353">From the `PropertyInfo`, use the `GetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71d4c-354">以降では、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、呼び出し元が許可されている場合は、非パブリック メンバーへのアクセスに使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグを設定し、許可セットまたはサブセットに非パブリック メンバーの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="71d4c-354">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="71d4c-355">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="71d4c-355">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="71d4c-356">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="71d4c-356">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="71d4c-357">必要な引数の型が <paramref name="index" /> 配列に含まれていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-357">The <paramref name="index" /> array does not contain the type of arguments needed.</span>
          </span>
          <span data-ttu-id="71d4c-358">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-358">-or-</span>
          </span>
          <span data-ttu-id="71d4c-359">プロパティの <see langword="get" /> アクセサーが見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-359">The property's <see langword="get" /> accessor is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="71d4c-360">オブジェクトがターゲット型と一致しません。あるいは、プロパティはインスタンス プロパティですが <paramref name="obj" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-360">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="71d4c-361">
            <paramref name="index" /> 内のパラメーターの数が、インデックス付きプロパティが受け取るパラメーターの数と一致していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-361">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="71d4c-362">クラス内のプライベート メソッドまたは保護されたメソッドへの正しくないアクセスが試行されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-362">There was an illegal attempt to access a private or protected method inside a class.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="71d4c-363">プロパティ値を取得しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-363">An error occurred while retrieving the property value.</span>
          </span>
          <span data-ttu-id="71d4c-364">たとえば、インデックス付きプロパティに対して指定されたインデックス値が範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-364">For example, an index value specified for an indexed property is out of range.</span>
          </span>
          <span data-ttu-id="71d4c-365">
            <see cref="P:System.Exception.InnerException" /> プロパティは、エラーの理由を示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-365">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="71d4c-366">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-366">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="71d4c-367">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-367">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Reflection.PropertyInfo.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-368">特別な名前のプロパティかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-368">Gets a value indicating whether the property is the special name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="71d4c-369">このプロパティに特別な名前が付けられている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-369">
              <see langword="true" /> if this property is the special name; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-370">`SpecialName`メンバー (プロパティ アクセサー メソッドのオーバー ロード演算子など) の一部のコンパイラで特別な方法で扱われるフラグを設定するビットを設定します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-370">The `SpecialName` bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).</span></span>  
  
 <span data-ttu-id="71d4c-371">取得する、`IsSpecialName`プロパティ、クラスをまず取得`Type`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-371">To get the `IsSpecialName` property, first get the class `Type`.</span></span> <span data-ttu-id="71d4c-372">`Type`、取得、`PropertyInfo`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-372">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="71d4c-373">`PropertyInfo`、取得、`IsSpecialName`値。</span><span class="sxs-lookup"><span data-stu-id="71d4c-373">From the `PropertyInfo`, get the `IsSpecialName` value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Reflection.PropertyInfo.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-374">このメンバーがプロパティであることを示す <see cref="T:System.Reflection.MemberTypes" /> 値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-374">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="71d4c-375">このメンバーがプロパティであることを示す <see cref="T:System.Reflection.MemberTypes" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-375">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-376">このプロパティのオーバーライド<xref:System.Reflection.MemberInfo.MemberType%2A>します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-376">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="71d4c-377">セットを確認すると、そのため、<xref:System.Reflection.MemberInfo>オブジェクト-によって返される配列など<xref:System.Type.GetMembers%2A>—、<xref:System.Reflection.MemberInfo.MemberType%2A>プロパティが返す<xref:System.Reflection.MemberTypes.Property>プロパティが場合にのみ指定されたメンバー。</span><span class="sxs-lookup"><span data-stu-id="71d4c-377">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Property> only when a given member is a property.</span></span>  
  
 <span data-ttu-id="71d4c-378">`MemberType` 派生クラスである`MemberInfo`し、これは、メンバーの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-378">`MemberType` is a derived class of `MemberInfo` and specifies the type of member this is.</span></span> <span data-ttu-id="71d4c-379">メンバーの種類は、コンス トラクター、プロパティ、フィールド、およびメソッドです。</span><span class="sxs-lookup"><span data-stu-id="71d4c-379">Member types are constructors, properties, fields, and methods.</span></span> <span data-ttu-id="71d4c-380">これはあるため、`PropertyInfo`プロパティ、戻り値の型がプロパティ。</span><span class="sxs-lookup"><span data-stu-id="71d4c-380">Since this is a `PropertyInfo` property, the returned type is a property.</span></span>  
  
 <span data-ttu-id="71d4c-381">取得する、`MemberType`プロパティ、クラスをまず取得`Type`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-381">To get the `MemberType` property, first get the class `Type`.</span></span> <span data-ttu-id="71d4c-382">`Type`、取得、`PropertyInfo`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-382">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="71d4c-383">`PropertyInfo`、取得、`MemberType`値。</span><span class="sxs-lookup"><span data-stu-id="71d4c-383">From the `PropertyInfo`, get the `MemberType` value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71d4c-384">次の例では、指定されたメンバーの種類が表示されます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-384">The following example displays the type of the specified member.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.PropertyInfo left, class System.Reflection.PropertyInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As PropertyInfo, right As PropertyInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::PropertyInfo ^ left, System::Reflection::PropertyInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.PropertyInfo * System.Reflection.PropertyInfo -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="right" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="71d4c-385">比較する最初のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-385">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="71d4c-386">比較する 2 番目のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-386">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-387">2 つの <see cref="T:System.Reflection.PropertyInfo" /> オブジェクトが等しいかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-387">Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-388">
            <see langword="true" /> が <paramref name="left" /> に等しい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-388">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.PropertyInfo left, class System.Reflection.PropertyInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As PropertyInfo, right As PropertyInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::PropertyInfo ^ left, System::Reflection::PropertyInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.PropertyInfo * System.Reflection.PropertyInfo -&gt; bool" Usage="System.Reflection.PropertyInfo.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="right" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="71d4c-389">比較する最初のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-389">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="71d4c-390">比較する 2 番目のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-390">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-391">2 つの <see cref="T:System.Reflection.PropertyInfo" /> オブジェクトが等しくないかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-391">Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-392">
            <see langword="true" /> が <paramref name="left" /> と等しくない場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-392">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public abstract Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Reflection.PropertyInfo.PropertyType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.PropertyType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-393">このプロパティの型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-393">Gets the type of this property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="71d4c-394">このプロパティの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-394">The type of this property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-395">特定のプロパティの種類を決定するには、次の操作を行います。</span><span class="sxs-lookup"><span data-stu-id="71d4c-395">To determine the type of a particular property, do the following:</span></span>  
  
1.  <span data-ttu-id="71d4c-396">取得、<xref:System.Type>プロパティを含む型 (クラスまたは構造体) を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="71d4c-396">Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property.</span></span> <span data-ttu-id="71d4c-397">呼び出すことができます (型のインスタンス) のオブジェクトを使用する場合、<xref:System.Object.GetType%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-397">If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method.</span></span> <span data-ttu-id="71d4c-398">それ以外の場合、c# 演算子を使用することができますか、Visual Basic の演算子の例として示します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-398">Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.</span></span>  
  
2.  <span data-ttu-id="71d4c-399">取得、<xref:System.Reflection.PropertyInfo>で関心があるプロパティを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="71d4c-399">Get a <xref:System.Reflection.PropertyInfo> object that represents the property in which you're interested.</span></span> <span data-ttu-id="71d4c-400">すべてのプロパティの配列を取得することによってこれを行う、<xref:System.Type.GetProperties%2A?displayProperty=nameWithType>メソッドとするか、配列内の要素を反復処理し、取得できる、<xref:System.Reflection.PropertyInfo>直接呼び出して、プロパティを表すオブジェクトを<xref:System.Type.GetProperty%2A?displayProperty=nameWithType>メソッドを指定します。プロパティ名。</span><span class="sxs-lookup"><span data-stu-id="71d4c-400">You can do this by getting an array of all properties from the <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.PropertyInfo> object that represents the property directly by calling the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method and specifying the property name.</span></span>  
  
3.  <span data-ttu-id="71d4c-401">値を取得、<xref:System.Reflection.PropertyInfo.PropertyType%2A>プロパティから、<xref:System.Reflection.PropertyInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="71d4c-401">Retrieve the value of the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property from the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71d4c-402">次の例では、定義、`Employee`を 5 つのプロパティを持つクラス。</span><span class="sxs-lookup"><span data-stu-id="71d4c-402">The following example defines an `Employee` class that has five properties.</span></span> <span data-ttu-id="71d4c-403">これは、用途の配列を取得し、<xref:System.Reflection.PropertyInfo>これらのプロパティを表すオブジェクトの各種類と名前が表示されます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-403">It then uses retrieves an array of <xref:System.Reflection.PropertyInfo> objects that represent those properties and displays the name and type of each.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.PropertyType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.propertytype/cs/propertytype1.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.PropertyType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.propertytype/vb/propertytype1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo SetMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo SetMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.SetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SetMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ SetMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMethod : System.Reflection.MethodInfo" Usage="System.Reflection.PropertyInfo.SetMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-404">このプロパティの <see langword="set" /> アクセサーを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-404">Gets the <see langword="set" /> accessor for this property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="71d4c-405">
            <see langword="set" /> 、このプロパティのアクセサーまたは<see langword="null" />プロパティが読み取り専用の場合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-405">The <see langword="set" /> accessor for this property, or <see langword="null" /> if the property is read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-406">値を取得、<xref:System.Reflection.PropertyInfo.SetMethod%2A>プロパティの呼び出しと同じですが、<xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29>の値を持つメソッド`true`の`nonPublic`引数。</span><span class="sxs-lookup"><span data-stu-id="71d4c-406">Retrieving the value of the <xref:System.Reflection.PropertyInfo.SetMethod%2A> property is equivalent to calling the <xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29> method with a value of `true` for the `nonPublic` argument.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.PropertyInfo.GetMethod" />
        <altmember cref="P:System.Reflection.PropertyInfo.CanWrite" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-407">指定されたオブジェクトのプロパティの値を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-407">Sets the property value for a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object obj, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object obj, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (obj As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ obj, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj * obj -&gt; unit" Usage="propertyInfo.SetValue (obj, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="71d4c-408">プロパティ値が設定されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-408">The object whose property value will be set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="71d4c-409">変更後のプロパティ値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-409">The new property value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-410">指定されたオブジェクトのプロパティの値を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-410">Sets the property value of a specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-411"><xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29>オーバー ロードは、インデックスのないプロパティの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-411">The <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> overload sets the value of a non-indexed property.</span></span> <span data-ttu-id="71d4c-412">プロパティは、インデックスを作成するかどうかを確認するのには、呼び出し、<xref:System.Reflection.PropertyInfo.GetIndexParameters%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-412">To determine whether a property is indexed, call the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="71d4c-413">結果の配列がある 0 (ゼロ) 要素は、プロパティはインデックス作成されません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-413">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span> <span data-ttu-id="71d4c-414">インデックス付きプロパティの値を設定するには、呼び出し、<xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="71d4c-414">To set the value of an indexed property, call the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29> overload.</span></span>  
  
 <span data-ttu-id="71d4c-415">プロパティは、このタイプの場合<xref:System.Reflection.PropertyInfo>オブジェクトが値型と`value`は`null`プロパティは、その型の既定値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-415">If the property type of this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="71d4c-416">これは、抽象のランタイム実装を呼び出すメソッドは<xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29>メソッドを指定する<xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType>の`BindingFlags`パラメーター、`null`の`Binder`、`null`の`Object[]`、および`null`の`CultureInfo`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-416">This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> for the `BindingFlags` parameter, `null` for `Binder`, `null` for `Object[]`, and `null` for `CultureInfo`.</span></span>  
  
 <span data-ttu-id="71d4c-417">使用する、<xref:System.Reflection.PropertyInfo.SetValue%2A>メソッドは、最初に取得、<xref:System.Type>クラスを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="71d4c-417">To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class.</span></span> <span data-ttu-id="71d4c-418"><xref:System.Type>、取得、<xref:System.Reflection.PropertyInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="71d4c-418">From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo> object.</span></span> <span data-ttu-id="71d4c-419"><xref:System.Reflection.PropertyInfo>オブジェクトを呼び出し、<xref:System.Reflection.PropertyInfo.SetValue%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-419">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71d4c-420">以降では、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、呼び出し元が許可されている場合は、非パブリック メンバーへのアクセスに使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグを設定し、許可セットまたはサブセットに非パブリック メンバーの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="71d4c-420">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="71d4c-421">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="71d4c-421">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="71d4c-422">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="71d4c-422">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71d4c-423">次の例は、という名前のクラスを宣言`Example`いずれかで`static`(`Shared` Visual basic) と 1 つのインスタンスのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="71d4c-423">The following example declares a class named `Example` with one `static` (`Shared` in Visual Basic) and one instance property.</span></span> <span data-ttu-id="71d4c-424">この例では、<xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29>元のプロパティを変更するメソッドの値し、元と最終的な値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-424">The example uses the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> method to change the original property values and displays the original and final values.</span></span>  
  
 [!code-cpp[PropertyInfo.SetValue#2](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyInfo.SetValue/cpp/example2.cpp#2)]
 [!code-csharp[PropertyInfo.SetValue#2](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyInfo.SetValue/cs/example2.cs#2)]
 [!code-vb[PropertyInfo.SetValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyInfo.SetValue/vb/example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="71d4c-425">プロパティの <see langword="set" /> アクセサーが見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-425">The property's <see langword="set" /> accessor is not found.</span>
          </span>
          <span data-ttu-id="71d4c-426">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-426">-or-</span>
          </span>
          <span data-ttu-id="71d4c-427">
            <paramref name="value" /> を <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> の型に変換することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-427">
              <paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="71d4c-428">
                <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">Windows ストア アプリ用 .NET</see> または<see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">ポータブル クラス ライブラリ</see>では、<see cref="T:System.Exception" /> を代わりにキャッチします。</span>
              <span class="sxs-lookup">
                <span data-stu-id="71d4c-428">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="71d4c-429">
            <paramref name="obj" /> の型がターゲット型と一致しないか、またはプロパティがインスタンス プロパティですが、<paramref name="obj" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-429">The type of <paramref name="obj" /> does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="71d4c-430">
                <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">Windows ストア アプリ用 .NET</see> または<see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">ポータブル クラス ライブラリ</see>では、基本クラスの例外である <see cref="T:System.MemberAccessException" /> を代わりにキャッチします。</span>
              <span class="sxs-lookup">
                <span data-stu-id="71d4c-430">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="71d4c-431">クラス内のプライベート メソッドまたは保護されたメソッドへの正しくないアクセスが試行されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-431">There was an illegal attempt to access a private or protected method inside a class.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="71d4c-432">プロパティ値を設定しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-432">An error occurred while setting the property value.</span>
          </span>
          <span data-ttu-id="71d4c-433">
            <see cref="P:System.Exception.InnerException" /> プロパティは、エラーの理由を示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-433">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="71d4c-434">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-434">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="71d4c-435">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-435">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (object obj, object value, object[] index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, object[] index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetValue (obj As Object, value As Object, index As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetValue(System::Object ^ obj, System::Object ^ value, cli::array &lt;System::Object ^&gt; ^ index);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj * obj[] -&gt; unit&#xA;override this.SetValue : obj * obj * obj[] -&gt; unit" Usage="propertyInfo.SetValue (obj, value, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="index" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="71d4c-436">プロパティ値が設定されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-436">The object whose property value will be set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="71d4c-437">新しいプロパティ値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-437">The new property value.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="71d4c-438">インデックス付きプロパティのインデックス値 (省略可能)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-438">Optional index values for indexed properties.</span>
          </span>
          <span data-ttu-id="71d4c-439">インデックス付きでないプロパティの場合は、この値を <see langword="null" /> にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-439">This value should be <see langword="null" /> for non-indexed properties.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-440">指定したオブジェクトのプロパティの値を設定します。インデックス プロパティの場合は、オプションでインデックス値を設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-440">Sets the property value of a specified object with optional index values for index properties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-441">この場合<xref:System.Reflection.PropertyInfo>オブジェクトが値型と`value`は`null`プロパティは、その型の既定値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-441">If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="71d4c-442">プロパティは、インデックスを作成するかどうかを調べるには、<xref:System.Reflection.PropertyInfo.GetIndexParameters%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-442">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="71d4c-443">結果の配列がある 0 (ゼロ) 要素は、プロパティはインデックス作成されません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-443">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="71d4c-444">これは、抽象のランタイム実装を呼び出すメソッドは<xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29>メソッドを指定する<xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType>の`BindingFlags`パラメーター、`null`の`Binder`と`null`の`CultureInfo`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-444">This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> for the `BindingFlags` parameter, `null` for `Binder`, and `null` for `CultureInfo`.</span></span>  
  
 <span data-ttu-id="71d4c-445">使用する、<xref:System.Reflection.PropertyInfo.SetValue%2A>メソッドは、最初に取得、<xref:System.Type>クラスを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="71d4c-445">To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class.</span></span> <span data-ttu-id="71d4c-446"><xref:System.Type>、取得、<xref:System.Reflection.PropertyInfo>します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-446">From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="71d4c-447"><xref:System.Reflection.PropertyInfo>を使用して、<xref:System.Reflection.PropertyInfo.SetValue%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-447">From the <xref:System.Reflection.PropertyInfo>, use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71d4c-448">以降では、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、呼び出し元が許可されている場合は、非パブリック メンバーへのアクセスに使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグを設定し、許可セットまたはサブセットに非パブリック メンバーの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="71d4c-448">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="71d4c-449">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="71d4c-449">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="71d4c-450">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="71d4c-450">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71d4c-451">次の例は、という名前のクラスを定義します。`TestClass`という名前の読み取り/書き込みプロパティを持つ`Caption`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-451">The following example defines a class named `TestClass` that has a read-write property named `Caption`.</span></span> <span data-ttu-id="71d4c-452">既定値が表示されます、`Caption`プロパティ、呼び出し、<xref:System.Reflection.PropertyInfo.SetValue%2A>メソッド、プロパティの値を変更し、結果を表示します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-452">It  displays the default value of the `Caption` property, calls the <xref:System.Reflection.PropertyInfo.SetValue%2A> method to change the property value, and displays the result.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="71d4c-453">に、注意してください、`Caption`プロパティは、パラメーター配列、`index`引数が`null`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-453">Note that, because the `Caption` property is not a parameter array, the `index` argument is `null`.</span></span>  
  
 <span data-ttu-id="71d4c-454">次の例は、という名前のクラスを宣言`Example`3 つのプロパティを持つ:`static`プロパティ (`Shared` Visual Basic で)、インスタンス プロパティ、およびインデックス付きのインスタンス プロパティです。</span><span class="sxs-lookup"><span data-stu-id="71d4c-454">The following example declares a class named `Example` with three properties: a `static` property (`Shared` in Visual Basic), an instance property, and an indexed instance property.</span></span> <span data-ttu-id="71d4c-455">この例では、<xref:System.Reflection.PropertyInfo.SetValue%2A>元と最終的な値をすべて表示、プロパティの既定値を変更するメソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-455">The example uses the <xref:System.Reflection.PropertyInfo.SetValue%2A> method to change the default values of the properties and displays the original and final values.</span></span>  
  
 <span data-ttu-id="71d4c-456">リフレクションを使用して、インデックス付きのインスタンスのプロパティの検索に使用される名前は、言語や、プロパティに適用される属性に基づいて異なる。</span><span class="sxs-lookup"><span data-stu-id="71d4c-456">The name that is used to search for an indexed instance property with reflection is different depending on the language and on attributes applied to the property.</span></span>  
  
-   <span data-ttu-id="71d4c-457">Visual basic では、リフレクションを使用してプロパティを検索するプロパティ名が常に使用します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-457">In Visual Basic, the property name is always used to search for the property with reflection.</span></span> <span data-ttu-id="71d4c-458">使用することができます、`Default`インデックス付きプロパティのプロパティを既定値にするキーワード、その場合、この例のように、プロパティにアクセスするときに、名を省略できます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-458">You can use the `Default` keyword to make the property a default indexed property, in which case you can omit the name when accessing the property, as in this example.</span></span> <span data-ttu-id="71d4c-459">プロパティ名を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-459">You can also use the property name.</span></span>  
  
-   <span data-ttu-id="71d4c-460">C# の場合は、インデックス付きのインスタンスのプロパティは、インデクサーと呼ばれる既定のプロパティとコードでプロパティにアクセスするときに、名前が使用されていません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-460">In C#, the indexed instance property is a default property called an indexer, and the name is never used when accessing the property in code.</span></span> <span data-ttu-id="71d4c-461">プロパティの名前は、既定では、 `Item`、および、リフレクションを使用してプロパティを検索するときは、その名前を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="71d4c-461">By default, the name of the property is `Item`, and you must use that name when you search for the property with reflection.</span></span> <span data-ttu-id="71d4c-462">使用することができます、<xref:System.Runtime.CompilerServices.IndexerNameAttribute>属性を別の名前をインデクサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-462">You can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to give the indexer a different name.</span></span> <span data-ttu-id="71d4c-463">この例では、名前は `IndexedInstanceProperty` です。</span><span class="sxs-lookup"><span data-stu-id="71d4c-463">In this example, the name is `IndexedInstanceProperty`.</span></span>  
  
-   <span data-ttu-id="71d4c-464">C++ では、`default`指定子はインデックス付きプロパティを既定値を使用できますのインデックス付きプロパティ (クラス インデクサー)。</span><span class="sxs-lookup"><span data-stu-id="71d4c-464">In C++, the `default` specifier can be used to make an indexed property a default indexed property (class indexer).</span></span> <span data-ttu-id="71d4c-465">既定では、プロパティの名前は、その場合は、 `Item`、し、この例のように、リフレクションを使用してプロパティを検索するときは、その名前を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="71d4c-465">In that case, the name of the property by default is `Item`, and you must use that name when you search for the property with reflection, as in this example.</span></span> <span data-ttu-id="71d4c-466">使用することができます、<xref:System.Runtime.CompilerServices.IndexerNameAttribute>リフレクションで別の名前をクラスのインデクサーを提供する属性が、その名前を使用して、コードでプロパティにアクセスすることはできません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-466">You can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to give the class indexer a different name in reflection, but you cannot use that name to access the property in code.</span></span> <span data-ttu-id="71d4c-467">クラスのインデクサーではないインデックス付きプロパティは、コードとリフレクションの両方に、名前を使用してアクセスします。</span><span class="sxs-lookup"><span data-stu-id="71d4c-467">An indexed property that is not a class indexer is accessed using its name, both in code and in reflection.</span></span>  
  
 [!code-cpp[PropertyInfo.SetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyInfo.SetValue/cpp/Example.cpp#1)]
 [!code-csharp[PropertyInfo.SetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyInfo.SetValue/cs/Example.cs#1)]
 [!code-vb[PropertyInfo.SetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyInfo.SetValue/vb/Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="71d4c-468">必要な引数の型が <paramref name="index" /> 配列に含まれていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-468">The <paramref name="index" /> array does not contain the type of arguments needed.</span>
          </span>
          <span data-ttu-id="71d4c-469">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-469">-or-</span>
          </span>
          <span data-ttu-id="71d4c-470">プロパティの <see langword="set" /> アクセサーが見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-470">The property's <see langword="set" /> accessor is not found.</span>
          </span>
          <span data-ttu-id="71d4c-471">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-471">-or-</span>
          </span>
          <span data-ttu-id="71d4c-472">
            <paramref name="value" /> を <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> の型に変換することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-472">
              <paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="71d4c-473">
                <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">Windows ストア アプリ用 .NET</see> または<see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">ポータブル クラス ライブラリ</see>では、<see cref="T:System.Exception" /> を代わりにキャッチします。</span>
              <span class="sxs-lookup">
                <span data-stu-id="71d4c-473">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="71d4c-474">オブジェクトがターゲット型と一致しません。あるいは、プロパティはインスタンス プロパティですが <paramref name="obj" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-474">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="71d4c-475">
            <paramref name="index" /> 内のパラメーターの数が、インデックス付きプロパティが受け取るパラメーターの数と一致していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-475">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="71d4c-476">
                <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">Windows ストア アプリ用 .NET</see> または<see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">ポータブル クラス ライブラリ</see>では、基本クラスの例外である <see cref="T:System.MemberAccessException" /> を代わりにキャッチします。</span>
              <span class="sxs-lookup">
                <span data-stu-id="71d4c-476">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="71d4c-477">クラス内のプライベート メソッドまたは保護されたメソッドへの正しくないアクセスが試行されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-477">There was an illegal attempt to access a private or protected method inside a class.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="71d4c-478">プロパティ値を設定しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-478">An error occurred while setting the property value.</span>
          </span>
          <span data-ttu-id="71d4c-479">たとえば、インデックス付きプロパティに対して指定されたインデックス値が範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-479">For example, an index value specified for an indexed property is out of range.</span>
          </span>
          <span data-ttu-id="71d4c-480">
            <see cref="P:System.Exception.InnerException" /> プロパティは、エラーの理由を示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-480">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="71d4c-481">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-481">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="71d4c-482">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-482">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetValue(System::Object ^ obj, System::Object ^ value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ index, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; unit" Usage="propertyInfo.SetValue (obj, value, invokeAttr, binder, index, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="index" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="71d4c-483">プロパティ値が設定されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-483">The object whose property value will be set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="71d4c-484">変更後のプロパティ値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-484">The new property value.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="71d4c-485">呼び出し属性を指定する次の列挙型メンバーのビットごとの組み合わせ: <see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> または <see langword="SetProperty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-485">A bitwise combination of the following enumeration members that specify the invocation attribute: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="71d4c-486">適切な呼び出し属性を指定する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-486">You must specify a suitable invocation attribute.</span>
          </span>
          <span data-ttu-id="71d4c-487">たとえば、静的メンバーを呼び出すには、<see langword="Static" /> フラグを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-487">For example, to invoke a static member, set the <see langword="Static" /> flag.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="71d4c-488">バインディング、引数型の強制変換、メンバーの呼び出し、およびリフレクションを使用した <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-488">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span>
          </span>
          <span data-ttu-id="71d4c-489">
            <c>binder</c> が <see langword="null" /> の場合は、既定のバインダーが使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-489">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="71d4c-490">インデックス付きプロパティのインデックス値 (省略可能)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-490">Optional index values for indexed properties.</span>
          </span>
          <span data-ttu-id="71d4c-491">インデックス付きでないプロパティの場合は、この値を <see langword="null" /> にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-491">This value should be <see langword="null" /> for non-indexed properties.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="71d4c-492">リソースのローカライズ対象のカルチャ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-492">The culture for which the resource is to be localized.</span>
          </span>
          <span data-ttu-id="71d4c-493">リソースがこのカルチャ用にローカライズされていない場合は、一致する対象を検索するために <see cref="P:System.Globalization.CultureInfo.Parent" /> プロパティが連続して呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-493">If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent" /> property will be called successively in search of a match.</span>
          </span>
          <span data-ttu-id="71d4c-494">この値が <see langword="null" /> の場合は、<see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> プロパティからカルチャ固有の情報が習得されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-494">If this value is <see langword="null" />, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-495">派生クラスでオーバーライドされると、指定したバインディング、インデックス、およびカルチャ固有の情報を含む指定されたオブジェクトのプロパティ値を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-495">When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-496">この場合<xref:System.Reflection.PropertyInfo>オブジェクトが値型と`value`は`null`プロパティは、その型の既定値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-496">If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="71d4c-497">プロパティは、インデックスを作成するかどうかを調べるには、<xref:System.Reflection.PropertyInfo.GetIndexParameters%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-497">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="71d4c-498">結果の配列がある 0 (ゼロ) 要素は、プロパティはインデックス作成されません。</span><span class="sxs-lookup"><span data-stu-id="71d4c-498">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="71d4c-499">アクセスの制限には、完全に信頼されたコードは無視されます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-499">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="71d4c-500">つまり、プライベート コンス トラクター、メソッド、フィールド、およびプロパティにアクセスでき、コードは完全に信頼された場合に、リフレクションを使用して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-500">That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="71d4c-501">使用する、`SetValue`メソッド、クラスをまず取得`Type`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-501">To use the `SetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="71d4c-502">`Type`、取得、`PropertyInfo`します。</span><span class="sxs-lookup"><span data-stu-id="71d4c-502">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="71d4c-503">`PropertyInfo`を使用して、`SetValue`メソッド。</span><span class="sxs-lookup"><span data-stu-id="71d4c-503">From the `PropertyInfo`, use the `SetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71d4c-504">以降では、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、呼び出し元が許可されている場合は、非パブリック メンバーへのアクセスに使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグを設定し、許可セットまたはサブセットに非パブリック メンバーの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="71d4c-504">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="71d4c-505">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="71d4c-505">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="71d4c-506">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="71d4c-506">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="71d4c-507">必要な引数の型が <paramref name="index" /> 配列に含まれていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-507">The <paramref name="index" /> array does not contain the type of arguments needed.</span>
          </span>
          <span data-ttu-id="71d4c-508">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-508">-or-</span>
          </span>
          <span data-ttu-id="71d4c-509">プロパティの <see langword="set" /> アクセサーが見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-509">The property's <see langword="set" /> accessor is not found.</span>
          </span>
          <span data-ttu-id="71d4c-510">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-510">-or-</span>
          </span>
          <span data-ttu-id="71d4c-511">
            <paramref name="value" /> を <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> の型に変換することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-511">
              <paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="71d4c-512">オブジェクトがターゲット型と一致しないか、またはプロパティがインスタンス プロパティですが、<paramref name="obj" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-512">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="71d4c-513">
            <paramref name="index" /> 内のパラメーターの数が、インデックス付きプロパティが受け取るパラメーターの数と一致していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-513">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="71d4c-514">クラス内のプライベート メソッドまたは保護されたメソッドへの正しくないアクセスが試行されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-514">There was an illegal attempt to access a private or protected method inside a class.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="71d4c-515">プロパティ値を設定しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-515">An error occurred while setting the property value.</span>
          </span>
          <span data-ttu-id="71d4c-516">たとえば、インデックス付きプロパティに対して指定されたインデックス値が範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-516">For example, an index value specified for an indexed property is out of range.</span>
          </span>
          <span data-ttu-id="71d4c-517">
            <see cref="P:System.Exception.InnerException" /> プロパティは、エラーの理由を示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-517">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="71d4c-518">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-518">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="71d4c-519">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-519">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _PropertyInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_PropertyInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="71d4c-520">将来使用するために予約されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-520">Reserved for future use.</span>
          </span>
          <span data-ttu-id="71d4c-521">IID_NULL にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-521">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="71d4c-522">マッピング対象として渡される名前の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-522">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="71d4c-523">マッピングされる名前のカウント。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-523">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="71d4c-524">名前を解釈するロケール コンテキスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-524">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="71d4c-525">名前に対応する ID を受け取る、呼び出し元が割り当てた配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-525">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-526">一連の名前を対応する一連のディスパッチ識別子に割り当てます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-526">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-527">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出さないでいます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-527">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="71d4c-528">詳細については`IDispatch::GetIDsOfNames`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="71d4c-528">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="71d4c-529">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-529">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetType">
      <MemberSignature Language="C#" Value="Type _PropertyInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._PropertyInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _PropertyInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._PropertyInfo.GetType() = System::Runtime::InteropServices::_PropertyInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71d4c-530">
            <see cref="T:System.Type" /> 型を表す <see cref="T:System.Reflection.PropertyInfo" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-530">Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.PropertyInfo" /> type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71d4c-531">
            <see cref="T:System.Type" /> 型を表す <see cref="T:System.Reflection.PropertyInfo" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-531">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.PropertyInfo" /> type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _PropertyInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_PropertyInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="71d4c-532">返される型情報。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-532">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="71d4c-533">型情報のロケール ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-533">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="71d4c-534">要求された型情報オブジェクトへのポインターを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-534">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-535">オブジェクトの型情報を取得します。この型情報を使用して、インターフェイスの型情報を取得できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-535">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-536">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出さないでいます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-536">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="71d4c-537">詳細については`IDispatch::GetTypeInfo`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="71d4c-537">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="71d4c-538">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-538">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _PropertyInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_PropertyInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="71d4c-539">オブジェクトにより提供される型タイプ情報インターフェイスの数を受け取る場所を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-539">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-540">オブジェクトが提供する型情報インターフェイスの数 (0 または 1) を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-540">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-541">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出さないでいます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-541">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="71d4c-542">詳細については`IDispatch::GetTypeInfoCount`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="71d4c-542">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="71d4c-543">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-543">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.Invoke">
      <MemberSignature Language="C#" Value="void _PropertyInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _PropertyInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_PropertyInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="71d4c-544">メンバーを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-544">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="71d4c-545">将来使用するために予約されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-545">Reserved for future use.</span>
          </span>
          <span data-ttu-id="71d4c-546">IID_NULL にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-546">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="71d4c-547">引数を解釈する対象のロケール コンテキスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-547">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="71d4c-548">呼び出しのコンテキストを記述するフラグ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-548">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="71d4c-549">引数の配列、名前付き引数の DISPID の配列、配列内の要素数のカウントを格納している構造体へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-549">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="71d4c-550">結果が格納される場所へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-550">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="71d4c-551">例外情報を格納する構造体へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-551">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="71d4c-552">エラーが存在する最初の引数のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-552">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71d4c-553">オブジェクトによって公開されたプロパティおよびメソッドへのアクセスを提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-553">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71d4c-554">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出さないでいます。</span><span class="sxs-lookup"><span data-stu-id="71d4c-554">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="71d4c-555">詳細については`IDispatch::Invoke`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="71d4c-555">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="71d4c-556">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="71d4c-556">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>