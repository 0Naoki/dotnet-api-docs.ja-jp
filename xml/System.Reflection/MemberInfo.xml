<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MemberInfo.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58db62a3ed31bdc693e0000017df74ab65286b3e5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8db62a3ed31bdc693e0000017df74ab65286b3e5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.MemberInfo">
          <source>Obtains information about the attributes of a member and provides access to member metadata.</source>
          <target state="translated">メンバーの属性に関する情報を取得し、メンバーのメタデータにアクセスできるようにします。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> class is the abstract base class for classes used to obtain information about all members of a class (constructors, events, fields, methods, and properties).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>クラスは、基本クラスの抽象クラス (コンス トラクター、イベント、フィールド、メソッド、およびプロパティ) のクラスのすべてのメンバーに関する情報を取得するために使用します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This class introduces the basic functionality that all members provide.</source>
          <target state="translated">このクラスには、すべてのメンバーで提供される基本的な機能が導入されています。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">この例では、さまざまなリフレクション クラスを使用してアセンブリに含まれるメタデータを分析する方法を示します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">継承時の完全な信頼。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">部分信頼コードでこのクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>This type is thread safe.</source>
          <target state="translated">この型はスレッド セーフです。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.MemberInfo">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">継承する場合<ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>は次のメンバーをオーバーライドする必要があります:<ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /&gt;</ph>と<ph id="ph3">&lt;see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.#ctor">
          <source>Only a derived class can create this <ph id="ph1">`MemberInfo`</ph> class.</source>
          <target state="translated">派生クラスは、これを作成できるのみ<ph id="ph1">`MemberInfo`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.CustomAttributes">
          <source>Gets a collection that contains this member's custom attributes.</source>
          <target state="translated">このメンバーのカスタム属性を含むコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.CustomAttributes">
          <source>A collection that contains this member's custom attributes.</source>
          <target state="translated">このメンバーのカスタム属性を含むコレクション。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>Gets the class that declares this member.</source>
          <target state="translated">このメンバーを宣言するクラスを取得します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object for the class that declares this member.</source>
          <target state="translated">このメンバーを宣言するクラスの <ph id="ph1">&lt;see langword="Type" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property retrieves a reference to the <ph id="ph2">&lt;xref:System.Type&gt;</ph> object for the type that declares this member.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>プロパティへの参照を取得する、<ph id="ph2">&lt;xref:System.Type&gt;</ph>このメンバーを宣言する型のオブジェクト。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>A member of a type is either declared by the type or inherited from a base type, so the <ph id="ph1">`Type`</ph> object returned by the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property might not be the same as the <ph id="ph3">`Type`</ph> object used to obtain the current <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object.</source>
          <target state="translated">型のメンバーの型によって宣言または基本型から継承されてため、<ph id="ph1">`Type`</ph>によって返されるオブジェクト、<ph id="ph2">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>プロパティと同じである可能性がありますいない、 <ph id="ph3">`Type`</ph> 、現在の取得に使用されるオブジェクト<ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>If the <ph id="ph1">`Type`</ph> object from which this <ph id="ph2">`MemberInfo`</ph> object was obtained did not declare this member, the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property will represent one of its base types.</source>
          <target state="translated">場合、<ph id="ph1">`Type`</ph>オブジェクトからこの<ph id="ph2">`MemberInfo`</ph>オブジェクトの取得、このメンバーを宣言していない、<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>プロパティでは、その基本型のいずれかを表すです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>If the <ph id="ph1">`MemberInfo`</ph> object is a global member (that is, if it was obtained from the <ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph> method, which returns global methods on a module), the returned <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> will be <ph id="ph4">`null`</ph>.</source>
          <target state="translated">場合、<ph id="ph1">`MemberInfo`</ph>オブジェクトは、グローバル メンバー (から取得されている場合は、<ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph>モジュールでグローバル メソッドを返すメソッドを)、返された<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>なります<ph id="ph4">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The following example defines an interface, <ph id="ph1">`IValue`</ph>, with a single member, <ph id="ph2">`GetValue`</ph>.</source>
          <target state="translated">次の例では、インターフェイス、 <ph id="ph1">`IValue`</ph>、単一のメンバー、<ph id="ph2">`GetValue`</ph>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>It also defines four classes: <ph id="ph1">`A`</ph>, a base class that implements the <ph id="ph2">`IValue`</ph> interface; <ph id="ph3">`B`</ph>, which inherits from <ph id="ph4">`A`</ph> and hides its implementation of <ph id="ph5">`GetValue`</ph> from the base class implementation; <ph id="ph6">`C`</ph>, which simply inherits from <ph id="ph7">`A`</ph>; and <ph id="ph8">`D`</ph>, which inherits from <ph id="ph9">`A`</ph> and overrides its <ph id="ph10">`GetValue`</ph> method.</source>
          <target state="translated">4 つのクラスも定義: <ph id="ph1">`A`</ph>、基本クラスを実装する、<ph id="ph2">`IValue`</ph>インターフェイスです。<ph id="ph3">`B`</ph>から継承される<ph id="ph4">`A`</ph>の実装を非表示に<ph id="ph5">`GetValue`</ph>から基本クラスの実装です。<ph id="ph6">`C`</ph>、単にから継承される<ph id="ph7">`A`</ph>; と<ph id="ph8">`D`</ph>から継承される<ph id="ph9">`A`</ph>し、上書きをその<ph id="ph10">`GetValue`</ph>メソッド。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>The example then retrieves a <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object for each member of the type (including members inherited from <ph id="ph2">&lt;xref:System.Object&gt;</ph>) and displays the value of its <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property.</source>
          <target state="translated">例を取得し、<ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>型の各メンバーのオブジェクト (から継承されたメンバーを含む<ph id="ph2">&lt;xref:System.Object&gt;</ph>) の値を表示およびその<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>Note that the declaring type of <ph id="ph1">`A.GetValue`</ph> is <ph id="ph2">`A`</ph>, that <ph id="ph3">`B`</ph> includes two <ph id="ph4">`GetValue`</ph> methods, one declared by <ph id="ph5">`A`</ph> and one by <ph id="ph6">`B`</ph>, and that the declaring type of <ph id="ph7">`D.GetValue`</ph> is <ph id="ph8">`D`</ph>.</source>
          <target state="translated">宣言する型を<ph id="ph1">`A.GetValue`</ph>は<ph id="ph2">`A`</ph>、その<ph id="ph3">`B`</ph>2 つ<ph id="ph4">`GetValue`</ph>メソッド、1 つで宣言されている<ph id="ph5">`A`</ph>として 1 つ<ph id="ph6">`B`</ph>、するは、宣言の型と<ph id="ph7">`D.GetValue`</ph>は<ph id="ph8">`D`</ph>します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source><ph id="ph1">`DeclaringType`</ph> returns only the member names and the names of their declaring types.</source>
          <target state="translated"><ph id="ph1">`DeclaringType`</ph> メンバー名のみと、宣言する型の名前を返します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.DeclaringType">
          <source>To return the member names with their prototypes, call <ph id="ph1">`MemberInfo.ToString`</ph>.</source>
          <target state="translated">戻るには、メンバー名と一緒に、呼び出す<ph id="ph1">`MemberInfo.ToString`</ph>です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">対象のインスタンスと比較する対象のオブジェクト、または <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> がこのインスタンスの型および値に等しい場合は <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="T:System.Reflection.MemberInfo">
          <source>When overridden in a derived class, returns custom attributes applied to this member.</source>
          <target state="translated">派生クラスでオーバーライドされた場合、このメンバーに適用されているカスタム属性を返します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">このメンバーの継承チェーンを検索して属性を見つける場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>This parameter is ignored for properties and events.</source>
          <target state="translated">プロパティとイベントの場合、このパラメーターは無視されます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>When overridden in a derived class, returns an array of all custom attributes applied to this member.</source>
          <target state="translated">派生クラスでオーバーライドされた場合、このメンバーに適用されているすべてのカスタム属性の配列を返します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</source>
          <target state="translated">このメンバーに適用されているすべてのカスタム属性が格納されている配列。定義されている属性がない場合は要素がゼロの配列。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter for properties and events.</source>
          <target state="translated">このメソッドは無視、<ph id="ph1">`inherit`</ph>プロパティとイベントのパラメーターです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">プロパティとイベントの属性の継承チェーンを検索するには、適切なオーバー ロードを使用して、<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if they are stored in the new metadata format.</source>
          <target state="translated">.NET Framework version 2.0 で新しいメタデータ形式で保存されている場合、このメソッドはメソッド、コンス トラクター、および種類のセキュリティ属性を返します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>Assemblies compiled with version 2.0 use this format.</source>
          <target state="translated">バージョン 2.0 でコンパイルされたアセンブリでは、この形式を使用します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</source>
          <target state="translated">動的アセンブリと .NET Framework の以前のバージョンでコンパイルされたアセンブリは、以前の XML 形式を使用します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>See <bpt id="p1">[</bpt>Emitting Declarative Security Attributes<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>宣言セキュリティ属性の出力方法<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>The following example defines a custom attribute and associates the attribute with <ph id="ph1">`MyClass.MyMethod`</ph>, retrieves the attribute at run time, and displays the result.</source>
          <target state="translated">次の例は、カスタム属性を定義しを持つ属性<ph id="ph1">`MyClass.MyMethod`</ph>、実行時に属性を取得し、結果が表示されます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>This member belongs to a type that is loaded into the reflection-only context.</source>
          <target state="translated">このメンバーは、リフレクションのみのコンテキストに読み込まれる型に属します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>See <bpt id="p1">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>.</source>
          <target state="translated">「<bpt id="p1">[</bpt>方法: リフレクションのみのコンテキストにアセンブリを読み込む<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
          <source>A custom attribute type could not be loaded.</source>
          <target state="translated">カスタム属性の型を読み込むことができませんでした。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The type of attribute to search for.</source>
          <target state="translated">検索する属性の種類。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Only attributes that are assignable to this type are returned.</source>
          <target state="translated">この型に代入可能な属性だけが返されます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">このメンバーの継承チェーンを検索して属性を見つける場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This parameter is ignored for properties and events.</source>
          <target state="translated">プロパティとイベントの場合、このパラメーターは無視されます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>.</source>
          <target state="translated">派生クラスでオーバーライドされた場合は、このメンバーに適用され、<ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> によって識別されるカスタム属性の配列を返します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> have been applied.</source>
          <target state="translated">このメンバーに適用されるカスタム属性の配列、または <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> に割り当て可能な属性が適用されていない場合は要素を持たない配列。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter for properties and events.</source>
          <target state="translated">このメソッドは無視、<ph id="ph1">`inherit`</ph>プロパティとイベントのパラメーターです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">プロパティとイベントの属性の継承チェーンを検索するには、適切なオーバー ロードを使用して、<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format.</source>
          <target state="translated">.NET framework version 2.0 では、属性が、新しいメタデータ形式で格納されている場合、このメソッドはメソッド、コンス トラクター、および種類のセキュリティ属性を返します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Assemblies compiled with version 2.0 use this format.</source>
          <target state="translated">バージョン 2.0 でコンパイルされたアセンブリでは、この形式を使用します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</source>
          <target state="translated">動的アセンブリと .NET Framework の以前のバージョンでコンパイルされたアセンブリは、以前の XML 形式を使用します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>See <bpt id="p1">[</bpt>Emitting Declarative Security Attributes<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>宣言セキュリティ属性の出力方法<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The following example defines a class named <ph id="ph1">`BaseClass`</ph> that has two non-inherited members: a thread static field named <ph id="ph2">`total`</ph> and a non-CLS-compliant method named <ph id="ph3">`MethodA`</ph>.</source>
          <target state="translated">次の例は、という名前のクラスを定義<ph id="ph1">`BaseClass`</ph>を持つ 2 つの非継承メンバー: という名前のスレッドの静的フィールド<ph id="ph2">`total`</ph>およびという名前の CLS 非準拠メソッド<ph id="ph3">`MethodA`</ph>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A class named <ph id="ph1">`DerivedClass`</ph> inherits from <ph id="ph2">`BaseClass`</ph> and overrides its <ph id="ph3">`MethodA`</ph> method.</source>
          <target state="translated">という名前のクラス<ph id="ph1">`DerivedClass`</ph>から継承<ph id="ph2">`BaseClass`</ph>オーバーライドとその<ph id="ph3">`MethodA`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Note that no attributes are applied to the members of <ph id="ph1">`DerivedClass`</ph>.</source>
          <target state="translated">メンバーに属性が適用されていないことに注意してください<ph id="ph1">`DerivedClass`</ph>です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The example iterates the members of <ph id="ph1">`DerivedClass`</ph> to determine whether the <ph id="ph2">&lt;xref:System.CLSCompliantAttribute&gt;</ph> or <ph id="ph3">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute as been applied to them.</source>
          <target state="translated">この例のメンバーを反復処理<ph id="ph1">`DerivedClass`</ph>を決定するかどうか、<ph id="ph2">&lt;xref:System.CLSCompliantAttribute&gt;</ph>または<ph id="ph3">&lt;xref:System.ThreadStaticAttribute&gt;</ph>に適用された属性します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Because <ph id="ph1">`inherit`</ph> is <ph id="ph2">`true`</ph>, the method searches the inheritance hierarchy of <ph id="ph3">`DerivedClass`</ph> for the specified attribute.</source>
          <target state="translated"><ph id="ph1">`inherit`</ph>は<ph id="ph2">`true`</ph>、メソッドの継承階層を検索する<ph id="ph3">`DerivedClass`</ph>指定の属性です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>As the output from the example shows, the <ph id="ph1">`total`</ph> field is decorated with the <ph id="ph2">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute, and the <ph id="ph3">`MethodA`</ph> method is decorated with the <ph id="ph4">&lt;xref:System.CLSCompliantAttribute&gt;</ph> attribute.</source>
          <target state="translated">例から出力として、<ph id="ph1">`total`</ph>フィールドがで修飾された、<ph id="ph2">&lt;xref:System.ThreadStaticAttribute&gt;</ph>属性、および<ph id="ph3">`MethodA`</ph>でメソッドを装飾、<ph id="ph4">&lt;xref:System.CLSCompliantAttribute&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A custom attribute type cannot be loaded.</source>
          <target state="translated">カスタム属性の型を読み込むことはできません。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> の場合。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This member belongs to a type that is loaded into the reflection-only context.</source>
          <target state="translated">このメンバーは、リフレクションのみのコンテキストに読み込まれる型に属します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>See <bpt id="p1">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>.</source>
          <target state="translated">「<bpt id="p1">[</bpt>方法: リフレクションのみのコンテキストにアセンブリを読み込む<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target member.</source>
          <target state="translated">ターゲット メンバーに適用されている属性に関するデータを表す <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> オブジェクトのリストを返します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>A generic list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the target member.</source>
          <target state="translated">対象のメンバーに適用されている属性に関するデータを表す <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> オブジェクトのジェネリック リスト。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</source>
          <target state="translated">リフレクション専用コンテキストに読み込まれるコードでカスタム属性自体が定義されている場合、リフレクションのみのコンテキストでコードのカスタム属性を調べるには、このメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Methods like <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> cannot be used in such cases, because they create instances of the attributes.</source>
          <target state="translated">メソッドと同様に<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>属性のインスタンスを作成するため、このようなケースでは使用できません。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>Code in the reflection-only context cannot be executed.</source>
          <target state="translated">リフレクションのみのコンテキストでコードを実行できません。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>For more information and for example code, see the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class.</source>
          <target state="translated">詳細については、たとえばコードを参照してください、<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.GetCustomAttributesData">
          <source>This method gets custom attribute data for types, nested types, and type members, because the <ph id="ph1">&lt;xref:System.Type&gt;</ph> class and the classes in the <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> namespace that represent type members all derive from <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>.</source>
          <target state="translated">このメソッドは、ための型や入れ子にされた型は、型のメンバー、カスタム属性データを取得、<ph id="ph1">&lt;xref:System.Type&gt;</ph>クラスとクラスでは、<ph id="ph2">&lt;xref:System.Reflection&gt;</ph>型からメンバーを表す名前空間<ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">このインスタンスのハッシュ コードを返します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 ビット符号付き整数ハッシュ コード。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>The type of custom attribute to search for.</source>
          <target state="translated">検索対象のカスタム属性の型。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>The search includes derived types.</source>
          <target state="translated">検索には、派生型が含まれます。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">このメンバーの継承チェーンを検索して属性を見つける場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>This parameter is ignored for properties and events.</source>
          <target state="translated">プロパティとイベントの場合、このパラメーターは無視されます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.</source>
          <target state="translated">派生クラスでオーバーライドされた場合、このメンバーに、指定された型の属性またはその派生型の属性が 1 つ以上適用されているかどうかを示します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if one or more instances of <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> or any of its derived types is applied to this member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">このメンバーに、<ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> の 1 つ以上のインスタンスまたはその派生型が適用されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter for properties and events.</source>
          <target state="translated">このメソッドは無視、<ph id="ph1">`inherit`</ph>プロパティとイベントのパラメーターです。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">プロパティとイベントの属性の継承チェーンを検索するには、適切なオーバー ロードを使用して、<ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>In the .NET Framework version 2.0, this method returns <ph id="ph1">`true`</ph> if a type, method, or constructor has security attributes stored in the new metadata format.</source>
          <target state="translated">.NET framework version 2.0 では、このメソッドが戻る<ph id="ph1">`true`</ph>かどうか、型、メソッド、またはコンス トラクターは、新しいメタデータ形式で格納されているセキュリティ属性。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>Assemblies compiled with version 2.0 use this format.</source>
          <target state="translated">バージョン 2.0 でコンパイルされたアセンブリでは、この形式を使用します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</source>
          <target state="translated">動的アセンブリと .NET Framework の以前のバージョンでコンパイルされたアセンブリは、以前の XML 形式を使用します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>See <bpt id="p1">[</bpt>Emitting Declarative Security Attributes<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>宣言セキュリティ属性の出力方法<ept id="p1">](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)</ept>です。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
          <source>The following example determines whether the specified attribute is applied to the specified member.</source>
          <target state="translated">次の例では、指定した属性が、指定されたメンバーに適用されるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>When overridden in a derived class, gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating the type of the member — method, constructor, event, and so on.</source>
          <target state="translated">派生クラスでオーバーライドされると、メンバーの種類を示す <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 値を取得します。メソッド、コンス トラクター、イベント、などです。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating the type of member.</source>
          <target state="translated">メンバーの種類を示す <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>This property is overridden in derived classes, and the override returns the appropriate member type.</source>
          <target state="translated">このプロパティは、派生クラスでオーバーライドされ、上書きが適切なメンバーの種類を取得します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property can be used to determine the member type of any given member.</source>
          <target state="translated">セットを確認すると、そのため、<ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>オブジェクト-によって返される配列など、 <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> —、<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>特定のメンバーのメンバーの種類を決定するプロパティを使用できます。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>To get the <ph id="ph1">`MemberType`</ph> property, get the class <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">取得する、<ph id="ph1">`MemberType`</ph>プロパティ、クラスを取得します<ph id="ph2">&lt;xref:System.Type&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> array.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>、取得、<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>配列。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>From the <ph id="ph1">`MethodInfo`</ph> array, get the <ph id="ph2">`MemberTypes`</ph>.</source>
          <target state="translated"><ph id="ph1">`MethodInfo`</ph>配列、取得、<ph id="ph2">`MemberTypes`</ph>です。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MemberType">
          <source>The following example displays the member name and type of a specified class.</source>
          <target state="translated">次の例では、指定したクラスの型とメンバーの名前が表示されます。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>Gets a value that identifies a metadata element.</source>
          <target state="translated">メタデータ要素を識別する値を取得します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>A value which, in combination with <ph id="ph1">&lt;see cref="P:System.Reflection.MemberInfo.Module" /&gt;</ph>, uniquely identifies a metadata element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Reflection.MemberInfo.Module" /&gt;</ph> との組み合わせで、メタデータ要素を一意に識別する値。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>The tokens obtained using this property can be passed to the unmanaged reflection API.</source>
          <target state="translated">このプロパティを使用して取得したトークンは、アンマネージのリフレクション API に渡すことができます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>For more information, please see <bpt id="p1">[</bpt>Unmanaged Reflection API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</source>
          <target state="translated">詳細についてを参照してください<bpt id="p1">[</bpt>アンマネージ リフレクション API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>です。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>Using the unmanaged reflection API requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">アンマネージ リフレクション API を使用するには、共通言語基盤 (CLI) ドキュメント、特に「Partition II:: Metadata Definition and Semantics」と「Partition III: CIL Instruction Set」に関する知識が必要です。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">ドキュメントはオンラインで入手できます。MSDN の「<bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「<bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> represents an array method, such as <ph id="ph2">&lt;see langword="Address" /&gt;</ph>, on an array type whose element type is a dynamic type that has not been completed.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> は、要素型が完了していない動的な型の配列型で、<ph id="ph2">&lt;see langword="Address" /&gt;</ph> などの配列メソッドを表します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.MetadataToken">
          <source>To get a metadata token in this case, pass the <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> object to the <ph id="ph2">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /&gt;</ph> method; or use the <ph id="ph3">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> method to get the token directly, instead of using the <ph id="ph4">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> method to get a <ph id="ph5">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> first.</source>
          <target state="translated">ここでメタデータ トークンを取得するには、<ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> オブジェクトを <ph id="ph2">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /&gt;</ph> メソッドに渡すか、<ph id="ph4">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> メソッドを使用して最初に <ph id="ph5">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> を取得する代わりに、<ph id="ph3">&lt;see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /&gt;</ph> メソッドを使用して直接トークンを取得します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.Module">
          <source>Gets the module in which the type that declares the member represented by the current <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> is defined.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> によって表されるメンバーを宣言する型が定義されているモジュールを取得します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> in which the type that declares the member represented by the current <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> is defined.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> によって表されるメンバーを宣言する型が定義されている <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>This property is provided as a convenience.</source>
          <target state="translated">このプロパティは、便宜上指定します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>It is equivalent to using the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property to get the type in which the method is declared, and then calling the <ph id="ph2">&lt;xref:System.Type.Module%2A&gt;</ph> property of the resulting <ph id="ph3">&lt;xref:System.Type&gt;</ph> object.</source>
          <target state="translated">使用すると等価である、<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>メソッドが宣言されている型を取得するプロパティと、呼び出し元、<ph id="ph2">&lt;xref:System.Type.Module%2A&gt;</ph>結果のプロパティ<ph id="ph3">&lt;xref:System.Type&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>The following code example declares a class that inherits <ph id="ph1">&lt;xref:System.Object&gt;</ph> and overrides <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">次のコード例は、継承するクラスを宣言して<ph id="ph1">&lt;xref:System.Object&gt;</ph>と上書き<ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Module">
          <source>The example obtains <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> objects for the class's <ph id="ph2">`ToString`</ph> method and for the inherited <ph id="ph3">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> method, and displays the names of the modules in which the two methods are declared.</source>
          <target state="translated">例では、取得<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>クラスのオブジェクト<ph id="ph2">`ToString`</ph>メソッドと、継承された<ph id="ph3">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>メソッド、し、2 つのメソッドが宣言されているモジュールの名前を表示します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.Module">
          <source>This method is not implemented.</source>
          <target state="translated">このメソッドは実装されていません。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.Name">
          <source>Gets the name of the current member.</source>
          <target state="translated">現在のメンバーの名前を取得します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the name of this member.</source>
          <target state="translated">このメンバーの名前を格納している <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>Only the simple name of the member is returned, not the fully qualified name.</source>
          <target state="translated">メンバーの簡易名のみが返されます、完全修飾名ではありません。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> property, get the class <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">取得する、<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph>プロパティ、クラスを取得します<ph id="ph2">&lt;xref:System.Type&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> array.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>、取得、<ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>配列。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>From a <ph id="ph1">`MemberInfo`</ph> element of the array, obtain the <ph id="ph2">`Name`</ph> property.</source>
          <target state="translated"><ph id="ph1">`MemberInfo`</ph> 、配列の要素を取得、<ph id="ph2">`Name`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.Name">
          <source>This example lists the <ph id="ph1">`Name`</ph> and <ph id="ph2">`DeclaringType`</ph> property of each member of the specified class.</source>
          <target state="translated">この例で一覧表示、<ph id="ph1">`Name`</ph>と<ph id="ph2">`DeclaringType`</ph>指定したクラスの各メンバーのプロパティです。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>right<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>right<ept id="p1">&lt;/c&gt;</ept> と比較する <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>left<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>left<ept id="p1">&lt;/c&gt;</ept> と比較する <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">2 つの <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> オブジェクトが等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="left" /&gt;</ph> が <ph id="ph3">&lt;paramref name="right" /&gt;</ph> に等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>right<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>right<ept id="p1">&lt;/c&gt;</ept> と比較する <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>left<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>left<ept id="p1">&lt;/c&gt;</ept> と比較する <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">2 つの <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> オブジェクトが等しくないかどうかを示します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="left" /&gt;</ph> が <ph id="ph3">&lt;paramref name="right" /&gt;</ph> と等しくない場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>Gets the class object that was used to obtain this instance of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> のこのインスタンスを取得するために使用したクラス オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object through which this <ph id="ph2">&lt;see langword="MemberInfo" /&gt;</ph> object was obtained.</source>
          <target state="translated">この <ph id="ph1">&lt;see langword="Type" /&gt;</ph> オブジェクトを取得するために使用した <ph id="ph2">&lt;see langword="MemberInfo" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>The <ph id="ph1">`ReflectedType`</ph> property retrieves the <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that was used to obtain this instance of <ph id="ph3">`MemberInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`ReflectedType`</ph>プロパティの取得、<ph id="ph2">&lt;xref:System.Type&gt;</ph>オブジェクトのこのインスタンスの取得に使用された<ph id="ph3">`MemberInfo`</ph>です。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>This may differ from the value of the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property if this <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object represents a member that is inherited from a base class.</source>
          <target state="translated">これは、ことがありますの値と異なる、<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>場合は、このプロパティ<ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>オブジェクトは、基底クラスから継承されているメンバーを表します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>If the <ph id="ph1">`MemberInfo`</ph> object is a global member (that is, if it was obtained from the <ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph> method, which returns global methods on a module), the returned <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> will be <ph id="ph4">`null`</ph>.</source>
          <target state="translated">場合、<ph id="ph1">`MemberInfo`</ph>オブジェクトは、グローバル メンバー (から取得されている場合は、<ph id="ph2">&lt;xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType&gt;</ph>モジュールでグローバル メソッドを返すメソッドを)、返された<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph>なります<ph id="ph4">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.MemberInfo.ReflectedType">
          <source>The following code example shows how the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.ReflectedType%2A&gt;</ph> changes when the member <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> is viewed from a <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph> obtained from type <ph id="ph4">&lt;xref:System.Object&gt;</ph> and from a <ph id="ph5">&lt;xref:System.Reflection.MemberInfo&gt;</ph> obtained from the <ph id="ph6">&lt;xref:System.Reflection.MemberInfo&gt;</ph> class itself, which inherits <ph id="ph7">&lt;xref:System.Object&gt;</ph> but does not override <ph id="ph8">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">次のコード例に示す方法、<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.ReflectedType%2A&gt;</ph>変更時にメンバー<ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>から表示、<ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>型から取得した<ph id="ph4">&lt;xref:System.Object&gt;</ph>との間、<ph id="ph5">&lt;xref:System.Reflection.MemberInfo&gt;</ph>から取得した、<ph id="ph6">&lt;xref:System.Reflection.MemberInfo&gt;</ph>自体を継承するクラス<ph id="ph7">&lt;xref:System.Object&gt;</ph>がオーバーライドしません<ph id="ph8">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">将来使用するために予約されています。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL にする必要があります。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">マッピング対象として渡される名前の配列。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">マッピングされる名前のカウント。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">名前を解釈するロケール コンテキスト。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">名前に対応する ID を受け取る、呼び出し元が割り当てた配列。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">一連の名前を対応する一連のディスパッチ識別子に割り当てます。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">詳細については<ph id="ph1">`IDispatch::GetIDsOfNames`</ph>、MSDN ライブラリを参照してください。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">このメソッドは COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> インターフェイスを使用して遅延バインディングで呼び出されます。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> クラスを表す <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> クラスを表す <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">返される型情報。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">型情報のロケール ID。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">要求された型情報オブジェクトへのポインターを取得します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">オブジェクトの型情報を取得します。この型情報を使用して、インターフェイスの型情報を取得できます。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">詳細については<ph id="ph1">`IDispatch::GetTypeInfo`</ph>、MSDN ライブラリを参照してください。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">このメソッドは COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> インターフェイスを使用して遅延バインディングで呼び出されます。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">オブジェクトにより提供される型タイプ情報インターフェイスの数を受け取る場所を指定します。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">オブジェクトが提供する型情報インターフェイスの数 (0 または 1) を取得します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">詳細については<ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>、MSDN ライブラリを参照してください。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">このメソッドは COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> インターフェイスを使用して遅延バインディングで呼び出されます。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">メンバーを識別します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">将来使用するために予約されています。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL にする必要があります。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">引数を解釈する対象のロケール コンテキスト。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">呼び出しのコンテキストを記述するフラグ。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">引数の配列、名前付き引数の DISPID の配列、配列内の要素数のカウントを格納している構造体へのポインター。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">結果が格納される場所へのポインター。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">例外情報を格納する構造体へのポインター。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">エラーが存在する最初の引数のインデックス。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">オブジェクトによって公開されたプロパティおよびメソッドへのアクセスを提供します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">詳細については<ph id="ph1">`IDispatch::Invoke`</ph>、MSDN ライブラリを参照してください。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">このメソッドは COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> インターフェイスを使用して遅延バインディングで呼び出されます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>