<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CallingConventions.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac525db27464d40078edeefa0858df96a01af3e22f0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25db27464d40078edeefa0858df96a01af3e22f0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.CallingConventions">
          <source>Defines the valid calling conventions for a method.</source>
          <target state="translated">メソッドの有効な呼び出し規則を定義します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CallingConventions">
          <source>The native calling convention is the set of rules governing the order and layout of arguments passed to compiled methods.</source>
          <target state="translated">ネイティブ呼び出し規則は順序を制御する規則のセットに渡された引数のレイアウトがメソッドをコンパイルします。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CallingConventions">
          <source>It also governs how to pass the return value, what registers to use for arguments, and whether the called or the calling method removes arguments from the stack.</source>
          <target state="translated">戻り値を渡す方法、引数を使用するレジスタし、かどうか、呼び出された、または呼び出し元のメソッド、この引数をスタックから削除によっても決まります。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.Any">
          <source>Specifies that either the <ph id="ph1">&lt;see langword="Standard" /&gt;</ph> or the <ph id="ph2">&lt;see langword="VarArgs" /&gt;</ph> calling convention may be used.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Standard" /&gt;</ph> または <ph id="ph2">&lt;see langword="VarArgs" /&gt;</ph> のいずれかの呼び出し規約を使用することを指定します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.ExplicitThis">
          <source>Specifies that the signature is a function-pointer signature, representing a call to an instance or virtual method (not a static method).</source>
          <target state="translated">シグネチャが、インスタンスまたは仮想メソッド (非静的メソッド) への呼び出しを表す関数ポインター シグネチャであることを示します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.ExplicitThis">
          <source>If <ph id="ph1">&lt;see langword="ExplicitThis" /&gt;</ph> is set, <ph id="ph2">&lt;see langword="HasThis" /&gt;</ph> must also be set.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="ExplicitThis" /&gt;</ph> が設定されている場合は <ph id="ph2">&lt;see langword="HasThis" /&gt;</ph> も設定する必要があります。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.ExplicitThis">
          <source>The first argument passed to the called method is still a <ph id="ph1">&lt;see langword="this" /&gt;</ph> pointer, but the type of the first argument is now unknown.</source>
          <target state="translated">呼び出されるメソッドに渡される最初の引数は <ph id="ph1">&lt;see langword="this" /&gt;</ph> ポインターのままですが、その引数の型は不明になります。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.ExplicitThis">
          <source>Therefore, a token that describes the type (or class) of the <ph id="ph1">&lt;see langword="this" /&gt;</ph> pointer is explicitly stored into its metadata signature.</source>
          <target state="translated">したがって、<ph id="ph1">&lt;see langword="this" /&gt;</ph> ポインターの型 (またはクラス) を記述するトークンが、そのメタデータ シグネチャに明示的に格納されます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.HasThis">
          <source>Specifies an instance or virtual method (not a static method).</source>
          <target state="translated">インスタンスまたは仮想メソッド (非静的メソッド) を指定します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.HasThis">
          <source>At run-time, the called method is passed a pointer to the target object as its first argument (the <ph id="ph1">&lt;see langword="this" /&gt;</ph> pointer).</source>
          <target state="translated">実行時に、呼び出されるメソッドに、目的のオブジェクトへのポインターが最初の引数 (<ph id="ph1">&lt;see langword="this" /&gt;</ph> ポインター) として渡されます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.HasThis">
          <source>The signature stored in metadata does not include the type of this first argument, because the method is known and its owner class can be discovered from metadata.</source>
          <target state="translated">メタデータに格納されているシグネチャには、この最初の引数の型は含まれていません。メソッドが明らかに指定されており、そのメソッドを所有するクラスをメタデータから確認できるためです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.Standard">
          <source>Specifies the default calling convention as determined by the common language runtime.</source>
          <target state="translated">共通言語ランタイムで決定されている既定の呼び出し規約を指定します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.Standard">
          <source>Use this calling convention for static methods.</source>
          <target state="translated">この静的メソッドの呼び出し規約を使用します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.Standard">
          <source>For instance or virtual methods use <ph id="ph1">&lt;see langword="HasThis" /&gt;</ph>.</source>
          <target state="translated">インスタンスや仮想メソッドには、<ph id="ph1">&lt;see langword="HasThis" /&gt;</ph> を使用します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.VarArgs">
          <source>Specifies the calling convention for methods with variable arguments.</source>
          <target state="translated">引数の数が変化するメソッドの呼び出し規約を指定します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>