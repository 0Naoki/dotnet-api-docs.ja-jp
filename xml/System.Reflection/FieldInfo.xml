<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FieldInfo.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5eaf3da8149c7beea481d56464ce8b739bcbe0488.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eaf3da8149c7beea481d56464ce8b739bcbe0488</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldInfo">
          <source>Discovers the attributes of a field and provides access to field metadata.</source>
          <target state="translated">フィールドの属性を取得し、フィールドのメタデータにアクセスできるようにします。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The field information is obtained from metadata.</source>
          <target state="translated">フィールドの情報は、メタデータから取得されます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> class does not have a public constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph>クラスには、パブリック コンス トラクターがありません。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects are obtained by calling either the <ph id="ph2">&lt;xref:System.Type.GetFields%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Type.GetField%2A&gt;</ph> method of a <ph id="ph4">`Type`</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> 呼び出して、オブジェクトを取得、<ph id="ph2">&lt;xref:System.Type.GetFields%2A&gt;</ph>または<ph id="ph3">&lt;xref:System.Type.GetField%2A&gt;</ph>のメソッド、<ph id="ph4">`Type`</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>Fields are variables defined in the class.</source>
          <target state="translated">フィールドは、クラスで定義された変数です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> クラス内のフィールドのメタデータへのアクセスと、フィールドの動的なセットと get 機能を提供します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The class is not loaded into memory until invoke or get is called on the object.</source>
          <target state="translated">クラスは invoke までメモリに読み込まれていないか、オブジェクトに対して get が呼び出されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> method to get the field-related information from the <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> class, and then displays field attributes.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph>からのフィールドに関連する情報を取得するメソッド、<ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph>クラス、および、フィールドの属性値が表示されます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">継承時の完全な信頼。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">部分信頼コードでこのクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>This type is thread safe.</source>
          <target state="translated">この型はスレッド セーフです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> から継承する場合は、<ph id="ph2">&lt;see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /&gt;</ph> メンバーと <ph id="ph3">&lt;see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" /&gt;</ph> メンバーをオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.#ctor">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>Gets the attributes associated with this field.</source>
          <target state="translated">このフィールドに関連付けられている属性を取得します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>The <ph id="ph1">&lt;see langword="FieldAttributes" /&gt;</ph> for this field.</source>
          <target state="translated">このフィールドの <ph id="ph1">&lt;see langword="FieldAttributes" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>All members have a set of attributes, which are defined in relation to the specific type of member.</source>
          <target state="translated">すべてのメンバーには、特定の種類のメンバーに関連して定義されている属性のセットがあります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source><ph id="ph1">`FieldAttributes`</ph> informs the user whether this field is the private field, a static field, and so on.</source>
          <target state="translated"><ph id="ph1">`FieldAttributes`</ph> このフィールドは、プライベート フィールド、静的フィールドとであるかどうかをユーザーに通知します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>To get the <ph id="ph1">`Attributes`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">取得する、<ph id="ph1">`Attributes`</ph>プロパティ、クラスをまず取得<ph id="ph2">`Type`</ph>です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>、取得、<ph id="ph2">`FieldInfo`</ph>です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`Attributes`</ph>.</source>
          <target state="translated"><ph id="ph1">`FieldInfo`</ph>、取得、<ph id="ph2">`Attributes`</ph>です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>The following code example builds three fields and displays their field attributes.</source>
          <target state="translated">次のコード例では、次の 3 つのフィールドを作成し、そのフィールドの属性を表示します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>A <ph id="ph1">`FieldAttributes`</ph> value can contain more than one attribute, such as both <ph id="ph2">`Public`</ph> and <ph id="ph3">`Literal`</ph>, as shown in the third field.</source>
          <target state="translated">A<ph id="ph1">`FieldAttributes`</ph>値が両方ともなど、複数の属性を含めることができます<ph id="ph2">`Public`</ph>と<ph id="ph3">`Literal`</ph>の 3 番目のフィールドに示すようにします。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">対象のインスタンスと比較する対象のオブジェクト、または <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> がこのインスタンスの型および値に等しい場合は <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>Gets a <ph id="ph1">&lt;see langword="RuntimeFieldHandle" /&gt;</ph>, which is a handle to the internal metadata representation of a field.</source>
          <target state="translated">フィールドの内部メタデータ形式を識別するハンドルである <ph id="ph1">&lt;see langword="RuntimeFieldHandle" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>A handle to the internal metadata representation of a field.</source>
          <target state="translated">フィールドの内部メタデータ形式を識別するハンドル。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>The handles are valid only in the appdomain in which they were obtained.</source>
          <target state="translated">ハンドルは、取得された appdomain 内でのみ有効です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>The following example retrieves MyClass.MyField field information and displays the field associated with the field handle.</source>
          <target state="translated">次の例では、MyClass.MyField フィールド情報を取得し、フィールド ハンドルに関連付けられているフィールドを表示します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>Gets the type of this field object.</source>
          <target state="translated">このフィールド オブジェクトの型を取得します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>The type of this field object.</source>
          <target state="translated">このフィールド オブジェクトの型。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>The type is some primitive data type, such as <ph id="ph1">`String`</ph>, <ph id="ph2">`Boolean`</ph>, or <ph id="ph3">`GUID`</ph>.</source>
          <target state="translated">型は、いくつかのプリミティブ データ型など<ph id="ph1">`String`</ph>、 <ph id="ph2">`Boolean`</ph>、または<ph id="ph3">`GUID`</ph>です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>To get the <ph id="ph1">`FieldType`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">取得する、<ph id="ph1">`FieldType`</ph>プロパティ、クラスをまず取得<ph id="ph2">`Type`</ph>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>、取得、<ph id="ph2">`FieldInfo`</ph>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`FieldType`</ph> value.</source>
          <target state="translated"><ph id="ph1">`FieldInfo`</ph>、取得、<ph id="ph2">`FieldType`</ph>値。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>The following example creates a field, gets its type and <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph>, and displays its <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph>.</source>
          <target state="translated">次の例は、フィールドを作成、その型を取得し、 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph>、し、表示、<ph id="ph2">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldInfo">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> for the field represented by a handle.</source>
          <target state="translated">ハンドルが表すフィールドの <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph> structure that contains the handle to the internal metadata representation of a field.</source>
          <target state="translated">フィールドの内部メタデータ形式を識別するハンドルを格納している <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph> 構造体。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> for the field represented by the specified handle.</source>
          <target state="translated">指定したハンドルが表すフィールドの <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> object representing the field specified by <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="handle" /&gt;</ph> によって指定されたフィールドを表す <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>Handles are valid only in the application domain in which they were obtained.</source>
          <target state="translated">ハンドルが取得されたアプリケーション ドメイン内でのみ有効です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> method to get <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects for the fields of a type, gets a <ph id="ph3">&lt;xref:System.RuntimeFieldHandle&gt;</ph> structure for each field, and then retrieves the <ph id="ph4">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects from the handles using this overload of the <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A&gt;</ph> method.</source>
          <target state="translated">次のコード例では、<ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph>取得するメソッド<ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph>、型のフィールドについてのオブジェクトを取得、<ph id="ph3">&lt;xref:System.RuntimeFieldHandle&gt;</ph>構造体の各フィールド、および、取得、 <ph id="ph4">&lt;xref:System.Reflection.FieldInfo&gt;</ph> のこのオーバーロードを使用してハンドルからオブジェクト<ph id="ph5">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> が無効です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph> structure that contains the handle to the internal metadata representation of a field.</source>
          <target state="translated">フィールドの内部メタデータ形式を識別するハンドルを格納している <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph> 構造体。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.RuntimeTypeHandle" /&gt;</ph> structure that contains the handle to the generic type that defines the field.</source>
          <target state="translated">フィールドを定義するジェネリック型を識別するハンドルを格納している <ph id="ph1">&lt;see cref="T:System.RuntimeTypeHandle" /&gt;</ph> 構造体。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> for the field represented by the specified handle, for the specified generic type.</source>
          <target state="translated">指定したジェネリック型に応じた、指定したハンドルが表すフィールドの <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> object representing the field specified by <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>, in the generic type specified by <ph id="ph3">&lt;paramref name="declaringType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="handle" /&gt;</ph> によって指定されたジェネリック型で、<ph id="ph3">&lt;paramref name="declaringType" /&gt;</ph> によって指定されたフィールドを表す <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Handles are valid only in the application domain in which they were obtained.</source>
          <target state="translated">ハンドルが取得されたアプリケーション ドメイン内でのみ有効です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The recommended practice is that <ph id="ph1">`declaringType`</ph> should always be the runtime type handle of the constructed type that <ph id="ph2">`handle`</ph> belongs to.</source>
          <target state="translated">推奨されている<ph id="ph1">`declaringType`</ph>の構築されたランタイム型ハンドルの種類は常に<ph id="ph2">`handle`</ph>に属しています。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>That is, if <ph id="ph1">`handle`</ph> is a runtime field handle for a field that belongs to <ph id="ph2">`MyType&lt;int&gt;`</ph> (<ph id="ph3">`MyType(Of Integer)`</ph> in Visual Basic), <ph id="ph4">`declaringType`</ph> is the runtime type handle for <ph id="ph5">`MyType&lt;int&gt;`</ph>.</source>
          <target state="translated">つまり場合、<ph id="ph1">`handle`</ph>に属しているフィールドのランタイム フィールド ハンドルは、 <ph id="ph2">`MyType&lt;int&gt;`</ph> (<ph id="ph3">`MyType(Of Integer)`</ph> Visual Basic で)、<ph id="ph4">`declaringType`</ph>のランタイム型ハンドル<ph id="ph5">`MyType&lt;int&gt;`</ph>です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.</source>
          <target state="translated">ランタイム フィールド ハンドルが、ジェネリック型定義でフィールドを表す場合は、ジェネリック型定義のランタイム型のハンドルを使用しません。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Implementations are compatible in some cases.</source>
          <target state="translated">実装は、場合によっては互換性があります。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments.</source>
          <target state="translated">たとえば、単一の実装は、ジェネリック型引数の参照型を使用して、特定のジェネリック型定義から構築されたすべての種類で共有されます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>For example, <ph id="ph1">`MyType&lt;string&gt;`</ph>, <ph id="ph2">`MyType&lt;object&gt;`</ph>, and <ph id="ph3">`MyType&lt;ArrayList&gt;`</ph> all share the same implementation.</source>
          <target state="translated">たとえば、 <ph id="ph1">`MyType&lt;string&gt;`</ph>、 <ph id="ph2">`MyType&lt;object&gt;`</ph>、および<ph id="ph3">`MyType&lt;ArrayList&gt;`</ph>すべて同じ実装を共有します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>In this situation, the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> object that is returned represents a field on the type that <ph id="ph2">`declaringType`</ph> specifies, regardless of the original source of <ph id="ph3">`handle`</ph>.</source>
          <target state="translated">このような状況で、<ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph>返されるオブジェクトを表す型のフィールドを<ph id="ph2">`declaringType`</ph>の元のソースに関係なく、指定<ph id="ph3">`handle`</ph>です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.</source>
          <target state="translated">構築された型のジェネリック型引数が参照型である場合にのみ動作するためでも、この方法はお勧めはできません。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position.</source>
          <target state="translated">汎用引数が値型の場合は、構築型のランタイム型ハンドルは、同じジェネリック パラメーターの位置に参照型または異なる値型の位置にある構造からランタイム フィールド ハンドルと互換性がありません。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>In that case, the only way to use the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=nameWithType&gt;</ph> overload is to ensure that <ph id="ph2">`declaringType`</ph> is the runtime type handle for the constructed type that <ph id="ph3">`handle`</ph> belongs to.</source>
          <target state="translated">その場合、使用する唯一の方法で、<ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=nameWithType&gt;</ph>ことを確認するにはオーバー ロード<ph id="ph2">`declaringType`</ph>構築された型のランタイム型ハンドルは、<ph id="ph3">`handle`</ph>に属しています。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The following example shows how to retrieve <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects for fields on constructed generic classes.</source>
          <target state="translated">次の例は、取得する方法を示しています。<ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph>の構築されたジェネリック クラスのフィールドです。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The example defines the generic type <ph id="ph1">`Test&lt;T&gt;`</ph> (<ph id="ph2">`Test(Of T)`</ph> in Visual Basic) with a single field named <ph id="ph3">`TestField`</ph>, of type <ph id="ph4">`T`</ph>.</source>
          <target state="translated">例では、ジェネリック型を定義する<ph id="ph1">`Test&lt;T&gt;`</ph>(<ph id="ph2">`Test(Of T)`</ph> Visual Basic で) という名前の単一フィールドと<ph id="ph3">`TestField`</ph>、型の<ph id="ph4">`T`</ph>します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The example gets the <ph id="ph1">&lt;xref:System.RuntimeFieldHandle&gt;</ph> and <ph id="ph2">&lt;xref:System.RuntimeTypeHandle&gt;</ph> for the case where <ph id="ph3">`T`</ph> is <ph id="ph4">&lt;xref:System.String&gt;</ph>, and demonstrates the following:</source>
          <target state="translated">例では、取得、<ph id="ph1">&lt;xref:System.RuntimeFieldHandle&gt;</ph>と<ph id="ph2">&lt;xref:System.RuntimeTypeHandle&gt;</ph>の場合、ここで<ph id="ph3">`T`</ph>は<ph id="ph4">&lt;xref:System.String&gt;</ph>、および、次の例を示します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>An exception is thrown if the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29&gt;</ph> method overload is used.</source>
          <target state="translated">場合、例外がスローされます、<ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29&gt;</ph>メソッド オーバー ロードを使用します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>This is true even if the field is not of type <ph id="ph1">`T`</ph>.</source>
          <target state="translated">これは、フィールドの種類ではない場合でも当てはまります<ph id="ph1">`T`</ph>です。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> is retrieved successfully if the runtime type handle is from the same construction as the runtime field handle, in this case <ph id="ph2">`Test&lt;string&gt;`</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph>場合は、ここでは、ランタイム フィールド ハンドルとして同じ構築からランタイム型ハンドルが正常に取得<ph id="ph2">`Test&lt;string&gt;`</ph>です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>If the runtime type handle is from a compatible construction, in this case <ph id="ph1">`Test&lt;object&gt;`</ph>, a <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> for the field on the compatible construction is retrieved.</source>
          <target state="translated">ランタイム型ハンドルが互換性のあるコンストラクションからこの例ではかどうか<ph id="ph1">`Test&lt;object&gt;`</ph>、<ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph>の互換性のあるコンス トラクターでフィールドを取得します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>If the runtime type handle is not from a compatible construction, an exception is thrown.</source>
          <target state="translated">ランタイム型ハンドルは、互換性のあるコンストラクションからは、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>In this case, a value type is specified for <ph id="ph1">`T`</ph>.</source>
          <target state="translated">この場合、値の型が指定されて<ph id="ph1">`T`</ph>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> が無効です。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source><ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph> is not compatible with <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph> は <ph id="ph2">&lt;paramref name="handle" /&gt;</ph> と互換性がありません。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>For example, <ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph> is the runtime type handle of the generic type definition, and <ph id="ph2">&lt;paramref name="handle" /&gt;</ph> comes from a constructed type.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph> はジェネリック型定義の実行時型ハンドルであり、<ph id="ph2">&lt;paramref name="handle" /&gt;</ph> は構築された型に基づいています。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">このインスタンスのハッシュ コードを返します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 ビット符号付き整数ハッシュ コード。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>Gets an array of types that identify the optional custom modifiers of the field.</source>
          <target state="translated">フィールドの省略可能なカスタム修飾子を識別する型の配列を取得します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the optional custom modifiers of the current field, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> など、現在のフィールドのオプションのカスタム修飾子を識別する <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph>マネージ コンパイラのデザイナーのメソッドが用意されています。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">カスタム修飾子の詳細については、次を参照してください。<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph>および関連クラス、<ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph>名前空間および ECMA Partition II ドキュメント内のメタデータ指定します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">ドキュメントはオンラインで入手できます。MSDN の「<bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「<bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>Returns a literal value associated with the field by a compiler.</source>
          <target state="translated">コンパイラによってフィールドに関連付けられているリテラル値を返します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the literal value associated with the field.</source>
          <target state="translated">フィールドに関連付けられているリテラル値を格納している <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>If the literal value is a class type with an element value of zero, the return value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">リテラル値が、要素値がゼロに設定されているクラス型である場合、戻り値は <ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>This method is provided for designers of managed compilers and code analyzers.</source>
          <target state="translated">このメソッドは、マネージ コンパイラ、およびコード アナライザーのデザイナーを提供します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>This method can be used in both the execution context and the reflection-only context.</source>
          <target state="translated">このメソッドは、実行コンテキストおよび、リフレクションのみのコンテキストの両方で使用できます。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</source>
          <target state="translated">アンマネージ メタデータは、フィールド、パラメーター、およびプロパティの定数値を格納する定数のテーブルが使用されます。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>Constant information does not directly influence runtime behavior.</source>
          <target state="translated">定数の詳細については、実行時の動作を直接は影響しません。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>Compilers inspect this information, at compile time, when importing metadata.</source>
          <target state="translated">コンパイラがコンパイル時に、この情報を検査メタデータをインポートするときにします。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</source>
          <target state="translated">使用する場合は、コンパイラは、Microsoft intermediate language (MSIL) ストリームに定数の値が埋め込まれます。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>There are no MSIL instructions that can be used to access the Constant table at run time.</source>
          <target state="translated">実行時に定数のテーブルへのアクセスに使用できる MSIL 命令はありません。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>For more information on constant values and the Constant table, see the ECMA Partition II documentation.</source>
          <target state="translated">定数値と定数のテーブルの詳細については、ECMA Partition II ドキュメントを参照してください。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">ドキュメントはオンラインで入手できます。MSDN の「<bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「<bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The Constant table in unmanaged metadata does not contain a constant value for the current field.</source>
          <target state="translated">アンマネージ メタデータの定数テーブルに、現在のフィールドの定数値が含まれていません。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The type of the value is not one of the types permitted by the Common Language Specification (CLS).</source>
          <target state="translated">値の型は、共通言語仕様 (CLS) によって許可されているどの型でもありません。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.</source>
          <target state="translated">ECMA Partition II 仕様「Metadata Logical Format: Other Structures」の「Element Types used in Signatures」を参照してください。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The constant value for the field is not set.</source>
          <target state="translated">フィールドの定数値が設定されていません。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>Gets an array of types that identify the required custom modifiers of the property.</source>
          <target state="translated">プロパティの必須のカスタム修飾子を識別する型の配列を取得します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the required custom modifiers of the current property, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> や <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> など、現在のプロパティの必須のカスタム修飾子を識別する <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph> オブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph>マネージ コンパイラのデザイナーのメソッドが用意されています。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">カスタム修飾子の詳細については、次を参照してください。<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph>および関連クラス、<ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph>名前空間および ECMA Partition II ドキュメント内のメタデータ指定します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">ドキュメントはオンラインで入手できます。MSDN の「<bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「<bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The object whose field value will be returned.</source>
          <target state="translated">フィールド値が返されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>When overridden in a derived class, returns the value of a field supported by a given object.</source>
          <target state="translated">派生クラスによってオーバーライドされた場合、指定したオブジェクトでサポートされているフィールドの値を返します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>An object containing the value of the field reflected by this instance.</source>
          <target state="translated">このインスタンスがリフレクションするフィールドの値を保持しているオブジェクト。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>If the field is static, <ph id="ph1">`obj`</ph> is ignored.</source>
          <target state="translated">フィールドが静的である場合<ph id="ph1">`obj`</ph>は無視されます。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>For non-static fields, <ph id="ph1">`obj`</ph> should be an instance of a class that inherits or declares the field.</source>
          <target state="translated">非静的フィールドの<ph id="ph1">`obj`</ph>フィールドを宣言または継承するクラスのインスタンスである必要があります。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Note that the return type of <ph id="ph1">`GetValue`</ph> is <ph id="ph2">`Object`</ph>.</source>
          <target state="translated">戻り値の型の注<ph id="ph1">`GetValue`</ph>は<ph id="ph2">`Object`</ph>します。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>For example, if the field holds a Boolean primitive value, an instance of <ph id="ph1">`Object`</ph> with the appropriate Boolean value is returned.</source>
          <target state="translated">たとえば、フィールド保持している場合はブール値プリミティブ値のインスタンス<ph id="ph1">`Object`</ph>と適切なブール値、値が返されます。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Before returning the value, <ph id="ph1">`GetValue`</ph> checks to see if the user has access permission.</source>
          <target state="translated">値を返す前に<ph id="ph1">`GetValue`</ph>ユーザーがアクセス許可を持っているかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Access restrictions are ignored for fully trusted code.</source>
          <target state="translated">アクセスの制限には、完全に信頼されたコードは無視されます。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.</source>
          <target state="translated">つまり、private のコンス トラクター、メソッド、フィールド、およびプロパティにアクセスして、コードが完全に信頼されるリフレクションを通じて呼び出されました。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">以降で、 <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>、このメソッドは、呼び出し元が許可されている場合は、非パブリック メンバーをアクセスに使用できます<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>で、<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph>フラグし、非パブリック メンバーの許可セットが、呼び出し元に制限されている場合は、セット、またはそのサブセットを付与します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(を参照してください<bpt id="p1">[</bpt>リフレクションに関するセキュリティの考慮事項<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>)。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">この機能を使用するには、アプリケーションで <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 以降を対象とする必要があります。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph> method to retrieve the value of a static field.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph>静的フィールドの値を取得します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Note that the value of the <ph id="ph1">`obj`</ph> argument is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">なおの値、<ph id="ph1">`obj`</ph>引数は<ph id="ph2">`null`</ph>します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The following example retrieves an array of <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects that represents the fields of the <ph id="ph2">`FieldsClass`</ph> type, and then calls the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph> to display the value of each field for the <ph id="ph4">`fieldsInst`</ph> object.</source>
          <target state="translated">次の例の配列を取得する<ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph>のフィールドを表すオブジェクト、<ph id="ph2">`FieldsClass`</ph>型、呼び出し、続いて、<ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph>の各フィールドの値を表示する、<ph id="ph4">`fieldsInst`</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the Portable Class Library, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows ストア アプリ用 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> またはポータブル クラス ライブラリでは、<ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> を代わりにキャッチします。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The field is non-static and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">フィールドは非静的であり、<ph id="ph1">&lt;paramref name="obj" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>A field is marked literal, but the field does not have one of the accepted literal types.</source>
          <target state="translated">フィールドがリテラルとマークされていますが、フィールドは許可されたリテラル型を持っていません。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the Portable Class Library, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows ストア アプリ用 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> またはポータブル クラス ライブラリでは、基本クラスの例外である <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph> を代わりにキャッチします。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The caller does not have permission to access this field.</source>
          <target state="translated">呼び出し元には、このフィールドに対するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The method is neither declared nor inherited by the class of <ph id="ph1">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated">メソッドは <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> のクラスで宣言も継承もされていません。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location.</source>
          <target state="translated">場所を指すマネージ ポインターと、その場所に格納される可能性がある型のランタイムの表現をカプセル化する <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph> 構造体。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>Returns the value of a field supported by a given object.</source>
          <target state="translated">指定したオブジェクトでサポートされているフィールドの値を返します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> containing a field value.</source>
          <target state="translated">フィールド値を格納している <ph id="ph1">&lt;see langword="Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</source>
          <target state="translated">呼び出し元は、共通言語仕様 (CLS) の代替が必要ですが、代わりにこのメソッドを呼び出しました。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>Gets a value indicating whether the potential visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</source>
          <target state="translated">このフィールドを参照可能な範囲が <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph> によって示されるかどうかを表す値を取得します。ここで判定されるのは、フィールドは同じアセンブリ内の他の型でのみ参照できる可能性があり、アセンブリ外部の派生型では参照できないということです。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the visibility of this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">このフィールドの参照範囲が <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph> によって正しく示される場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The actual visibility of a field is limited by the visibility of its type.</source>
          <target state="translated">フィールドの実際の可視性は、その型の可視性によって制限されます。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph> property might be <ph id="ph2">`true`</ph> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>プロパティがあります<ph id="ph2">`true`</ph>フィールドが含んでいる型の外部で参照ではありませんし、プライベートの入れ子にされた型のフィールドである場合は、フィールドのです。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Assembly?displayProperty=nameWithType&gt;</ph> if the only visibility modifier is <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> in Visual Basic).</source>
          <target state="translated">フィールドの可視性がによって正確に説明されている<ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Assembly?displayProperty=nameWithType&gt;</ph>のみ可視性修飾子が場合<ph id="ph2">`internal`</ph>(<ph id="ph3">`Friend`</ph> Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>This property is <ph id="ph1">`false`</ph> for fields that are <ph id="ph2">`protected internal`</ph> in C# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic, <ph id="ph4">`protected public`</ph> in C++); use the <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property to identify such fields.</source>
          <target state="translated">このプロパティは、<ph id="ph1">`false`</ph>られたフィールドの<ph id="ph2">`protected internal`</ph>(C#) (<ph id="ph3">`Protected Friend`</ph> Visual basic で<ph id="ph4">`protected public`</ph>C++ で); を使用して、<ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>このようなフィールドを識別するプロパティです。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">次のコード例は、さまざまなレベルの可視性を持つフィールドを定義しの値を表示、 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">Visual Basic および c# 言語でフィールドを定義できません<ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph>可視性; アクセス レベルは、C++ の例でのみが表示されます。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>Gets a value indicating whether the visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph>; that is, the field is visible only within its class and derived classes.</source>
          <target state="translated">このフィールドへの参照範囲が <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph> によって示されるかどうかを表す値を取得します。ここで判定されるのは、フィールドはそのフィールドのクラスと派生クラスの内側でのみ参照できるということです。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">このフィールドへのアクセスが <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph> によって正しく示される場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Family?displayProperty=nameWithType&gt;</ph> if the only visibility modifier is <ph id="ph2">`protected`</ph>.</source>
          <target state="translated">フィールドの可視性がによって正確に説明されている<ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Family?displayProperty=nameWithType&gt;</ph>のみ可視性修飾子が場合<ph id="ph2">`protected`</ph>です。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>This property is <ph id="ph1">`false`</ph> for fields that are <ph id="ph2">`protected internal`</ph> in C# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic, <ph id="ph4">`protected public`</ph> in C++); use the <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property to identify such fields.</source>
          <target state="translated">このプロパティは、<ph id="ph1">`false`</ph>られたフィールドの<ph id="ph2">`protected internal`</ph>(C#) (<ph id="ph3">`Protected Friend`</ph> Visual basic で<ph id="ph4">`protected public`</ph>C++ で); を使用して、<ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>このようなフィールドを識別するプロパティです。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">次のコード例は、さまざまなレベルの可視性を持つフィールドを定義しの値を表示、 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">Visual Basic および c# 言語でフィールドを定義できません<ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph>可視性; アクセス レベルは、C++ の例でのみが表示されます。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>Gets a value indicating whether the visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</source>
          <target state="translated">フィールドへの参照範囲が <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph> によって示されるかどうかを表す値を取得します。ここで判定されるのは、フィールドは派生クラスからアクセスできるが、それらのフィールドが同じアセンブリ内にある場合に限るものであることです。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">このフィールドへのアクセスが <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph> によって正しく示される場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>If a field has <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem&gt;</ph> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.</source>
          <target state="translated">フィールドがある場合<ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem&gt;</ph>レベルの可視性、呼び出すことができますも、同じアセンブリ内にある派生クラスでのすべてのメンバーからからではないその他の種類。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> if the visibility modifier is <ph id="ph2">`protected private`</ph> in C++.</source>
          <target state="translated">フィールドの可視性がによって正確に説明されている<ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph>可視性修飾子が場合<ph id="ph2">`protected private`</ph>C++ でします。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>Fields with this visibility cannot be defined in Visual Basic or C#.</source>
          <target state="translated">Visual Basic または c# では、この可視性を持つフィールドを定義することはできません。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">次のコード例は、さまざまなレベルの可視性を持つフィールドを定義しの値を表示、 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">Visual Basic および c# 言語でフィールドを定義できません<ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph>可視性; アクセス レベルは、C++ の例でのみが表示されます。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>Gets a value indicating whether the potential visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</source>
          <target state="translated">このフィールドへの参照範囲が <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph> によって示されるかどうかを表す値を取得します。ここで判定されるのは、フィールドは任意の場所にある派生クラスと、同じアセンブリ内のクラスでアクセスできることです。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">このフィールドへのアクセスが <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph> によって正しく示される場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>If a field has <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem&gt;</ph> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.</source>
          <target state="translated">フィールドがある場合<ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem&gt;</ph>レベルの可視性、呼び出すことができます、同じアセンブリ内のメンバーまたは派生クラスで任意のメンバーからからではないその他の種類。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The actual visibility of a field is limited by the visibility of its type.</source>
          <target state="translated">フィールドの実際の可視性は、その型の可視性によって制限されます。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property might be <ph id="ph2">`true`</ph> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>プロパティがあります<ph id="ph2">`true`</ph>フィールドが含んでいる型の外部で参照ではありませんし、プライベートの入れ子にされた型のフィールドである場合は、フィールドのです。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem?displayProperty=nameWithType&gt;</ph> if the visibility modifier is <ph id="ph2">`protected internal`</ph> in C# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic, <ph id="ph4">`protected public`</ph> in C++).</source>
          <target state="translated">フィールドの可視性がによって正確に説明されている<ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem?displayProperty=nameWithType&gt;</ph>可視性修飾子が場合<ph id="ph2">`protected internal`</ph>(C#) (<ph id="ph3">`Protected Friend`</ph> Visual basic で<ph id="ph4">`protected public`</ph>C++ で)。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">次のコード例は、さまざまなレベルの可視性を持つフィールドを定義しの値を表示、 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">Visual Basic および c# 言語でフィールドを定義できません<ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph>可視性; アクセス レベルは、C++ の例でのみが表示されます。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Gets a value indicating whether the field can only be set in the body of the constructor.</source>
          <target state="translated">フィールドをコンストラクターの本体だけでしか設定できないのかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field has the <ph id="ph2">&lt;see langword="InitOnly" /&gt;</ph> attribute set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">フィールドに <ph id="ph1">&lt;see langword="true" /&gt;</ph> 属性が設定されている場合は <ph id="ph2">&lt;see langword="InitOnly" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>If the returned value is <ph id="ph1">`true`</ph>, the field can only be initialized, and is read-only thereafter.</source>
          <target state="translated">返される値が場合<ph id="ph1">`true`</ph>、フィールドのみ初期化することができ、その後は読み取り専用です。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>To get the <ph id="ph1">`IsInitOnly`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">取得する、<ph id="ph1">`IsInitOnly`</ph>プロパティ、クラスをまず取得<ph id="ph2">`Type`</ph>です。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>、取得、<ph id="ph2">`FieldInfo`</ph>です。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsInitOnly`</ph> property.</source>
          <target state="translated"><ph id="ph1">`FieldInfo`</ph>、取得、<ph id="ph2">`IsInitOnly`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>To access a non-public field, combine <ph id="ph1">&lt;xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType&gt;</ph> with either or both of <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType&gt;</ph> in the <ph id="ph4">`GetField`</ph> method.</source>
          <target state="translated">パブリックでないフィールドにアクセスするには、結合<ph id="ph1">&lt;xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType&gt;</ph>の一方または両方で<ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType&gt;</ph>と<ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType&gt;</ph>で、<ph id="ph4">`GetField`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>The <ph id="ph1">`IsInitOnly`</ph> property is set when the <ph id="ph2">&lt;xref:System.Reflection.FieldAttributes.InitOnly?displayProperty=nameWithType&gt;</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsInitOnly`</ph>場合、プロパティが設定、<ph id="ph2">&lt;xref:System.Reflection.FieldAttributes.InitOnly?displayProperty=nameWithType&gt;</ph>属性を設定します。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>In the following example, two fields are created.</source>
          <target state="translated">次の例では、2 つのフィールドが作成されます。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>The second field is read-only, having no set accessor, and <ph id="ph1">`IsInitOnly`</ph> is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">2 番目のフィールドは読み取り専用、set アクセサーがないと<ph id="ph1">`IsInitOnly`</ph>に設定されている<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>This code produces the following output:</source>
          <target state="translated">このコードを実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Reflection.FieldInfo</source>
          <target state="translated">Reflection.FieldInfo</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Myfielda - A- modified, IsInitOnly = False</source>
          <target state="translated">Myfielda - A- modified, IsInitOnly = False</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Myfieldb - B readonly field, IsInitOnly = True</source>
          <target state="translated">Myfieldb - B 読み取り専用フィールドを対応 = True</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source>Gets a value indicating whether the value is written at compile time and cannot be changed.</source>
          <target state="translated">値がコンパイル時に書き込まれ、変更できないかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field has the <ph id="ph2">&lt;see langword="Literal" /&gt;</ph> attribute set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">フィールドに <ph id="ph1">&lt;see langword="true" /&gt;</ph> 属性が設定されている場合は <ph id="ph2">&lt;see langword="Literal" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source>The <ph id="ph1">`IsLiteral`</ph> property is set when the <ph id="ph2">`FieldAttributes.Literal`</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsLiteral`</ph>場合、プロパティが設定、<ph id="ph2">`FieldAttributes.Literal`</ph>属性を設定します。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source>If this attribute is set, the field cannot be changed and is constant.</source>
          <target state="translated">この属性が設定されている場合、フィールドでは変更できませんあり定数です。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>Gets a value indicating whether this field has the <ph id="ph1">&lt;see langword="NotSerialized" /&gt;</ph> attribute.</source>
          <target state="translated">このフィールドに、<ph id="ph1">&lt;see langword="NotSerialized" /&gt;</ph> 属性が設定されているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field has the <ph id="ph2">&lt;see langword="NotSerialized" /&gt;</ph> attribute set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">フィールドに <ph id="ph1">&lt;see langword="true" /&gt;</ph> 属性が設定されている場合は <ph id="ph2">&lt;see langword="NotSerialized" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>The <ph id="ph1">`IsNotSerialized`</ph> property returns <ph id="ph2">`true`</ph> when the field is marked with the <ph id="ph3">`FieldAttributes.NotSerialized`</ph> flag.</source>
          <target state="translated"><ph id="ph1">`IsNotSerialized`</ph>プロパティから返される<ph id="ph2">`true`</ph>でフィールドがマークされている場合、<ph id="ph3">`FieldAttributes.NotSerialized`</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>When this flag is set on a field, it indicates that the field does not have to be serialized when the type is remoted.</source>
          <target state="translated">このフラグがフィールドに設定されている場合、種類がリモート処理するときにシリアル化するフィールドがないことを示します。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>The following example gets the field information of the fields of MyClass, determines if the fields can be serialized, and displays the results.</source>
          <target state="translated">次の例では、MyClass のフィールドのフィールド情報を取得、かどうかをフィールド、シリアル化できる結果が表示されます。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsPinvokeImpl">
          <source>Gets a value indicating whether the corresponding <ph id="ph1">&lt;see langword="PinvokeImpl" /&gt;</ph> attribute is set in <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>.</source>
          <target state="translated">対応する <ph id="ph1">&lt;see langword="PinvokeImpl" /&gt;</ph> 属性が <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph> に設定されているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPinvokeImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="PinvokeImpl" /&gt;</ph> attribute is set in <ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph> に <ph id="ph1">&lt;see langword="true" /&gt;</ph> 属性が設定されている場合は <ph id="ph2">&lt;see langword="PinvokeImpl" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPinvokeImpl">
          <source>The following example creates a class and displays the name, field and <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A&gt;</ph> property value of the field.</source>
          <target state="translated">次の例のクラスを作成し、名前を表示フィールドおよび<ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A&gt;</ph>フィールドのプロパティの値。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>Gets a value indicating whether the field is private.</source>
          <target state="translated">フィールドがプライベートかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field is private; otherwise; <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">フィールドがプライベートの場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>Private fields are accessible only from member functions.</source>
          <target state="translated">プライベート フィールドでは、メンバー関数からのみアクセスできます。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>The <ph id="ph1">`IsPrivate`</ph> property is set when the <ph id="ph2">`FieldAttributes.Private`</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsPrivate`</ph>場合、プロパティが設定、<ph id="ph2">`FieldAttributes.Private`</ph>属性を設定します。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>To get the <ph id="ph1">`IsPrivate`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">取得する、<ph id="ph1">`IsPrivate`</ph>プロパティ、クラスをまず取得<ph id="ph2">`Type`</ph>です。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>、取得、<ph id="ph2">`FieldInfo`</ph>です。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsPrivate`</ph> property.</source>
          <target state="translated"><ph id="ph1">`FieldInfo`</ph>、取得、<ph id="ph2">`IsPrivate`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>To access a non-public field, set the <ph id="ph1">`BindingFlags`</ph> to <ph id="ph2">`NonPublic`</ph>, and either <ph id="ph3">`Static`</ph> or <ph id="ph4">`Instance`</ph> in the <ph id="ph5">`GetField`</ph> method.</source>
          <target state="translated">パブリックでないフィールドにアクセスするには、設定、<ph id="ph1">`BindingFlags`</ph>に<ph id="ph2">`NonPublic`</ph>、いずれかと<ph id="ph3">`Static`</ph>または<ph id="ph4">`Instance`</ph>で、<ph id="ph5">`GetField`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>The following example returns a value indicating whether or not the field of the class is private.</source>
          <target state="translated">次の例は、クラスのフィールドがプライベートであるかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>Gets a value indicating whether the field is public.</source>
          <target state="translated">フィールドがパブリックかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this field is public; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">フィールドがパブリックの場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>Public fields are accessible everywhere their corresponding classes are visible.</source>
          <target state="translated">パブリック フィールドにはアクセス可能なすべての場所で、対応するクラスが表示されます。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>The <ph id="ph1">`IsPublic`</ph> property is set when the <ph id="ph2">`FieldAttributes.Public`</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsPublic`</ph>場合、プロパティが設定、<ph id="ph2">`FieldAttributes.Public`</ph>属性を設定します。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>To get the <ph id="ph1">`IsPublic`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">取得する、<ph id="ph1">`IsPublic`</ph>プロパティ、クラスをまず取得<ph id="ph2">`Type`</ph>です。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>、取得、<ph id="ph2">`FieldInfo`</ph>です。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsPublic`</ph> property.</source>
          <target state="translated"><ph id="ph1">`FieldInfo`</ph>、取得、<ph id="ph2">`IsPublic`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>If the field is other than public, it is protected and cannot be readily accessed.</source>
          <target state="translated">保護されている場合は、このフィールドは、パブリック以外は、すぐにアクセスすることはできません。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>To access a nonpublic field, set the <ph id="ph1">`BindingFlags`</ph> to <ph id="ph2">`NonPublic`</ph>, specify either <ph id="ph3">`BindingFlags.Instance`</ph> or <ph id="ph4">`BindingFlags.Static`</ph>, and use this for the <ph id="ph5">`GetField`</ph> method.</source>
          <target state="translated">パブリックでないフィールドにアクセスするには、設定、<ph id="ph1">`BindingFlags`</ph>に<ph id="ph2">`NonPublic`</ph>、どちらかを指定<ph id="ph3">`BindingFlags.Instance`</ph>または<ph id="ph4">`BindingFlags.Static`</ph>、これを使用して、<ph id="ph5">`GetField`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>The following example returns a value indicating whether or not the field of the class is public or private.</source>
          <target state="translated">次の例は、クラスのフィールドがパブリックかプライベートかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.</source>
          <target state="translated">現在のフィールドが、現在の信頼レベルでセキュリティ クリティカルまたはセキュリティ セーフ クリティカルであるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current field is security-critical or security-safe-critical at the current trust level; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is transparent.</source>
          <target state="translated">現在のフィールドが、現在の信頼レベルでセキュリティ クリティカルまたはセキュリティ セーフ クリティカルである場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。透過的である場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>、および<ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph>プロパティが共通言語ランタイム (CLR) によって決定される、現在の信頼レベルにあるフィールドの透明度を報告します。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">これらのプロパティの組み合わせは、次の表に示します。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Security level</source>
          <target state="translated">セキュリティ レベル</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Critical</source>
          <target state="translated">重大</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Safe critical</source>
          <target state="translated">セーフ クリティカル</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">これらのプロパティを使用して、アセンブリとその型およびメンバーのセキュリティの注釈を調べることを確認したり、現在の信頼レベルをランタイムの規則を複製するよりもはるかに簡単です。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</source>
          <target state="translated">部分的に信頼されたアセンブリでは、このプロパティの値は、アセンブリの現在の信頼レベルによって異なります。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">アセンブリがドメインに読み込まれて、部分的に信頼されたアプリケーション (たとえば、サンド ボックス アプリケーション ドメイン) の場合、ランタイムはアセンブリのセキュリティの注釈を無視します。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The assembly and all its types are treated as transparent.</source>
          <target state="translated">アセンブリとそのすべての型は透明として扱われます。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</source>
          <target state="translated">ランタイムは、そのアセンブリが、完全に信頼されたアプリケーション ドメイン (たとえば、デスクトップ アプリケーションの既定のアプリケーション ドメイン) に読み込まれている場合にのみ、部分信頼アセンブリのセキュリティの注釈に注意を支払います。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</source>
          <target state="translated">これに対し、信頼されたアセンブリ (つまり、厳密な名前付きアセンブリをグローバル アセンブリ キャッシュにインストールされている) は常にアプリケーション ドメインの信頼レベルに関係なく、完全信頼で読み込まれたため、現在の信頼レベルは完全に信頼された常にします。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>You can determine the current trust levels of assemblies and application domains by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">使用して、アセンブリとアプリケーション ドメインの現在の信頼レベルを指定できます、<ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>For more information about reflection and transparency, see <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</source>
          <target state="translated">リフレクションと透過性の詳細については、次を参照してください。<bpt id="p1">[</bpt>リフレクションに関するセキュリティの考慮事項<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">透過性の詳細については、次を参照してください。<bpt id="p1">[</bpt>セキュリティの変更点<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Gets a value that indicates whether the current field is security-safe-critical at the current trust level.</source>
          <target state="translated">現在のフィールドが、現在の信頼レベルでセキュリティ セーフ クリティカルであるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current field is security-safe-critical at the current trust level; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is security-critical or transparent.</source>
          <target state="translated">現在のフィールドが、現在の信頼レベルでセキュリティ セーフ クリティカルである場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。セキュリティ クリティカルまたは透過的である場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>、および<ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph>プロパティが共通言語ランタイム (CLR) によって決定される、現在の信頼レベルにあるフィールドの透明度を報告します。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">これらのプロパティの組み合わせは、次の表に示します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Security level</source>
          <target state="translated">セキュリティ レベル</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Critical</source>
          <target state="translated">重大</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Safe critical</source>
          <target state="translated">セーフ クリティカル</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">これらのプロパティを使用して、アセンブリとその型およびメンバーのセキュリティの注釈を調べることを確認したり、現在の信頼レベルをランタイムの規則を複製するよりもはるかに簡単です。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</source>
          <target state="translated">部分的に信頼されたアセンブリでは、このプロパティの値は、アセンブリの現在の信頼レベルによって異なります。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">アセンブリがドメインに読み込まれて、部分的に信頼されたアプリケーション (たとえば、サンド ボックス アプリケーション ドメイン) の場合、ランタイムはアセンブリのセキュリティの注釈を無視します。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The assembly and all its types are treated as transparent.</source>
          <target state="translated">アセンブリとそのすべての型は透明として扱われます。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</source>
          <target state="translated">ランタイムは、そのアセンブリが、完全に信頼されたアプリケーション ドメイン (たとえば、デスクトップ アプリケーションの既定のアプリケーション ドメイン) に読み込まれている場合にのみ、部分信頼アセンブリのセキュリティの注釈に注意を支払います。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</source>
          <target state="translated">これに対し、信頼されたアセンブリ (つまり、厳密な名前付きアセンブリをグローバル アセンブリ キャッシュにインストールされている) は常にアプリケーション ドメインの信頼レベルに関係なく、完全信頼で読み込まれたため、現在の信頼レベルは完全に信頼された常にします。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>You can determine the current trust levels of assemblies and application domains by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">使用して、アセンブリとアプリケーション ドメインの現在の信頼レベルを指定できます、<ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>For more information about reflection and transparency, see <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</source>
          <target state="translated">リフレクションと透過性の詳細については、次を参照してください。<bpt id="p1">[</bpt>リフレクションに関するセキュリティの考慮事項<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">透過性の詳細については、次を参照してください。<bpt id="p1">[</bpt>セキュリティの変更点<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Gets a value that indicates whether the current field is transparent at the current trust level.</source>
          <target state="translated">現在のフィールドが、現在の信頼レベルで透過的であるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field is security-transparent at the current trust level; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のフィールドが、現在の信頼レベルで透過的セキュリティである場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>、および<ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph>プロパティが共通言語ランタイム (CLR) によって決定される、現在の信頼レベルにあるフィールドの透明度を報告します。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">これらのプロパティの組み合わせは、次の表に示します。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Security level</source>
          <target state="translated">セキュリティ レベル</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Critical</source>
          <target state="translated">重大</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Safe critical</source>
          <target state="translated">セーフ クリティカル</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">これらのプロパティを使用して、アセンブリとその型およびメンバーのセキュリティの注釈を調べることを確認したり、現在の信頼レベルをランタイムの規則を複製するよりもはるかに簡単です。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</source>
          <target state="translated">部分的に信頼されたアセンブリでは、このプロパティの値は、アセンブリの現在の信頼レベルによって異なります。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">アセンブリがドメインに読み込まれて、部分的に信頼されたアプリケーション (たとえば、サンド ボックス アプリケーション ドメイン) の場合、ランタイムはアセンブリのセキュリティの注釈を無視します。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The assembly and all its types are treated as transparent.</source>
          <target state="translated">アセンブリとそのすべての型は透明として扱われます。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</source>
          <target state="translated">ランタイムは、そのアセンブリが、完全に信頼されたアプリケーション ドメイン (たとえば、デスクトップ アプリケーションの既定のアプリケーション ドメイン) に読み込まれている場合にのみ、部分信頼アセンブリのセキュリティの注釈に注意を支払います。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</source>
          <target state="translated">これに対し、信頼されたアセンブリ (つまり、厳密な名前付きアセンブリをグローバル アセンブリ キャッシュにインストールされている) は常にアプリケーション ドメインの信頼レベルに関係なく、完全信頼で読み込まれたため、現在の信頼レベルは完全に信頼された常にします。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>You can determine the current trust levels of assemblies and application domains by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">使用して、アセンブリとアプリケーション ドメインの現在の信頼レベルを指定できます、<ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>For more information about reflection and transparency, see <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</source>
          <target state="translated">リフレクションと透過性の詳細については、次を参照してください。<bpt id="p1">[</bpt>リフレクションに関するセキュリティの考慮事項<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">透過性の詳細については、次を参照してください。<bpt id="p1">[</bpt>セキュリティの変更点<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source>Gets a value indicating whether the corresponding <ph id="ph1">&lt;see langword="SpecialName" /&gt;</ph> attribute is set in the <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph> enumerator.</source>
          <target state="translated">対応する <ph id="ph1">&lt;see langword="SpecialName" /&gt;</ph> 属性が <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph> 列挙子に設定されているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="SpecialName" /&gt;</ph> attribute is set in <ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph> に <ph id="ph1">&lt;see langword="true" /&gt;</ph> 属性が設定されている場合は <ph id="ph2">&lt;see langword="SpecialName" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source>Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</source>
          <target state="translated">始まるか、アンダー スコア文字 (_)、プロパティ アクセサー、および演算子のオーバー ロードが含まれている名前は、一部のコンパイラで特別な処理が必要となる名前の例を示します。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source>The following example returns a value indicating whether or not the fields in the class contain a SpecialName attribute.</source>
          <target state="translated">次の例は、クラス内のフィールドが SpecialName では属性を含めるかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Gets a value indicating whether the field is static.</source>
          <target state="translated">フィールドが静的かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this field is static; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">フィールドが静的な場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>When a field is static, one copy of the field is shared by all instances of the type.</source>
          <target state="translated">フィールドが静的な場合は、フィールドの 1 つのコピーは、型のすべてのインスタンスによって共有されます。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>The <ph id="ph1">`IsStatic`</ph> property is set when the <ph id="ph2">`FieldAttributes.Static`</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsStatic`</ph>場合、プロパティが設定、<ph id="ph2">`FieldAttributes.Static`</ph>属性を設定します。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>To get the <ph id="ph1">`IsStatic`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">取得する、<ph id="ph1">`IsStatic`</ph>プロパティ、クラスをまず取得<ph id="ph2">`Type`</ph>です。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>、取得、<ph id="ph2">`FieldInfo`</ph>です。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsStatic`</ph> property.</source>
          <target state="translated"><ph id="ph1">`FieldInfo`</ph>、取得、<ph id="ph2">`IsStatic`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>To access a non-public field, set the <ph id="ph1">`BindingFlags`</ph> to <ph id="ph2">`NonPublic`</ph> in the <ph id="ph3">`GetField`</ph> method and set the accessibility to <ph id="ph4">`Instance`</ph> or <ph id="ph5">`Static`</ph>.</source>
          <target state="translated">パブリックでないフィールドにアクセスするには、設定、<ph id="ph1">`BindingFlags`</ph>に<ph id="ph2">`NonPublic`</ph>で、<ph id="ph3">`GetField`</ph>メソッドに、ユーザー補助の設定と<ph id="ph4">`Instance`</ph>または<ph id="ph5">`Static`</ph>です。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>The following example determines whether the specified field is static and displays the result.</source>
          <target state="translated">次の例では、指定したフィールドは静的であり、その結果を表示するかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>This code produces the following output:</source>
          <target state="translated">このコードを実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Reflection.FieldInfo</source>
          <target state="translated">Reflection.FieldInfo</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Myfielda - A private field; IsStatic - False</source>
          <target state="translated">Myfielda - プライベート フィールドです。IsStatic - False</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Myfieldb - B static field; IsStatic - True</source>
          <target state="translated">Myfieldb - B の静的フィールドです。IsStatic - True</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a field.</source>
          <target state="translated">このメンバーがフィールドであることを示す <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 値を取得します。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a field.</source>
          <target state="translated">このメンバーがフィールドであることを示す <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</source>
          <target state="translated">このプロパティのオーバーライド<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Field?displayProperty=nameWithType&gt;</ph> only when a given member is a field.</source>
          <target state="translated">セットを確認すると、そのため、<ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph>オブジェクト-によって返される配列など、 <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> —、<ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>プロパティから返される<ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Field?displayProperty=nameWithType&gt;</ph>フィールドが場合にのみ特定のメンバーです。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>The following example determines whether the specified member is a field and displays the result.</source>
          <target state="translated">次の例では、指定されたメンバーはフィールドであり、その結果を表示するかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>This code produces the following output:</source>
          <target state="translated">このコードを実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Reflection.FieldInfo</source>
          <target state="translated">Reflection.FieldInfo</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Myfield.field - a private field; MemberType is a Field</source>
          <target state="translated">Myfield.field - プライベート フィールドです。MemberType はフィールド</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The first object to compare.</source>
          <target state="translated">比較する最初のオブジェクト。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The second object to compare.</source>
          <target state="translated">比較する 2 番目のオブジェクト。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">2 つの <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> オブジェクトが等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が <ph id="ph2">&lt;paramref name="left" /&gt;</ph> に等しい場合は <ph id="ph3">&lt;paramref name="right" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The first object to compare.</source>
          <target state="translated">比較する最初のオブジェクト。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The second object to compare.</source>
          <target state="translated">比較する 2 番目のオブジェクト。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">2 つの <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> オブジェクトが等しくないかどうかを示します。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が <ph id="ph2">&lt;paramref name="left" /&gt;</ph> と等しくない場合は <ph id="ph3">&lt;paramref name="right" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldInfo">
          <source>Sets the value of the field for the given object to the given value.</source>
          <target state="translated">指定したオブジェクトのフィールドに、指定した値を設定します。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The object whose field value will be set.</source>
          <target state="translated">フィールド値が設定されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The value to assign to the field.</source>
          <target state="translated">フィールドに代入する値。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Sets the value of the field supported by the given object.</source>
          <target state="translated">指定したオブジェクトでサポートされているフィールドの値を設定します。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>This method will assign <ph id="ph1">`value`</ph> to the field reflected by this instance on object <ph id="ph2">`obj`</ph>.</source>
          <target state="translated">このメソッドは代入<ph id="ph1">`value`</ph>オブジェクトのこのインスタンスによって反映されるフィールドに<ph id="ph2">`obj`</ph>です。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>If the field is static, <ph id="ph1">`obj`</ph> will be ignored.</source>
          <target state="translated">フィールドが静的である場合<ph id="ph1">`obj`</ph>は無視されます。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>For non-static fields, <ph id="ph1">`obj`</ph> should be an instance of a class that inherits or declares the field.</source>
          <target state="translated">非静的フィールドの<ph id="ph1">`obj`</ph>フィールドを宣言または継承するクラスのインスタンスである必要があります。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The new value is passed as an <ph id="ph1">`Object`</ph>.</source>
          <target state="translated">として、新しい値が渡される、<ph id="ph1">`Object`</ph>です。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>For example, if the field's type is Boolean, an instance of <ph id="ph1">`Object`</ph> with the appropriate Boolean value is passed.</source>
          <target state="translated">たとえば、フィールドの型がブール値、インスタンスの<ph id="ph1">`Object`</ph>値が渡されると、適切なブール値。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Before setting the value, <ph id="ph1">`SetValue`</ph> checks to see if the user has access permission.</source>
          <target state="translated">値を設定する前に<ph id="ph1">`SetValue`</ph>ユーザーがアクセス許可を持っているかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>This final method is a convenience method for calling the following <ph id="ph1">`SetValue`</ph> method.</source>
          <target state="translated">この最終的なメソッドは、次を呼び出すための便利なメソッドでは<ph id="ph1">`SetValue`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</source>
          <target state="translated">完全に信頼されたコードでは、アクセスし、private のコンス トラクター、メソッド、フィールド、およびリフレクションを使用してプロパティを起動するために必要なアクセス許可を持っています。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">以降で、 <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>、このメソッドは、呼び出し元が許可されている場合は、非パブリック メンバーをアクセスに使用できます<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>で、<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph>フラグし、非パブリック メンバーの許可セットが、呼び出し元に制限されている場合は、セット、またはそのサブセットを付与します。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(を参照してください<bpt id="p1">[</bpt>リフレクションに関するセキュリティの考慮事項<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>)。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">この機能を使用するには、アプリケーションで <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 以降を対象とする必要があります。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The following example sets the value of a field, gets and displays the value, modifies the field, and displays the result.</source>
          <target state="translated">次の例フィールドの値を設定を取得し、値が表示されます、フィールドを変更および、結果が表示されます。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows ストア アプリ用 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> または<bpt id="p2">[</bpt>ポータブル クラス ライブラリ<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>では、基本クラスの例外である <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph> を代わりにキャッチします。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The caller does not have permission to access this field.</source>
          <target state="translated">呼び出し元には、このフィールドに対するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows ストア アプリ用 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> または<bpt id="p2">[</bpt>ポータブル クラス ライブラリ<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>では、<ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> を代わりにキャッチします。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the field is an instance field.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> パラメーターは <ph id="ph2">&lt;see langword="null" /&gt;</ph> で、そのフィールドはインスタンス フィールドです。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The field does not exist on the object.</source>
          <target state="translated">このフィールドはオブジェクト上に存在しません。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter cannot be converted and stored in the field.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> パラメーターを変換してフィールドに格納することはできません。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>for updating init-only fields.</source>
          <target state="translated">初期化専用のフィールドを更新します。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The object whose field value will be set.</source>
          <target state="translated">フィールド値が設定されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The value to assign to the field.</source>
          <target state="translated">フィールドに代入する値。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>A field of <ph id="ph1">&lt;see langword="Binder" /&gt;</ph> that specifies the type of binding that is desired (for example, <ph id="ph2">&lt;see langword="Binder.CreateInstance" /&gt;</ph> or <ph id="ph3">&lt;see langword="Binder.ExactBinding" /&gt;</ph>).</source>
          <target state="translated">必要なバインディングの種類 (<ph id="ph2">&lt;see langword="Binder.CreateInstance" /&gt;</ph> や <ph id="ph3">&lt;see langword="Binder.ExactBinding" /&gt;</ph> など) を指定する <ph id="ph1">&lt;see langword="Binder" /&gt;</ph> のフィールド。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection.</source>
          <target state="translated">バインディング、引数型の強制型変換、リフレクションを通じたメンバーの呼び出しを有効にする一連のプロパティ。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, then <ph id="ph2">&lt;see langword="Binder.DefaultBinding" /&gt;</ph> is used.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>バインダー<ept id="p1">&lt;/c&gt;</ept>が <ph id="ph1">&lt;see langword="null" /&gt;</ph> の場合は、<ph id="ph2">&lt;see langword="Binder.DefaultBinding" /&gt;</ph> が使用されます。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The software preferences of a particular culture.</source>
          <target state="translated">特定のカルチャに関するソフトウェア上の設定。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>When overridden in a derived class, sets the value of the field supported by the given object.</source>
          <target state="translated">派生クラスでオーバーライドされた場合に、指定したオブジェクトでサポートされているフィールドの値を設定します。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>This method will assign <ph id="ph1">`value`</ph> to the field reflected by this instance on <ph id="ph2">`obj`</ph>.</source>
          <target state="translated">このメソッドは代入<ph id="ph1">`value`</ph>このインスタンスによって反映されるフィールドに<ph id="ph2">`obj`</ph>です。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>If the field is static, <ph id="ph1">`obj`</ph> will be ignored.</source>
          <target state="translated">フィールドが静的である場合<ph id="ph1">`obj`</ph>は無視されます。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>For non-static fields, <ph id="ph1">`obj`</ph> should be an instance of a class that inherits or declares the field.</source>
          <target state="translated">非静的フィールドの<ph id="ph1">`obj`</ph>フィールドを宣言または継承するクラスのインスタンスである必要があります。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The new value is passed as an <ph id="ph1">`Object`</ph>.</source>
          <target state="translated">として、新しい値が渡される、<ph id="ph1">`Object`</ph>です。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>For example, if the field's type is <ph id="ph1">`Boolean`</ph>, an instance of <ph id="ph2">`Object`</ph> with the appropriate Boolean value is passed.</source>
          <target state="translated">たとえば、フィールドの型が<ph id="ph1">`Boolean`</ph>のインスタンス<ph id="ph2">`Object`</ph>値が渡されると、適切なブール値。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Before setting the value, <ph id="ph1">`SetValue`</ph> checks to see if the user has access permission.</source>
          <target state="translated">値を設定する前に<ph id="ph1">`SetValue`</ph>ユーザーがアクセス許可を持っているかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</source>
          <target state="translated">完全に信頼されたコードでは、アクセスし、private のコンス トラクター、メソッド、フィールド、およびリフレクションを使用してプロパティを起動するために必要なアクセス許可を持っています。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">以降で、 <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>、このメソッドは、呼び出し元が許可されている場合は、非パブリック メンバーをアクセスに使用できます<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>で、<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph>フラグし、非パブリック メンバーの許可セットが、呼び出し元に制限されている場合は、セット、またはそのサブセットを付与します。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(を参照してください<bpt id="p1">[</bpt>リフレクションに関するセキュリティの考慮事項<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>)。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">この機能を使用するには、アプリケーションで <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 以降を対象とする必要があります。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The caller does not have permission to access this field.</source>
          <target state="translated">呼び出し元には、このフィールドに対するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the field is an instance field.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> パラメーターは <ph id="ph2">&lt;see langword="null" /&gt;</ph> で、そのフィールドはインスタンス フィールドです。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The field does not exist on the object.</source>
          <target state="translated">このフィールドはオブジェクト上に存在しません。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter cannot be converted and stored in the field.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> パラメーターを変換してフィールドに格納することはできません。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>for updating init-only fields.</source>
          <target state="translated">初期化専用のフィールドを更新します。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location.</source>
          <target state="translated">場所へのマネージ ポインターをカプセル化する <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph> 構造体と、その場所に格納できる型のランタイム表現。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>The value to assign to the field.</source>
          <target state="translated">フィールドに代入する値。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>Sets the value of the field supported by the given object.</source>
          <target state="translated">指定したオブジェクトでサポートされているフィールドの値を設定します。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">以降で、 <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>、このメソッドは、呼び出し元が許可されている場合は、非パブリック メンバーをアクセスに使用できます<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>で、<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph>フラグし、非パブリック メンバーの許可セットが、呼び出し元に制限されている場合は、セット、またはそのサブセットを付与します。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(を参照してください<bpt id="p1">[</bpt>リフレクションに関するセキュリティの考慮事項<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>)。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">この機能を使用するには、アプリケーションで <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 以降を対象とする必要があります。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</source>
          <target state="translated">呼び出し元は、共通言語仕様 (CLS) の代替が必要ですが、代わりにこのメソッドを呼び出しました。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">将来使用するために予約されています。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL にする必要があります。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">マッピング対象として渡される名前の配列。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">マッピングされる名前のカウント。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">名前を解釈するロケール コンテキスト。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">名前に対応する ID を受け取る、呼び出し元が割り当てた配列。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">一連の名前を対応する一連のディスパッチ識別子に割り当てます。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">詳細については<ph id="ph1">`IDispatch::GetIDsOfNames`</ph>、MSDN ライブラリを参照してください。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 型を表す <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 型を表す <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">返される型情報。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">型情報のロケール ID。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">要求された型情報オブジェクトへのポインターを取得します。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">オブジェクトの型情報を取得します。この型情報を使用して、インターフェイスの型情報を取得できます。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">詳細については<ph id="ph1">`IDispatch::GetTypeInfo`</ph>、MSDN ライブラリを参照してください。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">オブジェクトにより提供される型タイプ情報インターフェイスの数を受け取る場所を指定します。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">オブジェクトが提供する型情報インターフェイスの数 (0 または 1) を取得します。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">詳細については<ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>、MSDN ライブラリを参照してください。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">メンバーを識別します。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">将来使用するために予約されています。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL にする必要があります。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">引数を解釈する対象のロケール コンテキスト。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">呼び出しのコンテキストを記述するフラグ。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">引数の配列、名前付き引数の DISPID の配列、配列内の要素数のカウントを格納している構造体へのポインター。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">結果が格納される場所へのポインター。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">例外情報を格納する構造体へのポインター。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">エラーが存在する最初の引数のインデックス。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">オブジェクトによって公開されたプロパティおよびメソッドへのアクセスを提供します。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">詳細については<ph id="ph1">`IDispatch::Invoke`</ph>、MSDN ライブラリを参照してください。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>