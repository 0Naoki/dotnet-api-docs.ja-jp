<Type Name="FieldInfo" FullName="System.Reflection.FieldInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eaf3da8149c7beea481d56464ce8b739bcbe0488" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class FieldInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._FieldInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit FieldInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._FieldInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.FieldInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FieldInfo&#xA;Inherits MemberInfo&#xA;Implements _FieldInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class FieldInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_FieldInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._FieldInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._FieldInfo))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="eb145-101">フィールドの属性を取得し、フィールドのメタデータにアクセスできるようにします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="eb145-101">Discovers the attributes of a field and provides access to field metadata.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-102">フィールドの情報は、メタデータから取得されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-102">The field information is obtained from metadata.</span></span> <span data-ttu-id="eb145-103"><xref:System.Reflection.FieldInfo>クラスには、パブリック コンス トラクターがありません。</span><span class="sxs-lookup"><span data-stu-id="eb145-103">The <xref:System.Reflection.FieldInfo> class does not have a public constructor.</span></span> <span data-ttu-id="eb145-104"><xref:System.Reflection.FieldInfo> 呼び出して、オブジェクトを取得、<xref:System.Type.GetFields%2A>または<xref:System.Type.GetField%2A>のメソッド、`Type`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="eb145-104"><xref:System.Reflection.FieldInfo> objects are obtained by calling either the <xref:System.Type.GetFields%2A> or <xref:System.Type.GetField%2A> method of a `Type` object.</span></span>  
  
 <span data-ttu-id="eb145-105">フィールドは、クラスで定義された変数です。</span><span class="sxs-lookup"><span data-stu-id="eb145-105">Fields are variables defined in the class.</span></span> <span data-ttu-id="eb145-106"><xref:System.Reflection.FieldInfo> クラス内のフィールドのメタデータへのアクセスと、フィールドの動的なセットと get 機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="eb145-106"><xref:System.Reflection.FieldInfo> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field.</span></span> <span data-ttu-id="eb145-107">クラスは invoke までメモリに読み込まれていないか、オブジェクトに対して get が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-107">The class is not loaded into memory until invoke or get is called on the object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-108">次の例では、<xref:System.Type.GetFields%2A?displayProperty=nameWithType>からのフィールドに関連する情報を取得するメソッド、<xref:System.Reflection.FieldInfo>クラス、および、フィールドの属性値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-108">The following example uses the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get the field-related information from the <xref:System.Reflection.FieldInfo> class, and then displays field attributes.</span></span>  
  
 [!code-cpp[FieldInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo/CPP/fieldinfo.cpp#1)]
 [!code-csharp[FieldInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo/CS/fieldinfo.cs#1)]
 [!code-vb[FieldInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo/VB/fieldinfo.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="eb145-109">継承時の完全な信頼。</span>
      <span class="sxs-lookup">
        <span data-stu-id="eb145-109">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="eb145-110">部分信頼コードでこのクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="eb145-110">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <threadsafe>
      <span data-ttu-id="eb145-111">この型はスレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="eb145-111">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="eb145-112">
          <see cref="T:System.Reflection.FieldInfo" /> から継承する場合は、<see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /> メンバーと <see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" /> メンバーをオーバーライドする必要があります。</span>
        <span class="sxs-lookup">
          <span data-stu-id="eb145-112">When you inherit from <see cref="T:System.Reflection.FieldInfo" />, you must override the following members: <see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /> and <see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" />.</span>
        </span>
      </para>
    </block>
    <altmember cref="T:System.Type" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FieldInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; FieldInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eb145-113">
            <see langword="FieldInfo" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-113">Initializes a new instance of the <see langword="FieldInfo" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="eb145-114">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-114">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="eb145-115">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-115">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.FieldAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As FieldAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::FieldAttributes Attributes { System::Reflection::FieldAttributes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-116">このフィールドに関連付けられている属性を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-116">Gets the attributes associated with this field.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-117">このフィールドの <see langword="FieldAttributes" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-117">The <see langword="FieldAttributes" /> for this field.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-118">すべてのメンバーには、特定の種類のメンバーに関連して定義されている属性のセットがあります。</span><span class="sxs-lookup"><span data-stu-id="eb145-118">All members have a set of attributes, which are defined in relation to the specific type of member.</span></span> <span data-ttu-id="eb145-119">`FieldAttributes` このフィールドは、プライベート フィールド、静的フィールドとであるかどうかをユーザーに通知します。</span><span class="sxs-lookup"><span data-stu-id="eb145-119">`FieldAttributes` informs the user whether this field is the private field, a static field, and so on.</span></span>  
  
 <span data-ttu-id="eb145-120">取得する、`Attributes`プロパティ、クラスをまず取得`Type`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-120">To get the `Attributes` property, first get the class `Type`.</span></span> <span data-ttu-id="eb145-121">`Type`、取得、`FieldInfo`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-121">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="eb145-122">`FieldInfo`、取得、`Attributes`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-122">From the `FieldInfo`, get the `Attributes`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-123">次のコード例では、次の 3 つのフィールドを作成し、そのフィールドの属性を表示します。</span><span class="sxs-lookup"><span data-stu-id="eb145-123">The following code example builds three fields and displays their field attributes.</span></span> <span data-ttu-id="eb145-124">A`FieldAttributes`値が両方ともなど、複数の属性を含めることができます`Public`と`Literal`の 3 番目のフィールドに示すようにします。</span><span class="sxs-lookup"><span data-stu-id="eb145-124">A `FieldAttributes` value can contain more than one attribute, such as both `Public` and `Literal`, as shown in the third field.</span></span>  
  
 [!code-cpp[Classic FieldAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic FieldAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="eb145-125">対象のインスタンスと比較する対象のオブジェクト、または <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-125">An object to compare with this instance, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb145-126">このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-126">Returns a value that indicates whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb145-127">
            <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-127">
              <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldHandle">
      <MemberSignature Language="C#" Value="public abstract RuntimeFieldHandle FieldHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeFieldHandle FieldHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.FieldHandle" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FieldHandle As RuntimeFieldHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property RuntimeFieldHandle FieldHandle { RuntimeFieldHandle get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.FieldHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeFieldHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-128">フィールドの内部メタデータ形式を識別するハンドルである <see langword="RuntimeFieldHandle" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-128">Gets a <see langword="RuntimeFieldHandle" />, which is a handle to the internal metadata representation of a field.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-129">フィールドの内部メタデータ形式を識別するハンドル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-129">A handle to the internal metadata representation of a field.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-130">ハンドルは、取得された appdomain 内でのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="eb145-130">The handles are valid only in the appdomain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-131">次の例では、MyClass.MyField フィールド情報を取得し、フィールド ハンドルに関連付けられているフィールドを表示します。</span><span class="sxs-lookup"><span data-stu-id="eb145-131">The following example retrieves MyClass.MyField field information and displays the field associated with the field handle.</span></span>  
  
 [!code-cpp[FieldInfo_FieldHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_FieldHandle/CPP/fieldinfo_fieldhandle.cpp#1)]
 [!code-csharp[FieldInfo_FieldHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_FieldHandle/CS/fieldinfo_fieldhandle.cs#1)]
 [!code-vb[FieldInfo_FieldHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_FieldHandle/VB/fieldinfo_fieldhandle.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldType">
      <MemberSignature Language="C#" Value="public abstract Type FieldType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type FieldType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.FieldType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FieldType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ FieldType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.FieldType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-132">このフィールド オブジェクトの型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-132">Gets the type of this field object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-133">このフィールド オブジェクトの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-133">The type of this field object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-134">型は、いくつかのプリミティブ データ型など`String`、 `Boolean`、または`GUID`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-134">The type is some primitive data type, such as `String`, `Boolean`, or `GUID`.</span></span>  
  
 <span data-ttu-id="eb145-135">取得する、`FieldType`プロパティ、クラスをまず取得`Type`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-135">To get the `FieldType` property, first get the class `Type`.</span></span> <span data-ttu-id="eb145-136">`Type`、取得、`FieldInfo`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-136">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="eb145-137">`FieldInfo`、取得、`FieldType`値。</span><span class="sxs-lookup"><span data-stu-id="eb145-137">From the `FieldInfo`, get the `FieldType` value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-138">次の例は、フィールドを作成、その型を取得し、 <xref:System.Reflection.FieldInfo>、し、表示、<xref:System.Reflection.FieldInfo.FieldType%2A>です。</span><span class="sxs-lookup"><span data-stu-id="eb145-138">The following example creates a field, gets its type and <xref:System.Reflection.FieldInfo>, and displays its <xref:System.Reflection.FieldInfo.FieldType%2A>.</span></span>  
  
 [!code-cpp[Classic FieldInfo.FieldType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.FieldType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.FieldType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFieldFromHandle">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-139">ハンドルが表すフィールドの <see cref="T:System.Reflection.FieldInfo" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-139">Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by a handle.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFieldFromHandle">
      <MemberSignature Language="C#" Value="public static System.Reflection.FieldInfo GetFieldFromHandle (RuntimeFieldHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.FieldInfo GetFieldFromHandle(valuetype System.RuntimeFieldHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFieldFromHandle (handle As RuntimeFieldHandle) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::FieldInfo ^ GetFieldFromHandle(RuntimeFieldHandle handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeFieldHandle" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="eb145-140">フィールドの内部メタデータ形式を識別するハンドルを格納している <see cref="T:System.RuntimeFieldHandle" /> 構造体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-140">A <see cref="T:System.RuntimeFieldHandle" /> structure that contains the handle to the internal metadata representation of a field.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb145-141">指定したハンドルが表すフィールドの <see cref="T:System.Reflection.FieldInfo" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-141">Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by the specified handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb145-142">
            <paramref name="handle" /> によって指定されたフィールドを表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-142">A <see cref="T:System.Reflection.FieldInfo" /> object representing the field specified by <paramref name="handle" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-143">ハンドルが取得されたアプリケーション ドメイン内でのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="eb145-143">Handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-144">次のコード例では、<xref:System.Type.GetFields%2A?displayProperty=nameWithType>取得するメソッド<xref:System.Reflection.FieldInfo>、型のフィールドについてのオブジェクトを取得、<xref:System.RuntimeFieldHandle>構造体の各フィールド、および、取得、 <xref:System.Reflection.FieldInfo> のこのオーバーロードを使用してハンドルからオブジェクト<xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="eb145-144">The following code example uses the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get <xref:System.Reflection.FieldInfo> objects for the fields of a type, gets a <xref:System.RuntimeFieldHandle> structure for each field, and then retrieves the <xref:System.Reflection.FieldInfo> objects from the handles using this overload of the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A> method.</span></span>  
  
 [!code-cpp[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/CPP/fieldinfo_getfieldfromhandle.cpp#1)]
 [!code-csharp[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/CS/fieldinfo_getfieldfromhandle.cs#1)]
 [!code-vb[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/VB/fieldinfo_getfieldfromhandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eb145-145">
            <paramref name="handle" /> が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-145">
              <paramref name="handle" /> is invalid.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="eb145-146">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-146">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="eb145-147">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-147">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetFieldFromHandle">
      <MemberSignature Language="C#" Value="public static System.Reflection.FieldInfo GetFieldFromHandle (RuntimeFieldHandle handle, RuntimeTypeHandle declaringType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.FieldInfo GetFieldFromHandle(valuetype System.RuntimeFieldHandle handle, valuetype System.RuntimeTypeHandle declaringType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFieldFromHandle (handle As RuntimeFieldHandle, declaringType As RuntimeTypeHandle) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::FieldInfo ^ GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeFieldHandle" />
        <Parameter Name="declaringType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="eb145-148">フィールドの内部メタデータ形式を識別するハンドルを格納している <see cref="T:System.RuntimeFieldHandle" /> 構造体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-148">A <see cref="T:System.RuntimeFieldHandle" /> structure that contains the handle to the internal metadata representation of a field.</span>
          </span>
        </param>
        <param name="declaringType">
          <span data-ttu-id="eb145-149">フィールドを定義するジェネリック型を識別するハンドルを格納している <see cref="T:System.RuntimeTypeHandle" /> 構造体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-149">A <see cref="T:System.RuntimeTypeHandle" /> structure that contains the handle to the generic type that defines the field.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb145-150">指定したジェネリック型に応じた、指定したハンドルが表すフィールドの <see cref="T:System.Reflection.FieldInfo" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-150">Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by the specified handle, for the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb145-151">
            <paramref name="handle" /> によって指定されたジェネリック型で、<paramref name="declaringType" /> によって指定されたフィールドを表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-151">A <see cref="T:System.Reflection.FieldInfo" /> object representing the field specified by <paramref name="handle" />, in the generic type specified by <paramref name="declaringType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-152">ハンドルが取得されたアプリケーション ドメイン内でのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="eb145-152">Handles are valid only in the application domain in which they were obtained.</span></span>  
  
 <span data-ttu-id="eb145-153">推奨されている`declaringType`の構築されたランタイム型ハンドルの種類は常に`handle`に属しています。</span><span class="sxs-lookup"><span data-stu-id="eb145-153">The recommended practice is that `declaringType` should always be the runtime type handle of the constructed type that `handle` belongs to.</span></span> <span data-ttu-id="eb145-154">つまり場合、`handle`に属しているフィールドのランタイム フィールド ハンドルは、 `MyType<int>` (`MyType(Of Integer)` Visual Basic で)、`declaringType`のランタイム型ハンドル`MyType<int>`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-154">That is, if `handle` is a runtime field handle for a field that belongs to `MyType<int>` (`MyType(Of Integer)` in Visual Basic), `declaringType` is the runtime type handle for `MyType<int>`.</span></span> <span data-ttu-id="eb145-155">ランタイム フィールド ハンドルが、ジェネリック型定義でフィールドを表す場合は、ジェネリック型定義のランタイム型のハンドルを使用しません。</span><span class="sxs-lookup"><span data-stu-id="eb145-155">Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.</span></span>  
  
 <span data-ttu-id="eb145-156">実装は、場合によっては互換性があります。</span><span class="sxs-lookup"><span data-stu-id="eb145-156">Implementations are compatible in some cases.</span></span> <span data-ttu-id="eb145-157">たとえば、単一の実装は、ジェネリック型引数の参照型を使用して、特定のジェネリック型定義から構築されたすべての種類で共有されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-157">For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments.</span></span> <span data-ttu-id="eb145-158">たとえば、 `MyType<string>`、 `MyType<object>`、および`MyType<ArrayList>`すべて同じ実装を共有します。</span><span class="sxs-lookup"><span data-stu-id="eb145-158">For example, `MyType<string>`, `MyType<object>`, and `MyType<ArrayList>` all share the same implementation.</span></span> <span data-ttu-id="eb145-159">このような状況で、<xref:System.Reflection.FieldInfo>返されるオブジェクトを表す型のフィールドを`declaringType`の元のソースに関係なく、指定`handle`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-159">In this situation, the <xref:System.Reflection.FieldInfo> object that is returned represents a field on the type that `declaringType` specifies, regardless of the original source of `handle`.</span></span> <span data-ttu-id="eb145-160">構築された型のジェネリック型引数が参照型である場合にのみ動作するためでも、この方法はお勧めはできません。</span><span class="sxs-lookup"><span data-stu-id="eb145-160">This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.</span></span>  
  
 <span data-ttu-id="eb145-161">汎用引数が値型の場合は、構築型のランタイム型ハンドルは、同じジェネリック パラメーターの位置に参照型または異なる値型の位置にある構造からランタイム フィールド ハンドルと互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="eb145-161">If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position.</span></span> <span data-ttu-id="eb145-162">その場合、使用する唯一の方法で、<xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=nameWithType>ことを確認するにはオーバー ロード`declaringType`構築された型のランタイム型ハンドルは、`handle`に属しています。</span><span class="sxs-lookup"><span data-stu-id="eb145-162">In that case, the only way to use the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=nameWithType> overload is to ensure that `declaringType` is the runtime type handle for the constructed type that `handle` belongs to.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-163">次の例は、取得する方法を示しています。<xref:System.Reflection.FieldInfo>の構築されたジェネリック クラスのフィールドです。</span><span class="sxs-lookup"><span data-stu-id="eb145-163">The following example shows how to retrieve <xref:System.Reflection.FieldInfo> objects for fields on constructed generic classes.</span></span> <span data-ttu-id="eb145-164">例では、ジェネリック型を定義する`Test<T>`(`Test(Of T)` Visual Basic で) という名前の単一フィールドと`TestField`、型の`T`します。</span><span class="sxs-lookup"><span data-stu-id="eb145-164">The example defines the generic type `Test<T>` (`Test(Of T)` in Visual Basic) with a single field named `TestField`, of type `T`.</span></span> <span data-ttu-id="eb145-165">例では、取得、<xref:System.RuntimeFieldHandle>と<xref:System.RuntimeTypeHandle>の場合、ここで`T`は<xref:System.String>、および、次の例を示します。</span><span class="sxs-lookup"><span data-stu-id="eb145-165">The example gets the <xref:System.RuntimeFieldHandle> and <xref:System.RuntimeTypeHandle> for the case where `T` is <xref:System.String>, and demonstrates the following:</span></span>  
  
-   <span data-ttu-id="eb145-166">場合、例外がスローされます、<xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29>メソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="eb145-166">An exception is thrown if the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29> method overload is used.</span></span> <span data-ttu-id="eb145-167">これは、フィールドの種類ではない場合でも当てはまります`T`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-167">This is true even if the field is not of type `T`.</span></span>  
  
-   <span data-ttu-id="eb145-168">A<xref:System.Reflection.FieldInfo>場合は、ここでは、ランタイム フィールド ハンドルとして同じ構築からランタイム型ハンドルが正常に取得`Test<string>`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-168">A <xref:System.Reflection.FieldInfo> is retrieved successfully if the runtime type handle is from the same construction as the runtime field handle, in this case `Test<string>`.</span></span>  
  
-   <span data-ttu-id="eb145-169">ランタイム型ハンドルが互換性のあるコンストラクションからこの例ではかどうか`Test<object>`、<xref:System.Reflection.FieldInfo>の互換性のあるコンス トラクターでフィールドを取得します。</span><span class="sxs-lookup"><span data-stu-id="eb145-169">If the runtime type handle is from a compatible construction, in this case `Test<object>`, a <xref:System.Reflection.FieldInfo> for the field on the compatible construction is retrieved.</span></span>  
  
-   <span data-ttu-id="eb145-170">ランタイム型ハンドルは、互換性のあるコンストラクションからは、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="eb145-170">If the runtime type handle is not from a compatible construction, an exception is thrown.</span></span> <span data-ttu-id="eb145-171">この場合、値の型が指定されて`T`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-171">In this case, a value type is specified for `T`.</span></span>  
  
 [!code-csharp[FieldInfo_GetFieldFromHandle2#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle2/cs/source.cs#1)]
 [!code-vb[FieldInfo_GetFieldFromHandle2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eb145-172">
            <paramref name="handle" /> が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-172">
              <paramref name="handle" /> is invalid.</span>
          </span>
          <span data-ttu-id="eb145-173">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-173">-or-</span>
          </span>
          <span data-ttu-id="eb145-174">
            <paramref name="declaringType" /> は <paramref name="handle" /> と互換性がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-174">
              <paramref name="declaringType" /> is not compatible with <paramref name="handle" />.</span>
          </span>
          <span data-ttu-id="eb145-175">たとえば、<paramref name="declaringType" /> はジェネリック型定義の実行時型ハンドルであり、<paramref name="handle" /> は構築された型に基づいています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-175">For example, <paramref name="declaringType" /> is the runtime type handle of the generic type definition, and <paramref name="handle" /> comes from a constructed type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="eb145-176">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-176">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="eb145-177">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-177">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eb145-178">このインスタンスのハッシュ コードを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-178">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb145-179">32 ビット符号付き整数ハッシュ コード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-179">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOptionalCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetOptionalCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetOptionalCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOptionalCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetOptionalCustomModifiers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eb145-180">フィールドの省略可能なカスタム修飾子を識別する型の配列を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-180">Gets an array of types that identify the optional custom modifiers of the field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb145-181">
            <see cref="T:System.Runtime.CompilerServices.IsConst" /> など、現在のフィールドのオプションのカスタム修飾子を識別する <see cref="T:System.Type" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-181">An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current field, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-182"><xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A>と<xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A>マネージ コンパイラのデザイナーのメソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="eb145-182">The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="eb145-183">カスタム修飾子の詳細については、次を参照してください。<xref:System.Runtime.CompilerServices.IsBoxed>および関連クラス、<xref:System.Runtime.CompilerServices>名前空間および ECMA Partition II ドキュメント内のメタデータ指定します。</span><span class="sxs-lookup"><span data-stu-id="eb145-183">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="eb145-184">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="eb145-184">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRawConstantValue">
      <MemberSignature Language="C#" Value="public virtual object GetRawConstantValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRawConstantValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetRawConstantValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRawConstantValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetRawConstantValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eb145-185">コンパイラによってフィールドに関連付けられているリテラル値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-185">Returns a literal value associated with the field by a compiler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb145-186">フィールドに関連付けられているリテラル値を格納している <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-186">An <see cref="T:System.Object" /> that contains the literal value associated with the field.</span>
          </span>
          <span data-ttu-id="eb145-187">リテラル値が、要素値がゼロに設定されているクラス型である場合、戻り値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-187">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-188">このメソッドは、マネージ コンパイラ、およびコード アナライザーのデザイナーを提供します。</span><span class="sxs-lookup"><span data-stu-id="eb145-188">This method is provided for designers of managed compilers and code analyzers.</span></span>  
  
 <span data-ttu-id="eb145-189">このメソッドは、実行コンテキストおよび、リフレクションのみのコンテキストの両方で使用できます。</span><span class="sxs-lookup"><span data-stu-id="eb145-189">This method can be used in both the execution context and the reflection-only context.</span></span>  
  
 <span data-ttu-id="eb145-190">アンマネージ メタデータは、フィールド、パラメーター、およびプロパティの定数値を格納する定数のテーブルが使用されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-190">In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</span></span> <span data-ttu-id="eb145-191">定数の詳細については、実行時の動作を直接は影響しません。</span><span class="sxs-lookup"><span data-stu-id="eb145-191">Constant information does not directly influence runtime behavior.</span></span> <span data-ttu-id="eb145-192">コンパイラがコンパイル時に、この情報を検査メタデータをインポートするときにします。</span><span class="sxs-lookup"><span data-stu-id="eb145-192">Compilers inspect this information, at compile time, when importing metadata.</span></span> <span data-ttu-id="eb145-193">使用する場合は、コンパイラは、Microsoft intermediate language (MSIL) ストリームに定数の値が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="eb145-193">If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</span></span> <span data-ttu-id="eb145-194">実行時に定数のテーブルへのアクセスに使用できる MSIL 命令はありません。</span><span class="sxs-lookup"><span data-stu-id="eb145-194">There are no MSIL instructions that can be used to access the Constant table at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb145-195">定数値と定数のテーブルの詳細については、ECMA Partition II ドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="eb145-195">For more information on constant values and the Constant table, see the ECMA Partition II documentation.</span></span> <span data-ttu-id="eb145-196">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="eb145-196">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="eb145-197">アンマネージ メタデータの定数テーブルに、現在のフィールドの定数値が含まれていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-197">The Constant table in unmanaged metadata does not contain a constant value for the current field.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="eb145-198">値の型は、共通言語仕様 (CLS) によって許可されているどの型でもありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-198">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span>
          </span>
          <span data-ttu-id="eb145-199">ECMA Partition II 仕様「Metadata Logical Format: Other Structures」の「Element Types used in Signatures」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-199">See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="eb145-200">フィールドの定数値が設定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-200">The constant value for the field is not set.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetRequiredCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetRequiredCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRequiredCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetRequiredCustomModifiers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eb145-201">プロパティの必須のカスタム修飾子を識別する型の配列を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-201">Gets an array of types that identify the required custom modifiers of the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb145-202">
            <see cref="T:System.Type" /> や <see cref="T:System.Runtime.CompilerServices.IsConst" /> など、現在のプロパティの必須のカスタム修飾子を識別する <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-202">An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-203"><xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A>と<xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A>マネージ コンパイラのデザイナーのメソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="eb145-203">The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="eb145-204">カスタム修飾子の詳細については、次を参照してください。<xref:System.Runtime.CompilerServices.IsBoxed>および関連クラス、<xref:System.Runtime.CompilerServices>名前空間および ECMA Partition II ドキュメント内のメタデータ指定します。</span><span class="sxs-lookup"><span data-stu-id="eb145-204">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="eb145-205">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="eb145-205">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public abstract object GetValue (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetValue (obj As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetValue(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetValue(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="eb145-206">フィールド値が返されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-206">The object whose field value will be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb145-207">派生クラスによってオーバーライドされた場合、指定したオブジェクトでサポートされているフィールドの値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-207">When overridden in a derived class, returns the value of a field supported by a given object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb145-208">このインスタンスがリフレクションするフィールドの値を保持しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-208">An object containing the value of the field reflected by this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-209">フィールドが静的である場合`obj`は無視されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-209">If the field is static, `obj` is ignored.</span></span> <span data-ttu-id="eb145-210">非静的フィールドの`obj`フィールドを宣言または継承するクラスのインスタンスである必要があります。</span><span class="sxs-lookup"><span data-stu-id="eb145-210">For non-static fields, `obj` should be an instance of a class that inherits or declares the field.</span></span> <span data-ttu-id="eb145-211">戻り値の型の注`GetValue`は`Object`します。</span><span class="sxs-lookup"><span data-stu-id="eb145-211">Note that the return type of `GetValue` is `Object`.</span></span> <span data-ttu-id="eb145-212">たとえば、フィールド保持している場合はブール値プリミティブ値のインスタンス`Object`と適切なブール値、値が返されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-212">For example, if the field holds a Boolean primitive value, an instance of `Object` with the appropriate Boolean value is returned.</span></span> <span data-ttu-id="eb145-213">値を返す前に`GetValue`ユーザーがアクセス許可を持っているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="eb145-213">Before returning the value, `GetValue` checks to see if the user has access permission.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb145-214">アクセスの制限には、完全に信頼されたコードは無視されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-214">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="eb145-215">つまり、private のコンス トラクター、メソッド、フィールド、およびプロパティにアクセスして、コードが完全に信頼されるリフレクションを通じて呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="eb145-215">That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb145-216">以降で、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、呼び出し元が許可されている場合は、非パブリック メンバーをアクセスに使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグし、非パブリック メンバーの許可セットが、呼び出し元に制限されている場合は、セット、またはそのサブセットを付与します。</span><span class="sxs-lookup"><span data-stu-id="eb145-216">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="eb145-217">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="eb145-217">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="eb145-218">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="eb145-218">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-219">次の例では、<xref:System.Reflection.FieldInfo.GetValue%2A>静的フィールドの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="eb145-219">The following example uses the <xref:System.Reflection.FieldInfo.GetValue%2A> method to retrieve the value of a static field.</span></span> <span data-ttu-id="eb145-220">なおの値、`obj`引数は`null`します。</span><span class="sxs-lookup"><span data-stu-id="eb145-220">Note that the value of the `obj` argument is `null`.</span></span>  
  
 [!code-cpp[getfldval#1](~/samples/snippets/cpp/VS_Snippets_CLR/GetFldVal/CPP/getfldval.cpp#1)]
 [!code-csharp[getfldval#1](~/samples/snippets/csharp/VS_Snippets_CLR/GetFldVal/CS/getfldval.cs#1)]
 [!code-vb[getfldval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetFldVal/VB/getfldval.vb#1)]  
  
 <span data-ttu-id="eb145-221">次の例の配列を取得する<xref:System.Reflection.FieldInfo>のフィールドを表すオブジェクト、`FieldsClass`型、呼び出し、続いて、<xref:System.Reflection.FieldInfo.GetValue%2A>の各フィールドの値を表示する、`fieldsInst`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="eb145-221">The following example retrieves an array of <xref:System.Reflection.FieldInfo> objects that represents the fields of the `FieldsClass` type, and then calls the <xref:System.Reflection.FieldInfo.GetValue%2A> to display the value of each field for the `fieldsInst` object.</span></span>  
  
 [!code-cpp[FieldInfo_GetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_GetValue/CPP/fieldinfo_getvalue.cpp#1)]
 [!code-csharp[FieldInfo_GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetValue/CS/fieldinfo_getvalue.cs#1)]
 [!code-vb[FieldInfo_GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetValue/VB/fieldinfo_getvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="eb145-222">[Windows ストア アプリ用 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) またはポータブル クラス ライブラリでは、<see cref="T:System.Exception" /> を代わりにキャッチします。</span>
              <span class="sxs-lookup">
                <span data-stu-id="eb145-222">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the Portable Class Library, catch <see cref="T:System.Exception" /> instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="eb145-223">フィールドは非静的であり、<paramref name="obj" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-223">The field is non-static and <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="eb145-224">フィールドがリテラルとマークされていますが、フィールドは許可されたリテラル型を持っていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-224">A field is marked literal, but the field does not have one of the accepted literal types.</span>
          </span>
        </exception>
        <exception cref="T:System.FieldAccessException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="eb145-225">[Windows ストア アプリ用 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) またはポータブル クラス ライブラリでは、基本クラスの例外である <see cref="T:System.MemberAccessException" /> を代わりにキャッチします。</span>
              <span class="sxs-lookup">
                <span data-stu-id="eb145-225">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="eb145-226">呼び出し元には、このフィールドに対するアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-226">The caller does not have permission to access this field.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eb145-227">メソッドは <paramref name="obj" /> のクラスで宣言も継承もされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-227">The method is neither declared nor inherited by the class of <paramref name="obj" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="eb145-228">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-228">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="eb145-229">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-229">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetValueDirect">
      <MemberSignature Language="C#" Value="public virtual object GetValueDirect (TypedReference obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValueDirect(valuetype System.TypedReference obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValueDirect (obj As TypedReference) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetValueDirect(TypedReference obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetValueDirect(System.TypedReference)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.TypedReference" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="eb145-230">場所を指すマネージ ポインターと、その場所に格納される可能性がある型のランタイムの表現をカプセル化する <see cref="T:System.TypedReference" /> 構造体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-230">A <see cref="T:System.TypedReference" /> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb145-231">指定したオブジェクトでサポートされているフィールドの値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-231">Returns the value of a field supported by a given object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb145-232">フィールド値を格納している <see langword="Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-232">An <see langword="Object" /> containing a field value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altCompliant cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" />
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="eb145-233">呼び出し元は、共通言語仕様 (CLS) の代替が必要ですが、代わりにこのメソッドを呼び出しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-233">The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="eb145-234">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-234">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="eb145-235">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-235">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IsAssembly">
      <MemberSignature Language="C#" Value="public bool IsAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAssembly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-236">このフィールドを参照可能な範囲が <see cref="F:System.Reflection.FieldAttributes.Assembly" /> によって示されるかどうかを表す値を取得します。ここで判定されるのは、フィールドは同じアセンブリ内の他の型でのみ参照できる可能性があり、アセンブリ外部の派生型では参照できないということです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-236">Gets a value indicating whether the potential visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.Assembly" />; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-237">このフィールドの参照範囲が <see cref="F:System.Reflection.FieldAttributes.Assembly" /> によって正しく示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-237">
              <see langword="true" /> if the visibility of this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.Assembly" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-238">フィールドの実際の可視性は、その型の可視性によって制限されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-238">The actual visibility of a field is limited by the visibility of its type.</span></span> <span data-ttu-id="eb145-239"><xref:System.Reflection.FieldInfo.IsAssembly%2A>プロパティがあります`true`フィールドが含んでいる型の外部で参照ではありませんし、プライベートの入れ子にされた型のフィールドである場合は、フィールドのです。</span><span class="sxs-lookup"><span data-stu-id="eb145-239">The <xref:System.Reflection.FieldInfo.IsAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</span></span>  
  
 <span data-ttu-id="eb145-240">フィールドの可視性がによって正確に説明されている<xref:System.Reflection.FieldAttributes.Assembly?displayProperty=nameWithType>のみ可視性修飾子が場合`internal`(`Friend` Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="eb145-240">The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes.Assembly?displayProperty=nameWithType> if the only visibility modifier is `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="eb145-241">このプロパティは、`false`られたフィールドの`protected internal`(C#) (`Protected Friend` Visual basic で`protected public`C++ で); を使用して、<xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>このようなフィールドを識別するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="eb145-241">This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-242">次のコード例は、さまざまなレベルの可視性を持つフィールドを定義しの値を表示、 <xref:System.Reflection.FieldInfo.IsAssembly%2A>、 <xref:System.Reflection.FieldInfo.IsFamily%2A>、 <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>、および<xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="eb145-242">The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb145-243">Visual Basic および c# 言語でフィールドを定義できません<xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType>可視性; アクセス レベルは、C++ の例でのみが表示されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-243">The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamily" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyOrAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyAndAssembly" />
      </Docs>
    </Member>
    <Member MemberName="IsFamily">
      <MemberSignature Language="C#" Value="public bool IsFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamily" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamily { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-244">このフィールドへの参照範囲が <see cref="F:System.Reflection.FieldAttributes.Family" /> によって示されるかどうかを表す値を取得します。ここで判定されるのは、フィールドはそのフィールドのクラスと派生クラスの内側でのみ参照できるということです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-244">Gets a value indicating whether the visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.Family" />; that is, the field is visible only within its class and derived classes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-245">このフィールドへのアクセスが <see cref="F:System.Reflection.FieldAttributes.Family" /> によって正しく示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-245">
              <see langword="true" /> if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.Family" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-246">フィールドの可視性がによって正確に説明されている<xref:System.Reflection.FieldAttributes.Family?displayProperty=nameWithType>のみ可視性修飾子が場合`protected`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-246">The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes.Family?displayProperty=nameWithType> if the only visibility modifier is `protected`.</span></span> <span data-ttu-id="eb145-247">このプロパティは、`false`られたフィールドの`protected internal`(C#) (`Protected Friend` Visual basic で`protected public`C++ で); を使用して、<xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>このようなフィールドを識別するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="eb145-247">This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-248">次のコード例は、さまざまなレベルの可視性を持つフィールドを定義しの値を表示、 <xref:System.Reflection.FieldInfo.IsAssembly%2A>、 <xref:System.Reflection.FieldInfo.IsFamily%2A>、 <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>、および<xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="eb145-248">The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb145-249">Visual Basic および c# 言語でフィールドを定義できません<xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType>可視性; アクセス レベルは、C++ の例でのみが表示されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-249">The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="T:System.Type" />
        <altmember cref="P:System.Reflection.FieldInfo.IsAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyOrAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyAndAssembly" />
      </Docs>
    </Member>
    <Member MemberName="IsFamilyAndAssembly">
      <MemberSignature Language="C#" Value="public bool IsFamilyAndAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamilyAndAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsFamilyAndAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamilyAndAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamilyAndAssembly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsFamilyAndAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-250">フィールドへの参照範囲が <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /> によって示されるかどうかを表す値を取得します。ここで判定されるのは、フィールドは派生クラスからアクセスできるが、それらのフィールドが同じアセンブリ内にある場合に限るものであることです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-250">Gets a value indicating whether the visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-251">このフィールドへのアクセスが <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /> によって正しく示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-251">
              <see langword="true" /> if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-252">フィールドがある場合<xref:System.Reflection.FieldAttributes.FamANDAssem>レベルの可視性、呼び出すことができますも、同じアセンブリ内にある派生クラスでのすべてのメンバーからからではないその他の種類。</span><span class="sxs-lookup"><span data-stu-id="eb145-252">If a field has <xref:System.Reflection.FieldAttributes.FamANDAssem> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.</span></span>  
  
 <span data-ttu-id="eb145-253">フィールドの可視性がによって正確に説明されている<xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType>可視性修飾子が場合`protected private`C++ でします。</span><span class="sxs-lookup"><span data-stu-id="eb145-253">The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> if the visibility modifier is `protected private` in C++.</span></span> <span data-ttu-id="eb145-254">Visual Basic または c# では、この可視性を持つフィールドを定義することはできません。</span><span class="sxs-lookup"><span data-stu-id="eb145-254">Fields with this visibility cannot be defined in Visual Basic or C#.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-255">次のコード例は、さまざまなレベルの可視性を持つフィールドを定義しの値を表示、 <xref:System.Reflection.FieldInfo.IsAssembly%2A>、 <xref:System.Reflection.FieldInfo.IsFamily%2A>、 <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>、および<xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="eb145-255">The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb145-256">Visual Basic および c# 言語でフィールドを定義できません<xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType>可視性; アクセス レベルは、C++ の例でのみが表示されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-256">The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyOrAssembly" />
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="P:System.Reflection.FieldInfo.IsAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamily" />
      </Docs>
    </Member>
    <Member MemberName="IsFamilyOrAssembly">
      <MemberSignature Language="C#" Value="public bool IsFamilyOrAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamilyOrAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsFamilyOrAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamilyOrAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamilyOrAssembly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsFamilyOrAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-257">このフィールドへの参照範囲が <see cref="F:System.Reflection.FieldAttributes.FamORAssem" /> によって示されるかどうかを表す値を取得します。ここで判定されるのは、フィールドは任意の場所にある派生クラスと、同じアセンブリ内のクラスでアクセスできることです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-257">Gets a value indicating whether the potential visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-258">このフィールドへのアクセスが <see cref="F:System.Reflection.FieldAttributes.FamORAssem" /> によって正しく示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-258">
              <see langword="true" /> if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-259">フィールドがある場合<xref:System.Reflection.FieldAttributes.FamORAssem>レベルの可視性、呼び出すことができます、同じアセンブリ内のメンバーまたは派生クラスで任意のメンバーからからではないその他の種類。</span><span class="sxs-lookup"><span data-stu-id="eb145-259">If a field has <xref:System.Reflection.FieldAttributes.FamORAssem> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.</span></span>  
  
 <span data-ttu-id="eb145-260">フィールドの実際の可視性は、その型の可視性によって制限されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-260">The actual visibility of a field is limited by the visibility of its type.</span></span> <span data-ttu-id="eb145-261"><xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>プロパティがあります`true`フィールドが含んでいる型の外部で参照ではありませんし、プライベートの入れ子にされた型のフィールドである場合は、フィールドのです。</span><span class="sxs-lookup"><span data-stu-id="eb145-261">The <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</span></span>  
  
 <span data-ttu-id="eb145-262">フィールドの可視性がによって正確に説明されている<xref:System.Reflection.FieldAttributes.FamORAssem?displayProperty=nameWithType>可視性修飾子が場合`protected internal`(C#) (`Protected Friend` Visual basic で`protected public`C++ で)。</span><span class="sxs-lookup"><span data-stu-id="eb145-262">The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes.FamORAssem?displayProperty=nameWithType> if the visibility modifier is `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-263">次のコード例は、さまざまなレベルの可視性を持つフィールドを定義しの値を表示、 <xref:System.Reflection.FieldInfo.IsAssembly%2A>、 <xref:System.Reflection.FieldInfo.IsFamily%2A>、 <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>、および<xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="eb145-263">The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb145-264">Visual Basic および c# 言語でフィールドを定義できません<xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType>可視性; アクセス レベルは、C++ の例でのみが表示されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-264">The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="P:System.Reflection.FieldInfo.IsAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamily" />
      </Docs>
    </Member>
    <Member MemberName="IsInitOnly">
      <MemberSignature Language="C#" Value="public bool IsInitOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitOnly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsInitOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsInitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-265">フィールドをコンストラクターの本体だけでしか設定できないのかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-265">Gets a value indicating whether the field can only be set in the body of the constructor.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-266">フィールドに <see langword="true" /> 属性が設定されている場合は <see langword="InitOnly" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-266">
              <see langword="true" /> if the field has the <see langword="InitOnly" /> attribute set; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-267">返される値が場合`true`、フィールドのみ初期化することができ、その後は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="eb145-267">If the returned value is `true`, the field can only be initialized, and is read-only thereafter.</span></span>  
  
 <span data-ttu-id="eb145-268">取得する、`IsInitOnly`プロパティ、クラスをまず取得`Type`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-268">To get the `IsInitOnly` property, first get the class `Type`.</span></span> <span data-ttu-id="eb145-269">`Type`、取得、`FieldInfo`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-269">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="eb145-270">`FieldInfo`、取得、`IsInitOnly`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="eb145-270">From the `FieldInfo`, get the `IsInitOnly` property.</span></span> <span data-ttu-id="eb145-271">パブリックでないフィールドにアクセスするには、結合<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>の一方または両方で<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>と<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>で、`GetField`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="eb145-271">To access a non-public field, combine <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> with either or both of <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> in the `GetField` method.</span></span>  
  
 <span data-ttu-id="eb145-272">`IsInitOnly`場合、プロパティが設定、<xref:System.Reflection.FieldAttributes.InitOnly?displayProperty=nameWithType>属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="eb145-272">The `IsInitOnly` property is set when the <xref:System.Reflection.FieldAttributes.InitOnly?displayProperty=nameWithType> attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-273">次の例では、2 つのフィールドが作成されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-273">In the following example, two fields are created.</span></span> <span data-ttu-id="eb145-274">2 番目のフィールドは読み取り専用、set アクセサーがないと`IsInitOnly`に設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-274">The second field is read-only, having no set accessor, and `IsInitOnly` is set to `true`.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/VB/source.vb#1)]  
  
 <span data-ttu-id="eb145-275">このコードを実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-275">This code produces the following output:</span></span>  
  
 <span data-ttu-id="eb145-276">Reflection.FieldInfo</span><span class="sxs-lookup"><span data-stu-id="eb145-276">Reflection.FieldInfo</span></span>  
  
 <span data-ttu-id="eb145-277">Myfielda - A- modified, IsInitOnly = False</span><span class="sxs-lookup"><span data-stu-id="eb145-277">Myfielda - A- modified, IsInitOnly = False</span></span>  
  
 <span data-ttu-id="eb145-278">Myfieldb - B 読み取り専用フィールドを対応 = True</span><span class="sxs-lookup"><span data-stu-id="eb145-278">Myfieldb - B readonly field, IsInitOnly = True</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="IsLiteral">
      <MemberSignature Language="C#" Value="public bool IsLiteral { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLiteral" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsLiteral" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLiteral As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLiteral { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsLiteral</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-279">値がコンパイル時に書き込まれ、変更できないかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-279">Gets a value indicating whether the value is written at compile time and cannot be changed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-280">フィールドに <see langword="true" /> 属性が設定されている場合は <see langword="Literal" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-280">
              <see langword="true" /> if the field has the <see langword="Literal" /> attribute set; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-281">`IsLiteral`場合、プロパティが設定、`FieldAttributes.Literal`属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="eb145-281">The `IsLiteral` property is set when the `FieldAttributes.Literal` attribute is set.</span></span> <span data-ttu-id="eb145-282">この属性が設定されている場合、フィールドでは変更できませんあり定数です。</span><span class="sxs-lookup"><span data-stu-id="eb145-282">If this attribute is set, the field cannot be changed and is constant.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNotSerialized">
      <MemberSignature Language="C#" Value="public bool IsNotSerialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotSerialized" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsNotSerialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotSerialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotSerialized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsNotSerialized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-283">このフィールドに、<see langword="NotSerialized" /> 属性が設定されているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-283">Gets a value indicating whether this field has the <see langword="NotSerialized" /> attribute.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-284">フィールドに <see langword="true" /> 属性が設定されている場合は <see langword="NotSerialized" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-284">
              <see langword="true" /> if the field has the <see langword="NotSerialized" /> attribute set; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-285">`IsNotSerialized`プロパティから返される`true`でフィールドがマークされている場合、`FieldAttributes.NotSerialized`フラグ。</span><span class="sxs-lookup"><span data-stu-id="eb145-285">The `IsNotSerialized` property returns `true` when the field is marked with the `FieldAttributes.NotSerialized` flag.</span></span> <span data-ttu-id="eb145-286">このフラグがフィールドに設定されている場合、種類がリモート処理するときにシリアル化するフィールドがないことを示します。</span><span class="sxs-lookup"><span data-stu-id="eb145-286">When this flag is set on a field, it indicates that the field does not have to be serialized when the type is remoted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-287">次の例では、MyClass のフィールドのフィールド情報を取得、かどうかをフィールド、シリアル化できる結果が表示されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-287">The following example gets the field information of the fields of MyClass, determines if the fields can be serialized, and displays the results.</span></span>  
  
 [!code-cpp[FieldInfo_IsNotSerialized#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsNotSerialized/CPP/fieldinfo_isnotserialized.cpp#1)]
 [!code-csharp[FieldInfo_IsNotSerialized#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsNotSerialized/CS/fieldinfo_isnotserialized.cs#1)]
 [!code-vb[FieldInfo_IsNotSerialized#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsNotSerialized/VB/fieldinfo_isnotserialized.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPinvokeImpl">
      <MemberSignature Language="C#" Value="public bool IsPinvokeImpl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPinvokeImpl" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsPinvokeImpl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPinvokeImpl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPinvokeImpl { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsPinvokeImpl</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-288">対応する <see langword="PinvokeImpl" /> 属性が <see cref="T:System.Reflection.FieldAttributes" /> に設定されているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-288">Gets a value indicating whether the corresponding <see langword="PinvokeImpl" /> attribute is set in <see cref="T:System.Reflection.FieldAttributes" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-289">
            <see cref="T:System.Reflection.FieldAttributes" /> に <see langword="true" /> 属性が設定されている場合は <see langword="PinvokeImpl" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-289">
              <see langword="true" /> if the <see langword="PinvokeImpl" /> attribute is set in <see cref="T:System.Reflection.FieldAttributes" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="eb145-290">次の例のクラスを作成し、名前を表示フィールドおよび<xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A>フィールドのプロパティの値。</span><span class="sxs-lookup"><span data-stu-id="eb145-290">The following example creates a class and displays the name, field and <xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A> property value of the field.</span></span>  
  
 [!code-cpp[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/CPP/fieldinfo_ispinvokeimpl.cpp#1)]
 [!code-csharp[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/CS/fieldinfo_ispinvokeimpl.cs#1)]
 [!code-vb[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/VB/fieldinfo_ispinvokeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPrivate">
      <MemberSignature Language="C#" Value="public bool IsPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrivate { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-291">フィールドがプライベートかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-291">Gets a value indicating whether the field is private.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-292">フィールドがプライベートの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-292">
              <see langword="true" /> if the field is private; otherwise; <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-293">プライベート フィールドでは、メンバー関数からのみアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="eb145-293">Private fields are accessible only from member functions.</span></span>  
  
 <span data-ttu-id="eb145-294">`IsPrivate`場合、プロパティが設定、`FieldAttributes.Private`属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="eb145-294">The `IsPrivate` property is set when the `FieldAttributes.Private` attribute is set.</span></span>  
  
 <span data-ttu-id="eb145-295">取得する、`IsPrivate`プロパティ、クラスをまず取得`Type`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-295">To get the `IsPrivate` property, first get the class `Type`.</span></span> <span data-ttu-id="eb145-296">`Type`、取得、`FieldInfo`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-296">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="eb145-297">`FieldInfo`、取得、`IsPrivate`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="eb145-297">From the `FieldInfo`, get the `IsPrivate` property.</span></span> <span data-ttu-id="eb145-298">パブリックでないフィールドにアクセスするには、設定、`BindingFlags`に`NonPublic`、いずれかと`Static`または`Instance`で、`GetField`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="eb145-298">To access a non-public field, set the `BindingFlags` to `NonPublic`, and either `Static` or `Instance` in the `GetField` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-299">次の例は、クラスのフィールドがプライベートであるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="eb145-299">The following example returns a value indicating whether or not the field of the class is private.</span></span>  
  
 [!code-cpp[FieldInfo_IsPrivate#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsPrivate/CPP/fieldinfo_isprivate.cpp#1)]
 [!code-csharp[FieldInfo_IsPrivate#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsPrivate/CS/fieldinfo_isprivate.cs#1)]
 [!code-vb[FieldInfo_IsPrivate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsPrivate/VB/fieldinfo_isprivate.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-300">フィールドがパブリックかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-300">Gets a value indicating whether the field is public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-301">フィールドがパブリックの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-301">
              <see langword="true" /> if this field is public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-302">パブリック フィールドにはアクセス可能なすべての場所で、対応するクラスが表示されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-302">Public fields are accessible everywhere their corresponding classes are visible.</span></span>  
  
 <span data-ttu-id="eb145-303">`IsPublic`場合、プロパティが設定、`FieldAttributes.Public`属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="eb145-303">The `IsPublic` property is set when the `FieldAttributes.Public` attribute is set.</span></span>  
  
 <span data-ttu-id="eb145-304">取得する、`IsPublic`プロパティ、クラスをまず取得`Type`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-304">To get the `IsPublic` property, first get the class `Type`.</span></span> <span data-ttu-id="eb145-305">`Type`、取得、`FieldInfo`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-305">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="eb145-306">`FieldInfo`、取得、`IsPublic`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="eb145-306">From the `FieldInfo`, get the `IsPublic` property.</span></span> <span data-ttu-id="eb145-307">保護されている場合は、このフィールドは、パブリック以外は、すぐにアクセスすることはできません。</span><span class="sxs-lookup"><span data-stu-id="eb145-307">If the field is other than public, it is protected and cannot be readily accessed.</span></span> <span data-ttu-id="eb145-308">パブリックでないフィールドにアクセスするには、設定、`BindingFlags`に`NonPublic`、どちらかを指定`BindingFlags.Instance`または`BindingFlags.Static`、これを使用して、`GetField`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="eb145-308">To access a nonpublic field, set the `BindingFlags` to `NonPublic`, specify either `BindingFlags.Instance` or `BindingFlags.Static`, and use this for the `GetField` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-309">次の例は、クラスのフィールドがパブリックかプライベートかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="eb145-309">The following example returns a value indicating whether or not the field of the class is public or private.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="T:System.Reflection.BindingFlags" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-310">現在のフィールドが、現在の信頼レベルでセキュリティ クリティカルまたはセキュリティ セーフ クリティカルであるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-310">Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-311">現在のフィールドが、現在の信頼レベルでセキュリティ クリティカルまたはセキュリティ セーフ クリティカルである場合は <see langword="true" />。透過的である場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-311">
              <see langword="true" /> if the current field is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-312"><xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>、 <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>、および<xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A>プロパティが共通言語ランタイム (CLR) によって決定される、現在の信頼レベルにあるフィールドの透明度を報告します。</span><span class="sxs-lookup"><span data-stu-id="eb145-312">The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="eb145-313">これらのプロパティの組み合わせは、次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="eb145-313">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="eb145-314">セキュリティ レベル</span><span class="sxs-lookup"><span data-stu-id="eb145-314">Security level</span></span>|<span data-ttu-id="eb145-315">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="eb145-315">IsSecurityCritical</span></span>|<span data-ttu-id="eb145-316">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="eb145-316">IsSecuritySafeCritical</span></span>|<span data-ttu-id="eb145-317">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="eb145-317">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="eb145-318">重大</span><span class="sxs-lookup"><span data-stu-id="eb145-318">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="eb145-319">セーフ クリティカル</span><span class="sxs-lookup"><span data-stu-id="eb145-319">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="eb145-320">透明</span><span class="sxs-lookup"><span data-stu-id="eb145-320">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="eb145-321">これらのプロパティを使用して、アセンブリとその型およびメンバーのセキュリティの注釈を調べることを確認したり、現在の信頼レベルをランタイムの規則を複製するよりもはるかに簡単です。</span><span class="sxs-lookup"><span data-stu-id="eb145-321">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="eb145-322">部分的に信頼されたアセンブリでは、このプロパティの値は、アセンブリの現在の信頼レベルによって異なります。</span><span class="sxs-lookup"><span data-stu-id="eb145-322">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="eb145-323">アセンブリがドメインに読み込まれて、部分的に信頼されたアプリケーション (たとえば、サンド ボックス アプリケーション ドメイン) の場合、ランタイムはアセンブリのセキュリティの注釈を無視します。</span><span class="sxs-lookup"><span data-stu-id="eb145-323">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="eb145-324">アセンブリとそのすべての型は透明として扱われます。</span><span class="sxs-lookup"><span data-stu-id="eb145-324">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="eb145-325">ランタイムは、そのアセンブリが、完全に信頼されたアプリケーション ドメイン (たとえば、デスクトップ アプリケーションの既定のアプリケーション ドメイン) に読み込まれている場合にのみ、部分信頼アセンブリのセキュリティの注釈に注意を支払います。</span><span class="sxs-lookup"><span data-stu-id="eb145-325">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="eb145-326">これに対し、信頼されたアセンブリ (つまり、厳密な名前付きアセンブリをグローバル アセンブリ キャッシュにインストールされている) は常にアプリケーション ドメインの信頼レベルに関係なく、完全信頼で読み込まれたため、現在の信頼レベルは完全に信頼された常にします。</span><span class="sxs-lookup"><span data-stu-id="eb145-326">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="eb145-327">使用して、アセンブリとアプリケーション ドメインの現在の信頼レベルを指定できます、<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>と<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="eb145-327">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="eb145-328">リフレクションと透過性の詳細については、次を参照してください。[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)です。</span><span class="sxs-lookup"><span data-stu-id="eb145-328">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="eb145-329">透過性の詳細については、次を参照してください。[セキュリティの変更点](~/docs/framework/security/security-changes.md)です。</span><span class="sxs-lookup"><span data-stu-id="eb145-329">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.FieldInfo.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.FieldInfo.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-330">現在のフィールドが、現在の信頼レベルでセキュリティ セーフ クリティカルであるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-330">Gets a value that indicates whether the current field is security-safe-critical at the current trust level.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-331">現在のフィールドが、現在の信頼レベルでセキュリティ セーフ クリティカルである場合は <see langword="true" />。セキュリティ クリティカルまたは透過的である場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-331">
              <see langword="true" /> if the current field is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-332"><xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>、 <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>、および<xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A>プロパティが共通言語ランタイム (CLR) によって決定される、現在の信頼レベルにあるフィールドの透明度を報告します。</span><span class="sxs-lookup"><span data-stu-id="eb145-332">The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="eb145-333">これらのプロパティの組み合わせは、次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="eb145-333">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="eb145-334">セキュリティ レベル</span><span class="sxs-lookup"><span data-stu-id="eb145-334">Security level</span></span>|<span data-ttu-id="eb145-335">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="eb145-335">IsSecurityCritical</span></span>|<span data-ttu-id="eb145-336">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="eb145-336">IsSecuritySafeCritical</span></span>|<span data-ttu-id="eb145-337">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="eb145-337">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="eb145-338">重大</span><span class="sxs-lookup"><span data-stu-id="eb145-338">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="eb145-339">セーフ クリティカル</span><span class="sxs-lookup"><span data-stu-id="eb145-339">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="eb145-340">透明</span><span class="sxs-lookup"><span data-stu-id="eb145-340">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="eb145-341">これらのプロパティを使用して、アセンブリとその型およびメンバーのセキュリティの注釈を調べることを確認したり、現在の信頼レベルをランタイムの規則を複製するよりもはるかに簡単です。</span><span class="sxs-lookup"><span data-stu-id="eb145-341">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="eb145-342">部分的に信頼されたアセンブリでは、このプロパティの値は、アセンブリの現在の信頼レベルによって異なります。</span><span class="sxs-lookup"><span data-stu-id="eb145-342">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="eb145-343">アセンブリがドメインに読み込まれて、部分的に信頼されたアプリケーション (たとえば、サンド ボックス アプリケーション ドメイン) の場合、ランタイムはアセンブリのセキュリティの注釈を無視します。</span><span class="sxs-lookup"><span data-stu-id="eb145-343">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="eb145-344">アセンブリとそのすべての型は透明として扱われます。</span><span class="sxs-lookup"><span data-stu-id="eb145-344">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="eb145-345">ランタイムは、そのアセンブリが、完全に信頼されたアプリケーション ドメイン (たとえば、デスクトップ アプリケーションの既定のアプリケーション ドメイン) に読み込まれている場合にのみ、部分信頼アセンブリのセキュリティの注釈に注意を支払います。</span><span class="sxs-lookup"><span data-stu-id="eb145-345">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="eb145-346">これに対し、信頼されたアセンブリ (つまり、厳密な名前付きアセンブリをグローバル アセンブリ キャッシュにインストールされている) は常にアプリケーション ドメインの信頼レベルに関係なく、完全信頼で読み込まれたため、現在の信頼レベルは完全に信頼された常にします。</span><span class="sxs-lookup"><span data-stu-id="eb145-346">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="eb145-347">使用して、アセンブリとアプリケーション ドメインの現在の信頼レベルを指定できます、<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>と<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="eb145-347">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="eb145-348">リフレクションと透過性の詳細については、次を参照してください。[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)です。</span><span class="sxs-lookup"><span data-stu-id="eb145-348">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="eb145-349">透過性の詳細については、次を参照してください。[セキュリティの変更点](~/docs/framework/security/security-changes.md)です。</span><span class="sxs-lookup"><span data-stu-id="eb145-349">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.FieldInfo.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.FieldInfo.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-350">現在のフィールドが、現在の信頼レベルで透過的であるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-350">Gets a value that indicates whether the current field is transparent at the current trust level.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-351">現在のフィールドが、現在の信頼レベルで透過的セキュリティである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-351">
              <see langword="true" /> if the field is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-352"><xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>、 <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>、および<xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A>プロパティが共通言語ランタイム (CLR) によって決定される、現在の信頼レベルにあるフィールドの透明度を報告します。</span><span class="sxs-lookup"><span data-stu-id="eb145-352">The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="eb145-353">これらのプロパティの組み合わせは、次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="eb145-353">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="eb145-354">セキュリティ レベル</span><span class="sxs-lookup"><span data-stu-id="eb145-354">Security level</span></span>|<span data-ttu-id="eb145-355">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="eb145-355">IsSecurityCritical</span></span>|<span data-ttu-id="eb145-356">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="eb145-356">IsSecuritySafeCritical</span></span>|<span data-ttu-id="eb145-357">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="eb145-357">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="eb145-358">重大</span><span class="sxs-lookup"><span data-stu-id="eb145-358">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="eb145-359">セーフ クリティカル</span><span class="sxs-lookup"><span data-stu-id="eb145-359">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="eb145-360">透明</span><span class="sxs-lookup"><span data-stu-id="eb145-360">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="eb145-361">これらのプロパティを使用して、アセンブリとその型およびメンバーのセキュリティの注釈を調べることを確認したり、現在の信頼レベルをランタイムの規則を複製するよりもはるかに簡単です。</span><span class="sxs-lookup"><span data-stu-id="eb145-361">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="eb145-362">部分的に信頼されたアセンブリでは、このプロパティの値は、アセンブリの現在の信頼レベルによって異なります。</span><span class="sxs-lookup"><span data-stu-id="eb145-362">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="eb145-363">アセンブリがドメインに読み込まれて、部分的に信頼されたアプリケーション (たとえば、サンド ボックス アプリケーション ドメイン) の場合、ランタイムはアセンブリのセキュリティの注釈を無視します。</span><span class="sxs-lookup"><span data-stu-id="eb145-363">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="eb145-364">アセンブリとそのすべての型は透明として扱われます。</span><span class="sxs-lookup"><span data-stu-id="eb145-364">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="eb145-365">ランタイムは、そのアセンブリが、完全に信頼されたアプリケーション ドメイン (たとえば、デスクトップ アプリケーションの既定のアプリケーション ドメイン) に読み込まれている場合にのみ、部分信頼アセンブリのセキュリティの注釈に注意を支払います。</span><span class="sxs-lookup"><span data-stu-id="eb145-365">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="eb145-366">これに対し、信頼されたアセンブリ (つまり、厳密な名前付きアセンブリをグローバル アセンブリ キャッシュにインストールされている) は常にアプリケーション ドメインの信頼レベルに関係なく、完全信頼で読み込まれたため、現在の信頼レベルは完全に信頼された常にします。</span><span class="sxs-lookup"><span data-stu-id="eb145-366">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="eb145-367">使用して、アセンブリとアプリケーション ドメインの現在の信頼レベルを指定できます、<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>と<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="eb145-367">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="eb145-368">リフレクションと透過性の詳細については、次を参照してください。[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)です。</span><span class="sxs-lookup"><span data-stu-id="eb145-368">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="eb145-369">透過性の詳細については、次を参照してください。[セキュリティの変更点](~/docs/framework/security/security-changes.md)です。</span><span class="sxs-lookup"><span data-stu-id="eb145-369">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.FieldInfo.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.FieldInfo.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-370">対応する <see langword="SpecialName" /> 属性が <see cref="T:System.Reflection.FieldAttributes" /> 列挙子に設定されているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-370">Gets a value indicating whether the corresponding <see langword="SpecialName" /> attribute is set in the <see cref="T:System.Reflection.FieldAttributes" /> enumerator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-371">
            <see cref="T:System.Reflection.FieldAttributes" /> に <see langword="true" /> 属性が設定されている場合は <see langword="SpecialName" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-371">
              <see langword="true" /> if the <see langword="SpecialName" /> attribute is set in <see cref="T:System.Reflection.FieldAttributes" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-372">始まるか、アンダー スコア文字 (_)、プロパティ アクセサー、および演算子のオーバー ロードが含まれている名前は、一部のコンパイラで特別な処理が必要となる名前の例を示します。</span><span class="sxs-lookup"><span data-stu-id="eb145-372">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-373">次の例は、クラス内のフィールドが SpecialName では属性を含めるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="eb145-373">The following example returns a value indicating whether or not the fields in the class contain a SpecialName attribute.</span></span>  
  
 [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]
 [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]
 [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsStatic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-374">フィールドが静的かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-374">Gets a value indicating whether the field is static.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-375">フィールドが静的な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-375">
              <see langword="true" /> if this field is static; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-376">フィールドが静的な場合は、フィールドの 1 つのコピーは、型のすべてのインスタンスによって共有されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-376">When a field is static, one copy of the field is shared by all instances of the type.</span></span>  
  
 <span data-ttu-id="eb145-377">`IsStatic`場合、プロパティが設定、`FieldAttributes.Static`属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="eb145-377">The `IsStatic` property is set when the `FieldAttributes.Static` attribute is set.</span></span>  
  
 <span data-ttu-id="eb145-378">取得する、`IsStatic`プロパティ、クラスをまず取得`Type`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-378">To get the `IsStatic` property, first get the class `Type`.</span></span> <span data-ttu-id="eb145-379">`Type`、取得、`FieldInfo`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-379">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="eb145-380">`FieldInfo`、取得、`IsStatic`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="eb145-380">From the `FieldInfo`, get the `IsStatic` property.</span></span> <span data-ttu-id="eb145-381">パブリックでないフィールドにアクセスするには、設定、`BindingFlags`に`NonPublic`で、`GetField`メソッドに、ユーザー補助の設定と`Instance`または`Static`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-381">To access a non-public field, set the `BindingFlags` to `NonPublic` in the `GetField` method and set the accessibility to `Instance` or `Static`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-382">次の例では、指定したフィールドは静的であり、その結果を表示するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb145-382">The following example determines whether the specified field is static and displays the result.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/VB/source.vb#1)]  
  
 <span data-ttu-id="eb145-383">このコードを実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-383">This code produces the following output:</span></span>  
  
 <span data-ttu-id="eb145-384">Reflection.FieldInfo</span><span class="sxs-lookup"><span data-stu-id="eb145-384">Reflection.FieldInfo</span></span>  
  
 <span data-ttu-id="eb145-385">Myfielda - プライベート フィールドです。IsStatic - False</span><span class="sxs-lookup"><span data-stu-id="eb145-385">Myfielda - A private field; IsStatic - False</span></span>  
  
 <span data-ttu-id="eb145-386">Myfieldb - B の静的フィールドです。IsStatic - True</span><span class="sxs-lookup"><span data-stu-id="eb145-386">Myfieldb - B static field; IsStatic - True</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-387">このメンバーがフィールドであることを示す <see cref="T:System.Reflection.MemberTypes" /> 値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-387">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a field.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eb145-388">このメンバーがフィールドであることを示す <see cref="T:System.Reflection.MemberTypes" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-388">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a field.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-389">このプロパティのオーバーライド<xref:System.Reflection.MemberInfo.MemberType%2A>です。</span><span class="sxs-lookup"><span data-stu-id="eb145-389">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="eb145-390">セットを確認すると、そのため、<xref:System.Reflection.MemberInfo>オブジェクト-によって返される配列など、 <xref:System.Type.GetMembers%2A> —、<xref:System.Reflection.MemberInfo.MemberType%2A>プロパティから返される<xref:System.Reflection.MemberTypes.Field?displayProperty=nameWithType>フィールドが場合にのみ特定のメンバーです。</span><span class="sxs-lookup"><span data-stu-id="eb145-390">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Field?displayProperty=nameWithType> only when a given member is a field.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-391">次の例では、指定されたメンバーはフィールドであり、その結果を表示するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="eb145-391">The following example determines whether the specified member is a field and displays the result.</span></span>  
  
 [!code-cpp[Classic FieldInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/VB/source.vb#1)]  
  
 <span data-ttu-id="eb145-392">このコードを実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-392">This code produces the following output:</span></span>  
  
 <span data-ttu-id="eb145-393">Reflection.FieldInfo</span><span class="sxs-lookup"><span data-stu-id="eb145-393">Reflection.FieldInfo</span></span>  
  
 <span data-ttu-id="eb145-394">Myfield.field - プライベート フィールドです。MemberType はフィールド</span><span class="sxs-lookup"><span data-stu-id="eb145-394">Myfield.field - a private field; MemberType is a Field</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.FieldInfo left, class System.Reflection.FieldInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As FieldInfo, right As FieldInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::FieldInfo ^ left, System::Reflection::FieldInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.FieldInfo" />
        <Parameter Name="right" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="eb145-395">比較する最初のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-395">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="eb145-396">比較する 2 番目のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-396">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb145-397">2 つの <see cref="T:System.Reflection.FieldInfo" /> オブジェクトが等しいかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-397">Indicates whether two <see cref="T:System.Reflection.FieldInfo" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb145-398">
            <see langword="true" /> が <paramref name="left" /> に等しい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-398">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.FieldInfo left, class System.Reflection.FieldInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As FieldInfo, right As FieldInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::FieldInfo ^ left, System::Reflection::FieldInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.FieldInfo" />
        <Parameter Name="right" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="eb145-399">比較する最初のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-399">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="eb145-400">比較する 2 番目のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-400">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb145-401">2 つの <see cref="T:System.Reflection.FieldInfo" /> オブジェクトが等しくないかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-401">Indicates whether two <see cref="T:System.Reflection.FieldInfo" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb145-402">
            <see langword="true" /> が <paramref name="left" /> と等しくない場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-402">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="eb145-403">指定したオブジェクトのフィールドに、指定した値を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-403">Sets the value of the field for the given object to the given value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object obj, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (obj As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetValue(System::Object ^ obj, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.SetValue(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="eb145-404">フィールド値が設定されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-404">The object whose field value will be set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="eb145-405">フィールドに代入する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-405">The value to assign to the field.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb145-406">指定したオブジェクトでサポートされているフィールドの値を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-406">Sets the value of the field supported by the given object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-407">このメソッドは代入`value`オブジェクトのこのインスタンスによって反映されるフィールドに`obj`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-407">This method will assign `value` to the field reflected by this instance on object `obj`.</span></span> <span data-ttu-id="eb145-408">フィールドが静的である場合`obj`は無視されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-408">If the field is static, `obj` will be ignored.</span></span> <span data-ttu-id="eb145-409">非静的フィールドの`obj`フィールドを宣言または継承するクラスのインスタンスである必要があります。</span><span class="sxs-lookup"><span data-stu-id="eb145-409">For non-static fields, `obj` should be an instance of a class that inherits or declares the field.</span></span> <span data-ttu-id="eb145-410">として、新しい値が渡される、`Object`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-410">The new value is passed as an `Object`.</span></span> <span data-ttu-id="eb145-411">たとえば、フィールドの型がブール値、インスタンスの`Object`値が渡されると、適切なブール値。</span><span class="sxs-lookup"><span data-stu-id="eb145-411">For example, if the field's type is Boolean, an instance of `Object` with the appropriate Boolean value is passed.</span></span> <span data-ttu-id="eb145-412">値を設定する前に`SetValue`ユーザーがアクセス許可を持っているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="eb145-412">Before setting the value, `SetValue` checks to see if the user has access permission.</span></span> <span data-ttu-id="eb145-413">この最終的なメソッドは、次を呼び出すための便利なメソッドでは`SetValue`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="eb145-413">This final method is a convenience method for calling the following `SetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb145-414">完全に信頼されたコードでは、アクセスし、private のコンス トラクター、メソッド、フィールド、およびリフレクションを使用してプロパティを起動するために必要なアクセス許可を持っています。</span><span class="sxs-lookup"><span data-stu-id="eb145-414">Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb145-415">以降で、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、呼び出し元が許可されている場合は、非パブリック メンバーをアクセスに使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグし、非パブリック メンバーの許可セットが、呼び出し元に制限されている場合は、セット、またはそのサブセットを付与します。</span><span class="sxs-lookup"><span data-stu-id="eb145-415">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="eb145-416">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="eb145-416">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="eb145-417">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="eb145-417">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb145-418">次の例フィールドの値を設定を取得し、値が表示されます、フィールドを変更および、結果が表示されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-418">The following example sets the value of a field, gets and displays the value, modifies the field, and displays the result.</span></span>  
  
 [!code-cpp[FieldInfo_SetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_SetValue/CPP/fieldinfo_setvalue.cpp#1)]
 [!code-csharp[FieldInfo_SetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_SetValue/CS/fieldinfo_setvalue.cs#1)]
 [!code-vb[FieldInfo_SetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_SetValue/VB/fieldinfo_setvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FieldAccessException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="eb145-419">[Windows ストア アプリ用 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) または[ポータブル クラス ライブラリ](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)では、基本クラスの例外である <see cref="T:System.MemberAccessException" /> を代わりにキャッチします。</span>
              <span class="sxs-lookup">
                <span data-stu-id="eb145-419">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="eb145-420">呼び出し元には、このフィールドに対するアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-420">The caller does not have permission to access this field.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="eb145-421">[Windows ストア アプリ用 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) または[ポータブル クラス ライブラリ](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)では、<see cref="T:System.Exception" /> を代わりにキャッチします。</span>
              <span class="sxs-lookup">
                <span data-stu-id="eb145-421">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <see cref="T:System.Exception" /> instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="eb145-422">
            <paramref name="obj" /> パラメーターは <see langword="null" /> で、そのフィールドはインスタンス フィールドです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-422">The <paramref name="obj" /> parameter is <see langword="null" /> and the field is an instance field.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eb145-423">このフィールドはオブジェクト上に存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-423">The field does not exist on the object.</span>
          </span>
          <span data-ttu-id="eb145-424">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-424">-or-</span>
          </span>
          <span data-ttu-id="eb145-425">
            <paramref name="value" /> パラメーターを変換してフィールドに格納することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-425">The <paramref name="value" /> parameter cannot be converted and stored in the field.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="eb145-426">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-426">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="eb145-427">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-427">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="eb145-428">初期化専用のフィールドを更新します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-428">for updating init-only fields.</span>
          </span>
          <span data-ttu-id="eb145-429">
            <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-429">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetValue(System::Object ^ obj, System::Object ^ value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="eb145-430">フィールド値が設定されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-430">The object whose field value will be set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="eb145-431">フィールドに代入する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-431">The value to assign to the field.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="eb145-432">必要なバインディングの種類 (<see langword="Binder.CreateInstance" /> や <see langword="Binder.ExactBinding" /> など) を指定する <see langword="Binder" /> のフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-432">A field of <see langword="Binder" /> that specifies the type of binding that is desired (for example, <see langword="Binder.CreateInstance" /> or <see langword="Binder.ExactBinding" />).</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="eb145-433">バインディング、引数型の強制型変換、リフレクションを通じたメンバーの呼び出しを有効にする一連のプロパティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-433">A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection.</span>
          </span>
          <span data-ttu-id="eb145-434">
            <c>バインダー</c>が <see langword="null" /> の場合は、<see langword="Binder.DefaultBinding" /> が使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-434">If <c>binder</c> is <see langword="null" />, then <see langword="Binder.DefaultBinding" /> is used.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="eb145-435">特定のカルチャに関するソフトウェア上の設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-435">The software preferences of a particular culture.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb145-436">派生クラスでオーバーライドされた場合に、指定したオブジェクトでサポートされているフィールドの値を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-436">When overridden in a derived class, sets the value of the field supported by the given object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-437">このメソッドは代入`value`このインスタンスによって反映されるフィールドに`obj`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-437">This method will assign `value` to the field reflected by this instance on `obj`.</span></span> <span data-ttu-id="eb145-438">フィールドが静的である場合`obj`は無視されます。</span><span class="sxs-lookup"><span data-stu-id="eb145-438">If the field is static, `obj` will be ignored.</span></span> <span data-ttu-id="eb145-439">非静的フィールドの`obj`フィールドを宣言または継承するクラスのインスタンスである必要があります。</span><span class="sxs-lookup"><span data-stu-id="eb145-439">For non-static fields, `obj` should be an instance of a class that inherits or declares the field.</span></span> <span data-ttu-id="eb145-440">として、新しい値が渡される、`Object`です。</span><span class="sxs-lookup"><span data-stu-id="eb145-440">The new value is passed as an `Object`.</span></span> <span data-ttu-id="eb145-441">たとえば、フィールドの型が`Boolean`のインスタンス`Object`値が渡されると、適切なブール値。</span><span class="sxs-lookup"><span data-stu-id="eb145-441">For example, if the field's type is `Boolean`, an instance of `Object` with the appropriate Boolean value is passed.</span></span> <span data-ttu-id="eb145-442">値を設定する前に`SetValue`ユーザーがアクセス許可を持っているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="eb145-442">Before setting the value, `SetValue` checks to see if the user has access permission.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb145-443">完全に信頼されたコードでは、アクセスし、private のコンス トラクター、メソッド、フィールド、およびリフレクションを使用してプロパティを起動するために必要なアクセス許可を持っています。</span><span class="sxs-lookup"><span data-stu-id="eb145-443">Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb145-444">以降で、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、呼び出し元が許可されている場合は、非パブリック メンバーをアクセスに使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグし、非パブリック メンバーの許可セットが、呼び出し元に制限されている場合は、セット、またはそのサブセットを付与します。</span><span class="sxs-lookup"><span data-stu-id="eb145-444">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="eb145-445">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="eb145-445">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="eb145-446">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="eb145-446">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FieldAccessException">
          <span data-ttu-id="eb145-447">呼び出し元には、このフィールドに対するアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-447">The caller does not have permission to access this field.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="eb145-448">
            <paramref name="obj" /> パラメーターは <see langword="null" /> で、そのフィールドはインスタンス フィールドです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-448">The <paramref name="obj" /> parameter is <see langword="null" /> and the field is an instance field.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eb145-449">このフィールドはオブジェクト上に存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-449">The field does not exist on the object.</span>
          </span>
          <span data-ttu-id="eb145-450">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-450">-or-</span>
          </span>
          <span data-ttu-id="eb145-451">
            <paramref name="value" /> パラメーターを変換してフィールドに格納することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-451">The <paramref name="value" /> parameter cannot be converted and stored in the field.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="eb145-452">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-452">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="eb145-453">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-453">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="eb145-454">初期化専用のフィールドを更新します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-454">for updating init-only fields.</span>
          </span>
          <span data-ttu-id="eb145-455">
            <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-455">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetValueDirect">
      <MemberSignature Language="C#" Value="public virtual void SetValueDirect (TypedReference obj, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValueDirect(valuetype System.TypedReference obj, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetValueDirect (obj As TypedReference, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetValueDirect(TypedReference obj, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.SetValueDirect(System.TypedReference,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.TypedReference" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="eb145-456">場所へのマネージ ポインターをカプセル化する <see cref="T:System.TypedReference" /> 構造体と、その場所に格納できる型のランタイム表現。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-456">A <see cref="T:System.TypedReference" /> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="eb145-457">フィールドに代入する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-457">The value to assign to the field.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb145-458">指定したオブジェクトでサポートされているフィールドの値を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-458">Sets the value of the field supported by the given object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eb145-459">以降で、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、呼び出し元が許可されている場合は、非パブリック メンバーをアクセスに使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグし、非パブリック メンバーの許可セットが、呼び出し元に制限されている場合は、セット、またはそのサブセットを付与します。</span><span class="sxs-lookup"><span data-stu-id="eb145-459">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="eb145-460">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="eb145-460">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="eb145-461">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="eb145-461">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" />
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="eb145-462">呼び出し元は、共通言語仕様 (CLS) の代替が必要ですが、代わりにこのメソッドを呼び出しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-462">The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="eb145-463">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-463">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="eb145-464">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-464">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _FieldInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._FieldInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _FieldInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_FieldInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="eb145-465">将来使用するために予約されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-465">Reserved for future use.</span>
          </span>
          <span data-ttu-id="eb145-466">IID_NULL にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-466">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="eb145-467">マッピング対象として渡される名前の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-467">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="eb145-468">マッピングされる名前のカウント。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-468">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="eb145-469">名前を解釈するロケール コンテキスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-469">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="eb145-470">名前に対応する ID を受け取る、呼び出し元が割り当てた配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-470">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb145-471">一連の名前を対応する一連のディスパッチ識別子に割り当てます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-471">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-472">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="eb145-472">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="eb145-473">詳細については`IDispatch::GetIDsOfNames`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="eb145-473">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="eb145-474">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-474">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.GetType">
      <MemberSignature Language="C#" Value="Type _FieldInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._FieldInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _FieldInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._FieldInfo.GetType() = System::Runtime::InteropServices::_FieldInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eb145-475">
            <see cref="T:System.Type" /> 型を表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-475">Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.FieldInfo" /> type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb145-476">
            <see cref="T:System.Type" /> 型を表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-476">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.FieldInfo" /> type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _FieldInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._FieldInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _FieldInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._FieldInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_FieldInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="eb145-477">返される型情報。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-477">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="eb145-478">型情報のロケール ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-478">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="eb145-479">要求された型情報オブジェクトへのポインターを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-479">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb145-480">オブジェクトの型情報を取得します。この型情報を使用して、インターフェイスの型情報を取得できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-480">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-481">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="eb145-481">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="eb145-482">詳細については`IDispatch::GetTypeInfo`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="eb145-482">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="eb145-483">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-483">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _FieldInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _FieldInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_FieldInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="eb145-484">オブジェクトにより提供される型タイプ情報インターフェイスの数を受け取る場所を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-484">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb145-485">オブジェクトが提供する型情報インターフェイスの数 (0 または 1) を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-485">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-486">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="eb145-486">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="eb145-487">詳細については`IDispatch::GetTypeInfoCount`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="eb145-487">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="eb145-488">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-488">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.Invoke">
      <MemberSignature Language="C#" Value="void _FieldInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._FieldInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _FieldInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._FieldInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_FieldInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="eb145-489">メンバーを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-489">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="eb145-490">将来使用するために予約されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-490">Reserved for future use.</span>
          </span>
          <span data-ttu-id="eb145-491">IID_NULL にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-491">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="eb145-492">引数を解釈する対象のロケール コンテキスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-492">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="eb145-493">呼び出しのコンテキストを記述するフラグ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-493">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="eb145-494">引数の配列、名前付き引数の DISPID の配列、配列内の要素数のカウントを格納している構造体へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-494">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="eb145-495">結果が格納される場所へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-495">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="eb145-496">例外情報を格納する構造体へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-496">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="eb145-497">エラーが存在する最初の引数のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-497">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb145-498">オブジェクトによって公開されたプロパティおよびメソッドへのアクセスを提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-498">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb145-499">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="eb145-499">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="eb145-500">詳細については`IDispatch::Invoke`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="eb145-500">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="eb145-501">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb145-501">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>