<Type Name="MethodBase" FullName="System.Reflection.MethodBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="63e238ae23ee913c5427fa9a2513f08755393cde" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70324609" /></Metadata><TypeSignature Language="C#" Value="public abstract class MethodBase : System.Reflection.MemberInfo, System.Runtime.InteropServices._MethodBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit MethodBase extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._MethodBase" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MethodBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MethodBase&#xA;Inherits MemberInfo&#xA;Implements _MethodBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodBase abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_MethodBase" />
  <TypeSignature Language="F#" Value="type MethodBase = class&#xA;    inherit MemberInfo&#xA;    interface _MethodBase" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._MethodBase</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MethodBase))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e3cdc-101">メソッドとコンストラクターに関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-101">Provides information about methods and constructors.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-102">`MethodBase`は、および<xref:System.Reflection.MethodInfo> <xref:System.Reflection.ConstructorInfo>の基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-102">`MethodBase` is the base class of <xref:System.Reflection.MethodInfo> and <xref:System.Reflection.ConstructorInfo>.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="e3cdc-103">継承者に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-103">for full trust for inheritors.</span></span> <span data-ttu-id="e3cdc-104">このクラスを、部分的に信頼されているコードが継承することはできません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-104">This class cannot be inherited by partially trusted code.</span></span></permission>
    <threadsafe><span data-ttu-id="e3cdc-105">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-105">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="e3cdc-106">から<see langword="MethodBase" /> <see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" />継承する場合は<see cref="P:System.Reflection.MethodBase.MethodHandle" /> <see cref="M:System.Reflection.MethodBase.GetParameters" /> <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> 、、<see cref="P:System.Reflection.MemberInfo.DeclaringType" />、、 、、<see cref="P:System.Reflection.MemberInfo.MemberType" />、、、、の各メンバーをオーバーライドする必要があります。 <see cref="P:System.Reflection.MethodBase.Attributes" /> <see cref="P:System.Reflection.MemberInfo.Name" /> <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />、 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />、および<see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-106">When you inherit from <see langword="MethodBase" />, you must override the following members: <see cref="M:System.Reflection.MethodBase.GetParameters" />, <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" />, <see cref="P:System.Reflection.MethodBase.MethodHandle" />, <see cref="P:System.Reflection.MethodBase.Attributes" />, <see cref="P:System.Reflection.MemberInfo.Name" />, <see cref="P:System.Reflection.MemberInfo.DeclaringType" />, <see cref="P:System.Reflection.MemberInfo.MemberType" />, <see cref="P:System.Reflection.MemberInfo.ReflectedType" />, <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />, <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />, and <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />.</span></span></para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MethodBase ();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.#ctor" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MethodBase();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cdc-107"><see cref="T:System.Reflection.MethodBase" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-107">Initializes a new instance of the <see cref="T:System.Reflection.MethodBase" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e3cdc-108">などの機構を<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />使用して遅延バインディングが呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-108">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e3cdc-109"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e3cdc-109">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.MethodAttributes" Usage="System.Reflection.MethodBase.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-110">このメソッドに関連付けられている属性を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-110">Gets the attributes associated with this method.</span></span></summary>
        <value><span data-ttu-id="e3cdc-111"><see cref="T:System.Reflection.MethodAttributes" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-111">One of the <see cref="T:System.Reflection.MethodAttributes" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-112">すべてのメンバーには、特定の種類のメンバーに対して定義されている一連の属性があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-112">All members have a set of attributes, which are defined in relation to the specific type of member.</span></span>  
  
 <span data-ttu-id="e3cdc-113">を取得<xref:System.Reflection.MethodAttributes>するには、最初に型を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-113">To get the <xref:System.Reflection.MethodAttributes>, first get the type.</span></span> <span data-ttu-id="e3cdc-114">型からメソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-114">From the type, get the method.</span></span> <span data-ttu-id="e3cdc-115">メソッドから、 <xref:System.Reflection.MethodAttributes>を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-115">From the method, get the <xref:System.Reflection.MethodAttributes>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-116">次のコード例では、ユーザー定義メソッド Mymethod の属性を表示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-116">The following code example displays the attributes of the user-defined method Mymethod.</span></span>  
  
 [!code-cpp[Classic MethodBase.Attributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.Attributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.Attributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/VB/source.vb#1)]  
  
 <span data-ttu-id="e3cdc-117">このコードを実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-117">This code produces the following output:</span></span>  
  
 <span data-ttu-id="e3cdc-118">MethodBase サンプル</span><span class="sxs-lookup"><span data-stu-id="e3cdc-118">Reflection.MethodBase.Attributes Sample</span></span>  
  
 <span data-ttu-id="e3cdc-119">Mymethodbase = Void Mymethod(Int32, System.String ByRef, System.String ByRef)</span><span class="sxs-lookup"><span data-stu-id="e3cdc-119">Mymethodbase = Void Mymethod(Int32, System.String ByRef, System.String ByRef)</span></span>  
  
 <span data-ttu-id="e3cdc-120">PrivateScope</span><span class="sxs-lookup"><span data-stu-id="e3cdc-120">PrivateScope</span></span>  
  
 <span data-ttu-id="e3cdc-121">しない</span><span class="sxs-lookup"><span data-stu-id="e3cdc-121">FamANDAssem</span></span>  
  
 <span data-ttu-id="e3cdc-122">ファミリ</span><span class="sxs-lookup"><span data-stu-id="e3cdc-122">Family</span></span>  
  
 <span data-ttu-id="e3cdc-123">Public</span><span class="sxs-lookup"><span data-stu-id="e3cdc-123">Public</span></span>  
  
 <span data-ttu-id="e3cdc-124">HideBySig</span><span class="sxs-lookup"><span data-stu-id="e3cdc-124">HideBySig</span></span>  
  
 <span data-ttu-id="e3cdc-125">ReuseSlot</span><span class="sxs-lookup"><span data-stu-id="e3cdc-125">ReuseSlot</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="e3cdc-126"><see langword="private" /> <see langword="public" /> <see langword="virtual" /> <see langword="final" />プロパティを使用して、メソッドが、、、などであるかどうかを判断します。 <see cref="P:System.Reflection.MethodBase.Attributes" /></span><span class="sxs-lookup"><span data-stu-id="e3cdc-126">Use the <see cref="P:System.Reflection.MethodBase.Attributes" /> property to determine whether a method is <see langword="public" />, <see langword="private" />, <see langword="final" />, <see langword="virtual" />, and so on.</span></span></para></block>
        <altmember cref="T:System.Reflection.MethodAttributes" />
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberSignature Language="F#" Value="member this.CallingConvention : System.Reflection.CallingConventions" Usage="System.Reflection.MethodBase.CallingConvention" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.CallingConvention</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-127">このメソッドの呼び出し規約を示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-127">Gets a value indicating the calling conventions for this method.</span></span></summary>
        <value><span data-ttu-id="e3cdc-128">このメソッドの <see cref="T:System.Reflection.CallingConventions" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-128">The <see cref="T:System.Reflection.CallingConventions" /> for this method.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Reflection.CallingConventions" />
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public virtual bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsGenericParameters : bool" Usage="System.Reflection.MethodBase.ContainsGenericParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-129">ジェネリック メソッドに、割り当てられていないジェネリック型パラメーターが含まれているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-129">Gets a value indicating whether the generic method contains unassigned generic type parameters.</span></span></summary>
        <value><span data-ttu-id="e3cdc-130">現在の <see cref="T:System.Reflection.MethodBase" /> オブジェクトが、割り当てられていないジェネリック型パラメーターを含むジェネリック メソッドを表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-130"><see langword="true" /> if the current <see cref="T:System.Reflection.MethodBase" /> object represents a generic method that contains unassigned generic type parameters; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-131">ジェネリックメソッドを呼び出すことができるのは、ジェネリック型の定義がない場合、またはメソッド自体またはそれを囲む型の型引数に構築されたオープン型の型が存在しない場合のみです。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-131">A generic method can be invoked only if there are no generic type definitions or open constructed types in the type arguments of the method itself or in any enclosing types.</span></span> <span data-ttu-id="e3cdc-132">型は任意に複雑になる可能性があるため、この再帰的な決定を行うことは困難です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-132">Because types can be arbitrarily complex, making this recursive determination is difficult.</span></span> <span data-ttu-id="e3cdc-133">利便性を高めるため、およびエラーの可能性を減らすため<xref:System.Reflection.MethodBase.ContainsGenericParameters%2A>に、プロパティは、呼び出し可能な終了した構築済みメソッドと、作成できない構築済みメソッドを区別するための標準的な方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-133">For convenience, and to reduce the chance of error, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed methods, which can be invoked, and open constructed methods, which cannot.</span></span> <span data-ttu-id="e3cdc-134">プロパティが<xref:System.Reflection.MethodBase.ContainsGenericParameters%2A>を返す`true`場合、メソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-134">If the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`, the method cannot be invoked.</span></span>  
  
 <span data-ttu-id="e3cdc-135">プロパティ<xref:System.Reflection.MethodBase.ContainsGenericParameters%2A>は、型パラメーターを再帰的に検索します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-135">The <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property searches recursively for type parameters.</span></span> <span data-ttu-id="e3cdc-136">たとえば、メソッド自体が`true`ジェネリックではない場合でも`A<T>` 、`A(Of T)`オープン型の任意のメソッド (Visual Basic) に対してを返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-136">For example, it returns `true` for any method in an open type `A<T>` (`A(Of T)` in Visual Basic), even though the method itself is not generic.</span></span> <span data-ttu-id="e3cdc-137">これは、このようなメソッド<xref:System.Reflection.MethodBase.IsGenericMethod%2A>に対してを`false`返すプロパティの動作と比較します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-137">Contrast this with the behavior of the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property, which returns `false` for such a method.</span></span>  
  
 <span data-ttu-id="e3cdc-138">同様に、 <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A>プロパティパラメーターは`true` 、コンストラクターが独自の型パラメーターを持つことができない場合でも、オープン型のコンストラクターに対してを返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-138">Similarly, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property parameter returns `true` for any constructor in an open type, even though constructors cannot have type parameters of their own.</span></span>  
  
 <span data-ttu-id="e3cdc-139">ジェネリックメソッドに固有の用語の不変条件の一覧については、 <xref:System.Reflection.MethodBase.IsGenericMethod%2A> 「」プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-139">For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property.</span></span> <span data-ttu-id="e3cdc-140">汎用リフレクションで使用されるその他の用語の不変条件の一覧につい<xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>ては、プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-140">For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethod" />
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" />
        <altmember cref="P:System.Reflection.MethodBase.ContainsGenericParameters" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="methodBase.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e3cdc-141">対象のインスタンスと比較する対象のオブジェクト、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-141">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="e3cdc-142">このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-142">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="e3cdc-143"><see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-143"><see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentMethod">
      <MemberSignature Language="C#" Value="public static System.Reflection.MethodBase GetCurrentMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MethodBase GetCurrentMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetCurrentMethod" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentMethod () As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::MethodBase ^ GetCurrentMethod();" />
      <MemberSignature Language="F#" Value="static member GetCurrentMethod : unit -&gt; System.Reflection.MethodBase" Usage="System.Reflection.MethodBase.GetCurrentMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cdc-144">現在実行中のメソッドを表す <see langword="MethodBase" /> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-144">Returns a <see langword="MethodBase" /> object representing the currently executing method.</span></span></summary>
        <returns><span data-ttu-id="e3cdc-145"><see cref="M:System.Reflection.MethodBase.GetCurrentMethod" /> は、実行中のメソッド内から呼び出され、そのメソッドに関する情報を返す、静的メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-145"><see cref="M:System.Reflection.MethodBase.GetCurrentMethod" /> is a static method that is called from within an executing method and that returns information about that method.</span></span>  
  
<span data-ttu-id="e3cdc-146">現在実行中のメソッドを表す <see langword="MethodBase" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-146">A <see langword="MethodBase" /> object representing the currently executing method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-147">現在実行中のメソッドがジェネリック型で定義されて<xref:System.Reflection.MethodInfo>いる場合、に<xref:System.Reflection.MethodBase.GetCurrentMethod%2A>よって返されるは、ジェネリック型定義から取得<xref:System.Reflection.MethodBase.ContainsGenericParameters%2A?displayProperty=nameWithType>さ`true`れます (つまり、がを返します)。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-147">If the currently executing method is defined on a generic type, the <xref:System.Reflection.MethodInfo> that is returned by <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> is obtained from the generic type definition (that is, <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A?displayProperty=nameWithType> returns `true`).</span></span> <span data-ttu-id="e3cdc-148">そのため、メソッドが呼び出されたときに使用された型引数は反映されません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-148">Therefore, it does not reflect the type arguments that were used when the method was called.</span></span> <span data-ttu-id="e3cdc-149">たとえば、メソッド`M()`がジェネリック型`C<T>` (`C(Of T)` Visual Basic `C<string>.M()``C(Of T).M()` <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> )で定義さ`C<T>.M()`れ、からが呼び出された場合、は (Visual Basic で)を返します。<xref:System.Reflection.MethodBase.GetCurrentMethod%2A></span><span class="sxs-lookup"><span data-stu-id="e3cdc-149">For example, if a method `M()` is defined on a generic type `C<T>` (`C(Of T)` in Visual Basic), and <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> is called from `C<string>.M()`, then <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> returns `C<T>.M()` (`C(Of T).M()` in Visual Basic).</span></span>  
  
 <span data-ttu-id="e3cdc-150">現在実行中のメソッドがジェネリックメソッドである<xref:System.Reflection.MethodBase.GetCurrentMethod%2A>場合、はジェネリックメソッド定義を返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-150">If the currently executing method is a generic method, <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> returns the generic method definition.</span></span> <span data-ttu-id="e3cdc-151">ジェネリックメソッドがジェネリック型で定義されている場合<xref:System.Reflection.MethodInfo>は、ジェネリック型定義からが取得されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-151">If the generic method is defined on a generic type, the <xref:System.Reflection.MethodInfo> is obtained from the generic type definition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-152">次の例では、2つの型を定義します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-152">The following example defines two types.</span></span> <span data-ttu-id="e3cdc-153">1つ目は非ジェネリッククラス`TestClass`であり、にはコンストラクター、という名前`GetValue`のメソッド、およびという名前`GetValue`の読み取り/書き込みプロパティが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-153">The first is a non-generic class, `TestClass`, includes a constructor, a method named `GetValue`, and a read-write property named `GetValue`.</span></span> <span data-ttu-id="e3cdc-154">2つ目は、コンストラクター `TestClass<T>` `GetValue` 、メソッド、およびジェネリックメソッドを`ConvertValue<Y>`含む、という名前のジェネリッククラスです。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-154">The second is a generic class named `TestClass<T>` that includes a constructor, a `GetValue` method, and a generic method, `ConvertValue<Y>`.</span></span> <span data-ttu-id="e3cdc-155">各コンストラクター、メソッド、およびプロパティアクセサーには、メソッドの<xref:System.Reflection.MethodBase.GetCurrentMethod%2A>呼び出しが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-155">Each constructor, method, and property accessor includes a call to the <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> method.</span></span>  
  
 [!code-csharp[System.Reflection.MethodBase.GetCurrentMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Reflection.MethodBase.GetCurrentMethod/cs/GetCurentMethod1.cs#1)]
 [!code-vb[System.Reflection.MethodBase.GetCurrentMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Reflection.MethodBase.GetCurrentMethod/vb/GetCurentMethod1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="e3cdc-156">このメンバーは、遅延バインディング メカニズムで呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-156">This member was invoked with a late-binding mechanism.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e3cdc-157">などの機構を<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />使用して遅延バインディングが呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-157">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e3cdc-158"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e3cdc-158">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericArguments : unit -&gt; Type[]&#xA;override this.GetGenericArguments : unit -&gt; Type[]" Usage="methodBase.GetGenericArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cdc-159">ジェネリック メソッドの型引数、またはジェネリック メソッドの定義の型パラメーターを表す <see cref="T:System.Type" /> オブジェクトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-159">Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</span></span></summary>
        <returns><span data-ttu-id="e3cdc-160">ジェネリック メソッドの型引数またはジェネリック メソッド定義の型パラメーターを表す <see cref="T:System.Type" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-160">An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</span></span> <span data-ttu-id="e3cdc-161">現在のメソッドがジェネリック メソッドではない場合は、空の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-161">Returns an empty array if the current method is not a generic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-162">返された配列の要素は、ジェネリックメソッドの型パラメーターのリストに出現する順序に従っています。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-162">The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.</span></span>  
  
-   <span data-ttu-id="e3cdc-163">現在のメソッドが閉じて構築されたメソッド (つまり、 <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A>プロパティが`false`を返す) の場合、 <xref:System.Reflection.MethodBase.GetGenericArguments%2A>メソッドによって返される配列には、ジェネリックメソッドのジェネリック型パラメーターに割り当てられた型が含まれます。カスタム.</span><span class="sxs-lookup"><span data-stu-id="e3cdc-163">If the current method is a closed constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Reflection.MethodBase.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic method definition.</span></span>  
  
-   <span data-ttu-id="e3cdc-164">現在のメソッドがジェネリックメソッドの定義である場合、配列には型パラメーターが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-164">If the current method is a generic method definition, the array contains the type parameters.</span></span>  
  
-   <span data-ttu-id="e3cdc-165">現在のメソッドがオープン構築メソッド (つまり、 <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A>プロパティがを返す`true`) である場合、特定の型が一部の型パラメーターに割り当てられ、外側のジェネリック型の型パラメーターが他の型に割り当てられています。パラメーターの配列には、型と型の両方のパラメーターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-165">If the current method is an open constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters.</span></span> <span data-ttu-id="e3cdc-166">プロパティを<xref:System.Type.IsGenericParameter%2A>使用して、これらの値を区別します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-166">Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart.</span></span> <span data-ttu-id="e3cdc-167">このシナリオのデモについては、 <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A>プロパティのコード例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-167">For a demonstration of this scenario, see the code example provided for the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property.</span></span>  
  
 <span data-ttu-id="e3cdc-168">.NET Framework Version 2.0 では、ジェネリック コンストラクターはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-168">Generic constructors are not supported in the .NET Framework version 2.0.</span></span> <span data-ttu-id="e3cdc-169">派生クラスで<xref:System.NotSupportedException>オーバーライドされていない場合、このプロパティはをスローするため、現在のインスタンスの<xref:System.Reflection.ConstructorInfo>型がの場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-169">This property throws <xref:System.NotSupportedException> if not overridden in a derived class, so an exception is thrown if the current instance is of type <xref:System.Reflection.ConstructorInfo>.</span></span>  
  
 <span data-ttu-id="e3cdc-170">ジェネリックメソッドに固有の用語の不変条件の一覧については、 <xref:System.Reflection.MethodBase.IsGenericMethod%2A> 「」プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-170">For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property.</span></span> <span data-ttu-id="e3cdc-171">汎用リフレクションで使用されるその他の用語の不変条件の一覧につい<xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>ては、プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-171">For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3cdc-172">現在のオブジェクトは <see cref="T:System.Reflection.ConstructorInfo" /> です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-172">The current object is a <see cref="T:System.Reflection.ConstructorInfo" />.</span></span> <span data-ttu-id="e3cdc-173">.NET Framework Version 2.0 では、ジェネリック コンストラクターはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-173">Generic constructors are not supported in the .NET Framework version 2.0.</span></span> <span data-ttu-id="e3cdc-174">このメソッドが派生クラスでオーバーライドされない場合、この例外は既定の動作です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-174">This exception is the default behavior if this method is not overridden in a derived class.</span></span></exception>
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" />
        <altmember cref="M:System.Reflection.MethodInfo.GetGenericArguments" />
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethod" />
        <altmember cref="P:System.Type.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="methodBase.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cdc-175">このインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-175">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="e3cdc-176">32 ビット符号付き整数ハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-176">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodBody">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodBody GetMethodBody ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBody GetMethodBody() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetMethodBody" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMethodBody () As MethodBody" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodBody ^ GetMethodBody();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodBody : unit -&gt; System.Reflection.MethodBody&#xA;override this.GetMethodBody : unit -&gt; System.Reflection.MethodBody" Usage="methodBase.GetMethodBody " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBody</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cdc-177">派生クラスでオーバーライドされると、現在のメソッドの MSIL ストリーム、ローカル変数、および例外にアクセスできるようにする <see cref="T:System.Reflection.MethodBody" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-177">When overridden in a derived class, gets a <see cref="T:System.Reflection.MethodBody" /> object that provides access to the MSIL stream, local variables, and exceptions for the current method.</span></span></summary>
        <returns><span data-ttu-id="e3cdc-178">現在のメソッドの MSIL ストリーム、ローカル変数、および例外にアクセスできるようにする <see cref="T:System.Reflection.MethodBody" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-178">A <see cref="T:System.Reflection.MethodBody" /> object that provides access to the MSIL stream, local variables, and exceptions for the current method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-179">を使用するためにをオーバーライド<xref:System.Reflection.MethodBase.GetMethodBody%2A>する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-179">You do not have to override the <xref:System.Reflection.MethodBase.GetMethodBody%2A> in order to use it.</span></span> <span data-ttu-id="e3cdc-180">メソッドは、これら<xref:System.Reflection.MethodBase.GetMethodBody%2A>のクラスの<xref:System.Reflection.ConstructorInfo>ランタイムバージョンでオーバーライドされるため、およびオブジェクトに対し<xref:System.Reflection.MethodInfo>てメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-180">You can call the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method on <xref:System.Reflection.MethodInfo> and <xref:System.Reflection.ConstructorInfo> objects, because the method is overridden in the runtime versions of these classes.</span></span> <span data-ttu-id="e3cdc-181">たとえば、クラスの<xref:System.Reflection.MethodInfo>ランタイムバージョンはクラス<xref:System.Reflection.MethodInfo>から派生し、次<xref:System.Reflection.MethodBase>にクラスから派生します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-181">For example, the runtime version of the <xref:System.Reflection.MethodInfo> class derives from the <xref:System.Reflection.MethodInfo> class, which in turn derives from the <xref:System.Reflection.MethodBase> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-182">という名前`MethodBodyExample`のテストメソッドを定義し、そのローカル変数情報と例外処理句を表示するコード例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-182">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="e3cdc-183">メソッドは、テストメソッドのオブジェクト<xref:System.Reflection.MethodBody>を取得するために使用されます。 <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="e3cdc-183">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span>  
  
 <span data-ttu-id="e3cdc-184">プロパティ<xref:System.Reflection.MethodBody.LocalVariables%2A>は、オブジェクトの<xref:System.Reflection.LocalVariableInfo>一覧を取得し、その型とインデックスの順序を表示するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-184">The <xref:System.Reflection.MethodBody.LocalVariables%2A> property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and display their types and index order.</span></span> <span data-ttu-id="e3cdc-185">プロパティ<xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>は、例外処理句の一覧を取得するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-185">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3cdc-186">一部のコンピューター言語では<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> 、句を生成できません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-186">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="e3cdc-187">Visual Basic の例では、Visual Basic `When`式を使用してフィルター句を示しています。これは、他の言語の例では省略されています。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-187">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 [!code-cpp[MethodBody#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#1)]
 [!code-csharp[MethodBody#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#1)]
 [!code-vb[MethodBody#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e3cdc-188">派生クラスでオーバーライドされない場合、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-188">This method is invalid unless overridden in a derived class.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e3cdc-189">メンバーのメタデータにアクセスするための。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-189">for the access to metadata for members.</span></span> <span data-ttu-id="e3cdc-190">アクセス許可値:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="e3cdc-190">Permission value: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethodFromHandle">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e3cdc-191">指定したハンドルを使用してメソッドの情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-191">Gets method information using the specified handle.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethodFromHandle">
      <MemberSignature Language="C#" Value="public static System.Reflection.MethodBase GetMethodFromHandle (RuntimeMethodHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MethodBase GetMethodFromHandle(valuetype System.RuntimeMethodHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMethodFromHandle (handle As RuntimeMethodHandle) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::MethodBase ^ GetMethodFromHandle(RuntimeMethodHandle handle);" />
      <MemberSignature Language="F#" Value="static member GetMethodFromHandle : RuntimeMethodHandle -&gt; System.Reflection.MethodBase" Usage="System.Reflection.MethodBase.GetMethodFromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeMethodHandle" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="e3cdc-192">メソッドのハンドル。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-192">The method's handle.</span></span></param>
        <summary><span data-ttu-id="e3cdc-193">メソッドの内部メタデータ表現 (ハンドル) を使用してメソッド情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-193">Gets method information by using the method's internal metadata representation (handle).</span></span></summary>
        <returns><span data-ttu-id="e3cdc-194">メソッドの情報が格納されている <see langword="MethodBase" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-194">A <see langword="MethodBase" /> containing information about the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-195">ハンドルは、取得されたアプリケーションドメインでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-195">Handles are valid only in the application domain in which they were obtained.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3cdc-196"><paramref name="handle" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-196"><paramref name="handle" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e3cdc-197">などの機構を<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />使用して遅延バインディングが呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-197">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e3cdc-198"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e3cdc-198">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodFromHandle">
      <MemberSignature Language="C#" Value="public static System.Reflection.MethodBase GetMethodFromHandle (RuntimeMethodHandle handle, RuntimeTypeHandle declaringType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MethodBase GetMethodFromHandle(valuetype System.RuntimeMethodHandle handle, valuetype System.RuntimeTypeHandle declaringType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMethodFromHandle (handle As RuntimeMethodHandle, declaringType As RuntimeTypeHandle) As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::MethodBase ^ GetMethodFromHandle(RuntimeMethodHandle handle, RuntimeTypeHandle declaringType);" />
      <MemberSignature Language="F#" Value="static member GetMethodFromHandle : RuntimeMethodHandle * RuntimeTypeHandle -&gt; System.Reflection.MethodBase" Usage="System.Reflection.MethodBase.GetMethodFromHandle (handle, declaringType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeMethodHandle" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="declaringType" Type="System.RuntimeTypeHandle" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="e3cdc-199">コンストラクターまたはメソッドの内部メタデータ表現へのハンドル。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-199">A handle to the internal metadata representation of a constructor or method.</span></span></param>
        <param name="declaringType"><span data-ttu-id="e3cdc-200">コンストラクターまたはメソッドを定義するジェネリック型へのハンドル。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-200">A handle to the generic type that defines the constructor or method.</span></span></param>
        <summary><span data-ttu-id="e3cdc-201">指定したジェネリック型の、指定したハンドルで表されるコンストラクターまたはメソッドの <see cref="T:System.Reflection.MethodBase" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-201">Gets a <see cref="T:System.Reflection.MethodBase" /> object for the constructor or method represented by the specified handle, for the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="e3cdc-202"><paramref name="declaringType" /> で指定したジェネリック型の、<paramref name="handle" /> で指定したメソッドまたはコンストラクターを表す <see cref="T:System.Reflection.MethodBase" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-202">A <see cref="T:System.Reflection.MethodBase" /> object representing the method or constructor specified by <paramref name="handle" />, in the generic type specified by <paramref name="declaringType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-203">ハンドルは、取得されたアプリケーションドメインでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-203">Handles are valid only in the application domain in which they were obtained.</span></span>  
  
 <span data-ttu-id="e3cdc-204">ジェネリック<xref:System.RuntimeMethodHandle>型のコンストラクターまたはメソッドの構造体は、ジェネリック型<xref:System.Reflection.MethodBase>の型パラメーターに指定された型に応じて、異なるオブジェクトを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-204">A <xref:System.RuntimeMethodHandle> structure for a constructor or method of a generic type can represent different <xref:System.Reflection.MethodBase> objects, depending on the types specified for the type parameters of the generic type.</span></span> <span data-ttu-id="e3cdc-205">たとえば、(`class G(Of T)` Visual Basic `class G<T>` C++ `T`の) に型`G<int>` を返すメソッドがある場合、などの構築されたクラスのメソッドのオブジェクトは、<xref:System.Reflection.MethodBase> `generic <T> ref class G` <xref:System.Reflection.MethodBase>ジェネリック型定義内のそのメソッドのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-205">For example, if `class G<T>` (`class G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) has a method that returns type `T`, the <xref:System.Reflection.MethodBase> object for that method in a constructed class such as `G<int>` is different from the <xref:System.Reflection.MethodBase> object for that method in the generic type definition.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3cdc-206"><paramref name="handle" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-206"><paramref name="handle" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e3cdc-207">などの機構を<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />使用して遅延バインディングが呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-207">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e3cdc-208"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e3cdc-208">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImplementationFlags : unit -&gt; System.Reflection.MethodImplAttributes" Usage="methodBase.GetMethodImplementationFlags " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetMethodImplementationFlags</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cdc-209">派生クラスでオーバーライドされると、新しい <see cref="T:System.Reflection.MethodImplAttributes" /> フラグを返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-209">When overridden in a derived class, returns the <see cref="T:System.Reflection.MethodImplAttributes" /> flags.</span></span></summary>
        <returns><span data-ttu-id="e3cdc-210"><see langword="MethodImplAttributes" /> フラグ。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-210">The <see langword="MethodImplAttributes" /> flags.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e3cdc-211">次の例では、動的アセンブリでコンストラクターを定義し、 <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A>メソッドを使用して、既定で設定されているメソッド実装フラグを表示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-211">The following example defines a constructor in a dynamic assembly and then uses the <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A> method to display the method implementation flags that are set by default.</span></span>  
  
 [!code-cpp[ConstructorBuilder_GetModule_4#3](~/samples/snippets/cpp/VS_Snippets_CLR/ConstructorBuilder_GetModule_4/CPP/constructorbuilder_getmodule_4.cpp#3)]
 [!code-csharp[ConstructorBuilder_GetModule_4#3](~/samples/snippets/csharp/VS_Snippets_CLR/ConstructorBuilder_GetModule_4/CS/constructorbuilder_getmodule_4.cs#3)]
 [!code-vb[ConstructorBuilder_GetModule_4#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ConstructorBuilder_GetModule_4/VB/constructorbuilder_getmodule_4.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e3cdc-212">などの機構を<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />使用して遅延バインディングが呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-212">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e3cdc-213"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e3cdc-213">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodImplAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="methodBase.GetParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cdc-214">派生クラスによってオーバーライドされた場合、指定したメソッドまたはコンストラクターのパラメーターを取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-214">When overridden in a derived class, gets the parameters of the specified method or constructor.</span></span></summary>
        <returns><span data-ttu-id="e3cdc-215">この <see langword="MethodBase" /> インスタンスでリフレクションされたメソッド (またはコンストラクター) のシグネチャと一致する情報を格納している <see langword="ParameterInfo" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-215">An array of type <see langword="ParameterInfo" /> containing information that matches the signature of the method (or constructor) reflected by this <see langword="MethodBase" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e3cdc-216">次の例では<xref:System.Reflection.MethodBase.GetParameters%2A> 、メソッドを使用して、 `Invoke`デリゲートのメソッドのパラメーターを取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-216">The following example uses the <xref:System.Reflection.MethodBase.GetParameters%2A> method to retrieve the parameters of the `Invoke` method of a delegate.</span></span>  
  
 <span data-ttu-id="e3cdc-217">この例では、 `MyDelegate`という名前のデリゲートと、型`MyDelegate`のという名前`ev`のイベントを定義します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-217">The example defines a delegate named `MyDelegate` and an event named `ev` of type `MyDelegate`.</span></span> <span data-ttu-id="e3cdc-218">`Main`メソッドのコードは、イベントのデリゲート型を取得し、 `Invoke`デリゲート型のメソッドを取得して、パラメーターを取得して表示することによって、イベントシグネチャを検出します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-218">The code in the `Main` method discovers the event signature by getting the delegate type of the event, getting the `Invoke` method of the delegate type, and then retrieving and displaying the parameters.</span></span>  
  
 [!code-cpp[eventarg#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventArg/CPP/eventarg.cpp#1)]
 [!code-csharp[eventarg#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventArg/CS/eventarg.cs#1)]
 [!code-vb[eventarg#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventArg/VB/eventarg.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e3cdc-219">などの機構を<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />使用して遅延バインディングが呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-219">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e3cdc-220"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e3cdc-220">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.ParameterInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="methodBase.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e3cdc-221">この <see langword="MethodInfo" /> インスタンスがリフレクションするメソッドまたはコンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-221">Invokes the method or constructor reflected by this <see langword="MethodInfo" /> instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public virtual object Invoke (object obj, object[] parameters);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(object obj, object[] parameters) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Invoke (obj As Object, parameters As Object()) As Object" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Invoke(System::Object ^ obj, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Invoke : obj * obj[] -&gt; obj&#xA;override this.Invoke : obj * obj[] -&gt; obj" Usage="methodBase.Invoke (obj, parameters)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public object Invoke (object obj, object[] parameters);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(object obj, object[] parameters) cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (obj As Object, parameters As Object()) As Object" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Object ^ obj, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="member this.Invoke : obj * obj[] -&gt; obj" Usage="methodBase.Invoke (obj, parameters)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-2.0;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.Invoke(System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e3cdc-222">メソッドまたはコンストラクターを呼び出す対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-222">The object on which to invoke the method or constructor.</span></span> <span data-ttu-id="e3cdc-223">メソッドが静的な場合、この引数は無視されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-223">If a method is static, this argument is ignored.</span></span> <span data-ttu-id="e3cdc-224">コンストラクターが静的である場合、この引数は <see langword="null" /> またはそのコンストラクターを定義するクラスのインスタンスであることが必要です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-224">If a constructor is static, this argument must be <see langword="null" /> or an instance of the class that defines the constructor.</span></span></param>
        <param name="parameters"><span data-ttu-id="e3cdc-225">呼び出されたメソッドまたはコンストラクターの引数リスト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-225">An argument list for the invoked method or constructor.</span></span> <span data-ttu-id="e3cdc-226">これは、呼び出されるメソッドまたはコンストラクターのパラメーターと同じ数、順序、および型のオブジェクトの配列です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-226">This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked.</span></span> <span data-ttu-id="e3cdc-227">パラメーターがない場合は、<paramref name="parameters" /> は <see langword="null" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-227">If there are no parameters, <paramref name="parameters" /> should be <see langword="null" />.</span></span>  
  
<span data-ttu-id="e3cdc-228">このインスタンスが表すメソッドまたはコンストラクターが <see langword="ref" /> パラメーター (Visual Basic では <see langword="ByRef" />) を受け取る場合、このパラメーターには、この関数を使用してメソッドまたはコンストラクターを呼び出すために特別な属性が必要ありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-228">If the method or constructor represented by this instance takes a <see langword="ref" /> parameter (<see langword="ByRef" /> in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function.</span></span> <span data-ttu-id="e3cdc-229">この配列の中で、何らかの値で明示的に初期化されないオブジェクトには、そのオブジェクト型の既定値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-229">Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.</span></span> <span data-ttu-id="e3cdc-230">参照型の要素の場合、この値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-230">For reference-type elements, this value is <see langword="null" />.</span></span> <span data-ttu-id="e3cdc-231">値型の要素の場合、この値は、実際の要素の型に応じて、0、0.0、または <see langword="false" /> となります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-231">For value-type elements, this value is 0, 0.0, or <see langword="false" />, depending on the specific element type.</span></span></param>
        <summary><span data-ttu-id="e3cdc-232">指定されたパラメーターを使用して、現在のインスタンスが表すメソッドまたはコンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-232">Invokes the method or constructor represented by the current instance, using the specified parameters.</span></span></summary>
        <returns><span data-ttu-id="e3cdc-233">呼び出されたメソッド、またはコンストラクターの場合は <see langword="null" /> の戻り値を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-233">An object containing the return value of the invoked method, or <see langword="null" /> in the case of a constructor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-234"><xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29>これは、メソッドのオーバーロードを呼び出す便利なメソッドで<xref:System.Reflection.BindingFlags.Default> `culture`あり、 `null`および`binder`の場合にはを`invokeAttr`渡します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-234">This is a convenience method that calls the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method overload, passing <xref:System.Reflection.BindingFlags.Default> for `invokeAttr` and `null` for `binder` and `culture`.</span></span>  
  
 <span data-ttu-id="e3cdc-235">呼び出されたメソッドが例外をスローし<xref:System.Exception.GetBaseException%2A?displayProperty=nameWithType>た場合、メソッドは例外を返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-235">If the invoked method throws an exception, the <xref:System.Exception.GetBaseException%2A?displayProperty=nameWithType> method returns the exception.</span></span>  
  
 <span data-ttu-id="e3cdc-236"><xref:System.Reflection.MethodInfo>オブジェクトを使用して静的メソッドを呼び出すに`null`は`obj`、にを渡します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-236">To invoke a static method using its <xref:System.Reflection.MethodInfo> object, pass `null` for `obj`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3cdc-237">このメソッドオーバーロードを使用してインスタンスコンストラクターを呼び出すと、に指定`obj`されたオブジェクトが再初期化されます。つまり、すべてのインスタンス初期化子が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-237">If this method overload is used to invoke an instance constructor, the object supplied for `obj` is reinitialized; that is, all instance initializers are executed.</span></span> <span data-ttu-id="e3cdc-238">戻り値は `null` です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-238">The return value is `null`.</span></span> <span data-ttu-id="e3cdc-239">クラスコンストラクターが呼び出されると、クラスは再初期化されます。つまり、すべてのクラス初期化子が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-239">If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed.</span></span> <span data-ttu-id="e3cdc-240">戻り値は `null` です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-240">The return value is `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3cdc-241">以降では、このメソッドを使用して、呼び出し元が<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグで許可<xref:System.Security.Permissions.ReflectionPermission>されていて、非パブリックメンバーの許可セットが呼び出し元の許可セットまたはサブセットに制限されている場合に、非パブリックメンバーにアクセスできます。 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]著作.</span><span class="sxs-lookup"><span data-stu-id="e3cdc-241">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="e3cdc-242">(「[リフレクションのセキュリティに関する考慮事項」を](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-242">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="e3cdc-243">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-243">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 <span data-ttu-id="e3cdc-244">現在のメソッドのパラメーターが値型であり、の`parameters`対応する引数が`null`の場合、ランタイムは、値型のゼロ初期化インスタンスを渡します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-244">If a parameter of the current method is a value type, and the corresponding argument in `parameters` is `null`, the runtime passes a zero-initialized instance of the value type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-245">次のコード例は、リフレクションを使用した動的メソッド検索を示しています。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-245">The following code example demonstrates dynamic method lookup using reflection.</span></span> <span data-ttu-id="e3cdc-246">基底クラスの<xref:System.Reflection.MethodInfo>オブジェクトを使用して、派生クラスでオーバーライドされたメソッドを呼び出すことはできないことに注意してください。遅延バインディングではオーバーライドを解決できないためです。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-246">Note that you cannot use the <xref:System.Reflection.MethodInfo> object from the base class to invoke the overridden method in the derived class, because late binding cannot resolve overrides.</span></span>  
  
 [!code-cpp[Classic MethodBase.Invoke1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Invoke1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.Invoke1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Invoke1 Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.Invoke1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Invoke1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="e3cdc-247"><see href="https://go.microsoft.com/fwlink/?LinkID=247912">Windows ストア アプリ用 .NET</see> または<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">ポータブル クラス ライブラリ</see>では、<see cref="T:System.Exception" /> を代わりにキャッチします。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-247">In the<see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="e3cdc-248"><paramref name="obj" /> パラメーターは <see langword="null" /> で、メソッドは静的でありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-248">The <paramref name="obj" /> parameter is <see langword="null" /> and the method is not static.</span></span>  
  
<span data-ttu-id="e3cdc-249">- または -</span><span class="sxs-lookup"><span data-stu-id="e3cdc-249">-or-</span></span> 
<span data-ttu-id="e3cdc-250">メソッドは <paramref name="obj" /> のクラスで宣言も継承もされていません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-250">The method is not declared or inherited by the class of <paramref name="obj" />.</span></span>  
  
<span data-ttu-id="e3cdc-251">または</span><span class="sxs-lookup"><span data-stu-id="e3cdc-251">-or-</span></span> 
<span data-ttu-id="e3cdc-252">静的コンストラクターが呼び出されました。<paramref name="obj" /> は <see langword="null" /> でも、コンストラクターを宣言したクラスのインスタンスでもありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-252">A static constructor is invoked, and <paramref name="obj" /> is neither <see langword="null" /> nor an instance of the class that declared the constructor.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3cdc-253"><paramref name="parameters" /> 配列の要素は、このインスタンスがリフレクトしたメソッドまたはコンストラクターの署名と一致しません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-253">The elements of the <paramref name="parameters" /> array do not match the signature of the method or constructor reflected by this instance.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="e3cdc-254">呼び出されたメソッドまたはコンストラクターが例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-254">The invoked method or constructor throws an exception.</span></span>  
  
<span data-ttu-id="e3cdc-255">または</span><span class="sxs-lookup"><span data-stu-id="e3cdc-255">-or-</span></span> 
<span data-ttu-id="e3cdc-256">現在のインスタンスは、検証できないコードを含んでいる <see cref="T:System.Reflection.Emit.DynamicMethod" /> です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-256">The current instance is a <see cref="T:System.Reflection.Emit.DynamicMethod" /> that contains unverifiable code.</span></span> <span data-ttu-id="e3cdc-257"><see cref="T:System.Reflection.Emit.DynamicMethod" /> については、「解説」の「検証」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-257">See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="e3cdc-258"><paramref name="parameters" /> 配列に正しい数の引数がありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-258">The <paramref name="parameters" /> array does not have the correct number of arguments.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="e3cdc-259"><see href="https://go.microsoft.com/fwlink/?LinkID=247912">Windows ストア アプリ用 .NET</see> または<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">ポータブル クラス ライブラリ</see>では、基本クラスの例外である <see cref="T:System.MemberAccessException" /> を代わりにキャッチします。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-259">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="e3cdc-260">呼び出し元には、現在のインスタンスが表すメソッドまたはコンストラクターを実行するアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-260">The caller does not have permission to execute the method or constructor that is represented by the current instance.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e3cdc-261">メソッドを宣言する型は、オープン ジェネリック型です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-261">The type that declares the method is an open generic type.</span></span> <span data-ttu-id="e3cdc-262">つまり、<see cref="P:System.Type.ContainsGenericParameters" /> プロパティは、宣言する型に対して <see langword="true" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-262">That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" /> for the declaring type.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3cdc-263">現在のインスタンスは <see cref="T:System.Reflection.Emit.MethodBuilder" /> です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-263">The current instance is a <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e3cdc-264">などの機構を<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />使用して遅延バインディングが呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-264">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e3cdc-265"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e3cdc-265">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Missing" />
        <altmember cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public abstract object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="methodBase.Invoke (obj, invokeAttr, binder, parameters, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="parameters" Type="System.Object[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e3cdc-266">メソッドまたはコンストラクターを呼び出す対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-266">The object on which to invoke the method or constructor.</span></span> <span data-ttu-id="e3cdc-267">メソッドが静的な場合、この引数は無視されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-267">If a method is static, this argument is ignored.</span></span> <span data-ttu-id="e3cdc-268">コンストラクターが静的である場合、この引数は <see langword="null" /> またはそのコンストラクターを定義するクラスのインスタンスであることが必要です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-268">If a constructor is static, this argument must be <see langword="null" /> or an instance of the class that defines the constructor.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="e3cdc-269"><see cref="T:System.Reflection.BindingFlags" /> の 0 個以上のビット フラグの組み合わせであるビットマスク。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-269">A bitmask that is a combination of 0 or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span></span> <span data-ttu-id="e3cdc-270"><paramref name="binder" /> が <see langword="null" /> の場合、このパラメーターには <see cref="F:System.Reflection.BindingFlags.Default" /> 値が割り当てられるため、渡した値はすべて無視されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-270">If <paramref name="binder" /> is <see langword="null" />, this parameter is assigned the value <see cref="F:System.Reflection.BindingFlags.Default" />; thus, whatever you pass in is ignored.</span></span></param>
        <param name="binder"><span data-ttu-id="e3cdc-271">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションによる <see langword="MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-271">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection.</span></span> <span data-ttu-id="e3cdc-272"><paramref name="binder" /> が <see langword="null" /> の場合は、既定のバインダーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-272">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="parameters"><span data-ttu-id="e3cdc-273">呼び出されたメソッドまたはコンストラクターの引数リスト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-273">An argument list for the invoked method or constructor.</span></span> <span data-ttu-id="e3cdc-274">これは、呼び出されるメソッドまたはコンストラクターのパラメーターと同じ数、順序、および型のオブジェクトの配列です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-274">This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked.</span></span> <span data-ttu-id="e3cdc-275">パラメーターがない場合は、これは <see langword="null" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-275">If there are no parameters, this should be <see langword="null" />.</span></span>  
  
<span data-ttu-id="e3cdc-276">このインスタンスで表されるメソッドまたはコンストラクターが ByRef パラメーターをとる場合、この関数を使用してメソッドまたはコンストラクターを呼び出すために、このパラメーターに特別な属性は必要ありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-276">If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function.</span></span> <span data-ttu-id="e3cdc-277">この配列の中で、何らかの値で明示的に初期化されないオブジェクトには、そのオブジェクト型の既定値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-277">Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.</span></span> <span data-ttu-id="e3cdc-278">参照型の要素の場合、この値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-278">For reference-type elements, this value is <see langword="null" />.</span></span> <span data-ttu-id="e3cdc-279">値型の要素の場合、この値は、実際の要素の型に応じて、0、0.0、または <see langword="false" /> となります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-279">For value-type elements, this value is 0, 0.0, or <see langword="false" />, depending on the specific element type.</span></span></param>
        <param name="culture"><span data-ttu-id="e3cdc-280">型の強制変換を制御するために使用する <see langword="CultureInfo" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-280">An instance of <see langword="CultureInfo" /> used to govern the coercion of types.</span></span> <span data-ttu-id="e3cdc-281"><see langword="null" />の場合は、現在のスレッドの <see langword="CultureInfo" /> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-281">If this is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used.</span></span> <span data-ttu-id="e3cdc-282">(これは、たとえば、1000 を表す <see langword="String" /> を <see langword="Double" /> 値に変換する場合に必要です。これは、カルチャによって 1000 の表記が異なるためです。)</span><span class="sxs-lookup"><span data-stu-id="e3cdc-282">(This is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, for example, since 1000 is represented differently by different cultures.)</span></span></param>
        <summary><span data-ttu-id="e3cdc-283">派生クラスによってオーバーライドされた場合に、指定したパラメーターでリフレクションされたメソッドまたはコンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-283">When overridden in a derived class, invokes the reflected method or constructor with the given parameters.</span></span></summary>
        <returns><span data-ttu-id="e3cdc-284">呼び出されたメソッドの戻り値を格納している <see langword="Object" />。コンストラクターの場合は <see langword="null" />。メソッドの戻り値の型が <see langword="null" /> の場合は <see langword="void" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-284">An <see langword="Object" /> containing the return value of the invoked method, or <see langword="null" /> in the case of a constructor, or <see langword="null" /> if the method's return type is <see langword="void" />.</span></span> <span data-ttu-id="e3cdc-285"><see langword="Invoke" /> は、メソッドまたはコンストラクターを呼び出す前に、ユーザーに必要なアクセス許可が与えられていることを確認し、パラメーターが有効かどうかを検査します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-285">Before calling the method or constructor, <see langword="Invoke" /> checks to see if the user has access permission and verifies that the parameters are valid.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-286">で、このインスタンスによってリフレクションさ`obj`れたメソッドを動的に呼び出し、指定したパラメーターを渡します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-286">Dynamically invokes the method reflected by this instance on `obj`, and passes along the specified parameters.</span></span> <span data-ttu-id="e3cdc-287">メソッドが静的である場合、 `obj`パラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-287">If the method is static, the `obj` parameter is ignored.</span></span> <span data-ttu-id="e3cdc-288">非静的メソッドの場合、 `obj`は、メソッドを継承または宣言するクラスのインスタンスであり、このクラスと同じ型である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-288">For non-static methods, `obj` should be an instance of a class that inherits or declares the method and must be the same type as this class.</span></span> <span data-ttu-id="e3cdc-289">メソッドにパラメーターがない場合、の`parameters` `null`値はになります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-289">If the method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="e3cdc-290">それ以外の場合、内`parameters`の要素の数、型、および順序は、このインスタンスによってリフレクションされるメソッドのパラメーターの数、型、および順序と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-290">Otherwise, the number, type, and order of elements in `parameters` should be identical to the number, type, and order of parameters for the method reflected by this instance.</span></span>  
  
 <span data-ttu-id="e3cdc-291">の呼び出しで省略可能なパラメーターを`Invoke`省略することはできません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-291">You may not omit optional parameters in calls to `Invoke`.</span></span> <span data-ttu-id="e3cdc-292">省略可能なパラメーターを省略してメソッドを呼び出す`Type.InvokeMember`には、代わりにを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-292">To invoke a method omitting optional parameters, you should call `Type.InvokeMember` instead.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3cdc-293">このメソッドオーバーロードを使用してインスタンスコンストラクターを呼び出すと、に指定`obj`されたオブジェクトが再初期化されます。つまり、すべてのインスタンス初期化子が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-293">If this method overload is used to invoke an instance constructor, the object supplied for `obj` is reinitialized; that is, all instance initializers are executed.</span></span> <span data-ttu-id="e3cdc-294">戻り値は `null` です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-294">The return value is `null`.</span></span> <span data-ttu-id="e3cdc-295">クラスコンストラクターが呼び出されると、クラスは再初期化されます。つまり、すべてのクラス初期化子が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-295">If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed.</span></span> <span data-ttu-id="e3cdc-296">戻り値は `null` です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-296">The return value is `null`.</span></span>  
  
 <span data-ttu-id="e3cdc-297">値渡しのプリミティブパラメーターの場合、通常の拡大が実行されます (たとえば、Int16 > Int32)。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-297">For pass-by-value primitive parameters, normal widening is performed (Int16 -> Int32, for example).</span></span> <span data-ttu-id="e3cdc-298">値渡し参照パラメーターの場合は、通常の参照の拡大変換が許可されます (派生クラスから基底クラスへ、基底クラスからインターフェイス型へ)。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-298">For pass-by-value reference parameters, normal reference widening is allowed (derived class to base class, and base class to interface type).</span></span> <span data-ttu-id="e3cdc-299">ただし、参照渡しのプリミティブパラメーターの場合、型は正確に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-299">However, for pass-by-reference primitive parameters, the types must match exactly.</span></span> <span data-ttu-id="e3cdc-300">参照渡しの参照パラメーターの場合、通常の拡大は引き続き適用されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-300">For pass-by-reference reference parameters, the normal widening still applies.</span></span>  
  
 <span data-ttu-id="e3cdc-301">たとえば、このインスタンスによってリフレクションされるメソッドがと`public boolean Compare(String a, String b)`して`parameters`宣言されている`Objects`場合、は、の`parameters[0] = new Object("SomeString1") and parameters[1] = new Object("SomeString2")`長さが2の配列である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-301">For example, if the method reflected by this instance is declared as `public boolean Compare(String a, String b)`, then `parameters` should be an array of `Objects` with length 2 such that `parameters[0] = new Object("SomeString1") and parameters[1] = new Object("SomeString2")`.</span></span>  
  
 <span data-ttu-id="e3cdc-302">現在のメソッドのパラメーターが値型であり、の`parameters`対応する引数が`null`の場合、ランタイムは、値型のゼロ初期化インスタンスを渡します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-302">If a parameter of the current method is a value type, and the corresponding argument in `parameters` is `null`, the runtime passes a zero-initialized instance of the value type.</span></span>  
  
 <span data-ttu-id="e3cdc-303">リフレクションでは、仮想メソッドの呼び出し時に動的メソッド参照を使用します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-303">Reflection uses dynamic method lookup when invoking virtual methods.</span></span> <span data-ttu-id="e3cdc-304">たとえば、クラス B がクラス A から継承し、両方とも M という名前の仮想メソッドを実装しているとします。ここで、クラス a の`MethodInfo` M を表すオブジェクトがあるとします。`Invoke`メソッドを使用して b 型のオブジェクトで M を呼び出す場合、リフレクションはクラス b によって指定された実装を使用します。型 B のオブジェクトがにキャストされている場合でも、クラス B によって指定された実装が使用されます (以下のコードサンプルを参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-304">For example, suppose that class B inherits from class A and both implement a virtual method named M. Now suppose that you have a `MethodInfo` object that represents M on class A. If you use the `Invoke` method to invoke M on an object of type B, then reflection will use the implementation given by class B. Even if the object of type B is cast to A, the implementation given by class B is used (see code sample below).</span></span>  
  
 <span data-ttu-id="e3cdc-305">一方、メソッドが非仮想の場合、リフレクションは、ターゲットとして渡されたオブジェクトの型に関係なく、 `MethodInfo`の取得元の型によって指定された実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-305">On the other hand, if the method is non-virtual, then reflection will use the implementation given by the type from which the `MethodInfo` was obtained, regardless of the type of the object passed as the target.</span></span>  
  
 <span data-ttu-id="e3cdc-306">完全に信頼されたコードでは、アクセス制限は無視されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-306">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="e3cdc-307">つまり、プライベートコンストラクター、メソッド、フィールド、およびプロパティには、コードが完全に信頼されている場合は常に、リフレクションを介してアクセスして呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-307">That is, private constructors, methods, fields, and properties can be accessed and invoked via reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="e3cdc-308">呼び出されたメソッドが例外をスロー `TargetInvocationException.GetException`した場合、は例外を返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-308">If the invoked method throws an exception, `TargetInvocationException.GetException` returns the exception.</span></span> <span data-ttu-id="e3cdc-309">この実装では`NotSupportedException`、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-309">This implementation throws a `NotSupportedException`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3cdc-310">以降では、このメソッドを使用して、呼び出し元が<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグで許可<xref:System.Security.Permissions.ReflectionPermission>されていて、非パブリックメンバーの許可セットが呼び出し元の許可セットまたはサブセットに制限されている場合に、非パブリックメンバーにアクセスできます。 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]著作.</span><span class="sxs-lookup"><span data-stu-id="e3cdc-310">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="e3cdc-311">(「[リフレクションのセキュリティに関する考慮事項」を](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)参照してください)。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-311">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="e3cdc-312">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-312">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-313">次の例では、の<xref:System.Reflection.Binder?displayProperty=nameWithType> <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>オーバーロードを使用して、クラスのすべてのメンバーを示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-313">The following example demonstrates all members of the <xref:System.Reflection.Binder?displayProperty=nameWithType> class using an overload of <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e3cdc-314">プライベートメソッド`CanConvertFrom`は、指定された型に対して互換性のある型を検索します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-314">The private method `CanConvertFrom` finds compatible types for a given type.</span></span> <span data-ttu-id="e3cdc-315">カスタムバインディングシナリオでメンバーを呼び出す別の例については、「[型の動的な読み込みと使用](~/docs/framework/reflection-and-codedom/dynamically-loading-and-using-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-315">For another example of invoking members in a custom binding scenario, see [Dynamically Loading and Using Types](~/docs/framework/reflection-and-codedom/dynamically-loading-and-using-types.md).</span></span>  
  
 [!code-cpp[Binder_1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Binder_1/CPP/binder.cpp#1)]
 [!code-csharp[Binder_1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Binder_1/CS/binder.cs#1)]
 [!code-vb[Binder_1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Binder_1/VB/binder.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="e3cdc-316"><paramref name="obj" /> パラメーターは <see langword="null" /> で、メソッドは静的でありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-316">The <paramref name="obj" /> parameter is <see langword="null" /> and the method is not static.</span></span>  
  
<span data-ttu-id="e3cdc-317">- または -</span><span class="sxs-lookup"><span data-stu-id="e3cdc-317">-or-</span></span> 
<span data-ttu-id="e3cdc-318">メソッドは <paramref name="obj" /> のクラスで宣言も継承もされていません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-318">The method is not declared or inherited by the class of <paramref name="obj" />.</span></span>  
  
<span data-ttu-id="e3cdc-319">- または -</span><span class="sxs-lookup"><span data-stu-id="e3cdc-319">-or-</span></span> 
<span data-ttu-id="e3cdc-320">静的コンストラクターが呼び出されました。<paramref name="obj" /> は <see langword="null" /> でも、コンストラクターを宣言したクラスのインスタンスでもありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-320">A static constructor is invoked, and <paramref name="obj" /> is neither <see langword="null" /> nor an instance of the class that declared the constructor.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3cdc-321"><paramref name="parameters" /> パラメーターの型が、このインスタンスでリフレクションされたメソッドまたはコンストラクターのシグネチャと一致しません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-321">The type of the <paramref name="parameters" /> parameter does not match the signature of the method or constructor reflected by this instance.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="e3cdc-322"><paramref name="parameters" /> 配列に正しい数の引数がありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-322">The <paramref name="parameters" /> array does not have the correct number of arguments.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="e3cdc-323">呼び出されたメソッドまたはコンストラクターが例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-323">The invoked method or constructor throws an exception.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="e3cdc-324">呼び出し元には、現在のインスタンスが表すメソッドまたはコンストラクターを実行するアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-324">The caller does not have permission to execute the method or constructor that is represented by the current instance.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e3cdc-325">メソッドを宣言する型は、オープン ジェネリック型です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-325">The type that declares the method is an open generic type.</span></span> <span data-ttu-id="e3cdc-326">つまり、<see cref="P:System.Type.ContainsGenericParameters" /> プロパティは、宣言する型に対して <see langword="true" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-326">That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" /> for the declaring type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e3cdc-327">などの機構を<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />使用して遅延バインディングが呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-327">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e3cdc-328"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e3cdc-328">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/dynamically-loading-and-using-types.md"><span data-ttu-id="e3cdc-329">型の動的な読み込みおよび使用</span><span class="sxs-lookup"><span data-stu-id="e3cdc-329">Dynamically Loading and Using Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Reflection.MethodBase.IsAbstract" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsAbstract</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-330">メソッドが抽象メソッドかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-330">Gets a value indicating whether the method is abstract.</span></span></summary>
        <value><span data-ttu-id="e3cdc-331">このメソッドが抽象メソッドである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-331"><see langword="true" /> if the method is abstract; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-332">抽象メンバーが基底クラスで宣言されており、実装が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-332">An abstract member is declared on a base class and has no implementation supplied.</span></span>  
  
 <span data-ttu-id="e3cdc-333">を取得<xref:System.Reflection.MethodBase>するには、最初に型を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-333">To get the <xref:System.Reflection.MethodBase>, first get the type.</span></span> <span data-ttu-id="e3cdc-334">型からメソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-334">From the type, get the method.</span></span> <span data-ttu-id="e3cdc-335">メソッドから、 `MethodBase`を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-335">From the method, get the `MethodBase`.</span></span> <span data-ttu-id="e3cdc-336">`MethodBase`コンストラクターまたはコンストラクターが public 以外の場合は、保護されており、すぐにアクセスすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-336">If the `MethodBase` or constructor is other than public, it is protected and cannot be readily accessed.</span></span> <span data-ttu-id="e3cdc-337">非パブリックメソッドにアクセスするには、 <xref:System.Reflection.BindingFlags> `NonPublic`マスクを in `GetMethod`に設定します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-337">To access a non-public method, set the <xref:System.Reflection.BindingFlags> mask to `NonPublic` in `GetMethod`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-338">次の例では、指定されたメソッドが abstract であるかどうかを判断し、結果を表示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-338">The following example determines whether specified the method is abstract and displays the result.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsAbstract Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAbstract Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsAbstract Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAbstract Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsAbstract Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAbstract Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Reflection.BindingFlags" />
      </Docs>
    </Member>
    <Member MemberName="IsAssembly">
      <MemberSignature Language="C#" Value="public bool IsAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAssembly : bool" Usage="System.Reflection.MethodBase.IsAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-339">このメソッドまたはコンストラクターを参照できる範囲が <see cref="F:System.Reflection.MethodAttributes.Assembly" /> によって示されるかどうかを表す値を取得します。ここで判定されるのは、このメソッドまたはコンストラクターが同じアセンブリ内の他の型でのみ参照でき、アセンブリ外部の派生型では参照できないものであることです。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-339">Gets a value indicating whether the potential visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.Assembly" />; that is, the method or constructor is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</span></span></summary>
        <value><span data-ttu-id="e3cdc-340">このメソッドまたはコンストラクターを参照可能な範囲が <see cref="F:System.Reflection.MethodAttributes.Assembly" /> によって正しく示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-340"><see langword="true" /> if the visibility of this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.Assembly" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-341">メソッドの実際の可視性は、その型の可視性によって制限されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-341">The actual visibility of a method is limited by the visibility of its type.</span></span> <span data-ttu-id="e3cdc-342">プロパティは、メソッド`true`の場合もありますが、入れ子になったプライベート型のメソッドである場合、メソッドは、それを含んでいる型の外部では参照できません。 <xref:System.Reflection.MethodBase.IsAssembly%2A></span><span class="sxs-lookup"><span data-stu-id="e3cdc-342">The <xref:System.Reflection.MethodBase.IsAssembly%2A> property might be `true` for a method, but if it is a method of a private nested type then the method is not visible outside the containing type.</span></span>  
  
 <span data-ttu-id="e3cdc-343">唯一の可視性修飾子が<xref:System.Reflection.MethodAttributes.Assembly?displayProperty=nameWithType> `internal` (`Friend` Visual Basic) の場合、メソッドまたはコンストラクターの可視性はによって正確に記述されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-343">The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes.Assembly?displayProperty=nameWithType> if the only visibility modifier is `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="e3cdc-344">このプロパティは`false` 、( `protected internal` `protected public` C# `Protected Friend` Visual Basic ではC++) にあるメソッド用です。このよう<xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>なメソッドを特定するには、プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-344">This property is `false` for methods that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property to identify such methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-345">次のコード例では、さまざまなレベルの可視性を持つメソッドを定義<xref:System.Reflection.MethodBase.IsAssembly%2A>し<xref:System.Reflection.MethodBase.IsFamily%2A>、 <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>、、 <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> 、およびの各プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-345">The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3cdc-346">Visual Basic とC#言語では、可視性<xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType>を持つメソッドを定義することはできC++ません。アクセスレベルは例にのみ表示されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-346">The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodAttributes" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamily" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamilyOrAssembly" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamilyAndAssembly" />
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericMethod">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructedGenericMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsConstructedGenericMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructedGenericMethod As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericMethod { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericMethod : bool" Usage="System.Reflection.MethodBase.IsConstructedGenericMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructor">
      <MemberSignature Language="C#" Value="public bool IsConstructor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructor" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsConstructor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConstructor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsConstructor { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructor : bool" Usage="System.Reflection.MethodBase.IsConstructor" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsConstructor</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-347">メソッドがコンストラクターかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-347">Gets a value indicating whether the method is a constructor.</span></span></summary>
        <value><span data-ttu-id="e3cdc-348">このメソッドが <see cref="T:System.Reflection.ConstructorInfo" /> オブジェクトによって表されるコンストラクターの場合は <see langword="true" /> (<see cref="T:System.Reflection.Emit.ConstructorBuilder" /> オブジェクトの解説にあるメモを参照)。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-348"><see langword="true" /> if this method is a constructor represented by a <see cref="T:System.Reflection.ConstructorInfo" /> object (see note in Remarks about <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> objects); otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="e3cdc-349">コンストラクター <xref:System.Reflection.MethodBase.IsConstructor%2A>が定義され<xref:System.Reflection.Emit.ConstructorBuilder>ているときに、 `attributes`パラメーターに<xref:System.Reflection.MethodAttributes.RTSpecialName?displayProperty=nameWithType>フラグが含まれていない限り、プロパティは動的な型のオブジェクトに対してを返し`false`ます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-349">The <xref:System.Reflection.MethodBase.IsConstructor%2A> property returns `false` for a <xref:System.Reflection.Emit.ConstructorBuilder> object in a dynamic type, unless the <xref:System.Reflection.MethodAttributes.RTSpecialName?displayProperty=nameWithType> flag was included in the `attributes` parameter when the constructor was defined.</span></span> <span data-ttu-id="e3cdc-350">フラグを<xref:System.Reflection.MethodAttributes.RTSpecialName>省略しても、出力されるコンストラクターの正確性には影響しません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-350">Omitting the <xref:System.Reflection.MethodAttributes.RTSpecialName> flag does not affect the correctness of the emitted constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsFamily">
      <MemberSignature Language="C#" Value="public bool IsFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamily" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFamily : bool" Usage="System.Reflection.MethodBase.IsFamily" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-351">このメソッドまたはコンストラクターへの参照範囲が <see cref="F:System.Reflection.MethodAttributes.Family" /> によって正しく示されるかどうかを表す値を取得します。ここで判定されるのは、メソッドまたはコンストラクターはそれらのクラスと派生クラスの内側でのみ参照できるものであることです。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-351">Gets a value indicating whether the visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.Family" />; that is, the method or constructor is visible only within its class and derived classes.</span></span></summary>
        <value><span data-ttu-id="e3cdc-352">このメソッドまたはコンストラクターへのアクセスが <see cref="F:System.Reflection.MethodAttributes.Family" /> によって正しく示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-352"><see langword="true" /> if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.Family" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-353">唯一の可視性修飾子が<xref:System.Reflection.MethodAttributes.Family?displayProperty=nameWithType> `protected`の場合、メソッドまたはコンストラクターの可視性はによって正確に記述されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-353">The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes.Family?displayProperty=nameWithType> if the only visibility modifier is `protected`.</span></span> <span data-ttu-id="e3cdc-354">このプロパティは`false` 、( `protected internal` `protected public` C# `Protected Friend` Visual Basic ではC++) にあるメソッド用です。このよう<xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>なメソッドを特定するには、プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-354">This property is `false` for methods that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property to identify such methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-355">次のコード例では、さまざまなレベルの可視性を持つメソッドを定義<xref:System.Reflection.MethodBase.IsAssembly%2A>し<xref:System.Reflection.MethodBase.IsFamily%2A>、 <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>、、 <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> 、およびの各プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-355">The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3cdc-356">Visual Basic とC#言語では、可視性<xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType>を持つメソッドを定義することはできC++ません。アクセスレベルは例にのみ表示されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-356">The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodAttributes" />
        <altmember cref="P:System.Reflection.MethodBase.IsAssembly" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamilyOrAssembly" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamilyAndAssembly" />
      </Docs>
    </Member>
    <Member MemberName="IsFamilyAndAssembly">
      <MemberSignature Language="C#" Value="public bool IsFamilyAndAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamilyAndAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsFamilyAndAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamilyAndAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamilyAndAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFamilyAndAssembly : bool" Usage="System.Reflection.MethodBase.IsFamilyAndAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-357">このメソッドまたはコンストラクターへの参照範囲が <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" /> によって示されるかどうかを表す値を取得します。ここで判定されるのは、メソッドまたはコンストラクターは派生クラスから呼び出すことができるが、それらが同じアセンブリ内にある場合に限るものであることです。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-357">Gets a value indicating whether the visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" />; that is, the method or constructor can be called by derived classes, but only if they are in the same assembly.</span></span></summary>
        <value><span data-ttu-id="e3cdc-358">このメソッドまたはコンストラクターへのアクセスが <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" /> によって正しく示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-358"><see langword="true" /> if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-359">可視性修飾子が<xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> `protected private`のC++場合、メソッドまたはコンストラクターの可視性はによって正確に記述されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-359">The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> if the visibility modifier is `protected private` in C++.</span></span> <span data-ttu-id="e3cdc-360">この可視性を持つメソッドを Visual Basic またはC#で定義することはできません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-360">Methods with this visibility cannot be defined in Visual Basic or C#.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-361">次のコード例では、さまざまなレベルの可視性を持つメソッドを定義<xref:System.Reflection.MethodBase.IsAssembly%2A>し<xref:System.Reflection.MethodBase.IsFamily%2A>、 <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>、、 <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> 、およびの各プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-361">The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3cdc-362">Visual Basic とC#言語では、可視性<xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType>を持つメソッドを定義することはできC++ません。アクセスレベルは例にのみ表示されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-362">The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodAttributes" />
        <altmember cref="P:System.Reflection.MethodBase.IsAssembly" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamilyOrAssembly" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamily" />
      </Docs>
    </Member>
    <Member MemberName="IsFamilyOrAssembly">
      <MemberSignature Language="C#" Value="public bool IsFamilyOrAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamilyOrAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsFamilyOrAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamilyOrAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamilyOrAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFamilyOrAssembly : bool" Usage="System.Reflection.MethodBase.IsFamilyOrAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-363">このメソッドまたはコンストラクターを参照可能な範囲が <see cref="F:System.Reflection.MethodAttributes.FamORAssem" /> によって示されるかどうかを表す値を取得します。ここで判定されるのは、メソッドまたはコンストラクターは任意の場所にある派生クラスと、同じアセンブリ内のクラスから呼び出すことができるものであることです。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-363">Gets a value indicating whether the potential visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.FamORAssem" />; that is, the method or constructor can be called by derived classes wherever they are, and by classes in the same assembly.</span></span></summary>
        <value><span data-ttu-id="e3cdc-364">このメソッドまたはコンストラクターへのアクセスが <see cref="F:System.Reflection.MethodAttributes.FamORAssem" /> によって正しく示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-364"><see langword="true" /> if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.FamORAssem" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-365">型のメンバーが可視<xref:System.Reflection.MethodAttributes.FamORAssem?displayProperty=nameWithType>性を持つ場合は、派生クラス内の任意のメンバー、または同じアセンブリ内の任意のメンバーから呼び出すことができますが、他の型からは呼び出せません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-365">If a type member has <xref:System.Reflection.MethodAttributes.FamORAssem?displayProperty=nameWithType> visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.</span></span>  
  
 <span data-ttu-id="e3cdc-366">メソッドの実際の可視性は、その型の可視性によって制限されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-366">The actual visibility of a method is limited by the visibility of its type.</span></span> <span data-ttu-id="e3cdc-367">プロパティは、メソッド`true`の場合もありますが、入れ子になったプライベート型のメソッドである場合、メソッドは、それを含んでいる型の外部では参照できません。 <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A></span><span class="sxs-lookup"><span data-stu-id="e3cdc-367">The <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property might be `true` for a method, but if it is a method of a private nested type then the method is not visible outside the containing type.</span></span>  
  
 <span data-ttu-id="e3cdc-368">可視性<xref:System.Reflection.MethodAttributes.FamORAssem?displayProperty=nameWithType>修飾子が`protected internal`のC#場合 (`Protected Friend` Visual Basic `protected public`ではC++)、メソッドまたはコンストラクターの可視性はによって正確に記述されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-368">The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes.FamORAssem?displayProperty=nameWithType> if the visibility modifier is `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-369">次のコード例では、さまざまなレベルの可視性を持つメソッドを定義<xref:System.Reflection.MethodBase.IsAssembly%2A>し<xref:System.Reflection.MethodBase.IsFamily%2A>、 <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>、、 <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> 、およびの各プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-369">The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3cdc-370">Visual Basic とC#言語では、可視性<xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType>を持つメソッドを定義することはできC++ません。アクセスレベルは例にのみ表示されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-370">The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodAttributes" />
        <altmember cref="P:System.Reflection.MethodBase.IsAssembly" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamily" />
        <altmember cref="P:System.Reflection.MethodBase.IsFamilyAndAssembly" />
      </Docs>
    </Member>
    <Member MemberName="IsFinal">
      <MemberSignature Language="C#" Value="public bool IsFinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFinal" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsFinal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFinal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFinal { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFinal : bool" Usage="System.Reflection.MethodBase.IsFinal" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFinal</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-371">このメソッドが <see langword="final" /> かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-371">Gets a value indicating whether this method is <see langword="final" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-372">このメソッドが <see langword="final" /> である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-372"><see langword="true" /> if this method is <see langword="final" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-373">メソッドがオーバーライド可能かどうかを判断するには、が<xref:System.Reflection.MethodBase.IsVirtual%2A> `true`であることを確認するだけでは十分ではありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-373">To determine if a method is overridable, it is not sufficient to check that <xref:System.Reflection.MethodBase.IsVirtual%2A> is `true`.</span></span> <span data-ttu-id="e3cdc-374">メソッドをオーバーライド可能にするに`IsVirtual`は、を`IsFinal`にする`false`必要があります。 `true`また、はである必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-374">For a method to be overridable, `IsVirtual` must be `true` and `IsFinal` must be `false`.</span></span> <span data-ttu-id="e3cdc-375">たとえば、メソッドは非仮想の場合もありますが、インターフェイスメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-375">For example, a method might be non-virtual, but it implements an interface method.</span></span> <span data-ttu-id="e3cdc-376">共通言語ランタイムでは、インターフェイスメンバーを実装するすべてのメソッドがと`virtual`してマークされている必要`virtual final`があります。したがって、コンパイラはメソッドをマークします。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-376">The common language runtime requires that all methods that implement interface members must be marked as `virtual`; therefore, the compiler marks the method `virtual final`.</span></span> <span data-ttu-id="e3cdc-377">そのため、メソッドがとしてマークさ`virtual`れていても、オーバーライドできない場合があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-377">So there are cases where a method is marked as `virtual` but is still not overridable.</span></span>  
  
 <span data-ttu-id="e3cdc-378">メソッドがオーバーライド可能であるかどうかを確実に確立するには、次のようなコードを使用します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-378">To establish with certainty whether a method is overridable, use code such as this:</span></span>  
  
 `if (MethodInfo.IsVirtual && !MethodInfo.IsFinal)`  
  
 <span data-ttu-id="e3cdc-379">が`IsVirtual` また`false` はの`true`場合、メソッドをオーバーライドすることはできません。 `IsFinal`</span><span class="sxs-lookup"><span data-stu-id="e3cdc-379">If `IsVirtual` is `false` or `IsFinal` is `true`, then the method cannot be overridden.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-380">次の例で`false`は`IsFinal`、に対してを表示します。これにより、MyMethod がオーバーライド可能であると考えることができます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-380">The following example displays `false` for `IsFinal`, which might lead you to think that MyMethod is overridable.</span></span> <span data-ttu-id="e3cdc-381">コードは、 `false` MyMethod がマーク`virtual`されていないため、オーバーライドできない場合でも出力されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-381">The code prints `false` even though MyMethod is not marked `virtual` and thus cannot be overridden.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethod">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsGenericMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericMethod As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethod { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethod : bool" Usage="System.Reflection.MethodBase.IsGenericMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-382">メソッドがジェネリック メソッドかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-382">Gets a value indicating whether the method is generic.</span></span></summary>
        <value><span data-ttu-id="e3cdc-383">現在の <see cref="T:System.Reflection.MethodBase" /> がジェネリック メソッドを表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-383"><see langword="true" /> if the current <see cref="T:System.Reflection.MethodBase" /> represents a generic method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-384">プロパティを使用して、現在<xref:System.Reflection.MethodBase>のオブジェクトがジェネリックメソッドを表しているかどうかを確認します。 <xref:System.Reflection.MethodBase.IsGenericMethod%2A></span><span class="sxs-lookup"><span data-stu-id="e3cdc-384">Use the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents a generic method.</span></span> <span data-ttu-id="e3cdc-385">プロパティを使用して、現在<xref:System.Reflection.MethodBase>のオブジェクトが、オープンに構築されたメソッドまたは終了した構築済みメソッドを表しているかどうかを確認します。 <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A></span><span class="sxs-lookup"><span data-stu-id="e3cdc-385">Use the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents an open constructed method or a closed constructed method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3cdc-386">既定では、ジェネリックはサポートされていません。派生クラスで`false`オーバーライドされていない場合、このプロパティはを返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-386">Generics are not supported by default; this property returns `false` if not overridden in a derived class.</span></span> <span data-ttu-id="e3cdc-387">ジェネリックコンストラクターは .NET Framework バージョン2.0 ではサポートされていないため`false` 、現在のインスタンスの型<xref:System.Reflection.ConstructorInfo>がの場合、このプロパティはを返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-387">Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>.</span></span>  
  
<span data-ttu-id="e3cdc-388">次の表は、ジェネリックメソッドに固有の用語の不変条件をまとめたものです。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-388">The following table summarizes the invariant conditions for terms specific to generic methods.</span></span> <span data-ttu-id="e3cdc-389">ジェネリック*型パラメーター*や*ジェネリック型*など、一般的なリフレクションで使用されるその他の用語<xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>については、プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-389">For other terms used in generic reflection, such as *generic type parameter* and *generic type*, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>   

|<span data-ttu-id="e3cdc-390">用語</span><span class="sxs-lookup"><span data-stu-id="e3cdc-390">Term</span></span>|<span data-ttu-id="e3cdc-391">インバリアント条件</span><span class="sxs-lookup"><span data-stu-id="e3cdc-391">Invariant condition</span></span>| 
|---|---| 
|<span data-ttu-id="e3cdc-392">ジェネリックメソッドの定義</span><span class="sxs-lookup"><span data-stu-id="e3cdc-392">generic method definition</span></span>| <span data-ttu-id="e3cdc-393"><xref:System.Reflection.MethodBase.IsGenericMethodDefinition> プロパティが `true` である。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-393">The <xref:System.Reflection.MethodBase.IsGenericMethodDefinition> property is `true`.</span></span> <br /><span data-ttu-id="e3cdc-394">ジェネリックメソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-394">Defines a generic method.</span></span> <span data-ttu-id="e3cdc-395">構築されたメソッドを作成する<xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType>には、 <xref:System.Reflection.MethodInfo>ジェネリックメソッド定義を表すオブジェクトに対してメソッドを呼び出し、型引数の配列を指定します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-395">A constructed method is created by calling the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> method on a <xref:System.Reflection.MethodInfo> object that represents a generic method definition, and specifying an array of type arguments.</span></span> <br /><span data-ttu-id="e3cdc-396">メソッド<xref:System.Reflection.MethodInfo.MakeGenericMethod%2A>は、ジェネリックメソッドの定義でのみ呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-396">The <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method can be called only on generic method definitions.</span></span> <br/><span data-ttu-id="e3cdc-397">ジェネリックメソッド定義はジェネリックメソッドですが、逆の場合は true です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-397">Any generic method definition is a generic method, but the converse is not true.</span></span>|    
|<span data-ttu-id="e3cdc-398">ジェネリック メソッド</span><span class="sxs-lookup"><span data-stu-id="e3cdc-398">generic method</span></span>|<span data-ttu-id="e3cdc-399">`IsGenericMethod` プロパティが `true` である。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-399">The `IsGenericMethod` property is `true`.</span></span> <br/> <span data-ttu-id="e3cdc-400">には、ジェネリックメソッドの定義、オープンに構築されたメソッド、または閉じて構築されたメソッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-400">Can be a generic method definition, an open constructed method, or a closed constructed method.</span></span>| 
|<span data-ttu-id="e3cdc-401">構築されたメソッドを開く</span><span class="sxs-lookup"><span data-stu-id="e3cdc-401">open constructed method</span></span>|<span data-ttu-id="e3cdc-402"><xref:System.Reflection.MethodBase.ContainsGenericParameters> プロパティが `true` である。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-402">The <xref:System.Reflection.MethodBase.ContainsGenericParameters> property is `true`.</span></span> <br/><span data-ttu-id="e3cdc-403">オープンに構築されたメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-403">It is not possible to invoke an open constructed method.</span></span>|  
|<span data-ttu-id="e3cdc-404">終了した構築済みメソッド</span><span class="sxs-lookup"><span data-stu-id="e3cdc-404">closed constructed method</span></span>|<span data-ttu-id="e3cdc-405"><xref:System.Reflection.MethodBase.ContainsGenericParameters> プロパティが `false` である。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-405">The <xref:System.Reflection.MethodBase.ContainsGenericParameters> property is `false`.</span></span> <br/><span data-ttu-id="e3cdc-406">再帰的に調べる場合、メソッドには割り当てられていないジェネリックパラメーターがありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-406">When examined recursively, the method has no unassigned generic parameters.</span></span> <span data-ttu-id="e3cdc-407">含んでいる型にジェネリック型パラメーターがありません。型引数にジェネリック型パラメーターがありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-407">The containing type has no generic type parameters, and none of the type arguments have generic type parameters.</span></span> <br/><span data-ttu-id="e3cdc-408">メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-408">The method can be invoked.</span></span>|   

 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MethodBase.ContainsGenericParameters" />
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" />
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethod" />
        <altmember cref="P:System.Type.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericMethodDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsGenericMethodDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericMethodDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethodDefinition : bool" Usage="System.Reflection.MethodBase.IsGenericMethodDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-409">メソッドがジェネリック メソッドの定義かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-409">Gets a value indicating whether the method is a generic method definition.</span></span></summary>
        <value><span data-ttu-id="e3cdc-410">現在の <see cref="T:System.Reflection.MethodBase" /> オブジェクトがジェネリック メソッドの定義を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-410"><see langword="true" /> if the current <see cref="T:System.Reflection.MethodBase" /> object represents the definition of a generic method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-411">現在<xref:System.Reflection.MethodBase>のがジェネリックメソッド定義を表している場合は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-411">If the current <xref:System.Reflection.MethodBase> represents a generic method definition, then:</span></span>  
  
-   <span data-ttu-id="e3cdc-412"><xref:System.Reflection.MethodBase.IsGenericMethodDefinition%2A> プロパティが `true` である。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-412">The <xref:System.Reflection.MethodBase.IsGenericMethodDefinition%2A> property is `true`.</span></span>  
  
-   <span data-ttu-id="e3cdc-413">メソッドに<xref:System.Type>よって返される配列内の<xref:System.Reflection.MethodBase.GetGenericArguments%2A>各オブジェクトについて、次の手順を実行します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-413">For each <xref:System.Type> object in the array returned by the <xref:System.Reflection.MethodBase.GetGenericArguments%2A> method:</span></span>  
  
    -   <span data-ttu-id="e3cdc-414"><xref:System.Type.IsGenericParameter%2A?displayProperty=nameWithType> プロパティが `true` である。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-414">The <xref:System.Type.IsGenericParameter%2A?displayProperty=nameWithType> property is `true`.</span></span>  
  
    -   <span data-ttu-id="e3cdc-415">プロパティ<xref:System.Type.DeclaringMethod%2A?displayProperty=nameWithType>は、現在のインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-415">The <xref:System.Type.DeclaringMethod%2A?displayProperty=nameWithType> property returns the current instance.</span></span>  
  
    -   <span data-ttu-id="e3cdc-416">プロパティは、配列内の<xref:System.Type>オブジェクトの位置と同じです。 <xref:System.Type.GenericParameterPosition%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="e3cdc-416">The <xref:System.Type.GenericParameterPosition%2A?displayProperty=nameWithType> property is the same as the position of the <xref:System.Type> object in the array.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3cdc-417">既定では、ジェネリックはサポートされていません。派生クラスで`false`オーバーライドされていない場合、このプロパティはを返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-417">Generics are not supported by default; this property returns `false` if not overridden in a derived class.</span></span> <span data-ttu-id="e3cdc-418">ジェネリックコンストラクターは .NET Framework バージョン2.0 ではサポートされていないため`false` 、現在のインスタンスの型<xref:System.Reflection.ConstructorInfo>がの場合、このプロパティはを返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-418">Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>.</span></span>  
  
 <span data-ttu-id="e3cdc-419">ジェネリックメソッドに固有の用語の不変条件の一覧については、 <xref:System.Reflection.MethodBase.IsGenericMethod%2A> 「」プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-419">For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property.</span></span> <span data-ttu-id="e3cdc-420">汎用リフレクションで使用されるその他の用語の不変条件の一覧につい<xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>ては、プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-420">For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" />
      </Docs>
    </Member>
    <Member MemberName="IsHideBySig">
      <MemberSignature Language="C#" Value="public bool IsHideBySig { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHideBySig" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsHideBySig" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHideBySig As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHideBySig { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHideBySig : bool" Usage="System.Reflection.MethodBase.IsHideBySig" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsHideBySig</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-421">派生クラスで、正確に同じシグネチャを持つ同じ種類のメンバーだけが隠しメンバーになるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-421">Gets a value indicating whether only a member of the same kind with exactly the same signature is hidden in the derived class.</span></span></summary>
        <value><span data-ttu-id="e3cdc-422">メンバーがシグネチャで隠される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-422"><see langword="true" /> if the member is hidden by signature; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-423">派生クラスのメンバーがC# `new`修飾子または Visual Basic `Shadows`修飾子を使用して宣言されている場合、基底クラスの同じ名前のメンバーを非表示にすることができます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-423">When a member in a derived class is declared with the C# `new` modifier or the Visual Basic `Shadows` modifier, it can hide a member of the same name in the base class.</span></span> <span data-ttu-id="e3cdc-424">C#基底クラスのメンバーをシグネチャで非表示にします。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-424">C# hides base class members by signature.</span></span> <span data-ttu-id="e3cdc-425">つまり、基底クラスのメンバーに複数のオーバーロードがある場合、非表示になっているのは、同じシグネチャを持つ1つだけです。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-425">That is, if the base class member has multiple overloads, the only one that is hidden is the one that has the identical signature.</span></span> <span data-ttu-id="e3cdc-426">これに対し、Visual Basic では、すべての基底クラスオーバーロードが非表示になります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-426">By contrast, Visual Basic hides all the base class overloads.</span></span> <span data-ttu-id="e3cdc-427">したがって<xref:System.Reflection.MethodBase.IsHideBySig%2A> 、 `false`は、Visual Basic `Shadows`修飾子で宣言されたメンバー `true`と、 C# `new`修飾子で宣言されたメンバーに対してを返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-427">Thus, <xref:System.Reflection.MethodBase.IsHideBySig%2A> returns `false` on a member declared with the Visual Basic `Shadows` modifier, and `true` on a member declared with the C# `new` modifier.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="e3cdc-428">このプロパティは、メソッドに<xref:System.Reflection.MethodAttributes.NewSlot>属性があるかどうかを判断しません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-428">This property does not determine whether a method has the <xref:System.Reflection.MethodAttributes.NewSlot> attribute.</span></span> <span data-ttu-id="e3cdc-429">`new` C# <xref:System.Reflection.MethodBase.IsHideBySig%2A> <xref:System.Reflection.MethodAttributes.NewSlot> `new`または修飾子を使用して宣言されたメソッドには属性がありますが、で宣言されたメソッド(つまりメソッドのみ)には、プロパティが設定されます。`Shadows` `true`.</span><span class="sxs-lookup"><span data-stu-id="e3cdc-429">A method that is declared with either the `new` or the `Shadows` modifier will have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, but only methods declared with `new` (that is, only C# methods) will have the <xref:System.Reflection.MethodBase.IsHideBySig%2A> property set to `true`.</span></span>  <span data-ttu-id="e3cdc-430">メソッド<xref:System.Reflection.MethodAttributes.NewSlot>に属性があるかどうかを確認するには、次のような`If (myMethodInfo.Attributes And MethodAttributes.VtableLayoutMask) = MethodAttributes.NewSlot`コードを使用します。 `if ((myMethodInfo.Attributes & MethodAttributes.VtableLayoutMask) == MethodAttributes.NewSlot)` in C#または Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-430">To determine whether a method has the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, use code similar to the following: `if ((myMethodInfo.Attributes & MethodAttributes.VtableLayoutMask) == MethodAttributes.NewSlot)` in C# or `If (myMethodInfo.Attributes And MethodAttributes.VtableLayoutMask) = MethodAttributes.NewSlot` in Visual Basic.</span></span> <span data-ttu-id="e3cdc-431">ただし、 `new`または`Shadows`で宣言されたすべてのメソッドに<xref:System.Reflection.MethodAttributes.NewSlot>は<xref:System.Reflection.MethodAttributes.NewSlot>属性がありますが、属性を持つすべての`new`メソッド`Shadows`がまたはで宣言されているわけではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-431">Note, however, that although all methods declared with `new` or `Shadows` have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, not all methods that have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute are declared with `new` or `Shadows`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-432">次のコード例には、オーバーロードされたメソッドを持つ基底クラスと、オーバーロードのいずれかを非表示にする派生クラスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-432">The following code example contains a base class with an overloaded method, and a derived class that hides one of the overloads.</span></span> <span data-ttu-id="e3cdc-433">コード例の Visual Basic バージョンでは、派生クラス<xref:System.Reflection.MethodBase.IsHideBySig%2A>のメンバー `false`に対してプロパティがを返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-433">In the Visual Basic version of the code example, the <xref:System.Reflection.MethodBase.IsHideBySig%2A> property returns `false` for the member in the derived class.</span></span> <span data-ttu-id="e3cdc-434">コードサンプルC#のバージョンでは、派生クラスのメンバー `true`に対してプロパティがを返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-434">In the C# version of the code sample, the property returns `true` for the member in the derived class.</span></span>  
  
 [!code-cpp[System.Reflection.MethodBase.IsHideBySig#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.MethodBase.IsHideBySig/cpp/hide.cpp#1)]
 [!code-csharp[System.Reflection.MethodBase.IsHideBySig#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.MethodBase.IsHideBySig/CS/hide.cs#1)]
 [!code-vb[System.Reflection.MethodBase.IsHideBySig#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.MethodBase.IsHideBySig/VB/hide.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrivate">
      <MemberSignature Language="C#" Value="public bool IsPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrivate : bool" Usage="System.Reflection.MethodBase.IsPrivate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-435">このメンバーがプライベートかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-435">Gets a value indicating whether this member is private.</span></span></summary>
        <value><span data-ttu-id="e3cdc-436">このメソッドへのアクセスがそのクラスの他のメンバーに制限されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-436"><see langword="true" /> if access to this method is restricted to other members of the class itself; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-437">型のメンバーにレベル`Private`の可視性がある場合は、同じクラス内の任意のメンバーから呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-437">If a type member has `Private` level visibility, it can be called from any member in the same class and no others.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Reflection.MethodBase.IsPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-438">パブリック メソッドかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-438">Gets a value indicating whether this is a public method.</span></span></summary>
        <value><span data-ttu-id="e3cdc-439">このメソッドがパブリックの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-439"><see langword="true" /> if this method is public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-440">を取得<xref:System.Reflection.MethodBase>するには、最初に型を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-440">To get the <xref:System.Reflection.MethodBase>, first get the type.</span></span> <span data-ttu-id="e3cdc-441">型からメソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-441">From the type, get the method.</span></span> <span data-ttu-id="e3cdc-442">メソッドから、 `MethodBase`を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-442">From the method, get the `MethodBase`.</span></span> <span data-ttu-id="e3cdc-443">`MethodBase`コンストラクターまたはコンストラクターが public 以外の場合は、保護されており、すぐにアクセスすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-443">If the `MethodBase` or constructor is other than public, it is protected and cannot be readily accessed.</span></span> <span data-ttu-id="e3cdc-444">非パブリックメソッドにアクセスするには、 <xref:System.Reflection.BindingFlags> `NonPublic`マスクを in `GetMethod`に設定します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-444">To access a non-public method, set the <xref:System.Reflection.BindingFlags> mask to `NonPublic` in `GetMethod`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-445">次の例では<xref:System.Reflection.MethodBase.IsPublic%2A> 、プロパティを使用して、指定されたメソッドがパブリックであるかどうかを示すメッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-445">The following example uses the <xref:System.Reflection.MethodBase.IsPublic%2A> property to display a message that indicates whether the specified method is public.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsPublic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsPublic Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsPublic Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Reflection.BindingFlags" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Reflection.MethodBase.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-446">現在のメソッドまたはコンストラクターが、現在の信頼レベルでセキュリティ クリティカルまたはセキュリティ セーフ クリティカルであり、重要な操作を実行できるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-446">Gets a value that indicates whether the current method or constructor is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</span></span></summary>
        <value><span data-ttu-id="e3cdc-447">現在のメソッドまたはコンストラクターが、現在の信頼レベルでセキュリティ クリティカルまたはセキュリティ セーフ クリティカルである場合は <see langword="true" />。透過的である場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-447"><see langword="true" /> if the current method or constructor is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-448">、 <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> 、<xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>および<xref:System.Reflection.MethodBase.IsSecurityTransparent%2A>の各プロパティは、共通言語ランタイム (CLR) によって決定された、現在の信頼レベルでのメソッドまたはコンストラクターの透明度レベルを報告します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-448">The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="e3cdc-449">これらのプロパティの組み合わせを次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-449">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="e3cdc-450">セキュリティ レベル</span><span class="sxs-lookup"><span data-stu-id="e3cdc-450">Security level</span></span>|<span data-ttu-id="e3cdc-451">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="e3cdc-451">IsSecurityCritical</span></span>|<span data-ttu-id="e3cdc-452">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="e3cdc-452">IsSecuritySafeCritical</span></span>|<span data-ttu-id="e3cdc-453">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="e3cdc-453">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="e3cdc-454">重大</span><span class="sxs-lookup"><span data-stu-id="e3cdc-454">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="e3cdc-455">安全クリティカル</span><span class="sxs-lookup"><span data-stu-id="e3cdc-455">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="e3cdc-456">透明</span><span class="sxs-lookup"><span data-stu-id="e3cdc-456">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="e3cdc-457">これらのプロパティの使用は、アセンブリとその型およびメンバーのセキュリティ注釈を調べて、現在の信頼レベルを確認し、ランタイムの規則を複製しようとするよりもはるかに簡単です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-457">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3cdc-458">部分信頼アセンブリの場合、このプロパティの値は、アセンブリの現在の信頼レベルによって異なります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-458">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="e3cdc-459">アセンブリが部分的に信頼されたアプリケーションドメイン (たとえば、サンドボックス化されたアプリケーションドメイン) に読み込まれる場合、ランタイムは、アセンブリのセキュリティ注釈を無視します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-459">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="e3cdc-460">アセンブリとそのすべての型は透過的として扱われます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-460">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="e3cdc-461">ランタイムは、アセンブリが完全に信頼されたアプリケーションドメイン (たとえば、デスクトップアプリケーションの既定のアプリケーションドメイン) に読み込まれた場合にのみ、部分信頼アセンブリのセキュリティの注釈に注意します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-461">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="e3cdc-462">これに対し、信頼されたアセンブリ (グローバルアセンブリキャッシュにインストールされる厳密な名前のアセンブリ) は、アプリケーションドメインの信頼レベルに関係なく、常に完全信頼で読み込まれます。したがって、現在の信頼レベルは常に完全に信頼されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-462">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="e3cdc-463">アセンブリとアプリケーションドメインの現在の信頼レベルは、プロパティ<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>と<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>プロパティを使用して確認できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-463">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="e3cdc-464">リフレクションと透明度の詳細については、「[リフレクションのセキュリティに関する考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-464">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="e3cdc-465">透明度の詳細については、「[セキュリティの変更](~/docs/framework/security/security-changes.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-465">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MethodBase.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.MethodBase.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="e3cdc-466">リフレクションに関するセキュリティ上の考慮事項</span><span class="sxs-lookup"><span data-stu-id="e3cdc-466">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="e3cdc-467">.NET Framework バージョン 4 におけるセキュリティの変更点</span><span class="sxs-lookup"><span data-stu-id="e3cdc-467">Security Changes in the .NET Framework Version 4.0</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Reflection.MethodBase.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-468">現在のメソッドまたはコンストラクターが、現在の信頼レベルでセキュリティ セーフ クリティカルであり、重要な操作を実行でき、透過的なコードからアクセスできるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-468">Gets a value that indicates whether the current method or constructor is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span></span></summary>
        <value><span data-ttu-id="e3cdc-469">メソッドまたはコンストラクターが、現在の信頼レベルでセキュリティ セーフ クリティカルである場合は <see langword="true" />。セキュリティ クリティカルまたは透過的である場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-469"><see langword="true" /> if the method or constructor is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-470">、 <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> 、<xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>および<xref:System.Reflection.MethodBase.IsSecurityTransparent%2A>の各プロパティは、共通言語ランタイム (CLR) によって決定された、現在の信頼レベルでのメソッドまたはコンストラクターの透明度レベルを報告します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-470">The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="e3cdc-471">これらのプロパティの組み合わせを次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-471">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="e3cdc-472">セキュリティ レベル</span><span class="sxs-lookup"><span data-stu-id="e3cdc-472">Security level</span></span>|<span data-ttu-id="e3cdc-473">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="e3cdc-473">IsSecurityCritical</span></span>|<span data-ttu-id="e3cdc-474">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="e3cdc-474">IsSecuritySafeCritical</span></span>|<span data-ttu-id="e3cdc-475">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="e3cdc-475">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="e3cdc-476">重大</span><span class="sxs-lookup"><span data-stu-id="e3cdc-476">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="e3cdc-477">安全クリティカル</span><span class="sxs-lookup"><span data-stu-id="e3cdc-477">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="e3cdc-478">透明</span><span class="sxs-lookup"><span data-stu-id="e3cdc-478">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="e3cdc-479">これらのプロパティの使用は、アセンブリとその型およびメンバーのセキュリティ注釈を調べて、現在の信頼レベルを確認し、ランタイムの規則を複製しようとするよりもはるかに簡単です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-479">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3cdc-480">部分信頼アセンブリの場合、このプロパティの値は、アセンブリの現在の信頼レベルによって異なります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-480">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="e3cdc-481">アセンブリが部分的に信頼されたアプリケーションドメイン (たとえば、サンドボックス化されたアプリケーションドメイン) に読み込まれる場合、ランタイムは、アセンブリのセキュリティ注釈を無視します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-481">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="e3cdc-482">アセンブリとそのすべての型は透過的として扱われます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-482">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="e3cdc-483">ランタイムは、アセンブリが完全に信頼されたアプリケーションドメイン (たとえば、デスクトップアプリケーションの既定のアプリケーションドメイン) に読み込まれた場合にのみ、部分信頼アセンブリのセキュリティの注釈に注意します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-483">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="e3cdc-484">これに対し、信頼されたアセンブリ (グローバルアセンブリキャッシュにインストールされる厳密な名前のアセンブリ) は、アプリケーションドメインの信頼レベルに関係なく、常に完全信頼で読み込まれます。したがって、現在の信頼レベルは常に完全に信頼されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-484">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="e3cdc-485">アセンブリとアプリケーションドメインの現在の信頼レベルは、プロパティ<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>と<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>プロパティを使用して確認できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-485">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="e3cdc-486">リフレクションと透明度の詳細については、「[リフレクションのセキュリティに関する考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-486">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="e3cdc-487">透明度の詳細については、「[セキュリティの変更](~/docs/framework/security/security-changes.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-487">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MethodBase.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.MethodBase.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="e3cdc-488">リフレクションに関するセキュリティ上の考慮事項</span><span class="sxs-lookup"><span data-stu-id="e3cdc-488">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="e3cdc-489">.NET Framework バージョン 4 におけるセキュリティの変更点</span><span class="sxs-lookup"><span data-stu-id="e3cdc-489">Security Changes in the .NET Framework Version 4.0</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Reflection.MethodBase.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-490">現在のメソッドまたはコンストラクターが、現在の信頼レベルで透過的であり、重要な操作を実行できないかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-490">Gets a value that indicates whether the current method or constructor is transparent at the current trust level, and therefore cannot perform critical operations.</span></span></summary>
        <value><span data-ttu-id="e3cdc-491">メソッドまたはコンストラクターが、現在の信頼レベルで透過的セキュリティである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-491"><see langword="true" /> if the method or constructor is security-transparent at the current trust level; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-492">このプロパティがを`true`返す場合<xref:System.Reflection.MethodBase.IsSecurityCritical%2A> 、 <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>プロパティと`false`プロパティはを返します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-492">If this property returns `true`, the <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> and <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> properties return `false`.</span></span>  
  
 <span data-ttu-id="e3cdc-493">、 <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> 、<xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>および<xref:System.Reflection.MethodBase.IsSecurityTransparent%2A>の各プロパティは、共通言語ランタイム (CLR) によって決定された、現在の信頼レベルでのメソッドまたはコンストラクターの透明度レベルを報告します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-493">The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="e3cdc-494">これらのプロパティの使用は、アセンブリとその型およびメンバーのセキュリティ注釈を調べて、現在の信頼レベルを確認し、ランタイムの規則を複製しようとするよりもはるかに簡単です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-494">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3cdc-495">部分信頼アセンブリの場合、このプロパティの値は、アセンブリの現在の信頼レベルによって異なります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-495">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="e3cdc-496">アセンブリが部分的に信頼されたアプリケーションドメイン (たとえば、サンドボックス化されたアプリケーションドメイン) に読み込まれる場合、ランタイムは、アセンブリのセキュリティ注釈を無視します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-496">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="e3cdc-497">アセンブリとそのすべての型は透過的として扱われます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-497">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="e3cdc-498">ランタイムは、アセンブリが完全に信頼されたアプリケーションドメイン (たとえば、デスクトップアプリケーションの既定のアプリケーションドメイン) に読み込まれた場合にのみ、部分信頼アセンブリのセキュリティの注釈に注意します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-498">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="e3cdc-499">これに対し、信頼されたアセンブリ (グローバルアセンブリキャッシュにインストールされる厳密な名前のアセンブリ) は、アプリケーションドメインの信頼レベルに関係なく、常に完全信頼で読み込まれます。したがって、現在の信頼レベルは常に完全に信頼されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-499">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="e3cdc-500">アセンブリとアプリケーションドメインの現在の信頼レベルは、プロパティ<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>と<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>プロパティを使用して確認できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-500">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="e3cdc-501">リフレクションと透明度の詳細については、「[リフレクションのセキュリティに関する考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-501">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="e3cdc-502">透明度の詳細については、「[セキュリティの変更](~/docs/framework/security/security-changes.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-502">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MethodBase.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.MethodBase.IsSecuritySafeCritical" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="e3cdc-503">リフレクションに関するセキュリティ上の考慮事項</span><span class="sxs-lookup"><span data-stu-id="e3cdc-503">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="e3cdc-504">.NET Framework バージョン 4 におけるセキュリティの変更点</span><span class="sxs-lookup"><span data-stu-id="e3cdc-504">Security Changes in the .NET Framework Version 4.0</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Reflection.MethodBase.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-505">特別な名前のメソッドかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-505">Gets a value indicating whether this method has a special name.</span></span></summary>
        <value><span data-ttu-id="e3cdc-506">このメソッドに特別な名前が付けられている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-506"><see langword="true" /> if this method has a special name; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-507">ビット<xref:System.Reflection.MethodAttributes.SpecialName>は、一部のコンパイラで特別な方法で処理されるメンバーにフラグを設定するように設定されています (プロパティアクセサーや演算子のオーバーロードメソッドなど)。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-507">The <xref:System.Reflection.MethodAttributes.SpecialName> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-508">この例では、 <xref:System.Reflection.MethodBase.IsSpecialName%2A>を使用して、内部またはプライベートメンバーをリストから除外する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-508">This example shows a use of <xref:System.Reflection.MethodBase.IsSpecialName%2A> to filter internal or private members out of a list.</span></span>  
  
 [!code-cpp[Classic Type.IsSpecialName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsSpecialName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.IsSpecialName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsSpecialName Example/CS/source.cs#1)]
 [!code-vb[Classic Type.IsSpecialName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsSpecialName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Reflection.MethodAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Reflection.MethodBase.IsStatic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsStatic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-509">メソッドが <see langword="static" /> であるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-509">Gets a value indicating whether the method is <see langword="static" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-510">このメソッドが <see langword="static" /> である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-510"><see langword="true" /> if this method is <see langword="static" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-511">静的メンバーは、クラス内のインスタンスデータを暗黙的に参照することはできません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-511">A static member cannot implicitly reference instance data in a class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Reflection.MethodAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsVirtual">
      <MemberSignature Language="C#" Value="public bool IsVirtual { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVirtual" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.IsVirtual" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVirtual As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVirtual { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVirtual : bool" Usage="System.Reflection.MethodBase.IsVirtual" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsVirtual</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-512">メソッドが <see langword="virtual" /> であるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-512">Gets a value indicating whether the method is <see langword="virtual" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-513">このメソッドが <see langword="virtual" /> である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-513"><see langword="true" /> if this method is <see langword="virtual" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-514">仮想メンバーは、クラスのインスタンスデータを参照する場合があり、クラスのインスタンスを通じて参照する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-514">A virtual member may reference instance data in a class and must be referenced through an instance of the class.</span></span>  
  
 <span data-ttu-id="e3cdc-515">メソッドがオーバーライド可能かどうかを判断するには、が`IsVirtual` `true`であることを確認するだけでは十分ではありません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-515">To determine if a method is overridable, it is not sufficient to check that `IsVirtual` is `true`.</span></span> <span data-ttu-id="e3cdc-516">メソッドをオーバーライド可能にするに`IsVirtual`は、を<xref:System.Reflection.MethodBase.IsFinal%2A>にする`false`必要があります。 `true`また、はである必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-516">For a method to be overridable, `IsVirtual` must be `true` and <xref:System.Reflection.MethodBase.IsFinal%2A> must be `false`.</span></span> <span data-ttu-id="e3cdc-517">たとえば、メソッドは非仮想の場合もありますが、インターフェイスメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-517">For example, a method might be non-virtual, but it implements an interface method.</span></span> <span data-ttu-id="e3cdc-518">共通言語ランタイムでは、インターフェイスメンバーを実装するすべてのメソッドがと`virtual`してマークされている必要`virtual final`があります。したがって、コンパイラはメソッドをマークします。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-518">The common language runtime requires that all methods that implement interface members must be marked as `virtual`; therefore, the compiler marks the method `virtual final`.</span></span> <span data-ttu-id="e3cdc-519">そのため、メソッドがとしてマークさ`virtual`れていても、オーバーライドできない場合があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-519">So there are cases where a method is marked as `virtual` but is still not overridable.</span></span>  
  
 <span data-ttu-id="e3cdc-520">メソッドがオーバーライド可能であるかどうかを確実に確立するには、次のようなコードを使用します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-520">To establish with certainty whether a method is overridable, use code such as this:</span></span>  
  
```csharp  
if (MethodInfo.IsVirtual && !MethodInfo.IsFinal)  
```  
  
```vb  
If MethodInfo.IsVirtual AndAlso Not MethodInfo.IsFinal Then  
```  
  
 <span data-ttu-id="e3cdc-521">が`IsVirtual` また`false` はの`true`場合、メソッドをオーバーライドすることはできません。 `IsFinal`</span><span class="sxs-lookup"><span data-stu-id="e3cdc-521">If `IsVirtual` is `false` or `IsFinal` is `true`, then the method cannot be overridden.</span></span>  
  
 <span data-ttu-id="e3cdc-522"><xref:System.Reflection.MethodInfo.GetBaseDefinition%2A?displayProperty=nameWithType>メソッドを呼び出すことにより、現在のメソッドが基底クラスのメソッドをオーバーライドするかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-522">You can determine whether the current method overrides a method in a base class by calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e3cdc-523">これを行う`IsOverride`メソッドを実装する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-523">The following example implements an `IsOverride` method that does this.</span></span>  
  
 [!code-csharp[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/cs/IsOverride1.cs#2)]
 [!code-vb[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/vb/IsOverride1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="e3cdc-524">次の例で`false`は`IsFinal`、に対してを表示します`MyMethod` 。これにより、がオーバーライド可能であると考えることができます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-524">The following example displays `false` for `IsFinal`, which might lead you to think that `MyMethod` is overridable.</span></span> <span data-ttu-id="e3cdc-525">`MyMethod`が`false` マーク`virtual`されていないため、オーバーライドできない場合でも、コードは出力されます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-525">The code prints `false` even though `MyMethod` is not marked `virtual` and thus cannot be overridden.</span></span>  
  
 [!code-cpp[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public abstract RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodHandle : RuntimeMethodHandle" Usage="System.Reflection.MethodBase.MethodHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.MethodHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-526">メソッドの内部メタデータ表現を識別するハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-526">Gets a handle to the internal metadata representation of a method.</span></span></summary>
        <value><span data-ttu-id="e3cdc-527"><see cref="T:System.RuntimeMethodHandle" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-527">A <see cref="T:System.RuntimeMethodHandle" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-528">ハンドルは、取得されたアプリケーションドメインでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-528">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property MethodImplementationFlags As MethodImplAttributes" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      <MemberSignature Language="F#" Value="member this.MethodImplementationFlags : System.Reflection.MethodImplAttributes" Usage="System.Reflection.MethodBase.MethodImplementationFlags" />
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MethodImplementationFlags As MethodImplAttributes" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-529">メソッド実装の属性を指定する <see cref="T:System.Reflection.MethodImplAttributes" /> フラグを取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-529">Gets the <see cref="T:System.Reflection.MethodImplAttributes" /> flags that specify the attributes of a method implementation.</span></span></summary>
        <value><span data-ttu-id="e3cdc-530">メソッド実装フラグ。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-530">The method implementation flags.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-531">詳細については、<xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-531">See the <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A> method for more information.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.MethodBase left, System.Reflection.MethodBase right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.MethodBase left, class System.Reflection.MethodBase right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As MethodBase, right As MethodBase) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::MethodBase ^ left, System::Reflection::MethodBase ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.MethodBase * System.Reflection.MethodBase -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.MethodBase" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="right" Type="System.Reflection.MethodBase" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e3cdc-532">比較する最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-532">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e3cdc-533">比較する 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-533">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="e3cdc-534">2 つの <see cref="T:System.Reflection.MethodBase" /> オブジェクトが等しいかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-534">Indicates whether two <see cref="T:System.Reflection.MethodBase" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="e3cdc-535"><see langword="true" /> が <paramref name="left" /> に等しい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-535"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.MethodBase left, System.Reflection.MethodBase right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.MethodBase left, class System.Reflection.MethodBase right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As MethodBase, right As MethodBase) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::MethodBase ^ left, System::Reflection::MethodBase ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.MethodBase * System.Reflection.MethodBase -&gt; bool" Usage="System.Reflection.MethodBase.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.MethodBase" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="right" Type="System.Reflection.MethodBase" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e3cdc-536">比較する最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-536">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e3cdc-537">比較する 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-537">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="e3cdc-538">2 つの <see cref="T:System.Reflection.MethodBase" /> オブジェクトが等しくないかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-538">Indicates whether two <see cref="T:System.Reflection.MethodBase" /> objects are not equal.</span></span></summary>
        <returns><span data-ttu-id="e3cdc-539"><see langword="true" /> が <paramref name="left" /> と等しくない場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-539"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _MethodBase.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBase.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _MethodBase.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBase.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_MethodBase::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rgszNames" Type="System.IntPtr" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cNames" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rgDispId" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="e3cdc-540">将来使用するために予約されています。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-540">Reserved for future use.</span></span> <span data-ttu-id="e3cdc-541">IID_NULL にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-541">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="e3cdc-542">マッピング対象として渡される名前の配列。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-542">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="e3cdc-543">マッピングされる名前のカウント。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-543">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="e3cdc-544">名前を解釈するロケール コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-544">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="e3cdc-545">名前に対応する ID を受け取る、呼び出し元が割り当てた配列。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-545">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="e3cdc-546">一連の名前を対応する一連のディスパッチ識別子に割り当てます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-546">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-547">このメソッドは、アンマネージコードからマネージクラスにアクセスするためのものであり、マネージコードからは呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-547">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e3cdc-548">の詳細`IDispatch::GetIDsOfNames`については、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-548">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="e3cdc-549">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-549">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.GetType">
      <MemberSignature Language="C#" Value="Type _MethodBase.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._MethodBase.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _MethodBase.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._MethodBase.GetType() = System::Runtime::InteropServices::_MethodBase::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cdc-550">このメンバーの説明については、<see cref="M:System.Runtime.InteropServices._MethodBase.GetType" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-550">For a description of this member, see <see cref="M:System.Runtime.InteropServices._MethodBase.GetType" />.</span></span></summary>
        <returns><span data-ttu-id="e3cdc-551">このメンバーの説明については、<see cref="M:System.Runtime.InteropServices._MethodBase.GetType" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-551">For a description of this member, see <see cref="M:System.Runtime.InteropServices._MethodBase.GetType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-552">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-552">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e3cdc-553">これは、<xref:System.Reflection.MethodBase> のインスタンスが <xref:System.Runtime.InteropServices._MethodBase> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-553">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _MethodBase.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBase.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _MethodBase.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBase.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_MethodBase::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="e3cdc-554">返される型情報。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-554">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="e3cdc-555">型情報のロケール ID。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-555">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="e3cdc-556">要求された型情報オブジェクトへのポインターを取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-556">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="e3cdc-557">オブジェクトの型情報を取得します。この型情報を使用して、インターフェイスの型情報を取得できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-557">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-558">このメソッドは、アンマネージコードからマネージクラスにアクセスするためのものであり、マネージコードからは呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-558">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e3cdc-559">の詳細`IDispatch::GetTypeInfo`については、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-559">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="e3cdc-560">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-560">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _MethodBase.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBase.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _MethodBase.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBase.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_MethodBase::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="e3cdc-561">オブジェクトにより提供される型タイプ情報インターフェイスの数を受け取る場所を指定します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-561">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="e3cdc-562">オブジェクトが提供する型情報インターフェイスの数 (0 または 1) を取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-562">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-563">このメソッドは、アンマネージコードからマネージクラスにアクセスするためのものであり、マネージコードからは呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-563">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e3cdc-564">の詳細`IDispatch::GetTypeInfoCount`については、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-564">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="e3cdc-565">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-565">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.Invoke">
      <MemberSignature Language="C#" Value="void _MethodBase.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBase.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _MethodBase.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBase.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_MethodBase::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBase.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="wFlags" Type="System.Int16" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pDispParams" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pVarResult" Type="System.IntPtr" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" Index="6" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="puArgErr" Type="System.IntPtr" Index="7" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="e3cdc-566">メンバーを識別します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-566">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="e3cdc-567">将来使用するために予約されています。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-567">Reserved for future use.</span></span> <span data-ttu-id="e3cdc-568">IID_NULL にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-568">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="e3cdc-569">引数を解釈する対象のロケール コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-569">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="e3cdc-570">呼び出しのコンテキストを記述するフラグ。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-570">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="e3cdc-571">引数の配列、名前付き引数の DISPID の配列、配列内の要素数のカウントを格納している構造体へのポインター。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-571">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="e3cdc-572">結果が格納される場所へのポインター。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-572">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="e3cdc-573">例外情報を格納する構造体へのポインター。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-573">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="e3cdc-574">エラーが存在する最初の引数のインデックス。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-574">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="e3cdc-575">オブジェクトによって公開されたプロパティおよびメソッドへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-575">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-576">このメソッドは、アンマネージコードからマネージクラスにアクセスするためのものであり、マネージコードからは呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-576">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e3cdc-577">の詳細`IDispatch::Invoke`については、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-577">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="e3cdc-578">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-578">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsAbstract">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsAbstract As Boolean Implements _MethodBase.IsAbstract" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsAbstract" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsAbstract</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-579">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsAbstract" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-579">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsAbstract" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-580">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsAbstract" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-580">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsAbstract" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-581">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-581">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e3cdc-582">これは、<xref:System.Reflection.MethodBase> のインスタンスが <xref:System.Runtime.InteropServices._MethodBase> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-582">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsAssembly">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsAssembly As Boolean Implements _MethodBase.IsAssembly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsAssembly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-583">このメンバーの説明については、<see cref="P:System.Runtime.InteropServices._MethodBase.IsAssembly" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-583">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsAssembly" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-584">このメンバーの説明については、<see cref="P:System.Runtime.InteropServices._MethodBase.IsAssembly" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-584">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsAssembly" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-585">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-585">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e3cdc-586">これは、<xref:System.Reflection.MethodBase> のインスタンスが <xref:System.Runtime.InteropServices._MethodBase> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-586">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsConstructor">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsConstructor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsConstructor" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsConstructor As Boolean Implements _MethodBase.IsConstructor" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsConstructor { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsConstructor" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsConstructor</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-587">このメンバーの説明については、<see cref="P:System.Runtime.InteropServices._MethodBase.IsConstructor" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-587">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsConstructor" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-588">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsConstructor" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-588">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsConstructor" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-589">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-589">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e3cdc-590">これは、<xref:System.Reflection.MethodBase> のインスタンスが <xref:System.Runtime.InteropServices._MethodBase> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-590">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsFamily">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsFamily" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFamily As Boolean Implements _MethodBase.IsFamily" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsFamily { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsFamily" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-591">このメンバーの説明については、<see cref="P:System.Runtime.InteropServices._MethodBase.IsFamily" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-591">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamily" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-592">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsFamily" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-592">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamily" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-593">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-593">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e3cdc-594">これは、<xref:System.Reflection.MethodBase> のインスタンスが <xref:System.Runtime.InteropServices._MethodBase> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-594">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFamilyAndAssembly As Boolean Implements _MethodBase.IsFamilyAndAssembly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsFamilyAndAssembly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-595">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-595">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-596">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-596">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-597">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-597">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e3cdc-598">これは、<xref:System.Reflection.MethodBase> のインスタンスが <xref:System.Runtime.InteropServices._MethodBase> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-598">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFamilyOrAssembly As Boolean Implements _MethodBase.IsFamilyOrAssembly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsFamilyOrAssembly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-599">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-599">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-600">このメンバーの説明については、<see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-600">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-601">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-601">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e3cdc-602">これは、<xref:System.Reflection.MethodBase> のインスタンスが <xref:System.Runtime.InteropServices._MethodBase> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-602">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsFinal">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsFinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsFinal" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFinal As Boolean Implements _MethodBase.IsFinal" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsFinal { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsFinal" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsFinal</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-603">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsFinal" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-603">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFinal" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-604">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsFinal" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-604">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFinal" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-605">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-605">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e3cdc-606">これは、<xref:System.Reflection.MethodBase> のインスタンスが <xref:System.Runtime.InteropServices._MethodBase> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-606">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsHideBySig">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsHideBySig { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsHideBySig" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsHideBySig As Boolean Implements _MethodBase.IsHideBySig" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsHideBySig { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsHideBySig" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsHideBySig</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-607">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsHideBySig" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-607">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsHideBySig" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-608">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsHideBySig" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-608">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsHideBySig" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-609">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-609">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e3cdc-610">これは、<xref:System.Reflection.MethodBase> のインスタンスが <xref:System.Runtime.InteropServices._MethodBase> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-610">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsPrivate">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsPrivate As Boolean Implements _MethodBase.IsPrivate" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsPrivate { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsPrivate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-611">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsPrivate" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-611">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsPrivate" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-612">このメンバーの説明については、<see cref="P:System.Runtime.InteropServices._MethodBase.IsPrivate" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-612">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsPrivate" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-613">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-613">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e3cdc-614">これは、<xref:System.Reflection.MethodBase> のインスタンスが <xref:System.Runtime.InteropServices._MethodBase> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-614">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsPublic">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsPublic As Boolean Implements _MethodBase.IsPublic" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-615">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsPublic" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-615">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsPublic" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-616">このメンバーの説明については、<see cref="P:System.Runtime.InteropServices._MethodBase.IsPublic" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-616">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsPublic" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-617">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-617">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e3cdc-618">これは、<xref:System.Reflection.MethodBase> のインスタンスが <xref:System.Runtime.InteropServices._MethodBase> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-618">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsSpecialName">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSpecialName As Boolean Implements _MethodBase.IsSpecialName" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-619">このメンバーの説明については、<see cref="P:System.Runtime.InteropServices._MethodBase.IsSpecialName" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-619">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsSpecialName" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-620">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsSpecialName" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-620">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsSpecialName" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-621">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-621">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e3cdc-622">これは、<xref:System.Reflection.MethodBase> のインスタンスが <xref:System.Runtime.InteropServices._MethodBase> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-622">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsStatic">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsStatic As Boolean Implements _MethodBase.IsStatic" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsStatic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsStatic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-623">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsStatic" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-623">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsStatic" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-624">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsStatic" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-624">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsStatic" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-625">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-625">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e3cdc-626">これは、<xref:System.Reflection.MethodBase> のインスタンスが <xref:System.Runtime.InteropServices._MethodBase> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-626">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBase.IsVirtual">
      <MemberSignature Language="C#" Value="bool System.Runtime.InteropServices._MethodBase.IsVirtual { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Runtime.InteropServices._MethodBase.IsVirtual" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsVirtual As Boolean Implements _MethodBase.IsVirtual" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Runtime::InteropServices::_MethodBase::IsVirtual { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.InteropServices._MethodBase.IsVirtual" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MethodBase.IsVirtual</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3cdc-627">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsVirtual" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-627">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsVirtual" />.</span></span></summary>
        <value><span data-ttu-id="e3cdc-628">このメンバーの詳細については、「<see cref="P:System.Runtime.InteropServices._MethodBase.IsVirtual" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-628">For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsVirtual" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cdc-629">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-629">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e3cdc-630">これは、<xref:System.Reflection.MethodBase> のインスタンスが <xref:System.Runtime.InteropServices._MethodBase> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e3cdc-630">It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
