<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TargetInvocationException.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54de71b8afd037417420fabfe4c7f744581ff2a10.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4de71b8afd037417420fabfe4c7f744581ff2a10</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.TargetInvocationException">
          <source>The exception that is thrown by methods invoked through reflection.</source>
          <target state="translated">リフレクションを通じて呼び出されたメソッドがスローする例外。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Reflection.TargetInvocationException">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TargetInvocationException">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TargetInvocationException">
          <source><ph id="ph1">`TargetInvocationException`</ph> uses the HRESULT COR_E_TARGETINVOCATION which has the value 0x80131604.</source>
          <target state="translated"><ph id="ph1">`TargetInvocationException`</ph> 値は 0x80131604 HRESULT COR_E_TARGETINVOCATION を使用します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TargetInvocationException">
          <source>When created, the <ph id="ph1">`TargetInvocationException`</ph> is passed a reference to the exception thrown by the method invoked through reflection.</source>
          <target state="translated">作成すると、<ph id="ph1">`TargetInvocationException`</ph>リフレクションを通じて呼び出されたメソッドによってスローされる例外への参照が渡されます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TargetInvocationException">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property holds the underlying exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph>プロパティは、基の例外を保持します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Reflection.TargetInvocationException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.TargetInvocationException" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.TargetInvocationException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">現在の例外の原因となった例外。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>inner<ept id="p1">&lt;/c&gt;</ept> parameter is not <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>inner<ept id="p1">&lt;/c&gt;</ept> パラメーターが <ph id="ph1">&lt;see langword="null" /&gt;</ph> でない場合は、内部例外を処理する <ph id="ph2">&lt;see langword="catch" /&gt;</ph> ブロックで現在の例外が発生します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.TargetInvocationException" /&gt;</ph> class with a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">この例外の原因である内部例外への参照を指定して、<ph id="ph1">&lt;see cref="T:System.Reflection.TargetInvocationException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">前の例外の直接の結果としてスローされる例外については、<ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> プロパティに、前の例外への参照が格納されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or <ph id="ph2">`null`</ph> if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> プロパティは、コンストラクターに渡されたものと同じ値を返します。<ph id="ph2">`null`</ph> プロパティによって内部例外値がコンストラクターに渡されなかった場合は、<ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph> のインスタンスの初期プロパティ値を次の表に示します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
          <source>Property</source>
          <target state="translated">プロパティ</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
          <source>Value</source>
          <target state="translated">[値]</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
          <source>The inner exception reference.</source>
          <target state="translated">内部例外の参照。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
          <source>The error message string.</source>
          <target state="translated">エラー メッセージ文字列。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">例外の原因を説明するエラー メッセージ。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">現在の例外の原因となった例外。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>inner<ept id="p1">&lt;/c&gt;</ept> parameter is not <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>inner<ept id="p1">&lt;/c&gt;</ept> パラメーターが <ph id="ph1">&lt;see langword="null" /&gt;</ph> でない場合は、内部例外を処理する <ph id="ph2">&lt;see langword="catch" /&gt;</ph> ブロックで現在の例外が発生します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.TargetInvocationException" /&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<ph id="ph1">&lt;see cref="T:System.Reflection.TargetInvocationException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">前の例外の直接の結果としてスローされる例外については、<ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> プロパティに、前の例外への参照が格納されます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or <ph id="ph2">`null`</ph> if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> プロパティは、コンストラクターに渡されたものと同じ値を返します。<ph id="ph2">`null`</ph> プロパティによって内部例外値がコンストラクターに渡されなかった場合は、<ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph> のインスタンスの初期プロパティ値を次の表に示します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">プロパティ</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">[値]</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
          <source>The inner exception reference.</source>
          <target state="translated">内部例外の参照。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
          <source>The error message string.</source>
          <target state="translated">エラー メッセージ文字列。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>