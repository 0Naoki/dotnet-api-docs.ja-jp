<Type Name="SpeakProgressEventArgs" FullName="System.Speech.Synthesis.SpeakProgressEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="201d02a0da96ab875cea471c1bc242a2f193a566" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408427" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeakProgressEventArgs : System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeakProgressEventArgs extends System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeakProgressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeakProgressEventArgs&#xA;Inherits PromptEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeakProgressEventArgs : System::Speech::Synthesis::PromptEventArgs" />
  <TypeSignature Language="F#" Value="type SpeakProgressEventArgs = class&#xA;    inherit PromptEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Synthesis.PromptEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" /> イベントからのデータを返します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インスタンス<xref:System.Speech.Synthesis.SpeakProgressEventArgs>場合は、作成、<xref:System.Speech.Synthesis.SpeechSynthesizer>オブジェクト、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>イベント。 <xref:System.Speech.Synthesis.SpeechSynthesizer>の新しい各単語内のいずれかを使用して、プロンプトで、これは、このイベントを発生させる、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>、または<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>メソッドです。  
  
 返されるデータは、音声合成マークアップ言語 (SSML) コードを生成するに基づいています。 値は、<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A>スペース文字と、コードによって生成される SSML タグの内容が含まれます。  
  
   
  
## Examples  
 次の例から提供される情報<xref:System.Speech.Synthesis.SpeakProgressEventArgs>です。 注方法、 <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>、 <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>、 <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>、および<xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>方法に影響を与える、<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A>自分を追加して** \<p >**、 ** \</p >**、 ** \<s >**、および** \</s >** タグ生成される SSML をします。 また、「30%」、この番号の文字列 (30%) の間に各単語の 1 つの出力には 2 つのエントリがあります。 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A>と<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>エントリごとに同じで、"30% 文字を表すです。 ただし、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> 「30」単語の話すと、"percent"を反映するように変更、<xref:System.Speech.Synthesis.SpeechSynthesizer>です。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt containing a paragraph and two sentences.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.StartParagraph();  
        builder.StartSentence();  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.EndSentence();  
        builder.StartSentence();  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.EndSentence();  
        builder.EndParagraph();  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character postion to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("CharPos: {0}   CharCount: {1}   AudioPos: {2}    \"{3}\"",  
        e.CharacterPosition, e.CharacterCount, e.AudioPosition, e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベントのオーディオの位置を取得します。</summary>
        <value>オーディオ出力ストリームのイベントの位置を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>数値数の話される方法に対応する単語を正規化します。 たとえば、シンセサイザーでは、「4 桁の 3 つ」と「4003」数が話します。 生成、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>読み上げられる単語、および返しますの各イベント、<xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A>単語ごとにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterCount">
      <MemberSignature Language="C#" Value="public int CharacterCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterCount" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterCount : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベントが発生した直前に読み上げられた単語の文字数を取得します。</summary>
        <value>イベントが発生した直前に読み上げられた単語の文字数を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>数値数の話される方法に対応する単語を正規化します。 たとえば、シンセサイザーでは、「4 桁の 3 つ」と「4003」数が話します。 発生させる、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>読み上げられる単語の各イベント。 ただし、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> 3 つの単語の各プロパティは同じです。 ここで、プロンプトのテキストに「4003」数の文字数は 4 つです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterPosition">
      <MemberSignature Language="C#" Value="public int CharacterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterPosition : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プロンプトの最初から、たったいま読み上げられた単語の最初の文字の前の位置までの、文字とスペースの数を取得します。</summary>
        <value>プロンプトの最初から、たったいま読み上げられた単語の最初の文字の前の位置までの、文字とスペースの数を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> XML タグ、それを囲むかっこも含めには、文字の数が含まれます。 いずれかを使用する場合、 <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>、 <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>、 <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>、 <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>、または<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>メソッド、内容が、開始タグと終了を含む SSML プロンプトに追加されます`speak`要素。 開始`speak`要素は、82 文字のオフセットを追加しにスペース、<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>すべての単語およびプロンプト文字です。 たとえば、次のスニペットで、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> 82"this"が、最初の単語です。  
  
```csharp  
builder.AppendText("This is a test");  
Synthesizer.Speak(builder);  
```  
  
 上記の例では、<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>単語の"test"が 92。 次のスニペットに、<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>単語の"test"では 23 文字以上 (115) を開く** \<prosody ピッチ =「高」>** 前にあるタグには、23 の文字とスペース (、2 つのエスケープが含まれています。文字"\\"はカウントされません)。  
  
```csharp  
builder.AppendSsmlMarkup("This is a <prosody pitch=\"high\"> test </prosody>.");   
Synthesizer.Speak(builder);  
```  
  
 使用する場合、<xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>を開く、ファイルを指定して、プロンプトにコンテンツを追加する方法`xml`宣言と`speak`ファイル内の要素が使用またはカウントされません。 開始した後、ファイルの最初の文字`speak`タグになります位置 82、プロンプトの最初のコンテンツである場合。  
  
 一方の文字列パラメーター、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>メソッドが読み上げされる前に追加 SSML プロンプトを取得できません。 したがって、<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>最初の単語の"this"では、次のスニペットは 0 です。  
  
```csharp  
Synthesizer.Speak("This is a test.");  
```  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>数値数の話される方法に対応する単語を正規化します。 たとえば、シンセサイザーでは、「4 桁の 3 つ」と「4003」数が話します。 発生させる、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> 3 読み上げられる単語の各イベント。 ただし、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> 3 つの単語の各プロパティは同じです。 プロンプトのテキストに「4003」数の最初の文字の前に位置することをお勧めします。  
  
   
  
## Examples  
 次の例を作成、 <xref:System.Speech.Synthesis.PromptBuilder> SSML 内容を使用する XML ファイルを追加および<xref:System.Xml.XmlReader>です。 例では、再生の WAV ファイルに音声を出力します。 次のコード例 SSML を含む XML ファイルの内容が表示されます。  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a path to the file that contains SSML.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.ssml");  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress: {0} {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
  
```  
  
```xml  
<!-- The following are the contents of the file Weather.ssml.   
Note that because of the <p> tag and the space that follows it,   
that the character position of the first word "The" will be 86. -->  
  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <p> The weather forecast for today is partly cloudy with   
some sun breaks. </p>  
  
  <break strength="medium" />  
  
  <p> Tonight's weather will be cloudy with a 30% chance of   
showers. </p>  
  
</speak>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベントの発生時に発音されたテキスト。</summary>
        <value>イベントの発生時に読み上げられたテキストを返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>数値数の話される方法に対応する単語を正規化します。 たとえば、シンセサイザーでは、「4 桁の 3 つ」と「4003」数が話します。 発生させる、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>読み上げられる単語の各イベント。 ただし、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> 3 つの単語の各プロパティは同じです。 これは、プロンプトからテキスト「4003」です。  
  
   
  
## Examples  
 次の例は、方法を示しています、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>イベント レポート、<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>と<xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A>数値を格納した文字列のプロパティです。  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("4003");  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress -    Character position:  {0}    Text:  {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>