<Type Name="PromptBuilder" FullName="System.Speech.Synthesis.PromptBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="253ce5087a2e9931ca23b5de7c061c20b1ab18bd" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48651370" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PromptBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit PromptBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.PromptBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class PromptBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class PromptBuilder" />
  <TypeSignature Language="F#" Value="type PromptBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2a172-101">空の <see cref="T:System.Speech.Synthesis.Prompt" /> オブジェクトを作成し、内容の追加、音声の選択、音声の属性の制御、および読み上げられる単語の発音の制御を行うメソッドを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2a172-101">Creates an empty <see cref="T:System.Speech.Synthesis.Prompt" /> object and provides methods for adding content, selecting voices, controlling voice attributes, and controlling the pronunciation of spoken words.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-102"><xref:System.Speech.Synthesis.PromptBuilder>、さまざまなコンテンツの種類 (文字列またはファイル) として、プレーン テキスト、SSML マークアップを含む、プロンプトに、オーディオの記録の追加し、も別<xref:System.Speech.Synthesis.PromptBuilder>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2a172-102">With <xref:System.Speech.Synthesis.PromptBuilder>, you can add a variety of content types to a prompt, including plain text, SSML markup (as a string or a file), recorded audio, or even another <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span>  
  
 <span data-ttu-id="2a172-103">テキストを追加する、<xref:System.Speech.Synthesis.PromptBuilder>オブジェクトし、必要に応じて強調、レート、および、ボリュームのいずれかを使用するなど、音声の属性を制御、<xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-103">To append text to a <xref:System.Speech.Synthesis.PromptBuilder> object and optionally control voice attributes such as emphasis, rate, and volume, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> methods.</span></span>  <span data-ttu-id="2a172-104">グループとして、音声の属性を制御することも、<xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>と<xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-104">You can also control voice attributes as a group with the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> methods.</span></span>  
  
 <span data-ttu-id="2a172-105">テキストを追加し、話されている内容を制御することができますを使用して"と発音がどのように、 <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>、 <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>、 <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>、 <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>、または<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-105">You can append text and control what is spoken or how it is pronounced using the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>,  <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> methods.</span></span>  
  
 <span data-ttu-id="2a172-106">変更のオーバー ロードされたいずれかを使用して、プロンプトで現在選択されている声<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>メソッド、またはを使用して指定する特定の音声の名前を付けるには、年齢や性別などの音声の特性が必要な。</span><span class="sxs-lookup"><span data-stu-id="2a172-106">Change the currently selected speaking voice in the prompt using one of the overloaded <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods, naming a specific voice to use or specifying required voice characteristics, such as age and gender.</span></span>  
  
 <span data-ttu-id="2a172-107">音声を生成する、<xref:System.Speech.Synthesis.PromptBuilder>オブジェクトへの引数として渡すことができます、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-107">To generate speech from a <xref:System.Speech.Synthesis.PromptBuilder> object, you can pass it as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.</span></span>  
  
 <span data-ttu-id="2a172-108">詳細については、次を参照してください。[複雑なプロンプトを構築する](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361616(v%3doffice.14))します。</span><span class="sxs-lookup"><span data-stu-id="2a172-108">For more information, see [Constructing a Complex Prompt](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361616(v%3doffice.14)).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a172-109">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> クラスの新しいインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-109">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PromptBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2a172-110">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> クラスの新しいインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-110">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2a172-111">次の例では、作成、新しい<xref:System.Speech.Synthesis.PromptBuilder>インスタンスし、テキスト文字列を追加します。</span><span class="sxs-lookup"><span data-stu-id="2a172-111">The following example creates a new <xref:System.Speech.Synthesis.PromptBuilder> instance and adds a text string to it.</span></span>  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("Hello world!");  
}  
```  
  
 <span data-ttu-id="2a172-112">次のマークアップを示していますと同等のマークアップ言語 SSML (Speech Synthesis)、(`xml:lang`の必須の属性は、`speak`要素)。</span><span class="sxs-lookup"><span data-stu-id="2a172-112">The following markup shows the equivalent in Speech Synthesis Markup Language (SSML), (`xml:lang` is a required attribute of the `speak` element):</span></span>  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PromptBuilder(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.PromptBuilder : System.Globalization.CultureInfo -&gt; System.Speech.Synthesis.PromptBuilder" Usage="new System.Speech.Synthesis.PromptBuilder culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="2a172-113">特定のカルチャに関する情報を提供します。たとえば、カルチャの言語、カルチャの名前、書記体系、使用するカレンダー、日付形式や文字列の並べ替え方法などです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-113">Provides information about a specific culture, such as its language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-114">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> クラスの新しいインスタンスを作成し、カルチャを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-114">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class and specifies a culture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-115">このコンス トラクターの値が設定、<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2a172-115">This constructor sets the value for the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="2a172-116"><xref:System.Speech.Synthesis.SpeechSynthesizer>で指定された言語をサポートするインストール済みの音声を選択しようとして、オブジェクト、`culture`プロンプトを処理するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="2a172-116">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the `culture` parameter to process the prompt.</span></span> <span data-ttu-id="2a172-117">音声を指定したカルチャが見つかった場合は、それが使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-117">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="2a172-118">音声を指定したカルチャが見つからない場合は、既定の音声が使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-118">If a voice with the specified culture cannot be found, the default voice will be used.</span></span>  
  
 <span data-ttu-id="2a172-119">指定された言語の単語を正しく発音、`culture`パラメーターを言語をサポートする音声合成の音声合成 (TTS) エンジンをインストールする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-119">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="2a172-120">インストールされている、TTS エンジンには、音声が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-120">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="2a172-121">特定のカルチャの音声のインストールに関する情報を取得する、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-121">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="2a172-122">Microsoft Windows と System.Speech API は、の値として有効なすべての言語、国コードを受け入れる`culture`します。</span><span class="sxs-lookup"><span data-stu-id="2a172-122">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="2a172-123">Windows 7 に同梱されている音声合成エンジンは、次の言語、国コードをサポートします。</span><span class="sxs-lookup"><span data-stu-id="2a172-123">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="2a172-124">en-us (英語)。</span><span class="sxs-lookup"><span data-stu-id="2a172-124">en-US.</span></span> <span data-ttu-id="2a172-125">英語 (米国)</span><span class="sxs-lookup"><span data-stu-id="2a172-125">English (United States)</span></span>  
  
-   <span data-ttu-id="2a172-126">ZH-CN します。</span><span class="sxs-lookup"><span data-stu-id="2a172-126">zh-CN.</span></span> <span data-ttu-id="2a172-127">中国語 (中国)</span><span class="sxs-lookup"><span data-stu-id="2a172-127">Chinese (China)</span></span>  
  
-   <span data-ttu-id="2a172-128">zh-tw があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-128">zh-TW.</span></span> <span data-ttu-id="2a172-129">中国語 (台湾)</span><span class="sxs-lookup"><span data-stu-id="2a172-129">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="2a172-130">"En"などの 2 文字の言語コードも許可します。</span><span class="sxs-lookup"><span data-stu-id="2a172-130">Two-letter language codes such as "en" are also permitted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-131">次の例を作成、<xref:System.Speech.Synthesis.PromptBuilder>インスタンスを指定します、<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-131">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies its <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.</span></span>  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder(new System.Globalization.CultureInfo("en-US"));  
    builder.AppendText("Hello world!");  
}  
```  
  
 <span data-ttu-id="2a172-132">次のマークアップは、同等の SSML を示しています。</span><span class="sxs-lookup"><span data-stu-id="2a172-132">The following markup shows the equivalent SSML:</span></span>  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendAudio">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a172-133">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに指定されたオーディオ ファイルを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-133">Appends a specified audio file to a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : string -&gt; unit" Usage="promptBuilder.AppendAudio path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="2a172-134">オーディオ ファイルへの完全修飾パス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-134">A fully qualified path to the audio file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-135">指定されたオーディオ ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> に追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-135">Appends the specified audio file to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (audioFile As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(Uri ^ audioFile);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : Uri -&gt; unit" Usage="promptBuilder.AppendAudio audioFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="audioFile">
          <span data-ttu-id="2a172-136">オーディオ ファイルの URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-136">URI for the audio file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-137">指定した URI のオーディオ ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> に追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-137">Appends the audio file at the specified URI to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2a172-138">次の例は、の新しいインスタンスを初期化、<xref:System.Speech.Synthesis.PromptBuilder>クラスし、その後に、オーディオ ファイルにテキストを追加します。</span><span class="sxs-lookup"><span data-stu-id="2a172-138">The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class and then adds text to it, followed by an audio file.</span></span>  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
    // Add a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("How are you today?");  
    builder.AppendAudio(new Uri ("http://www.speech.microsoft.com/ding.wav"));  
}  
```  
  
 <span data-ttu-id="2a172-139">次のマークアップは、同等の SSML マークアップを示します。</span><span class="sxs-lookup"><span data-stu-id="2a172-139">The following markup shows the equivalent SSML markup.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  How are you today?  
  <audio src="http://www.speech.microsoft.com/ding.wav" />  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile, string alternateText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile, string alternateText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (audioFile As Uri, alternateText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(Uri ^ audioFile, System::String ^ alternateText);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : Uri * string -&gt; unit" Usage="promptBuilder.AppendAudio (audioFile, alternateText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
        <Parameter Name="alternateText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="audioFile">
          <span data-ttu-id="2a172-140">オーディオ ファイルの URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-140">URI for the audio file.</span>
          </span>
        </param>
        <param name="alternateText">
          <span data-ttu-id="2a172-141">オーディオを表す代替テキストを含む文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-141">A string containing alternate text representing the audio.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-142">指定されたオーディオ ファイルと代替テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> に追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-142">Appends the specified audio file and alternate text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-143">オーディオ ファイルを再生できない場合、音声合成エンジンは代替テキストを読み上げます。</span><span class="sxs-lookup"><span data-stu-id="2a172-143">The speech synthesis engine will speak the alternate text if the audio file cannot be played.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-144">次の例では、追加するオーディオ ファイルを<xref:System.Speech.Synthesis.PromptBuilder>インスタンスし、オーディオ ファイルを再生できない場合に読み上げるテキストを指定します。</span><span class="sxs-lookup"><span data-stu-id="2a172-144">The following examples adds an audio file to a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies text to speak if the audio file cannot be played.</span></span>  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
  
    // Concatenate a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendAudio(new Uri ("C:\\OnHold.wav"), "Your call will be answered in the order it was received");  
}  
```  
  
 <span data-ttu-id="2a172-145">次のマークアップは、同等の SSML マークアップを示します。</span><span class="sxs-lookup"><span data-stu-id="2a172-145">The following markup shows the equivalent SSML markup.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  <audio src="C:\OnHold.wav"> Your call will be answered in the order it was received. </audio>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBookmark">
      <MemberSignature Language="C#" Value="public void AppendBookmark (string bookmarkName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBookmark(string bookmarkName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBookmark (bookmarkName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBookmark(System::String ^ bookmarkName);" />
      <MemberSignature Language="F#" Value="member this.AppendBookmark : string -&gt; unit" Usage="promptBuilder.AppendBookmark bookmarkName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bookmarkName">
          <span data-ttu-id="2a172-146">追加されるブックマークの名前を含む文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-146">A string containing the name of the appended bookmark.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-147">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトにブックマークを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-147">Appends a bookmark to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-148">音声合成エンジンが生成されます、<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>イベントのいずれかを使用して、プロンプトの話すときに、ブックマークに到達した場合、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>、または<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-148">A speech synthesis engine will generate a <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event if it encounters a bookmark while speaking a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-149">次の例では、2 つのブックマークを含み、WAV ファイル再生の出力を送信するプロンプトを作成します。</span><span class="sxs-lookup"><span data-stu-id="2a172-149">The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback.</span></span> <span data-ttu-id="2a172-150">ハンドラーは、<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>イベントは、コンソールに、イベントの発生時にブックマークとオーディオ ストリーム内の位置の名前を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2a172-150">The handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nightime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendBreak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a172-151">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトのコンテンツに中断 (一時停止) を入れます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-151">Inserts a break (pause) in the content of a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak();" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : unit -&gt; unit" Usage="promptBuilder.AppendBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2a172-152">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに中断を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-152">Appends a break to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-153">このメソッドは、中断の期間を指定しません。</span><span class="sxs-lookup"><span data-stu-id="2a172-153">This method does not specify a duration for the break.</span></span> <span data-ttu-id="2a172-154"><xref:System.Speech.Synthesis.SpeechSynthesizer>言語的コンテキストに基づいて期間の値を決定します。</span><span class="sxs-lookup"><span data-stu-id="2a172-154">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will determine a duration value based on the linguistic context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-155">次の例では、改行で区切られた 2 つの文を格納しているプロンプトをビルドし、コンピューターの既定のオーディオ デバイスにプロンプト講演を行っています。</span><span class="sxs-lookup"><span data-stu-id="2a172-155">The following example builds a prompt containing two sentences separated by a break and speaks the prompt to the default audio device on the computer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45.");  
        builder.AppendBreak();  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:30, and 9:15.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (System.Speech.Synthesis.PromptBreak strength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.Speech.Synthesis.PromptBreak strength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak (strength As PromptBreak)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak(System::Speech::Synthesis::PromptBreak strength);" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : System.Speech.Synthesis.PromptBreak -&gt; unit" Usage="promptBuilder.AppendBreak strength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strength" Type="System.Speech.Synthesis.PromptBreak" />
      </Parameters>
      <Docs>
        <param name="strength">
          <span data-ttu-id="2a172-156">中断の期間と次の増加する値を示します:</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-156">Indicates the duration of the break, with the following increasing values:</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-157">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに中断を追加し、強度 (継続時間) を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-157">Appends a break to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies its strength (duration).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-158">内の値、<xref:System.Speech.Synthesis.PromptBreak>列挙体は、単語の境界の間の分離間隔 (一時停止) の範囲を表します。</span><span class="sxs-lookup"><span data-stu-id="2a172-158">The values in the <xref:System.Speech.Synthesis.PromptBreak> enumeration represent a range of separation intervals (pauses) between word boundaries.</span></span> <span data-ttu-id="2a172-159">音声合成エンジンは、間隔の正確な時間を決定します。</span><span class="sxs-lookup"><span data-stu-id="2a172-159">The speech synthesis engine determines the exact duration of the interval.</span></span> <span data-ttu-id="2a172-160">中断が要求されると、これらの値のいずれかは、これらの値と対応するミリ秒の区切り値の間のマッピングが含まれている音声合成 (TTS) エンジンに渡されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-160">When a break is requested, one of these values is passed to the text-to-speech (TTS) engine, which contains a mapping between these values and the corresponding millisecond break values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-161">次の例では、改行で区切られた 2 つの文を格納しているプロンプトをビルドし、再生の WAV ファイルに出力を送信します。</span><span class="sxs-lookup"><span data-stu-id="2a172-161">The following example builds a prompt containing two sentences separated by a break and sends the output to a WAV file for playback.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(PromptBreak.Medium);  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (TimeSpan duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.TimeSpan duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak (duration As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak(TimeSpan duration);" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : TimeSpan -&gt; unit" Usage="promptBuilder.AppendBreak duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="duration">
          <span data-ttu-id="2a172-162">ティック単位の時間 (1 ティックは 100 ナノ秒)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-162">The time in ticks, where one tick equals 100 nanoseconds.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-163">指定された継続時間の中断を <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-163">Appends a break of the specified duration to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-164">一時停止または単語の間の韻律的なその他の境界を制御する、区切りを使用できます。</span><span class="sxs-lookup"><span data-stu-id="2a172-164">A break can be used to control pauses or other prosodic boundaries between words.</span></span> <span data-ttu-id="2a172-165">改行は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="2a172-165">A break is optional.</span></span> <span data-ttu-id="2a172-166">中断が存在しない場合、シンセサイザーは言語的コンテキストによって単語の間、中断を決定します。</span><span class="sxs-lookup"><span data-stu-id="2a172-166">If a break is not present, the synthesizer determines the break between words depending on the linguistic context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-167">次の例では、15,000, 000 ティック (1.5 秒) の改行で区切られた 2 つの文を格納しているプロンプトをビルドし、コンピューターの既定のオーディオ デバイスにプロンプト講演を行っています。</span><span class="sxs-lookup"><span data-stu-id="2a172-167">The following example builds a prompt containing two sentences separated by a break of 15,000,000 ticks (1.5 seconds), and speaks the prompt to the default audio device on the computer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(new TimeSpan(15000000));  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendPromptBuilder">
      <MemberSignature Language="C#" Value="public void AppendPromptBuilder (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendPromptBuilder(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendPromptBuilder(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.AppendPromptBuilder : System.Speech.Synthesis.PromptBuilder -&gt; unit" Usage="promptBuilder.AppendPromptBuilder promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">
          <span data-ttu-id="2a172-168">追加するコンテンツ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-168">The content to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-169">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトを別の <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-169">Appends a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object to another <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2a172-170">次の例では、2 つ作成されます<xref:System.Speech.Synthesis.PromptBuilder>インスタンスし、それを 3 番目追加<xref:System.Speech.Synthesis.PromptBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-170">The example that follows creates two <xref:System.Speech.Synthesis.PromptBuilder> instances and then appends them to a third <xref:System.Speech.Synthesis.PromptBuilder>.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\showtimes.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\showtimes.wav");  
  
        // Build child prompts.  
        PromptBuilder theatreA = new PromptBuilder();  
        theatreA.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 9:30");  
        theatreA.AppendBreak(PromptBreak.Large);  
        PromptBuilder theatreB = new PromptBuilder();  
        theatreB.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Build the parent prompt and append the two child prompts.  
        PromptBuilder showTimes = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        showTimes.AppendText(  
          "The following are the show times for tonight's movies:");  
        showTimes.AppendPromptBuilder(theatreA);  
        showTimes.AppendPromptBuilder(theatreB);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(showTimes);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendSsml">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a172-171">SSML ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-171">Appends an SSML file to a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : string -&gt; unit" Usage="promptBuilder.AppendSsml path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="2a172-172">追加する SSML ファイルへの完全修飾パス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-172">A fully qualified path to the SSML file to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-173">指定したパスの SSML ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-173">Appends the SSML file at the specified path to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-174">SSML ファイルに準拠した XML フォーマット ファイルである必要があります、[マークアップ言語 SSML (Speech Synthesis) バージョン 1.0](http://go.microsoft.com/fwlink/?LinkId=201763)仕様。</span><span class="sxs-lookup"><span data-stu-id="2a172-174">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specification.</span></span>  
  
 <span data-ttu-id="2a172-175">使用して文字列としての SSML マークアップを追加することもできます。<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-175">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-176">次の例を作成、<xref:System.Speech.Synthesis.PromptBuilder>オブジェクトし、使用する SSML ファイルの内容を追加、<xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-176">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml("c:\\test\\Weather.ssml");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 <span data-ttu-id="2a172-177">以下は、前の例を参照する SSML ファイルです。</span><span class="sxs-lookup"><span data-stu-id="2a172-177">The following is the SSML file that the preceding example references.</span></span>  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (Uri ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Uri ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (ssmlFile As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(Uri ^ ssmlFile);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : Uri -&gt; unit" Usage="promptBuilder.AppendSsml ssmlFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="ssmlFile">
          <span data-ttu-id="2a172-178">追加する SSML ファイルの完全修飾 URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-178">A fully qualified URI to the SSML file to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-179">指定した URI の SSML ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-179">Appends the SSML file at the specified URI to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-180">SSML ファイルに準拠した XML フォーマット ファイルである必要があります、[マークアップ言語 SSML (Speech Synthesis) バージョン 1.0](https://www.w3.org/TR/speech-synthesis/)仕様。</span><span class="sxs-lookup"><span data-stu-id="2a172-180">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://www.w3.org/TR/speech-synthesis/) specification.</span></span>  
  
 <span data-ttu-id="2a172-181">使用して文字列としての SSML マークアップを追加することもできます。<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-181">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-182">次の例を作成、<xref:System.Speech.Synthesis.PromptBuilder>オブジェクトし、使用する SSML ファイルの内容を追加、<xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-182">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml(new Uri("c:\\test\\Weather.ssml"));  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 <span data-ttu-id="2a172-183">以下は、前の例を参照する SSML ファイルです。</span><span class="sxs-lookup"><span data-stu-id="2a172-183">The following is the SSML file that the preceding example references.</span></span>  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (System.Xml.XmlReader ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Xml.XmlReader ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (ssmlFile As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(System::Xml::XmlReader ^ ssmlFile);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : System.Xml.XmlReader -&gt; unit" Usage="promptBuilder.AppendSsml ssmlFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="ssmlFile">
          <span data-ttu-id="2a172-184">追加する XML ファイルの完全修飾名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-184">A fully qualified name to the XML file to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-185">SSML プロンプトを参照する <c>XMLReader</c> オブジェクトを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-185">Appends an <c>XMLReader</c> object that references an SSML prompt to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-186">SSML ファイルに準拠した XML フォーマット ファイルである必要があります、[マークアップ言語 SSML (Speech Synthesis) バージョン 1.0](https://www.w3.org/TR/speech-synthesis/)仕様。</span><span class="sxs-lookup"><span data-stu-id="2a172-186">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://www.w3.org/TR/speech-synthesis/) specification.</span></span>  
  
 <span data-ttu-id="2a172-187">使用して文字列としての SSML マークアップを追加することもできます。<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-187">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-188">次の例では、作成、<xref:System.Speech.Synthesis.PromptBuilder>オブジェクトから、<xref:System.Xml.XmlReader>マークアップ言語 SSML (Speech Synthesis) マークアップを含むファイルを参照するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2a172-188">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from an <xref:System.Xml.XmlReader> object that references a file containing Speech Synthesis Markup Language (SSML) markup.</span></span>  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Create the path to the SSML file.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.xml");  
        PromptBuilder builder = null;  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder = new PromptBuilder();  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsmlMarkup">
      <MemberSignature Language="C#" Value="public void AppendSsmlMarkup (string ssmlMarkup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsmlMarkup(string ssmlMarkup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsmlMarkup (ssmlMarkup As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsmlMarkup(System::String ^ ssmlMarkup);" />
      <MemberSignature Language="F#" Value="member this.AppendSsmlMarkup : string -&gt; unit" Usage="promptBuilder.AppendSsmlMarkup ssmlMarkup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlMarkup" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ssmlMarkup">
          <span data-ttu-id="2a172-189">SSML マークアップを格納している文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-189">A string containing SSML markup.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-190">SSML マークアップを含む指定された文字列を <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-190">Appends the specified string containing SSML markup to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-191">SSML マークアップを追加するときに、適切なエスケープ文字を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-191">You must use the appropriate escape characters when appending SSML markup.</span></span> <span data-ttu-id="2a172-192">前の値を囲む引用符は旧バージョンとスラッシュに注意してください、`interpret-as`属性は、次の例。</span><span class="sxs-lookup"><span data-stu-id="2a172-192">Notice the backward-slashes preceding the quotation marks enclosing the value of the `interpret-as` attribute in the following example:</span></span>  
  
```csharp  
builder.AppendSsmlMarkup("<say-as interpret-as = \"characters\"> chair </say-as>");  
```  
  
> [!NOTE]
>  <span data-ttu-id="2a172-193">引数として使用される文字列<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>含めることはできません、`speak`要素。</span><span class="sxs-lookup"><span data-stu-id="2a172-193">The string used as an argument to <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> cannot include a `speak` element.</span></span>  
  
 <span data-ttu-id="2a172-194">使用する場合<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>でインライン発音を指定する、`phoneme`要素、携帯電話から現在の音声認識エンジンがそれをサポートしている指定された、次の音声記号アルファベットのいずれかを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="2a172-194">When using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> to specify inline pronunciations in a `phoneme` element, you can use phones from any of the following phonetic alphabets, provided that the current speech engine supports it:</span></span>  
  
-   <span data-ttu-id="2a172-195">国際発音記号 (IPA)</span><span class="sxs-lookup"><span data-stu-id="2a172-195">International Phonetic Alphabet (IPA)</span></span>  
  
-   <span data-ttu-id="2a172-196">Universal Phone セット (UPS)</span><span class="sxs-lookup"><span data-stu-id="2a172-196">Universal Phone Set (UPS)</span></span>  
  
-   <span data-ttu-id="2a172-197">SAPI 電話の設定</span><span class="sxs-lookup"><span data-stu-id="2a172-197">SAPI Phone Set</span></span>  
  
 <span data-ttu-id="2a172-198">SSML 準拠、音声認識エンジンは、IPA からスマート フォンを読み上げます。</span><span class="sxs-lookup"><span data-stu-id="2a172-198">Any SSML-compliant speech engine will speak phones from the IPA.</span></span>  
  
 <span data-ttu-id="2a172-199">いずれかの SSML マークアップを含むファイルを追加することも、<xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-199">You can also append a file containing SSML markup using one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods.</span></span> <span data-ttu-id="2a172-200">マークアップ言語でフォーマットされていない読み上げるテキストを追加するには、いずれかを使用、 <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>、 <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>、 <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>、または<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-200">To append text to be spoken that is not formatted with markup language, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendText">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a172-201">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-201">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string -&gt; unit" Usage="promptBuilder.AppendText textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="2a172-202">読み上げるテキストを含む文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-202">A string containing the text to be spoken.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-203">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加されるテキストを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-203">Specifies text to append to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-204">SSML マークアップ言語としてフォーマットされているテキストを追加するには使用<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-204">To append text that is formatted as SSML markup language, use <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-205">次の例を作成、<xref:System.Speech.Synthesis.PromptBuilder>オブジェクトし、を使用してテキスト文字列を追加、<xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-205">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends a text string using the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder speakText = new PromptBuilder();  
        speakText.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt.  
        synth.Speak(speakText);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptEmphasis emphasis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptEmphasis emphasis) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, emphasis As PromptEmphasis)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptEmphasis emphasis);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptEmphasis -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, emphasis)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="emphasis" Type="System.Speech.Synthesis.PromptEmphasis" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="2a172-206">読み上げるテキストを含む文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-206">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="emphasis">
          <span data-ttu-id="2a172-207">テキストに適用する強調またはストレスの値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-207">The value for the emphasis or stress to apply to the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-208">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストの強調の度合いを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-208">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the degree of emphasis for the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-209">Windows の音声合成エンジンは、この時点で、強調のパラメーターをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="2a172-209">The speech synthesis engines in Windows do not support the emphasis parameter at this time.</span></span> <span data-ttu-id="2a172-210">強調のパラメーターの値を設定する生成されない合成された音声出力の音の変更。</span><span class="sxs-lookup"><span data-stu-id="2a172-210">Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptRate rate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptRate rate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, rate As PromptRate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptRate rate);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptRate -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, rate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="rate" Type="System.Speech.Synthesis.PromptRate" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="2a172-211">読み上げるテキストを含む文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-211">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="rate">
          <span data-ttu-id="2a172-212">テキストに適用する話し速度の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-212">The value for the speaking rate to apply to the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-213">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストの読み上げ速度を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-213">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the speaking rate for the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2a172-214">次の例では、作成、<xref:System.Speech.Synthesis.PromptBuilder>オブジェクトをテキスト文字列を追加します。</span><span class="sxs-lookup"><span data-stu-id="2a172-214">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings.</span></span> <span data-ttu-id="2a172-215">この例では、<xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>の注文の内容を列挙する追加される文字列のレートを低速の読み上げを指定します。</span><span class="sxs-lookup"><span data-stu-id="2a172-215">The example uses the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder speakRate = new PromptBuilder();  
        speakRate.AppendText("Your order for");  
        speakRate.AppendText("one kitchen sink and one faucet", PromptRate.Slow);  
        speakRate.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(speakRate);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptVolume volume);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptVolume volume) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, volume As PromptVolume)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptVolume volume);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptVolume -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, volume)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="volume" Type="System.Speech.Synthesis.PromptVolume" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="2a172-216">読み上げるテキストを含む文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-216">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="volume">
          <span data-ttu-id="2a172-217">テキストに適用する音量 (大きさ) の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-217">The value for the speaking volume (loudness) to apply to the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-218">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストの音量を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-218">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the volume to speak the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-219"><xref:System.Speech.Synthesis.PromptVolume.Default>設定<xref:System.Speech.Synthesis.PromptVolume>が同じでは、フル ボリュームとして<xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-219">The <xref:System.Speech.Synthesis.PromptVolume.Default> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span></span> <span data-ttu-id="2a172-220">その他の設定では、ボリューム全体の基準とした音声出力の音量を下げます。</span><span class="sxs-lookup"><span data-stu-id="2a172-220">The other settings decrease the volume of speech output relative to full volume.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-221">次の例では、<xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>ボリュームの設定を指定するメソッドを<xref:System.Speech.Synthesis.SpeechSynthesizer>音声出力に適用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-221">The following example uses the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method to specify volume settings that the <xref:System.Speech.Synthesis.SpeechSynthesizer> should apply to speech output.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt that applies different volume settings.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is the default speaking volume.", PromptVolume.Default);  
        builder.AppendBreak();  
        builder.AppendText("This is the extra loud speaking volume.", PromptVolume.ExtraLoud);  
        builder.AppendBreak();  
        builder.AppendText("This is the medium speaking volume.", PromptVolume.Medium);  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithAlias">
      <MemberSignature Language="C#" Value="public void AppendTextWithAlias (string textToSpeak, string substitute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithAlias(string textToSpeak, string substitute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithAlias (textToSpeak As String, substitute As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithAlias(System::String ^ textToSpeak, System::String ^ substitute);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithAlias : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithAlias (textToSpeak, substitute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="substitute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="2a172-222">テキスト表現を含む文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-222">A string containing the text representation.</span>
          </span>
        </param>
        <param name="substitute">
          <span data-ttu-id="2a172-223">読み上げるテキストを含む文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-223">A string containing the text to be spoken.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-224">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、追加したテキストの代わりに読み上げられるエイリアスのテキストを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-224">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the alias text to be spoken in place of the appended text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-225">これにより、ドキュメントを音声と記述の形式のプロンプトを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="2a172-225">This allows a document to contain both a spoken and a written form for a prompt.</span></span> <span data-ttu-id="2a172-226">たとえば、記述形式で、SAPI の頭字語可能性があり、音声形式には頭字語は、この case 音声アプリケーション プログラミング インターフェイスでの展開されたテキストが可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-226">For example, the written form could be an acronym, such as SAPI, and the spoken form could be the expanded text for the acronym, in this case Speech Application Programming Interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-227">次の例に、テキスト文字列 ("音声合成のマークアップ言語) とそのエイリアス ("SSML") を追加、<xref:System.Speech.Synthesis.PromptBuilder>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2a172-227">The following example appends a text string ("Speech Synthesis Markup Language") and its alias ("SSML") to a <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span> <span data-ttu-id="2a172-228">シンセサイザーには、"S S M L"と発音します。</span><span class="sxs-lookup"><span data-stu-id="2a172-228">The synthesizer will pronounce "S S M L".</span></span>  
  
```  
PromptBuilder alias = new PromptBuilder();  
alias.AppendTextWithAlias("Speech Synthesis Markup Language","SSML");   
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendTextWithHint">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a172-229">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストのコンテンツ タイプを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-229">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the content type of the text.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, System.Speech.Synthesis.SayAs sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, valuetype System.Speech.Synthesis.SayAs sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithHint(System::String ^ textToSpeak, System::Speech::Synthesis::SayAs sayAs);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithHint : string * System.Speech.Synthesis.SayAs -&gt; unit" Usage="promptBuilder.AppendTextWithHint (textToSpeak, sayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.Speech.Synthesis.SayAs" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="2a172-230">読み上げるテキストを含む文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-230">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="sayAs">
          <span data-ttu-id="2a172-231">テキストのコンテンツ タイプ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-231">The content type of the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-232">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、<see cref="T:System.Speech.Synthesis.SayAs" /> 列挙型のメンバーを使用してコンテンツ タイプを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-232">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the content type using a member of the <see cref="T:System.Speech.Synthesis.SayAs" /> enumeration.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-233">指定されたコンテンツの種類`sayAs`ガイダンスの内容を発音方法の詳細について、音声合成エンジンを提供できます`textToSpeak`します。</span><span class="sxs-lookup"><span data-stu-id="2a172-233">The content type specified by `sayAs` can provide guidance to the speech synthesis engine about how to pronounce the contents of `textToSpeak`.</span></span>  
  
   
  
## Examples  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and define the data types for some of the added strings.  
        PromptBuilder sayAs = new PromptBuilder();  
        sayAs.AppendText("Your");  
        sayAs.AppendTextWithHint("1st", SayAs.NumberOrdinal);  
        sayAs.AppendText("request was for");  
        sayAs.AppendTextWithHint("1", SayAs.NumberCardinal);  
        sayAs.AppendText("room, on");  
        sayAs.AppendTextWithHint("10/19/2012,", SayAs.MonthDayYear);  
        sayAs.AppendText("with early arrival at");  
        sayAs.AppendTextWithHint("12:35pm", SayAs.Time12);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(sayAs);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, string sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, string sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithHint (textToSpeak As String, sayAs As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithHint(System::String ^ textToSpeak, System::String ^ sayAs);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithHint : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithHint (textToSpeak, sayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="2a172-234">読み上げるテキストを含む文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-234">A string containing the text to be spoken.</span>
          </span>
        </param>
        <param name="sayAs">
          <span data-ttu-id="2a172-235">テキストのコンテンツ タイプ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-235">The content type of the text.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-236">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストのコンテンツ タイプを指定する <see cref="T:System.String" /> を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-236">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and a <see cref="T:System.String" /> that specifies the content type of the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-237">このメソッドを使用するには記載されていないコンテンツの種類を指定する、<xref:System.Speech.Synthesis.SayAs>列挙体。</span><span class="sxs-lookup"><span data-stu-id="2a172-237">You can use this method to specify a content type that is not included in the <xref:System.Speech.Synthesis.SayAs> enumeration.</span></span> <span data-ttu-id="2a172-238">ただし、TTS エンジンには、指定したパラメーターをサポートする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-238">However, the TTS engine must support the parameter that you specify.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithPronunciation">
      <MemberSignature Language="C#" Value="public void AppendTextWithPronunciation (string textToSpeak, string pronunciation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithPronunciation(string textToSpeak, string pronunciation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithPronunciation (textToSpeak As String, pronunciation As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithPronunciation(System::String ^ textToSpeak, System::String ^ pronunciation);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithPronunciation : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithPronunciation (textToSpeak, pronunciation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="pronunciation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">
          <span data-ttu-id="2a172-239">言語の従来のアルファベットを使用した単語の記述形式を含む文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-239">A string containing the written form of the word using the conventional alphabet for a language.</span>
          </span>
        </param>
        <param name="pronunciation">
          <span data-ttu-id="2a172-240">国際音声記号 (IPA) の音素を含む文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-240">A string containing phones to be spoken from the International Phonetic Alphabet (IPA).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-241">テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストの発音を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-241">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the pronunciation for the text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-242">シンセサイザーの講演の内容、`pronunciation`パラメーターでのコンテンツではなく、`textToSpeak`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="2a172-242">The synthesizer speaks the contents of the `pronunciation` parameter, not the contents of the `textToSpeak` parameter.</span></span>  
  
 <span data-ttu-id="2a172-243">発音でインラインで指定のプロンプトは、個々 の単語出現にのみ適用され、音声認識エンジンまたはその現在アクティブな辞書のいずれかの発音をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2a172-243">Pronunciations specified inline in prompts apply only to the individual occurrence of a word and override pronunciations of the speech engine or any of its currently active lexicons.</span></span> <span data-ttu-id="2a172-244">通常、既存の単語の発音をカスタムまたは音声合成エンジンが発音だけでなくが必要ですが、適切な名前などの特殊な単語の発音インライン発音を使用します。</span><span class="sxs-lookup"><span data-stu-id="2a172-244">Typically, you will use inline pronunciations for custom pronunciations of existing words or for pronunciation of uncommon words, such as proper names, which the speech synthesis engine may not pronounce as well as expected.</span></span>  
  
 <span data-ttu-id="2a172-245">スマート フォンから、国際音声記号 (IPA) を使用して、インライン発音を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-245">Inline pronunciations must be specified using phones from the International Phonetic Alphabet (IPA).</span></span> <span data-ttu-id="2a172-246">スマート フォンは、文字または音声の個別のサウンドを表す文字です。</span><span class="sxs-lookup"><span data-stu-id="2a172-246">A phone is a letter or character that represents a discreet sound of speech.</span></span> <span data-ttu-id="2a172-247">音声認識エンジンに準拠している、[マークアップ言語 SSML (Speech Synthesis) バージョン 1.0](http://go.microsoft.com/fwlink/?LinkId=201763)仕様は、IPA からスマート フォンを発音します。</span><span class="sxs-lookup"><span data-stu-id="2a172-247">Speech engines that comply with the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specification will pronounce phones from the IPA.</span></span> <span data-ttu-id="2a172-248">その他の発音を使用してインライン発音を指定するを参照してください。<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-248">To specify inline pronunciations using other phonetic alphabets, see <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
 <span data-ttu-id="2a172-249">IPA の発行、[グラフ](http://go.microsoft.com/fwlink/?LinkId=58362)その電話を一覧表示し、Unicode 番号にマップします。</span><span class="sxs-lookup"><span data-stu-id="2a172-249">The IPA publishes a [chart](http://go.microsoft.com/fwlink/?LinkId=58362) that lists its phones and maps them to Unicode numbers.</span></span>  
  
 <span data-ttu-id="2a172-250">IPA アルファベットでは、一部の電話では、ラテン語アルファベット文字と同じ表現があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-250">Some phones in the IPA alphabet have the same representations as letters in the Latin alphabet.</span></span> <span data-ttu-id="2a172-251">ような場合、ラテン語の文字を入力し、スマート フォンの適切な表現を作成することができます。</span><span class="sxs-lookup"><span data-stu-id="2a172-251">In those cases, it is possible to type the Latin character and have the proper representation for a phone.</span></span> <span data-ttu-id="2a172-252">テキストでよく使用されるラテン文字には、IPA の電話設定のいくつかのスマート フォンを表す場合があります、ため、ラテン語の文字を入力するだけされない可能性があります正確な IPA 電話が必要です。</span><span class="sxs-lookup"><span data-stu-id="2a172-252">Because the Latin characters as commonly used in text may represent several phones of the IPA phone set, simply typing the Latin character might not result in the precise IPA phone desired.</span></span> <span data-ttu-id="2a172-253">としてコードで表される IPA アルファベット必要がある他のスマート フォンのアンパサンド (&)、シャープ記号で構成される参照の文字 (#)、セミコロン (;) で後にすべての 16 進数または 10 進数、必要な電話番号の Unicode 番号です。</span><span class="sxs-lookup"><span data-stu-id="2a172-253">Other phones of the IPA alphabet need to be represented in code as character references consisting of an ampersand (&), the number sign (#), and a Unicode number for the desired phone in hexadecimal or decimal, all followed by a semicolon (;).</span></span> <span data-ttu-id="2a172-254">Schwa など ((& a)\#x0259;) で表されます`&#x0259;`します。</span><span class="sxs-lookup"><span data-stu-id="2a172-254">For example, a schwa (&\#x0259;) would be represented by `&#x0259;`.</span></span>  
  
 <span data-ttu-id="2a172-255">複数の単語の発音を新規またはカスタムを追加、たとえば express の地域の言語に、または適切な名前または、教育機関や医療分野に固有のボキャブラリを追加するには、ビルド、辞書に追加、<xref:System.Speech.Synthesis.SpeechSynthesizer>を使用して<xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-255">To add new or custom pronunciations for multiple words, for example to express regional dialects or to add proper names or vocabulary that is specific to an educational or medical discipline, build a lexicon and add it to the <xref:System.Speech.Synthesis.SpeechSynthesizer> using <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-256">次の例は、の新しいインスタンスを初期化、<xref:System.Speech.Synthesis.PromptBuilder>クラス。</span><span class="sxs-lookup"><span data-stu-id="2a172-256">The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class.</span></span> <span data-ttu-id="2a172-257">そして、追加テキスト文字列"My name is"インスタンスにします。</span><span class="sxs-lookup"><span data-stu-id="2a172-257">It then appends the text string "My name is" to the instance.</span></span> <span data-ttu-id="2a172-258">最後に、適切な名前"DuBois"を含む文字列を追加し、名の読み方を指定します。</span><span class="sxs-lookup"><span data-stu-id="2a172-258">Finally, it appends a string containing the proper name "DuBois" and specifies the pronunciation of the name.</span></span>  
  
```csharp  
public void ProperName()  
{  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("My name is");  
  
    // Add a proper name and its pronunciation.  
    builder.AppendTextWithPronunciation("DuBois", "duˈbwɑ");     
}  
```  
  
 <span data-ttu-id="2a172-259">次のマークアップは、SSML を示しています。 この<xref:System.Speech.Synthesis.PromptBuilder>オブジェクトが生成されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-259">The following markup shows the SSML that this <xref:System.Speech.Synthesis.PromptBuilder> object generates.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-us">  
  My name is <phoneme ph="duˈbwɑ"> DuBois </phoneme>  
</speak>  
```  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkId=58363">
          <span data-ttu-id="2a172-260">国際音声記号アソシエーション</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-260">International Phonetic Association</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ClearContent">
      <MemberSignature Language="C#" Value="public void ClearContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ClearContent" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearContent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearContent();" />
      <MemberSignature Language="F#" Value="member this.ClearContent : unit -&gt; unit" Usage="promptBuilder.ClearContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2a172-261">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトから内容を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-261">Clears the content from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2a172-262">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトのカルチャ情報を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-262">Gets or sets the culture information for the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-263"><xref:System.Speech.Synthesis.SpeechSynthesizer>で指定された言語をサポートするインストール済みの音声を選択しようとして、オブジェクト、<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>プロンプトを処理するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="2a172-263">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property to process the prompt.</span></span> <span data-ttu-id="2a172-264">音声を指定したカルチャが見つかった場合は、それが使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-264">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="2a172-265">音声を指定したカルチャが見つからない場合は、既定の音声が使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-265">If a voice with the specified culture cannot be found, the default voice will be used.</span></span>  
  
 <span data-ttu-id="2a172-266">使用してコンテンツのセクションでは個別の入力を求める内でカルチャを指定することも、 <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>、 <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>、および<xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-266">A culture may also be specified within the prompt for discreet sections of content using the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, and <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> methods.</span></span> <span data-ttu-id="2a172-267">上記のメソッドのいずれかを使用してコンテンツの一部の上書きに指定されたカルチャ、<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>中に実際には、プロパティ、<xref:System.Speech.Synthesis.SpeechSynthesizer>で指定された言語をサポートするインストール済みの音声を選択しようとしてが、 `culture`メソッドのパラメーター。</span><span class="sxs-lookup"><span data-stu-id="2a172-267">A culture specified for a portion of content using one of the above methods will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property while in effect, and the <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter of the method.</span></span>  
  
 <span data-ttu-id="2a172-268">指定された言語の単語を正しく発音、<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>プロパティを言語をサポートする音声合成の音声合成 (TTS) エンジンをインストールする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-268">To correctly pronounce words in the language specified by the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="2a172-269">インストールされている、TTS エンジンには、音声が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-269">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="2a172-270">特定のカルチャの音声のインストールに関する情報を取得する、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-270">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="2a172-271">Microsoft Windows と System.Speech API は、の値として有効なすべての言語、国コードを受け入れる`culture`します。</span><span class="sxs-lookup"><span data-stu-id="2a172-271">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="2a172-272">Windows 7 に同梱されている音声合成エンジンは、次の言語、国コードをサポートします。</span><span class="sxs-lookup"><span data-stu-id="2a172-272">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="2a172-273">en-us (英語)。</span><span class="sxs-lookup"><span data-stu-id="2a172-273">en-US.</span></span> <span data-ttu-id="2a172-274">英語 (米国)</span><span class="sxs-lookup"><span data-stu-id="2a172-274">English (United States)</span></span>  
  
-   <span data-ttu-id="2a172-275">ZH-CN します。</span><span class="sxs-lookup"><span data-stu-id="2a172-275">zh-CN.</span></span> <span data-ttu-id="2a172-276">中国語 (中国)</span><span class="sxs-lookup"><span data-stu-id="2a172-276">Chinese (China)</span></span>  
  
-   <span data-ttu-id="2a172-277">zh-tw があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-277">zh-TW.</span></span> <span data-ttu-id="2a172-278">中国語 (台湾)</span><span class="sxs-lookup"><span data-stu-id="2a172-278">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="2a172-279">"En"などの 2 文字の言語コードも許可します。</span><span class="sxs-lookup"><span data-stu-id="2a172-279">Two-letter language codes such as "en" are also permitted.</span></span>  <span data-ttu-id="2a172-280">参照してください[言語識別子の定数と文字列](http://msdn.microsoft.com/library/dd318693\(VS.85\).aspx)言語コードの包括的な一覧についてはします。</span><span class="sxs-lookup"><span data-stu-id="2a172-280">See [Language Identifier Constants and Strings](http://msdn.microsoft.com/library/dd318693\(VS.85\).aspx) for a comprehensive list of language codes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndParagraph">
      <MemberSignature Language="C#" Value="public void EndParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndParagraph ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndParagraph();" />
      <MemberSignature Language="F#" Value="member this.EndParagraph : unit -&gt; unit" Usage="promptBuilder.EndParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2a172-281">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの段落の終わりを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-281">Specifies the end of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-282">長い画面の指示場合に表示できる人間の音声認識などの文章や段落に分割されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-282">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span> <span data-ttu-id="2a172-283">例については、「<xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a172-283">See <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSentence">
      <MemberSignature Language="C#" Value="public void EndSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndSentence" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSentence ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSentence();" />
      <MemberSignature Language="F#" Value="member this.EndSentence : unit -&gt; unit" Usage="promptBuilder.EndSentence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2a172-284">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの文の終わりを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-284">Specifies the end of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-285">長い画面の指示場合に表示できる人間の音声認識などの文章や段落に分割されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-285">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span> <span data-ttu-id="2a172-286">例については、「<xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a172-286">See <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndStyle">
      <MemberSignature Language="C#" Value="public void EndStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndStyle();" />
      <MemberSignature Language="F#" Value="member this.EndStyle : unit -&gt; unit" Usage="promptBuilder.EndStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2a172-287">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトのスタイルの終わりを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-287">Specifies the end of a style in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-288"><xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A>メソッドは、現在の話し方のスタイルを停止します。</span><span class="sxs-lookup"><span data-stu-id="2a172-288">The <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method stops the current speaking style.</span></span> <span data-ttu-id="2a172-289">話し方のスタイルが有効にする前にあった設定に戻されます、<xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>メソッドは、新しい話しを開始します。</span><span class="sxs-lookup"><span data-stu-id="2a172-289">The speaking style reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method initiated a new speaking style.</span></span> <span data-ttu-id="2a172-290">例については、「<xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a172-290">See <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndVoice">
      <MemberSignature Language="C#" Value="public void EndVoice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndVoice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndVoice" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndVoice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndVoice();" />
      <MemberSignature Language="F#" Value="member this.EndVoice : unit -&gt; unit" Usage="promptBuilder.EndVoice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2a172-291">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声使用の終わりを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-291">Specifies the end of use of a voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-292"><xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>メソッドは、現在の音声の音声出力の使用を停止します。</span><span class="sxs-lookup"><span data-stu-id="2a172-292">The <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> method stops the use of the current voice for speech output.</span></span> <span data-ttu-id="2a172-293">ボイスが有効にする前にあった設定に戻されます、<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>メソッドは、新しい音声を開始します。</span><span class="sxs-lookup"><span data-stu-id="2a172-293">The voice reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> method initiated a new voice.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2a172-294">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> が空かどうかを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-294">Gets whether the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> is empty.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartParagraph">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a172-295">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの段落の開始を指定し、オプションで言語を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-295">Specifies the start of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object, and optionally specifies a language.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-296">長い画面の指示場合に表示できる人間の音声認識などの文章や段落に分割されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-296">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartParagraph ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartParagraph();" />
      <MemberSignature Language="F#" Value="member this.StartParagraph : unit -&gt; unit" Usage="promptBuilder.StartParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2a172-297">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの段落の開始を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-297">Specifies the start of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-298">長い画面の指示場合に表示できる人間の音声認識などの文章や段落に分割されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-298">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-299">次の例では、作成、<xref:System.Speech.Synthesis.PromptBuilder>オブジェクト、コンテンツを追加してから段落や文にコンテンツを整理します。</span><span class="sxs-lookup"><span data-stu-id="2a172-299">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartParagraph (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartParagraph(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartParagraph : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartParagraph culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="2a172-300">特定のカルチャに関する情報を提供します。たとえば、カルチャの言語、カルチャの名前、書記体系、使用するカレンダー、日付形式や文字列の並べ替え方法などです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-300">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-301">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの指定されたカルチャの段落の開始を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-301">Specifies the start of a paragraph in the specified culture in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-302">長い画面の指示場合に表示できる人間の音声認識などの文章や段落に分割されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-302">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 <span data-ttu-id="2a172-303">`culture`段落のパラメーターとは異なる、<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>のプロパティ、<xref:System.Speech.Synthesis.PromptBuilder>それを含んでいるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2a172-303">The `culture` parameter for a paragraph can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.</span></span> <span data-ttu-id="2a172-304">値を実際には、while、`culture`パラメーターが上書きされます、<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2a172-304">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="2a172-305"><xref:System.Speech.Synthesis.SpeechSynthesizer>で指定された言語をサポートするインストール済みの音声を選択しようとしてが、`culture`段落を読み上げるパラメーター。</span><span class="sxs-lookup"><span data-stu-id="2a172-305">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the paragraph.</span></span> <span data-ttu-id="2a172-306">音声を指定したカルチャが見つかった場合は、それが使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-306">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="2a172-307">音声を指定したカルチャが見つからない場合は、既定の音声が使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-307">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="2a172-308">指定された音声の使用を停止する<xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>、呼び出す<xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-308">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.</span></span>  
  
 <span data-ttu-id="2a172-309">指定された言語の単語を正しく発音、`culture`パラメーターを言語をサポートする音声合成の音声合成 (TTS) エンジンをインストールする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-309">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="2a172-310">インストールされている、TTS エンジンには、音声が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-310">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="2a172-311">特定のカルチャの音声のインストールに関する情報を取得する、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-311">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="2a172-312">Microsoft Windows と System.Speech API は、の値として有効なすべての言語、国コードを受け入れる`culture`します。</span><span class="sxs-lookup"><span data-stu-id="2a172-312">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="2a172-313">Windows 7 に同梱されている音声合成エンジンは、次の言語、国コードをサポートします。</span><span class="sxs-lookup"><span data-stu-id="2a172-313">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="2a172-314">en-us (英語)。</span><span class="sxs-lookup"><span data-stu-id="2a172-314">en-US.</span></span> <span data-ttu-id="2a172-315">英語 (米国)</span><span class="sxs-lookup"><span data-stu-id="2a172-315">English (United States)</span></span>  
  
-   <span data-ttu-id="2a172-316">ZH-CN します。</span><span class="sxs-lookup"><span data-stu-id="2a172-316">zh-CN.</span></span> <span data-ttu-id="2a172-317">中国語 (中国)</span><span class="sxs-lookup"><span data-stu-id="2a172-317">Chinese (China)</span></span>  
  
-   <span data-ttu-id="2a172-318">zh-tw があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-318">zh-TW.</span></span> <span data-ttu-id="2a172-319">中国語 (台湾)</span><span class="sxs-lookup"><span data-stu-id="2a172-319">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="2a172-320">"En"などの 2 文字の言語コードも許可します。</span><span class="sxs-lookup"><span data-stu-id="2a172-320">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartSentence">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a172-321">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの文の開始を指定し、オプションで言語を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-321">Specifies the start of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object, and optionally specifies a language.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-322">長い画面の指示場合に表示できる人間の音声認識などの文章や段落に分割されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-322">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartSentence ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartSentence();" />
      <MemberSignature Language="F#" Value="member this.StartSentence : unit -&gt; unit" Usage="promptBuilder.StartSentence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2a172-323">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの文の開始を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-323">Specifies the start of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-324">長い画面の指示場合に表示できる人間の音声認識などの文章や段落に分割されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-324">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-325">次の例では、作成、<xref:System.Speech.Synthesis.PromptBuilder>オブジェクト、コンテンツを追加してから段落や文にコンテンツを整理します。</span><span class="sxs-lookup"><span data-stu-id="2a172-325">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartSentence (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartSentence(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartSentence : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartSentence culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="2a172-326">特定のカルチャに関する情報を提供します。たとえば、カルチャの言語、カルチャの名前、書記体系、使用するカレンダー、日付形式や文字列の並べ替え方法などです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-326">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-327">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの指定されたカルチャの文の開始を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-327">Specifies the start of a sentence in the specified culture in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-328">長い画面の指示場合に表示できる人間の音声認識などの文章や段落に分割されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-328">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 <span data-ttu-id="2a172-329">`culture`文のパラメーターが異なっていてもかまいません、 `culture` 、文が含まれる段落のパラメーターまたは<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>のプロパティ、<xref:System.Speech.Synthesis.PromptBuilder>それらを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2a172-329">The `culture` parameter for a sentence can be different than the `culture` parameter for the paragraph that contains the sentence or the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains them.</span></span>  
  
 <span data-ttu-id="2a172-330">値を実際には、while、`culture`パラメーターが上書きされます、<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>プロパティおよび`culture`文が含まれる段落のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="2a172-330">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property and the `culture` parameter for the paragraph that contains the sentence.</span></span> <span data-ttu-id="2a172-331"><xref:System.Speech.Synthesis.SpeechSynthesizer>で指定された言語をサポートするインストール済みの音声を選択しようとしてが、`culture`パラメーターを文を読み上げます。</span><span class="sxs-lookup"><span data-stu-id="2a172-331">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the sentence.</span></span> <span data-ttu-id="2a172-332">音声を指定したカルチャが見つかった場合は、それが使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-332">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="2a172-333">音声を指定したカルチャが見つからない場合は、既定の音声が使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-333">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="2a172-334">指定された音声の使用を停止する<xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>、呼び出す<xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-334">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.</span></span>  
  
 <span data-ttu-id="2a172-335">指定された言語の単語を正しく発音、`culture`パラメーターを言語をサポートする音声合成の音声合成 (TTS) エンジンをインストールする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-335">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="2a172-336">インストールされている、TTS エンジンには、音声が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-336">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="2a172-337">特定のカルチャの音声のインストールに関する情報を取得する、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-337">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="2a172-338">Microsoft Windows と System.Speech API は、の値として有効なすべての言語、国コードを受け入れる`culture`します。</span><span class="sxs-lookup"><span data-stu-id="2a172-338">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="2a172-339">Windows 7 に同梱されている音声合成エンジンは、次の言語、国コードをサポートします。</span><span class="sxs-lookup"><span data-stu-id="2a172-339">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="2a172-340">en-us (英語)。</span><span class="sxs-lookup"><span data-stu-id="2a172-340">en-US.</span></span> <span data-ttu-id="2a172-341">英語 (米国)</span><span class="sxs-lookup"><span data-stu-id="2a172-341">English (United States)</span></span>  
  
-   <span data-ttu-id="2a172-342">ZH-CN します。</span><span class="sxs-lookup"><span data-stu-id="2a172-342">zh-CN.</span></span> <span data-ttu-id="2a172-343">中国語 (中国)</span><span class="sxs-lookup"><span data-stu-id="2a172-343">Chinese (China)</span></span>  
  
-   <span data-ttu-id="2a172-344">zh-tw があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-344">zh-TW.</span></span> <span data-ttu-id="2a172-345">中国語 (台湾)</span><span class="sxs-lookup"><span data-stu-id="2a172-345">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="2a172-346">"En"などの 2 文字の言語コードも許可します。</span><span class="sxs-lookup"><span data-stu-id="2a172-346">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartStyle">
      <MemberSignature Language="C#" Value="public void StartStyle (System.Speech.Synthesis.PromptStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartStyle(class System.Speech.Synthesis.PromptStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartStyle (style As PromptStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartStyle(System::Speech::Synthesis::PromptStyle ^ style);" />
      <MemberSignature Language="F#" Value="member this.StartStyle : System.Speech.Synthesis.PromptStyle -&gt; unit" Usage="promptBuilder.StartStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Speech.Synthesis.PromptStyle" />
      </Parameters>
      <Docs>
        <param name="style">
          <span data-ttu-id="2a172-347">開始するスタイル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-347">The style to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-348">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトのスタイルの開始を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-348">Specifies the start of a style in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-349"><xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>メソッドは、<xref:System.Speech.Synthesis.PromptStyle>オブジェクトを引数として。</span><span class="sxs-lookup"><span data-stu-id="2a172-349">The <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method takes a <xref:System.Speech.Synthesis.PromptStyle> object as its argument.</span></span> <span data-ttu-id="2a172-350">プロパティを使用することができます、<xref:System.Speech.Synthesis.PromptStyle>読み上げ速度、およびボリューム (大きさ) の音声出力のスタイルが有効な状態に適用する強調を設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2a172-350">You can use the properties of the <xref:System.Speech.Synthesis.PromptStyle> object to set the emphasis, speaking rate, and volume (loudness) to apply to speech output while the style is in effect.</span></span> <span data-ttu-id="2a172-351">現在のスタイルを使用してを停止するを呼び出す、<xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-351">To stop using the current style, call the <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method.</span></span>  
  
> [!NOTE]
>  -   <span data-ttu-id="2a172-352">Windows の音声合成エンジンは、この時点で、強調のパラメーターをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="2a172-352">The speech synthesis engines in Windows do not support the emphasis parameter at this time.</span></span> <span data-ttu-id="2a172-353">強調のパラメーターの値を設定する生成されない合成された音声出力の音の変更。</span><span class="sxs-lookup"><span data-stu-id="2a172-353">Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.</span></span>  
> -   <span data-ttu-id="2a172-354"><xref:System.Speech.Synthesis.PromptVolume.Default>設定<xref:System.Speech.Synthesis.PromptVolume>が同じでは、フル ボリュームとして<xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-354">The <xref:System.Speech.Synthesis.PromptVolume.Default> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span></span> <span data-ttu-id="2a172-355">その他の設定では、ボリューム全体の基準とした音声出力の音量を下げます。</span><span class="sxs-lookup"><span data-stu-id="2a172-355">The other settings decrease the volume of speech output relative to full volume.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-356">次の例では、作成、<xref:System.Speech.Synthesis.PromptBuilder>オブジェクトをテキスト文字列を追加します。</span><span class="sxs-lookup"><span data-stu-id="2a172-356">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings.</span></span> <span data-ttu-id="2a172-357">この例では、<xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>の注文の内容を列挙する追加される文字列のレートを低速の読み上げを指定します。</span><span class="sxs-lookup"><span data-stu-id="2a172-357">The example uses the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartVoice">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a172-358">シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するように指示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-358">Instructs the synthesizer to change the voice in a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-359">音声では、インストールされている、TTS エンジンを表します。</span><span class="sxs-lookup"><span data-stu-id="2a172-359">A voice represents an installed TTS engine.</span></span> <span data-ttu-id="2a172-360">使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドと<xref:System.Speech.Synthesis.VoiceInfo>クラス名との属性を取得するには、選択可能な音声合成 (TTS) の音声がインストールされています。</span><span class="sxs-lookup"><span data-stu-id="2a172-360">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="2a172-361">アプリケーションを呼び出すと<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>、最小の特定の条件を満たしていること、レジストリで検出された音声の各メソッドを確認します。</span><span class="sxs-lookup"><span data-stu-id="2a172-361">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="2a172-362">検証に失敗したすべての音声を<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>設定その<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティを`False`します。</span><span class="sxs-lookup"><span data-stu-id="2a172-362">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="2a172-363">アプリケーションは、のいずれかを呼び出すことはできません、<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>ボイスのメソッドが<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティは`False`します。</span><span class="sxs-lookup"><span data-stu-id="2a172-363">An application cannot call any of the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods on a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="2a172-364">通常、アプリケーションで音声のない設定<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2a172-364">Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartVoice culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="2a172-365">特定のカルチャに関する情報を提供します。たとえば、カルチャの言語、カルチャの名前、書記体系、使用するカレンダー、日付形式や文字列の並べ替え方法などです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-365">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-366">シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、使用する音声のカルチャを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-366">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the culture of the voice to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-367">`culture`パラメーター<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>異なっていてもかまいません、<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>のプロパティ、<xref:System.Speech.Synthesis.PromptBuilder>それを含んでいるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2a172-367">The `culture` parameter for <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.</span></span>  <span data-ttu-id="2a172-368">値を実際には、while、`culture`パラメーターが上書きされます、<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2a172-368">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="2a172-369"><xref:System.Speech.Synthesis.SpeechSynthesizer>で指定された言語をサポートするインストール済みの音声を選択しようとしてが、`culture`で囲まれた内容を読み上げるパラメーター<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>と<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-369">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the content enclosed by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span> <span data-ttu-id="2a172-370">音声を指定したカルチャが見つかった場合は、それが使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-370">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="2a172-371">音声を指定したカルチャが見つからない場合は、既定の音声が使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-371">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="2a172-372">指定された音声の使用を停止する<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>、呼び出す<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-372">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 <span data-ttu-id="2a172-373">指定された言語の単語を正しく発音、`culture`パラメーターを言語をサポートする音声合成の音声合成 (TTS) エンジンをインストールする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-373">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="2a172-374">インストールされている、TTS エンジンには、音声が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2a172-374">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="2a172-375">特定のカルチャの音声のインストールに関する情報を取得する、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-375">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="2a172-376">Microsoft Windows と System.Speech API は、の値として有効なすべての言語、国コードを受け入れる`culture`します。</span><span class="sxs-lookup"><span data-stu-id="2a172-376">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="2a172-377">Windows 7 に同梱されている音声合成エンジンは、次の言語、国コードをサポートします。</span><span class="sxs-lookup"><span data-stu-id="2a172-377">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="2a172-378">en-us (英語)。</span><span class="sxs-lookup"><span data-stu-id="2a172-378">en-US.</span></span> <span data-ttu-id="2a172-379">英語 (米国)</span><span class="sxs-lookup"><span data-stu-id="2a172-379">English (United States)</span></span>  
  
-   <span data-ttu-id="2a172-380">ZH-CN します。</span><span class="sxs-lookup"><span data-stu-id="2a172-380">zh-CN.</span></span> <span data-ttu-id="2a172-381">中国語 (中国)</span><span class="sxs-lookup"><span data-stu-id="2a172-381">Chinese (China)</span></span>  
  
-   <span data-ttu-id="2a172-382">zh-tw があります。</span><span class="sxs-lookup"><span data-stu-id="2a172-382">zh-TW.</span></span> <span data-ttu-id="2a172-383">中国語 (台湾)</span><span class="sxs-lookup"><span data-stu-id="2a172-383">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="2a172-384">"En"などの 2 文字の言語コードも許可します。</span><span class="sxs-lookup"><span data-stu-id="2a172-384">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender -&gt; unit" Usage="promptBuilder.StartVoice gender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender">
          <span data-ttu-id="2a172-385">使用する音声の性別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-385">The gender of the voice to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-386">シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、使用する音声の性別を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-386">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the gender of the voice to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-387">使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドと<xref:System.Speech.Synthesis.VoiceInfo>クラス名との属性を取得するには、選択可能な音声合成 (TTS) の音声がインストールされています。</span><span class="sxs-lookup"><span data-stu-id="2a172-387">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="2a172-388">指定された音声の使用を停止する<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>呼び出す<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-388">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceInfo voice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Speech.Synthesis.VoiceInfo voice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (voice As VoiceInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceInfo ^ voice);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceInfo -&gt; unit" Usage="promptBuilder.StartVoice voice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="voice" Type="System.Speech.Synthesis.VoiceInfo" />
      </Parameters>
      <Docs>
        <param name="voice">
          <span data-ttu-id="2a172-389">使用する音声の条件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-389">The criteria for the voice to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-390">シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、新しい音声の条件を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-390">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies criteria for the new voice.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-391">使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドと<xref:System.Speech.Synthesis.VoiceInfo>クラス名との属性を取得するには、選択可能な音声合成 (TTS) の音声がインストールされています。</span><span class="sxs-lookup"><span data-stu-id="2a172-391">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="2a172-392">指定された音声の使用を停止する<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>呼び出す<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-392">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : string -&gt; unit" Usage="promptBuilder.StartVoice name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2a172-393">使用する音声の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-393">The name of the voice to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-394">シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、使用する音声の名前を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-394">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the name of the voice to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-395">音声のインストールに関する情報を取得するには、いずれかを使用、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2a172-395">To get information about which voices are installed, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods.</span></span>  
  
 <span data-ttu-id="2a172-396">指定された音声の使用を停止する<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>呼び出す<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-396">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender, age As VoiceAge)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge -&gt; unit" Usage="promptBuilder.StartVoice (gender, age)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender">
          <span data-ttu-id="2a172-397">使用する新しい音声の性別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-397">The gender of the new voice to use.</span>
          </span>
        </param>
        <param name="age">
          <span data-ttu-id="2a172-398">使用する音声の年齢。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-398">The age of the voice to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-399">シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、新しい音声の性別と年齢を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-399">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the gender and the age of the new voice.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-400">使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドと<xref:System.Speech.Synthesis.VoiceInfo>クラス名との属性を取得するには、選択可能な音声合成 (TTS) の音声がインストールされています。</span><span class="sxs-lookup"><span data-stu-id="2a172-400">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="2a172-401">指定された音声の使用を停止する<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>呼び出す<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-401">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int -&gt; unit" Usage="promptBuilder.StartVoice (gender, age, voiceAlternate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender">
          <span data-ttu-id="2a172-402">使用する音声の性別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-402">The gender of the voice to use.</span>
          </span>
        </param>
        <param name="age">
          <span data-ttu-id="2a172-403">使用する音声の年齢。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-403">The age of the voice to use.</span>
          </span>
        </param>
        <param name="voiceAlternate">
          <span data-ttu-id="2a172-404">複数の音声が <c>ender</c> と <c>age</c> のパラメーターに一致するときに、望ましい音声を指定する整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-404">An integer that specifies a preferred voice when more than one voice matches the <c>gender</c> and <c>age</c> parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a172-405">シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、性別、年齢、および指定した性別と年齢に一致する適切な音声を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-405">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies its gender, age, and a preferred voice that matches the specified gender and age.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-406">音声合成エンジンは、指定されたパラメーターを検索し、カウントが音声を返しますの一致項目をカウント、`voiceAlternate`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="2a172-406">A speech synthesis engine counts the matches it finds for the specified parameters, and returns the voice when the count equals the `voiceAlternate` parameter.</span></span>  
  
 <span data-ttu-id="2a172-407">使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドと<xref:System.Speech.Synthesis.VoiceInfo>クラス名との属性を取得するには、選択可能な音声合成 (TTS) の音声がインストールされています。</span><span class="sxs-lookup"><span data-stu-id="2a172-407">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="2a172-408">指定された音声の使用を停止する<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>呼び出す<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2a172-408">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public string ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToXml();" />
      <MemberSignature Language="F#" Value="member this.ToXml : unit -&gt; string" Usage="promptBuilder.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2a172-409">
            <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトから生成される SSML を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-409">Returns the SSML generated from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a172-410">単一行として <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトから生成される SSML を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a172-410">Returns the SSML generated from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object as a single line.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a172-411"><xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A>メソッドが何らかの方法で返される SSML を書式設定操作を行わない。</span><span class="sxs-lookup"><span data-stu-id="2a172-411">The <xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A> method makes no attempt to format the returned SSML in any way.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a172-412">次の例では、作成、<xref:System.Speech.Synthesis.PromptBuilder>オブジェクト、テキストを追加し、プロンプトの SSML 相当を前に、プロンプトの内容、コンソールに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2a172-412">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends text, and then writes the SSML equivalent of the prompt to the console before speaking the contents of the prompt.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Write the contents of the PromptBuilder object to the console as  
        // an SSML-compatible XML file.  
        string myXml = style.ToXml();  
        Console.WriteLine("This is the SSML equivalent of the PromptBuilder: \n\n" + myXml);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>