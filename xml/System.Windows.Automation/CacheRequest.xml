<Type Name="CacheRequest" FullName="System.Windows.Automation.CacheRequest">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e3c850cfeae6b7ab2904469084e51f8568baab35" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70470558" /></Metadata><TypeSignature Language="C#" Value="public sealed class CacheRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CacheRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.CacheRequest" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CacheRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheRequest sealed" />
  <TypeSignature Language="F#" Value="type CacheRequest = class" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Windows.Automation.AutomationElement" /> が取得されるときに、UI オートメーション フレームワークがキャッシュするプロパティおよびパターンを指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 を使用して[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]プロパティとパターンを取得するには、プロセス間の呼び出しによってパフォーマンスが低下することがあります。 バッチ操作でプロパティとパターンの値をキャッシュすることにより、アプリケーションのパフォーマンスを向上させることができます。  
  
 クラスコンストラクターを呼び出して、新しいキャッシュ要求を作成します。 要求は、 <xref:System.Windows.Automation.CacheRequest.Add%2A>メソッドを繰り返し呼び出すことによって設定されます。  
  
 アクティブにできる<xref:System.Windows.Automation.CacheRequest>のは1つだけです。 要求をアクティブ化するには、次の2つの方法があります。  
  
-   要求<xref:System.Windows.Automation.CacheRequest.Activate%2A>に対してを呼び出します。 これにより、要求がスタックにプッシュされ、オブジェクトが破棄されると要求がポップされます。 例外が発生した場合でも破棄されるようにするに<xref:System.Windows.Automation.CacheRequest.Activate%2A>は、 `using`ブロック内`Using`から (Visual Basic) の戻り値を使用します。  
  
-   を呼び出し<xref:System.Windows.Automation.CacheRequest.Push%2A>て、要求を内部スタックに配置します。 スタック上の最上位の要求のみがアクティブであり、によって<xref:System.Windows.Automation.CacheRequest.Pop%2A>スタックから削除される次の要求である必要があります。 要求をポップすると、それが非アクティブになります。  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]要求がアクティブになっている間に取得された要素には、指定されたプロパティとパターンのキャッシュされた値が含まれます。  
  
   
  
## Examples  
 次の例は、を使用<xref:System.Windows.Automation.CacheRequest.Activate%2A>してパターンとプロパティをキャッシュする方法を示しています。  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 次の例は、および<xref:System.Windows.Automation.CacheRequest.Push%2A> <xref:System.Windows.Automation.CacheRequest.Pop%2A>を使用してパターンとプロパティをキャッシュする方法を示しています。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">UI オートメーション クライアントにおけるキャッシュ</related>
    <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">UI オートメーションにおけるキャッシュの使用</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms771456(v=vs.90)">FetchTimer サンプル</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheRequest();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Automation.CacheRequest" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 が作成されると、識別子が既定のプロパティとしてキャッシュに追加されます。 <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> <xref:System.Windows.Automation.CacheRequest>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">UI オートメーション クライアントにおけるキャッシュ</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">UI オートメーションにおけるキャッシュの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public IDisposable Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Activate();" />
      <MemberSignature Language="F#" Value="member this.Activate : unit -&gt; IDisposable" Usage="cacheRequest.Activate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Automation.CacheRequest" /> を、同じスレッドで <see cref="T:System.Windows.Automation.AutomationElement" /> が要求されたときに返される項目のアクティブな指定として設定します。</summary>
        <returns><see cref="T:System.Windows.Automation.CacheRequest" /> を破棄するために使用できるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、このメソッドの使用は、 <xref:System.Windows.Automation.CacheRequest.Push%2A> <xref:System.Windows.Automation.CacheRequest>を<xref:System.Windows.Automation.CacheRequest.Pop%2A>アクティブ化する手段としておよびを使用することをお勧めします。 <xref:System.Windows.Automation.CacheRequest.Activate%2A>が呼び出されると、オブジェクトはスタックにプッシュされ、破棄されるときにポップされます。 破棄を確実に行うには、 `using`ブロック内に戻り値を配置します (`Using` Visual Basic)。  
  
   
  
## Examples  
 次の例は、を使用<xref:System.Windows.Automation.CacheRequest.Activate%2A>してパターンとプロパティをキャッシュする方法を示しています。  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">UI オートメーション クライアントにおけるキャッシュ</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">UI オートメーションにおけるキャッシュの使用</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>プロパティまたはパターン識別子を <see cref="T:System.Windows.Automation.CacheRequest" /> に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクトが作成<xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty>されると、識別子が既定のプロパティとしてキャッシュに追加されます。 <xref:System.Windows.Automation.CacheRequest>  
  
 キャッシュ要求に既に存在するオブジェクトを追加しても効果はありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationPattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationPattern pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationPattern)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (pattern As AutomationPattern)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationPattern ^ pattern);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.Automation.AutomationPattern -&gt; unit" Usage="cacheRequest.Add pattern" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.Windows.Automation.AutomationPattern" />
      </Parameters>
      <Docs>
        <param name="pattern">キャッシュするパターンを指定する識別子。</param>
        <summary>指定した <see cref="T:System.Windows.Automation.AutomationPattern" /> 識別子を、この <see cref="T:System.Windows.Automation.CacheRequest" /> に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既にキャッシュ要求に含まれているパターンを追加しても、効果はありません。  
  
   
  
## Examples  
 次の例は、を<xref:System.Windows.Automation.CacheRequest>構築し、キャッシュするパターンを追加する方法を示しています。  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Automation.CacheRequest" /> がアクティブです。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">UI オートメーション クライアントにおけるキャッシュ</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">UI オートメーションにおけるキャッシュの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (property As AutomationProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationProperty ^ property);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.Automation.AutomationProperty -&gt; unit" Usage="cacheRequest.Add property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.Automation.AutomationProperty" />
      </Parameters>
      <Docs>
        <param name="property">キャッシュするプロパティ値を指定する識別子。</param>
        <summary>指定した <see cref="T:System.Windows.Automation.AutomationProperty" /> 識別子を、この <see cref="T:System.Windows.Automation.CacheRequest" /> に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 が作成されると、識別子が既定のプロパティとしてキャッシュに追加されます。 <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> <xref:System.Windows.Automation.CacheRequest>  
  
 キャッシュ要求に既に存在するプロパティを追加しても、効果はありません。  
  
   
  
## Examples  
 次の例は、を<xref:System.Windows.Automation.CacheRequest>構築し、キャッシュするプロパティを追加する方法を示しています。  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Automation.CacheRequest" /> がアクティブです。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">UI オートメーション クライアントにおけるキャッシュ</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">UI オートメーションにおけるキャッシュの使用</related>
      </Docs>
    </Member>
    <Member MemberName="AutomationElementMode">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElementMode AutomationElementMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.AutomationElementMode AutomationElementMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.AutomationElementMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutomationElementMode As AutomationElementMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::AutomationElementMode AutomationElementMode { System::Windows::Automation::AutomationElementMode get(); void set(System::Windows::Automation::AutomationElementMode value); };" />
      <MemberSignature Language="F#" Value="member this.AutomationElementMode : System.Windows.Automation.AutomationElementMode with get, set" Usage="System.Windows.Automation.CacheRequest.AutomationElementMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElementMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返される要素に、基になる[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] への完全参照を含めるか、またはキャッシュされた情報だけを含めるかを指定する値を取得または設定します。</summary>
        <value>返される要素に基になる[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] への完全参照を含める場合は、<see cref="F:System.Windows.Automation.AutomationElementMode.Full" />。それ以外の場合は <see cref="F:System.Windows.Automation.AutomationElementMode.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.AutomationElementMode.Full>は既定値です。は、返される要素に、基になる[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]への完全な参照を格納することを指定します。 <xref:System.Windows.Automation.AutomationElementMode.None>返される要素に、基になる[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]への参照がなく、キャッシュされた情報のみを含むことを指定します。  
  
 <xref:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue%2A>、 <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>、 <xref:System.InvalidOperationException>などの要素に対する特定の操作には、完全な参照が必要です。これらを、none を持つ要素に対して実行しようとすると、が発生します。 <xref:System.Windows.Automation.AutomationElement.SetFocus%2A>  
  
 を<xref:System.Windows.Automation.AutomationElementMode.None>使用すると、プロパティだけが必要な場合に、完全な参照の設定に伴うオーバーヘッドが回避されるため、効率が向上します。  
  
   
  
## Examples  
 次の例では<xref:System.Windows.Automation.CacheRequest.AutomationElementMode%2A> 、がに<xref:System.Windows.Automation.AutomationElementMode.None>設定されています。結果として、取得したオブジェクトに対してキャッシュされたプロパティとパターンのみが使用可能になります。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">UI オートメーション クライアントにおけるキャッシュ</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">UI オートメーションにおけるキャッシュの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.CacheRequest Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.CacheRequest Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::CacheRequest ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Windows.Automation.CacheRequest" Usage="cacheRequest.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Automation.CacheRequest" /> のコピーを作成します。</summary>
        <returns>現在のオブジェクトの変更可能なコピー。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.CacheRequest Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Automation.CacheRequest Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Current As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Automation::CacheRequest ^ Current { System::Windows::Automation::CacheRequest ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Windows.Automation.CacheRequest" Usage="System.Windows.Automation.CacheRequest.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のスレッドでアクティブな <see cref="T:System.Windows.Automation.CacheRequest" /> を取得します。</summary>
        <value>アクティブな <see cref="T:System.Windows.Automation.CacheRequest" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public void Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pop();" />
      <MemberSignature Language="F#" Value="member this.Pop : unit -&gt; unit" Usage="cacheRequest.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のスレッドの内部スタックから、アクティブな <see cref="T:System.Windows.Automation.CacheRequest" /> を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.CacheRequest.Pop%2A>メソッドを使用して削除できるのは、現在アクティブな要求だけです。 現在のものではない要求を削除しようとすると、例外が発生します。  
  
 キャッシュ要求を入れ子にしていない場合は、 <xref:System.Windows.Automation.CacheRequest.Activate%2A>を使用して要求をスタックに配置することをお勧めします。 その理由は、例外が発生<xref:System.Windows.Automation.CacheRequest.Activate%2A>した`using`場合で`Using`も、ブロック (Visual Basic) 内でを使用して、要求がスタックからポップされるようにすることができるためです。  
  
   
  
## Examples  
 次の例では、を使用<xref:System.Windows.Automation.CacheRequest> <xref:System.Windows.Automation.CacheRequest.Pop%2A>してを非アクティブ化する方法を示します。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">スタックに最後にプッシュされたものではないキャッシュ要求を削除しようとしました。</exception>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">UI オートメーション クライアントにおけるキャッシュ</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">UI オートメーションにおけるキャッシュの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Push" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push();" />
      <MemberSignature Language="F#" Value="member this.Push : unit -&gt; unit" Usage="cacheRequest.Push " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Automation.CacheRequest" /> を内部状態スタックに配置して、現在のスレッドのアクティブな要求にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複数<xref:System.Windows.Automation.CacheRequest>のオブジェクトを状態スタックに配置できます。 キャッシュ要求は、プッシュされた順序でスタックから削除する必要があります。それ以外の<xref:System.InvalidOperationException>場合は、例外が発生します。  
  
 キャッシュ要求を入れ子にしていない場合は、 <xref:System.Windows.Automation.CacheRequest.Activate%2A>を使用して要求をスタックに配置することをお勧めします。 その理由は、例外が発生<xref:System.Windows.Automation.CacheRequest.Activate%2A>した`using`場合で`Using`も、ブロック (Visual Basic) 内でを使用して、要求がスタックからポップされるようにすることができるためです。  
  
   
  
## Examples  
 次の例は、を使用<xref:System.Windows.Automation.CacheRequest> <xref:System.Windows.Automation.CacheRequest.Push%2A>してをアクティブ化する方法を示しています。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">UI オートメーション クライアントにおけるキャッシュ</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">UI オートメーションにおけるキャッシュの使用</related>
      </Docs>
    </Member>
    <Member MemberName="TreeFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Condition TreeFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Condition TreeFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeFilter As Condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::Condition ^ TreeFilter { System::Windows::Automation::Condition ^ get(); void set(System::Windows::Automation::Condition ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TreeFilter : System.Windows.Automation.Condition with get, set" Usage="System.Windows.Automation.CacheRequest.TreeFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Condition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キャッシュ時に使用する、[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]要素ツリーのビューを指定する値を取得または設定します。</summary>
        <value>[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 要素ツリーのビュー。 既定のビューは、<see cref="F:System.Windows.Automation.Automation.ControlViewCondition" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]要素ツリーのビューの詳細については、「 [UI オートメーションツリーの概要](~/docs/framework/ui-automation/ui-automation-tree-overview.md)」を参照してください。  
  
   
  
## Examples  
 次の例では<xref:System.Windows.Automation.CacheRequest.TreeFilter%2A> 、がに<xref:System.Windows.Automation.Automation.RawViewCondition>設定されています。これは、すべての要素に対してキャッシュが実行されるようにするためです。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.Automation.Automation.ContentViewCondition" />
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">UI オートメーション クライアントにおけるキャッシュ</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">UI オートメーションにおけるキャッシュの使用</related>
      </Docs>
    </Member>
    <Member MemberName="TreeScope">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TreeScope TreeScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.TreeScope TreeScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeScope" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeScope As TreeScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TreeScope TreeScope { System::Windows::Automation::TreeScope get(); void set(System::Windows::Automation::TreeScope value); };" />
      <MemberSignature Language="F#" Value="member this.TreeScope : System.Windows.Automation.TreeScope with get, set" Usage="System.Windows.Automation.CacheRequest.TreeScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TreeScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キャッシュをサブツリーのルートに対してだけ実行するか、または子または子孫に対しても実行するかを指定する値を取得または設定します。</summary>
        <value><see cref="F:System.Windows.Automation.TreeScope.Element" />、<see cref="F:System.Windows.Automation.TreeScope.Children" />、<see cref="F:System.Windows.Automation.TreeScope.Descendants" />、または <see cref="F:System.Windows.Automation.TreeScope.Subtree" /> のうちの 1 つ以上。 既定値は <see cref="F:System.Windows.Automation.TreeScope.Element" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 キャッシュのスコープは、また<xref:System.Windows.Automation.AutomationElement.FindFirst%2A> <xref:System.Windows.Automation.AutomationElement.FindAll%2A>はが呼び出されるオブジェクトとは関係なく、フェッチされるオブジェクトに関連しています。 例を参照してください。  
  
   
  
## Examples  
 次の例では、が<xref:System.Windows.Automation.CacheRequest> <xref:System.Windows.Automation.CacheRequest.TreeScope%2A>アクティブであり、がである<xref:System.Windows.Automation.TreeScope.Children>ときに、リストボックス要素が親ウィンドウ要素から取得されます。 子要素 (つまりリスト項目) の指定されたプロパティはキャッシュに格納され、リストボックス<xref:System.Windows.Automation.AutomationElement.CachedChildren%2A>のから取得できます。  
  
 [!code-csharp[UIAClient_snip#119](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#119)]
 [!code-vb[UIAClient_snip#119](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#119)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">プロパティを <see cref="F:System.Windows.Automation.TreeScope.Parent" /> または <see cref="F:System.Windows.Automation.TreeScope.Ancestors" /> に設定しようとしました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">UI オートメーション クライアントにおけるキャッシュ</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">UI オートメーションにおけるキャッシュの使用</related>
      </Docs>
    </Member>
  </Members>
</Type>
