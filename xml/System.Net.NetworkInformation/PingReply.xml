<Type Name="PingReply" FullName="System.Net.NetworkInformation.PingReply">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="02658955cbcea15b85a8fddda92f34a0084c05ea" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39987621" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PingReply" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PingReply extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PingReply" />
  <TypeSignature Language="VB.NET" Value="Public Class PingReply" />
  <TypeSignature Language="C++ CLI" Value="public ref class PingReply" />
  <TypeSignature Language="F#" Value="type PingReply = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> 操作または <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 操作の結果として得られるステータスとデータに関する情報を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping>クラスは、リモート コンピューターにインターネット コントロール メッセージ プロトコル (ICMP) エコー要求を送信し、ICMP エコー応答メッセージを使用したコンピュータからの情報を受信を試みます。 <xref:System.Net.NetworkInformation.Ping>クラスのインスタンスを使用して、<xref:System.Net.NetworkInformation.PingReply>クラスの状態と、要求の送信し、応答の受信にかかった時間など、操作に関する情報を返します。  
  
 <xref:System.Net.NetworkInformation.Ping.Send%2A>メソッドのインスタンスを返す、<xref:System.Net.NetworkInformation.PingReply>クラスを直接します。 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドを返す、<xref:System.Net.NetworkInformation.PingReply>で、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>メソッドの<xref:System.Net.NetworkInformation.PingCompletedEventArgs>パラメーター。 <xref:System.Net.NetworkInformation.PingReply>を通じてアクセス、<xref:System.Net.NetworkInformation.PingCompletedEventArgs.Reply%2A>プロパティ。  
  
 場合の値<xref:System.Net.NetworkInformation.PingReply.Status%2A>ない<xref:System.Net.NetworkInformation.IPStatus.Success>、によって返される値を使用しないでください、 <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>、<xref:System.Net.NetworkInformation.PingReply.Options%2A>または<xref:System.Net.NetworkInformation.PingReply.Buffer%2A>プロパティ。 <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>プロパティは、0 を返します、<xref:System.Net.NetworkInformation.PingReply.Buffer%2A>プロパティは、空の配列を返します、<xref:System.Net.NetworkInformation.PingReply.Options%2A>プロパティが返す`null`します。  
  
   
  
## Examples  
 次のコード例に示しますを使用して<xref:System.Net.NetworkInformation.Ping>クラスを同期的に ICMP エコー要求を送信および応答を表示します。  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPAddress ^ Address { System::Net::IPAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.Net.IPAddress" Usage="System.Net.NetworkInformation.PingReply.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー応答を送信するホストのアドレスを取得します。</summary>
        <value>ICMP エコー メッセージの送信先を格納している <see cref="T:System.Net.IPAddress" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.PingReply.Address%2A>のいずれかによって返される、<xref:System.Net.NetworkInformation.Ping.Send%2A>オーバー ロードは、悪意のあるリモート コンピューターから取得できます。 このアドレスを使用してリモート コンピューターに接続できません。 接続するコンピューターの IP アドレスを確認するのにには、DNS を使用します。  
  
   
  
## Examples  
 次のコード例では、同期的に ICMP エコー要求を送信し、このプロパティの値を表示します。  
  
 [!code-cpp[NclPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NclPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public byte[] Buffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Buffer As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Buffer { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Buffer : byte[]" Usage="System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー応答メッセージで受信したデータのバッファーを取得します。</summary>
        <value>ICMP エコー応答メッセージで受信したデータを格納している <see cref="T:System.Byte" /> 配列。応答を受信しなかった場合は空の配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ICMP エコー要求で送信されるデータ バッファーは、既知のサイズのパケットのラウンド トリップの移動時間を計算するためにエコー応答で送信側に返されます。 データ バッファーを組み合わせて、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>オプションで、元と変換先のコンピューター間のネットワーク パスの最大転送単位を検出するために使用できます。 詳細については、RFC 1574 で使用可能なセクション 3.2 では、"Traceroute"を参照してください。 [ https://www.ietf.org](https://www.ietf.org)します。  
  
 使用される既定のバッファー<xref:System.Net.NetworkInformation.Ping.Send%2A>と<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>32 バイト データにはが含まれています。  
  
   
  
## Examples  
 次のコード例では、同期的に ICMP エコー要求を送信し、このプロパティによって返されるバッファーのサイズを表示します。  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkInformation.PingOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As PingOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::PingOptions ^ Options { System::Net::NetworkInformation::PingOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Net.NetworkInformation.PingOptions" Usage="System.Net.NetworkInformation.PingReply.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー要求に応答を送信するために使用するオプションを取得します。</summary>
        <value>
          <see cref="T:System.Net.NetworkInformation.PingOptions" /> が <see cref="P:System.Net.NetworkInformation.PingReply.Status" /> の場合は、応答の送信に使用する有効期間 (TTL: Time to Live) とフラグメンテーション ディレクティブを格納した <see cref="F:System.Net.NetworkInformation.IPStatus.Success" /> オブジェクト。それ以外の場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 TTL は、ノードは、送信元と変換先の間で送受信されるパケットを転送できる回数を定義します。 ホップとも呼ばれる、転送の数は、指定された TTL 値を超えている場合、パケットは配信不能と見なされる、破棄されます。  
  
 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ICMP エコー要求コントロール パケットのフラグメンテーションで指定された値。 場合<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>は`true`パケット サイズが、パケットで使用されるネットワーク パスの最大転送ユニットを超えるとは、パケットは破棄されます、<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>エラーが返されます。  
  
   
  
## Examples  
 次のコード例が同期的に ICMP エコー要求を送信しに格納されている値が表示されます、<xref:System.Net.NetworkInformation.PingOptions>このプロパティによって返されるオブジェクト。  
  
 [!code-cpp[NclPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NclPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundtripTime">
      <MemberSignature Language="C#" Value="public long RoundtripTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 RoundtripTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoundtripTime As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long RoundtripTime { long get(); };" />
      <MemberSignature Language="F#" Value="member this.RoundtripTime : int64" Usage="System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット制御メッセージ プロトコル (ICMP) エコー要求を送信して、対応する ICMP エコー応答メッセージを受信するまでにかかった時間をミリ秒単位で取得します。</summary>
        <value>往復時間 (ミリ秒単位) を指定する <see cref="T:System.Int64" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 エコー要求に失敗した場合、<xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>時間は、要求が成功したときに有効な値ではまた、0 として報告します。 確認する必要があります、<xref:System.Net.NetworkInformation.PingReply.Status%2A>をこのプロパティによって返される値を無視するかどうかを判断します。  
  
   
  
## Examples  
 次のコード例では、同期的に ICMP エコー要求を送信し、このプロパティによって返されるバッファーのサイズを表示します。  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.IPStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.NetworkInformation.IPStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As IPStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::IPStatus Status { System::Net::NetworkInformation::IPStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Net.NetworkInformation.IPStatus" Usage="System.Net.NetworkInformation.PingReply.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.IPStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー要求の送信と、対応する ICMP エコー応答メッセージの受信の処理のステータスを取得します。</summary>
        <value>要求の結果を示す <see cref="T:System.Net.NetworkInformation.IPStatus" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合の値<xref:System.Net.NetworkInformation.PingReply.Status%2A>ない<xref:System.Net.NetworkInformation.IPStatus.Success>、によって返される値を使用しないでください、 <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>、<xref:System.Net.NetworkInformation.PingReply.Options%2A>または<xref:System.Net.NetworkInformation.PingReply.Buffer%2A>プロパティ。 <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>と<xref:System.Net.NetworkInformation.PingReply.Buffer%2A>プロパティは、0 を返します、<xref:System.Net.NetworkInformation.PingReply.Options%2A>プロパティが返す`null`します。  
  
   
  
## Examples  
 次のコード例に示しますを使用して<xref:System.Net.NetworkInformation.Ping>クラスを同期的に ICMP エコー要求を送信および応答を表示します。  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>