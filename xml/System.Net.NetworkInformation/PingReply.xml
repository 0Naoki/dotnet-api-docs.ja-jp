<Type Name="PingReply" FullName="System.Net.NetworkInformation.PingReply">
  <Metadata><Meta Name="ms.openlocfilehash" Value="43f662cb69eefb6aad699f9833c3b46a93dc003c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69113728" /></Metadata><TypeSignature Language="C#" Value="public class PingReply" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PingReply extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PingReply" />
  <TypeSignature Language="VB.NET" Value="Public Class PingReply" />
  <TypeSignature Language="C++ CLI" Value="public ref class PingReply" />
  <TypeSignature Language="F#" Value="type PingReply = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> 操作または <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 操作の結果として得られるステータスとデータに関する情報を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラス<xref:System.Net.NetworkInformation.Ping>は、インターネット制御メッセージプロトコル (icmp) エコー要求をリモートコンピューターに送信し、icmp エコー応答メッセージを介してコンピューターから情報を受信します。 クラス<xref:System.Net.NetworkInformation.Ping>は、 <xref:System.Net.NetworkInformation.PingReply>クラスのインスタンスを使用して、状態や要求の送信と応答の受信にかかった時間など、操作に関する情報を返します。  
  
 メソッド<xref:System.Net.NetworkInformation.Ping.Send%2A>は、 <xref:System.Net.NetworkInformation.PingReply>クラスのインスタンスを直接返します。 メソッド<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>は<xref:System.Net.NetworkInformation.PingCompletedEventHandler> 、メソッド<xref:System.Net.NetworkInformation.PingReply>のパラメーターでを返します。<xref:System.Net.NetworkInformation.PingCompletedEventArgs> は、プロパティを<xref:System.Net.NetworkInformation.PingCompletedEventArgs.Reply%2A>使用してアクセスします。 <xref:System.Net.NetworkInformation.PingReply>  
  
 の<xref:System.Net.NetworkInformation.PingReply.Status%2A>値がでない<xref:System.Net.NetworkInformation.IPStatus.Success>場合は、 <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>、 <xref:System.Net.NetworkInformation.PingReply.Options%2A>または<xref:System.Net.NetworkInformation.PingReply.Buffer%2A>プロパティによって返される値を使用しないでください。 プロパティは 0 <xref:System.Net.NetworkInformation.PingReply.Buffer%2A>を返し、プロパティは<xref:System.Net.NetworkInformation.PingReply.Options%2A>空の配列を返し、プロパティはを返し`null`ます。 <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Net.NetworkInformation.Ping>クラスを使用して ICMP エコー要求を同期的に送信し、応答を表示する方法を示しています。  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPAddress ^ Address { System::Net::IPAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.Net.IPAddress" Usage="System.Net.NetworkInformation.PingReply.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー応答を送信するホストのアドレスを取得します。</summary>
        <value>ICMP エコー メッセージの送信先を格納している <see cref="T:System.Net.IPAddress" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 いずれ<xref:System.Net.NetworkInformation.PingReply.Address%2A> か<xref:System.Net.NetworkInformation.Ping.Send%2A>のオーバーロードによって返されるは、悪意のあるリモートコンピューターから発生することがあります。 このアドレスを使用してリモートコンピューターに接続しないでください。 DNS を使用して、接続先のコンピューターの IP アドレスを決定します。  
  
   
  
## Examples  
 次のコード例では、ICMP エコー要求を同期的に送信し、このプロパティの値を表示します。  
  
 [!code-cpp[NclPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NclPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public byte[] Buffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Buffer As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Buffer { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Buffer : byte[]" Usage="System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー応答メッセージで受信したデータのバッファーを取得します。</summary>
        <value>ICMP エコー応答メッセージで受信したデータを格納している <see cref="T:System.Byte" /> 配列。応答を受信しなかった場合は空の配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ICMP エコー要求と共に送信されるデータバッファーは、エコー応答の送信側に返されます。これにより、既知のサイズのパケットの往復移動時間を計算できます。 データバッファーを<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>オプションと組み合わせて使用すると、移行元コンピューターと移行先コンピューター間のネットワークパスの最大転送単位を検出できます。 詳細については、RFC 1574 のセクション 3.2 [https://www.ietf.org](https://www.ietf.org)の「Traceroute」を参照してください。  
  
 <xref:System.Net.NetworkInformation.Ping.Send%2A> と<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>で使用される既定のバッファーには、32バイトのデータが含まれています。  
  
   
  
## Examples  
 次のコード例では、ICMP エコー要求を同期的に送信し、このプロパティによって返されるバッファーのサイズを表示します。  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkInformation.PingOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As PingOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::PingOptions ^ Options { System::Net::NetworkInformation::PingOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Net.NetworkInformation.PingOptions" Usage="System.Net.NetworkInformation.PingReply.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー要求に応答を送信するために使用するオプションを取得します。</summary>
        <value><see cref="T:System.Net.NetworkInformation.PingOptions" /> が <see cref="P:System.Net.NetworkInformation.PingReply.Status" /> の場合は、応答の送信に使用する有効期間 (TTL: Time to Live) とフラグメンテーション ディレクティブを格納した <see cref="F:System.Net.NetworkInformation.IPStatus.Success" /> オブジェクト。それ以外の場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 TTL は、ノードが送信元と送信先の間を行き来する際にパケットを転送できる回数を定義します。 転送の数 (ホップとも呼ばれる) が TTL に指定された値を超える場合、パケットは配信不能と見なされ、破棄されます。  
  
 ICMP <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>エコー要求で指定された値は、パケットの断片化を制御します。 が<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>で、パケットサイズがパケットによって取得されるネットワークパスの最大転送単位を超えている場合、パケットは破棄され、エラーが返されます。 `true`  
  
   
  
## Examples  
 次のコード例では、ICMP エコー要求を同期的に送信し、 <xref:System.Net.NetworkInformation.PingOptions>このプロパティによって返されるオブジェクトに格納されている値を表示します。  
  
 [!code-cpp[NclPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NclPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundtripTime">
      <MemberSignature Language="C#" Value="public long RoundtripTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 RoundtripTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoundtripTime As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long RoundtripTime { long get(); };" />
      <MemberSignature Language="F#" Value="member this.RoundtripTime : int64" Usage="System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ICMP (インターネット コントロール メッセージ プロトコル) エコー要求の送信と、対応する ICMP エコー応答メッセージの受信にかかるミリ秒数を取得します。</summary>
        <value>ラウンド トリップの時間をミリ秒単位で指定する <see cref="T:System.Int64" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 エコー要求が失敗<xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>した場合、時刻は0として報告されます。これは、要求が成功した場合にも有効な値です。 このプロパティによっ<xref:System.Net.NetworkInformation.PingReply.Status%2A>て返される値を無視するかどうかを確認するには、を確認する必要があります。  
  
   
  
## Examples  
 次のコード例では、ICMP エコー要求を同期的に送信し、このプロパティによって返されるバッファーのサイズを表示します。  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.IPStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.NetworkInformation.IPStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As IPStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::IPStatus Status { System::Net::NetworkInformation::IPStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Net.NetworkInformation.IPStatus" Usage="System.Net.NetworkInformation.PingReply.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.IPStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー要求の送信と、対応する ICMP エコー応答メッセージの受信の処理のステータスを取得します。</summary>
        <value>要求の結果を示す <see cref="T:System.Net.NetworkInformation.IPStatus" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の<xref:System.Net.NetworkInformation.PingReply.Status%2A>値がでない<xref:System.Net.NetworkInformation.IPStatus.Success>場合は、 <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>、 <xref:System.Net.NetworkInformation.PingReply.Options%2A>または<xref:System.Net.NetworkInformation.PingReply.Buffer%2A>プロパティによって返される値を使用しないでください。 <xref:System.Net.NetworkInformation.PingReply.Options%2A> `null`プロパティとプロパティ<xref:System.Net.NetworkInformation.PingReply.Buffer%2A>は0を返し、プロパティはを返します。 <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Net.NetworkInformation.Ping>クラスを使用して ICMP エコー要求を同期的に送信し、応答を表示する方法を示しています。  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
