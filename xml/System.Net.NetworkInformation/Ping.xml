<Type Name="Ping" FullName="System.Net.NetworkInformation.Ping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="964d3143e4c0a1054b825d4c6caea94d0f45f70b" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46597645" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Ping : System.ComponentModel.Component, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Ping extends System.ComponentModel.Component implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.Ping" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Inherits Component&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : System::ComponentModel::Component, IDisposable" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    inherit Component&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.MonoTODO("IPv6 support is missing")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>リモート コンピューターにネットワーク経由でアクセスできるかどうかをアプリケーションで確認できるようにします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションを使用して、<xref:System.Net.NetworkInformation.Ping>クラスをリモート コンピューターが到達可能かどうかを検出します。  
  
 ネットワーク トポロジを決定できるかどうか<xref:System.Net.NetworkInformation.Ping>リモート ホストを正常に接続できます。 プレゼンスとプロキシ、ネットワーク アドレス変換 (NAT) 機器、またはファイアウォールの構成を防ぐことができます<xref:System.Net.NetworkInformation.Ping>が成功します。 正常に実行<xref:System.Net.NetworkInformation.Ping>ことを示すだけ、リモート ホストは、ネットワーク上にあることができます。 リモート ホスト (Web サーバー) などの上位レベル サービスの存在が保証されません。  
  
 このクラスは、Ping.exe コマンド ライン ツールと同様の機能を提供します。 <xref:System.Net.NetworkInformation.Ping.Send%2A>と<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドは、そのコンピューターからリモート コンピューターと ICMP エコー応答メッセージを待機するインターネット コントロール メッセージ プロトコル (ICMP) エコー要求メッセージを送信します。 ICMP メッセージの詳細については、RFC 792 で使用可能なを参照してください。 [ https://www.ietf.org](https://www.ietf.org/)します。  
  
 次の型を使用、<xref:System.Net.NetworkInformation.Ping>クラスであり、以下で詳しく説明します。  
  
|**型名**|**説明**|  
|-------------------|---------------------|  
|<xref:System.Net.NetworkInformation.IPStatus>|ICMP エコー要求メッセージの結果を説明するステータス コードを定義します。|  
|<xref:System.Net.NetworkInformation.PingOptions>|構成すること、または取得が何回要求パケットを制御する設定を転送することができます (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>)、断片化かどうかと (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> )。|  
|<xref:System.Net.NetworkInformation.PingReply>|ICMP エコー要求の結果が含まれています。|  
|<xref:System.Net.NetworkInformation.PingException>|回復不可能なエラーが発生した場合にスローされます。|  
|<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|関連付けられているデータを含む<xref:System.Net.NetworkInformation.Ping.PingCompleted>イベントは、場合に発生します、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼び出しが完了するかは取り消されます。|  
|<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|コールバック メソッドを提供するデリゲートが呼び出されたときに、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼び出しが完了するかは取り消されます。|  
  
 <xref:System.Net.NetworkInformation.Ping.Send%2A>と<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>で応答を返し、<xref:System.Net.NetworkInformation.PingReply>オブジェクト。 <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=nameWithType>プロパティが返す、<xref:System.Net.NetworkInformation.IPStatus>を要求の結果を示す値。  
  
 要求を送信する場合は、リモート コンピューターを指定する必要があります。 ホスト名の文字列、文字列の形式で IP アドレスを提供することでこれを行う、または<xref:System.Net.IPAddress>オブジェクト。  
  
 情報の種類は、次のいずれかを指定することもできます。  
  
-   要求に付随するデータ。 指定する`buffer`特定のサイズのパケットのリモート ホストとネットワーク パスの最大転送単位を移動するために必要な時間を学習することができます。 (を参照してください、<xref:System.Net.NetworkInformation.Ping.Send%2A>または<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るオーバー ロードを`buffer`パラメーターです)。  
  
-   かどうか、ICMP Echo パケットの場合は、転送中に断片化されていることができます。 (を参照してください、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティおよび<xref:System.Net.NetworkInformation.Ping.Send%2A>または<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るオーバー ロードを`options`パラメーターです)。  
  
-   回数ルーティング ノードなど、移行先コンピューターに到達したかは破棄されます前に、ルーターまたはゲートウェイをすると、パケットが転送することができます。 (を参照してください<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>と<xref:System.Net.NetworkInformation.Ping.Send%2A>または<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るオーバー ロードを`options`パラメーターです)。  
  
-   時間制限を応答を受信する必要があります。 (を参照してください、<xref:System.Net.NetworkInformation.Ping.Send%2A>または<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るオーバー ロードを`timeout`パラメーター。  
  
 <xref:System.Net.NetworkInformation.Ping>クラスは、要求を送信するための同期および非同期のメソッドを提供します。 場合は、アプリケーションは、応答を待機しているときにブロックする必要がありますを使用して、<xref:System.Net.NetworkInformation.Ping.Send%2A>メソッドはこれらのメソッドは同期的です。 場合は、アプリケーションをブロックしないでくださいを使用して、非同期<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッド。 呼び出し<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>スレッド プールから自動的に割り当てられている独自のスレッドで実行します。 非同期操作が完了したら、生成、<xref:System.Net.NetworkInformation.Ping.PingCompleted>イベント。 アプリケーションを使用して、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>に呼び出されるメソッドを指定するデリゲート<xref:System.Net.NetworkInformation.Ping.PingCompleted>イベント。 追加する必要があります、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>デリゲートを呼び出す前にイベント<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>します。 デリゲートのメソッドは受信、<xref:System.Net.NetworkInformation.PingCompletedEventArgs>を含むオブジェクトを<xref:System.Net.NetworkInformation.PingReply>の結果を記述するオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出します。  
  
 同じインスタンスを使用することはできません、<xref:System.Net.NetworkInformation.Ping>クラスで複数の同時 ICMP エコー要求を生成します。 呼び出す<xref:System.Net.NetworkInformation.Ping.Send%2A>中に、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼び出しが進行中または呼び出し元<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>何度も以前のすべての呼び出しがエラーの原因を完了する前に、<xref:System.InvalidOperationException>します。  
  
   
  
## Examples  
 次のコード例に示しますを使用して、<xref:System.Net.NetworkInformation.Ping>クラスを同期的にします。  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 次のコード例に示しますを使用して、<xref:System.Net.NetworkInformation.Ping>クラスを非同期的にします。  
  
 [!code-cpp[NCLPingASync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingASync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/network-programming/how-to-ping-a-host.md">方法: ホストに対して ping を実行</related>
    <related type="Article" href="~/docs/framework/network-programming/index.md">.NET Framework のネットワーク プログラミング</related>
    <related type="Article" href="~/docs/framework/network-programming/network-programming-samples.md">ネットワーク プログラミングのサンプル</related>
    <related type="Article" href="~/docs/framework/network-programming/networkinformation.md">NetworkInformation</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Ping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Ping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Net.NetworkInformation.Ping" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 作成する次のコード例に示します、<xref:System.Net.NetworkInformation.Ping>インスタンス。 完全な例は、<xref:System.Net.NetworkInformation.Ping>クラスの概要。  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="ping.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="ping.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Net.NetworkInformation.Ping" /> オブジェクトによって使用されているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、パブリック`Dispose()`メソッドと<xref:System.ComponentModel.Component.Finalize%2A>メソッド。 パブリック`Dispose()`メソッドは、保護された<xref:System.Net.NetworkInformation.Ping.Dispose%2A>メソッドを`disposing`パラメーターに設定`true`します。 <xref:System.ComponentModel.Component.Finalize%2A> 呼び出す`Dispose`で`disposing`に設定`false`します。  
  
 ときに、`disposing`パラメーターが`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放します。 この<xref:System.Net.NetworkInformation.Ping>オブジェクト参照。 このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPingCompleted">
      <MemberSignature Language="C#" Value="protected void OnPingCompleted (System.Net.NetworkInformation.PingCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnPingCompleted(class System.Net.NetworkInformation.PingCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnPingCompleted (e As PingCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnPingCompleted(System::Net::NetworkInformation::PingCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnPingCompleted : System.Net.NetworkInformation.PingCompletedEventArgs -&gt; unit" Usage="ping.OnPingCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.NetworkInformation.PingCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" /> オブジェクト。</param>
        <summary>
          <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 継承するクラス、<xref:System.Net.NetworkInformation.Ping>クラスに含まれるデータのログ記録などの他のタスクを実行するには、このメソッドをオーバーライド、`e`パラメーター。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Net.NetworkInformation.Ping.OnPingCompleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドするときに<see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />デリゲートを登録するためのメソッドがイベントを受信します。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PingCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.NetworkInformation.Ping.PingCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PingCompleted As PingCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::NetworkInformation::PingCompletedEventHandler ^ PingCompleted;" />
      <MemberSignature Language="F#" Value="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " Usage="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期の操作が ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、対応する ICMP エコー応答メッセージの受信を完了するか、またはキャンセルされたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションを使用して、<xref:System.Net.NetworkInformation.Ping.PingCompleted>の 1 つの呼び出しによって完了の状態とデータに関する情報を取得するイベントが収集された、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッド。 <xref:System.Net.NetworkInformation.PingCompletedEventHandler>デリゲートの呼び出しは、バック メソッドが呼び出されたときに<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>このイベントを発生させます。  
  
   
  
## Examples  
 次のコード例に示しますをコールバック メソッドを指定する、<xref:System.Net.NetworkInformation.Ping.PingCompleted>イベント。 完全な例は、<xref:System.Net.NetworkInformation.Ping>クラスの概要。  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー メッセージをリモート コンピューターに送信し、そのリモート コンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 いずれかで返された IP アドレス、<xref:System.Net.NetworkInformation.Ping.Send%2A>オーバー ロードは、悪意のあるリモート コンピューターから取得できます。 これを使用してリモート コンピューターに接続できません。 接続するコンピューターの IP アドレスを確認するのにには、DNS を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <summary>指定した <see cref="T:System.Net.IPAddress" /> を持つコンピューターに ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラー原因の説明を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドで指定されているホストに送信`address`32 <xref:System.Byte> ICMP エコー メッセージを含むデータ バッファー。 メソッドは、ICMP エコー応答メッセージを 5 秒間待機します。 かどうかを受け取らず、応答時間の中で、メソッドを返します、<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
 このオーバー ロードは、パケットのフラグメンテーションとパケットの転送の既定の設定を使用します。 ICMP エコー メッセージを含むパケットをフラグメント化する転送中パケットの合計サイズが送信できる最大パケット サイズを超える場合、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかでします。 断片化を防ぐためには、いずれかの操作を使用して、<xref:System.Net.NetworkInformation.Ping.Send%2A>を受け取るメソッドを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティを`true`します。 ときに<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>は`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。 パケットまたはパケットのフラグメント (断片化) する場合は、破棄される前に、ルーティングのノードで 128 回転送されます。 この設定を変更するには、使用、<xref:System.Net.NetworkInformation.Ping.Send%2A>を受け取るオーバー ロードを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>プロパティを目的の値にします。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 次のコード例では、このメソッドの呼び出しを示しています。  
  
 [!code-cpp[NCLPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NCLPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> は IPv6 アドレスですが、ローカル コンピューターでは Windows 2000 より前のオペレーティング システムが動作しています。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを指定されたコンピューターに送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラーの原因を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、32 <xref:System.Byte> ICMP エコー メッセージを含むデータ バッファー。 メソッドは、ICMP エコー応答メッセージを 5 秒間待機します。 かどうかを受け取らず、応答時間の中で、メソッドを返します、<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
 このオーバー ロードは、パケットのフラグメンテーションとパケットの転送の既定の設定を使用します。 ICMP エコー メッセージを含むパケットをフラグメント化する転送中パケットの合計サイズが送信できる最大パケット サイズを超える場合、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかでします。 断片化を防ぐためには、いずれかの操作を使用して、<xref:System.Net.NetworkInformation.Ping.Send%2A>を受け取るメソッドを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティを`true`します。 ときに<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>は`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。 パケットまたはパケットのフラグメント (断片化) する場合は、破棄される前に、ルーティングのノードで 128 回転送されます。 この設定を変更するには、使用、<xref:System.Net.NetworkInformation.Ping.Send%2A>を受け取るオーバー ロードを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>プロパティを目的の値にします。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 次のコード例では、このメソッドの呼び出しを示しています。  
  
 [!code-cpp[NCLPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NCLPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> が <see langword="null" /> または空の文字列 ("") です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> は IPv6 アドレスですが、ローカル コンピューターでは Windows 2000 より前のオペレーティング システムが動作しています。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。 関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <summary>指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このメソッドを使用して、操作のタイムアウト値を指定できます。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラーの原因を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定された時間内では、ICMP エコー応答メッセージが受信されない場合、`timeout`パラメーター、ICMP エコー失敗した場合、および<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
> [!NOTE]
>  非常に小さな数値を指定するときに`timeout`、Ping の応答を受信できる場合でも`timeout`経過時間 (ミリ秒)。  
  
 このオーバー ロードは、パケットのフラグメンテーションとパケットの転送の既定の設定を使用します。 ICMP エコー メッセージを含むパケットをフラグメント化する転送中パケットの合計サイズが送信できる最大パケット サイズを超える場合、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかでします。 断片化を防ぐためには、いずれかの操作を使用して、<xref:System.Net.NetworkInformation.Ping.Send%2A>を受け取るメソッドを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティを`true`します。 ときに<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>は`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。  
  
 パケットまたはパケットのフラグメントは、破棄される前に、ルーティングのノードで 128 回転送されます。 この設定を変更するには、使用、<xref:System.Net.NetworkInformation.Ping.Send%2A>を受け取るオーバー ロードを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>プロパティを目的の値にします。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 呼び出し元を示す例については、<xref:System.Net.NetworkInformation.Ping.Send%2A>メソッドを参照してください、<xref:System.Net.NetworkInformation.Ping>クラスの概要。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> は IPv6 アドレスですが、ローカル コンピューターでは Windows 2000 より前のオペレーティング システムが動作しています。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを指定されたコンピューターに送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このメソッドを使用して、操作のタイムアウト値を指定できます。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラーの原因を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定された時間内では、ICMP エコー応答メッセージが受信されない場合、`timeout`パラメーター、ICMP エコー失敗した場合、および<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
> [!NOTE]
>  非常に小さな数値を指定するときに`timeout`、Ping の応答を受信できる場合でも`timeout`経過時間 (ミリ秒)。  
  
 このオーバー ロードは、パケットのフラグメンテーションとパケットの転送の既定の設定を使用します。 ICMP エコー メッセージを含むパケットをフラグメント化する転送中パケットの合計サイズが送信できる最大パケット サイズを超える場合、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかでします。 断片化を防ぐためには、いずれかの操作を使用して、<xref:System.Net.NetworkInformation.Ping.Send%2A>を受け取るメソッドを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティを`true`します。 ときに<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>は`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。 パケットまたはパケットのフラグメント (断片化) する場合は、破棄される前に、ルーティングのノードで 128 回転送されます。 この設定を変更するには、使用、<xref:System.Net.NetworkInformation.Ping.Send%2A>を受け取るオーバー ロードを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>プロパティを目的の値にします。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 呼び出し元を示す例については、<xref:System.Net.NetworkInformation.Ping.Send%2A>メソッドを参照してください、<xref:System.Net.NetworkInformation.Ping>クラスの概要。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> が <see langword="null" /> または空の文字列 ("") です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <summary>指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラーの原因を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。 パケットが MTU (Maximum Transmission Unit) を超えている場合、このメソッドは <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定された時間内では、ICMP エコー応答メッセージが受信されない場合、`timeout`パラメーター、ICMP エコー失敗した場合、および<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
> [!NOTE]
>  非常に小さな数値を指定するときに`timeout`、Ping の応答を受信できる場合でも`timeout`経過時間 (ミリ秒)。  
  
 このオーバー ロードは、パケットのフラグメンテーションとパケットの転送の既定の設定を使用します。 ICMP エコー メッセージを含むパケットをフラグメント化する転送中パケットの合計サイズが送信できる最大パケット サイズを超える場合、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかでします。 断片化を防ぐためには、いずれかの操作を使用して、<xref:System.Net.NetworkInformation.Ping.Send%2A>を受け取るメソッドを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティを`true`します。 ときに<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>は`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。  
  
 パケットまたはパケットのフラグメントは、破棄される前に、ルーティングのノードで 128 回転送されます。 この設定を変更するには、使用、<xref:System.Net.NetworkInformation.Ping.Send%2A>を受け取るオーバー ロードを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>プロパティを目的の値にします。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-cpp[NCLPingSampler#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#6)]
 [!code-csharp[NCLPingSampler#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="buffer" /> が <see langword="null" /> です。または、<paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> は IPv6 アドレスですが、ローカル コンピューターでは Windows 2000 より前のオペレーティング システムが動作しています。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <summary>指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを指定されたコンピューターに送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラーの原因を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定された時間内では、ICMP エコー応答メッセージが受信されない場合、`timeout`パラメーター、ICMP エコー失敗した場合、および<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
> [!NOTE]
>  非常に小さな数値を指定するときに`timeout`、Ping の応答を受信できる場合でも`timeout`経過時間 (ミリ秒)。  
  
 このオーバー ロードは、パケットのフラグメンテーションとパケットの転送の既定の設定を使用します。 ICMP エコー メッセージを含むパケットをフラグメント化する転送中パケットの合計サイズが送信できる最大パケット サイズを超える場合、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかでします。 断片化を防ぐためには、いずれかの操作を使用して、<xref:System.Net.NetworkInformation.Ping.Send%2A>を受け取るメソッドを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティを`true`します。 ときに<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>は`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。  
  
 パケットまたはパケットのフラグメントは、破棄される前に、ルーティングのノードで 128 回転送されます。 この設定を変更するには、使用、<xref:System.Net.NetworkInformation.Ping.Send%2A>を受け取るオーバー ロードを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>プロパティを目的の値にします。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 呼び出す方法を示す例については、<xref:System.Net.NetworkInformation.Ping.Send%2A>オーバー ロードを参照してください、<xref:System.Net.NetworkInformation.Ping>クラスの概要。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> が <see langword="null" /> または空の文字列 ("") です。  
  
- または - 
 <paramref name="buffer" /> が <see langword="null" /> です。または、<paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="options">ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御するために使用される <see cref="T:System.Net.NetworkInformation.PingOptions" /> オブジェクト。</param>
        <summary>指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定し、ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御できます。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラーの原因を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。 パケットが MTU (Maximum Transmission Unit) を超えている場合、このメソッドは <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定された時間内では、ICMP エコー応答メッセージが受信されない場合、`timeout`パラメーター、ICMP エコー失敗した場合、および<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
> [!NOTE]
>  非常に小さな数値を指定するときに`timeout`、Ping の応答を受信できる場合でも`timeout`経過時間 (ミリ秒)。  
  
 場合、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティは`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。  
  
 使用して、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>宛先に到達する前に、ICMP エコー メッセージを転送できる最大回数を指定するプロパティ。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-cpp[NCLPingSampler#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#5)]
 [!code-csharp[NCLPingSampler#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="buffer" /> が <see langword="null" /> です。または、<paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> は IPv6 アドレスですが、ローカル コンピューターでは Windows 2000 より前のオペレーティング システムが動作しています。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="options">ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御するために使用される <see cref="T:System.Net.NetworkInformation.PingOptions" /> オブジェクト。</param>
        <summary>指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを指定されたコンピューターに送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定し、ICMP パケットのフラグメンテーションと有効期間 (TTL: time-to-live) 値を制御できます。</summary>
        <returns>ICMP エコー応答メッセージが受信された場合は、そのメッセージに関する情報を提供し、メッセージが受信されなかった場合は、エラーの原因を提供する <see cref="T:System.Net.NetworkInformation.PingReply" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定された時間内では、ICMP エコー応答メッセージが受信されない場合、`timeout`パラメーター、ICMP エコー失敗した場合、および<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
> [!NOTE]
>  非常に小さな数値を指定するときに`timeout`、Ping の応答を受信できる場合でも`timeout`経過時間 (ミリ秒)。  
  
 場合、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティは`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。  
  
 使用して、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>宛先に到達する前に、ICMP エコー メッセージを転送できる最大回数を指定するプロパティ。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-cpp[NCLPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NCLPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> が <see langword="null" /> か、または長さ 0 の文字列です。  
  
- または - 
 <paramref name="buffer" /> が <see langword="null" /> です。または、<paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> は IPv6 アドレスですが、ローカル コンピューターでは Windows 2000 より前のオペレーティング システムが動作しています。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非同期的に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージをコンピューターに送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これらのメソッドは、アプリケーションのメイン スレッドをブロックには行われません。 ICMP エコー応答メッセージを待機中にブロックする場合を使用して、<xref:System.Net.NetworkInformation.Ping.Send%2A>メソッド。  
  
> [!NOTE]
>  いずれかで返された IP アドレス、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドは、悪意のあるリモート コンピューターから取得できます。 これを使用してリモート コンピューターに接続できません。 接続するコンピューターの IP アドレスを確認するのにには、DNS を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * obj -&gt; unit" Usage="ping.SendAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、非同期的に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドがエコー メッセージを非同期的に送信し、アプリケーションにステータスを返します (正常または異常) 操作の完了します。 呼び出す、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドと、アプリケーションをブロックする必要があります。 スレッド プールから自動的に割り当てられている別のスレッドで、このメソッドを呼び出すたびに実行します。 非同期操作が完了したら、生成、<xref:System.Net.NetworkInformation.Ping.PingCompleted>イベント。 ときに呼び出されるメソッドを指定する<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>、イベントを発生させる、追加する必要があります、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>デリゲートを呼び出す前にイベント<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>します。 デリゲートのメソッドは受信、<xref:System.Net.NetworkInformation.PingCompletedEventArgs>を含むオブジェクトを<xref:System.Net.NetworkInformation.PingReply>の結果を記述するオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出します。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>オブジェクトの継承、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>プロパティ。 このプロパティが含まれています、`userToken`に渡されたオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼び出します。  
  
> [!NOTE]
>  場合は、アプリケーションは、応答を待機しているときにブロックする必要がありますのいずれかを使用、<xref:System.Net.NetworkInformation.Ping.Send%2A>メソッドはこれらのメソッドは同期的です。  
  
 このメソッドは、32 <xref:System.Byte> ICMP エコー メッセージを含むデータ バッファー。 メソッドは、ICMP エコー応答メッセージを 5 秒間待機します。 かどうかを受け取らず、応答時間の中で、メソッドを返します、<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
 このオーバー ロードは、パケットのフラグメンテーションとパケットの転送の既定の設定を使用します。 ICMP エコー メッセージを含むパケットをフラグメント化する転送中パケットの合計サイズが送信できる最大パケット サイズを超える場合、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかでします。 断片化を防ぐためには、いずれかの操作を使用して、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るメソッドを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティを`true`します。 ときに<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>は`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。  
  
 パケットまたはパケットのフラグメントは、破棄される前に、ルーティングのノードで 128 回転送されます。 この設定を変更するには、使用、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るオーバー ロードを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>プロパティを目的の値にします。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 呼び出し元を示すコード例については、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドを参照してください、<xref:System.Net.NetworkInformation.Ping>クラスの概要。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> メソッドの呼び出しを実行中です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> は IPv6 アドレスですが、ローカル コンピューターでは Windows 2000 より前のオペレーティング システムが動作しています。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> が有効な IP アドレスではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定されたコンピューターに、非同期的に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドがエコー メッセージを非同期的に送信し、アプリケーションにステータスを返します (正常または異常) 操作の完了します。 呼び出す、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドと、アプリケーションをブロックする必要があります。 スレッド プールから自動的に割り当てられている別のスレッドで、このメソッドを呼び出すたびに実行します。 非同期操作が完了したら、生成、<xref:System.Net.NetworkInformation.Ping.PingCompleted>イベント。 ときに呼び出されるメソッドを指定する<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>、イベントを発生させる、追加する必要があります、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>デリゲートを呼び出す前にイベント<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>します。 デリゲートのメソッドは受信、<xref:System.Net.NetworkInformation.PingCompletedEventArgs>を含むオブジェクトを<xref:System.Net.NetworkInformation.PingReply>の結果を記述するオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出します。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>オブジェクトの継承、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>プロパティ。 このプロパティが含まれています、`userToken`に渡されたオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼び出します。  
  
> [!NOTE]
>  場合は、アプリケーションは、応答を待機しているときにブロックする必要がありますを使用して、<xref:System.Net.NetworkInformation.Ping.Send%2A>メソッドはこれらのメソッドは同期的です。  
  
 このメソッドは、32 <xref:System.Byte> ICMP エコー メッセージを含むデータ バッファー。 メソッドは、ICMP エコー応答メッセージを 5 秒間待機します。 その時点で、応答が受信しなかった場合、メソッドを返します、<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
 このオーバー ロードは、パケットのフラグメンテーションとパケットの転送の既定の設定を使用します。 ICMP エコー メッセージを含むパケットをフラグメント化する転送中パケットの合計サイズが送信できる最大パケット サイズを超える場合、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかでします。 断片化を防ぐためには、いずれかの操作を使用して、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るメソッドを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティを`true`します。 ときに<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>は`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。  
  
 パケットまたはパケットのフラグメントは、破棄される前に、ルーティングのノードで 128 回転送されます。 この設定を変更するには、使用、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るオーバー ロードを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>プロパティを目的の値にします。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 呼び出し元を示すコード例については、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドを参照してください、<xref:System.Net.NetworkInformation.Ping>クラスの概要。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> が <see langword="null" /> または空の文字列 ("") です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" /> メソッドの呼び出しを実行中です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> は IPv6 アドレスですが、ローカル コンピューターでは Windows 2000 より前のオペレーティング システムが動作しています。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> を有効な IP アドレスに解決できませんでした。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、非同期的に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドがエコー メッセージを非同期的に送信し、アプリケーションにステータスを返します (正常または異常) 操作の完了します。 呼び出す、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドと、アプリケーションをブロックする必要があります。 各呼び出しは、スレッド プールから自動的に割り当てられている別のスレッドで実行されます。 非同期操作が完了したら、生成、<xref:System.Net.NetworkInformation.Ping.PingCompleted>イベント。 アプリケーションを使用して、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>時に呼び出されるメソッドを指定するデリゲート<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>イベントを発生させます。 追加する必要があります、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>デリゲートを呼び出す前にイベント<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>します。 デリゲートのメソッドは受信、<xref:System.Net.NetworkInformation.PingCompletedEventArgs>を含むオブジェクトを<xref:System.Net.NetworkInformation.PingReply>の結果を記述するオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出します。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>オブジェクトの継承、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>プロパティ。 このプロパティが含まれています、`userToken`に渡されたオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼び出します。  
  
 場合は、アプリケーションは、応答を待機しているときにブロックする必要がありますを使用して、<xref:System.Net.NetworkInformation.Ping.Send%2A>メソッドはこれらのメソッドは同期的です。  
  
 指定された時間内では、ICMP エコー応答メッセージが受信されない場合、`timeout`パラメーター、ICMP エコー失敗した場合、および<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
> [!NOTE]
>  非常に小さな数値を指定するときに`timeout`、Ping の応答を受信できる場合でも`timeout`経過時間 (ミリ秒)。  
  
 このオーバー ロードは、パケットのフラグメンテーションとパケットの転送の既定の設定を使用します。 ICMP エコー メッセージを含むパケットをフラグメント化する転送中パケットの合計サイズが送信できる最大パケット サイズを超える場合、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかでします。 断片化を防ぐためには、いずれかの操作を使用して、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るメソッドを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティを`true`します。 ときに<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>は`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。 パケットまたはパケットのフラグメント (断片化) する場合は、破棄される前に、ルーティングのノードで 128 回転送されます。 この設定を変更するには、使用、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るオーバー ロードを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>プロパティを目的の値にします。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 呼び出し元を示すコード例については、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>オーバー ロードを参照してください、<xref:System.Net.NetworkInformation.Ping>クラスの概要。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" /> メソッドの呼び出しを実行中です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> は IPv6 アドレスですが、ローカル コンピューターでは Windows 2000 より前のオペレーティング システムが動作しています。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> が有効な IP アドレスではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定されたコンピューターに、非同期的に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドがエコー メッセージを非同期的に送信し、アプリケーションにステータスを返します (正常または異常) 操作の完了します。 呼び出す、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドと、アプリケーションをブロックする必要があります。 各呼び出しは、スレッド プールから自動的に割り当てられている別のスレッドで実行されます。 非同期操作が完了したら、生成、<xref:System.Net.NetworkInformation.Ping.PingCompleted>イベント。 アプリケーションを使用して、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>時に呼び出されるメソッドを指定するデリゲート<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>イベントを発生させます。 追加する必要があります、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>デリゲートを呼び出す前にイベント<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>します。 デリゲートのメソッドは受信、<xref:System.Net.NetworkInformation.PingCompletedEventArgs>を含むオブジェクトを<xref:System.Net.NetworkInformation.PingReply>の結果を記述するオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出します。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>オブジェクトの継承、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>プロパティ。 このプロパティが含まれています、`userToken`に渡されたオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼び出します。  
  
 場合は、アプリケーションは、応答を待機しているときにブロックする必要がありますを使用して、<xref:System.Net.NetworkInformation.Ping.Send%2A>メソッドはこれらのメソッドは同期的です。  
  
 指定された時間内では、ICMP エコー応答メッセージが受信されない場合、`timeout`パラメーター、ICMP エコー失敗した場合、および<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
> [!NOTE]
>  非常に小さな数値を指定するときに`timeout`、Ping の応答を受信できる場合でも`timeout`経過時間 (ミリ秒)。  
  
 このオーバー ロードは、パケットのフラグメンテーションとパケットの転送の既定の設定を使用します。 ICMP エコー メッセージを含むパケットをフラグメント化する転送中パケットの合計サイズが送信できる最大パケット サイズを超える場合、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかでします。 断片化を防ぐためには、いずれかの操作を使用して、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るメソッドを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティを`true`します。 ときに<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>は`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。 パケットまたはパケットのフラグメント (断片化) する場合は、破棄される前に、ルーティングのノードで 128 回転送されます。 この設定を変更するには、使用、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るオーバー ロードを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>プロパティを目的の値にします。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 呼び出し元を示すコード例については、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドを参照してください、<xref:System.Net.NetworkInformation.Ping>クラスの概要。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> が <see langword="null" /> または空の文字列 ("") です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="hostNameOrAddress" /> は IPv6 アドレスですが、ローカル コンピューターでは Windows 2000 より前のオペレーティング システムが動作しています。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> を有効な IP アドレスに解決できませんでした。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを非同期的に送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、エコー メッセージを非同期的に送信し、アプリケーションに状態を返します (正常または異常) 操作の完了します。 呼び出す、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドと、アプリケーションをブロックする必要があります。 各呼び出しは、スレッド プールから自動的に割り当てられている別のスレッドで実行されます。 非同期操作が完了したら、生成、<xref:System.Net.NetworkInformation.Ping.PingCompleted>イベント。 ときに呼び出されるメソッドを指定する<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>、イベントを発生させる、追加する必要があります、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>デリゲートを呼び出す前にイベント<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>します。 デリゲートのメソッドは受信、<xref:System.Net.NetworkInformation.PingCompletedEventArgs>を含むオブジェクトを<xref:System.Net.NetworkInformation.PingReply>の結果を記述するオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出します。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>オブジェクトの継承、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>プロパティ。 このプロパティが含まれています、`userToken`に渡されたオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼び出します。  
  
> [!NOTE]
>  応答を待機しているときに、アプリケーションをブロックする場合は、使用、<xref:System.Net.NetworkInformation.Ping.Send%2A>メソッドはこれらのメソッドは同期的です。  
  
 指定された時間内では、ICMP エコー応答メッセージが受信されない場合、`timeout`パラメーター、ICMP エコー失敗した場合、および<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
> [!NOTE]
>  非常に小さな数値を指定するときに`timeout`、Ping の応答を受信できる場合でも`timeout`経過時間 (ミリ秒)。  
  
 このオーバー ロードは、パケットのフラグメンテーションとパケットの転送の既定の設定を使用します。 ICMP エコー メッセージを含むパケットをフラグメント化する転送中パケットの合計サイズが送信できる最大パケット サイズを超える場合、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかでします。 断片化を防ぐためには、いずれかの操作を使用して、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るメソッドを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティを`true`します。 ときに<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>は`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。 パケットまたはパケットのフラグメント (断片化) する場合は、破棄される前に、ルーティングのノードで 128 回転送されます。 この設定を変更するには、使用、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るオーバー ロードを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>プロパティを目的の値にします。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 呼び出し元を示すコード例については、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>オーバー ロードを参照してください、<xref:System.Net.NetworkInformation.Ping>クラスの概要。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="buffer" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> は IPv6 アドレスですが、ローカル コンピューターでは Windows 2000 より前のオペレーティング システムが動作しています。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> が有効な IP アドレスではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定されたコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを非同期的に送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドがエコー メッセージを非同期的に送信し、アプリケーションにステータスを返します (正常または異常) 操作の完了します。 呼び出す、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドと、アプリケーションをブロックする必要があります。 各呼び出しは、スレッド プールから自動的に割り当てられている別のスレッドで実行されます。 非同期操作が完了したら、生成、<xref:System.Net.NetworkInformation.Ping.PingCompleted>イベント。 アプリケーションを使用して、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>時に呼び出されるメソッドを指定するデリゲート<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>イベントを発生させます。 追加する必要があります、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>デリゲートを呼び出す前にイベント<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>します。 デリゲートのメソッドは受信、<xref:System.Net.NetworkInformation.PingCompletedEventArgs>オブジェクトを含む、<xref:System.Net.NetworkInformation.PingReply>の結果を記述するオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出します。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>オブジェクトの継承、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>プロパティ。 このプロパティが含まれています、`userToken`に渡されたオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼び出します。  
  
 場合は、アプリケーションは、応答を待機しているときにブロックする必要がありますを使用して、<xref:System.Net.NetworkInformation.Ping.Send%2A>メソッドはこれらのメソッドは同期的です。  
  
 指定された時間内では、ICMP エコー応答メッセージが受信されない場合、`timeout`パラメーター、ICMP エコー失敗した場合、および<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
> [!NOTE]
>  非常に小さな数値を指定するときに`timeout`、Ping の応答を受信できる場合でも`timeout`経過時間 (ミリ秒)。  
  
 このオーバー ロードは、パケットのフラグメンテーションとパケットの転送の既定の設定を使用します。 ICMP エコー メッセージを含むパケットをフラグメント化する転送中パケットの合計サイズが送信できる最大パケット サイズを超える場合、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかでします。 断片化を防ぐためには、いずれかの操作を使用して、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るメソッドを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティを`true`します。 ときに<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>は`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。 パケットまたはパケットのフラグメント (断片化) する場合は、破棄される前に、ルーティングのノードで 128 回転送されます。 この設定を変更するには、使用、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を受け取るオーバー ロードを`options`パラメーター、およびセット、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>プロパティを目的の値にします。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 次のコード例を呼び出す方法を示します、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>オーバー ロードを参照してください、<xref:System.Net.NetworkInformation.Ping>クラスの概要。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> が <see langword="null" /> または空の文字列 ("") です。  
  
- または - 
 <paramref name="buffer" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="hostNameOrAddress" /> は IPv6 アドレスですが、ローカル コンピューターでは Windows 2000 より前のオペレーティング システムが動作しています。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> を有効な IP アドレスに解決できませんでした。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="options">ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御するために使用される <see cref="T:System.Net.NetworkInformation.PingOptions" /> オブジェクト。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを非同期的に送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定し、ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドがエコー メッセージを非同期的に送信し、アプリケーションにステータスを返します (正常または異常) 操作の完了します。 呼び出す、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドと、アプリケーションをブロックする必要があります。 各呼び出しは、スレッド プールから自動的に割り当てられている別のスレッドで実行されます。 非同期操作が完了したら、生成、<xref:System.Net.NetworkInformation.Ping.PingCompleted>イベント。 アプリケーションを使用して、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>時に呼び出されるメソッドを指定するデリゲート<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>イベントを発生させます。 追加する必要があります、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>デリゲートを呼び出す前にイベント<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>します。 デリゲートのメソッドは受信、<xref:System.Net.NetworkInformation.PingCompletedEventArgs>を含むオブジェクトを<xref:System.Net.NetworkInformation.PingReply>の結果を記述するオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出します。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>オブジェクトの継承、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>プロパティ。 このプロパティが含まれています、`userToken`に渡されたオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼び出します。  
  
 応答を待機しているときに、アプリケーションをブロックする場合は、使用、<xref:System.Net.NetworkInformation.Ping.Send%2A>メソッドはこれらのメソッドは同期的です。  
  
 指定された時間内では、ICMP エコー応答メッセージが受信されない場合、`timeout`パラメーター、ICMP エコー失敗した場合、および<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
> [!NOTE]
>  非常に小さな数値を指定するときに`timeout`、Ping の応答を受信できる場合でも`timeout`経過時間 (ミリ秒)。  
  
 場合、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティは`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。  
  
 使用して、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>宛先に到達する前に、ICMP エコー メッセージを転送できる最大回数を指定するプロパティ。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 次のコード例では、このメソッドを呼び出す方法を示します。 コールバック メソッドの実装は、次を参照してください。、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッド オーバー ロードの使用例」セクション。  
  
 次のコード例では、次の名前空間が必要です。  
  
 [!code-cpp[NCLPingSampler#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#0)]
 [!code-csharp[NCLPingSampler#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#0)]  
  
 次のコード例では、非同期的に ICMP エコー メッセージを送信します。  
  
 [!code-cpp[NCLPingSampler#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#7)]
 [!code-csharp[NCLPingSampler#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="buffer" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> は IPv6 アドレスですが、ローカル コンピューターでは Windows 2000 より前のオペレーティング システムが動作しています。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> が有効な IP アドレスではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先コンピューターを識別する <see cref="T:System.String" />。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="buffer">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位) を指定する <see cref="T:System.Int32" /> 値。</param>
        <param name="options">ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御するために使用される <see cref="T:System.Net.NetworkInformation.PingOptions" /> オブジェクト。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡すオブジェクト。</param>
        <summary>指定されたコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを非同期的に送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定し、ICMP パケットのフラグメンテーションと有効期間 (TTL: time-to-live) 値を制御できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドがエコー メッセージを非同期的に送信し、アプリケーションにステータスを返します (正常または異常) 操作の完了します。 呼び出す、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>メソッドと、アプリケーションをブロックする必要があります。 各呼び出しは、スレッド プールから自動的に割り当てられている別のスレッドで実行されます。 非同期操作が完了したら、生成、<xref:System.Net.NetworkInformation.Ping.PingCompleted>イベント。 アプリケーションを使用して、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>時に呼び出されるメソッドを指定するデリゲート<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>イベントを発生させます。 追加する必要があります、<xref:System.Net.NetworkInformation.PingCompletedEventHandler>デリゲートを呼び出す前にイベント<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>します。 デリゲートのメソッドは受信、<xref:System.Net.NetworkInformation.PingCompletedEventArgs>を含むオブジェクトを<xref:System.Net.NetworkInformation.PingReply>の結果を記述するオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を呼び出します。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>オブジェクトの継承、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>プロパティ。 このプロパティが含まれています、`userToken`に渡されたオブジェクト、<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>呼び出します。  
  
 場合は、アプリケーションは、応答を待機しているときにブロックする必要がありますを使用して、<xref:System.Net.NetworkInformation.Ping.Send%2A>メソッドはこれらのメソッドは同期的です。  
  
 指定された時間内では、ICMP エコー応答メッセージが受信されない場合、`timeout`パラメーター、ICMP エコー失敗した場合、および<xref:System.Net.NetworkInformation.PingReply.Status%2A>プロパティに設定されて<xref:System.Net.NetworkInformation.IPStatus.TimedOut>します。  
  
> [!NOTE]
>  非常に小さな数値を指定するときに`timeout`、Ping の応答を受信できる場合でも`timeout`経過時間 (ミリ秒)。  
  
 場合、<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>プロパティは`true`とパケットの合計サイズが、ローカルおよびリモート コンピューター間のルーティング ノードのいずれかで送信できる最大パケット サイズを超える、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>します。  
  
 使用して、<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>宛先に到達する前に、ICMP エコー メッセージを転送できる最大回数を指定するプロパティ。 パケットは、送信先を指定した回数だけが転送される後に到達しなかった場合は、パケットは破棄され、ICMP エコー要求は失敗します。 この場合、<xref:System.Net.NetworkInformation.PingReply.Status%2A>に設定されている<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>します。  
  
   
  
## Examples  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-cpp[NCLPingAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> が <see langword="null" /> または空の文字列 ("") です。  
  
- または - 
 <paramref name="buffer" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> は IPv6 アドレスですが、ローカル コンピューターでは Windows 2000 より前のオペレーティング システムが動作しています。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> を有効な IP アドレスに解決できませんでした。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="buffer" /> のサイズが 65500 バイトを超えています。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">ICMP エコー メッセージを送信します。  
  
関連付けられた列挙体。 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.SendAsyncCancel : unit -&gt; unit" Usage="ping.SendAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ICMP (インターネット制御メッセージ プロトコル) エコー メッセージの送信と対応する ICMP エコー応答メッセージの受信を行う、保留中のすべての非同期要求をキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出しを終了するには、このメソッドを呼び出す<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>を完了していません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendPingAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非同期操作として、ICMP (インターネット制御メッセージ プロトコル) エコー メッセージをコンピューターに送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する IP アドレス。</param>
        <summary>非同期操作として、指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> が有効な IP アドレスではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先となるコンピューター。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <summary>非同期操作として、指定されたコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する IP アドレス。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位)。</param>
        <summary>非同期操作として、指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先となるコンピューター。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位)。</param>
        <summary>非同期操作として、指定されたコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値を指定できます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する IP アドレス。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位)。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <summary>非同期操作として、指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードによって、操作にタイムアウト値を指定し、送信と受信に使用するバッファーを指定することができます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="buffer" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> が有効な IP アドレスではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="buffer" /> のサイズが 65,500 バイトを超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先となるコンピューター。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位)。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <summary>非同期操作として、指定されたコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードによって、操作にタイムアウト値を指定し、送信と受信に使用するバッファーを指定することができます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="address">ICMP エコー メッセージの送信先コンピューターを識別する IP アドレス。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位)。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="options">ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御するために使用される <see cref="T:System.Net.NetworkInformation.PingOptions" /> オブジェクト。</param>
        <summary>非同期操作として、指定された <see cref="T:System.Net.IPAddress" /> を持つコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値と送受信に使用するバッファーを指定し、ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御できます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="buffer" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> の呼び出しを実行中です。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">ICMP メッセージの送信中または受信中に例外がスローされました。 スローされた実際の例外については内部例外を参照してください。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> が有効な IP アドレスではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="buffer" /> のサイズが 65,500 バイトを超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">ICMP エコー メッセージの送信先となるコンピューター。 このパラメーターの値には、ホスト名または IP アドレスの文字列形式を指定できます。</param>
        <param name="timeout">エコー メッセージを送信してから ICMP エコー応答メッセージを待つ時間の最大値 (ミリ秒単位)。</param>
        <param name="buffer">ICMP エコー メッセージと共に送信されるデータが格納され、ICMP エコー応答メッセージで返される <see cref="T:System.Byte" /> 配列。 配列には、65,500 バイトを超えるデータを格納することはできません。</param>
        <param name="options">ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御するために使用される <see cref="T:System.Net.NetworkInformation.PingOptions" /> オブジェクト。</param>
        <summary>非同期操作として、指定されたコンピューターに、指定されたデータ バッファーと共に ICMP (インターネット制御メッセージ プロトコル) エコー メッセージを送信し、そのコンピューターから対応する ICMP エコー応答メッセージを受信します。 このオーバーロードを使用して、操作のタイムアウト値と送受信に使用するバッファーを指定し、ICMP エコー メッセージ パケットのフラグメンテーションと有効期間 (TTL: time-to-live) の値を制御できます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>> オブジェクトは、ICMP パケットが送信され、応答が受信された後に完了します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>