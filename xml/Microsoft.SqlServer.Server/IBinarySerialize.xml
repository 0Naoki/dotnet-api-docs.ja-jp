<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aa6d2af7371832ccbdde5ed90bb40f43e554dba4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="9573c-101">ユーザー定義型 (UDT) およびユーザー定義集計のシリアル化と逆シリアル化に対し、カスタム実装を提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="9573c-101">Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9573c-102">ユーザー定義型 (Udt) とユーザー定義集計のいずれか、記憶域の書式を定義する必要が<xref:Microsoft.SqlServer.Server.Format>です。`Native`</span><span class="sxs-lookup"><span data-stu-id="9573c-102">User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either <xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="9573c-103">または<xref:Microsoft.SqlServer.Server.Format>.`UserDefined`です。</span><span class="sxs-lookup"><span data-stu-id="9573c-103">or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span></span>  
  
 <span data-ttu-id="9573c-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="9573c-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="9573c-105">SQL サーバーをシリアル化を処理し、自動的に逆シリアル化することができますが、形式を処理できる型の種類に関する制限事項です。</span><span class="sxs-lookup"><span data-stu-id="9573c-105">allows SQL Server to handle serialization and deserialization automatically, but the format has restrictions on the kind of types it can handle.</span></span> <span data-ttu-id="9573c-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="9573c-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="9573c-107">独自のシリアル化を処理するには、ユーザー定義型と集計を使用できます。</span><span class="sxs-lookup"><span data-stu-id="9573c-107">allows user-defined types and aggregates to handle their own serialization.</span></span> <span data-ttu-id="9573c-108">ユーザー定義型と集計をと共に設定されなければなりません<xref:Microsoft.SqlServer.Server.Format>です。`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="9573c-108">User-defined types and aggregates must be marked with <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="9573c-109">`SqlUserDefinedType`または`SqlUserDefinedAggregate`属性、および実装する必要があります、<xref:Microsoft.SqlServer.Server.IBinarySerialize>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="9573c-109">in the `SqlUserDefinedType` or `SqlUserDefinedAggregate` attribute, and must implement the <xref:Microsoft.SqlServer.Server.IBinarySerialize> interface.</span></span>  
  
 <span data-ttu-id="9573c-110">カスタムのシリアル化を使用しても各インスタンスの合計サイズは最大 8,000 バイトを現在の制限を許容する必要がありますに注意してください。</span><span class="sxs-lookup"><span data-stu-id="9573c-110">Note that even with custom serialization, the total size of each instance must be under the maximum allowed limit, currently 8000 bytes.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">
          <span data-ttu-id="9573c-111">オブジェクトの逆シリアル化元である <see cref="T:System.IO.BinaryReader" /> ストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9573c-111">The <see cref="T:System.IO.BinaryReader" /> stream from which the object is deserialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9573c-112">ユーザー定義型 (UDT) またはユーザー定義集計をバイナリ形式から生成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9573c-112">Generates a user-defined type (UDT) or user-defined aggregate from its binary form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9573c-113"><xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>メソッドによって書き込まれた情報を使用して、オブジェクトを構築する必要があります、<xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="9573c-113">The <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method must reconstitute your object using the information written by the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9573c-114">次の例の実装を示しています、<xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>を使用して、UDT のメソッド、<xref:System.IO.BinaryReader>に保持されていた UDT を逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="9573c-114">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method of a UDT, which uses a <xref:System.IO.BinaryReader> to de-serialize a previously persisted UDT.</span></span> <span data-ttu-id="9573c-115">この例では、UDT が 2 つのデータ プロパティを持つ:`StringValue`と`DoubleValue`です。</span><span class="sxs-lookup"><span data-stu-id="9573c-115">This example assumes that the UDT has two data properties: `StringValue` and `DoubleValue`.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">
          <span data-ttu-id="9573c-116">シリアル化した UDT またはユーザー定義集計を格納する <see cref="T:System.IO.BinaryWriter" /> ストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9573c-116">The <see cref="T:System.IO.BinaryWriter" /> stream to which the UDT or user-defined aggregate is serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9573c-117">ユーザー定義型 (UDT) またはユーザー定義集計を永続化できるように、バイナリ形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9573c-117">Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9573c-118">十分な情報を許可するバイナリ ストリームに書き込む、 <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> UDT またはユーザー定義集計を構築します。</span><span class="sxs-lookup"><span data-stu-id="9573c-118">Write sufficient information to the binary stream to allow the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method to reconstitute your UDT or user-defined aggregate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9573c-119">次の例の実装を示しています、<xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>を使用して、UDT のメソッド、<xref:System.IO.BinaryWriter>をユーザー定義のバイナリ形式で UDT をシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="9573c-119">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method of a UDT, which uses a <xref:System.IO.BinaryWriter> to serialize the UDT in the user-defined binary format.</span></span> <span data-ttu-id="9573c-120">Null 文字のスペースの目的は、1 つの UDT と比較 TRANSACT-SQL コード内の別の文字列のバイトを文字列のバイトが比較され、2 バイトが double 型に比較できるように、文字列値が完全に double 型の値から分離することを確認するにはバイト数です。</span><span class="sxs-lookup"><span data-stu-id="9573c-120">The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>