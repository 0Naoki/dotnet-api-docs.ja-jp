<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6398bbefc1b84167ce0d9b13447ecb4af91d8f1b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37715883" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <TypeSignature Language="F#" Value="type IBinarySerialize = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>ユーザー定義型 (UDT) およびユーザー定義集計のシリアル化と逆シリアル化に対し、カスタム実装を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型 (Udt) とユーザー定義集計が指定されるストレージ形式を定義する必要な<xref:Microsoft.SqlServer.Server.Format>します。`Native` または<xref:Microsoft.SqlServer.Server.Format>.`UserDefined`します。  
  
 <xref:Microsoft.SqlServer.Server.Format>.`Native` シリアル化を処理し、自動的に逆シリアル化する SQL Server が、形式が処理できる型の種類に制限します。 <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` 独自のシリアル化を処理するには、ユーザー定義型と集計を使用できます。 ユーザー定義型および集計をと共に設定されなければなりません<xref:Microsoft.SqlServer.Server.Format>します。`UserDefined` `SqlUserDefinedType`または`SqlUserDefinedAggregate`属性、および実装する必要があります、<xref:Microsoft.SqlServer.Server.IBinarySerialize>インターフェイス。  
  
 カスタムのシリアル化を使用しても各インスタンスの合計サイズは 8,000 バイトを現在の制限を許可する最大ある必要がありますに注意してください。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.IO.BinaryReader -&gt; unit" Usage="iBinarySerialize.Read r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">オブジェクトの逆シリアル化元である <see cref="T:System.IO.BinaryReader" /> ストリーム。</param>
        <summary>ユーザー定義型 (UDT) またはユーザー定義集計をバイナリ形式から生成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>メソッドは、によって書き込まれた情報を使用して、オブジェクトを再構成する必要があります、<xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>メソッド。  
  
   
  
## Examples  
 次の例の実装を示しています、<xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>を使用して、UDT のメソッド、<xref:System.IO.BinaryReader>に保持されていた UDT を逆シリアル化できません。 この例では、UDT が 2 つのデータ プロパティを持つ:`StringValue`と`DoubleValue`します。  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.IO.BinaryWriter -&gt; unit" Usage="iBinarySerialize.Write w" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">シリアル化した UDT またはユーザー定義集計を格納する <see cref="T:System.IO.BinaryWriter" /> ストリーム。</param>
        <summary>ユーザー定義型 (UDT) またはユーザー定義集計を永続化できるように、バイナリ形式に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 十分な情報を許可するバイナリ ストリームに書き込む、 <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> UDT またはユーザー定義集計を再構築するためのメソッド。  
  
   
  
## Examples  
 次の例の実装を示しています、<xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>を使用して、UDT のメソッド、<xref:System.IO.BinaryWriter>ユーザー定義のバイナリ形式で UDT をシリアル化します。 Null 文字の埋め込みの目的は、文字列のバイト文字列のバイト数と比較されます、double 型に 2 バイトを比較する TRANSACT-SQL コード内の別の 1 つの UDT が比較できるように文字列値が完全に double 型の値から分離することを確認するにはバイト数。  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>