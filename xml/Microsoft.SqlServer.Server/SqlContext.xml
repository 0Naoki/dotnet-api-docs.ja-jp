<Type Name="SqlContext" FullName="Microsoft.SqlServer.Server.SqlContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="925c62c41e322e116fd365bf090d9efd2a63835d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36730219" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlContext sealed" />
  <TypeSignature Language="F#" Value="type SqlContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>呼び出し元のコンテキストを抽象化し、<see cref="T:Microsoft.SqlServer.Server.SqlPipe" />、<see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" />、<see cref="T:System.Security.Principal.WindowsIdentity" /> の各オブジェクトへのアクセスを提供します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.SqlServer.Server.SqlContext>オブジェクトは、トリガーのコンテキスト (トリガーでコードを実行して) および (場合などに使用できる、ストアド プロシージャ内で)、パイプ オブジェクトの取得に使用できます。 取得に使用することもできます、<xref:System.Security.Principal.WindowsIdentity>統合認証を使用して、サーバーとクライアントが認証されている場合は、呼び出し元のクライアントの Microsoft Windows id を表すオブジェクト。  
  
   
  
## Examples  
 次の例は、新しい作成<xref:Microsoft.SqlServer.Server.SqlDataRecord>とその<xref:Microsoft.SqlServer.Server.SqlMetaData>です。 例を使用して結果セットの先頭をマークし、<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>メソッドを使用してクライアントにデータの例を含むレコードを送信する、<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>メソッド、および記号のセットを結果の終わり、<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>メソッドです。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsAvailable">
      <MemberSignature Language="C#" Value="public static bool IsAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsAvailable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.IsAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAvailable : bool" Usage="Microsoft.SqlServer.Server.SqlContext.IsAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>呼び出し元コードを SQL Server 内で実行するかどうかと、コンテキスト接続にアクセスできるかどうかを示します。</summary>
        <value>コンテキスト接続にアクセスし、<see cref="T:Microsoft.SqlServer.Server.SqlContext" /> の IsAvailable 以外のメンバーにアクセスできる場合は <see langword="True" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは false を返します、他のすべて場合<xref:Microsoft.SqlServer.Server.SqlContext>メンバーをスロー、<xref:System.InvalidOperationException>使用されている場合。  
  
 このプロパティが false を返す場合しようとするを含む接続オブジェクトを開く"コンテキスト接続 = true"では、接続文字列が失敗します。  
  
 このプロパティは読み取り専用です。  
  
 データ アクセスに ADO.NET を使用して、コードの部分は、(共通言語ランタイム統合を使用して) SQL Server 内部および外部 SQL Server を実行可能性がある場合は、ときに、コンテキスト接続が利用できるかどうかを確認するこのプロパティを使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipe">
      <MemberSignature Language="C#" Value="public static Microsoft.SqlServer.Server.SqlPipe Pipe { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.SqlServer.Server.SqlPipe Pipe" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.Pipe" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Pipe As SqlPipe" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::SqlServer::Server::SqlPipe ^ Pipe { Microsoft::SqlServer::Server::SqlPipe ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pipe : Microsoft.SqlServer.Server.SqlPipe" Usage="Microsoft.SqlServer.Server.SqlContext.Pipe" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.SqlPipe</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>呼び出し元が、結果セット、メッセージ、およびコマンドの実行結果をクライアントに送り返すことを可能にするパイプ オブジェクトを取得します。</summary>
        <value>パイプを利用できる場合、<see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> のインスタンス。ユーザー定義関数など、パイプの利用できないコンテキストで呼び出した場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 外部の SQL Server から呼び出された場合、<xref:System.NotSupportedException>がスローされます。  
  
 このプロパティは読み取り専用です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TriggerContext">
      <MemberSignature Language="C#" Value="public static Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.TriggerContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TriggerContext As SqlTriggerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::SqlServer::Server::SqlTriggerContext ^ TriggerContext { Microsoft::SqlServer::Server::SqlTriggerContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TriggerContext : Microsoft.SqlServer.Server.SqlTriggerContext" Usage="Microsoft.SqlServer.Server.SqlContext.TriggerContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.SqlTriggerContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>呼び出し元に、トリガーの発生源に関する情報と、更新された列のマップを提供するトリガー コンテキストを取得します。</summary>
        <value>トリガー コンテキストにアクセスできる場合、<see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> のインスタンス。トリガー呼び出しの外側で呼び出された場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.SqlServer.Server.SqlTriggerContext>共通言語ランタイム トリガー内からオブジェクトが取得のみできます。  
  
 場合、<xref:Microsoft.SqlServer.Server.SqlContext.TriggerContext%2A>プロパティは、SQL Server の外部からアクセスは、<xref:System.NotSupportedException>がスローされます。  
  
 このプロパティは読み取り専用です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowsIdentity">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.WindowsIdentity WindowsIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Security.Principal.WindowsIdentity WindowsIdentity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.WindowsIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property WindowsIdentity As WindowsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Principal::WindowsIdentity ^ WindowsIdentity { System::Security::Principal::WindowsIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowsIdentity : System.Security.Principal.WindowsIdentity" Usage="Microsoft.SqlServer.Server.SqlContext.WindowsIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>呼び出し元の Microsoft Windows ID。</summary>
        <value>呼び出し元の Windows ID を表す <see cref="T:System.Security.Principal.WindowsIdentity" /> インスタンス。クライアントが SQL Server 認証を通じて認証された場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL Server の内部の共通言語ランタイム (CLR) コードは、プロセス アカウントのコンテキストで常に呼び出されます。 コードでの SQL Server のプロセス id ではなく呼び出し元のユーザーの id を使用して操作を実行する必要がある場合は、このプロパティで権限借用トークンを入手してください。 呼び出し元は、<xref:System.Security.Principal.WindowsIdentity> オブジェクトを取得すれば、クライアント アカウントを偽装し、クライアントの代わりに動作を実行できます。  
  
 外部の SQL Server から呼び出された場合、<xref:System.NotSupportedException>がスローされます。  
  
 `EXTERNAL_ACCESS` アクセス許可または `UNSAFE` アクセス許可でマークされたアセンブリのみが、このプロパティにアクセスできます。  
  
 このプロパティは読み取り専用です。  
  
   
  
## Examples  
 次の例では、呼び出し元のクライアントの Windows id を取得し、クライアントを偽装する方法を示します。 SQL Server オンライン ブックの権限借用の使用例については「権限借用のサンプル」を参照してください、<xref:Microsoft.SqlServer.Server.SqlContext.WindowsIdentity%2A>プロパティです。  
  
 [!code-csharp[DataWorks SqlContext.WindowsIdentity Sample#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlContext.WindowsIdentity Sample/CS/source.cs#1)]
 [!code-vb[DataWorks SqlContext.WindowsIdentity Sample#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlContext.WindowsIdentity Sample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>