<Type Name="SqlContext" FullName="Microsoft.SqlServer.Server.SqlContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="825d62a5e9710c1402283dbef5bd00b05faec9ce" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70611934" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlContext sealed" />
  <TypeSignature Language="F#" Value="type SqlContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>呼び出し元のコンテキストを抽象化し、<see cref="T:Microsoft.SqlServer.Server.SqlPipe" />、<see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" />、<see cref="T:System.Security.Principal.WindowsIdentity" /> の各オブジェクトへのアクセスを提供します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.SqlServer.Server.SqlContext>オブジェクトを使用すると、トリガーコンテキスト (トリガーで実行されるコードの場合) とパイプオブジェクト (ストアドプロシージャなどで使用できる場合) を取得できます。 また、クライアントが統合認証を使用<xref:System.Security.Principal.WindowsIdentity>してサーバーで認証されている場合に、呼び出し元クライアントの Microsoft Windows id を表すオブジェクトを取得するために使用することもできます。  
  
   
  
## Examples  
 次の例では、 <xref:Microsoft.SqlServer.Server.SqlDataRecord>新しい<xref:Microsoft.SqlServer.Server.SqlMetaData>とを作成します。 次に、メソッドを使用して<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>結果セットの先頭をマークし、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>メソッドを使用してデータの例を含むレコードをクライアントに送り返し、結果セットの末尾<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>をメソッドでマークします。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsAvailable">
      <MemberSignature Language="C#" Value="public static bool IsAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsAvailable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.IsAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAvailable : bool" Usage="Microsoft.SqlServer.Server.SqlContext.IsAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>呼び出し元コードを SQL Server 内で実行するかどうかと、コンテキスト接続にアクセスできるかどうかを示します。</summary>
        <value>コンテキスト接続にアクセスし、<see cref="T:Microsoft.SqlServer.Server.SqlContext" /> の IsAvailable 以外のメンバーにアクセスできる場合は <see langword="True" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティが false を返す場合、他<xref:Microsoft.SqlServer.Server.SqlContext>のすべての<xref:System.InvalidOperationException>メンバーは、を使用するとをスローします。  
  
 このプロパティが false を返す場合、接続文字列内で "context connection = true" を持つ接続オブジェクトを開こうとすると失敗します。  
  
 このプロパティは読み取り専用です。  
  
 データアクセスに ADO.NET を使用する場合、(共通言語ランタイムの統合を使用して) SQL Server 内でコードの一部が実行され、SQL Server 外部で実行される可能性がある場合は、このプロパティを使用してコンテキスト接続が使用可能かどうかを確認できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipe">
      <MemberSignature Language="C#" Value="public static Microsoft.SqlServer.Server.SqlPipe Pipe { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.SqlServer.Server.SqlPipe Pipe" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.Pipe" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Pipe As SqlPipe" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::SqlServer::Server::SqlPipe ^ Pipe { Microsoft::SqlServer::Server::SqlPipe ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pipe : Microsoft.SqlServer.Server.SqlPipe" Usage="Microsoft.SqlServer.Server.SqlContext.Pipe" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.SqlPipe</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>呼び出し元が、結果セット、メッセージ、およびコマンドの実行結果をクライアントに送り返すことを可能にするパイプ オブジェクトを取得します。</summary>
        <value>パイプを利用できる場合、<see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> のインスタンス。ユーザー定義関数など、パイプの利用できないコンテキストで呼び出した場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL Server 外から呼び出さ<xref:System.NotSupportedException>れた場合は、がスローされます。  
  
 このプロパティは読み取り専用です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TriggerContext">
      <MemberSignature Language="C#" Value="public static Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.TriggerContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TriggerContext As SqlTriggerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::SqlServer::Server::SqlTriggerContext ^ TriggerContext { Microsoft::SqlServer::Server::SqlTriggerContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TriggerContext : Microsoft.SqlServer.Server.SqlTriggerContext" Usage="Microsoft.SqlServer.Server.SqlContext.TriggerContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.SqlTriggerContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>呼び出し元に、トリガーの発生源に関する情報と、更新された列のマップを提供するトリガー コンテキストを取得します。</summary>
        <value>トリガー コンテキストにアクセスできる場合、<see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> のインスタンス。トリガー呼び出しの外側で呼び出された場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクト<xref:Microsoft.SqlServer.Server.SqlTriggerContext>を取得できるのは、共通言語ランタイムトリガー内からだけです。  
  
 プロパティが SQL Server <xref:System.NotSupportedException>の外部からアクセスされると、がスローされます。 <xref:Microsoft.SqlServer.Server.SqlContext.TriggerContext%2A>  
  
 このプロパティは読み取り専用です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowsIdentity">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.WindowsIdentity WindowsIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Security.Principal.WindowsIdentity WindowsIdentity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.WindowsIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property WindowsIdentity As WindowsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Principal::WindowsIdentity ^ WindowsIdentity { System::Security::Principal::WindowsIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowsIdentity : System.Security.Principal.WindowsIdentity" Usage="Microsoft.SqlServer.Server.SqlContext.WindowsIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>呼び出し元の Microsoft Windows ID。</summary>
        <value>呼び出し元の Windows ID を表す <see cref="T:System.Security.Principal.WindowsIdentity" /> インスタンス。クライアントが SQL Server 認証を通じて認証された場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL Server 内の共通言語ランタイム (CLR) コードは、常にプロセスアカウントのコンテキストで呼び出されます。 SQL Server プロセス id ではなく、ユーザーの id を呼び出すことでコードがアクションを実行する必要がある場合は、このプロパティを通じて偽装トークンを取得する必要があります。 呼び出し元は、<xref:System.Security.Principal.WindowsIdentity> オブジェクトを取得すれば、クライアント アカウントを偽装し、クライアントの代わりに動作を実行できます。  
  
 SQL Server 外から呼び出さ<xref:System.NotSupportedException>れた場合は、がスローされます。  
  
 `EXTERNAL_ACCESS` アクセス許可または `UNSAFE` アクセス許可でマークされたアセンブリのみが、このプロパティにアクセスできます。  
  
 このプロパティは読み取り専用です。  
  
   
  
## Examples  
 次の例は、呼び出し元のクライアントの Windows id を取得し、クライアントの権限を借用する方法を示しています。
  
 [!code-csharp[DataWorks SqlContext.WindowsIdentity Sample#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlContext.WindowsIdentity Sample/CS/source.cs#1)]
 [!code-vb[DataWorks SqlContext.WindowsIdentity Sample#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlContext.WindowsIdentity Sample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
