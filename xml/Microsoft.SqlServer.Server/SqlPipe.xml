<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f715fd742165d7d4ffbc7cb2e9be3f2dfa6d157e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37715749" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <TypeSignature Language="F#" Value="type SqlPipe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>このクラスを使用すると、SQL Server データベース上でインプロセスで実行されるマネージド ストアド プロシージャから、呼び出し元に結果を返すことができます。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスのインスタンスをマネージ ストアド プロシージャを使用できる、<xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A>のプロパティ、<xref:Microsoft.SqlServer.Server.SqlContext>クラス。  
  
   
  
## Examples  
 次の例では<xref:System.Data.SqlClient.SqlConnection>と<xref:System.Data.SqlClient.SqlCommand>ストアド プロシージャ内のデータ ソースから行を選択します。 使用して、<xref:Microsoft.SqlServer.Server.SqlPipe>コマンドを実行し、結果をクライアントに送信します。  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAndSend : System.Data.SqlClient.SqlCommand -&gt; unit" Usage="sqlPipe.ExecuteAndSend command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">実行対象の <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクト。</param>
        <summary>パラメーターとして渡されたコマンドを実行し、結果をクライアントに返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 実際の結果だけでなくクライアントに直接他のメッセージとエラーも送信します。  
  
 出力パラメーターと戻り値は、クライアントに送信されません。これらは、呼び出し元は、コマンド オブジェクトのパラメーターのコレクションを使用できます。  
  
 コマンドは、インプロセス接続では、バインドされていない場合、<xref:System.InvalidOperationException>がスローされます。 アウトプロセス接続にバインドされたコマンドに対してこのメソッドを使用することはできません。  
  
 エラーがある場合、<xref:System.Data.SqlClient.SqlCommand>オブジェクト送信された例外は、パイプに送信されますが、コピーは、呼び出し元のマネージ コードにも送信されます。 呼び出し元のコードが例外をキャッチしませんが、Transact SQL コードをスタックに伝播され、2 回、出力に表示されます。 呼び出し元のコードが例外をキャッチする場合は、パイプ コンシューマーは、エラーが表示されますが、重複エラーされません。  
  
   
  
## Examples  
 次の例では<xref:System.Data.SqlClient.SqlConnection>と<xref:System.Data.SqlClient.SqlCommand>ストアド プロシージャ内のデータ ソースから行を選択します。 使用して、<xref:Microsoft.SqlServer.Server.SqlPipe>コマンドを実行し、結果をクライアントに送信します。  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="command" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">アウトプロセス接続にバインドされたコマンドに対してこのメソッドを使用することはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSendingResults : bool" Usage="Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> に、単一の結果セットをクライアントに返すモードが使用されているかどうかを示す値を取得します。 このプロパティは読み取り専用です。</summary>
        <value>
          <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> メソッドが呼び出された状態で、単一の結果セットをクライアントに返すモードが <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> に使用されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>結果を直接クライアントまたは現在の出力のコンシューマーに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **送信**メソッドは、クライアントまたは呼び出し元に直接データを送信します。 出力を使用するクライアントでは通常、**パイプ**メソッドが CLR を入れ子になった場合のストアド プロシージャの出力のコンシューマーこともできますストアド プロシージャがあります。 たとえば、Procedure1 が呼び出す<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>コマンド テキスト"EXEC Procedure2"を使用します。 Procedure2 もマネージ ストアド プロシージャ。 Procedure2 を呼び出す場合<xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>クライアントが、Procedure1 のリーダーに、行が送信されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.Send : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.Send record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">クライアントに送信する単一行の結果セット (<see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> オブジェクト)。</param>
        <summary>単一行の結果セットを直接クライアントまたは現在の出力のコンシューマーに送信します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Data.SqlClient.SqlDataReader -&gt; unit" Usage="sqlPipe.Send reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">クライアントに送信する複数行の結果セット (<see cref="T:System.Data.SqlClient.SqlDataReader" /> オブジェクト)。</param>
        <summary>複数行の結果セットを直接クライアントまたは現在の出力のコンシューマーに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Data.SqlClient.SqlDataReader>パラメーターが列を非表示としてに渡されたオブジェクト、それらの列は、クライアントに送信される結果セットには反映されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; unit" Usage="sqlPipe.Send message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">クライアントに送信されるメッセージ文字列。</param>
        <summary>文字列メッセージを直接クライアントまたは現在の出力のコンシューマーに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージ文字列は、クライアントに情報メッセージとして送信されます。 クライアント アプリケーションは、によって、データ アクセス アプリケーション プログラミング インターフェイス (API) を使用して、別のメカニズムを通じてメッセージをリッスンできます。 たとえば、クライアントで ADO.NET を使用している場合、メッセージ転送を通じて、<xref:System.Data.SqlClient.SqlConnection.InfoMessage>イベント。  
  
   
  
## Examples  
 次の例では、<xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>メソッドを直接クライアントにメッセージ文字列を送信します。  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="message" /> が 4,000 文字を超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberSignature Language="F#" Value="member this.SendResultsEnd : unit -&gt; unit" Usage="sqlPipe.SendResultsEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>結果セットの最後に到達したことを示し、<see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> インスタンスを初期状態に戻します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 マネージ ストアド プロシージャが結果セットを実装していないクライアントに送信できますを<xref:System.Data.SqlClient.SqlDataReader>します。 このメソッドは、と共に<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>と<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>、ストアド プロシージャに独自の結果セットをクライアントに送信できるようにします。  
  
   
  
## Examples  
 次の例では、作成、新しい<xref:Microsoft.SqlServer.Server.SqlDataRecord>とその<xref:Microsoft.SqlServer.Server.SqlMetaData>します。 例を使用して設定の結果の先頭をマークし、<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>メソッドを使用してクライアントにサンプル データを持つレコードを送信する、<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>メソッド、および記号のセットを結果の終了、<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>メソッド。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> メソッドがまだ呼び出されていません。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsRow : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsRow record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">クライアントに送信する行の列値を含む <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> オブジェクト。 このレコードのスキーマは、<see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> メソッドに渡した <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> のメタデータが定義するスキーマと一致している必要があります。</param>
        <summary>単一行のデータをクライアントに返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 マネージ ストアド プロシージャが結果セットを実装していないクライアントに送信できますを<xref:System.Data.SqlClient.SqlDataReader>します。 このメソッドは、と共に<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>と<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>、により、ストアド プロシージャに独自の結果セットをクライアントに送信します。  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>メソッドは、クライアントに 1 行のデータを送信します。 行は、その後の呼び出し、呼び出し元に返される<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>、送信される行ごとに 1 回です。 すべての行が送信されたへの呼び出し後、<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>メソッドは、結果セットの末尾をマークするために必要です。  
  
   
  
## Examples  
 次の例では、作成、新しい<xref:Microsoft.SqlServer.Server.SqlDataRecord>とその<xref:Microsoft.SqlServer.Server.SqlMetaData>します。 例を使用して設定の結果の先頭をマークし、<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>メソッドを使用してクライアントにサンプル データを持つレコードを送信する、<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>メソッド、および記号のセットを結果の終了、<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>メソッド。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> メソッドがまだ呼び出されていません。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsStart : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsStart record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">メタデータを抽出し、結果セットを記述するための <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> オブジェクト。</param>
        <summary>クライアントに返す結果セットの先頭を宣言し、record パラメーターを使用して結果セットを表すメタデータを構築します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 マネージ ストアド プロシージャが結果セットを実装していないクライアントに送信できますを<xref:System.Data.SqlClient.SqlDataReader>します。 このメソッドは、と共に<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>と<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>、ストアド プロシージャに独自の結果セットをクライアントに送信できるようにします。  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>メソッドが、結果セットの開始をマークし、レコード パラメーターを使用して、結果セットを記述するメタデータを構築します。 その後すべての行を使用して送信、<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>メソッドはそのメタデータ定義と一致する必要があります。  
  
 その後の呼び出しに注意してください<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>だけ<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>と<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>呼び出すことができます。 他のメソッドの同じインスタンスで<xref:Microsoft.SqlServer.Server.SqlPipe>スロー、<xref:System.InvalidOperationException>します。 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 設定<xref:Microsoft.SqlServer.Server.SqlPipe>他のメソッドを呼び出すことが初期状態に戻す。  
  
 コントロールは、TRANSACT-SQL に CLR の実行から戻た後は、CLR のメモリを初期化または静的ローカル変数を使用しようとしないでください。 例では処理中のインスタンスがクラス、ストアではなく`SQLDataRecord`、CLR から制御が返された後に使用されます。 1 つの例外は、 `SQLMetaData` process クラスにします。  
  
   
  
## Examples  
 次の例では、作成、新しい<xref:Microsoft.SqlServer.Server.SqlDataRecord>とその<xref:Microsoft.SqlServer.Server.SqlMetaData>します。 例を使用して設定の結果の先頭をマークし、<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>メソッドを使用してクライアントにサンプル データを持つレコードを送信する、<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>メソッド、および記号のセットを結果の終了、<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>メソッド。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="record" /> に列が含まれていないか、初期化されていません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> メソッドの後で、<see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> と <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> のいずれにも該当しないメソッドが呼び出されました。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>