<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2eacd1a5ec4707b956c3ddb1c43f6451deba47c3" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70571403" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <TypeSignature Language="F#" Value="type SqlPipe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>このクラスを使用すると、SQL Server データベース上でインプロセスで実行されるマネージド ストアド プロシージャから、呼び出し元に結果を返すことができます。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスのインスタンスは、マネージストアドプロシージャで<xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> <xref:Microsoft.SqlServer.Server.SqlContext>クラスのプロパティを介して使用できるようになります。  
  
   
  
## Examples  
 次の例で<xref:System.Data.SqlClient.SqlConnection>は<xref:System.Data.SqlClient.SqlCommand> 、およびを使用して、ストアドプロシージャ内のデータソースから行を選択します。 この例では、 <xref:Microsoft.SqlServer.Server.SqlPipe>を使用してコマンドを実行し、結果をクライアントに送り返します。  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAndSend : System.Data.SqlClient.SqlCommand -&gt; unit" Usage="sqlPipe.ExecuteAndSend command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">実行対象の <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクト。</param>
        <summary>パラメーターとして渡されたコマンドを実行し、結果をクライアントに返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 実際の結果に加えて、他のメッセージやエラーもクライアントに直接送信されます。  
  
 出力パラメーターと戻り値はクライアントに送信されません。これらは、コマンドオブジェクトの parameters コレクションを通じて、呼び出し元が使用できます。  
  
 コマンドがインプロセス接続<xref:System.InvalidOperationException>にバインドされていない場合は、がスローされます。 アウトプロセス接続にバインドされたコマンドに対してこのメソッドを使用することはできません。  
  
 送信された<xref:System.Data.SqlClient.SqlCommand>オブジェクトにエラーがある場合は、パイプに例外が送信されますが、呼び出し元のマネージコードにもコピーが送信されます。 呼び出し元のコードが例外をキャッチしない場合は、スタックが Transact-sql コードに反映され、出力に2回表示されます。 呼び出し元のコードが例外をキャッチしても、パイプコンシューマーはエラーを認識しますが、重複エラーは発生しません。  
  
   
  
## Examples  
 次の例で<xref:System.Data.SqlClient.SqlConnection>は<xref:System.Data.SqlClient.SqlCommand> 、およびを使用して、ストアドプロシージャ内のデータソースから行を選択します。 この例では、 <xref:Microsoft.SqlServer.Server.SqlPipe>を使用してコマンドを実行し、結果をクライアントに送り返します。  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="command" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">アウトプロセス接続にバインドされたコマンドに対してこのメソッドを使用することはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSendingResults : bool" Usage="Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> に、単一の結果セットをクライアントに返すモードが使用されているかどうかを示す値を取得します。 このプロパティは読み取り専用です。</summary>
        <value><see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> メソッドが呼び出された状態で、単一の結果セットをクライアントに返すモードが <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> に使用されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>結果を直接クライアントまたは現在の出力のコンシューマーに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **Send**メソッドは、データをクライアントまたは呼び出し元に直接送信します。 これは通常、**パイプ**メソッドからの出力を使用するクライアントですが、入れ子になった CLR ストアドプロシージャの場合は、出力コンシューマーもストアドプロシージャにすることができます。 たとえば、Procedure1 は、 <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>コマンドテキスト "EXEC Procedure2" を使用してを呼び出します。 Procedure2 はマネージストアドプロシージャでもあります。 Procedure2 がを呼び出し<xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>た場合、行はクライアントではなく Procedure1's reader に送信されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.Send : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.Send record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">クライアントに送信する単一行の結果セット (<see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> オブジェクト)。</param>
        <summary>単一行の結果セットを直接クライアントまたは現在の出力のコンシューマーに送信します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="record" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Data.SqlClient.SqlDataReader -&gt; unit" Usage="sqlPipe.Send reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">クライアントに送信する複数行の結果セット (<see cref="T:System.Data.SqlClient.SqlDataReader" /> オブジェクト)。</param>
        <summary>複数行の結果セットを直接クライアントまたは現在の出力のコンシューマーに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パラメーターとして渡されたオブジェクトに非表示の列がある場合、これらの列はクライアントに送信される結果セットに反映されません。 <xref:System.Data.SqlClient.SqlDataReader>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; unit" Usage="sqlPipe.Send message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">クライアントに送信されるメッセージ文字列。</param>
        <summary>文字列メッセージを直接クライアントまたは現在の出力のコンシューマーに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージ文字列は情報メッセージとしてクライアントに送信されます。 クライアントアプリケーションは、使用するデータアクセスアプリケーションプログラミングインターフェイス (API) に応じて、さまざまなメカニズムを通じてメッセージをリッスンできます。 たとえば、クライアントが ADO.NET を使用している場合、メッセージは<xref:System.Data.SqlClient.SqlConnection.InfoMessage>イベントを介して送信されます。  
  
   
  
## Examples  
 次の例では<xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> 、メソッドを使用して、クライアントにメッセージ文字列を直接送信します。  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="message" /> が 4,000 文字を超えています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberSignature Language="F#" Value="member this.SendResultsEnd : unit -&gt; unit" Usage="sqlPipe.SendResultsEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>結果セットの最後に到達したことを示し、<see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> インスタンスを初期状態に戻します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 マネージストアドプロシージャは、を<xref:System.Data.SqlClient.SqlDataReader>実装していないクライアントに結果セットを送信できます。 このメソッドは、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>およびと共に、ストアドプロシージャによるクライアントへのカスタム結果セットの送信を許可し<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>ます。  
  
   
  
## Examples  
 次の例では、 <xref:Microsoft.SqlServer.Server.SqlDataRecord>新しい<xref:Microsoft.SqlServer.Server.SqlMetaData>とを作成します。 次に、メソッドを使用して<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>結果セットの先頭をマークし、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>メソッドを使用してデータの例を含むレコードをクライアントに送り返し、結果セットの末尾<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>をメソッドでマークします。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> メソッドがまだ呼び出されていません。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsRow : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsRow record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">クライアントに送信する行の列値を含む <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> オブジェクト。 このレコードのスキーマは、<see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> メソッドに渡した <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> のメタデータが定義するスキーマと一致している必要があります。</param>
        <summary>単一行のデータをクライアントに返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 マネージストアドプロシージャは、を<xref:System.Data.SqlClient.SqlDataReader>実装していないクライアントに結果セットを送信できます。 このメソッドを<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>およびと共<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>に使用すると、ストアドプロシージャからクライアントにカスタム結果セットを送信できます。  
  
 メソッド<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>は、1行のデータをクライアントに返します。 その後、を呼び出す<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>ことによって、行を呼び出し元に返すことができます。これは、送信される各行につき1回です。 すべての行が送信された後、結果セット<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>の末尾を示すために、メソッドの呼び出しが必要になります。  
  
   
  
## Examples  
 次の例では、 <xref:Microsoft.SqlServer.Server.SqlDataRecord>新しい<xref:Microsoft.SqlServer.Server.SqlMetaData>とを作成します。 次に、メソッドを使用して<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>結果セットの先頭をマークし、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>メソッドを使用してデータの例を含むレコードをクライアントに送り返し、結果セットの末尾<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>をメソッドでマークします。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="record" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> メソッドがまだ呼び出されていません。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsStart : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsStart record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">メタデータを抽出し、結果セットを記述するための <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> オブジェクト。</param>
        <summary>クライアントに返す結果セットの先頭を宣言し、record パラメーターを使用して結果セットを表すメタデータを構築します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 マネージストアドプロシージャは、を<xref:System.Data.SqlClient.SqlDataReader>実装していないクライアントに結果セットを送信できます。 このメソッドは、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>およびと共に、ストアドプロシージャによるクライアントへのカスタム結果セットの送信を許可し<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>ます。  
  
 メソッド<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>は、結果セットの先頭をマークし、record パラメーターを使用して、結果セットを記述するメタデータを作成します。 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>メソッドを使用して送信される後続のすべての行は、そのメタデータ定義と一致している必要があります。  
  
 を呼び出し<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>た後は、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>および<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>のみを呼び出すことができます。 同じインスタンス<xref:Microsoft.SqlServer.Server.SqlPipe>内のその他のメソッドは、 <xref:System.InvalidOperationException>をスローします。 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>は、他のメソッドを呼び出すことができる初期状態に戻します。 <xref:Microsoft.SqlServer.Server.SqlPipe>  
  
 CLR 実行から Transact-sql に制御が戻った後は、CLR メモリに初期化された静的またはローカル変数を使用しないようにしてください。 たとえば、インプロセスクラス`SQLDataRecord`のインスタンスを格納しないでください。たとえば、CLR から制御が返された後に使用されます。 1つの例外`SQLMetaData`は in process クラスです。  
  
   
  
## Examples  
 次の例では、 <xref:Microsoft.SqlServer.Server.SqlDataRecord>新しい<xref:Microsoft.SqlServer.Server.SqlMetaData>とを作成します。 次に、メソッドを使用して<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>結果セットの先頭をマークし、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>メソッドを使用してデータの例を含むレコードをクライアントに送り返し、結果セットの末尾<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>をメソッドでマークします。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="record" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="record" /> に列が含まれていないか、初期化されていません。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> メソッドの後で、<see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> と <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> のいずれにも該当しないメソッドが呼び出されました。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>
