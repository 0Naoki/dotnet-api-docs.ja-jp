<Type Name="StructLayoutAttribute" FullName="System.Runtime.InteropServices.StructLayoutAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c87a593268ad97f7d5f0a2129858a96f222a58cb" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52192474" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class StructLayoutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StructLayoutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.StructLayoutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StructLayoutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class StructLayoutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type StructLayoutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>メモリ内のクラスまたは構造体のデータ フィールドの物理的なレイアウトを制御できます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この属性は、クラスまたは構造体に適用できます。  
  
 共通言語ランタイムは、クラスまたは構造体のマネージ メモリのデータ フィールドの物理的なレイアウトを制御します。 ただし、アンマネージ コードに、型を渡した場合を使えば、<xref:System.Runtime.InteropServices.StructLayoutAttribute>型の非管理対象のレイアウトを制御する属性。 属性を使用<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>を強制的に表示される順序で順番にレイアウトするメンバー。 Blittable 型は、の<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>両方のマネージ メモリでレイアウトとアンマネージ メモリ内のレイアウトを制御します。 Blittable 型の場合は、アンマネージ コードにマーシャ リングは、マネージ メモリにレイアウトを制御しませんクラスまたは構造体とレイアウトを制御します。 属性を使用<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>を各データ メンバーの正確な位置を制御します。 これは、blittable 型と非 blittable 型のマネージ コードとアンマネージの両方のレイアウトに影響します。 使用して<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>を使用することが必要です、<xref:System.Runtime.InteropServices.FieldOffsetAttribute>型内の各フィールドの位置を示す属性です。  
  
 C#、Visual Basic、および C++ コンパイラの適用、<xref:System.Runtime.InteropServices.LayoutKind.Sequential>既定で構造体へのレイアウト値。 クラスについては、適用する必要があります、<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>値を明示的にします。 [Tlbimp.exe (タイプ ライブラリ インポーター)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)も適用されます、<xref:System.Runtime.InteropServices.StructLayoutAttribute>属性は常に適用されます、<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>タイプ ライブラリをインポートするときの値します。  
  
   
  
## Examples  
 次の例では、管理対象の宣言、`GetSystemTime`関数を定義します`MySystemTime`クラス<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>レイアウト。 `GetSystemTime` システム時刻を取得し、コンソールに出力します。  
  
 [!code-cpp[StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/StructLayoutAttribute/CPP/structlayoutattribute.cpp#1)]
 [!code-csharp[StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/CS/structlayoutattribute.cs#1)]
 [!code-vb[StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StructLayoutAttribute/VB/structlayoutattribute.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe (タイプ ライブラリ インポーター)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (short layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(short layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : int16 -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="layoutKind">クラスまたは構造体を整列する方法を指定する <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 値の 1 つを表す 16 ビット整数。</param>
        <summary>指定した <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターは、基になる 16 ビット整数を表す各<xref:System.Runtime.InteropServices.LayoutKind>列挙型のメンバー。 [Tlbimp.exe (タイプ ライブラリ インポーター)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)このコンス トラクターを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
        <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe (タイプ ライブラリ インポーター)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(System::Runtime::InteropServices::LayoutKind layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : System.Runtime.InteropServices.LayoutKind -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Runtime.InteropServices.LayoutKind" />
      </Parameters>
      <Docs>
        <param name="layoutKind">クラスまたは構造体を整列させる方法を指定する列挙値の 1 つ。</param>
        <summary>指定した <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 読み取り可能のコードでエラーが発生しにくくなりましたが、常にこのコンス トラクターを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クラス内の文字列データ フィールドを既定で <see langword="LPWSTR" /> または <see langword="LPSTR" /> としてマーシャリングするかどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、`CharSet`にフィールドが設定されている<xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType>、すべての文字列引数が Unicode 文字に変換 (`LPWSTR`) 非管理対象の実装に渡される前にします。 フィールドに設定されている場合<xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType>、文字列を ANSI 文字列に変換されます (`LPSTR`)。 場合、`CharSet`にフィールドが設定されている<xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType>変換ではプラットフォームに依存する (Windows 98 と Windows Me、およびそれ以降のバージョンでは Unicode では ANSI)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public int Pack;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Pack" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberSignature Language="VB.NET" Value="Public Pack As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Pack;" />
      <MemberSignature Language="F#" Value="val mutable Pack : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メモリ内のクラスまたは構造体のデータ フィールドのアライメントを制御します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>フィールドがメモリ内の型のフィールドのアラインメントを制御します。  両方に影響<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>と<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>します。 既定では、値は、既定のパッキング サイズは現在のプラットフォームを示す、0 が。 値<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>0、1、2、4、8、16、32、64、または 128 にする必要があります。  
  
 型のインスタンスのフィールドを配置するには、次の規則を使用しています。  
  
-   型のアラインメントは、最大の要素のサイズになります (1、2、4、8、バイト) または指定したパッキング サイズの小さい方します。  
  
-   各フィールドは、独自のサイズのフィールドを連携する必要があります (1、2、4、8 などのバイト数) または型のアラインメント小さい方です。  型の既定の配置がその他のすべてのフィールドの長さ以上、その最大の要素のサイズであるため、つまり、通常のサイズを使用してフィールドを配置することです。 8 場合でも、型の最大サイズのフィールドは、64 ビット (8 バイト) の整数またはパック フィールドを設定するなど、<xref:System.Byte>フィールドが 1 バイト境界に合わせて配置<xref:System.Int16>フィールドが 2 バイト境界に合わせて配置と<xref:System.Int32>フィールドは、4 バイト境界に配置します。  
  
-   アラインメントの要件を満たすためにフィールドの間の余白が追加されます。  
  
 たとえば、次の構造は、2 つから成る<xref:System.Byte>フィールドと 1 つ<xref:System.Int32>フィールドに、さまざまな値と共に使用するときに、<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>フィールド。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex0.cs#1)]  
  
> [!IMPORTANT]
>  C# の例を正常にコンパイルすることを指定する必要があります、`/unsafe`コンパイラ スイッチ。  
  
 既定のパッキング サイズを指定すると、構造体のサイズは 8 バイトになります。 2 バイトは、バイトが 1 バイト境界に合わせて配置する必要がありますので、最初の 2 バイトのメモリを占有します。 型の既定の配置は 4 バイトで、その最大フィールドのサイズであるため、 `i3`、2 つのバイトの整数フィールドの後に埋め込みがあります。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex1.cs#2)]  
  
 場合<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設定が 2 には、構造体のサイズは 6 バイトです。 としてする前に、2 つのバイトを占有するメモリの最初の 2 バイト。 フィールドは、2 バイト境界に今すぐ配置、ために、2 番目のバイト、整数の間の余白はありません。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex2.cs#3)]  
  
 場合<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設定されている構造体のサイズでは 4 には、既定では、型の配置がその最大サイズのフィールドのサイズによって定義されていると同じ`i3`4 であります。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex3.cs#4)]  
  
 場合<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設定は、8、構造体のサイズが、まだのため、既定値と同じ場合、`i3`フィールドはパック フィールドで指定された 8 バイト境界より小さい 4 バイト境界に揃えて配置します。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex4.cs#5)]  
  
 別の例を実行するには、次の構造は、2 バイト フィールド、1 つの 32 ビット符号付き整数フィールド、1 つの 1 つの要素のバイト配列、および 10 進値から成るを検討します。 既定のパッキング サイズでは、構造体のサイズは、28 バイトです。 2 バイトは、最初の 2 バイトの 2 バイトの後に、整数の余白の後にメモリを占有します。 次には、3 バイトの余白の後に、1 バイトの配列。 最後に、<xref:System.Decimal>フィールド、d5 は、10 進値は 4 つの 4 バイト境界に配置<xref:System.Int32>、アラインメントは、最大のサイズに基づいているため、フィールドのサイズではなく、そのフィールドの<xref:System.Decimal>全体の構造体。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex5.cs#6)]  
  
 場合<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設定が 2 には、構造体のサイズは 24 バイトです。 既定の配置とは、2 バイト、整数の間の余白の 2 バイトを型のアラインメントが 2 ではなく 4 ために削除されています。 次の 3 つのバイトの後に埋め込み`a4`ため、埋め込みの 1 バイトに置き換えられている`d5`を 4 バイト境界ではなく、2 バイト境界に揃えるようになりました。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex6.cs#7)]  
  
 場合<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設定は、8、構造体のサイズと同じ既定では、この構造体のすべてのアラインメント要件は 8 未満であるためです。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex7.cs#8)]  
  
 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>フィールドは、ディスクの中に構造体がエクスポートされ、ネットワーク書き込み操作時に頻繁に使用します。 フィールドは、プラットフォームの中には使用も頻繁に呼び出すと相互運用機能の操作。  
  
 場合によっては、フィールドは、厳密なパッキング サイズを生成することのメモリ要件の縮小に使用されます。 ただし、この使用法は、実際のハードウェアの制約の慎重に検討する必要があります、実際にパフォーマンスが低下する可能性があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Size" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberSignature Language="VB.NET" Value="Public Size As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Size;" />
      <MemberSignature Language="F#" Value="val mutable Size : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クラスまたは構造体の絶対サイズを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このフィールドは、クラスまたは構造体のメンバーのバイト単位の合計サイズ以上にする必要があります。 このフィールドは、主にコンパイラの作成者が、直接アンマネージ アクセス用の構造で占有されるメモリを拡張するためです。 たとえば、メタデータで直接表されない共用体を使用する場合は、このフィールドを使用することができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.LayoutKind Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As LayoutKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::LayoutKind Value { System::Runtime::InteropServices::LayoutKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : System.Runtime.InteropServices.LayoutKind" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.LayoutKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クラスまたは構造体を整列する方法を指定する <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 値を取得します。</summary>
        <value>クラスまたは構造体を整列する方法を指定する列挙値の 1 つ。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>