<Type Name="StructLayoutAttribute" FullName="System.Runtime.InteropServices.StructLayoutAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="34be8492f463b278983485994e764ce595977dbb" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36537514" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class StructLayoutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StructLayoutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.StructLayoutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StructLayoutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class StructLayoutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type StructLayoutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e1513-101">メモリ内のクラスまたは構造体のデータ フィールドの物理的なレイアウトを制御できます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e1513-101">Lets you control the physical layout of the data fields of a class or structure in memory.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1513-102">この属性は、クラスまたは構造体に適用できます。</span><span class="sxs-lookup"><span data-stu-id="e1513-102">You can apply this attribute to classes or structures.</span></span>  
  
 <span data-ttu-id="e1513-103">共通言語ランタイムは、クラスまたは構造体のマネージ メモリのデータ フィールドの物理的なレイアウトを制御します。</span><span class="sxs-lookup"><span data-stu-id="e1513-103">The common language runtime controls the physical layout of the data fields of a class or structure in managed memory.</span></span> <span data-ttu-id="e1513-104">ただし、アンマネージ コードに、型を渡す場合は、使用できます、<xref:System.Runtime.InteropServices.StructLayoutAttribute>アンマネージ型のレイアウトを制御する属性。</span><span class="sxs-lookup"><span data-stu-id="e1513-104">However, if you want to pass the type to unmanaged code, you can use the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute to control the unmanaged layout of the type.</span></span> <span data-ttu-id="e1513-105">指定された属性で<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>出現する順序で順番にレイアウトされるメンバーを強制的にします。</span><span class="sxs-lookup"><span data-stu-id="e1513-105">Use the attribute with <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> to force the members to be laid out sequentially in the order they appear.</span></span> <span data-ttu-id="e1513-106">では、<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>両方のマネージ メモリ内レイアウトとアンマネージ メモリ内のレイアウトを制御します。</span><span class="sxs-lookup"><span data-stu-id="e1513-106">For , <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> controls both the layout in managed memory and the layout in unmanaged memory.</span></span> <span data-ttu-id="e1513-107">Blittable 型の場合は、アンマネージ コードにマーシャ リングは、マネージ メモリにレイアウトを制御しませんクラスまたは構造体とレイアウトを制御します。</span><span class="sxs-lookup"><span data-stu-id="e1513-107">For non-blittable types, it controls the layout when the class or structure is marshaled to unmanaged code, but does not control the layout in managed memory.</span></span> <span data-ttu-id="e1513-108">指定された属性で<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>各データ メンバーの正確な位置を制御します。</span><span class="sxs-lookup"><span data-stu-id="e1513-108">Use the attribute with <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> to control the precise position of each data member.</span></span> <span data-ttu-id="e1513-109">これは、blittable 型と非 blittable 型の両方の種類のマネージ コードとアンマネージの両方のレイアウトに影響します。</span><span class="sxs-lookup"><span data-stu-id="e1513-109">This affects both managed and unmanaged layout, for both blittable and non-blittable types.</span></span> <span data-ttu-id="e1513-110">使用して<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>を使用することが必要です、<xref:System.Runtime.InteropServices.FieldOffsetAttribute>型内の各フィールドの位置を示す属性です。</span><span class="sxs-lookup"><span data-stu-id="e1513-110">Using <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> requires that you use the <xref:System.Runtime.InteropServices.FieldOffsetAttribute> attribute to indicate the position of each field within the type.</span></span>  
  
 <span data-ttu-id="e1513-111">C#、Visual Basic、および C++ コンパイラの適用、<xref:System.Runtime.InteropServices.LayoutKind.Sequential>既定では構造体へのレイアウトの値。</span><span class="sxs-lookup"><span data-stu-id="e1513-111">C#, Visual Basic, and C++ compilers apply the <xref:System.Runtime.InteropServices.LayoutKind.Sequential> layout value to structures by default.</span></span> <span data-ttu-id="e1513-112">クラスについては、適用する必要があります、<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>明示的に値します。</span><span class="sxs-lookup"><span data-stu-id="e1513-112">For classes, you must apply the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> value explicitly.</span></span> <span data-ttu-id="e1513-113">[Tlbimp.exe (タイプ ライブラリ インポーター)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)も適用されます、<xref:System.Runtime.InteropServices.StructLayoutAttribute>属性以外の場合は、常に適用されます、<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>タイプ ライブラリをインポートするときの値します。</span><span class="sxs-lookup"><span data-stu-id="e1513-113">The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) also applies the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute; it always applies the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> value when it imports a type library.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1513-114">次の例でのマネージ宣言、`GetSystemTime`関数し、定義`MySystemTime`クラス<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>レイアウトです。</span><span class="sxs-lookup"><span data-stu-id="e1513-114">The following example demonstrates a managed declaration of the `GetSystemTime` function and defines `MySystemTime` class with <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> layout.</span></span> <span data-ttu-id="e1513-115">`GetSystemTime` システム時刻を取得し、コンソールに出力します。</span><span class="sxs-lookup"><span data-stu-id="e1513-115">`GetSystemTime` gets the system time and prints to the console.</span></span>  
  
 [!code-cpp[StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/StructLayoutAttribute/CPP/structlayoutattribute.cpp#1)]
 [!code-csharp[StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/CS/structlayoutattribute.cs#1)]
 [!code-vb[StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StructLayoutAttribute/VB/structlayoutattribute.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e1513-116">
            <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1513-116">Initalizes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (short layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(short layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : int16 -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="layoutKind">
          <span data-ttu-id="e1513-117">クラスまたは構造体を整列する方法を指定する <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 値の 1 つを表す 16 ビット整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1513-117">A 16-bit integer that represents one of the <see cref="T:System.Runtime.InteropServices.LayoutKind" /> values that specifes how the class or structure should be arranged.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1513-118">指定した <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1513-118">Initalizes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.LayoutKind" /> enumeration member.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1513-119">このコンス トラクターはそれぞれが表す基になる 16 ビット整数<xref:System.Runtime.InteropServices.LayoutKind>列挙体のメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e1513-119">This constructor takes an underlying 16-bit integer that represents each <xref:System.Runtime.InteropServices.LayoutKind> enumeration member.</span></span> <span data-ttu-id="e1513-120">[Tlbimp.exe (タイプ ライブラリ インポーター)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)このコンス トラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="e1513-120">The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) uses this constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(System::Runtime::InteropServices::LayoutKind layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : System.Runtime.InteropServices.LayoutKind -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Runtime.InteropServices.LayoutKind" />
      </Parameters>
      <Docs>
        <param name="layoutKind">
          <span data-ttu-id="e1513-121">クラスまたは構造体を整列させる方法を指定する列挙値の 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1513-121">One of the enumeration values that specifes how the class or structure should be arranged.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1513-122">指定した <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1513-122">Initalizes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.LayoutKind" /> enumeration member.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1513-123">読み取り可能なコードでエラーが発生しにくくなりました、常にこのコンス トラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="e1513-123">For readable code that is less prone to error, always use this constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1513-124">クラス内の文字列データ フィールドを既定で <see langword="LPWSTR" /> または <see langword="LPSTR" /> としてマーシャリングするかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1513-124">Indicates whether string data fields within the class should be marshaled as <see langword="LPWSTR" /> or <see langword="LPSTR" /> by default.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1513-125">場合、`CharSet`にフィールドが設定されている<xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType>、すべての文字列引数は Unicode 文字に変換 (`LPWSTR`) アンマネージの実装に渡される前にします。</span><span class="sxs-lookup"><span data-stu-id="e1513-125">If the `CharSet` field is set to <xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType>, all string arguments are converted to Unicode characters (`LPWSTR`) before they are passed to the unmanaged implementation.</span></span> <span data-ttu-id="e1513-126">フィールドに設定されている場合<xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType>、文字列が ANSI 文字列に変換されます (`LPSTR`)。</span><span class="sxs-lookup"><span data-stu-id="e1513-126">If the field is set to <xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType>, the strings are converted to ANSI strings (`LPSTR`).</span></span> <span data-ttu-id="e1513-127">場合、`CharSet`にフィールドが設定されている<xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType>変換がプラットフォームに依存する (Windows 98 および Windows Me、およびそれ以降のバージョンでは Unicode では ANSI)。</span><span class="sxs-lookup"><span data-stu-id="e1513-127">If the `CharSet` field is set to <xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType>, the conversion is platform-dependent (ANSI on Windows 98 and Windows Me, and Unicode on later versions).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public int Pack;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Pack" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberSignature Language="VB.NET" Value="Public Pack As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Pack;" />
      <MemberSignature Language="F#" Value="val mutable Pack : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1513-128">メモリ内のクラスまたは構造体のデータ フィールドのアライメントを制御します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1513-128">Controls the alignment of data fields of a class or structure in memory.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1513-129"><xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>フィールドは、メモリ内の型のフィールドのアラインメントを制御します。</span><span class="sxs-lookup"><span data-stu-id="e1513-129">The <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> field controls the alignment of a type's fields in memory.</span></span>  <span data-ttu-id="e1513-130">これは、影響を受ける両方<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>と<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="e1513-130">It affects both <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e1513-131">既定では、値は 0、既定のパッキング サイズが現在のプラットフォームがします。</span><span class="sxs-lookup"><span data-stu-id="e1513-131">By default, the value is 0, indicating the default packing size for the current platform.</span></span> <span data-ttu-id="e1513-132">値<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>0、1、2、4、8、16、32、64、または 128 にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1513-132">The value of <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> must be 0, 1, 2, 4, 8, 16, 32, 64, or 128:</span></span>  
  
 <span data-ttu-id="e1513-133">型のインスタンスのフィールドは、次の規則を使用して配置します。</span><span class="sxs-lookup"><span data-stu-id="e1513-133">The fields of a type instance are aligned by using the following rules:</span></span>  
  
-   <span data-ttu-id="e1513-134">型のアラインメントは、最大の要素のサイズ (1、2、4、8 などのバイト数) または指定したパッキング サイズは、小さい方です。</span><span class="sxs-lookup"><span data-stu-id="e1513-134">The alignment of the type is the size of its largest element (1, 2, 4, 8, etc., bytes) or the specified packing size, whichever is smaller.</span></span>  
  
-   <span data-ttu-id="e1513-135">各フィールドは、独自のサイズのフィールドに従う必要があります (1、2、4、8 などのバイト数) または型のアラインメント小さい方です。</span><span class="sxs-lookup"><span data-stu-id="e1513-135">Each field must align with fields of its own size (1, 2, 4, 8, etc., bytes) or the alignment of the type, whichever is smaller.</span></span>  <span data-ttu-id="e1513-136">その他のすべてのフィールドの長さ以上では、その最大要素のサイズである型の既定の配置は通常のサイズを使用してフィールドを配置すること。</span><span class="sxs-lookup"><span data-stu-id="e1513-136">Because the default alignment of the type is the size of its largest element, which is greater than or equal to all other field lengths, this usually means that fields are aligned by their size.</span></span> <span data-ttu-id="e1513-137">たとえば、型の最大サイズのフィールドが、64 ビット (8 バイト) の整数または Pack フィールド場合でもは 8 に設定、<xref:System.Byte>フィールドが 1 バイト境界に整列<xref:System.Int16>フィールドが 2 バイト境界上に配置と<xref:System.Int32>フィールドが 4 バイト境界に配置します。</span><span class="sxs-lookup"><span data-stu-id="e1513-137">For example, even if the largest field in a type is a 64-bit (8-byte) integer or the Pack field is set to 8, <xref:System.Byte> fields align on 1-byte boundaries, <xref:System.Int16> fields align on 2-byte boundaries, and <xref:System.Int32> fields align on 4-byte boundaries.</span></span>  
  
-   <span data-ttu-id="e1513-138">アラインメント要件を満たすためにフィールド間の余白が追加されます。</span><span class="sxs-lookup"><span data-stu-id="e1513-138">Padding is added between fields to satisfy the alignment requirements.</span></span>  
  
 <span data-ttu-id="e1513-139">たとえば、次の構造は、2 から成る<xref:System.Byte>フィールドと 1 つ<xref:System.Int32>フィールドに、さまざまな値を使用する場合、<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1513-139">For example, consider the following structure, which consists of two <xref:System.Byte> fields and one <xref:System.Int32> field, when it is used with various values for the <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> field.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex0.cs#1)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="e1513-140">C# の例を正常にコンパイルする必要がありますを指定する、`/unsafe`コンパイラ スイッチ。</span><span class="sxs-lookup"><span data-stu-id="e1513-140">To successfully compile the C# examples, you must specify the `/unsafe` compiler switch.</span></span>  
  
 <span data-ttu-id="e1513-141">既定のパッキング サイズを指定する場合、構造体のサイズは 8 バイトになります。</span><span class="sxs-lookup"><span data-stu-id="e1513-141">If you specify the default packing size, the size of the structure is 8 bytes.</span></span> <span data-ttu-id="e1513-142">2 バイトは、バイトが 1 バイト境界に配置する必要がありますので、メモリの最初の 2 バイトを占有します。</span><span class="sxs-lookup"><span data-stu-id="e1513-142">The two bytes occupy the first two bytes of memory, because bytes must align on one-byte boundaries.</span></span> <span data-ttu-id="e1513-143">型の既定のアラインメントは 4 バイトで、その最大フィールドのサイズであるため`i3`、2 つのバイトのパディングの後に、整数フィールドがあります。</span><span class="sxs-lookup"><span data-stu-id="e1513-143">Because the default alignment of the type is 4 bytes, which is the size of its largest fields, `i3`, there are two bytes of padding followed by the integer field.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex1.cs#2)]  
  
 <span data-ttu-id="e1513-144">場合<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設定が 2 には構造体のサイズは 6 バイトです。</span><span class="sxs-lookup"><span data-stu-id="e1513-144">If <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> is set to 2, the size of the structure is 6 bytes.</span></span> <span data-ttu-id="e1513-145">としてする前に、2 つのバイトを占有するメモリの最初の 2 バイト。</span><span class="sxs-lookup"><span data-stu-id="e1513-145">As before, the two bytes occupy the first two bytes of memory.</span></span> <span data-ttu-id="e1513-146">フィールドが 2 バイト境界に一致するようになりました、ために、2 番目のバイトと整数間の余白はありません。</span><span class="sxs-lookup"><span data-stu-id="e1513-146">Because fields now align on 2-byte boundaries, there is no padding between the second byte and the integer.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex2.cs#3)]  
  
 <span data-ttu-id="e1513-147">場合<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設定されている構造体のサイズでは 4 には、既定では、型のアラインメントは、その最大サイズのフィールドのサイズによって定義されている、場合と同じ`i3`は 4 です。</span><span class="sxs-lookup"><span data-stu-id="e1513-147">If <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> is set to 4, the size of the structure is the same as in the default case, where the type's alignment was defined by the size of its largest field, `i3`, which is 4.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex3.cs#4)]  
  
 <span data-ttu-id="e1513-148">場合<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設定されている構造体のサイズが静止画は、8、既定のものと同じ大文字と小文字、ため、`i3`フィールドがパック フィールドで指定した 8 バイト境界よりも小さい、4 バイトの境界に配置します。</span><span class="sxs-lookup"><span data-stu-id="e1513-148">If <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> is set to 8, the size of the structure is the still same as in the default case, because the `i3` field aligns on a 4-byte boundary, which is smaller than the 8-byte boundary specified by the Pack field.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex4.cs#5)]  
  
 <span data-ttu-id="e1513-149">別の例を実行するには、次の構造は、2 バイトのフィールド、1 つの 32 ビット符号付き整数フィールド、1 つの単一要素のバイト配列、および 10 進値で構成を検討します。</span><span class="sxs-lookup"><span data-stu-id="e1513-149">To take another example, consider the following structure, which consists of two byte fields, one 32-bit signed integer field, one single-element byte array, and a decimal value.</span></span> <span data-ttu-id="e1513-150">既定のパッキング サイズは、構造体のサイズは、28 バイトです。</span><span class="sxs-lookup"><span data-stu-id="e1513-150">With the default packing size, the size of the structure is 28 bytes.</span></span> <span data-ttu-id="e1513-151">2 バイトでは、メモリ、2 つのバイトのパディング、整数の後に続く最初の 2 バイトを占有します。</span><span class="sxs-lookup"><span data-stu-id="e1513-151">The two bytes occupy the first two bytes of memory, followed by two bytes of padding, followed by the integer.</span></span> <span data-ttu-id="e1513-152">次は、次の 3 つのバイトのパディングを続けて 1 バイト配列。</span><span class="sxs-lookup"><span data-stu-id="e1513-152">Next is the one-byte array, followed by three bytes of padding.</span></span> <span data-ttu-id="e1513-153">最後に、 <xref:System.Decimal> 4 つの 10 進値を構成するために、フィールド、d5 が 4 バイト境界に配置<xref:System.Int32>ため、そのアラインメントは、最大のサイズに基づいて、フィールドのサイズではなく、そのフィールドの<xref:System.Decimal>全体構造体。</span><span class="sxs-lookup"><span data-stu-id="e1513-153">Finally, the <xref:System.Decimal> field, d5, aligns on a 4-byte boundary because a decimal value consists of four <xref:System.Int32> fields, so its alignment is based on the size of the largest of its fields rather than on the size of the <xref:System.Decimal> structure as a whole.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex5.cs#6)]  
  
 <span data-ttu-id="e1513-154">場合<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設定は、2、構造体のサイズはの 24 バイトです。</span><span class="sxs-lookup"><span data-stu-id="e1513-154">If <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> is set to 2, the size of the structure is 24 bytes.</span></span> <span data-ttu-id="e1513-155">既定の配置と比較して 2 バイトと整数間の余白の 2 バイトが削除されましたので、型のアラインメントは 2 ではなく、4。</span><span class="sxs-lookup"><span data-stu-id="e1513-155">In comparison with the default alignment, the two bytes of padding between the two bytes and the integer have been removed because the type's alignment is now 4 rather than 2.</span></span> <span data-ttu-id="e1513-156">次の 3 つのバイトの後に埋め込み`a4`に置換された 1 バイト、パディングのため`d5`4 バイト境界ではなく、2 バイト境界に整列ようになりました。</span><span class="sxs-lookup"><span data-stu-id="e1513-156">And the three bytes of padding after `a4` have been replaced by one byte of padding, since `d5` now aligns on a 2-byte boundary rather than a 4-byte boundary.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex6.cs#7)]  
  
 <span data-ttu-id="e1513-157">場合<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設定は、8、構造体のサイズは、場合と同じ既定の場合、この構造内のすべてのアラインメント要件が 8 未満であるためです。</span><span class="sxs-lookup"><span data-stu-id="e1513-157">If <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> is set to 8, the size of the structure is the same as in the default case, because all the alignment requirements in this structure are less than 8.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex7.cs#8)]  
  
 <span data-ttu-id="e1513-158"><xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>構造はディスクの中にエクスポートされ、ネットワーク書き込み操作時に、フィールドは頻繁に使用します。</span><span class="sxs-lookup"><span data-stu-id="e1513-158">The <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> field is frequently used when structures are exported during disk and network write operations.</span></span> <span data-ttu-id="e1513-159">プラットフォームの中にこのフィールドは使用も頻繁に呼び出すと相互運用操作します。</span><span class="sxs-lookup"><span data-stu-id="e1513-159">The field is also frequently used during platform invoke and interop operations.</span></span>  
  
 <span data-ttu-id="e1513-160">場合によっては、フィールドをより厳密なパッキング サイズを生成するメモリの要件を減らすために使用します。</span><span class="sxs-lookup"><span data-stu-id="e1513-160">Occasionally, the field is used to reduce memory requirements by producing a tighter packing size.</span></span> <span data-ttu-id="e1513-161">ただし、この使用法は、実際のハードウェアの制約の慎重に検討を必要とし、実際にパフォーマンスが低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1513-161">However, this usage requires careful consideration of actual hardware constraints, and may actually degrade performance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Size" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberSignature Language="VB.NET" Value="Public Size As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Size;" />
      <MemberSignature Language="F#" Value="val mutable Size : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1513-162">クラスまたは構造体の絶対サイズを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1513-162">Indicates the absolute size of the class or structure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1513-163">このフィールドは、(バイト単位) のクラスまたは構造体のメンバーの合計サイズは、以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1513-163">This field must be equal or greater than the total size, in bytes, of the members of the class or structure.</span></span> <span data-ttu-id="e1513-164">このフィールドは、主に、アンマネージの直接アクセスの構造で占有されるメモリを拡張するコンパイラ ライターです。</span><span class="sxs-lookup"><span data-stu-id="e1513-164">This field is primarily for compiler writers who want to extend the memory occupied by a structure for direct, unmanaged access.</span></span> <span data-ttu-id="e1513-165">たとえば、メタデータに直接表されない共用体を使用する場合は、このフィールドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e1513-165">For example, you can use this field when working with unions that are not represented in metadata directly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.LayoutKind Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As LayoutKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::LayoutKind Value { System::Runtime::InteropServices::LayoutKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : System.Runtime.InteropServices.LayoutKind" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.LayoutKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1513-166">クラスまたは構造体を整列する方法を指定する <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1513-166">Gets the <see cref="T:System.Runtime.InteropServices.LayoutKind" /> value that specifies how the class or structure is arranged.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1513-167">クラスまたは構造体を整列する方法を指定する列挙値の 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1513-167">One of the enumeration values that specifies how the class or structure is arranged.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>