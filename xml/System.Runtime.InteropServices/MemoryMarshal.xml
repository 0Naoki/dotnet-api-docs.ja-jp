<Type Name="MemoryMarshal" FullName="System.Runtime.InteropServices.MemoryMarshal">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c9bee59e8ded948e4d3f1729df63219d06920318" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51315202" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class MemoryMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MemoryMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.MemoryMarshal" />
  <TypeSignature Language="VB.NET" Value="Public Class MemoryMarshal" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryMarshal abstract sealed" />
  <TypeSignature Language="F#" Value="type MemoryMarshal = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="4b7e0-101">
        <see cref="T:System.Memory`1" />、<see cref="T:System.ReadOnlyMemory`1" />、<see cref="T:System.Span`1" />、<see cref="T:System.ReadOnlySpan`1" /> と相互運用するメソッドを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4b7e0-101">Provides methods to interoperate with <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />,  <see cref="T:System.Span`1" />, and  <see cref="T:System.ReadOnlySpan`1" />.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; AsBytes&lt;T&gt; (ReadOnlySpan&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As ReadOnlySpan(Of T)) As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static ReadOnlySpan&lt;System::Byte&gt; AsBytes(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; ReadOnlySpan&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-102">読み取り専用の範囲内の項目の種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-102">The type of items in the read-only span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="4b7e0-103">変換するソース スライス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-103">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-104">1 つのプリミティブ型 (<paramref name="T" />) の <see cref="T:System.ReadOnlySpan`1" /> を、<see langword="ReadOnlySpan&lt;Byte&gt;" /> にキャストします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-104">Casts a <see cref="T:System.ReadOnlySpan`1" /> of one primitive type, <paramref name="T" />, to a <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-105">
            <see cref="T:System.Byte" /> 型の読み取り専用スパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-105">A read-only span of type <see cref="T:System.Byte" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-106">`T` ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-106">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="4b7e0-107">`T` タイプ セーフを維持するために、実行時にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-107">`T` is checked at runtime in order to preserve type safety.</span></span>  

      ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b7e0-108">
            <paramref name="T" /> には参照またはポインターが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-108">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="4b7e0-109">新しい <see cref="T:System.ReadOnlySpan`1" /> の <see cref="P:System.ReadOnlySpan`1.Length" /> プロパティは <see cref="F:System.Int32.MaxValue" /> を超えます</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-109">The <see cref="P:System.ReadOnlySpan`1.Length" /> property of the new <see cref="T:System.ReadOnlySpan`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;byte&gt; AsBytes&lt;T&gt; (Span&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As Span(Of T)) As Span(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static Span&lt;System::Byte&gt; AsBytes(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : Span&lt;'T (requires 'T : struct)&gt; -&gt; Span&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-110">範囲内の項目の種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-110">The type of items in the span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="4b7e0-111">変換するソース スライス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-111">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-112">1 つのプリミティブ型 (<paramref name="T" />) の <see cref="T:System.Span`1" /> を、<see langword="Span&lt;Byte&gt;" /> にキャストします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-112">Casts a <see cref="T:System.Span`1" /> of one primitive type, <paramref name="T" />, to a <see langword="Span&lt;Byte&gt;" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-113">
            <see cref="T:System.Byte" /> 型のスパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-113">A span of type <see cref="T:System.Byte" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-114">`T` ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-114">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="4b7e0-115">`T` タイプ セーフを維持するために、実行時にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-115">`T` is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b7e0-116">
            <paramref name="T" /> には参照またはポインターが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-116">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="4b7e0-117">新しい <see cref="T:System.Span`1" /> の <see cref="P:System.Span`1.Length" /> プロパティは <see cref="F:System.Int32.MaxValue" /> を超えます</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-117">The <see cref="P:System.Span`1.Length" /> property of the new <see cref="T:System.Span`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsMemory(Of T) (memory As ReadOnlyMemory(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; AsMemory(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ReadOnlyMemory&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.AsMemory memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-118">読み取り専用メモリ バッファー内の項目の種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-118">The type of items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="4b7e0-119">読み取り専用メモリ バッファー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-119">The read-only memory buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-120">
            <see cref="T:System.ReadOnlyMemory`1" /> から <see cref="T:System.Memory`1" /> インスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-120">Creates a <see cref="T:System.Memory`1" /> instance from a <see cref="T:System.ReadOnlyMemory`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-121">
            <see cref="T:System.ReadOnlyMemory`1" /> と同じメモリを表すメモリ ブロック。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-121">A memory block that represetns the same memory as the <see cref="T:System.ReadOnlyMemory`1" /> .</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-122">このメソッドは、十分注意して使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-122">This method must be used with extreme caution.</span></span> <span data-ttu-id="4b7e0-123"><xref:System.ReadOnlyMemory%601> 変更不可のデータとその他のメモリに書き込むことができませんを表すために使用します。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-123"><xref:System.ReadOnlyMemory%601> is used to represent immutable data and other memory that is not meant to be written to.</span></span> <span data-ttu-id="4b7e0-124"><xref:System.Memory%601> このメソッドによって作成されたインスタンスは必要がありますには書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-124"><xref:System.Memory%601> instances created by this method should not be written to.</span></span> <span data-ttu-id="4b7e0-125">このメソッドの目的は、変数として型指定を許可する<xref:System.Memory%601>がのみを格納する読み取りの使用、<xref:System.ReadOnlyMemory%601>します。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-125">The purpose of this method is to allow variables typed as <xref:System.Memory%601> but only used for reading to store a <xref:System.ReadOnlyMemory%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (ReadOnlySpan&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.ReadOnlySpan`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As ReadOnlySpan(Of TFrom)) As ReadOnlySpan(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static ReadOnlySpan&lt;TTo&gt; Cast(ReadOnlySpan&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : ReadOnlySpan&lt;'From (requires 'From : struct)&gt; -&gt; ReadOnlySpan&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom">
          <span data-ttu-id="4b7e0-126">ソース スパンの種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-126">The type of the source span.</span>
          </span>
        </typeparam>
        <typeparam name="TTo">
          <span data-ttu-id="4b7e0-127">ターゲット スパンの種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-127">The type of the target span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="4b7e0-128">変換するソース スライス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-128">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-129">1 つのプリミティブ型の読み取り専用スパンを、別のプリミティブ型の読み取り専用スパンにキャストします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-129">Casts a read-only span of one primitive type to a read-only span of another primitive type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-130">変換された読み取り専用スパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-130">The converted read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-131">どちらも`TFrom`も`TTo`ポインターまたは参照を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-131">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="4b7e0-132">`TFrom` `TTo`タイプ セーフを維持するために、実行時にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-132">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="4b7e0-133">このメソッドがずれているメモリのアクセスをサポートするプラットフォームでのみサポートされているまたは他の方法で配置すると、メモリ ブロックします。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-133">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b7e0-134">
            <paramref name="TFrom" /> または <paramref name="TTo" /> には参照またはポインターが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-134">
              <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (Span&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.Span`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As Span(Of TFrom)) As Span(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static Span&lt;TTo&gt; Cast(Span&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : Span&lt;'From (requires 'From : struct)&gt; -&gt; Span&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom">
          <span data-ttu-id="4b7e0-135">ソース スパンの種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-135">The type of the source span.</span>
          </span>
        </typeparam>
        <typeparam name="TTo">
          <span data-ttu-id="4b7e0-136">ターゲット スパンの種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-136">The type of the target span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="4b7e0-137">変換するソース スライス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-137">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-138">1 つのプリミティブ型のスパンを、別のプリミティブ型のスパンにキャストします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-138">Casts a span of one primitive type to a span of another primitive type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-139">変換されたスパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-139">The converted span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-140">どちらも`TFrom`も`TTo`ポインターまたは参照を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-140">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="4b7e0-141">`TFrom` `TTo`タイプ セーフを維持するために、実行時にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-141">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="4b7e0-142">Unchecked コンテキストでキャストが行われます。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-142">The cast occurs in an unchecked context.</span></span> <span data-ttu-id="4b7e0-143">場合の範囲`TTo`の範囲より小さい`TFrom`、データ損失が発生することができます。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-143">If the range of `TTo` is less than the range of `TFrom`, data loss can occur.</span></span> <span data-ttu-id="4b7e0-144">たとえば場合、`TFrom`は<xref:System.Int64>、1 つの`ReadOnlySpan<Int32>`0x100001111110F0F の値と`TTo`は<xref:System.Int32>、結果の値は 11110F0F。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-144">For example, if `TFrom` is <xref:System.Int64>, one of the `ReadOnlySpan<Int32>` values is 0x100001111110F0F, and `TTo` is <xref:System.Int32>, the resulting value is 11110F0F.</span></span>

<span data-ttu-id="4b7e0-145">このメソッドがずれているメモリのアクセスをサポートするプラットフォームでのみサポートされているまたは他の方法で配置すると、メモリ ブロックします。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-145">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b7e0-146">
            <paramref name="TFrom" /> または <paramref name="TTo" /> には参照またはポインターが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-146">
              <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromPinnedArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; CreateFromPinnedArray&lt;T&gt; (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; CreateFromPinnedArray&lt;T&gt;(!!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromPinnedArray(Of T) (array As T(), start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; CreateFromPinnedArray(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="static member CreateFromPinnedArray : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray (array, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-147">配列の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-147">The type of the array.</span>
          </span>
        </typeparam>
        <param name="array">
          <span data-ttu-id="4b7e0-148">事前にピン留めされたソース配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-148">The pre-pinned source array.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="4b7e0-149">メモリ ブロックの開始位置を示す <paramref name="array" /> のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-149">The index of <paramref name="array" /> at which to begin the memory block.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="4b7e0-150">メモリ ブロックに含める項目の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-150">The number of items to include in the memory block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-151">
            <paramref name="start" /> インデックスで始まり <paramref name="length" /> 個の項目で構成される、事前にピン留めされたターゲット配列の一部に対する、新しいメモリ バッファーを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-151">Creates a new memory buffer over the portion of the pre-pinned target array beginning at the <paramref name="start" /> index and consisting of <paramref name="length" /> items.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-152">指定した <paramref name="array" /> の要素に対するメモリのブロック。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-152">A block of memory over the specified elements of <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="4b7e0-153">
            <paramref name="array" /> が <see langword="null" /> の場合、または <paramref name="start" /> と <paramref name="length" /> が 0 である場合、メソッドは <see cref="System.Memory`1.Length" /> 0 のインスタンス <see cref="T:System.Memory`1" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-153">If <paramref name="array" /> is <see langword="null" />, or if <paramref name="start" /> and <paramref name="length" /> are 0, the method returns a <see cref="T:System.Memory`1" /> instance of <see cref="System.Memory`1.Length" /> zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-154">このメソッドが呼び出され、その配列を中に固定解除することはできません前に、配列を固定する必要があります既に、<xref:System.Memory%601>から返されるバッファーが使用中でします。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-154">The array must already be pinned before this method is called, and that array must not be unpinned while the <xref:System.Memory%601> buffer that it returns is still in use.</span></span> <span data-ttu-id="4b7e0-155">ピンを外した配列にこのメソッドを呼び出すと、メモリの破損する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-155">Calling this method on an unpinned array could result in memory corruption.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException">
          <span data-ttu-id="4b7e0-156">
            <paramref name="array" /> は共変であり、<paramref name="array" /> の型は <paramref name="T[]" /> とまったく同じではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-156">
              <paramref name="array" /> is covariant, and the type of <paramref name="array" /> is not exactly <paramref name="T[]" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4b7e0-157">
            <paramref name="start" /> または終了インデックスは、0 から <see cref="P:System.Array.Length" /> までの範囲に含まれません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-157">The <paramref name="start" /> or the end index is not in the range of 0 to <see cref="P:System.Array.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReadOnlySpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; CreateReadOnlySpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateReadOnlySpan(Of T) (ByRef reference As T, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateReadOnlySpan :  * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-158">データ項目の種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-158">The type of the data items.</span>
          </span>
        </typeparam>
        <param name="reference">
          <span data-ttu-id="4b7e0-159">データへの参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-159">A reference to data.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="4b7e0-160">
            <paramref name="reference" /> に含まれる <paramref name="T" /> 要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-160">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-161">定期的なマネージド オブジェクトの一部に対する新しい読み取り専用スパンを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-161">Creates a new read-only span over a portion of a regular managed object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-162">読み取り専用スパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-162">A read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-163">このメソッドは、管理対象のオブジェクトの一部は、固定長配列を表している場合に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-163">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="4b7e0-164">このメソッドは、注意して使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-164">This method should be used with caution.</span></span> <span data-ttu-id="4b7e0-165">これは危険ですので、`length`引数はチェックされません。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-165">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="4b7e0-166">さらに、スパンに対応した言語で、返されたスパンの有効期間は安全のために検証されません。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-166">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; CreateSpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; CreateSpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpan(Of T) (ByRef reference As T, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Span&lt;T&gt; CreateSpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateSpan :  * int -&gt; Span&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateSpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-167">データ項目の種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-167">The type of the data items.</span>
          </span>
        </typeparam>
        <param name="reference">
          <span data-ttu-id="4b7e0-168">データへの参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-168">A reference to data.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="4b7e0-169">
            <paramref name="reference" /> に含まれる <paramref name="T" /> 要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-169">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-170">定期的なマネージド オブジェクトの一部に対する新しいスパンを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-170">Creates a new span over a portion of a regular managed object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-171">スパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-171">A span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-172">このメソッドは、管理対象のオブジェクトの一部は、固定長配列を表している場合に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-172">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="4b7e0-173">このメソッドは、注意して使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-173">This method should be used with caution.</span></span> <span data-ttu-id="4b7e0-174">これは危険ですので、`length`引数はチェックされません。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-174">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="4b7e0-175">さらに、スパンに対応した言語で、返されたスパンの有効期間は安全のために検証されません。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-175">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetReference&lt;T&gt; (ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As ReadOnlySpan(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : ReadOnlySpan&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-176">範囲内の項目の種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-176">The type of items in the span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="4b7e0-177">参照の取得元となる読み取り専用スパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-177">The read-only span from which the reference is retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-178">インデックス 0 にある読み取り専用スパンの要素の参照を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-178">Returns a reference to the element of the read-only span at index 0.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-179">インデックス 0 にある要素の参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-179">A reference to the element at index 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-180">読み取り専用の範囲が空の場合、このメソッドは、インデックス 0 位置にある要素が格納されている場所への参照を返します。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-180">If the read-only span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="4b7e0-181">このような参照が可能性がありますまたはできない可能性があります`null`します。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-181">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="4b7e0-182">ピン留めすると、返される参照を使用できますが、これは逆しない必要があります。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-182">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetReference&lt;T&gt; (Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As Span(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : Span&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-183">範囲内の項目の種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-183">The type of items in the span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="4b7e0-184">参照の取得元となるスパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-184">The span from which the reference is retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-185">インデックス 0 にあるスパンの要素の参照を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-185">Returns a reference to the element of the span at index 0.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-186">インデックス 0 にある要素の参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-186">A reference to the element at index 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-187">スパンが空の場合、このメソッドは、インデックス 0 位置にある要素が格納されている場所への参照を返します。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-187">If the span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="4b7e0-188">このような参照が可能性がありますまたはできない可能性があります`null`します。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-188">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="4b7e0-189">ピン留めすると、返される参照を使用できますが、これは逆しない必要があります。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-189">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read(Of T As Structure) (source As ReadOnlySpan(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T Read(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member Read : ReadOnlySpan&lt;byte&gt; -&gt; 'T (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-190">読み取り専用の範囲から取得する項目の種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-190">The type of the item to retrieve from the read-only span.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4b7e0-191">読み取り専用スパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-191">A read-only span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-192">型の構造体を読み取ります</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-192">Reads a structure of type</span>
          </span>
          <param name="T" />
          <span data-ttu-id="4b7e0-193">バイト型の読み取り専用スパンから。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-193">out of a read-only span of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-194">読み取り専用スパンから取得される構造体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-194">The structure retrieved from the read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-195">`T` ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-195">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="4b7e0-196">' 型の安全性を維持するために、実行時にチェックされています。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-196">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b7e0-197">
            <paramref name="T" /> には参照またはポインターが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-197">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <param name="source" />
          <span data-ttu-id="4b7e0-198">次よりも小さい値です</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-198">is smaller than</span>
          </span>
          <param name="T" />
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToEnumerable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; ToEnumerable&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; ToEnumerable&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToEnumerable(Of T) (memory As ReadOnlyMemory(Of T)) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ ToEnumerable(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member ToEnumerable : ReadOnlyMemory&lt;'T&gt; -&gt; seq&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.ToEnumerable memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-199">読み取り専用メモリ バッファー内の項目の種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-199">The type of the items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="4b7e0-200">読み取り専用メモリ バッファー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-200">A read-only memory buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-201">指定した読み取り専用メモリ バッファーの <see cref="T:System.Collections.Generic.IEnumerable`1" /> ビューを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-201">Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> view of the given read-only memory buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-202">次の列挙可能なビュー</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-202">An enumerable view of</span>
          </span>
          <param name="memory" />
          <span data-ttu-id="4b7e0-203">である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-203">.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-204">この方法により、型のパラメーターを必要とする既存の Api で使用される読み取り専用メモリ バッファー<xref:System.Collections.Generic.IEnumerable%601>します。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-204">This method allows a read-only memory buffer to be used in existing APIs that require a parameter of type <xref:System.Collections.Generic.IEnumerable%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetArray&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, out ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetArray&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] valuetype System.ArraySegment`1&lt;!!T&gt;&amp; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetArray(Of T) (memory As ReadOnlyMemory(Of T), ByRef segment As ArraySegment(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetArray(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] ArraySegment&lt;T&gt; % segment);" />
      <MemberSignature Language="F#" Value="static member TryGetArray : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetArray (memory, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-205">読み取り専用メモリ バッファー内の項目の種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-205">The type of items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="4b7e0-206">読み取り専用メモリ バッファー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-206">A read-only memory buffer.</span>
          </span>
        </param>
        <param name="segment">
          <span data-ttu-id="4b7e0-207">このメソッドが戻ると、基になる読み取り専用メモリ バッファーから取得した配列セグメントが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-207">When this method returns, contains the array segment retrieved from the underlying read-only memory buffer.</span>
          </span>
          <span data-ttu-id="4b7e0-208">メソッドが失敗した場合、メソッドは既定の配列セグメントを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-208">If the method fails, the method returns a default array segment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-209">基になるメモリ バッファーから配列セグメントの取得を試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-209">Tries to get an array segment from the underlying memory buffer.</span>
          </span>
          <span data-ttu-id="4b7e0-210">戻り値は、操作の成功を示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-210">The return value indicates the success of the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-211">メソッドの呼び出しが成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-211">
              <see langword="true" /> if the method call succeeds; <see langword="false" /> otherwise.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-212">読み取り専用メモリ バッファー内の項目の種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-212">The type of the items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <typeparam name="TManager">
          <span data-ttu-id="4b7e0-213">種類、<see cref="T:System.Buffers.MemoryManager`1" />を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-213">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="4b7e0-214">メモリ マネージャーを取得する対象の読み取り専用メモリ バッファー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-214">The read-only memory buffer for which to get the memory manager.</span>
          </span>
        </param>
        <param name="manager">
          <span data-ttu-id="4b7e0-215">メソッドが戻ると、次のマネージャー</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-215">When the method returns, the manager of</span>
          </span>
          <param name="memory" />
          <span data-ttu-id="4b7e0-216">である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-216">.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-217">基になる読み取り専用メモリ バッファーから <see cref="T:System.Buffers.MemoryManager`1" /> の取得を試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-217">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" /> from the underlying read-only memory buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-218">メソッドがメモリ マネージャーを取得した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-218">
              <see langword="true" /> if the method retrieved the memory manager; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager, out int start, out int length) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  *  *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-219">読み取り専用メモリ バッファー内の項目の種類。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-219">The type of the items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <typeparam name="TManager">
          <span data-ttu-id="4b7e0-220">種類、<see cref="T:System.Buffers.MemoryManager`1" />を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-220">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="4b7e0-221">メモリ マネージャーを取得する対象の読み取り専用メモリ バッファー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-221">The read-only memory buffer for which to get the memory manager.</span>
          </span>
        </param>
        <param name="manager">
          <span data-ttu-id="4b7e0-222">メソッドが戻ると、次のマネージャー</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-222">When the method returns, the manager of</span>
          </span>
          <param name="memory" />
          <span data-ttu-id="4b7e0-223">である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-223">.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="4b7e0-224">メソッドが戻ると、次の先頭からのオフセット</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-224">When the method returns, the offset from the start of the</span>
          </span>
          <param name="manager" />
          <span data-ttu-id="4b7e0-225">次のような</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-225">that the</span>
          </span>
          <param name="memory" />
          <span data-ttu-id="4b7e0-226">表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-226">represents.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="4b7e0-227">メソッドが戻ると、次の長さ</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-227">When the method returns, the length of the</span>
          </span>
          <param name="manager" />
          <span data-ttu-id="4b7e0-228">次のような</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-228">that the</span>
          </span>
          <param name="memory" />
          <span data-ttu-id="4b7e0-229">表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-229">represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-230">基になる読み取り専用メモリ バッファーから、<see cref="T:System.Buffers.MemoryManager`1" />、開始インデックス、長さの取得を試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-230">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" />, start index, and length from the underlying read-only memory buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-231">メソッドが成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-231">
              <see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetString">
      <MemberSignature Language="C#" Value="public static bool TryGetString (ReadOnlyMemory&lt;char&gt; memory, out string text, out int start, out int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetString(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, [out] string&amp; text, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetString (memory As ReadOnlyMemory(Of Char), ByRef text As String, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetString(ReadOnlyMemory&lt;char&gt; memory, [Runtime::InteropServices::Out] System::String ^ % text, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetString : ReadOnlyMemory&lt;char&gt; *  *  *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetString (memory, text, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="text" Type="System.String" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memory">
          <span data-ttu-id="4b7e0-232">文字のブロックを含む読み取り専用メモリ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-232">Read-only memory containing a block of characters.</span>
          </span>
        </param>
        <param name="text">
          <span data-ttu-id="4b7e0-233">メソッドが戻ると、文字列はメモリ バッファーに含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-233">When the method returns, the string contained in the memory buffer.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="4b7e0-234">次の開始位置</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-234">The starting location in</span>
          </span>
          <param name="text" />
          <span data-ttu-id="4b7e0-235">である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-235">.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="4b7e0-236">次の文字数</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-236">The number of characters in</span>
          </span>
          <param name="text" />
          <span data-ttu-id="4b7e0-237">である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-237">.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-238">
            <see langword="System.ReadOnlyMemory&lt;Char&gt;" /> から基になる文字列の取得を試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-238">Tries to get the underlying string from a <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-239">メソッドが基になる文字列の取得に成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-239">
              <see langword="true" /> if the method successfully retrieves the underlying string; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRead&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source, out T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRead&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRead(Of T As Structure) (source As ReadOnlySpan(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryRead(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryRead : ReadOnlySpan&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryRead (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-240">取得する構造体の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-240">The type of the structure to retrieve.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4b7e0-241">バイト型の読み取り専用スパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-241">A read-only span of bytes.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="4b7e0-242">メソッドが戻ると、次のインスタンス</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-242">When the method returns, an instance of</span>
          </span>
          <param name="T" />
          <span data-ttu-id="4b7e0-243">である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-243">.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-244">型の構造体の読み取りを試みます</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-244">Tries to read a structure of type</span>
          </span>
          <param name="T" />
          <span data-ttu-id="4b7e0-245">バイト型の読み取り専用スパンから。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-245">from a read-only span of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-246">メソッドが構造体のインスタンスの取得に成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-246">
              <see langword="true" /> if the method succeeds in retrieving an instance of the structure; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-247">`T` ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-247">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="4b7e0-248">' 型の安全性を維持するために、実行時にチェックされています。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-248">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b7e0-249">
            <paramref name="T" /> には参照またはポインターが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-249">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryWrite&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryWrite&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWrite&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWrite(Of T As Structure) (destination As Span(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryWrite(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member TryWrite : Span&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryWrite (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-250">構造体の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-250">The type of the structure.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="4b7e0-251">構造体を含むバイト型のスパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-251">The span of bytes to contain the structure.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="4b7e0-252">スパンに書き込まれる構造体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-252">The structure to be written to the span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-253">型の構造体の書き込みを試みます</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-253">Tries to writes a structure of type</span>
          </span>
          <param name="T" />
          <span data-ttu-id="4b7e0-254">バイト型のスパンへ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-254">into a span of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b7e0-255">書き込み操作が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-255">
              <see langword="true" /> if the write operation succeeded; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="4b7e0-256">スパンが含めるには小さすぎる場合、メソッドは <see langword="false" /> を返します</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-256">The method returns <see langword="false" /> if the span is too small to contain</span>
          </span>
          <param name="T" />
          <span data-ttu-id="4b7e0-257">である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-257">.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-258">`T` ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-258">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="4b7e0-259">' 型の安全性を維持するために、実行時にチェックされています。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-259">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b7e0-260">
            <paramref name="TFrom" /> または <paramref name="TTo" /> には参照またはポインターが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-260">
              <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write(Of T As Structure) (destination As Span(Of Byte), ByRef value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static void Write(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member Write : Span&lt;byte&gt; *  -&gt; unit (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4b7e0-261">構造体の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-261">The type of the structure.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="4b7e0-262">構造体を含むバイト型のスパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-262">The span of bytes to contain the structure.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="4b7e0-263">スパンに書き込まれる構造体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-263">The structure to be written to the span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b7e0-264">型の構造体を書き込みます</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-264">Writes a structure of type</span>
          </span>
          <param name="T" />
          <span data-ttu-id="4b7e0-265">バイト型のスパンへ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-265">into a span of bytes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="4b7e0-266">`T` ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-266">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="4b7e0-267">' 型の安全性を維持するために、実行時にチェックされています。</span><span class="sxs-lookup"><span data-stu-id="4b7e0-267">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b7e0-268">
            <paramref name="T" /> には参照またはポインターが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-268">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4b7e0-269">
            <paramref name="destination" /> は <paramref name="value" /> を含めるには小さすぎます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b7e0-269">
              <paramref name="destination" /> is too small to contain <paramref name="value" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>