<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="OutAttribute.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56a5f667aa9e088c1293983294fb45fd08504295c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a5f667aa9e088c1293983294fb45fd08504295c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>Indicates that data should be marshaled from callee back to caller.</source>
          <target state="translated">呼び出し先から呼び出し元へ、データをマーシャリングすることを示します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>You can apply this attribute to parameters.</source>
          <target state="translated">パラメーターには、この属性を適用することができます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph> is optional.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph>は省略可能です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>The attribute is supported for COM interop and platform invoke only.</source>
          <target state="translated">COM 相互運用属性はサポートされており、プラットフォーム呼び出しのみです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>In the absence of explicit settings, the interop marshaler assumes rules based on the parameter type, whether the parameter is passed by reference or by value, and whether the type is blittable or non-blittable.</source>
          <target state="translated">明示的な設定がない場合は、相互運用マーシャラーは、ルールは、型、参照またはによっての値にパラメーターが渡されるかどうか、および種類が blittable 型か非 blittable パラメーターに基づくものとします。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>For example, the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class is always assumed to be In/Out and an array of strings passed by value is assumed to be In.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph>クラスは常と見なされ、In/out、値によって渡された文字列の配列が内にあると見なされます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>Out-only behavior is never a default marshaling behavior for parameters.</source>
          <target state="translated">アウトのみの動作は、既定のパラメーターの動作をマーシャ リングではありません。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>You can apply the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph> to value and reference types passed by reference to change In/Out behavior to Out-only behavior, which is equivalent to using the <ph id="ph2">`out`</ph> keyword in C#.</source>
          <target state="translated">適用することができます、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph>を使用すると、出力専用の動作に送受信の動作を変更への参照によって渡される値と参照の型を<ph id="ph2">`out`</ph>c# のキーワードです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>For example, arrays passed by value, marshaled as In-only parameters by default, can be changed to Out-only.</source>
          <target state="translated">たとえば、値、既定でのみのパラメーターとしてマーシャ リングによって渡される配列は、Out のみに変更できます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>However, the behavior does not always provide expected semantics when the types include all-blittable elements or fields because the interop marshaler uses pinning.</source>
          <target state="translated">ただし、動作は常に必要なセマンティクス種類には、blittable 型のすべての要素が含まれてときやが提供されない相互運用マーシャラーは、ピン留めを使用するためのフィールドです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>If you do not care about passing data into the callee, Out-only marshaling can provide better performance for non-blittable types.</source>
          <target state="translated">呼び出し先にデータを渡す処理しない場合は、Out のみマーシャ リングと非 blittable 型のパフォーマンスが向上を指定できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>Combining the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.InAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph> is particularly useful when applied to arrays and formatted, non-blittable types.</source>
          <target state="translated">結合、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.InAttribute&gt;</ph>と<ph id="ph2">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph>は場合に特に便利ですが配列に適用され、非 blittable 型の形式です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>Callers see the changes a callee makes to these types only when you apply both attributes.</source>
          <target state="translated">呼び出し元がこれらの型には、呼び出し先で両方の属性を適用する場合にのみ、変更を参照してください。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>Since these types require copying during marshaling, you can use <ph id="ph1">&lt;xref:System.Runtime.InteropServices.InAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph> to reduce unnecessary copies.</source>
          <target state="translated">これらの型では、マーシャ リング中にコピーする必要あります、ために使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.InAttribute&gt;</ph>と<ph id="ph2">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph>を不要なコピーを減らすためにします。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>For more information on the effect of <ph id="ph1">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph> on marshaling behavior, see <bpt id="p1">[</bpt>Directional Attributes<ept id="p1">](http://msdn.microsoft.com/library/241ac5b5-928e-4969-8f58-1dbc048f9ea2)</ept>.</source>
          <target state="translated">影響の詳細については<ph id="ph1">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph>マーシャ リング動作で、次を参照してください。<bpt id="p1">[</bpt>方向属性<ept id="p1">](http://msdn.microsoft.com/library/241ac5b5-928e-4969-8f58-1dbc048f9ea2)</ept>です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>The following example shows how to apply the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.InAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph> to a platform invoke prototype that passes an array as a parameter.</source>
          <target state="translated">次の例に適用する方法を示しています、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.InAttribute&gt;</ph>と<ph id="ph2">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph>プラットフォーム呼び出しの配列をパラメーターとして渡しますプロトタイプ。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.OutAttribute">
          <source>The combination of directional attributes allows the caller to see the changes made by the callee.</source>
          <target state="translated">方向性のある属性の組み合わせにより、呼び出し元が呼び出し先によって行われた変更を確認します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.OutAttribute.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.OutAttribute" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.OutAttribute" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>