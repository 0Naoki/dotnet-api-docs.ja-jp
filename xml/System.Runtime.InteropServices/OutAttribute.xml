<Type Name="OutAttribute" FullName="System.Runtime.InteropServices.OutAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="885afe3e646339166ad260a0b8aea9a7488f92a8" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56385601" /></Metadata><TypeSignature Language="C#" Value="public sealed class OutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.OutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type OutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Parameter, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d98b1-101">呼び出し先から呼び出し元へ、データをマーシャリングすることを示します。</span><span class="sxs-lookup"><span data-stu-id="d98b1-101">Indicates that data should be marshaled from callee back to caller.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d98b1-102">パラメーターには、この属性を適用できます。</span><span class="sxs-lookup"><span data-stu-id="d98b1-102">You can apply this attribute to parameters.</span></span>  
  
 <span data-ttu-id="d98b1-103"><xref:System.Runtime.InteropServices.OutAttribute>は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="d98b1-103">The <xref:System.Runtime.InteropServices.OutAttribute> is optional.</span></span> <span data-ttu-id="d98b1-104">COM 相互運用属性はサポートされており、プラットフォーム呼び出しのみです。</span><span class="sxs-lookup"><span data-stu-id="d98b1-104">The attribute is supported for COM interop and platform invoke only.</span></span> <span data-ttu-id="d98b1-105">明示的な設定がない場合は、相互運用マーシャラーは、ルールは、型、パラメーターが渡される参照渡しまたは値渡しかどうかと、型は、blittable または blittable でないかどうか、パラメーターに基づくものとします。</span><span class="sxs-lookup"><span data-stu-id="d98b1-105">In the absence of explicit settings, the interop marshaler assumes rules based on the parameter type, whether the parameter is passed by reference or by value, and whether the type is blittable or non-blittable.</span></span> <span data-ttu-id="d98b1-106">たとえば、<xref:System.Text.StringBuilder>クラスが入力/出力を常と見なされ、値によって渡された文字列の配列にあると想定します。</span><span class="sxs-lookup"><span data-stu-id="d98b1-106">For example, the <xref:System.Text.StringBuilder> class is always assumed to be In/Out and an array of strings passed by value is assumed to be In.</span></span>  
  
 <span data-ttu-id="d98b1-107">アウトのみの動作は、既定のパラメーターの動作をマーシャ リングではありません。</span><span class="sxs-lookup"><span data-stu-id="d98b1-107">Out-only behavior is never a default marshaling behavior for parameters.</span></span> <span data-ttu-id="d98b1-108">適用することができます、<xref:System.Runtime.InteropServices.OutAttribute>を使用すると、アウトのみの動作に入力/出力の動作を変更する参照によって渡される値と参照型に、`out`キーワード (C#)。</span><span class="sxs-lookup"><span data-stu-id="d98b1-108">You can apply the <xref:System.Runtime.InteropServices.OutAttribute> to value and reference types passed by reference to change In/Out behavior to Out-only behavior, which is equivalent to using the `out` keyword in C#.</span></span> <span data-ttu-id="d98b1-109">たとえば、Out のみには、既定では、内のみのパラメーターとしてマーシャ リングの値によって渡された配列を変更できます。</span><span class="sxs-lookup"><span data-stu-id="d98b1-109">For example, arrays passed by value, marshaled as In-only parameters by default, can be changed to Out-only.</span></span> <span data-ttu-id="d98b1-110">ただし、動作は提供されない必要なセマンティクス、種類がすべて blittable 型の要素が含まれる場合や、相互運用マーシャラーは、ピン留めを使用するためのフィールドします。</span><span class="sxs-lookup"><span data-stu-id="d98b1-110">However, the behavior does not always provide expected semantics when the types include all-blittable elements or fields because the interop marshaler uses pinning.</span></span> <span data-ttu-id="d98b1-111">呼び出し先にデータを渡すことはしない場合は、アウトのみがマーシャ リングと非 blittable 型のパフォーマンス向上を提供できます。</span><span class="sxs-lookup"><span data-stu-id="d98b1-111">If you do not care about passing data into the callee, Out-only marshaling can provide better performance for non-blittable types.</span></span>  
  
 <span data-ttu-id="d98b1-112">結合、<xref:System.Runtime.InteropServices.InAttribute>と<xref:System.Runtime.InteropServices.OutAttribute>は場合に特に便利ですが配列に適用され、非 blittable 型を書式設定します。</span><span class="sxs-lookup"><span data-stu-id="d98b1-112">Combining the <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> is particularly useful when applied to arrays and formatted, non-blittable types.</span></span> <span data-ttu-id="d98b1-113">呼び出し元は、呼び出し先は、両方の属性を適用する場合にのみこれらの型が加える変更を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d98b1-113">Callers see the changes a callee makes to these types only when you apply both attributes.</span></span> <span data-ttu-id="d98b1-114">これらの型では、マーシャ リング中にコピーする必要があるために、使用できます<xref:System.Runtime.InteropServices.InAttribute>と<xref:System.Runtime.InteropServices.OutAttribute>不要なコピーを削減します。</span><span class="sxs-lookup"><span data-stu-id="d98b1-114">Since these types require copying during marshaling, you can use <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> to reduce unnecessary copies.</span></span>  
  
 <span data-ttu-id="d98b1-115">効果の詳細については<xref:System.Runtime.InteropServices.OutAttribute>マーシャ リング動作を参照してください。[方向属性](https://msdn.microsoft.com/library/241ac5b5-928e-4969-8f58-1dbc048f9ea2)します。</span><span class="sxs-lookup"><span data-stu-id="d98b1-115">For more information on the effect of <xref:System.Runtime.InteropServices.OutAttribute> on marshaling behavior, see [Directional Attributes](https://msdn.microsoft.com/library/241ac5b5-928e-4969-8f58-1dbc048f9ea2).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d98b1-116">次の例では、適用する方法を示しています、<xref:System.Runtime.InteropServices.InAttribute>と<xref:System.Runtime.InteropServices.OutAttribute>プラットフォーム呼び出しのプロトタイプをパラメーターとして配列を渡します。</span><span class="sxs-lookup"><span data-stu-id="d98b1-116">The following example shows how to apply the <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> to a platform invoke prototype that passes an array as a parameter.</span></span> <span data-ttu-id="d98b1-117">方向属性の組み合わせにより、呼び出し元が、呼び出し先によって行われた変更を確認します。</span><span class="sxs-lookup"><span data-stu-id="d98b1-117">The combination of directional attributes allows the caller to see the changes made by the callee.</span></span>  
  
 [!code-cpp[Interop InOutParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR/Interop InOutParameters/CPP/inout.cpp#1)]
 [!code-csharp[Interop InOutParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR/Interop InOutParameters/CS/inout.cs#1)]
 [!code-vb[Interop InOutParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Interop InOutParameters/VB/inout.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.InAttribute" />
    <altmember cref="T:System.Text.StringBuilder" />
    <related type="Article" href="~/docs/framework/interop/blittable-and-non-blittable-types.md"><span data-ttu-id="d98b1-118">Blittable 型と非 Blittable 型</span><span class="sxs-lookup"><span data-stu-id="d98b1-118">Blittable and Non-Blittable Types</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.OutAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d98b1-119"><see cref="T:System.Runtime.InteropServices.OutAttribute" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d98b1-119">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.OutAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>