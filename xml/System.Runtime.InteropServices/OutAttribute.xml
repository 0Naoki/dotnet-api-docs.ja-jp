<Type Name="OutAttribute" FullName="System.Runtime.InteropServices.OutAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6a5f667aa9e088c1293983294fb45fd08504295c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30478346" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.OutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Parameter, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="38eb5-101">呼び出し先から呼び出し元へ、データをマーシャリングすることを示します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="38eb5-101">Indicates that data should be marshaled from callee back to caller.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38eb5-102">パラメーターには、この属性を適用することができます。</span><span class="sxs-lookup"><span data-stu-id="38eb5-102">You can apply this attribute to parameters.</span></span>  
  
 <span data-ttu-id="38eb5-103"><xref:System.Runtime.InteropServices.OutAttribute>は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="38eb5-103">The <xref:System.Runtime.InteropServices.OutAttribute> is optional.</span></span> <span data-ttu-id="38eb5-104">COM 相互運用属性はサポートされており、プラットフォーム呼び出しのみです。</span><span class="sxs-lookup"><span data-stu-id="38eb5-104">The attribute is supported for COM interop and platform invoke only.</span></span> <span data-ttu-id="38eb5-105">明示的な設定がない場合は、相互運用マーシャラーは、ルールは、型、参照またはによっての値にパラメーターが渡されるかどうか、および種類が blittable 型か非 blittable パラメーターに基づくものとします。</span><span class="sxs-lookup"><span data-stu-id="38eb5-105">In the absence of explicit settings, the interop marshaler assumes rules based on the parameter type, whether the parameter is passed by reference or by value, and whether the type is blittable or non-blittable.</span></span> <span data-ttu-id="38eb5-106">たとえば、<xref:System.Text.StringBuilder>クラスは常と見なされ、In/out、値によって渡された文字列の配列が内にあると見なされます。</span><span class="sxs-lookup"><span data-stu-id="38eb5-106">For example, the <xref:System.Text.StringBuilder> class is always assumed to be In/Out and an array of strings passed by value is assumed to be In.</span></span>  
  
 <span data-ttu-id="38eb5-107">アウトのみの動作は、既定のパラメーターの動作をマーシャ リングではありません。</span><span class="sxs-lookup"><span data-stu-id="38eb5-107">Out-only behavior is never a default marshaling behavior for parameters.</span></span> <span data-ttu-id="38eb5-108">適用することができます、<xref:System.Runtime.InteropServices.OutAttribute>を使用すると、出力専用の動作に送受信の動作を変更への参照によって渡される値と参照の型を`out`c# のキーワードです。</span><span class="sxs-lookup"><span data-stu-id="38eb5-108">You can apply the <xref:System.Runtime.InteropServices.OutAttribute> to value and reference types passed by reference to change In/Out behavior to Out-only behavior, which is equivalent to using the `out` keyword in C#.</span></span> <span data-ttu-id="38eb5-109">たとえば、値、既定でのみのパラメーターとしてマーシャ リングによって渡される配列は、Out のみに変更できます。</span><span class="sxs-lookup"><span data-stu-id="38eb5-109">For example, arrays passed by value, marshaled as In-only parameters by default, can be changed to Out-only.</span></span> <span data-ttu-id="38eb5-110">ただし、動作は常に必要なセマンティクス種類には、blittable 型のすべての要素が含まれてときやが提供されない相互運用マーシャラーは、ピン留めを使用するためのフィールドです。</span><span class="sxs-lookup"><span data-stu-id="38eb5-110">However, the behavior does not always provide expected semantics when the types include all-blittable elements or fields because the interop marshaler uses pinning.</span></span> <span data-ttu-id="38eb5-111">呼び出し先にデータを渡す処理しない場合は、Out のみマーシャ リングと非 blittable 型のパフォーマンスが向上を指定できます。</span><span class="sxs-lookup"><span data-stu-id="38eb5-111">If you do not care about passing data into the callee, Out-only marshaling can provide better performance for non-blittable types.</span></span>  
  
 <span data-ttu-id="38eb5-112">結合、<xref:System.Runtime.InteropServices.InAttribute>と<xref:System.Runtime.InteropServices.OutAttribute>は場合に特に便利ですが配列に適用され、非 blittable 型の形式です。</span><span class="sxs-lookup"><span data-stu-id="38eb5-112">Combining the <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> is particularly useful when applied to arrays and formatted, non-blittable types.</span></span> <span data-ttu-id="38eb5-113">呼び出し元がこれらの型には、呼び出し先で両方の属性を適用する場合にのみ、変更を参照してください。</span><span class="sxs-lookup"><span data-stu-id="38eb5-113">Callers see the changes a callee makes to these types only when you apply both attributes.</span></span> <span data-ttu-id="38eb5-114">これらの型では、マーシャ リング中にコピーする必要あります、ために使用<xref:System.Runtime.InteropServices.InAttribute>と<xref:System.Runtime.InteropServices.OutAttribute>を不要なコピーを減らすためにします。</span><span class="sxs-lookup"><span data-stu-id="38eb5-114">Since these types require copying during marshaling, you can use <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> to reduce unnecessary copies.</span></span>  
  
 <span data-ttu-id="38eb5-115">影響の詳細については<xref:System.Runtime.InteropServices.OutAttribute>マーシャ リング動作で、次を参照してください。[方向属性](http://msdn.microsoft.com/library/241ac5b5-928e-4969-8f58-1dbc048f9ea2)です。</span><span class="sxs-lookup"><span data-stu-id="38eb5-115">For more information on the effect of <xref:System.Runtime.InteropServices.OutAttribute> on marshaling behavior, see [Directional Attributes](http://msdn.microsoft.com/library/241ac5b5-928e-4969-8f58-1dbc048f9ea2).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38eb5-116">次の例に適用する方法を示しています、<xref:System.Runtime.InteropServices.InAttribute>と<xref:System.Runtime.InteropServices.OutAttribute>プラットフォーム呼び出しの配列をパラメーターとして渡しますプロトタイプ。</span><span class="sxs-lookup"><span data-stu-id="38eb5-116">The following example shows how to apply the <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> to a platform invoke prototype that passes an array as a parameter.</span></span> <span data-ttu-id="38eb5-117">方向性のある属性の組み合わせにより、呼び出し元が呼び出し先によって行われた変更を確認します。</span><span class="sxs-lookup"><span data-stu-id="38eb5-117">The combination of directional attributes allows the caller to see the changes made by the callee.</span></span>  
  
 [!code-cpp[Interop InOutParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR/Interop InOutParameters/CPP/inout.cpp#1)]
 [!code-csharp[Interop InOutParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR/Interop InOutParameters/CS/inout.cs#1)]
 [!code-vb[Interop InOutParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Interop InOutParameters/VB/inout.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.InAttribute" />
    <altmember cref="T:System.Text.StringBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.OutAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="38eb5-118">
            <see cref="T:System.Runtime.InteropServices.OutAttribute" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="38eb5-118">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.OutAttribute" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>