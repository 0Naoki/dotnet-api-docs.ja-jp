<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DllImportAttribute.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac523e3cd02f7b0f8ccc396f11c5abc9af18628f6b7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23e3cd02f7b0f8ccc396f11c5abc9af18628f6b7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</source>
          <target state="translated">属性付きメソッドがアンマネージ ダイナミックリンク ライブラリ (DLL) によって静的エントリ ポイントとして公開されることを示します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You can apply this attribute to methods.</source>
          <target state="translated">メソッドには、この属性を適用することができます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute provides the information needed to call a function exported from an unmanaged DLL.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>属性は、アンマネージ DLL からエクスポートされた関数の呼び出しに必要な情報を提供します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>As a minimum requirement, you must supply the name of the DLL containing the entry point.</source>
          <target state="translated">最小要件として、エントリ ポイントを含んでいる DLL の名前を指定してください。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the <ph id="ph1">`Declare`</ph> statement.</source>
          <target state="translated">C# および C++ のメソッド定義に直接この属性を適用します。ただし、Visual Basic コンパイラは、この属性を使用するときに、<ph id="ph1">`Declare`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>For complex method definitions that include <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>, <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>, <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph>, or <ph id="ph6">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields, you apply this attribute directly to Visual Basic method definitions.</source>
          <target state="translated">含む複雑なメソッド定義の<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>、 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>、 <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>、 <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>、 <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph>、または<ph id="ph6">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph>フィールドを直接 Visual Basic のメソッドの定義にこの属性を適用します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> JScript does not support this attribute.</source>
          <target state="translated"><bpt id="p1">**</bpt>注<ept id="p1">**</ept>JScript では、この属性はサポートされません。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</source>
          <target state="translated">C# または Visual Basic のラッパー クラスを使用して、JScript プログラムからアンマネージ API のメソッドにアクセスすることができます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>For additional information about using the platform invoke service to access functions in unmanaged DLLs, see <bpt id="p1">[</bpt>Consuming Unmanaged DLL Functions<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.</source>
          <target state="translated">詳細については、プラットフォームを使用して呼び出しのアンマネージ Dll 関数にアクセスするサービスは、「<bpt id="p1">[</bpt>アンマネージ DLL 関数の使用<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> does not support marshaling of generic types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>はジェネリック型のマーシャ リングをサポートしていません。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">次のコード例を使用する方法を示しています、 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> Win32 をインポートする属性<ph id="ph2">`MessageBox`</ph>関数。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The code example then calls the imported method.</source>
          <target state="translated">コード例は、インポートされたメソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The name of the DLL that contains the unmanaged method.</source>
          <target state="translated">アンマネージ メソッドを格納する DLL の名前。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>This can include an assembly display name, if the DLL is included in an assembly.</source>
          <target state="translated">DLL がアセンブリに含まれている場合、これにはアセンブリの表示名を含めることができます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.DllImportAttribute" /&gt;</ph> class with the name of the DLL containing the method to import.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.DllImportAttribute" /&gt;</ph> クラスの新しいインスタンスを、インポートするメソッドを格納した DLL の名前を使用して初期化します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>If an unmanaged DLL file is included in an assembly, for example, by using the linker or the <ph id="ph1">`/linkresource`</ph> compiler option, you can specify the assembly display name as part of <ph id="ph2">`dllName`</ph>.</source>
          <target state="translated">アンマネージ DLL ファイルが含まれているアセンブリでは、たとえば、リンカーを使用している場合、または<ph id="ph1">`/linkresource`</ph>コンパイラ オプションの一部としてアセンブリの表示名を指定できます<ph id="ph2">`dllName`</ph>です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>For example, if an unmanaged DLL named <ph id="ph1">`unmanaged.dll`</ph> is included in a managed assembly named <ph id="ph2">`MyAssembly`</ph>, the attribute might be specified as shown in the following code.</source>
          <target state="translated">たとえば、名前付きアンマネージ DLL<ph id="ph1">`unmanaged.dll`</ph>という名前のマネージ アセンブリに含まれる<ph id="ph2">`MyAssembly`</ph>、次のコードに示すように、属性を指定する場合があります。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">次のコード例を使用する方法を示しています、 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> Win32 をインポートする属性<ph id="ph2">`MessageBox`</ph>関数。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The code example then calls the imported method.</source>
          <target state="translated">コード例は、インポートされたメソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</source>
          <target state="translated">Unicode 文字を ANSI 文字に変換するときの、最適マッピング動作のオン/オフを切り替えます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>If <ph id="ph1">`true`</ph>, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</source>
          <target state="translated">場合<ph id="ph1">`true`</ph>、最適マッピング動作が有効です。 それ以外の場合、最適マッピングが無効になっています。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> field is <ph id="ph2">`true`</ph> by default.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>フィールドは<ph id="ph2">`true`</ph>既定です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Settings for this field override the any level settings for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType&gt;</ph> attribute.</source>
          <target state="translated">このフィールドの設定のどのレベルの設定を上書きする、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</source>
          <target state="translated">共通言語ランタイムは、Windows 98 または Windows me で実行するアンマネージ メソッドに渡される Unicode 文字が管理している ANSI 文字に変換します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</source>
          <target state="translated">最適マッピングを使用すると、完全一致が存在しないときに近いの文字を指定する相互運用マーシャラーです。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</source>
          <target state="translated">たとえば、マーシャラー、Unicode 文字に変換著作権を ANSI 文字を使用するアンマネージ メソッドに対して 'c' です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Some characters lack a best-fit representation; these characters are called unmappable.</source>
          <target state="translated">一部の文字がない最適形式です。これらの文字といいます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Unmappable characters are usually converted to the default '?' ANSI character.</source>
          <target state="translated">マップできない文字が、既定値に変換する通常 '?'ANSI 文字です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Certain Unicode characters are converted to dangerous characters, such as the backslash '<ph id="ph1">\\</ph>' character, which can inadvertently change a path.</source>
          <target state="translated">特定の Unicode 文字は、円記号など、危険な文字に変換されます '<ph id="ph1">\\</ph>' 文字で、パスを不用意に変更できます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>By setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field to <ph id="ph2">`true`</ph>, you can signal the presence of an unmappable character to the caller by throwing an exception.</source>
          <target state="translated">設定して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph>フィールドを<ph id="ph2">`true`</ph>例外をスローして、呼び出し元にマップできない文字の存在を通知することができます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>You cannot change the default values provided by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</source>
          <target state="translated">によって提供される既定値を変更することはできません、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>と<ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph>フィールドのマネージ配列の要素を渡すことが ANSI 文字、または LPSTRs アンマネージのセーフ配列にします。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Best-fit mapping is always enabled and no exception is thrown.</source>
          <target state="translated">最適なマッピングが常に有効になっているし、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Be aware that this combination can compromise your security model.</source>
          <target state="translated">この組み合わせが、セキュリティ モデルを損なうことに注意してください。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">場合によっては、Visual Basic 開発者が使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>の代わりに、<ph id="ph2">`Declare`</ph>ステートメントでは、マネージ コードで DLL 関数を定義します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> field is one of those cases.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>フィールドは、このような場合のいずれか。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</source>
          <target state="translated">次の例は、最も制限の厳しい、適用する方法を示しています。 ANSI 文字セットを指定する、最適マッピングの動作を無効にすると、マップされていない Unicode 文字に例外をスローして文字のマッピングのセキュリティをプラットフォーム呼び出しメソッドの定義。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>Indicates the calling convention of an entry point.</source>
          <target state="translated">エントリ ポイントの呼び出し規約を示します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>You set this field to one of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CallingConvention&gt;</ph> enumeration members.</source>
          <target state="translated">このフィールドのいずれかを設定する、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.CallingConvention&gt;</ph>列挙型メンバー。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>The default value for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> field is <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CallingConvention.Winapi&gt;</ph>, which in turn defaults to <ph id="ph3">&lt;xref:System.Runtime.InteropServices.CallingConvention.StdCall&gt;</ph> convention.</source>
          <target state="translated">既定値、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>フィールドは<ph id="ph2">&lt;xref:System.Runtime.InteropServices.CallingConvention.Winapi&gt;</ph>が既定で使用する<ph id="ph3">&lt;xref:System.Runtime.InteropServices.CallingConvention.StdCall&gt;</ph>規則。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>For more information, see Calling Convention in the MSDN library.</source>
          <target state="translated">詳細については、MSDN ライブラリの呼び出し規約を参照してください。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">場合によっては、Visual Basic 開発者が使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>の代わりに、<ph id="ph2">`Declare`</ph>ステートメントでは、マネージ コードで DLL 関数を定義します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> field is one of those cases.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>フィールドは、このような場合のいずれか。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>System.Runtime.InteropServices.DllImportAttribute#1</source>
          <target state="translated">System.Runtime.InteropServices.DllImportAttribute#1</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>Indicates how to marshal string parameters to the method and controls name mangling.</source>
          <target state="translated">文字列パラメーターをメソッドにマーシャリングし、名前マングルを制御する方法を示します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>Use this field with a member of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</source>
          <target state="translated">メンバーを持つこのフィールドを使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph>文字列パラメーターのマーシャ リング動作を指定して、指定された正確な名前 ("A"または"W"で終わる名前) を呼び出すには、どのエントリ ポイント名を指定する列挙です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The default enumeration member for C# and Visual Basic is <ph id="ph1">`CharSet.Ansi`</ph> and the default enumeration member for C++ is <ph id="ph2">`CharSet.None`</ph>, which is equivalent to <ph id="ph3">`CharSet.Ansi`</ph>.</source>
          <target state="translated">C# および Visual Basic の既定の列挙体メンバーは<ph id="ph1">`CharSet.Ansi`</ph>と C++ の既定の列挙型メンバーが<ph id="ph2">`CharSet.None`</ph>と同じに<ph id="ph3">`CharSet.Ansi`</ph>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>In Visual Basic, you use the <ph id="ph1">`Declare`</ph> statement to specify the <ph id="ph2">`CharSet`</ph> field.</source>
          <target state="translated">Visual Basic では使用して、<ph id="ph1">`Declare`</ph>ステートメントを指定する、<ph id="ph2">`CharSet`</ph>フィールドです。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> field influences the behavior of the <ph id="ph2">`CharSet`</ph> field in determining which entry-point name to invoke.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>フィールドの動作に影響を与えます、<ph id="ph2">`CharSet`</ph>を呼び出すには、どのエントリ ポイント名を決定するフィールドです。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>For a detailed description and examples of the string marshaling and name matching behavior associated with the <ph id="ph1">`CharSet`</ph> field, see <bpt id="p1">[</bpt>Specifying a Character Set<ept id="p1">](~/docs/framework/interop/specifying-a-character-set.md)</ept>.</source>
          <target state="translated">詳細な説明と、文字列のマーシャ リングとに関連付けられている動作と一致する名前の例については、<ph id="ph1">`CharSet`</ph>フィールドを参照してください<bpt id="p1">[</bpt>文字セットの指定<ept id="p1">](~/docs/framework/interop/specifying-a-character-set.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">次のコード例を使用する方法を示しています、 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> Win32 をインポートする属性<ph id="ph2">`MessageBox`</ph>関数。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The code example then calls the imported method.</source>
          <target state="translated">コード例は、インポートされたメソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>Indicates the name or ordinal of the DLL entry point to be called.</source>
          <target state="translated">呼び出す DLL エントリ ポイントの名前または序数を指定します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</source>
          <target state="translated">エントリ ポイント名を指定するには、エントリ ポイントを含む DLL の名前を示す文字列を指定することによって、またはをその序数エントリ ポイントを識別することができます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>Ordinals are prefixed with the # sign, for example, #1.</source>
          <target state="translated">序数値には、たとえば、1、# 記号が付きます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>If you omit this field, the common language runtime uses the name of the.NET method marked with the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>.</source>
          <target state="translated">共通言語ランタイムとマークされた the.NET メソッドの名前を使用してこのフィールドを省略した場合、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>For additional information, see <bpt id="p1">[</bpt>Identifying Functions in DLLs<ept id="p1">](~/docs/framework/interop/identifying-functions-in-dlls.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Dll で関数を識別する<ept id="p1">](~/docs/framework/interop/identifying-functions-in-dlls.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>For examples showing how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> field, see <bpt id="p1">[</bpt>Specifying an Entry Point<ept id="p1">](~/docs/framework/interop/specifying-an-entry-point.md)</ept>.</source>
          <target state="translated">使用する方法を示す例については、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph>フィールドを参照してください<bpt id="p1">[</bpt>エントリ ポイントの指定<ept id="p1">](~/docs/framework/interop/specifying-an-entry-point.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">次のコード例を使用する方法を示しています、 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> Win32 をインポートする属性<ph id="ph2">`MessageBox`</ph>関数。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> property to specify the function to import and then changes the name to <ph id="ph2">`MyNewMessageBoxMethod`</ph>.</source>
          <target state="translated">コードの例では、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph>プロパティをインポートする関数を指定する名前を変更し、<ph id="ph2">`MyNewMessageBoxMethod`</ph>です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Controls whether the <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /&gt;</ph> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /&gt;</ph> フィールドで、指定された名前以外のエントリ ポイント名をアンマネージ DLL から共通言語ランタイムに検索させるかどうかを制御します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>If <ph id="ph1">`false`</ph>, the entry point name appended with the letter A is invoked when the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field is set to <ph id="ph3">`CharSet.Ansi`</ph>, and the entry-point name appended with the letter W is invoked when the <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field is set to the <ph id="ph5">`CharSet.Unicode`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`false`</ph>、文字 A で追加されたエントリ ポイント名が呼び出されるときに、<ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph>にフィールドが設定されている<ph id="ph3">`CharSet.Ansi`</ph>、W の文字が付いた、エントリ ポイント名が呼び出されるとときに、<ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph>にフィールドが設定されている、<ph id="ph5">`CharSet.Unicode`</ph>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Typically, managed compilers set this field.</source>
          <target state="translated">通常、マネージ コンパイラは、このフィールドを設定します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>The following table shows the relationship between the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> fields, based on default values imposed by the programming language.</source>
          <target state="translated">次の表は、関係を示しています、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet&gt;</ph>と<ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>プログラミング言語によって課される既定値に基づくフィールドです。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>You can override the default setting, but do so with caution.</source>
          <target state="translated">既定の設定をオーバーライドできますが、注意が必要でこれを行います。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Language</source>
          <target state="translated">言語</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ANSI</source>
          <target state="translated">ANSI</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Unicode</source>
          <target state="translated">Unicode</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Auto</source>
          <target state="translated">自動</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Visual Basic</source>
          <target state="translated">Visual Basic</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=True</source>
          <target state="translated">ExactSpelling: = True</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=True</source>
          <target state="translated">ExactSpelling: = True</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=False</source>
          <target state="translated">ExactSpelling: false</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>C#</source>
          <target state="translated">C#</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling = false</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling = false</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling = false</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>C++</source>
          <target state="translated">C++</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling = false</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling = false</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling = false</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">場合によっては、Visual Basic 開発者が使用して、 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>、使用する代わりに、<ph id="ph2">`Declare`</ph>ステートメントでは、マネージ コードで DLL 関数を定義します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> field is one of those cases.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>フィールドは、このような場合のいずれか。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Indicates whether unmanaged methods that have <ph id="ph1">&lt;see langword="HRESULT" /&gt;</ph> or <ph id="ph2">&lt;see langword="retval" /&gt;</ph> return values are directly translated or whether <ph id="ph3">&lt;see langword="HRESULT" /&gt;</ph> or <ph id="ph4">&lt;see langword="retval" /&gt;</ph> return values are automatically converted to exceptions.</source>
          <target state="translated">戻り値が <ph id="ph1">&lt;see langword="HRESULT" /&gt;</ph> または <ph id="ph2">&lt;see langword="retval" /&gt;</ph> であるアンマネージ メソッドを直接変換するか、戻り値 <ph id="ph3">&lt;see langword="HRESULT" /&gt;</ph> または <ph id="ph4">&lt;see langword="retval" /&gt;</ph> を自動的に例外に変換するかを示します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Set the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field to <ph id="ph2">`true`</ph> to directly translate unmanaged signatures with <ph id="ph3">`HRESULT`</ph> or <ph id="ph4">`retval`</ph> values; set it to <ph id="ph5">`false`</ph> to automatically convert <ph id="ph6">`HRESULT`</ph> or <ph id="ph7">`retval`</ph> values to exceptions.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>フィールドを<ph id="ph2">`true`</ph>がアンマネージの署名を直接変換する<ph id="ph3">`HRESULT`</ph>または<ph id="ph4">`retval`</ph>値に設定は<ph id="ph5">`false`</ph>に自動的に変換する<ph id="ph6">`HRESULT`</ph>または<ph id="ph7">`retval`</ph>例外の値。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>By default, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>フィールドは<ph id="ph2">`true`</ph>します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When <ph id="ph1">`true`</ph>, the resulting method signature returns an integer value that contains the <ph id="ph2">`HRESULT`</ph> value.</source>
          <target state="translated">ときに<ph id="ph1">`true`</ph>、結果として得られるメソッドのシグネチャを格納する整数値を返します、<ph id="ph2">`HRESULT`</ph>値。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>In this case, you must manually inspect the return value and respond accordingly in your application.</source>
          <target state="translated">この場合、する必要があります手動で戻り値を検査し、適宜対応アプリケーションでします。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When you set the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field to <ph id="ph2">`false`</ph>, the resulting method signature contains a void return type instead of an integer (<ph id="ph3">`HRESULT`</ph>) return type.</source>
          <target state="translated">設定すると、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>フィールドを<ph id="ph2">`false`</ph>、結果として得られるメソッドのシグネチャには整数ではなく void 戻り値の型が含まれています (<ph id="ph3">`HRESULT`</ph>) 型を返します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When the unmanaged method produces an <ph id="ph1">`HRESULT`</ph>, the runtime automatically ignores a return value of <ph id="ph2">`S_OK`</ph> (or 0) and does not throw an exception.</source>
          <target state="translated">アンマネージ メソッドが生成するときに、 <ph id="ph1">`HRESULT`</ph>、戻り値のランタイムは自動的に無視<ph id="ph2">`S_OK`</ph>(または 0)、例外をスローしません。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>For <ph id="ph1">`HRESULT`</ph>s other than <ph id="ph2">`S_OK`</ph>, the runtime automatically throws an exception that corresponds to the <ph id="ph3">`HRESULT`</ph>.</source>
          <target state="translated"><ph id="ph1">`HRESULT`</ph>以外の s <ph id="ph2">`S_OK`</ph>、ランタイムが自動的に対応する例外をスロー、<ph id="ph3">`HRESULT`</ph>です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Note that the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute only performs this conversion to methods that return an <ph id="ph2">`HRESULT`</ph>.</source>
          <target state="translated">なお、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>属性のみを返すメソッドをこの変換を実行する、<ph id="ph2">`HRESULT`</ph>です。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>You might decide to change the default error reporting behavior from <ph id="ph1">`HRESULT`</ph>s to exceptions in cases where exceptions better fit the error reporting structure of your application.</source>
          <target state="translated">既定のエラー報告の動作を変更することがあります<ph id="ph1">`HRESULT`</ph>場所に例外が適してエラー報告、アプリケーションの構造のケースでの例外にします。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>This field is similar to the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.PreserveSigAttribute&gt;</ph>; however, in contrast to the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field, the default value for the attribute is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">このフィールドがに似ていますが、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.PreserveSigAttribute&gt;</ph>です。 ただし、対照的に、<ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>フィールドは、既定値は属性が<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">場合によっては、Visual Basic 開発者が使用して、 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>、使用する代わりに、<ph id="ph2">`Declare`</ph>ステートメントでは、マネージ コードで DLL 関数を定義します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field is one of those cases.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>フィールドは、このような場合のいずれか。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> to import the unmanaged <ph id="ph2">`SHAutoComplete`</ph> function once with the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field set to <ph id="ph4">`true`</ph> and again with the <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field set to <ph id="ph6">`false`</ph>.</source>
          <target state="translated">次のコード例では、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>アンマネージをインポートする<ph id="ph2">`SHAutoComplete`</ph>に 1 回、動作、<ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>フィールドに設定<ph id="ph4">`true`</ph>とを使用して、<ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>フィールドに設定<ph id="ph6">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>This code example causes the <ph id="ph1">`SHAutoComplete`</ph> function to generate any errors with an exception one time and an <ph id="ph2">`HRESULT`</ph> the next.</source>
          <target state="translated">このコード例では、<ph id="ph1">`SHAutoComplete`</ph>例外に 1 回でエラーを生成する関数と<ph id="ph2">`HRESULT`</ph>次です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>Indicates whether the callee calls the <ph id="ph1">&lt;see langword="SetLastError" /&gt;</ph> Win32 API function before returning from the attributed method.</source>
          <target state="translated">属性付きメソッドから戻る前に、呼び出し先が <ph id="ph1">&lt;see langword="SetLastError" /&gt;</ph> Win32 API 関数を呼び出すかどうかを示します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source><ph id="ph1">`true`</ph> to indicate that the callee will call <ph id="ph2">`SetLastError`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`true`</ph> 呼び出し先が呼び出すことを示すために<ph id="ph2">`SetLastError`</ph>、それ以外の<ph id="ph3">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">`false`</ph> です。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>The runtime marshaler calls <ph id="ph1">`GetLastError`</ph> and caches the value returned to prevent it from being overwritten by other API calls.</source>
          <target state="translated">ランタイム マーシャラー呼び出し<ph id="ph1">`GetLastError`</ph>およびその他の API 呼び出しによって上書きされないようにすることに返される値をキャッシュします。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>You can retrieve the error code by calling <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A&gt;</ph>.</source>
          <target state="translated">エラー コードを取得するには呼び出すことによって<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">場合によっては、Visual Basic 開発者が使用して、 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>、使用する代わりに、<ph id="ph2">`Declare`</ph>ステートメントでは、マネージ コードで DLL 関数を定義します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph> field is one of those cases.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph>フィールドは、このような場合のいずれか。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</source>
          <target state="translated">マップできない Unicode 文字 (ANSI の "?" に変換される文字) が見つかったときに、例外をスローするかどうかを指定します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source><ph id="ph1">`true`</ph> to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; <ph id="ph2">`false`</ph> to indicate that the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field is disabled.</source>
          <target state="translated"><ph id="ph1">`true`</ph> たびを例外がスローされることを示すために、相互運用マーシャラーは; マップできない文字に変換します<ph id="ph2">`false`</ph>ことを示す、<ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph>フィールドが無効になります。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>This field is <ph id="ph1">`false`</ph> by default.</source>
          <target state="translated">このフィールドは<ph id="ph1">`false`</ph>既定です。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</source>
          <target state="translated">共通言語ランタイムは、Windows 98 または Windows me で実行するアンマネージ メソッドに渡される Unicode 文字が管理している ANSI 文字に変換します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</source>
          <target state="translated">最適マッピングを使用すると、完全一致が存在しないときに近いの文字を指定する相互運用マーシャラーです。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</source>
          <target state="translated">たとえば、マーシャラー、Unicode 文字に変換著作権を ANSI 文字を使用するアンマネージ メソッドに対して 'c' です。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Some characters lack a best-fit representation; these characters are called unmappable.</source>
          <target state="translated">一部の文字がない最適形式です。これらの文字といいます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Unmappable characters are usually converted to the default '?' ANSI character.</source>
          <target state="translated">マップできない文字が、既定値に変換する通常 '?'ANSI 文字です。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Certain Unicode characters are converted to dangerous characters, such as the backslash '<ph id="ph1">\\</ph>' character, which can inadvertently change a path.</source>
          <target state="translated">特定の Unicode 文字は、円記号など、危険な文字に変換されます '<ph id="ph1">\\</ph>' 文字で、パスを不用意に変更できます。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>By setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field to <ph id="ph2">`true`</ph>, you can signal the presence of an unmappable character to the caller by throwing an exception.</source>
          <target state="translated">設定して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph>フィールドを<ph id="ph2">`true`</ph>例外をスローして、呼び出し元にマップできない文字の存在を通知することができます。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>You cannot change the default values provided by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</source>
          <target state="translated">によって提供される既定値を変更することはできません、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>と<ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph>フィールドのマネージ配列の要素を渡すことが ANSI 文字、または LPSTRs アンマネージのセーフ配列にします。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Best-fit mapping is always enabled and no exception is thrown.</source>
          <target state="translated">最適なマッピングが常に有効になっているし、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Be aware that this combination can compromise your security model.</source>
          <target state="translated">この組み合わせが、セキュリティ モデルを損なうことに注意してください。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> to define a DLL function in managed code, instead of using the <ph id="ph2">`Declare`</ph> statement.</source>
          <target state="translated">場合によっては、Visual Basic 開発者が使用して、 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> DLL 関数を使用せずに、マネージ コードで定義する、<ph id="ph2">`Declare`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field is one of those cases.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph>フィールドは、このような場合のいずれか。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</source>
          <target state="translated">次の例は、最も制限の厳しい、適用する方法を示しています。 ANSI 文字セットを指定する、最適マッピングの動作を無効にすると、マップされていない Unicode 文字に例外をスローして文字のマッピングのセキュリティをプラットフォーム呼び出しメソッドの定義。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>Gets the name of the DLL file that contains the entry point.</source>
          <target state="translated">エントリ ポイントを含む DLL ファイルの名前を取得します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>The name of the DLL file that contains the entry point.</source>
          <target state="translated">エントリ ポイントを含む DLL ファイルの名前。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>You can provide a full or relative path.</source>
          <target state="translated">完全パスまたは相対パスを指定することができます。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</source>
          <target state="translated">パスを指定しない場合、DLL でなければなりません、現在のパス、実行時にその他の方法によって、DLL が読み込まれていない限り。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</source>
          <target state="translated">ただし、完全修飾パスを使用することが問題が生じる可能性、DLL が移動された場合に注意してください。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>