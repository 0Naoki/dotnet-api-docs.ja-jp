<Type Name="DllImportAttribute" FullName="System.Runtime.InteropServices.DllImportAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c88c893bbcacbedffc6f6936c071741ed1dd6858" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48745063" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DllImportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DllImportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.DllImportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DllImportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DllImportAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type DllImportAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="01eed-101">属性付きメソッドがアンマネージ ダイナミックリンク ライブラリ (DLL) によって静的エントリ ポイントとして公開されることを示します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="01eed-101">Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01eed-102">メソッドには、この属性を適用できます。</span><span class="sxs-lookup"><span data-stu-id="01eed-102">You can apply this attribute to methods.</span></span>  
  
 <span data-ttu-id="01eed-103"><xref:System.Runtime.InteropServices.DllImportAttribute>属性は、アンマネージ DLL からエクスポートされた関数を呼び出すために必要な情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="01eed-103">The <xref:System.Runtime.InteropServices.DllImportAttribute> attribute provides the information needed to call a function exported from an unmanaged DLL.</span></span> <span data-ttu-id="01eed-104">最小要件としてエントリ ポイントを含む DLL の名前を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="01eed-104">As a minimum requirement, you must supply the name of the DLL containing the entry point.</span></span>  
  
 <span data-ttu-id="01eed-105">C# および C++ のメソッド定義に直接この属性を適用します。ただし、Visual Basic コンパイラはこの属性を出力を使用する場合、`Declare`ステートメント。</span><span class="sxs-lookup"><span data-stu-id="01eed-105">You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the `Declare` statement.</span></span> <span data-ttu-id="01eed-106">含む複雑なメソッド定義の<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>、 <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>、 <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>、 <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>、 <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>、または<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>フィールド、メソッドの定義を Visual Basic に直接この属性を適用します。</span><span class="sxs-lookup"><span data-stu-id="01eed-106">For complex method definitions that include <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, or <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields, you apply this attribute directly to Visual Basic method definitions.</span></span>  
  
 <span data-ttu-id="01eed-107">**注**JScript がこの属性をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="01eed-107">**Note** JScript does not support this attribute.</span></span> <span data-ttu-id="01eed-108">JScript のプログラムから非管理対象の API メソッドにアクセスするのに c# または Visual Basic ラッパー クラスを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="01eed-108">You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</span></span>  
  
 <span data-ttu-id="01eed-109">詳細については、プラットフォームを使用してアンマネージ Dll の関数にアクセスするサービスを呼び出し、「[アンマネージ DLL 関数の処理](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="01eed-109">For additional information about using the platform invoke service to access functions in unmanaged DLLs, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="01eed-110"><xref:System.Runtime.InteropServices.DllImportAttribute>はジェネリック型のマーシャ リングをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="01eed-110">The <xref:System.Runtime.InteropServices.DllImportAttribute> does not support marshaling of generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01eed-111">次のコード例を使用する方法を示しています、 <xref:System.Runtime.InteropServices.DllImportAttribute> Win32 をインポートする属性`MessageBox`関数。</span><span class="sxs-lookup"><span data-stu-id="01eed-111">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="01eed-112">コード例は、インポートされたメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="01eed-112">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DllImportAttribute (string dllName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dllName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dllName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DllImportAttribute(System::String ^ dllName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.DllImportAttribute : string -&gt; System.Runtime.InteropServices.DllImportAttribute" Usage="new System.Runtime.InteropServices.DllImportAttribute dllName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dllName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dllName">
          <span data-ttu-id="01eed-113">アンマネージ メソッドを格納する DLL の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-113">The name of the DLL that contains the unmanaged method.</span>
          </span>
          <span data-ttu-id="01eed-114">DLL がアセンブリに含まれている場合、これにはアセンブリの表示名を含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-114">This can include an assembly display name, if the DLL is included in an assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="01eed-115">
            <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> クラスの新しいインスタンスを、インポートするメソッドを格納した DLL の名前を使用して初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-115">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> class with the name of the DLL containing the method to import.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01eed-116">非管理対象の DLL ファイルが含まれる場合アセンブリでは、たとえば、リンカーを使用して、または`/linkresource`コンパイラ オプション、アセンブリの表示名を指定の一部として`dllName`します。</span><span class="sxs-lookup"><span data-stu-id="01eed-116">If an unmanaged DLL file is included in an assembly, for example, by using the linker or the `/linkresource` compiler option, you can specify the assembly display name as part of `dllName`.</span></span> <span data-ttu-id="01eed-117">たとえば、という名前のアンマネージ DLL`unmanaged.dll`という名前のマネージ アセンブリに含まれて`MyAssembly`属性は、次のコードに示すように指定可能性があります。</span><span class="sxs-lookup"><span data-stu-id="01eed-117">For example, if an unmanaged DLL named `unmanaged.dll` is included in a managed assembly named `MyAssembly`, the attribute might be specified as shown in the following code.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="01eed-118">次のコード例を使用する方法を示しています、 <xref:System.Runtime.InteropServices.DllImportAttribute> Win32 をインポートする属性`MessageBox`関数。</span><span class="sxs-lookup"><span data-stu-id="01eed-118">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="01eed-119">コード例は、インポートされたメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="01eed-119">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BestFitMapping">
      <MemberSignature Language="C#" Value="public bool BestFitMapping;" />
      <MemberSignature Language="ILAsm" Value=".field public bool BestFitMapping" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberSignature Language="VB.NET" Value="Public BestFitMapping As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool BestFitMapping;" />
      <MemberSignature Language="F#" Value="val mutable BestFitMapping : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="01eed-120">Unicode 文字を ANSI 文字に変換するときの、最適マッピング動作のオン/オフを切り替えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-120">Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01eed-121">場合`true`、最適マッピング動作が有効になります。 それ以外の場合、最適マッピングは無効です。</span><span class="sxs-lookup"><span data-stu-id="01eed-121">If `true`, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</span></span> <span data-ttu-id="01eed-122"><xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>フィールドは`true`既定。</span><span class="sxs-lookup"><span data-stu-id="01eed-122">The <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is `true` by default.</span></span> <span data-ttu-id="01eed-123">このフィールドの設定は、任意のレベル設定を上書き、<xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="01eed-123">Settings for this field override the any level settings for the <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> attribute.</span></span>  
  
 <span data-ttu-id="01eed-124">共通言語ランタイムは、Windows 98 または Windows me. で実行する非管理対象のメソッドに渡される Unicode 文字が管理している ANSI 文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="01eed-124">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="01eed-125">最適マッピングには、完全一致が存在しない場合は、近い文字を提供する相互運用マーシャラーができます。</span><span class="sxs-lookup"><span data-stu-id="01eed-125">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="01eed-126">たとえば、マーシャラーには、Unicode の著作権文字を ANSI 文字を許可する非管理対象のメソッドには、'c' に変換します。</span><span class="sxs-lookup"><span data-stu-id="01eed-126">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="01eed-127">一部の文字がない最適の表現。これらの文字といいます。</span><span class="sxs-lookup"><span data-stu-id="01eed-127">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="01eed-128">マップできない文字が既定値に変換する、通常は '?'ANSI 文字です。</span><span class="sxs-lookup"><span data-stu-id="01eed-128">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="01eed-129">特定の Unicode 文字が円記号など、危険な文字に変換されます '\\' 文字で、パスを誤って変更することができます。</span><span class="sxs-lookup"><span data-stu-id="01eed-129">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="01eed-130">設定して、<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>フィールドを`true`例外をスローして、呼び出し元にマップできない文字の存在を示すことができます。</span><span class="sxs-lookup"><span data-stu-id="01eed-130">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="01eed-131">によって提供される既定値を変更することはできません、<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>と<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>フィールドを非管理対象のセーフ配列に ANSI 文字または LPSTRs 要素を持つマネージ配列を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="01eed-131">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="01eed-132">最適マッピングが常に有効にして、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="01eed-132">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="01eed-133">この組み合わせに、セキュリティ モデルが損なわれる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="01eed-133">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01eed-134">場合によっては、Visual Basic 開発者が使用して、<xref:System.Runtime.InteropServices.DllImportAttribute>の代わりに、`Declare`ステートメントは、マネージ コードで DLL 関数を定義します。</span><span class="sxs-lookup"><span data-stu-id="01eed-134">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="01eed-135">設定、<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>フィールドは、そのような場合の 1 つです。</span><span class="sxs-lookup"><span data-stu-id="01eed-135">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is one of those cases.</span></span> <span data-ttu-id="01eed-136">次の例は、厳密に適用する方法を示しています。 文字のマッピングのセキュリティをプラットフォーム呼び出しメソッドの定義を ANSI 文字セットを指定する、最適マッピングの動作を無効にすると、マップされていない Unicode 文字に例外をスローしています。</span><span class="sxs-lookup"><span data-stu-id="01eed-136">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" />
        <related type="Article" href="http://msdn.microsoft.com/library/115f7a2f-d422-4605-ab36-13a8dd28142a">
          <span data-ttu-id="01eed-137">相互運用マーシャリング</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-137">Interop Marshaling</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CallingConvention CallingConvention;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CallingConvention CallingConvention" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public CallingConvention As CallingConvention " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CallingConvention CallingConvention;" />
      <MemberSignature Language="F#" Value="val mutable CallingConvention : System.Runtime.InteropServices.CallingConvention" Usage="System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CallingConvention</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="01eed-138">エントリ ポイントの呼び出し規約を示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-138">Indicates the calling convention of an entry point.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01eed-139">いずれかにこのフィールドを設定する、<xref:System.Runtime.InteropServices.CallingConvention>列挙型メンバー。</span><span class="sxs-lookup"><span data-stu-id="01eed-139">You set this field to one of the <xref:System.Runtime.InteropServices.CallingConvention> enumeration members.</span></span> <span data-ttu-id="01eed-140">既定値、<xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>フィールドは<xref:System.Runtime.InteropServices.CallingConvention.Winapi>、順番に既定で<xref:System.Runtime.InteropServices.CallingConvention.StdCall>規則。</span><span class="sxs-lookup"><span data-stu-id="01eed-140">The default value for the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, which in turn defaults to <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convention.</span></span>  
  
 <span data-ttu-id="01eed-141">詳細については、MSDN ライブラリの呼び出し規約を参照してください。</span><span class="sxs-lookup"><span data-stu-id="01eed-141">For more information, see Calling Convention in the MSDN library.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01eed-142">場合によっては、Visual Basic 開発者が使用して、<xref:System.Runtime.InteropServices.DllImportAttribute>の代わりに、`Declare`ステートメントは、マネージ コードで DLL 関数を定義します。</span><span class="sxs-lookup"><span data-stu-id="01eed-142">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="01eed-143">設定、<xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>フィールドは、そのような場合の 1 つです。</span><span class="sxs-lookup"><span data-stu-id="01eed-143">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is one of those cases.</span></span>  
  
 <span data-ttu-id="01eed-144">System.Runtime.InteropServices.DllImportAttribute#1</span><span class="sxs-lookup"><span data-stu-id="01eed-144">System.Runtime.InteropServices.DllImportAttribute#1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CallingConvention" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="01eed-145">文字列パラメーターをメソッドにマーシャリングし、名前マングルを制御する方法を示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-145">Indicates how to marshal string parameters to the method and controls name mangling.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01eed-146">メンバーにこのフィールドを使用して、<xref:System.Runtime.InteropServices.CharSet>文字列パラメーターのマーシャ リング動作を指定して、(指定された正確な名前または"A"または"W"で終わる名前) を起動するには、どのエントリ ポイント名を指定する列挙体。</span><span class="sxs-lookup"><span data-stu-id="01eed-146">Use this field with a member of the <xref:System.Runtime.InteropServices.CharSet> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</span></span> <span data-ttu-id="01eed-147">C# および Visual Basic の既定の列挙体メンバー `CharSet.Ansi` C++ の既定の列挙体のメンバーと`CharSet.None`と同等`CharSet.Ansi`します。</span><span class="sxs-lookup"><span data-stu-id="01eed-147">The default enumeration member for C# and Visual Basic is `CharSet.Ansi` and the default enumeration member for C++ is `CharSet.None`, which is equivalent to `CharSet.Ansi`.</span></span> <span data-ttu-id="01eed-148">Visual basic で使用する、`Declare`ステートメントを指定する、`CharSet`フィールド。</span><span class="sxs-lookup"><span data-stu-id="01eed-148">In Visual Basic, you use the `Declare` statement to specify the `CharSet` field.</span></span>  
  
 <span data-ttu-id="01eed-149"><xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>フィールドの動作に影響、`CharSet`を呼び出すには、どのエントリ ポイント名を決定するフィールド。</span><span class="sxs-lookup"><span data-stu-id="01eed-149">The <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field influences the behavior of the `CharSet` field in determining which entry-point name to invoke.</span></span> <span data-ttu-id="01eed-150">詳細な説明と、文字列のマーシャ リングと関連付けられている動作と一致する名前の例については、`CharSet`フィールドを参照してください[文字セットの指定](~/docs/framework/interop/specifying-a-character-set.md)します。</span><span class="sxs-lookup"><span data-stu-id="01eed-150">For a detailed description and examples of the string marshaling and name matching behavior associated with the `CharSet` field, see [Specifying a Character Set](~/docs/framework/interop/specifying-a-character-set.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01eed-151">次のコード例を使用する方法を示しています、 <xref:System.Runtime.InteropServices.DllImportAttribute> Win32 をインポートする属性`MessageBox`関数。</span><span class="sxs-lookup"><span data-stu-id="01eed-151">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="01eed-152">コード例は、インポートされたメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="01eed-152">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public string EntryPoint;" />
      <MemberSignature Language="ILAsm" Value=".field public string EntryPoint" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public EntryPoint As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EntryPoint;" />
      <MemberSignature Language="F#" Value="val mutable EntryPoint : string" Usage="System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="01eed-153">呼び出す DLL エントリ ポイントの名前または序数を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-153">Indicates the name or ordinal of the DLL entry point to be called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01eed-154">エントリ ポイント名を指定するには、エントリ ポイントを含む DLL の名前を示す文字列を指定してまたはその序数をエントリ ポイントを特定できます。</span><span class="sxs-lookup"><span data-stu-id="01eed-154">You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</span></span> <span data-ttu-id="01eed-155">たとえば、1、# 記号では、序数が付きます。</span><span class="sxs-lookup"><span data-stu-id="01eed-155">Ordinals are prefixed with the # sign, for example, #1.</span></span> <span data-ttu-id="01eed-156">共通言語ランタイムでマークされたの.net メソッドの名前を使用してこのフィールドを省略した場合、<xref:System.Runtime.InteropServices.DllImportAttribute>します。</span><span class="sxs-lookup"><span data-stu-id="01eed-156">If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span>  
  
 <span data-ttu-id="01eed-157">詳細については、次を参照してください。 [Dll で関数を識別する](~/docs/framework/interop/identifying-functions-in-dlls.md)します。</span><span class="sxs-lookup"><span data-stu-id="01eed-157">For additional information, see [Identifying Functions in DLLs](~/docs/framework/interop/identifying-functions-in-dlls.md).</span></span> <span data-ttu-id="01eed-158">使用する方法を示す例については、<xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint>フィールドを参照してください[エントリ ポイントの指定](~/docs/framework/interop/specifying-an-entry-point.md)します。</span><span class="sxs-lookup"><span data-stu-id="01eed-158">For examples showing how to use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> field, see [Specifying an Entry Point](~/docs/framework/interop/specifying-an-entry-point.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01eed-159">次のコード例を使用する方法を示しています、 <xref:System.Runtime.InteropServices.DllImportAttribute> Win32 をインポートする属性`MessageBox`関数。</span><span class="sxs-lookup"><span data-stu-id="01eed-159">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="01eed-160">コード例では、<xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint>プロパティをインポートする関数を指定し、名前を変更`MyNewMessageBoxMethod`します。</span><span class="sxs-lookup"><span data-stu-id="01eed-160">The code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> property to specify the function to import and then changes the name to `MyNewMessageBoxMethod`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ExactSpelling">
      <MemberSignature Language="C#" Value="public bool ExactSpelling;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ExactSpelling" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberSignature Language="VB.NET" Value="Public ExactSpelling As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ExactSpelling;" />
      <MemberSignature Language="F#" Value="val mutable ExactSpelling : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="01eed-161">
            <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> フィールドで、指定された名前以外のエントリ ポイント名をアンマネージ DLL から共通言語ランタイムに検索させるかどうかを制御します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-161">Controls whether the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01eed-162">場合`false`、文字 A で追加されたエントリ ポイント名が呼び出されるときに、<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType>にフィールドが設定されている`CharSet.Ansi`、W の文字を付加するエントリ ポイント名が呼び出されるとときに、<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType>フィールドに設定されて、 `CharSet.Unicode`。</span><span class="sxs-lookup"><span data-stu-id="01eed-162">If `false`, the entry point name appended with the letter A is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to `CharSet.Ansi`, and the entry-point name appended with the letter W is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to the `CharSet.Unicode`.</span></span> <span data-ttu-id="01eed-163">通常、マネージ コンパイラは、このフィールドを設定します。</span><span class="sxs-lookup"><span data-stu-id="01eed-163">Typically, managed compilers set this field.</span></span>  
  
 <span data-ttu-id="01eed-164">次の表の間のリレーションシップを示しています、<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet>と<xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>フィールド、プログラミング言語によって課される既定値に基づきます。</span><span class="sxs-lookup"><span data-stu-id="01eed-164">The following table shows the relationship between the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> and <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> fields, based on default values imposed by the programming language.</span></span> <span data-ttu-id="01eed-165">既定の設定をオーバーライドが慎重に行うことができます。</span><span class="sxs-lookup"><span data-stu-id="01eed-165">You can override the default setting, but do so with caution.</span></span>  
  
|<span data-ttu-id="01eed-166">言語</span><span class="sxs-lookup"><span data-stu-id="01eed-166">Language</span></span>|<span data-ttu-id="01eed-167">ANSI</span><span class="sxs-lookup"><span data-stu-id="01eed-167">ANSI</span></span>|<span data-ttu-id="01eed-168">Unicode</span><span class="sxs-lookup"><span data-stu-id="01eed-168">Unicode</span></span>|<span data-ttu-id="01eed-169">自動</span><span class="sxs-lookup"><span data-stu-id="01eed-169">Auto</span></span>|  
|--------------|----------|-------------|----------|  
|<span data-ttu-id="01eed-170">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="01eed-170">Visual Basic</span></span>|<span data-ttu-id="01eed-171">ExactSpelling: = True</span><span class="sxs-lookup"><span data-stu-id="01eed-171">ExactSpelling:=True</span></span>|<span data-ttu-id="01eed-172">ExactSpelling: = True</span><span class="sxs-lookup"><span data-stu-id="01eed-172">ExactSpelling:=True</span></span>|<span data-ttu-id="01eed-173">ExactSpelling: = False</span><span class="sxs-lookup"><span data-stu-id="01eed-173">ExactSpelling:=False</span></span>|  
|<span data-ttu-id="01eed-174">C#</span><span class="sxs-lookup"><span data-stu-id="01eed-174">C#</span></span>|<span data-ttu-id="01eed-175">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="01eed-175">ExactSpelling=false</span></span>|<span data-ttu-id="01eed-176">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="01eed-176">ExactSpelling=false</span></span>|<span data-ttu-id="01eed-177">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="01eed-177">ExactSpelling=false</span></span>|  
|<span data-ttu-id="01eed-178">C++</span><span class="sxs-lookup"><span data-stu-id="01eed-178">C++</span></span>|<span data-ttu-id="01eed-179">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="01eed-179">ExactSpelling=false</span></span>|<span data-ttu-id="01eed-180">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="01eed-180">ExactSpelling=false</span></span>|<span data-ttu-id="01eed-181">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="01eed-181">ExactSpelling=false</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="01eed-182">場合によっては、Visual Basic 開発者が使用して、 <xref:System.Runtime.InteropServices.DllImportAttribute>、使用する代わりに、`Declare`ステートメントは、マネージ コードで DLL 関数を定義します。</span><span class="sxs-lookup"><span data-stu-id="01eed-182">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="01eed-183">設定、<xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>フィールドは、そのような場合の 1 つです。</span><span class="sxs-lookup"><span data-stu-id="01eed-183">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveSig">
      <MemberSignature Language="C#" Value="public bool PreserveSig;" />
      <MemberSignature Language="ILAsm" Value=".field public bool PreserveSig" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberSignature Language="VB.NET" Value="Public PreserveSig As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool PreserveSig;" />
      <MemberSignature Language="F#" Value="val mutable PreserveSig : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="01eed-184">戻り値が <see langword="HRESULT" /> または <see langword="retval" /> であるアンマネージ メソッドを直接変換するか、戻り値 <see langword="HRESULT" /> または <see langword="retval" /> を自動的に例外に変換するかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-184">Indicates whether unmanaged methods that have <see langword="HRESULT" /> or <see langword="retval" /> return values are directly translated or whether <see langword="HRESULT" /> or <see langword="retval" /> return values are automatically converted to exceptions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01eed-185">設定、<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>フィールドを`true`によるアンマネージ シグネチャを直接変換する`HRESULT`または`retval`値以外に設定`false`に自動的に変換する`HRESULT`または`retval`例外の値。</span><span class="sxs-lookup"><span data-stu-id="01eed-185">Set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `true` to directly translate unmanaged signatures with `HRESULT` or `retval` values; set it to `false` to automatically convert `HRESULT` or `retval` values to exceptions.</span></span> <span data-ttu-id="01eed-186">既定で、<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>フィールドは`true`します。</span><span class="sxs-lookup"><span data-stu-id="01eed-186">By default, the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is `true`.</span></span>  
  
 <span data-ttu-id="01eed-187">ときに`true`、結果として得られるメソッドのシグネチャを含む整数値を返します、`HRESULT`値。</span><span class="sxs-lookup"><span data-stu-id="01eed-187">When `true`, the resulting method signature returns an integer value that contains the `HRESULT` value.</span></span>  <span data-ttu-id="01eed-188">この場合、する必要があります手動で戻り値を検査し、適宜対応アプリケーションにします。</span><span class="sxs-lookup"><span data-stu-id="01eed-188">In this case, you must manually inspect the return value and respond accordingly in your application.</span></span>  
  
 <span data-ttu-id="01eed-189">設定すると、<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>フィールドを`false`、結果として得られるメソッドのシグネチャには整数ではなく void 戻り値の型が含まれています (`HRESULT`) 型を返します。</span><span class="sxs-lookup"><span data-stu-id="01eed-189">When you set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `false`, the resulting method signature contains a void return type instead of an integer (`HRESULT`) return type.</span></span>  <span data-ttu-id="01eed-190">アンマネージ メソッドを生成すると、 `HRESULT`、ランタイムの戻り値を自動的に無視されます`S_OK`(または 0)、例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="01eed-190">When the unmanaged method produces an `HRESULT`, the runtime automatically ignores a return value of `S_OK` (or 0) and does not throw an exception.</span></span>  <span data-ttu-id="01eed-191">`HRESULT`以外 s `S_OK`、ランタイムが自動的に対応する例外をスロー、`HRESULT`します。</span><span class="sxs-lookup"><span data-stu-id="01eed-191">For `HRESULT`s other than `S_OK`, the runtime automatically throws an exception that corresponds to the `HRESULT`.</span></span>  <span data-ttu-id="01eed-192">なお、<xref:System.Runtime.InteropServices.DllImportAttribute>属性のみを返すメソッドをこの変換を実行する、`HRESULT`します。</span><span class="sxs-lookup"><span data-stu-id="01eed-192">Note that the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute only performs this conversion to methods that return an `HRESULT`.</span></span>  
  
 <span data-ttu-id="01eed-193">既定のエラー報告動作を変更することがあります`HRESULT`例外を例外に合わせて、アプリケーションの構造をレポート作成エラーの場合にします。</span><span class="sxs-lookup"><span data-stu-id="01eed-193">You might decide to change the default error reporting behavior from `HRESULT`s to exceptions in cases where exceptions better fit the error reporting structure of your application.</span></span>  
  
 <span data-ttu-id="01eed-194">このフィールドと似ています、 <xref:System.Runtime.InteropServices.PreserveSigAttribute>。 ただし、対照的に、<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>フィールドの場合は、属性の既定値`false`します。</span><span class="sxs-lookup"><span data-stu-id="01eed-194">This field is similar to the <xref:System.Runtime.InteropServices.PreserveSigAttribute>; however, in contrast to the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field, the default value for the attribute is `false`.</span></span>  
  
 <span data-ttu-id="01eed-195">場合によっては、Visual Basic 開発者が使用して、 <xref:System.Runtime.InteropServices.DllImportAttribute>、使用する代わりに、`Declare`ステートメントは、マネージ コードで DLL 関数を定義します。</span><span class="sxs-lookup"><span data-stu-id="01eed-195">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="01eed-196">設定、<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>フィールドは、そのような場合の 1 つです。</span><span class="sxs-lookup"><span data-stu-id="01eed-196">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is one of those cases.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01eed-197">次のコード例では、<xref:System.Runtime.InteropServices.DllImportAttribute>アンマネージをインポートする`SHAutoComplete`関数とに 1 回、<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>フィールドに設定`true`とを使用して、<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>フィールドに設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="01eed-197">The following code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute> to import the unmanaged `SHAutoComplete` function once with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `true` and again with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `false`.</span></span>  <span data-ttu-id="01eed-198">このコード例では、 `SHAutoComplete` 、例外の 1 回ですべてのエラーを生成する関数と`HRESULT`次です。</span><span class="sxs-lookup"><span data-stu-id="01eed-198">This code example causes the `SHAutoComplete` function to generate any errors with an exception one time and an `HRESULT` the next.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SetLastError">
      <MemberSignature Language="C#" Value="public bool SetLastError;" />
      <MemberSignature Language="ILAsm" Value=".field public bool SetLastError" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberSignature Language="VB.NET" Value="Public SetLastError As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool SetLastError;" />
      <MemberSignature Language="F#" Value="val mutable SetLastError : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="01eed-199">属性付きメソッドから戻る前に、呼び出し先が <see langword="SetLastError" /> Win32 API 関数を呼び出すかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-199">Indicates whether the callee calls the <see langword="SetLastError" /> Win32 API function before returning from the attributed method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01eed-200">`true` 呼び出し先が呼び出すことを示すために`SetLastError`、それ以外の`false`します。</span><span class="sxs-lookup"><span data-stu-id="01eed-200">`true` to indicate that the callee will call `SetLastError`; otherwise, `false`.</span></span> <span data-ttu-id="01eed-201">既定値は、`false` です。</span><span class="sxs-lookup"><span data-stu-id="01eed-201">The default is `false`.</span></span>  
  
 <span data-ttu-id="01eed-202">ランタイム マーシャラー`GetLastError`し、他の API 呼び出しによって上書きされないように返される値をキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="01eed-202">The runtime marshaler calls `GetLastError` and caches the value returned to prevent it from being overwritten by other API calls.</span></span> <span data-ttu-id="01eed-203">エラー コードを取得するには呼び出すことによって<xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>します。</span><span class="sxs-lookup"><span data-stu-id="01eed-203">You can retrieve the error code by calling <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01eed-204">場合によっては、Visual Basic 開発者が使用して、 <xref:System.Runtime.InteropServices.DllImportAttribute>、使用する代わりに、`Declare`ステートメントは、マネージ コードで DLL 関数を定義します。</span><span class="sxs-lookup"><span data-stu-id="01eed-204">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="01eed-205">設定、<xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>フィールドは、そのような場合の 1 つです。</span><span class="sxs-lookup"><span data-stu-id="01eed-205">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />
      </Docs>
    </Member>
    <Member MemberName="ThrowOnUnmappableChar">
      <MemberSignature Language="C#" Value="public bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ThrowOnUnmappableChar" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberSignature Language="VB.NET" Value="Public ThrowOnUnmappableChar As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="F#" Value="val mutable ThrowOnUnmappableChar : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="01eed-206">マップできない Unicode 文字 (ANSI の "?" に変換される文字) が見つかったときに、例外をスローするかどうかを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-206">Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01eed-207">`true` 例外には、毎回がスローされます、相互運用マーシャラーは; マップできない文字に変換します`false`ことを示す、<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>フィールドが無効になります。</span><span class="sxs-lookup"><span data-stu-id="01eed-207">`true` to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; `false` to indicate that the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is disabled.</span></span> <span data-ttu-id="01eed-208">このフィールドは`false`既定。</span><span class="sxs-lookup"><span data-stu-id="01eed-208">This field is `false` by default.</span></span>  
  
 <span data-ttu-id="01eed-209">共通言語ランタイムは、Windows 98 または Windows me. で実行する非管理対象のメソッドに渡される Unicode 文字が管理している ANSI 文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="01eed-209">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="01eed-210">最適マッピングには、完全一致が存在しない場合は、近い文字を提供する相互運用マーシャラーができます。</span><span class="sxs-lookup"><span data-stu-id="01eed-210">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="01eed-211">たとえば、マーシャラーには、Unicode の著作権文字を ANSI 文字を許可する非管理対象のメソッドには、'c' に変換します。</span><span class="sxs-lookup"><span data-stu-id="01eed-211">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="01eed-212">一部の文字がない最適の表現。これらの文字といいます。</span><span class="sxs-lookup"><span data-stu-id="01eed-212">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="01eed-213">マップできない文字が既定値に変換する、通常は '?'ANSI 文字です。</span><span class="sxs-lookup"><span data-stu-id="01eed-213">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="01eed-214">特定の Unicode 文字が円記号など、危険な文字に変換されます '\\' 文字で、パスを誤って変更することができます。</span><span class="sxs-lookup"><span data-stu-id="01eed-214">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="01eed-215">設定して、<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>フィールドを`true`例外をスローして、呼び出し元にマップできない文字の存在を示すことができます。</span><span class="sxs-lookup"><span data-stu-id="01eed-215">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="01eed-216">によって提供される既定値を変更することはできません、<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>と<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>フィールドを非管理対象のセーフ配列に ANSI 文字または LPSTRs 要素を持つマネージ配列を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="01eed-216">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="01eed-217">最適マッピングが常に有効にして、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="01eed-217">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="01eed-218">この組み合わせに、セキュリティ モデルが損なわれる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="01eed-218">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01eed-219">場合によっては、Visual Basic 開発者が使用して、 <xref:System.Runtime.InteropServices.DllImportAttribute> DLL 関数を使用する代わりに、マネージ コードで定義する、`Declare`ステートメント。</span><span class="sxs-lookup"><span data-stu-id="01eed-219">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute> to define a DLL function in managed code, instead of using the `Declare` statement.</span></span> <span data-ttu-id="01eed-220">設定、<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>フィールドは、そのような場合の 1 つです。</span><span class="sxs-lookup"><span data-stu-id="01eed-220">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is one of those cases.</span></span> <span data-ttu-id="01eed-221">次の例は、厳密に適用する方法を示しています。 文字のマッピングのセキュリティをプラットフォーム呼び出しメソッドの定義を ANSI 文字セットを指定する、最適マッピングの動作を無効にすると、マップされていない Unicode 文字に例外をスローしています。</span><span class="sxs-lookup"><span data-stu-id="01eed-221">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
        <related type="Article" href="http://msdn.microsoft.com/library/115f7a2f-d422-4605-ab36-13a8dd28142a">
          <span data-ttu-id="01eed-222">相互運用マーシャリング</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-222">Interop Marshaling</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="01eed-223">エントリ ポイントを含む DLL ファイルの名前を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-223">Gets the name of the DLL file that contains the entry point.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="01eed-224">エントリ ポイントを含む DLL ファイルの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="01eed-224">The name of the DLL file that contains the entry point.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01eed-225">完全なまたは相対パスを行うことができます。</span><span class="sxs-lookup"><span data-stu-id="01eed-225">You can provide a full or relative path.</span></span> <span data-ttu-id="01eed-226">パスを指定しない場合、DLL でなければなりません、現在のパス、実行時にその他のいくつかの方法で、DLL が読み込まれていない場合。</span><span class="sxs-lookup"><span data-stu-id="01eed-226">If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</span></span> <span data-ttu-id="01eed-227">注意してください、ただし、完全修飾パスを使用していることができます問題が生じる可能性、DLL が移動された場合。</span><span class="sxs-lookup"><span data-stu-id="01eed-227">Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>