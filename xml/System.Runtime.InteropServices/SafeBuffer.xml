<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SafeBuffer.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac575b109650bc09c5660bda32818a0982011ca6ad0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75b109650bc09c5660bda32818a0982011ca6ad0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>Provides a controlled memory buffer that can be used for reading and writing.</source>
          <target state="translated">読み取り用および書き込み用に使用できる管理されたメモリ バッファーを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>Attempts to access memory outside the controlled buffer (underruns and overruns) raise exceptions.</source>
          <target state="translated">管理されたバッファーの外部にあるメモリにアクセスしようとした場合 (アンダーランおよびオーバーラン)、例外が発生します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>You must call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.Initialize%2A?displayProperty=nameWithType&gt;</ph> method before you use any instance of <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>.</source>
          <target state="translated">呼び出す必要があります、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.Initialize%2A?displayProperty=nameWithType&gt;</ph>メソッドの任意のインスタンスを使用する前に<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>To avoid races when you store an instance of a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph> object in a static variable, you should use one of the following approaches:</source>
          <target state="translated">インスタンスを格納するときに競合を避けるために、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>静的変数にオブジェクトの次の方法のいずれかを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>Create a lock when publishing the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>.</source>
          <target state="translated">発行するときに、ロックを作成、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>Create a local variable, initialize the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>, and then assign the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph> to the static variable, for example, by using the <ph id="ph3">&lt;xref:System.Threading.Interlocked.CompareExchange%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">ローカル変数、初期化の作成、 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>、し、割り当てます、 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph> 、静的変数をなどを使用して、<ph id="ph3">&lt;xref:System.Threading.Interlocked.CompareExchange%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>Assignments in a static class constructor are implicitly locked.</source>
          <target state="translated">静的クラス コンス トラクターの割り当ては暗黙的にロックされています。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to reliably release the handle during the finalization phase; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to prevent reliable release (not recommended).</source>
          <target state="translated">終了処理中にハンドルを確実にリリースする場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。信頼性の高いリリースを実行しない場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph> (お勧めしません)。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> class, and specifies whether the buffer handle is to be reliably released.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> クラスの新しいインスタンスを作成し、バッファー ハンドルを安全に解放するかどうかを指定します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>A byte pointer, passed by reference, to receive the pointer from within the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> オブジェクト内からポインターを受け取るための参照渡しされるバイト ポインター。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>You must set this pointer to <ph id="ph1">&lt;see langword="null" /&gt;</ph> before you call this method.</source>
          <target state="translated">このポインターは、このメソッドを呼び出す前に <ph id="ph1">&lt;see langword="null" /&gt;</ph> に設定する必要があります。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>Obtains a pointer from a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> object for a block of memory.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> オブジェクトからメモリ ブロックのポインターを取得します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>When <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph> returns, you should perform bounds checking by verifying that the <ph id="ph2">`pointer`</ph> parameter is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph>を返します、範囲を確認することによりチェックを実行する必要があります、<ph id="ph2">`pointer`</ph>パラメーターは<ph id="ph3">`null`</ph>します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>If it is not <ph id="ph1">`null`</ph>, you must call the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeBuffer.ReleasePointer%2A?displayProperty=nameWithType&gt;</ph> method in a constrained execution region (CER).</source>
          <target state="translated">ない場合は<ph id="ph1">`null`</ph>、呼び出す必要があります、<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeBuffer.ReleasePointer%2A?displayProperty=nameWithType&gt;</ph>制約された実行領域 (CER) 内のメソッドです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph> calls the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A?displayProperty=nameWithType&gt;</ph> method and exposes the pointer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph> 呼び出し、<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A?displayProperty=nameWithType&gt;</ph>メソッドと、ポインターを公開します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.Read%2A&gt;</ph> method, it does not change the current position of the pointer.</source>
          <target state="translated">異なり、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.Read%2A&gt;</ph>メソッド、ポインターの現在の位置は変更されません。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>The following exampledemonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph> method:</source>
          <target state="translated">次の exampledemonstrates を使用する方法、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph>メソッド。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>If you cast <ph id="ph1">`pointer`</ph> (which is a pointer to a byte) as a pointer to a different type (T*), you may have pointer alignment issues.</source>
          <target state="translated">キャストする場合<ph id="ph1">`pointer`</ph>(これは、バイトへのポインター) 別の種類 (T *) へのポインター、としてポインター アラインメントの問題があります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>You must take responsibility for all bounds checking with this pointer.</source>
          <target state="translated">このポインターをチェックするすべての範囲の責任を負う必要があります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> メソッドが呼び出されていません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
          <source>Gets the size of the buffer, in bytes.</source>
          <target state="translated">バッファーのサイズを取得します (バイト単位)。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
          <source>The number of bytes in the memory buffer.</source>
          <target state="translated">メモリ バッファー内のバイト数。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> メソッドが呼び出されていません。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>Specifies the size of the memory buffer to allocate.</source>
          <target state="translated">割り当てるメモリ バッファーのサイズを指定します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>You must call this method before you use the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> instance.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> インスタンスを使用する前に呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
          <source>The number of bytes in the buffer.</source>
          <target state="translated">バッファー内のバイト数。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
          <source>Defines the allocation size of the memory region in bytes.</source>
          <target state="translated">メモリ領域の割り当てサイズを定義します (バイト単位)。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
          <source>You must call this method before you use the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> instance.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> インスタンスを使用する前に呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> is greater than the available address space.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> が、利用できるアドレス空間を超えています。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source>The number of elements in the buffer.</source>
          <target state="translated">バッファー内の要素の数。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source>The size of each element in the buffer.</source>
          <target state="translated">バッファー内の各要素のサイズ。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source>Specifies the allocation size of the memory buffer by using the specified number of elements and element size.</source>
          <target state="translated">指定された要素数および要素サイズを使用して、メモリ バッファーの割り当てサイズを指定します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source>You must call this method before you use the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> instance.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> インスタンスを使用する前に呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source>This method defines the required size of the memory region as the number of elements in an array multiplied by the size of each element.</source>
          <target state="translated">このメソッドは、各要素のサイズを掛けた値配列内の要素の数としてのメモリ領域の必要なサイズを定義します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="sizeOfEachElement" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sizeOfEachElement" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph> multiplied by <ph id="ph2">&lt;paramref name="sizeOfEachElement" /&gt;</ph> is greater than the available address space.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph> に <ph id="ph2">&lt;paramref name="sizeOfEachElement" /&gt;</ph> を乗算した値が、利用できるアドレス空間を超えています。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
          <source>The value type to allocate memory for.</source>
          <target state="translated">メモリを割り当てる対象の値型。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
          <source>The number of elements of the value type to allocate memory for.</source>
          <target state="translated">メモリを割り当てる対象の値型の要素の数。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
          <source>Defines the allocation size of the memory region by specifying the number of value types.</source>
          <target state="translated">値型の数を指定して、メモリ領域の割り当てサイズを定義します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
          <source>You must call this method before you use the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> instance.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> インスタンスを使用する前に呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph> multiplied by the size of each element is greater than the available address space.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph> と各要素のサイズを乗算した値が、利用できるアドレス空間を超えています。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
          <source>The value type to read.</source>
          <target state="translated">読み取る値型。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
          <source>The location from which to read the value type.</source>
          <target state="translated">値型を読み取る位置。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
          <source>You may have to consider alignment issues.</source>
          <target state="translated">アライメントの問題を考慮する必要があります。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
          <source>Reads a value type from memory at the specified offset.</source>
          <target state="translated">メモリの指定されたオフセット位置の値型を読み取ります。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
          <source>The value type that was read from memory.</source>
          <target state="translated">メモリから読み取られた値型。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> メソッドが呼び出されていません。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The value type to read.</source>
          <target state="translated">読み取る値型。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The location from which to start reading.</source>
          <target state="translated">読み取りを開始する位置。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The output array to write to.</source>
          <target state="translated">データを書き込む先の出力配列。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The location in the output array to begin writing to.</source>
          <target state="translated">書き込みが開始される出力配列内の位置。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The number of value types to read from the input array and to write to the output array.</source>
          <target state="translated">入力配列から読み取って出力配列に書き込む値型の数。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>Reads the specified number of value types from memory starting at the offset, and writes them into an array starting at the index.</source>
          <target state="translated">メモリの指定したオフセットから指定した数の値型を読み取り、指定したインデックスから始まる配列にそれらを書き込みます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The length of the array minus the index is less than <ph id="ph1">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">配列の長さからインデックスを減算した値が <ph id="ph1">&lt;paramref name="count" /&gt;</ph> 未満です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> メソッドが呼び出されていません。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
          <source>Releases a pointer that was obtained by the <ph id="ph1">&lt;see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" /&gt;</ph> メソッドによって取得されたポインターを解放します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
          <source>After this method returns, the pointer cannot be used.</source>
          <target state="translated">このメソッドが返されると、ポインターは使用できません。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> メソッドが呼び出されていません。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
          <source>The value type to write.</source>
          <target state="translated">書き込む値型。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
          <source>The location at which to start writing.</source>
          <target state="translated">書き込みを開始する位置。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
          <source>You may have to consider alignment issues.</source>
          <target state="translated">アライメントの問題を考慮する必要があります。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
          <source>Writes a value type to memory at the given location.</source>
          <target state="translated">値型をメモリの指定した位置に書き込みます。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
          <source>This method is equivalent to the following code:</source>
          <target state="translated">このメソッドは、次のコードと同じです。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> メソッドが呼び出されていません。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The value type to write.</source>
          <target state="translated">書き込む値型。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The location in memory to write to.</source>
          <target state="translated">書き込み先のメモリ内の位置。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The input array.</source>
          <target state="translated">入力配列。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The offset in the array to start reading from.</source>
          <target state="translated">読み取りを開始する配列内のオフセット。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The number of value types to write.</source>
          <target state="translated">書き込む値型の数。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>Writes the specified number of value types to a memory location by reading bytes starting from the specified location in the input array.</source>
          <target state="translated">入力配列内の指定した位置からバイトを読み取ることによって、指定した数の値型をメモリ位置に書き込みます。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>Each element in the input array consists of the generic value type of the class.</source>
          <target state="translated">入力配列内の各要素は、クラスの汎用的な値の型で構成されます。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The length of the input array minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">入力配列の長さから <ph id="ph1">&lt;paramref name="index" /&gt;</ph> を減算した値が <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 未満です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> メソッドが呼び出されていません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>