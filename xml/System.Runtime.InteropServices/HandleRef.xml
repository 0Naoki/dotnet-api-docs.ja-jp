<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HandleRef.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c6025563932e240869a1ba4e28b71c466b6e7e86.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6025563932e240869a1ba4e28b71c466b6e7e86</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.</source>
          <target state="translated">プラットフォーム呼び出しを使用してアンマネージ コードに渡されるリソースへのハンドルを保持しているマネージ オブジェクトをラップします。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>Starting with the .NET Framework 2.0, the functionality of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> class has been replaced by the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class and its derived classes, as well as by the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.CriticalHandle&gt;</ph> class.</source>
          <target state="translated">機能、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph>クラスが置き換えられました、<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>クラスとその派生クラス、よびとして、<ph id="ph3">&lt;xref:System.Runtime.InteropServices.CriticalHandle&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>If you use platform invoke to call a managed object, and the object is not referenced elsewhere after the platform invoke call, it is possible for the garbage collector to finalize the managed object.</source>
          <target state="translated">プラットフォームを使用する場合は、呼び出し、マネージ オブジェクトをおよびプラットフォーム呼び出しの呼び出し後、オブジェクトは他の場所で参照されていませんが、ガベージ コレクターがマネージ オブジェクトを終了する可能性がします。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>This action releases the resource and invalidates the handle, causing the platform invoke call to fail.</source>
          <target state="translated">この操作はリソースを解放し、ハンドルを無効になり、プラットフォーム呼び出しは失敗します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>Wrapping a handle with <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> guarantees that the managed object is not garbage collected until the platform invoke call completes.</source>
          <target state="translated">持つハンドルをラップ<ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph>マネージ オブジェクトがガベージ コレクション、プラットフォーム呼び出しでがないことの保証を完了します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>For a description of platform invoke services, see <bpt id="p1">[</bpt>Consuming Unmanaged DLL Functions<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.</source>
          <target state="translated">プラットフォームの詳細については、サービスを呼び出しは、「<bpt id="p1">[</bpt>アンマネージ DLL 関数の使用<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> value type, like <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>, is a special type recognized by the interop marshaler.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph>値型のような<ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>、相互運用マーシャラーによって認識される特殊な型です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>A normal, nonpinned <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> also prevents untimely garbage collection, yet <ph id="ph2">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> provides better performance.</source>
          <target state="translated">あり、通常<ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>もまだ予期しないガベージ コレクション実行できなくなる<ph id="ph2">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph>パフォーマンスが向上します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>Although using <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> to keep an object alive for the duration of a platform invoke call is preferred, you can also use the <ph id="ph2">&lt;xref:System.GC.KeepAlive%2A?displayProperty=nameWithType&gt;</ph> method for the same purpose.</source>
          <target state="translated">使用する<ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph>プラットフォームの間の呼び出しは、オブジェクトを維持するをお勧め、使用することも、<ph id="ph2">&lt;xref:System.GC.KeepAlive%2A?displayProperty=nameWithType&gt;</ph>を同じ目的のメソッドです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> constructor takes two parameters: an <ph id="ph2">&lt;xref:System.Object&gt;</ph> representing the wrapper, and an <ph id="ph3">&lt;xref:System.IntPtr&gt;</ph> representing the unmanaged handle.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph>コンス トラクターは 2 つのパラメーターを受け取ります。 <ph id="ph2">&lt;xref:System.Object&gt;</ph> 、ラッパーを表すと<ph id="ph3">&lt;xref:System.IntPtr&gt;</ph>アンマネージ ハンドルを表すです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>The interop marshaler passes only the handle to unmanaged code, and guarantees that the wrapper (passed as the first parameter to the constructor of the <ph id="ph1">`HandleRef`</ph>) remains alive for the duration of the call.</source>
          <target state="translated">相互運用マーシャラーが、アンマネージ コードにハンドルのみを渡すし、ラッパーことが保証されます (最初のパラメーターとしてのコンス トラクターに渡される、 <ph id="ph1">`HandleRef`</ph>) 呼び出しの間有効のままです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
          <source>A managed object that should not be finalized until the platform invoke call returns.</source>
          <target state="translated">プラットフォーム呼び出しが返されるまで終了しないマネージ オブジェクト。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that indicates a handle to a resource.</source>
          <target state="translated">リソースへのハンドルを示す <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> class with the object to wrap and a handle to the resource used by unmanaged code.</source>
          <target state="translated">ラップするオブジェクトと、アンマネージ コードで使用するリソースへのハンドルを指定して、<ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.HandleRef.Handle">
          <source>Gets the handle to a resource.</source>
          <target state="translated">リソースへのハンドルを取得します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.HandleRef.Handle">
          <source>The handle to a resource.</source>
          <target state="translated">リソースへのハンドル。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
          <source>The object that needs a handle.</source>
          <target state="translated">ハンドルを必要とするオブジェクト。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
          <source>Returns the handle to a resource of the specified <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> object.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> オブジェクトのリソースへのハンドルを返します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
          <source>The handle to a resource of the specified <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> object.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> オブジェクトのリソースへのハンドル。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef.Handle?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">この演算子を同等の方法は、します。 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef.Handle?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> object to retrieve an internal integer representation from.</source>
          <target state="translated">内部整数表現の取得元の <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
          <source>Returns the internal integer representation of a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> オブジェクトの内部整数表現を返します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object that represents a <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> オブジェクトを表す <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.HandleRef.Wrapper">
          <source>Gets the object holding the handle to a resource.</source>
          <target state="translated">リソースへのハンドルを保持しているオブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.HandleRef.Wrapper">
          <source>The object holding the handle to a resource.</source>
          <target state="translated">リソースへのハンドルを保持しているオブジェクト。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>