<Type Name="Marshal" FullName="System.Runtime.InteropServices.Marshal">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f50859363fd37688e070eaa6e1cd762332366c0e" /><Meta Name="ms.sourcegitcommit" Value="f61362e4134a78bac27d2c8136823a467216f4ab" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/15/2019" /><Meta Name="ms.locfileid" Value="65629395" /></Metadata><TypeSignature Language="C#" Value="public static class Marshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Marshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.Marshal" />
  <TypeSignature Language="VB.NET" Value="Public Class Marshal" />
  <TypeSignature Language="C++ CLI" Value="public ref class Marshal abstract sealed" />
  <TypeSignature Language="F#" Value="type Marshal = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="68c54-101">アンマネージド コードを扱うときに使用できるさまざまなメソッドを提供します。これらのメソッドを使用すると、アンマネージド メモリの割り当て、アンマネージド メモリ ブロックのコピー、マネージド型からアンマネージド型への変換などができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-101">Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-102">`static`で定義されたメソッド、<xref:System.Runtime.InteropServices.Marshal>クラスがアンマネージ コードを操作するために不可欠です。</span><span class="sxs-lookup"><span data-stu-id="68c54-102">The `static` methods defined on the <xref:System.Runtime.InteropServices.Marshal> class are essential to working with unmanaged code.</span></span> <span data-ttu-id="68c54-103">このクラスで定義されているほとんどのメソッドは通常、マネージとアンマネージのプログラミング モデル間のブリッジを提供する必要のある開発者が使用されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-103">Most methods defined in this class are typically used by developers who want to provide a bridge between the managed and unmanaged programming models.</span></span> <span data-ttu-id="68c54-104">たとえば、<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A>メソッドは、(マネージド ヒープ) に指定した文字列から ANSI 文字をアンマネージ ヒープ内のバッファーにコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-104">For example, the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> method copies ANSI characters from a specified string (in the managed heap) to a buffer in the unmanaged heap.</span></span> <span data-ttu-id="68c54-105">また、適切なサイズのターゲットのヒープを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="68c54-105">It also allocates the target heap of the right size.</span></span>  
  
 <span data-ttu-id="68c54-106">共通言語ランタイムは、特定のマーシャ リングの機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="68c54-106">The common language runtime provides specific marshaling capabilities.</span></span> <span data-ttu-id="68c54-107">マーシャ リング動作について詳しくは、次を参照してください。[相互運用マーシャ リング](~/docs/framework/interop/interop-marshaling.md)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-107">For details on marshaling behavior, see [Interop Marshaling](~/docs/framework/interop/interop-marshaling.md).</span></span>  
  
 <span data-ttu-id="68c54-108">`Read`と`Write`メソッド、<xref:System.Runtime.InteropServices.Marshal>クラスは、配置および整列されていないの両方へのアクセスをサポートします。</span><span class="sxs-lookup"><span data-stu-id="68c54-108">The `Read` and `Write` methods in the <xref:System.Runtime.InteropServices.Marshal> class support both aligned and unaligned access.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-109">次の例で定義されているさまざまなメソッドを使用する方法を示しています、<xref:System.Runtime.InteropServices.Marshal>クラス。</span><span class="sxs-lookup"><span data-stu-id="68c54-109">The following example shows how to use various methods defined by the <xref:System.Runtime.InteropServices.Marshal> class.</span></span>  
  
 [!code-cpp[Marshal#1](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#1)]
 [!code-csharp[Marshal#1](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#1)]
 [!code-vb[Marshal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddRef">
      <MemberSignature Language="C#" Value="public static int AddRef (IntPtr pUnk);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AddRef(native int pUnk) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddRef (pUnk As IntPtr) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AddRef(IntPtr pUnk);" />
      <MemberSignature Language="F#" Value="static member AddRef : nativeint -&gt; int" Usage="System.Runtime.InteropServices.Marshal.AddRef pUnk" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pUnk" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pUnk"><span data-ttu-id="68c54-110">インクリメントするインターフェイスの参照カウント。</span><span class="sxs-lookup"><span data-stu-id="68c54-110">The interface reference count to increment.</span></span></param>
        <summary><span data-ttu-id="68c54-111">指定したインターフェイスの参照カウントをインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="68c54-111">Increments the reference count on the specified interface.</span></span></summary>
        <returns><span data-ttu-id="68c54-112"><paramref name="pUnk" /> パラメーターの参照カウントの新しい値。</span><span class="sxs-lookup"><span data-stu-id="68c54-112">The new value of the reference count on the <paramref name="pUnk" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-113">共通言語ランタイムは、このメソッドを直接使用する必要がないようにする COM オブジェクトの参照カウントを管理します。</span><span class="sxs-lookup"><span data-stu-id="68c54-113">The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly.</span></span> <span data-ttu-id="68c54-114">カスタム マーシャラーでは、テストなどのまれなケースでした方オブジェクトの有効期間を手動で操作するために必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-114">In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object's lifetime manually.</span></span> <span data-ttu-id="68c54-115">呼び出した後<xref:System.Runtime.InteropServices.Marshal.AddRef%2A>などのメソッドを使用して、参照カウントをデクリメントする必要があります<xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-115">After calling <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, you must decrement the reference count by using a method such as <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="68c54-116">戻り値に依存しない<xref:System.Runtime.InteropServices.Marshal.AddRef%2A>などがありますいない安定します。</span><span class="sxs-lookup"><span data-stu-id="68c54-116">Do not rely on the return value of <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, as it can sometimes be unstable.</span></span>  
  
 <span data-ttu-id="68c54-117">呼び出すことができます<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=nameWithType>、 <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=nameWithType>、または<xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=nameWithType>を取得する、<xref:System.IntPtr>を表す値を[IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003)インターフェイス ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-117">You can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=nameWithType>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=nameWithType>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=nameWithType> to obtain an <xref:System.IntPtr> value that represents an [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) interface pointer.</span></span> <span data-ttu-id="68c54-118">これらのメソッドを使用することもでき、<xref:System.Runtime.InteropServices.Marshal.AddRef%2A>マネージ オブジェクトの COM 呼び出し可能ラッパーによって表される COM インターフェイスを取得するマネージ オブジェクトのメソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-118">You can also use these methods and the <xref:System.Runtime.InteropServices.Marshal.AddRef%2A> method on managed objects to obtain the COM interfaces represented by the managed object's COM callable wrapper.</span></span> <span data-ttu-id="68c54-119">このラッパー型の詳細に慣れていない場合は、次を参照してください。 [COM 呼び出し可能ラッパー](~/docs/framework/interop/com-callable-wrapper.md)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-119">If you are not familiar with the details of this wrapper type, see [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-120">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-120">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-121">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-121">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=148625"><span data-ttu-id="68c54-122">Iunknown::addref</span><span class="sxs-lookup"><span data-stu-id="68c54-122">IUnknown::AddRef</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AllocCoTaskMem">
      <MemberSignature Language="C#" Value="public static IntPtr AllocCoTaskMem (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int AllocCoTaskMem(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocCoTaskMem (cb As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr AllocCoTaskMem(int cb);" />
      <MemberSignature Language="F#" Value="static member AllocCoTaskMem : int -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.AllocCoTaskMem cb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb"><span data-ttu-id="68c54-123">割り当てるメモリ ブロックのサイズ。</span><span class="sxs-lookup"><span data-stu-id="68c54-123">The size of the block of memory to be allocated.</span></span></param>
        <summary><span data-ttu-id="68c54-124">COM タスク メモリ アロケーターから、指定したサイズのメモリ ブロックを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="68c54-124">Allocates a block of memory of specified size from the COM task memory allocator.</span></span></summary>
        <returns><span data-ttu-id="68c54-125">割り当てられたメモリ ブロックのアドレスを表す整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-125">An integer representing the address of the block of memory allocated.</span></span> <span data-ttu-id="68c54-126">このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> を使用して解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-126">This memory must be released with <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-127"><xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> API のメソッドでは、2 つのメモリ割り当ての 1 つ、<xref:System.Runtime.InteropServices.Marshal>クラス。</span><span class="sxs-lookup"><span data-stu-id="68c54-127"><xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> is one of two memory allocation API methods in the <xref:System.Runtime.InteropServices.Marshal> class.</span></span> <span data-ttu-id="68c54-128">(<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=nameWithType>は、その他)。返される最初のメモリの内容が定義されていないと、割り当てられたメモリは、要求されたバイト数より大きくすることができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-128">(<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=nameWithType> is the other.) The initial memory content returned is undefined, and the allocated memory can be larger than the requested number of bytes.</span></span> <span data-ttu-id="68c54-129">このメソッドは、COM を公開する[CoTaskMemAlloc](https://go.microsoft.com/fwlink/?LinkId=148626) COM タスク メモリ アロケーターと呼ばれる関数。</span><span class="sxs-lookup"><span data-stu-id="68c54-129">This method exposes the COM [CoTaskMemAlloc](https://go.microsoft.com/fwlink/?LinkId=148626) function, which is referred to as the COM task memory allocator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-130">メモリが不足しているため要求を満たせません。</span><span class="sxs-lookup"><span data-stu-id="68c54-130">There is insufficient memory to satisfy the request.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-131">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-131">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-132">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-132">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AllocHGlobal">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-133">プロセスのアンマネージ メモリからメモリを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="68c54-133">Allocates memory from the unmanaged memory of the process.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AllocHGlobal">
      <MemberSignature Language="C#" Value="public static IntPtr AllocHGlobal (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int AllocHGlobal(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocHGlobal (cb As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr AllocHGlobal(int cb);" />
      <MemberSignature Language="F#" Value="static member AllocHGlobal : int -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.AllocHGlobal cb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb"><span data-ttu-id="68c54-134">メモリ内で必要なバイト数。</span><span class="sxs-lookup"><span data-stu-id="68c54-134">The required number of bytes in memory.</span></span></param>
        <summary><span data-ttu-id="68c54-135">指定したバイト数を使用して、プロセスのアンマネージ メモリからメモリを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="68c54-135">Allocates memory from the unmanaged memory of the process by using the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="68c54-136">新しく割り当てられたメモリへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-136">A pointer to the newly allocated memory.</span></span> <span data-ttu-id="68c54-137">このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> メソッドを使用して解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-137">This memory must be released using the <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-138"><xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> 2 つのメモリ割り当て方法の 1 つ、<xref:System.Runtime.InteropServices.Marshal>クラス。</span><span class="sxs-lookup"><span data-stu-id="68c54-138"><xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> is one of two memory allocation methods in the <xref:System.Runtime.InteropServices.Marshal> class.</span></span> <span data-ttu-id="68c54-139">(<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=nameWithType>は、その他)。このメソッドは公開 Win32 [LocalAlloc](https://go.microsoft.com/fwlink/?LinkId=148628)関数を Kernel32.dll から。</span><span class="sxs-lookup"><span data-stu-id="68c54-139">(<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=nameWithType> is the other.) This method exposes the Win32 [LocalAlloc](https://go.microsoft.com/fwlink/?LinkId=148628) function from Kernel32.dll.</span></span>  
  
 <span data-ttu-id="68c54-140">ときに<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>呼び出し`LocalAlloc`、渡します、`LMEM_FIXED`フラグは、場所にロックするメモリを割り当てられています。</span><span class="sxs-lookup"><span data-stu-id="68c54-140">When <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> calls `LocalAlloc`, it passes a `LMEM_FIXED` flag, which causes the allocated memory to be locked in place.</span></span> <span data-ttu-id="68c54-141">また、割り当てられたメモリがないゼロで埋められます。</span><span class="sxs-lookup"><span data-stu-id="68c54-141">Also, the allocated memory is not zero-filled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-142">次の例では、<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> メソッドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-142">The following example demonstrates calling the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> method.</span></span> <span data-ttu-id="68c54-143">このコード例が示されている例の一部、<xref:System.Runtime.InteropServices.Marshal>クラス。</span><span class="sxs-lookup"><span data-stu-id="68c54-143">This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.</span></span>  
  
 [!code-cpp[Marshal#4](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#4)]
 [!code-csharp[Marshal#4](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#4)]
 [!code-vb[Marshal#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-144">メモリが不足しているため要求を満たせません。</span><span class="sxs-lookup"><span data-stu-id="68c54-144">There is insufficient memory to satisfy the request.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-145">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-145">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-146">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-146">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="AllocHGlobal">
      <MemberSignature Language="C#" Value="public static IntPtr AllocHGlobal (IntPtr cb);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int AllocHGlobal(native int cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocHGlobal (cb As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr AllocHGlobal(IntPtr cb);" />
      <MemberSignature Language="F#" Value="static member AllocHGlobal : nativeint -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.AllocHGlobal cb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="cb"><span data-ttu-id="68c54-147">メモリ内で必要なバイト数。</span><span class="sxs-lookup"><span data-stu-id="68c54-147">The required number of bytes in memory.</span></span></param>
        <summary><span data-ttu-id="68c54-148">指定したバイト数へのポインターを使用して、プロセスのアンマネージ メモリからメモリを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="68c54-148">Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="68c54-149">新しく割り当てられたメモリへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-149">A pointer to the newly allocated memory.</span></span> <span data-ttu-id="68c54-150">このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> メソッドを使用して解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-150">This memory must be released using the <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-151"><xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> 2 つのメモリ割り当て方法の 1 つ、<xref:System.Runtime.InteropServices.Marshal>クラス。</span><span class="sxs-lookup"><span data-stu-id="68c54-151"><xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> is one of two memory allocation methods in the <xref:System.Runtime.InteropServices.Marshal> class.</span></span> <span data-ttu-id="68c54-152">(<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=nameWithType>は、その他)。このメソッドは公開 Win32 [LocalAlloc](https://go.microsoft.com/fwlink/?LinkID=148628)関数を Kernel32.dll から。</span><span class="sxs-lookup"><span data-stu-id="68c54-152">(<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=nameWithType> is the other.) This method exposes the Win32 [LocalAlloc](https://go.microsoft.com/fwlink/?LinkID=148628) function from Kernel32.dll.</span></span>  
  
 <span data-ttu-id="68c54-153">ときに<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>呼び出し`LocalAlloc`、渡します、`LMEM_FIXED`フラグは、場所にロックするメモリを割り当てられています。</span><span class="sxs-lookup"><span data-stu-id="68c54-153">When <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> calls `LocalAlloc`, it passes a `LMEM_FIXED` flag, which causes the allocated memory to be locked in place.</span></span> <span data-ttu-id="68c54-154">また、割り当てられたメモリがないゼロで埋められます。</span><span class="sxs-lookup"><span data-stu-id="68c54-154">Also, the allocated memory is not zero-filled.</span></span>  
  
 <span data-ttu-id="68c54-155">コード例は、「<xref:System.Runtime.InteropServices.Marshal>と<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-155">For example code, see <xref:System.Runtime.InteropServices.Marshal> and <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-156">メモリが不足しているため要求を満たせません。</span><span class="sxs-lookup"><span data-stu-id="68c54-156">There is insufficient memory to satisfy the request.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-157">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-157">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-158">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-158">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="AreComObjectsAvailableForCleanup">
      <MemberSignature Language="C#" Value="public static bool AreComObjectsAvailableForCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreComObjectsAvailableForCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreComObjectsAvailableForCleanup () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool AreComObjectsAvailableForCleanup();" />
      <MemberSignature Language="F#" Value="static member AreComObjectsAvailableForCleanup : unit -&gt; bool" Usage="System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68c54-159">任意のコンテキストからのランタイム呼び出し可能ラッパー (RCW: Runtime Callable Wrapper) をクリーンアップに使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="68c54-159">Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.</span></span></summary>
        <returns><span data-ttu-id="68c54-160">任意の RCW をクリーンアップに使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="68c54-160"><see langword="true" /> if there are any RCWs available for cleanup; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-161">多くの厳密な依存関係グラフを使用してマネージ コードとネイティブ コード間の参照がある場合は、すべてのオブジェクトをクリーンアップするために長時間かかります。</span><span class="sxs-lookup"><span data-stu-id="68c54-161">If there are a lot of references between managed and native code with deep dependency graphs it can take a long time for all the objects to clean up.</span></span> <span data-ttu-id="68c54-162">GC が実行されるたびには、いくつかの基になる COM オブジェクトをさらにリリースされる、Rcw が解放されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-162">Each time a GC runs it will free up some number of RCWs, which will in turn release the underlying COM objects.</span></span> <span data-ttu-id="68c54-163">COM オブジェクトは、マネージ参照を解放しより多くのオブジェクトのクリーンアップに使用できる、次回、プロセスを開始、GC の実行をもう一度です。</span><span class="sxs-lookup"><span data-stu-id="68c54-163">Those COM objects will then release their managed references and make more objects available for cleanup the next time a GC runs, which starts the process over again.</span></span>  
  
 <span data-ttu-id="68c54-164"><xref:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup%2A>メソッドは、アプリケーションでの GC のサイクルの数を特定する方法を提供します。収集と GC。WaitForPendingFinalizers は、すべてをクリーンアップするために行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-164">The <xref:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup%2A> method provides a way for the application to determine how many cycles of GC.Collect and GC.WaitForPendingFinalizers need to happen in order to clean everything up.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-165">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-165">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-166">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-166">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BindToMoniker">
      <MemberSignature Language="C#" Value="public static object BindToMoniker (string monikerName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object BindToMoniker(string monikerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindToMoniker (monikerName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ BindToMoniker(System::String ^ monikerName);" />
      <MemberSignature Language="F#" Value="static member BindToMoniker : string -&gt; obj" Usage="System.Runtime.InteropServices.Marshal.BindToMoniker monikerName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="monikerName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="monikerName"><span data-ttu-id="68c54-167">必要なインターフェイス ポインターに対応するモニカー。</span><span class="sxs-lookup"><span data-stu-id="68c54-167">The moniker corresponding to the desired interface pointer.</span></span></param>
        <summary><span data-ttu-id="68c54-168">指定したモニカーによって識別されるインターフェイス ポインターを取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-168">Gets an interface pointer identified by the specified moniker.</span></span></summary>
        <returns><span data-ttu-id="68c54-169"><paramref name="monikerName" /> パラメーターによって識別されるインターフェイス ポインターへの参照を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-169">An object containing a reference to the interface pointer identified by the <paramref name="monikerName" /> parameter.</span></span> <span data-ttu-id="68c54-170">モニカーは名前であり、この場合、モニカーはインターフェイスによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-170">A moniker is a name, and in this case, the moniker is defined by an interface.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-171"><xref:System.Runtime.InteropServices.Marshal.BindToMoniker%2A> COM に公開`BindToMoniker`メソッドで、必要な任意の COM インターフェイスにキャスト可能なオブジェクトを生成します。</span><span class="sxs-lookup"><span data-stu-id="68c54-171"><xref:System.Runtime.InteropServices.Marshal.BindToMoniker%2A> exposes the COM `BindToMoniker` method, which produces an object that you can cast to any COM interface you require.</span></span> <span data-ttu-id="68c54-172">このメソッドは、同じ機能を提供します。、 `GetObject` Visual Basic 6.0 のメソッドと[!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="68c54-172">This method provides the same functionality as the `GetObject` method in Visual Basic 6.0 and [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="68c54-173">アンマネージド <see langword="BindToMoniker" /> メソッドから、認識されない HRESULT が返されました。</span><span class="sxs-lookup"><span data-stu-id="68c54-173">An unrecognized HRESULT was returned by the unmanaged <see langword="BindToMoniker" /> method.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-174">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-174">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-175">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-175">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BufferToBSTR">
      <MemberSignature Language="C#" Value="public static IntPtr BufferToBSTR (Array ptr, int slen);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int BufferToBSTR(class System.Array ptr, int32 slen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.BufferToBSTR(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BufferToBSTR (ptr As Array, slen As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr BufferToBSTR(Array ^ ptr, int slen);" />
      <MemberSignature Language="F#" Value="static member BufferToBSTR : Array * int -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.BufferToBSTR (ptr, slen)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Array" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="slen" Type="System.Int32" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="ptr">To be added.</param>
        <param name="slen">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeWrapperHandleStrength">
      <MemberSignature Language="C#" Value="public static void ChangeWrapperHandleStrength (object otp, bool fIsWeak);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChangeWrapperHandleStrength(object otp, bool fIsWeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ChangeWrapperHandleStrength (otp As Object, fIsWeak As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChangeWrapperHandleStrength(System::Object ^ otp, bool fIsWeak);" />
      <MemberSignature Language="F#" Value="static member ChangeWrapperHandleStrength : obj * bool -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength (otp, fIsWeak)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otp" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="fIsWeak" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="otp"><span data-ttu-id="68c54-176">参照カウント付きハンドルを保持する CCW を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-176">The object whose CCW holds a reference counted handle.</span></span> <span data-ttu-id="68c54-177">CCW の参照カウントがゼロを超える場合はハンドルが strong。それ以外の場合は weak。</span><span class="sxs-lookup"><span data-stu-id="68c54-177">The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.</span></span></param>
        <param name="fIsWeak"><span data-ttu-id="68c54-178"><see langword="true" /> ハンドルの強度を変更する、<paramref name="otp" />を weak に参照カウントに関係なくパラメーター<see langword="false" />ハンドルの強さをリセット<paramref name="otp" />カウントされた参照にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-178"><see langword="true" /> to change the strength of the handle on the <paramref name="otp" /> parameter to weak, regardless of its reference count; <see langword="false" /> to reset the handle strength on <paramref name="otp" /> to be reference counted.</span></span></param>
        <summary><span data-ttu-id="68c54-179">オブジェクトの [ COM 呼び出し可能ラッパー ](~/docs/framework/interop/com-callable-wrapper.md) (CCW) ハンドルの強度を変更します。</span><span class="sxs-lookup"><span data-stu-id="68c54-179">Changes the strength of an object's [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md) (CCW) handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-180"><xref:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength%2A> オブジェクト プール機能が使用され、ユーザー コードによって、直接は呼び出すことはありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-180"><xref:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength%2A> is used for object pooling functionality and should never be called by user code directly.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-181">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-181">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-182">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-182">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CleanupUnusedObjectsInCurrentContext">
      <MemberSignature Language="C#" Value="public static void CleanupUnusedObjectsInCurrentContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CleanupUnusedObjectsInCurrentContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CleanupUnusedObjectsInCurrentContext ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CleanupUnusedObjectsInCurrentContext();" />
      <MemberSignature Language="F#" Value="static member CleanupUnusedObjectsInCurrentContext : unit -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68c54-183">現在のコンテキストで割り当てられたすべての <see href="https://docs.microsoft.com/dotnet/framework/interop/runtime-callable-wrapper"> ランタイム呼び出し可能ラッパー </see> (RCW: Runtime Callable Wrapper) をクリーンアップすることをランタイムに通知します。</span><span class="sxs-lookup"><span data-stu-id="68c54-183">Notifies the runtime to clean up all <see href="https://docs.microsoft.com/dotnet/framework/interop/runtime-callable-wrapper">Runtime Callable Wrappers</see> (RCWs) allocated in the current context.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-184">相互運用システムでメッセージをポンプ中に、Rcw をクリーンアップしようとします。</span><span class="sxs-lookup"><span data-stu-id="68c54-184">The interop system pumps messages while it attempts to clean up RCWs.</span></span> <span data-ttu-id="68c54-185">これにより、十分なほど頻繁にポンプを行わないアプリケーションを含むすべてのアプリケーションでシングル スレッド アパートメント (STA) Rcw の動作をクリーンアップします。</span><span class="sxs-lookup"><span data-stu-id="68c54-185">This ensures that cleanup for single-threaded apartment (STA) RCWs happens in all applications, including applications that do not pump often enough.</span></span> <span data-ttu-id="68c54-186">ただし、適切にポンプは一部のアプリケーションは非常に重視すると、ポンプが発生します。</span><span class="sxs-lookup"><span data-stu-id="68c54-186">However, some applications that do pump appropriately are very sensitive to where pumping occurs.</span></span> <span data-ttu-id="68c54-187">ときに相互運用システムに、予期しなかった場所で、これらのアプリケーションでメッセージをポンプする場合、アプリケーションには、診断が困難な再入の問題が発生する可能性が。</span><span class="sxs-lookup"><span data-stu-id="68c54-187">When the interop system pumps messages in these applications, in places that are unexpected, , the application can encounter reentrancy issues that are difficult to diagnose.</span></span> <span data-ttu-id="68c54-188">そのため、アプリケーションは、特定の STA にコントロール クリーンアップの Rcw 自身のポンプを制御できる必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-188">Therefore, applications need to be able to control their own pumping for a particular STA and to control the clean-up of RCWs.</span></span>  
  
 <span data-ttu-id="68c54-189">ただし、開発者がアプリケーション内のスレッドのサブセットを制御する多くの場合のみ、したがってことはできませんのすべてのスレッドを適切に挿入するには。</span><span class="sxs-lookup"><span data-stu-id="68c54-189">However, developers often only control a subset of the threads in their application and thus cannot ensure that all threads are pumping appropriately.</span></span>  
  
 <span data-ttu-id="68c54-190">この問題を解決する方法は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="68c54-190">To solve this problem:</span></span>  
  
1.  <span data-ttu-id="68c54-191">使用して、<xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A?displayProperty=nameWithType>メソッド、Rcw と発生すると、スレッドごとにメッセージのポンプの自動クリーンアップをオフにします。</span><span class="sxs-lookup"><span data-stu-id="68c54-191">Use the <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A?displayProperty=nameWithType> method to turn off automatic cleanup of RCWs, and the message pumping that occurs, on a per-thread basis.</span></span> <span data-ttu-id="68c54-192">これは、自動クリーンアップ、および対応するメッセージをポンプを無効にできます。</span><span class="sxs-lookup"><span data-stu-id="68c54-192">This allows developers to opt out of automatic clean-up, and the corresponding message pumping.</span></span>  
  
2.  <span data-ttu-id="68c54-193">使用して、<xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A>メソッドは、現在のコンテキストで割り当てられているすべての Rcw をクリーンアップするランタイムに通知します。</span><span class="sxs-lookup"><span data-stu-id="68c54-193">Use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A> method to notify the runtime to clean up all RCWs that are allocated in the current context.</span></span> <span data-ttu-id="68c54-194">このメソッドは、ランタイムは、現在のコンテキストでクリーンアップを実行するときに正確に制御できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-194">This companion method allows developers to precisely control when the runtime performs cleanup in the current context.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-195">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-195">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-196">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-196">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Copy">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-197">マネージド配列からアンマネージド メモリ ポインター、またはアンマネージド メモリ ポインターからマネージド配列にデータをコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-197">Copies data from a managed array to an unmanaged memory pointer, or from an unmanaged memory pointer to a managed array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (byte[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(unsigned int8[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As Byte(), startIndex As Integer, destination As IntPtr, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(cli::array &lt;System::Byte&gt; ^ source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : byte[] * int * nativeint * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, startIndex, destination, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-198">コピー元の 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-198">The one-dimensional array to copy from.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-199">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-199">The zero-based index in the source array where copying should start.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-200">コピー先のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-200">The memory pointer to copy to.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-201">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-201">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-202">1 次元の 8 ビット符号なし整数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-202">Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-203">このメソッドを使用すると、1 次元マネージ配列のサブセットをアンマネージ C スタイル配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-203">You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-204">次の例では、アンマネージ メモリに配列をコピーを使用して、 <xref:System.Runtime.InteropServices.Marshal.Copy%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.IntPtr%2CSystem.Int32%29> 、オーバー ロードし、マネージ メモリに再度アンマネージ配列を使用して、コピー、<xref:System.Runtime.InteropServices.Marshal.Copy%28System.IntPtr%2CSystem.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="68c54-204">The following example copies an array to unmanaged memory by using the <xref:System.Runtime.InteropServices.Marshal.Copy%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.IntPtr%2CSystem.Int32%29> overload, and then copies the unmanaged array back to managed memory by using the <xref:System.Runtime.InteropServices.Marshal.Copy%28System.IntPtr%2CSystem.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy-byte#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy-byte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-205"><paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-205"><paramref name="startIndex" /> and <paramref name="length" /> are not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-206"><paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-206"><paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-207">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-207">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-208">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-208">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (char[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(char[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As Char(), startIndex As Integer, destination As IntPtr, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(cli::array &lt;char&gt; ^ source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : char[] * int * nativeint * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, startIndex, destination, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-209">コピー元の 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-209">The one-dimensional array to copy from.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-210">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-210">The zero-based index in the source array where copying should start.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-211">コピー先のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-211">The memory pointer to copy to.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-212">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-212">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-213">1 次元の文字列のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-213">Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-214">このメソッドを使用すると、1 次元マネージ配列のサブセットをアンマネージ C スタイル配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-214">You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-215">次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-215">The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy-char#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy-char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-216"><paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-216"><paramref name="startIndex" /> and <paramref name="length" /> are not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-217"><paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-217"><paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-218">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-218">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-219">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-219">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (double[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(float64[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As Double(), startIndex As Integer, destination As IntPtr, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(cli::array &lt;double&gt; ^ source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : double[] * int * nativeint * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, startIndex, destination, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Double[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-220">コピー元の 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-220">The one-dimensional array to copy from.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-221">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-221">The zero-based index in the source array where copying should start.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-222">コピー先のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-222">The memory pointer to copy to.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-223">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-223">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-224">1 次元の倍精度浮動小数点数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-224">Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-225">このメソッドを使用すると、1 次元マネージ配列のサブセットをアンマネージ C スタイル配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-225">You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-226">次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-226">The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy-double#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy-double#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-227"><paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-227"><paramref name="startIndex" /> and <paramref name="length" /> are not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-228"><paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-228"><paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-229">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-229">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-230">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-230">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (short[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(int16[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As Short(), startIndex As Integer, destination As IntPtr, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(cli::array &lt;short&gt; ^ source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : int16[] * int * nativeint * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, startIndex, destination, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Int16[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-231">コピー元の 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-231">The one-dimensional array to copy from.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-232">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-232">The zero-based index in the source array where copying should start.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-233">コピー先のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-233">The memory pointer to copy to.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-234">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-234">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-235">1 次元の 16 ビット符号付き整数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-235">Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-236">このメソッドを使用すると、1 次元マネージ配列のサブセットをアンマネージ C スタイル配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-236">You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-237">次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-237">The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy-int16#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy-int16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-238"><paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-238"><paramref name="startIndex" /> and <paramref name="length" /> are not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-239"><paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-239"><paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-240">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-240">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-241">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-241">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (int[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(int32[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As Integer(), startIndex As Integer, destination As IntPtr, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(cli::array &lt;int&gt; ^ source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : int[] * int * nativeint * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, startIndex, destination, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Int32[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-242">コピー元の 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-242">The one-dimensional array to copy from.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-243">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-243">The zero-based index in the source array where copying should start.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-244">コピー先のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-244">The memory pointer to copy to.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-245">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-245">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-246">1 次元の 32 ビット符号付き整数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-246">Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-247">このメソッドを使用すると、1 次元マネージ配列のサブセットをアンマネージ C スタイル配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-247">You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-248">次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-248">The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy-int#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy-int#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-249"><paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-249"><paramref name="startIndex" /> and <paramref name="length" /> are not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-250"><paramref name="startIndex" /> または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-250"><paramref name="startIndex" /> or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-251">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-251">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-252">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-252">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (long[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(int64[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As Long(), startIndex As Integer, destination As IntPtr, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(cli::array &lt;long&gt; ^ source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : int64[] * int * nativeint * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, startIndex, destination, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Int64[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-253">コピー元の 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-253">The one-dimensional array to copy from.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-254">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-254">The zero-based index in the source array where copying should start.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-255">コピー先のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-255">The memory pointer to copy to.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-256">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-256">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-257">1 次元の 64 ビット符号付き整数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-257">Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-258">このメソッドを使用すると、1 次元マネージ配列のサブセットをアンマネージ C スタイル配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-258">You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-259">次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-259">The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy-int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy-int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-260"><paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-260"><paramref name="startIndex" /> and <paramref name="length" /> are not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-261"><paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-261"><paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-262">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-262">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-263">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-263">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, byte[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, unsigned int8[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As IntPtr, destination As Byte(), startIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(IntPtr source, cli::array &lt;System::Byte&gt; ^ destination, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : nativeint * byte[] * int * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, destination, startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-264">コピー元のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-264">The memory pointer to copy from.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-265">コピー先の配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-265">The array to copy to.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-266">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-266">The zero-based index in the destination array where copying should start.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-267">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-267">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-268">アンマネージド メモリ ポインターのデータを 8 ビット符号なし整数のマネージド配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-268">Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-269">放置すると、C スタイルの配列を含まない範囲については、防止、`startIndex`と`length`パラメーターの検証が行わします。</span><span class="sxs-lookup"><span data-stu-id="68c54-269">Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated.</span></span> <span data-ttu-id="68c54-270">対応するために、アンマネージ データ、`source`パラメーターはその有用性に関係なくマネージ配列を設定します。</span><span class="sxs-lookup"><span data-stu-id="68c54-270">Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness.</span></span> <span data-ttu-id="68c54-271">このメソッドを呼び出す前に、適切なサイズでマネージ配列を初期化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-271">You must initialize the managed array with the appropriate size before calling this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-272">次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-272">The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy-byte#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy-byte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-273"><paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-273"><paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-274">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-274">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-275">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-275">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, char[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, char[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As IntPtr, destination As Char(), startIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(IntPtr source, cli::array &lt;char&gt; ^ destination, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : nativeint * char[] * int * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, destination, startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-276">コピー元のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-276">The memory pointer to copy from.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-277">コピー先の配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-277">The array to copy to.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-278">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-278">The zero-based index in the destination array where copying should start.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-279">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-279">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-280">アンマネージド メモリ ポインターのデータを文字列のマネージド配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-280">Copies data from an unmanaged memory pointer to a managed character array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-281">放置すると、C スタイルの配列を含まない範囲については、防止、`startIndex`と`length`パラメーターの検証が行わします。</span><span class="sxs-lookup"><span data-stu-id="68c54-281">Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated.</span></span> <span data-ttu-id="68c54-282">対応するために、アンマネージ データ、`source`パラメーターはその有用性に関係なくマネージ配列を設定します。</span><span class="sxs-lookup"><span data-stu-id="68c54-282">Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness.</span></span> <span data-ttu-id="68c54-283">このメソッドを呼び出す前に、適切なサイズでマネージ配列を初期化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-283">You must initialize the managed array with the appropriate size before calling this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-284">次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-284">The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy-char#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy-char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-285"><paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-285"><paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-286">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-286">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-287">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-287">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, double[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, float64[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As IntPtr, destination As Double(), startIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(IntPtr source, cli::array &lt;double&gt; ^ destination, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : nativeint * double[] * int * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, destination, startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.Double[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-288">コピー元のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-288">The memory pointer to copy from.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-289">コピー先の配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-289">The array to copy to.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-290">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-290">The zero-based index in the destination array where copying should start.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-291">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-291">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-292">アンマネージド メモリ ポインターのデータを倍精度浮動小数点数のマネージド配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-292">Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-293">放置すると、C スタイルの配列を含まない範囲については、防止、`startIndex`と`length`パラメーターの検証が行わします。</span><span class="sxs-lookup"><span data-stu-id="68c54-293">Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated.</span></span> <span data-ttu-id="68c54-294">対応するために、アンマネージ データ、`source`パラメーターはその有用性に関係なくマネージ配列を設定します。</span><span class="sxs-lookup"><span data-stu-id="68c54-294">Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness.</span></span> <span data-ttu-id="68c54-295">このメソッドを呼び出す前に、適切なサイズでマネージ配列を初期化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-295">You must initialize the managed array with the appropriate size before calling this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-296">次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-296">The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy-double#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy-double#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-297"><paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-297"><paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-298">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-298">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-299">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-299">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, short[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, int16[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As IntPtr, destination As Short(), startIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(IntPtr source, cli::array &lt;short&gt; ^ destination, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : nativeint * int16[] * int * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, destination, startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.Int16[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-300">コピー元のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-300">The memory pointer to copy from.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-301">コピー先の配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-301">The array to copy to.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-302">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-302">The zero-based index in the destination array where copying should start.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-303">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-303">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-304">アンマネージド メモリ ポインターのデータを 16 ビット符号付き整数のマネージド配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-304">Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-305">放置すると、C スタイルの配列を含まない範囲については、防止、`startIndex`と`length`パラメーターの検証が行わします。</span><span class="sxs-lookup"><span data-stu-id="68c54-305">Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated.</span></span> <span data-ttu-id="68c54-306">対応するために、アンマネージ データ、`source`パラメーターはその有用性に関係なくマネージ配列を設定します。</span><span class="sxs-lookup"><span data-stu-id="68c54-306">Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness.</span></span> <span data-ttu-id="68c54-307">このメソッドを呼び出す前に、適切なサイズでマネージ配列を初期化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-307">You must initialize the managed array with the appropriate size before calling this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-308">次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-308">The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy-int16#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy-int16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-309"><paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-309"><paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-310">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-310">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-311">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-311">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, int[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, int32[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As IntPtr, destination As Integer(), startIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(IntPtr source, cli::array &lt;int&gt; ^ destination, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : nativeint * int[] * int * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, destination, startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.Int32[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-312">コピー元のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-312">The memory pointer to copy from.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-313">コピー先の配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-313">The array to copy to.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-314">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-314">The zero-based index in the destination array where copying should start.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-315">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-315">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-316">アンマネージド メモリ ポインターのデータを 32 ビット符号付き整数のマネージド配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-316">Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-317">放置すると、C スタイルの配列を含まない範囲については、防止、`startIndex`と`length`パラメーターの検証が行わします。</span><span class="sxs-lookup"><span data-stu-id="68c54-317">Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated.</span></span> <span data-ttu-id="68c54-318">対応するために、アンマネージ データ、`source`パラメーターはその有用性に関係なくマネージ配列を設定します。</span><span class="sxs-lookup"><span data-stu-id="68c54-318">Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness.</span></span> <span data-ttu-id="68c54-319">このメソッドを呼び出す前に、適切なサイズでマネージ配列を初期化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-319">You must initialize the managed array with the appropriate size before calling this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-320">次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-320">The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy-int#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy-int#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-321"><paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-321"><paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-322">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-322">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-323">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-323">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, long[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, int64[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As IntPtr, destination As Long(), startIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(IntPtr source, cli::array &lt;long&gt; ^ destination, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : nativeint * int64[] * int * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, destination, startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.Int64[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-324">コピー元のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-324">The memory pointer to copy from.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-325">コピー先の配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-325">The array to copy to.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-326">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-326">The zero-based index in the destination array where copying should start.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-327">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-327">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-328">アンマネージド メモリ ポインターのデータを 64 ビット符号付き整数のマネージド配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-328">Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-329">放置すると、C スタイルの配列を含まない範囲については、防止、`startIndex`と`length`パラメーターの検証が行わします。</span><span class="sxs-lookup"><span data-stu-id="68c54-329">Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated.</span></span> <span data-ttu-id="68c54-330">対応するために、アンマネージ データ、`source`パラメーターはその有用性に関係なくマネージ配列を設定します。</span><span class="sxs-lookup"><span data-stu-id="68c54-330">Thus, the unmanaged data corresponding to the`source` parameter populates the managed array regardless of its usefulness.</span></span> <span data-ttu-id="68c54-331">このメソッドを呼び出す前に、適切なサイズでマネージ配列を初期化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-331">You must initialize the managed array with the appropriate size before calling this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-332">次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-332">The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy-int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy-int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-333"><paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-333"><paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-334">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-334">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-335">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-335">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, IntPtr[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, native int[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As IntPtr, destination As IntPtr(), startIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(IntPtr source, cli::array &lt;IntPtr&gt; ^ destination, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : nativeint * nativeint[] * int * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, destination, startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destination" Type="System.IntPtr[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-336">コピー元のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-336">The memory pointer to copy from.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-337">コピー先の配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-337">The array to copy to.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-338">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-338">The zero-based index in the destination array where copying should start.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-339">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-339">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-340">アンマネージド メモリ ポインターのデータをマネージド <see cref="T:System.IntPtr" /> 配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-340">Copies data from an unmanaged memory pointer to a managed <see cref="T:System.IntPtr" /> array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-341">放置すると、C スタイルの配列を含まない範囲については、防止、`startIndex`と`length`パラメーターの検証が行わします。</span><span class="sxs-lookup"><span data-stu-id="68c54-341">Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated.</span></span> <span data-ttu-id="68c54-342">対応する非管理対象のデータ、そのため、`source`パラメーターはその有用性に関係なくマネージ配列を設定します。</span><span class="sxs-lookup"><span data-stu-id="68c54-342">Therefore, the unmanaged data that corresponds to the `source` parameter populates the managed array regardless of its usefulness.</span></span> <span data-ttu-id="68c54-343">呼び出しの前に適切なサイズでマネージ配列を初期化する必要があります、<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-343">You must initialize the managed array with the appropriate size before calling the <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-344"><paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-344"><paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-345">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-345">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-346">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-346">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, float[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, float32[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As IntPtr, destination As Single(), startIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(IntPtr source, cli::array &lt;float&gt; ^ destination, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : nativeint * single[] * int * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, destination, startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.Single[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-347">コピー元のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-347">The memory pointer to copy from.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-348">コピー先の配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-348">The array to copy to.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-349">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-349">The zero-based index in the destination array where copying should start.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-350">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-350">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-351">アンマネージド メモリ ポインターのデータを単精度浮動小数点数のマネージド配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-351">Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-352">放置すると、C スタイルの配列を含まない範囲については、防止、`startIndex`と`length`パラメーターの検証が行わします。</span><span class="sxs-lookup"><span data-stu-id="68c54-352">Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated.</span></span> <span data-ttu-id="68c54-353">対応するために、アンマネージ データ、`source`パラメーターはその有用性に関係なくマネージ配列を設定します。</span><span class="sxs-lookup"><span data-stu-id="68c54-353">Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness.</span></span> <span data-ttu-id="68c54-354">このメソッドを呼び出す前に、適切なサイズでマネージ配列を初期化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-354">You must initialize the managed array with the appropriate size before calling this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-355"><paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-355"><paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-356">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-356">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-357">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-357">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As IntPtr(), startIndex As Integer, destination As IntPtr, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(cli::array &lt;IntPtr&gt; ^ source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : nativeint[] * int * nativeint * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, startIndex, destination, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destination" Type="System.IntPtr" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-358">コピー元の 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-358">The one-dimensional array to copy from.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-359">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-359">The zero-based index in the source array where copying should start.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-360">コピー先のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-360">The memory pointer to copy to.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-361">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-361">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-362">1 次元の <see cref="T:System.IntPtr" /> マネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-362">Copies data from a one-dimensional, managed <see cref="T:System.IntPtr" /> array to an unmanaged memory pointer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-363">このメソッドを使用するには管理されている 1 次元のサブセットをコピーする<xref:System.IntPtr>アンマネージ C スタイル配列への配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-363">You can use this method to copy a subset of a one-dimensional managed <xref:System.IntPtr> array to an unmanaged C-style array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-364"><paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-364"><paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-365">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-365">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-366">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-366">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (float[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(float32[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (source As Single(), startIndex As Integer, destination As IntPtr, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(cli::array &lt;float&gt; ^ source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : single[] * int * nativeint * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Copy (source, startIndex, destination, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Single[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="68c54-367">コピー元の 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-367">The one-dimensional array to copy from.</span></span></param>
        <param name="startIndex"><span data-ttu-id="68c54-368">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="68c54-368">The zero-based index in the source array where copying should start.</span></span></param>
        <param name="destination"><span data-ttu-id="68c54-369">コピー先のメモリ ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-369">The memory pointer to copy to.</span></span></param>
        <param name="length"><span data-ttu-id="68c54-370">コピーする配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-370">The number of array elements to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-371">1 次元の単精度浮動小数点数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-371">Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-372">このメソッドを使用すると、1 次元マネージ配列のサブセットをアンマネージ C スタイル配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-372">You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-373"><paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-373"><paramref name="startIndex" /> and <paramref name="length" /> are not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-374"><paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-374"><paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-375">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-375">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-376">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-376">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateAggregatedObject">
      <MemberSignature Language="C#" Value="public static IntPtr CreateAggregatedObject (IntPtr pOuter, object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int CreateAggregatedObject(native int pOuter, object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAggregatedObject (pOuter As IntPtr, o As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr CreateAggregatedObject(IntPtr pOuter, System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member CreateAggregatedObject : nativeint * obj -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.CreateAggregatedObject (pOuter, o)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("CreateAggregatedObject(IntPtr, Object) may be unavailable in future releases. Instead, use CreateAggregatedObject&lt;T&gt;(IntPtr, T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296518")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pOuter" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="o" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pOuter"><span data-ttu-id="68c54-377">外部 <see langword="IUnknown" /> ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-377">The outer <see langword="IUnknown" /> pointer.</span></span></param>
        <param name="o"><span data-ttu-id="68c54-378">集約するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-378">An object to aggregate.</span></span></param>
        <summary><span data-ttu-id="68c54-379">指定した COM オブジェクトを使用してマネージド オブジェクトを集約します。</span><span class="sxs-lookup"><span data-stu-id="68c54-379">Aggregates a managed object with the specified COM object.</span></span></summary>
        <returns><span data-ttu-id="68c54-380">マネージド オブジェクトの内部 <see langword="IUnknown" /> ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-380">The inner <see langword="IUnknown" /> pointer of the managed object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-381"><xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A>メソッドは、指定した外部ポインターにマネージ オブジェクトの内部マネージ ポインターを集約し、内部を返します[IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003)マネージ オブジェクトのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-381">The <xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A> method aggregates the inner managed pointer of a managed object with the specified outer pointer, and then returns an inner [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-382"><paramref name="o" /> は [!INCLUDE[wrt](~/includes/wrt-md.md)] オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-382"><paramref name="o" /> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-383">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-383">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-384">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-384">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateAggregatedObject&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr CreateAggregatedObject&lt;T&gt; (IntPtr pOuter, T o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int CreateAggregatedObject&lt;T&gt;(native int pOuter, !!T o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAggregatedObject(Of T) (pOuter As IntPtr, o As T) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static IntPtr CreateAggregatedObject(IntPtr pOuter, T o);" />
      <MemberSignature Language="F#" Value="static member CreateAggregatedObject : nativeint * 'T -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.CreateAggregatedObject (pOuter, o)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="pOuter" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="o" Type="T" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="68c54-385">管理対象のオブジェクトの種類を集計します。</span><span class="sxs-lookup"><span data-stu-id="68c54-385">The type of the managed object to aggregate.</span></span></typeparam>
        <param name="pOuter"><span data-ttu-id="68c54-386">外部 [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-386">The outer [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) pointer.</span></span></param>
        <param name="o"><span data-ttu-id="68c54-387">集計するマネージド オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-387">The managed object to aggregate.</span></span></param>
        <summary><span data-ttu-id="68c54-388">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-388">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-389">指定した COM オブジェクトを使用して、指定した型のマネージド オブジェクトを集約します。</span><span class="sxs-lookup"><span data-stu-id="68c54-389">Aggregates a managed object of the specified type with the specified COM object.</span></span></summary>
        <returns><span data-ttu-id="68c54-390">内部 <see href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</see> マネージド オブジェクトのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-390">The inner <see href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</see> pointer of the managed object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-391"><xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A>メソッドは、指定した外部ポインターに指定した型のマネージ オブジェクトの内部マネージ ポインターを集約し、内部を返す[IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003)マネージ オブジェクトのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-391">The <xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A> method aggregates the inner managed pointer of a managed object of a specified type with the specified outer pointer, and returns an inner [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-392"><paramref name="o" /> は [!INCLUDE[wrt](~/includes/wrt-md.md)] オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-392"><paramref name="o" /> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-393">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-393">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-394">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-394">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateWrapperOfType">
      <MemberSignature Language="C#" Value="public static object CreateWrapperOfType (object o, Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateWrapperOfType(object o, class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateWrapperOfType (o As Object, t As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateWrapperOfType(System::Object ^ o, Type ^ t);" />
      <MemberSignature Language="F#" Value="static member CreateWrapperOfType : obj * Type -&gt; obj" Usage="System.Runtime.InteropServices.Marshal.CreateWrapperOfType (o, t)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("CreateWrapperOfType(Object, Type) may be unavailable in future releases. Instead, use CreateWrapperOfType&lt;T,T2&gt;(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296519")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="68c54-395">ラップされるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-395">The object to be wrapped.</span></span></param>
        <param name="t"><span data-ttu-id="68c54-396">作成するラッパーの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-396">The type of wrapper to create.</span></span></param>
        <summary><span data-ttu-id="68c54-397">指定した型のオブジェクト内の、指定した COM オブジェクトをラップします。</span><span class="sxs-lookup"><span data-stu-id="68c54-397">Wraps the specified COM object in an object of the specified type.</span></span></summary>
        <returns><span data-ttu-id="68c54-398">指定した型のインスタンスとなる新しくラップされたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-398">The newly wrapped object that is an instance of the desired type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-399"><xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%2A> 1 つの COM クラスの型、通常、基本の変換`__ComObject`を別の COM クラスの型の型。</span><span class="sxs-lookup"><span data-stu-id="68c54-399"><xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%2A> converts one COM class type, typically the base `__ComObject` type, to another COM class type.</span></span> <span data-ttu-id="68c54-400">パラメーターによって表される、入力の COM オブジェクト`o`は、[ランタイム呼び出し可能ラッパー](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW)。</span><span class="sxs-lookup"><span data-stu-id="68c54-400">The input COM object, represented by parameter `o`, is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW).</span></span>  
  
 <span data-ttu-id="68c54-401">両方の`t`と`o`パラメーターはクラスのシグネチャを持つは属性を設定する必要があります<xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-401">Both the `t` and `o` parameters must be classes whose signatures are attributed with <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="68c54-402">[Tlbimp.exe (タイプ ライブラリ インポーター)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)ツールは、タイプ ライブラリをインポートするときのこの属性を適用します。</span><span class="sxs-lookup"><span data-stu-id="68c54-402">The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library.</span></span> <span data-ttu-id="68c54-403">ソース コードで RCW を手動で作成する場合は、元の COM のことを示すには、元のコクラスを表すマネージ シグネチャにこの属性を適用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-403">If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.</span></span>  
  
 <span data-ttu-id="68c54-404">Tlbimp.exe でインポート COM[コクラス](https://msdn.microsoft.com/library/333d0904-ffa2-4d25-878d-7422bcd40582)マネージ クラスとインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-404">Tlbimp.exe imports a COM [coclass](https://msdn.microsoft.com/library/333d0904-ffa2-4d25-878d-7422bcd40582) as a managed class and an interface.</span></span> <span data-ttu-id="68c54-405">コクラスのインターフェイスは同じ名前の元のコクラスを備え、マネージ クラスには元のコクラス名"Class"が付加されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-405">The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with "Class".</span></span> <span data-ttu-id="68c54-406">たとえば、コクラスと呼ばれる`MyCoclass`と呼ばれるコクラス インターフェイスになります`MyCoclass`という名前のマネージ クラスと`MyCoclassClass`します。</span><span class="sxs-lookup"><span data-stu-id="68c54-406">For example, a coclass called `MyCoclass` becomes a coclass interface called `MyCoclass` and a managed class called `MyCoclassClass`.</span></span> <span data-ttu-id="68c54-407">`t`インターフェイスではなく、クラスをマネージ クラスを指定することを確認して指定する必要があります (`MyCoclassClass`) と、コクラス インターフェイスではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-407">Since `t` must be a class, not an interface, be sure to specify the managed class (`MyCoclassClass`) and not the coclass interface.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="68c54-408">COM オブジェクトの新しい RCW インスタンスをラップするため、入力の id を紛失した、 [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003)元 RCW によって公開されているポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-408">You lose the identity of the input COM object because a new RCW instance wraps the [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) pointer exposed by the original RCW.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-409"><paramref name="t" /> は <see langword="__ComObject" /> から派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-409"><paramref name="t" /> must derive from <see langword="__ComObject" />.</span></span>  
  
<span data-ttu-id="68c54-410">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-410">-or-</span></span> 
 <span data-ttu-id="68c54-411"><paramref name="t" /> は [!INCLUDE[wrt](~/includes/wrt-md.md)] 型です。</span><span class="sxs-lookup"><span data-stu-id="68c54-411"><paramref name="t" /> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-412"><paramref name="t" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-412">The <paramref name="t" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="68c54-413"><paramref name="o" /> はすべての必要なインターフェイスをサポートしていないため、ソース オブジェクトをターゲットの型に変換することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-413"><paramref name="o" /> cannot be converted to the destination type because it does not support all required interfaces.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-414">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-414">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-415">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-415">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.InteropServices.ComImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CreateWrapperOfType&lt;T,TWrapper&gt;">
      <MemberSignature Language="C#" Value="public static TWrapper CreateWrapperOfType&lt;T,TWrapper&gt; (T o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TWrapper CreateWrapperOfType&lt;T, TWrapper&gt;(!!T o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateWrapperOfType(Of T, TWrapper) (o As T) As TWrapper" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TWrapper&gt;&#xA; static TWrapper CreateWrapperOfType(T o);" />
      <MemberSignature Language="F#" Value="static member CreateWrapperOfType : 'T -&gt; 'Wrapper" Usage="System.Runtime.InteropServices.Marshal.CreateWrapperOfType o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TWrapper</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TWrapper" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="o" Type="T" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="68c54-416">ラップするオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-416">The type of object to wrap.</span></span></typeparam>
        <typeparam name="TWrapper"><span data-ttu-id="68c54-417">返すオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-417">The type of object to return.</span></span></typeparam>
        <param name="o"><span data-ttu-id="68c54-418">ラップされるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-418">The object to be wrapped.</span></span></param>
        <summary><span data-ttu-id="68c54-419">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-419">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-420">指定した型のオブジェクト内の、指定した COM オブジェクトをラップします。</span><span class="sxs-lookup"><span data-stu-id="68c54-420">Wraps the specified COM object in an object of the specified type.</span></span></summary>
        <returns><span data-ttu-id="68c54-421">新しくラップされたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-421">The newly wrapped object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-422"><xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%60%602%28%60%600%29> 型の COM オブジェクトに変換`T`を`TWrapper`COM クラスの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-422"><xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%60%602%28%60%600%29> converts a COM object of type `T` to the `TWrapper` COM class type.</span></span> <span data-ttu-id="68c54-423">パラメーターによって表される、入力の COM オブジェクト`o`は、[ランタイム呼び出し可能ラッパー](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW)。</span><span class="sxs-lookup"><span data-stu-id="68c54-423">The input COM object, represented by parameter `o`, is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW).</span></span>  
  
 <span data-ttu-id="68c54-424">両方の`T`ジェネリック型パラメーターと`o`パラメーターはクラスのシグネチャを持つは属性を設定する必要があります、<xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="68c54-424">Both the `T` generic type parameter and the `o` parameter must be classes whose signatures are attributed with the <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=nameWithType> attribute.</span></span> <span data-ttu-id="68c54-425">[Tlbimp.exe (タイプ ライブラリ インポーター)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)ツールは、タイプ ライブラリをインポートするときのこの属性を適用します。</span><span class="sxs-lookup"><span data-stu-id="68c54-425">The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library.</span></span> <span data-ttu-id="68c54-426">ソース コードで RCW を手動で作成する場合は、元の COM のことを示すには、元のコクラスを表すマネージ シグネチャにこの属性を適用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-426">If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.</span></span>  
  
 <span data-ttu-id="68c54-427">Tlbimp.exe でインポート COM[コクラス](https://msdn.microsoft.com/library/333d0904-ffa2-4d25-878d-7422bcd40582)マネージ クラスとインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-427">Tlbimp.exe imports a COM [coclass](https://msdn.microsoft.com/library/333d0904-ffa2-4d25-878d-7422bcd40582) as a managed class and an interface.</span></span> <span data-ttu-id="68c54-428">コクラスのインターフェイスは同じ名前の元のコクラスを備え、マネージ クラスには元のコクラス名"Class"が付加されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-428">The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with "Class".</span></span> <span data-ttu-id="68c54-429">たとえば、コクラスと呼ばれる`MyCoclass`と呼ばれるコクラス インターフェイスになります`MyCoclass`という名前のマネージ クラスと`MyCoclassClass`します。</span><span class="sxs-lookup"><span data-stu-id="68c54-429">For example, a coclass called `MyCoclass` becomes a coclass interface called `MyCoclass` and a managed class called `MyCoclassClass`.</span></span> <span data-ttu-id="68c54-430">`T`インターフェイスではなく、クラスをマネージ クラスを指定することを確認して指定する必要があります (`MyCoclassClass`) および not、`coclass`インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-430">Because`T` must be a class, not an interface, be sure to specify the managed class (`MyCoclassClass`) and not the `coclass` interface.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="68c54-431">RCW の新しいインスタンスをラップするために、入力の COM オブジェクトの id が失われる、 [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003)元 RCW によって公開されているポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-431">You lose the identity of the input COM object, because a new RCW instance wraps the [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) pointer exposed by the original RCW.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-432"><typeparamref name="T" /> は <see langword="__ComObject" /> から派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-432"><typeparamref name="T" /> must derive from <see langword="__ComObject" />.</span></span>  
  
<span data-ttu-id="68c54-433">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-433">-or-</span></span> 
 <span data-ttu-id="68c54-434"><typeparamref name="T" /> は [!INCLUDE[wrt](~/includes/wrt-md.md)] 型です。</span><span class="sxs-lookup"><span data-stu-id="68c54-434"><typeparamref name="T" /> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="68c54-435">必要なすべてのインターフェイスをサポートしていないため、<paramref name="o" /> は <paramref name="TWrapper" /> に変換できません。</span><span class="sxs-lookup"><span data-stu-id="68c54-435"><paramref name="o" /> cannot be converted to the <paramref name="TWrapper" /> because it does not support all required interfaces.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-436">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-436">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-437">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-437">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DestroyStructure">
      <MemberSignature Language="C#" Value="public static void DestroyStructure (IntPtr ptr, Type structuretype);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DestroyStructure(native int ptr, class System.Type structuretype) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DestroyStructure (ptr As IntPtr, structuretype As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DestroyStructure(IntPtr ptr, Type ^ structuretype);" />
      <MemberSignature Language="F#" Value="static member DestroyStructure : nativeint * Type -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.DestroyStructure (ptr, structuretype)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("DestroyStructure(IntPtr, Type) may be unavailable in future releases. Instead, use DestroyStructure&lt;T&gt;(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296520")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="structuretype" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-438">アンマネージ メモリ ブロックへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-438">A pointer to an unmanaged block of memory.</span></span></param>
        <param name="structuretype"><span data-ttu-id="68c54-439">書式指定クラスの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-439">Type of a formatted class.</span></span> <span data-ttu-id="68c54-440">内のバッファーを削除するために必要なレイアウト情報を提供します、<paramref name="ptr" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-440">This provides the layout information necessary to delete the buffer in the <paramref name="ptr" /> parameter.</span></span></param>
        <summary><span data-ttu-id="68c54-441">指定したアンマネージ メモリ ブロックが指す、すべてのサブ構造体を解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-441">Frees all substructures that the specified unmanaged memory block points to.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-442">このメソッドを使用すると、アンマネージ構造体の文字列などの参照型フィールドを解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-442">You can use this method to free reference-type fields, such as strings, of an unmanaged structure.</span></span> <span data-ttu-id="68c54-443">そのフィールドとは異なり、構造体は値型または参照型を指定できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-443">Unlike its fields, a structure can be a value type or a reference type.</span></span> <span data-ttu-id="68c54-444">値型のフィールド (すべて blittable) が含まれている値型の構造体は、メモリを解放する必要があります参照を持つありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-444">Value-type structures that contain value-type fields (all blittable) have no references whose memory must be freed.</span></span> <span data-ttu-id="68c54-445"><xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=nameWithType>メソッドでは、このメソッドを使用して、構造体によって占有されていたメモリを再利用する場合は、メモリ リークを防ぐ。</span><span class="sxs-lookup"><span data-stu-id="68c54-445">The <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=nameWithType> method uses this method to prevent memory leaks when reusing memory occupied by a structure.</span></span>  
  
 <span data-ttu-id="68c54-446"><xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> COM を呼び出す[SysFreeString](https://go.microsoft.com/fwlink/?LinkId=148633)関数は、さらに、割り当て済みの文字列を解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-446"><xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> calls the COM [SysFreeString](https://go.microsoft.com/fwlink/?LinkId=148633) function, which, in turn, frees an allocated string.</span></span>  
  
 <span data-ttu-id="68c54-447">ほかに<xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A>、<xref:System.Runtime.InteropServices.Marshal>クラスには他の 2 つのメモリの解放メソッド:<xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>と<xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-447">In addition to <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation methods: <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-448"><paramref name="structureType" /> のレイアウトが自動レイアウトです。</span><span class="sxs-lookup"><span data-stu-id="68c54-448"><paramref name="structureType" /> has an automatic layout.</span></span> <span data-ttu-id="68c54-449">代わりに、sequential または explicit を使用します。</span><span class="sxs-lookup"><span data-stu-id="68c54-449">Use sequential or explicit instead.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-450">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-450">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-451">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-451">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
        <related type="Article" href="https://msdn.microsoft.com/library/~/docs/framework/interop/blittable-and-non-blittable-types.md"><span data-ttu-id="68c54-452">Blittable 型と非 Blittable 型</span><span class="sxs-lookup"><span data-stu-id="68c54-452">Blittable and Non-Blittable types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DestroyStructure&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void DestroyStructure&lt;T&gt; (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DestroyStructure&lt;T&gt;(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DestroyStructure(Of T) (ptr As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void DestroyStructure(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member DestroyStructure : nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.DestroyStructure ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="68c54-453">形式構造体の型です。</span><span class="sxs-lookup"><span data-stu-id="68c54-453">The type of the formatted structure.</span></span> <span data-ttu-id="68c54-454">内のバッファーを削除するために必要なレイアウト情報を提供します、<paramref name="ptr" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-454">This provides the layout information necessary to delete the buffer in the <paramref name="ptr" /> parameter.</span></span></typeparam>
        <param name="ptr"><span data-ttu-id="68c54-455">アンマネージ メモリ ブロックへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-455">A pointer to an unmanaged block of memory.</span></span></param>
        <summary><span data-ttu-id="68c54-456">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-456">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-457">指定したアンマネージ メモリ ブロックが指す、指定した型のすべてのサブ構造体を解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-457">Frees all substructures of a specified type that the specified unmanaged memory block points to.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-458">このメソッドを使用して、アンマネージ構造体の文字列などの参照型フィールドを解放することができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-458">You can use this method to free reference type fields, such as strings, of an unmanaged structure.</span></span> <span data-ttu-id="68c54-459">そのフィールドとは異なり、構造体は値型または参照型を指定できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-459">Unlike its fields, a structure can be a value type or a reference type.</span></span> <span data-ttu-id="68c54-460">値型のフィールド (すべて blittable) が含まれている値型の構造体は、メモリを解放する必要があります参照を持つありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-460">Value type structures that contain value type fields (all blittable) have no references whose memory must be freed.</span></span> <span data-ttu-id="68c54-461"><xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=nameWithType>メソッドでは、このメソッドを使用して、構造体によって占有されていたメモリを再利用する場合は、メモリ リークを防ぐ。</span><span class="sxs-lookup"><span data-stu-id="68c54-461">The <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=nameWithType> method uses this method to prevent memory leaks when reusing memory occupied by a structure.</span></span>  
  
 <span data-ttu-id="68c54-462"><xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> COM を呼び出す[SysFreeString](https://go.microsoft.com/fwlink/?LinkId=148633)関数は、さらに、割り当て済みの文字列を解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-462"><xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> calls the COM [SysFreeString](https://go.microsoft.com/fwlink/?LinkId=148633) function, which, in turn, frees an allocated string.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-463"><typeparamref name="T" /> のレイアウトが自動レイアウトです。</span><span class="sxs-lookup"><span data-stu-id="68c54-463"><typeparamref name="T" /> has an automatic layout.</span></span> <span data-ttu-id="68c54-464">代わりに、sequential または explicit を使用します。</span><span class="sxs-lookup"><span data-stu-id="68c54-464">Use sequential or explicit instead.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-465">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-465">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-466">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-466">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="FinalReleaseComObject">
      <MemberSignature Language="C#" Value="public static int FinalReleaseComObject (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FinalReleaseComObject(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FinalReleaseComObject (o As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FinalReleaseComObject(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member FinalReleaseComObject : obj -&gt; int" Usage="System.Runtime.InteropServices.Marshal.FinalReleaseComObject o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="68c54-467">解放する RCW。</span><span class="sxs-lookup"><span data-stu-id="68c54-467">The RCW to be released.</span></span></param>
        <summary><span data-ttu-id="68c54-468"><see href="https://docs.microsoft.com/dotnet/framework/interop/runtime-callable-wrapper">ランタイム呼び出し可能ラッパー</see> (RCW: Runtime Callable Wrapper) の参照カウントを 0 に設定することによって、RCW へのすべての参照を解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-468">Releases all references to a <see href="https://docs.microsoft.com/dotnet/framework/interop/runtime-callable-wrapper">Runtime Callable Wrapper</see> (RCW) by setting its reference count to 0.</span></span></summary>
        <returns><span data-ttu-id="68c54-469">RCW の参照カウントの新しい値に関連付けられている、<paramref name="o" /> パラメーターで、このリリースでは、成功した場合は 0 (ゼロ)。</span><span class="sxs-lookup"><span data-stu-id="68c54-469">The new value of the reference count of the RCW associated with the <paramref name="o" /> parameter, which is 0 (zero) if the release is successful.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-470"><xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A>メソッドが COM オブジェクトへのマネージ参照を解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-470">The <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method releases the managed reference to a COM object.</span></span> <span data-ttu-id="68c54-471">このメソッドを呼び出すことは、呼び出しに相当、 <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> 0 (ゼロ) が返されるまでループ内でのメソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-471">Calling this method is equivalent to calling the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until it returns 0 (zero).</span></span>  
  
 <span data-ttu-id="68c54-472">COM オブジェクトの参照カウントには、0 になると、COM オブジェクトは通常は解放されますが、これは、COM オブジェクトの実装に依存し、ランタイムの制御を超えています。</span><span class="sxs-lookup"><span data-stu-id="68c54-472">When the reference count on the COM object becomes 0, the COM object is usually freed, although this depends on the COM object's implementation and is beyond the control of the runtime.</span></span> <span data-ttu-id="68c54-473">ただし、RCW 存在できますガベージ コレクトされるを待機しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-473">However, the RCW can still exist, waiting to be garbage-collected.</span></span>  
  
 <span data-ttu-id="68c54-474">基になる RCW から分離された後、COM オブジェクトを使用できません。</span><span class="sxs-lookup"><span data-stu-id="68c54-474">The COM object cannot be used after it has been separated from its underlying RCW.</span></span> <span data-ttu-id="68c54-475">参照カウントが 0 になった後に、RCW でメソッドを呼び出すしようとすると、<xref:System.Runtime.InteropServices.InvalidComObjectException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="68c54-475">If you try to call a method on the RCW after its reference count becomes 0, a <xref:System.Runtime.InteropServices.InvalidComObjectException> will be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-476"><paramref name="o" /> は有効な COM オブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-476"><paramref name="o" /> is not a valid COM object.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-477"><paramref name="o" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-477"><paramref name="o" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-478">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-478">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-479">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-479">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)" />
        <altmember cref="T:System.NullReferenceException" />
      </Docs>
    </Member>
    <Member MemberName="FreeBSTR">
      <MemberSignature Language="C#" Value="public static void FreeBSTR (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FreeBSTR(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub FreeBSTR (ptr As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FreeBSTR(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member FreeBSTR : nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.FreeBSTR ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-480">解放する BSTR のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-480">The address of the BSTR to be freed.</span></span></param>
        <summary><span data-ttu-id="68c54-481">COM [ SysFreeString ](https://go.microsoft.com/fwlink/?LinkID=148633) 関数を使用して、<see langword="BSTR" /> を解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-481">Frees a <see langword="BSTR" /> using the COM [SysFreeString](https://go.microsoft.com/fwlink/?LinkID=148633) function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-482">ような<xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=nameWithType>と<xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=nameWithType>、このメソッドを使用してメモリの割り当てを解除することができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-482">Like <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=nameWithType>, you can use this method to deallocate memory.</span></span> <span data-ttu-id="68c54-483"><xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A> COM を呼び出す[SysFreeString](https://go.microsoft.com/fwlink/?LinkID=148633)関数は、次のアンマネージ メソッドのいずれかによって割り当てられたメモリを解放する: `SysAllocString`、 `SysAllocStringByteLen`、 `SysAllocStringLen`、 `SysReAllocString`、`SysReAllocStringLen`します。</span><span class="sxs-lookup"><span data-stu-id="68c54-483"><xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A> calls the COM [SysFreeString](https://go.microsoft.com/fwlink/?LinkID=148633) function, which frees memory allocated by any of the following unmanaged methods: `SysAllocString`, `SysAllocStringByteLen`, `SysAllocStringLen`, `SysReAllocString`, `SysReAllocStringLen`.</span></span> <span data-ttu-id="68c54-484">プラットフォーム呼び出しなど、アンマネージ メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-484">You can call unmanaged methods such as these with platform invoke.</span></span> <span data-ttu-id="68c54-485">詳細については、次を参照してください。[アンマネージ DLL 関数の処理](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-485">For details, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-486">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-486">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-487">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-487">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="FreeCoTaskMem">
      <MemberSignature Language="C#" Value="public static void FreeCoTaskMem (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FreeCoTaskMem(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub FreeCoTaskMem (ptr As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FreeCoTaskMem(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member FreeCoTaskMem : nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.FreeCoTaskMem ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-488">解放するメモリのアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-488">The address of the memory to be freed.</span></span></param>
        <summary><span data-ttu-id="68c54-489">アンマネージ COM タスク メモリ アロケーターによって割り当てられたメモリ ブロックを解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-489">Frees a block of memory allocated by the unmanaged COM task memory allocator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-490">使用することができます<xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>によって割り当てられたメモリを解放する<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A>、 <xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A>、または任意のと同等のアンマネージ メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-490">You can use <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> to free any memory allocated by <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A>, <xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A>, or any equivalent unmanaged method.</span></span> <span data-ttu-id="68c54-491">場合、`ptr`パラメーターが`null`メソッドは何も行いません。</span><span class="sxs-lookup"><span data-stu-id="68c54-491">If the `ptr` parameter is `null`, the method does nothing.</span></span>  
  
 <span data-ttu-id="68c54-492"><xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> COM に公開[CoTaskMemFree](https://go.microsoft.com/fwlink/?LinkId=148638)関数で、メモリを使用できなくするために、すべてのバイトを解放する、`ptr`パラメーターが指します。</span><span class="sxs-lookup"><span data-stu-id="68c54-492"><xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> exposes the COM [CoTaskMemFree](https://go.microsoft.com/fwlink/?LinkId=148638) function, which frees all bytes so that you can no longer use the memory that the `ptr` parameter points to.</span></span>  
  
 <span data-ttu-id="68c54-493">ほかに<xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>、<xref:System.Runtime.InteropServices.Marshal>クラスには他の 2 つのメモリの解放メソッド:<xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A>と<xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-493">In addition to <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation methods: <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-494">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-494">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-495">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-495">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="FreeHGlobal">
      <MemberSignature Language="C#" Value="public static void FreeHGlobal (IntPtr hglobal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FreeHGlobal(native int hglobal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub FreeHGlobal (hglobal As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FreeHGlobal(IntPtr hglobal);" />
      <MemberSignature Language="F#" Value="static member FreeHGlobal : nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.FreeHGlobal hglobal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hglobal" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hglobal"><span data-ttu-id="68c54-496"><see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> への元の一致する呼び出しによって返されたハンドル。</span><span class="sxs-lookup"><span data-stu-id="68c54-496">The handle returned by the original matching call to <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</span></span></param>
        <summary><span data-ttu-id="68c54-497">以前にプロセスのアンマネージ メモリから割り当てられたメモリを解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-497">Frees memory previously allocated from the unmanaged memory of the process.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-498">使用することができます<xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>によって割り当てられたグローバル ヒープからメモリを解放する<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>、 <xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A>、または任意のと同等のアンマネージ API メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-498">You can use <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> to free any memory from the global heap allocated by <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>, <xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A>, or any equivalent unmanaged API method.</span></span> <span data-ttu-id="68c54-499">場合、`hglobal`パラメーターが<xref:System.IntPtr.Zero?displayProperty=nameWithType>メソッドは何も行いません。</span><span class="sxs-lookup"><span data-stu-id="68c54-499">If the `hglobal` parameter is <xref:System.IntPtr.Zero?displayProperty=nameWithType> the method does nothing.</span></span>  
  
 <span data-ttu-id="68c54-500"><xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> 公開、 [LocalFree](https://go.microsoft.com/fwlink/?LinkId=148640)によって示されるメモリは使用できなくするために、すべてのバイトを解放するには、Kernel32.DLL から関数`hglobal`します。</span><span class="sxs-lookup"><span data-stu-id="68c54-500"><xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> exposes the [LocalFree](https://go.microsoft.com/fwlink/?LinkId=148640) function from Kernel32.DLL, which frees all bytes so that you can no longer use the memory pointed to by `hglobal`.</span></span>  
  
 <span data-ttu-id="68c54-501">ほかに<xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>、<xref:System.Runtime.InteropServices.Marshal>クラスは他の 2 つのメモリの解放の API メソッドを提供します。<xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A>と<xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-501">In addition to <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation API methods: <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-502">次の例では、<xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> メソッドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-502">The following example demonstrates calling the <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> method.</span></span> <span data-ttu-id="68c54-503">このコード例が示されている例の一部、<xref:System.Runtime.InteropServices.Marshal>クラス。</span><span class="sxs-lookup"><span data-stu-id="68c54-503">This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.</span></span>  
  
 [!code-cpp[Marshal#4](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#4)]
 [!code-csharp[Marshal#4](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#4)]
 [!code-vb[Marshal#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#4)]  
  
 <span data-ttu-id="68c54-504">次の例は、管理対象の内容を変換する方法を示します<xref:System.String>をアンマネージ メモリのクラスし、し、完了時に、アンマネージ メモリを破棄します。</span><span class="sxs-lookup"><span data-stu-id="68c54-504">The following example demonstrates how to convert the contents of a managed <xref:System.String> class to unmanaged memory and then dispose of the unmanaged memory when done.</span></span>  
  
 [!code-cpp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/CPP/stringtohglobalansi.cpp#1)]
 [!code-csharp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/cs/stringtohglobalansi.cs#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-505">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-505">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-506">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-506">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="GenerateGuidForType">
      <MemberSignature Language="C#" Value="public static Guid GenerateGuidForType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid GenerateGuidForType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Guid GenerateGuidForType(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GenerateGuidForType : Type -&gt; Guid" Usage="System.Runtime.InteropServices.Marshal.GenerateGuidForType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="68c54-507">GUID 生成の対象となる型。</span><span class="sxs-lookup"><span data-stu-id="68c54-507">The type to generate a GUID for.</span></span></param>
        <summary><span data-ttu-id="68c54-508">指定した型のグローバル一意識別子 (GUID: Globally Unique Identifier) を返すか、タイプ ライブラリ エクスポーター (Tlbexp.exe) で使用されるアルゴリズムを使用して GUID を生成します。</span><span class="sxs-lookup"><span data-stu-id="68c54-508">Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).</span></span></summary>
        <returns><span data-ttu-id="68c54-509">指定した型の識別子。</span><span class="sxs-lookup"><span data-stu-id="68c54-509">An identifier for the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-510">型では、メタデータに GUID が含まれる場合が返されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-510">If the type has a GUID in the metadata, it is returned.</span></span> <span data-ttu-id="68c54-511">それ以外の場合、GUID が自動的に生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-511">Otherwise, a GUID is automatically generated.</span></span> <span data-ttu-id="68c54-512">このメソッドを使用すると、プログラムによって非表示の COM 型を含む、任意のマネージ型の COM GUID を確認します。</span><span class="sxs-lookup"><span data-stu-id="68c54-512">You can use this method to programmatically determine the COM GUID for any managed type, including COM-invisible types.</span></span> <span data-ttu-id="68c54-513">クラス インターフェイスは、マネージ型に対応していない唯一の例外です。</span><span class="sxs-lookup"><span data-stu-id="68c54-513">Class interfaces are the only exception because they do not correspond to a managed type.</span></span> <span data-ttu-id="68c54-514"><xref:System.Runtime.InteropServices.Marshal.GenerateGuidForType%2A> 同じ機能を提供します、<xref:System.Type.GUID%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="68c54-514"><xref:System.Runtime.InteropServices.Marshal.GenerateGuidForType%2A> provides the same functionality as the <xref:System.Type.GUID%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-515">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-515">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-516">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-516">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.Type.GUID" />
      </Docs>
    </Member>
    <Member MemberName="GenerateProgIdForType">
      <MemberSignature Language="C#" Value="public static string GenerateProgIdForType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GenerateProgIdForType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GenerateProgIdForType(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GenerateProgIdForType : Type -&gt; string" Usage="System.Runtime.InteropServices.Marshal.GenerateProgIdForType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="68c54-517">ProgID を取得する対象の型。</span><span class="sxs-lookup"><span data-stu-id="68c54-517">The type to get a ProgID for.</span></span></param>
        <summary><span data-ttu-id="68c54-518">指定した型のプログラム ID (ProgID) を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-518">Returns a programmatic identifier (ProgID) for the specified type.</span></span></summary>
        <returns><span data-ttu-id="68c54-519">指定した型の ProgID。</span><span class="sxs-lookup"><span data-stu-id="68c54-519">The ProgID of the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-520">型では、メタデータに ProgID が含まれる場合は、その ProgID が返されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-520">If the type has a ProgID in the metadata, that ProgID is returned.</span></span> <span data-ttu-id="68c54-521">それ以外の場合、ProgID は、型の完全修飾名に基づいて生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-521">Otherwise, a ProgID is generated based on the fully qualified name of the type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-522"><paramref name="type" /> パラメーターは、COM で作成できるクラスではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-522">The <paramref name="type" /> parameter is not a class that can be create by COM.</span></span> <span data-ttu-id="68c54-523">クラスはパブリックであり、パブリックの既定コンストラクターがあり、COM 参照可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-523">The class must be public, have a public default constructor, and be COM visible.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-524"><paramref name="type" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-524">The <paramref name="type" /> parameter is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-525">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-525">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-526">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-526">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetActiveObject">
      <MemberSignature Language="C#" Value="public static object GetActiveObject (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetActiveObject(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetActiveObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetActiveObject (progID As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetActiveObject(System::String ^ progID);" />
      <MemberSignature Language="F#" Value="static member GetActiveObject : string -&gt; obj" Usage="System.Runtime.InteropServices.Marshal.GetActiveObject progID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="68c54-527">要求されたオブジェクトのプログラム ID (ProgId)。</span><span class="sxs-lookup"><span data-stu-id="68c54-527">The programmatic identifier (ProgID) of the object that was requested.</span></span></param>
        <summary><span data-ttu-id="68c54-528">ランニング オブジェクト テーブル (ROT: Running Object Table) から指定したオブジェクトの実行中のインスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-528">Obtains a running instance of the specified object from the running object table (ROT).</span></span></summary>
        <returns><span data-ttu-id="68c54-529">要求されたオブジェクト。それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="68c54-529">The object that was requested; otherwise <see langword="null" />.</span></span> <span data-ttu-id="68c54-530">このオブジェクトは、サポートされる任意の COM インターフェイスにキャストできます。</span><span class="sxs-lookup"><span data-stu-id="68c54-530">You can cast this object to any COM interface that it supports.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-531"><xref:System.Runtime.InteropServices.Marshal.GetActiveObject%2A> COM に公開[GetActiveObject](https://msdn.microsoft.com/library/ms221467\(v=vs.85\).aspx) OLEAUT32 から関数。DLL。ただし、後者はクラス id (CLSID) プログラム識別子ではなく (`ProgID`) によってこのメソッドが必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-531"><xref:System.Runtime.InteropServices.Marshal.GetActiveObject%2A> exposes the COM [GetActiveObject](https://msdn.microsoft.com/library/ms221467\(v=vs.85\).aspx) function from OLEAUT32.DLL; however, the latter expects a class identifier (CLSID) instead of the programmatic identifier (`ProgID`) expected by this method.</span></span> <span data-ttu-id="68c54-532">登録なしの COM オブジェクトの実行中のインスタンスを取得する`ProgID`、使用のプラットフォーム呼び出しを定義、COM [GetActiveObject](https://msdn.microsoft.com/library/ms221467\(v=vs.85\).aspx)関数。</span><span class="sxs-lookup"><span data-stu-id="68c54-532">To obtain a running instance of a COM object without a registered `ProgID`, use platform invoke to define the COM [GetActiveObject](https://msdn.microsoft.com/library/ms221467\(v=vs.85\).aspx) function.</span></span> <span data-ttu-id="68c54-533">プラットフォームの説明の呼び出しは、「[アンマネージ DLL 関数の処理](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-533">For a description of platform invoke, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
## <a name="progid-and-clsid"></a><span data-ttu-id="68c54-534">ProgID と CLSID</span><span class="sxs-lookup"><span data-stu-id="68c54-534">ProgID and CLSID</span></span>  
 <span data-ttu-id="68c54-535">レジストリの HKEY_CLASSES_ROOT サブツリー内のキーには、さまざまな種類のサブキーが含まれます。</span><span class="sxs-lookup"><span data-stu-id="68c54-535">Keys in the HKEY_CLASSES_ROOT subtree of the registry contain a variety of subkey types.</span></span> <span data-ttu-id="68c54-536">サブキーのほとんどは、Progid、CLSID がわかりやすい文字列です。</span><span class="sxs-lookup"><span data-stu-id="68c54-536">Most of the subkeys are ProgIDs, which map a user-friendly string to a CLSID.</span></span> <span data-ttu-id="68c54-537">アプリケーションは、多くの場合、数値の Clsid の代わりにこれらのユーザーが判読できる文字列を使用します。</span><span class="sxs-lookup"><span data-stu-id="68c54-537">Applications often use these human-readable strings instead of the numeric CLSIDs.</span></span> <span data-ttu-id="68c54-538">多くの場合、コンポーネントのシステムにインストールされているコンポーネントの最新バージョンにマップされているバージョン依存 ProgID であります。</span><span class="sxs-lookup"><span data-stu-id="68c54-538">Often, a component has a version-independent ProgID that is mapped to the latest version of the component that is installed on the system.</span></span>  
  
 <span data-ttu-id="68c54-539">アプリケーションとコンポーネントの Progid を使用主に対応する Clsid を取得できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-539">Applications and components primarily use ProgIDs to retrieve their corresponding CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-540">次の例は、Microsoft Word の実行中のインスタンスが構成されているコンピューターで実行しました。</span><span class="sxs-lookup"><span data-stu-id="68c54-540">The following example was run on a computer that was configured with a running instance of Microsoft Word.</span></span> <span data-ttu-id="68c54-541">実行している Microsoft Excel のインスタンスがありませんでした。</span><span class="sxs-lookup"><span data-stu-id="68c54-541">There were no instances of Microsoft Excel running.</span></span>  
  
 <span data-ttu-id="68c54-542">例では、 <xref:System.Runtime.InteropServices.Marshal.GetActiveObject%2A> 2 回クリックします。</span><span class="sxs-lookup"><span data-stu-id="68c54-542">The example calls <xref:System.Runtime.InteropServices.Marshal.GetActiveObject%2A> twice.</span></span> <span data-ttu-id="68c54-543">最初の呼び出しは、Microsoft Word のインスタンスへの参照の取得を試みます (インスタンスの`Word.Application`オブジェクト)。</span><span class="sxs-lookup"><span data-stu-id="68c54-543">The first call tries to retrieve a reference to an instance of Microsoft Word (an instance of the `Word.Application` object).</span></span> <span data-ttu-id="68c54-544">2 番目の呼び出しは、Microsoft Excel のインスタンスへの参照の取得を試みます (インスタンスの`Excel.Application`オブジェクト)。</span><span class="sxs-lookup"><span data-stu-id="68c54-544">The second call tries to retrieve a reference to an instance of Microsoft Excel (an instance of an `Excel.Application` object).</span></span>  
  
 <span data-ttu-id="68c54-545">コードでは、正常に Microsoft Word のインスタンスへの参照を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-545">The code retrieves a reference to an instance of Microsoft Word successfully.</span></span> <span data-ttu-id="68c54-546">ただし、Microsoft Excel が実行されていないため、2 番目のオブジェクトを取得しようとすると、生成、<xref:System.Runtime.InteropServices.COMException>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-546">However, because Microsoft Excel is not running, the attempt to retrieve the second object raises a <xref:System.Runtime.InteropServices.COMException>.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.Marshal.GetActiveObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.marshal.getactiveobject/cs/marshal.getactiveobject.cs#1)]
 [!code-vb[System.Runtime.InteropServices.Marshal.GetActiveObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.marshal.getactiveobject/vb/marshal.getactiveobject.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="68c54-547">オブジェクトが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="68c54-547">The object was not found.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-548">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-548">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-549">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-549">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetComInterfaceForObject">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-550">オブジェクトのインターフェイスを表すインターフェイス ポインターを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-550">Returns an interface pointer that represents an interface for an object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetComInterfaceForObject">
      <MemberSignature Language="C#" Value="public static IntPtr GetComInterfaceForObject (object o, Type T);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetComInterfaceForObject(object o, class System.Type T) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetComInterfaceForObject (o As Object, T As Type) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetComInterfaceForObject(System::Object ^ o, Type ^ T);" />
      <MemberSignature Language="F#" Value="static member GetComInterfaceForObject : obj * Type -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetComInterfaceForObject (o, T)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("GetComInterfaceForObject(Object, Type) may be unavailable in future releases. Instead, use GetComInterfaceForObject&lt;T,T2&gt;(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296509")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="T" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="68c54-551">インターフェイスを提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-551">The object that provides the interface.</span></span></param>
        <param name="T"><span data-ttu-id="68c54-552">要求されるインターフェイスの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-552">The type of interface that is requested.</span></span></param>
        <summary><span data-ttu-id="68c54-553">指定したオブジェクトの指定したインターフェイスを表す <see href="https://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> インターフェイスへのポインターを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-553">Returns a pointer to an <see href="https://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> interface that represents the specified interface on the specified object.</span></span> <span data-ttu-id="68c54-554">カスタム クエリ インターフェイス アクセスは既定で有効になっています。</span><span class="sxs-lookup"><span data-stu-id="68c54-554">Custom query interface access is enabled by default.</span></span></summary>
        <returns><span data-ttu-id="68c54-555">オブジェクトの指定したインターフェイスを表すインターフェイス ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-555">The interface pointer that represents the specified interface for the object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-556">このメソッドは、指定されたオブジェクトに対して要求されたインターフェイスを表すインターフェイス ポインターを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-556">This method returns an interface pointer that represents the requested interface on the specified object.</span></span> <span data-ttu-id="68c54-557">これは、インターフェイス ポインターを渡す必要があるアンマネージ メソッドがある場合に特に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="68c54-557">It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer.</span></span> <span data-ttu-id="68c54-558">このメソッドを使用してオブジェクトを呼び出すと、ポインターが返される前に、インターフェイス ポインターをインクリメントする参照カウントが、します。</span><span class="sxs-lookup"><span data-stu-id="68c54-558">Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned.</span></span> <span data-ttu-id="68c54-559">常に使用する<xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=nameWithType>ポインターが完了したら、参照カウントをデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="68c54-559">Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=nameWithType> to decrement the reference count once you have finished with the pointer.</span></span> <span data-ttu-id="68c54-560">生の COM インターフェイス ポインターを使用する場合は、COM によって定義されたルールに従ってください。</span><span class="sxs-lookup"><span data-stu-id="68c54-560">You must adhere to the rules defined by COM when using raw COM interface pointers.</span></span>  
  
 <span data-ttu-id="68c54-561"><xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> COM オブジェクトのパラメーターとしてを公開するメソッドを呼び出している場合に便利です、<xref:System.IntPtr>型、またはカスタム マーシャ リングします。</span><span class="sxs-lookup"><span data-stu-id="68c54-561"><xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling.</span></span> <span data-ttu-id="68c54-562">マネージ オブジェクトでこのメソッドを使用すると、一般的ではありませんが、オブジェクトの COM 呼び出し可能ラッパーへのポインターを取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-562">Although less common, you can use this method on a managed object to obtain a pointer to the object's COM callable wrapper.</span></span> <span data-ttu-id="68c54-563">たとえば、使用することができます<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29>COM インターフェイス ポインターを取得するにはエクスポートされるマネージ オブジェクトで<xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-563">For example, you can use <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> on a managed object that is exported to COM to obtain an interface pointer for <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=nameWithType>.</span></span> <span data-ttu-id="68c54-564">2 番目のパラメーターに渡す、対応する型がないために、クラス インターフェイスへのポインターを取得することはできません (`t`)。</span><span class="sxs-lookup"><span data-stu-id="68c54-564">You cannot obtain a pointer to a class interface since a class interface lacks the corresponding type to pass to the second parameter (`t`).</span></span> <span data-ttu-id="68c54-565">代わりに、<xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=nameWithType>自動ディスパッチ クラス インターフェイスでは、通常、COM 呼び出し可能ラッパーの既定のインターフェイスのメンバーを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="68c54-565">Instead, use <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=nameWithType> to invoke the members on the default interface of the COM callable wrapper, which is usually an auto-dispatch class interface.</span></span>  
  
 <span data-ttu-id="68c54-566"><xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29>メソッドのオーバー ロードは、既定ではクエリ インターフェイスのカスタマイズを許可します。</span><span class="sxs-lookup"><span data-stu-id="68c54-566">The <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> method overload allows query interface customization by default.</span></span> <span data-ttu-id="68c54-567">クエリ インターフェイスのカスタマイズを適用するかどうかを指定するには、使用、<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="68c54-567">To specify whether to apply query interface customization, use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> method overload.</span></span>  
  
 <span data-ttu-id="68c54-568">詳細については、次を参照してください。、 [COM 呼び出し可能ラッパー](~/docs/framework/interop/com-callable-wrapper.md)、[ランタイム呼び出し可能ラッパー](~/docs/framework/interop/runtime-callable-wrapper.md)、および[クラス インターフェイスの概要](https://msdn.microsoft.com/library/733c0dd2-12e5-46e6-8de1-39d5b25df024)トピック。</span><span class="sxs-lookup"><span data-stu-id="68c54-568">For additional information, see the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md), [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), and [Introducing the Class Interface](https://msdn.microsoft.com/library/733c0dd2-12e5-46e6-8de1-39d5b25df024) topics.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-569"><typeparamref name="T" /> パラメーターがインターフェイスではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-569">The <typeparamref name="T" /> parameter is not an interface.</span></span>  
  
<span data-ttu-id="68c54-570">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-570">-or-</span></span> 
<span data-ttu-id="68c54-571">型が COM から参照できません。</span><span class="sxs-lookup"><span data-stu-id="68c54-571">The type is not visible to COM.</span></span>  
  
<span data-ttu-id="68c54-572">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-572">-or-</span></span> 
<span data-ttu-id="68c54-573"><typeparamref name="T" /> パラメーターがジェネリック型定義です。</span><span class="sxs-lookup"><span data-stu-id="68c54-573">The <typeparamref name="T" /> parameter is a generic type definition.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="68c54-574"><paramref name="o" /> パラメーターが要求されたインターフェイスをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="68c54-574">The <paramref name="o" /> parameter does not support the requested interface.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-575"><paramref name="o" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-575">The <paramref name="o" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-576">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-576">-or-</span></span> 
<span data-ttu-id="68c54-577"><typeparamref name="T" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-577">The <typeparamref name="T" /> parameter is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-578">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-578">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-579">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-579">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)" />
        <altmember cref="T:System.Runtime.InteropServices.ComImportAttribute" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="T:System.Runtime.InteropServices.UCOMIConnectionPointContainer" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetComInterfaceForObject">
      <MemberSignature Language="C#" Value="public static IntPtr GetComInterfaceForObject (object o, Type T, System.Runtime.InteropServices.CustomQueryInterfaceMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetComInterfaceForObject(object o, class System.Type T, valuetype System.Runtime.InteropServices.CustomQueryInterfaceMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetComInterfaceForObject (o As Object, T As Type, mode As CustomQueryInterfaceMode) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetComInterfaceForObject(System::Object ^ o, Type ^ T, System::Runtime::InteropServices::CustomQueryInterfaceMode mode);" />
      <MemberSignature Language="F#" Value="static member GetComInterfaceForObject : obj * Type * System.Runtime.InteropServices.CustomQueryInterfaceMode -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetComInterfaceForObject (o, T, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode) and support for ICustomQueryInterface may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="T" Type="System.Type" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.Runtime.InteropServices.CustomQueryInterfaceMode" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="68c54-580">インターフェイスを提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-580">The object that provides the interface.</span></span></param>
        <param name="T"><span data-ttu-id="68c54-581">要求されるインターフェイスの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-581">The type of interface that is requested.</span></span></param>
        <param name="mode"><span data-ttu-id="68c54-582"><see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> によって提供される <see langword="IUnknown::QueryInterface" /> カスタマイズを適用するかどうかを示す列挙値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="68c54-582">One of the enumeration values that indicates whether to apply an <see langword="IUnknown::QueryInterface" /> customization that is supplied by an <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</span></span></param>
        <summary><span data-ttu-id="68c54-583">指定したオブジェクトの指定したインターフェイスを表す <see href="https://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> インターフェイスへのポインターを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-583">Returns a pointer to an <see href="https://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> interface that represents the specified interface on the specified object.</span></span> <span data-ttu-id="68c54-584">カスタム クエリ インターフェイス アクセスは、指定したカスタマイズ モードで制御されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-584">Custom query interface access is controlled by the specified customization mode.</span></span></summary>
        <returns><span data-ttu-id="68c54-585">オブジェクトのインターフェイスを表すインターフェイス ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-585">The interface pointer that represents the interface for the object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-586"><xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> クエリ インターフェイスのカスタマイズを適用するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-586"><xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> lets you specify whether to apply query interface customization.</span></span> <span data-ttu-id="68c54-587">使用して、<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29>既定ではクエリ インターフェイスのカスタマイズを適用するオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="68c54-587">Use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> overload to apply query interface customization by default.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-588"><typeparamref name="T" /> パラメーターがインターフェイスではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-588">The <typeparamref name="T" /> parameter is not an interface.</span></span>  
  
<span data-ttu-id="68c54-589">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-589">-or-</span></span> 
<span data-ttu-id="68c54-590">型が COM から参照できません。</span><span class="sxs-lookup"><span data-stu-id="68c54-590">The type is not visible to COM.</span></span>  
  
<span data-ttu-id="68c54-591">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-591">-or-</span></span> 
<span data-ttu-id="68c54-592"><typeparamref name="T" /> パラメーターがジェネリック型定義です。</span><span class="sxs-lookup"><span data-stu-id="68c54-592">The <typeparamref name="T" /> parameter is a generic type definition.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="68c54-593">オブジェクト <paramref name="o" /> が要求されたインターフェイスをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="68c54-593">The object <paramref name="o" /> does not support the requested interface.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-594"><paramref name="o" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-594">The <paramref name="o" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-595">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-595">-or-</span></span> 
<span data-ttu-id="68c54-596"><typeparamref name="T" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-596">The <typeparamref name="T" /> parameter is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-597">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-597">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-598">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-598">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetComInterfaceForObject&lt;T,TInterface&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr GetComInterfaceForObject&lt;T,TInterface&gt; (T o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetComInterfaceForObject&lt;T, TInterface&gt;(!!T o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetComInterfaceForObject(Of T, TInterface) (o As T) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TInterface&gt;&#xA; static IntPtr GetComInterfaceForObject(T o);" />
      <MemberSignature Language="F#" Value="static member GetComInterfaceForObject : 'T -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetComInterfaceForObject o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TInterface" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="o" Type="T" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="68c54-599"><paramref name="o" /> の型。</span><span class="sxs-lookup"><span data-stu-id="68c54-599">The type of <paramref name="o" />.</span></span></typeparam>
        <typeparam name="TInterface"><span data-ttu-id="68c54-600">返すインターフェイスの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-600">The type of interface to return.</span></span></typeparam>
        <param name="o"><span data-ttu-id="68c54-601">インターフェイスを提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-601">The object that provides the interface.</span></span></param>
        <summary><span data-ttu-id="68c54-602">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-602">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-603">指定した型のオブジェクトの指定したインターフェイスを表す [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) インターフェイスへのポインターを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-603">Returns a pointer to an [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on an object of the specified type.</span></span> <span data-ttu-id="68c54-604">カスタム クエリ インターフェイス アクセスは既定で有効になっています。</span><span class="sxs-lookup"><span data-stu-id="68c54-604">Custom query interface access is enabled by default.</span></span></summary>
        <returns><span data-ttu-id="68c54-605"><paramref name="TInterface" /> インターフェイスを表すインターフェイス ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-605">The interface pointer that represents the <paramref name="TInterface" /> interface.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-606">このメソッドを表すインターフェイス ポインターを返します、`TInterface`指定したオブジェクトのインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-606">This method returns an interface pointer that represents the `TInterface` interface on the specified object.</span></span> <span data-ttu-id="68c54-607">これは、インターフェイス ポインターを渡す必要があるアンマネージ メソッドがある場合に特に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="68c54-607">It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer.</span></span> <span data-ttu-id="68c54-608">このメソッドを使用してオブジェクトを呼び出すと、ポインターが返される前に、インターフェイス ポインターをインクリメントする参照カウントが、します。</span><span class="sxs-lookup"><span data-stu-id="68c54-608">Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned.</span></span> <span data-ttu-id="68c54-609">常に使用して、<xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=nameWithType>ポインターが完了したら、参照カウントをデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="68c54-609">Always use the <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=nameWithType> method to decrement the reference count when you have finished with the pointer.</span></span> <span data-ttu-id="68c54-610">生の COM インターフェイス ポインターを使用する場合は、COM によって定義されたルールに従ってください。</span><span class="sxs-lookup"><span data-stu-id="68c54-610">You must adhere to the rules defined by COM when using raw COM interface pointers.</span></span>  
  
 <span data-ttu-id="68c54-611"><xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> COM オブジェクトのパラメーターとしてを公開するメソッドを呼び出している場合に便利です、<xref:System.IntPtr>型、またはカスタム マーシャ リングします。</span><span class="sxs-lookup"><span data-stu-id="68c54-611"><xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling.</span></span> <span data-ttu-id="68c54-612">オブジェクトの COM 呼び出し可能ラッパーへのポインターを取得するのにマネージ オブジェクトでは、これはまれですが、このメソッドを使用できますも。</span><span class="sxs-lookup"><span data-stu-id="68c54-612">You can also use this method on a managed object to obtain a pointer to the object's COM callable wrapper, although this is less common.</span></span> <span data-ttu-id="68c54-613">たとえば、使用することができます<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29>COM インターフェイス ポインターを取得するにはエクスポートされるマネージ オブジェクトで<xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-613">For example, you can use <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> on a managed object that is exported to COM to obtain an interface pointer for <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="68c54-614"><xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29>メソッドのオーバー ロードは、既定ではクエリ インターフェイスのカスタマイズを許可します。</span><span class="sxs-lookup"><span data-stu-id="68c54-614">The <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> method overload allows query interface customization by default.</span></span> <span data-ttu-id="68c54-615">クエリ インターフェイスのカスタマイズを適用するかどうかを指定するには、使用、<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="68c54-615">To specify whether to apply query interface customization, use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> method overload.</span></span>  
  
 <span data-ttu-id="68c54-616">詳細については、次を参照してください。、 [COM 呼び出し可能ラッパー](~/docs/framework/interop/com-callable-wrapper.md)、[ランタイム呼び出し可能ラッパー](~/docs/framework/interop/runtime-callable-wrapper.md)、および[クラス インターフェイスの概要](https://msdn.microsoft.com/library/733c0dd2-12e5-46e6-8de1-39d5b25df024)トピック。</span><span class="sxs-lookup"><span data-stu-id="68c54-616">For additional information, see the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md), [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), and [Introducing the Class Interface](https://msdn.microsoft.com/library/733c0dd2-12e5-46e6-8de1-39d5b25df024) topics.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-617"><paramref name="TInterface" /> パラメーターがインターフェイスではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-617">The <paramref name="TInterface" /> parameter is not an interface.</span></span>  
  
<span data-ttu-id="68c54-618">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-618">-or-</span></span> 
<span data-ttu-id="68c54-619">型が COM から参照できません。</span><span class="sxs-lookup"><span data-stu-id="68c54-619">The type is not visible to COM.</span></span>  
  
<span data-ttu-id="68c54-620">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-620">-or-</span></span> 
<span data-ttu-id="68c54-621"><typeparamref name="T" /> パラメーターがオープン ジェネリック型です。</span><span class="sxs-lookup"><span data-stu-id="68c54-621">The <typeparamref name="T" /> parameter is an open generic type.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="68c54-622"><paramref name="o" /> パラメーターが <paramref name="TInterface" /> インターフェイスをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="68c54-622">The <paramref name="o" /> parameter does not support the <paramref name="TInterface" /> interface.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-623"><paramref name="o" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-623">The <paramref name="o" /> parameter is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-624">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-624">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-625">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-625">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetComInterfaceForObjectInContext">
      <MemberSignature Language="C#" Value="public static IntPtr GetComInterfaceForObjectInContext (object o, Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetComInterfaceForObjectInContext(object o, class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetComInterfaceForObjectInContext (o As Object, t As Type) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetComInterfaceForObjectInContext(System::Object ^ o, Type ^ t);" />
      <MemberSignature Language="F#" Value="static member GetComInterfaceForObjectInContext : obj * Type -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext (o, t)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="t" Type="System.Type" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="68c54-626">インターフェイスを提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-626">The object that provides the interface.</span></span></param>
        <param name="t"><span data-ttu-id="68c54-627">要求されるインターフェイスの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-627">The type of interface that is requested.</span></span></param>
        <summary><span data-ttu-id="68c54-628">呼び出し元がオブジェクトと同じコンテキストに存在する場合に、そのオブジェクトの指定したインターフェイスを表すインターフェイス ポインターを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-628">Returns an interface pointer that represents the specified interface for an object, if the caller is in the same context as that object.</span></span></summary>
        <returns><span data-ttu-id="68c54-629">指定したオブジェクトのインターフェイスを表す <paramref name="t" /> で指定したインターフェイス ポインター。呼び出し元がオブジェクトと同じコンテキストに存在しない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="68c54-629">The interface pointer specified by <paramref name="t" /> that represents the interface for the specified object, or <see langword="null" /> if the caller is not in the same context as the object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-630">このメソッドは、同じ<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A>を返す点が`null`場合は、呼び出し元がオブジェクトと同じコンテキストではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-630">This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A> except that it returns `null` if the caller is not in the same context as the object.</span></span> <span data-ttu-id="68c54-631">これは、インターフェイス ポインターを渡す必要があるアンマネージ メソッドがある場合に特に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="68c54-631">It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-632"><paramref name="t" /> がインターフェイスではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-632"><paramref name="t" /> is not an interface.</span></span>  
  
<span data-ttu-id="68c54-633">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-633">-or-</span></span> 
<span data-ttu-id="68c54-634">型が COM から参照できません。</span><span class="sxs-lookup"><span data-stu-id="68c54-634">The type is not visible to COM.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="68c54-635"><paramref name="o" /> が要求されたインターフェイスをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="68c54-635"><paramref name="o" /> does not support the requested interface.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-636"><paramref name="o" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-636"><paramref name="o" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-637">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-637">-or-</span></span> 
 <span data-ttu-id="68c54-638"><paramref name="t" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-638"><paramref name="t" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-639">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-639">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-640">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-640">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />
        <altmember cref="T:System.Runtime.InteropServices.ComImportAttribute" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="T:System.Runtime.InteropServices.UCOMIConnectionPointContainer" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetComObjectData">
      <MemberSignature Language="C#" Value="public static object GetComObjectData (object obj, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetComObjectData(object obj, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetComObjectData (obj As Object, key As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetComObjectData(System::Object ^ obj, System::Object ^ key);" />
      <MemberSignature Language="F#" Value="static member GetComObjectData : obj * obj -&gt; obj" Usage="System.Runtime.InteropServices.Marshal.GetComObjectData (obj, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="key" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="68c54-641">目的のデータを格納している COM オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-641">The COM object that contains the data that you want.</span></span></param>
        <param name="key"><span data-ttu-id="68c54-642">データの取得対象となる <paramref name="obj" /> の内部ハッシュ テーブルにあるキー。</span><span class="sxs-lookup"><span data-stu-id="68c54-642">The key in the internal hash table of <paramref name="obj" /> to retrieve the data from.</span></span></param>
        <summary><span data-ttu-id="68c54-643">指定した COM オブジェクトから、指定したキーによって参照されているデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-643">Retrieves data that is referenced by the specified key from the specified COM object.</span></span></summary>
        <returns><span data-ttu-id="68c54-644"><paramref name="obj" /> パラメーターの内部ハッシュ テーブルにある <paramref name="key" /> パラメーターで表されるデータ。</span><span class="sxs-lookup"><span data-stu-id="68c54-644">The data represented by the <paramref name="key" /> parameter in the internal hash table of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-645">ラップされたすべての COM オブジェクト、[ランタイム呼び出し可能ラッパー](~/docs/framework/interop/runtime-callable-wrapper.md)関連のハッシュがテーブル<xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A>を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-645">All COM objects wrapped in a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) have an associated hash table, which <xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A> retrieves.</span></span> <span data-ttu-id="68c54-646"><xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A?displayProperty=nameWithType> ハッシュ テーブルにデータを追加します。</span><span class="sxs-lookup"><span data-stu-id="68c54-646"><xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A?displayProperty=nameWithType> adds data to the hash table.</span></span> <span data-ttu-id="68c54-647">コードからいずれかのメソッドを呼び出すにすることはありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-647">You should never have to call either method from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-648"><paramref name="obj" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-648"><paramref name="obj" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-649">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-649">-or-</span></span> 
 <span data-ttu-id="68c54-650"><paramref name="key" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-650"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-651"><paramref name="obj" /> はCOM オブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-651"><paramref name="obj" /> is not a COM object.</span></span>  
  
<span data-ttu-id="68c54-652">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-652">-or-</span></span> 
 <span data-ttu-id="68c54-653"><paramref name="obj" /> は [!INCLUDE[wrt](~/includes/wrt-md.md)] オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-653"><paramref name="obj" /> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-654">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-654">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-655">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-655">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetComSlotForMethodInfo">
      <MemberSignature Language="C#" Value="public static int GetComSlotForMethodInfo (System.Reflection.MemberInfo m);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetComSlotForMethodInfo(class System.Reflection.MemberInfo m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetComSlotForMethodInfo (m As MemberInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetComSlotForMethodInfo(System::Reflection::MemberInfo ^ m);" />
      <MemberSignature Language="F#" Value="static member GetComSlotForMethodInfo : System.Reflection.MemberInfo -&gt; int" Usage="System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="68c54-656">インターフェイス メソッドを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-656">An object that represents an interface method.</span></span></param>
        <summary><span data-ttu-id="68c54-657">指定した <see cref="T:System.Reflection.MemberInfo" /> 型が COM に公開されたときの仮想関数テーブル (V テーブルまたは VTBL) のスロットを取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-657">Retrieves the virtual function table (v-table or VTBL) slot for a specified <see cref="T:System.Reflection.MemberInfo" /> type when that type is exposed to COM.</span></span></summary>
        <returns><span data-ttu-id="68c54-658">型が COM に公開されたときの VTBL スロットの <paramref name="m" /> 識別子。</span><span class="sxs-lookup"><span data-stu-id="68c54-658">The VTBL slot <paramref name="m" /> identifier when it is exposed to COM.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-659">3 つのこのメソッドが返される 0 から始まるスロット番号[IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003)と 4 つの可能性があります[IDispatch](https://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)メソッドを使用できる最初のスロットの値のいずれか 3 を作成または 7 です。</span><span class="sxs-lookup"><span data-stu-id="68c54-659">The zero-based slot number returned by this method accounts for three [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) and possibly four [IDispatch](https://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) methods, making the value of the first available slot either 3 or 7.</span></span> <span data-ttu-id="68c54-660"><xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> 反対側の機能を提供<xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-660"><xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="68c54-661">このメソッドを使用すると、COM から表示されていないインターフェイスのメンバーとプライベート インターフェイスのメンバーのスロット番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-661">You can use this method to retrieve slot numbers for members of interfaces that are not visible from COM and for members of private interfaces.</span></span> <span data-ttu-id="68c54-662">スロット番号が返されますが、型が COM に公開された場合に予約される v テーブルの番号に対応します。</span><span class="sxs-lookup"><span data-stu-id="68c54-662">The slot numbers returned correspond to the v-table numbers that would be reserved if the type was exposed to COM.</span></span> <span data-ttu-id="68c54-663">COM 参照不可能なメンバーは、COM クライアントがスロットを使用できない場合でも実際に公開されている v テーブル内のスロットを占有します。</span><span class="sxs-lookup"><span data-stu-id="68c54-663">COM-invisible members actually occupy a slot in an exposed v-table, even though the COM client cannot use the slot.</span></span> <span data-ttu-id="68c54-664">使用することはできません<xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A>を渡すことによって、クラス インターフェイスで<xref:System.Reflection.MemberInfo>クラスから。</span><span class="sxs-lookup"><span data-stu-id="68c54-664">You cannot use <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> on a class interface by passing <xref:System.Reflection.MemberInfo> from a class.</span></span> <span data-ttu-id="68c54-665">詳細については、次を参照してください。[クラス インターフェイスの概要](https://msdn.microsoft.com/library/733c0dd2-12e5-46e6-8de1-39d5b25df024)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-665">For additional information, see [Introducing the Class Interface](https://msdn.microsoft.com/library/733c0dd2-12e5-46e6-8de1-39d5b25df024).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-666"><paramref name="m" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-666">The <paramref name="m" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-667"><paramref name="m" /> パラメーターが <see cref="T:System.Reflection.MemberInfo" /> オブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-667">The <paramref name="m" /> parameter is not a <see cref="T:System.Reflection.MemberInfo" /> object.</span></span>  
  
<span data-ttu-id="68c54-668">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-668">-or-</span></span> 
<span data-ttu-id="68c54-669"><paramref name="m" /> パラメーターがインターフェイス メソッドではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-669">The <paramref name="m" /> parameter is not an interface method.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-670">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-670">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-671">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-671">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)" />
      </Docs>
    </Member>
    <Member MemberName="GetDelegateForFunctionPointer">
      <MemberSignature Language="C#" Value="public static Delegate GetDelegateForFunctionPointer (IntPtr ptr, Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate GetDelegateForFunctionPointer(native int ptr, class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDelegateForFunctionPointer (ptr As IntPtr, t As Type) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ GetDelegateForFunctionPointer(IntPtr ptr, Type ^ t);" />
      <MemberSignature Language="F#" Value="static member GetDelegateForFunctionPointer : nativeint * Type -&gt; Delegate" Usage="System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer (ptr, t)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("GetDelegateForFunctionPointer(IntPtr, Type) may be unavailable in future releases. Instead, use GetDelegateForFunctionPointer&lt;T&gt;(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296521")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="t" Type="System.Type" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-672">変換するアンマネージ関数ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-672">The unmanaged function pointer to be converted.</span></span></param>
        <param name="t"><span data-ttu-id="68c54-673">返されるデリゲートの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-673">The type of the delegate to be returned.</span></span></param>
        <summary><span data-ttu-id="68c54-674">アンマネージ関数ポインターをデリゲートに変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-674">Converts an unmanaged function pointer to a delegate.</span></span></summary>
        <returns><span data-ttu-id="68c54-675">適切なデリゲート型にキャストできるデリゲート インスタンス。</span><span class="sxs-lookup"><span data-stu-id="68c54-675">A delegate instance that can be cast to the appropriate delegate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-676">バージョン 1.0 および 1.1 の .NET Framework を関数ポインターを通じてマネージ メソッドを呼び出すコードがアンマネージ関数ポインターとしてアンマネージ コードへのマネージ メソッドを表すデリゲートを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-676">In versions 1.0 and 1.1 of the .NET Framework, it was possible to pass a delegate representing a managed method to unmanaged code as a function pointer, allowing the unmanaged code to call the managed method through the function pointer.</span></span> <span data-ttu-id="68c54-677">アンマネージ コードはその関数ポインターをマネージ コードに渡すこともできましたし、ポインターは、基になるマネージ メソッドに正しく解決されました。</span><span class="sxs-lookup"><span data-stu-id="68c54-677">It was also possible for the unmanaged code to pass that function pointer back to the managed code, and the pointer was resolved properly to the underlying managed method.</span></span>  
  
 <span data-ttu-id="68c54-678">.NET Framework 2.0 以降のバージョンで使用することができます、<xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A>と<xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A>双方向でデリゲートをマーシャ リングするメソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-678">In the .NET Framework 2.0 and later versions, you can use the <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A> and <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A> methods to marshal delegates in both directions.</span></span> <span data-ttu-id="68c54-679"><xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A>、`ptr`としてインポートされます、<xref:System.IntPtr?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-679">With <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A>, `ptr` is imported as a <xref:System.IntPtr?displayProperty=nameWithType>.</span></span> <span data-ttu-id="68c54-680">A<xref:System.IntPtr?displayProperty=nameWithType>マネージ デリゲートを呼び出すことによって取得できます<xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A>パラメーターとして渡されると、呼び出すことができるから非管理対象のメソッド内で。</span><span class="sxs-lookup"><span data-stu-id="68c54-680">A <xref:System.IntPtr?displayProperty=nameWithType> can be obtained for a managed delegate by calling <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A> and passed as a parameter; it can then be called from inside the unmanaged method.</span></span> <span data-ttu-id="68c54-681">パラメーターのマーシャラーが .NET Framework 2.0 およびそれ以降のバージョンでデリゲートを関数ポインターをマーシャ リングも注意してください。</span><span class="sxs-lookup"><span data-stu-id="68c54-681">Note that the parameter marshaler can also marshal function pointers to delegates in the .NET Framework 2.0 and later versions.</span></span>  
  
 <span data-ttu-id="68c54-682"><xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A>メソッドには、次の制限。</span><span class="sxs-lookup"><span data-stu-id="68c54-682">The <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A> method has the following restrictions:</span></span>  
  
-   <span data-ttu-id="68c54-683">相互運用シナリオでは、ジェネリックはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="68c54-683">Generics are not supported in interop scenarios.</span></span>  
  
-   <span data-ttu-id="68c54-684">このメソッドに、無効な関数ポインターを渡すことはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-684">You cannot pass an invalid function pointer to this method.</span></span>  
  
-   <span data-ttu-id="68c54-685">このメソッドは、純粋なアンマネージ関数ポインターに対してのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-685">You can use this method only for pure unmanaged function pointers.</span></span>  
  
-   <span data-ttu-id="68c54-686">C++ またはから関数ポインターと、このメソッドを使用することはできません、<xref:System.RuntimeMethodHandle.GetFunctionPointer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-686">You cannot use this method with function pointers obtained through C++ or from the <xref:System.RuntimeMethodHandle.GetFunctionPointer%2A> method.</span></span>  
  
-   <span data-ttu-id="68c54-687">このメソッドを使用して、関数ポインターから別のマネージ デリゲートへのデリゲートを作成することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-687">You cannot use this method to create a delegate from a function pointer to another managed delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-688"><paramref name="t" /> パラメーターは、デリゲートでもジェネリックでもありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-688">The <paramref name="t" /> parameter is not a delegate or is generic.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-689"><paramref name="ptr" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-689">The <paramref name="ptr" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-690">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-690">-or-</span></span> 
<span data-ttu-id="68c54-691"><paramref name="t" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-691">The <paramref name="t" /> parameter is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-692">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-692">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-693">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-693">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetDelegateForFunctionPointer&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static TDelegate GetDelegateForFunctionPointer&lt;TDelegate&gt; (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TDelegate GetDelegateForFunctionPointer&lt;TDelegate&gt;(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDelegateForFunctionPointer(Of TDelegate) (ptr As IntPtr) As TDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static TDelegate GetDelegateForFunctionPointer(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member GetDelegateForFunctionPointer : nativeint -&gt; 'Delegate" Usage="System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="68c54-694">返すデリゲートの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-694">The type of the delegate to return.</span></span></typeparam>
        <param name="ptr"><span data-ttu-id="68c54-695">変換するアンマネージ関数ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-695">The unmanaged function pointer to convert.</span></span></param>
        <summary><span data-ttu-id="68c54-696">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-696">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-697">アンマネージ関数ポインターを指定した型のデリゲートに変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-697">Converts an unmanaged function pointer to a delegate of a specified type.</span></span></summary>
        <returns><span data-ttu-id="68c54-698">指定したデリゲート型のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="68c54-698">A instance of the specified delegate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-699">使用することができます、<xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29>と<xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%60%601%28%60%600%29>双方向でデリゲートをマーシャ リングするメソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-699">You can use the <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29> and <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%60%601%28%60%600%29> methods to marshal delegates in both directions.</span></span>  
  
 <span data-ttu-id="68c54-700"><xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29>メソッドには、次の制限。</span><span class="sxs-lookup"><span data-stu-id="68c54-700">The <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29> method has the following restrictions:</span></span>  
  
-   <span data-ttu-id="68c54-701">このメソッドに、無効な関数ポインターを渡すことはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-701">You cannot pass an invalid function pointer to this method.</span></span>  
  
-   <span data-ttu-id="68c54-702">このメソッドは、純粋なアンマネージ関数ポインターに対してのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-702">You can use this method only for pure unmanaged function pointers.</span></span>  
  
-   <span data-ttu-id="68c54-703">C++ またはから関数ポインターと、このメソッドを使用することはできません、<xref:System.RuntimeMethodHandle.GetFunctionPointer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-703">You cannot use this method with function pointers obtained through C++ or from the <xref:System.RuntimeMethodHandle.GetFunctionPointer%2A> method.</span></span>  
  
-   <span data-ttu-id="68c54-704">このメソッドを使用して、関数ポインターから別のマネージ デリゲートへのデリゲートを作成することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-704">You cannot use this method to create a delegate from a function pointer to another managed delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-705"><paramref name="TDelegate" /> ジェネリック パラメーターはデリゲートでない、またはオープン ジェネリック型です。</span><span class="sxs-lookup"><span data-stu-id="68c54-705">The <paramref name="TDelegate" /> generic parameter is not a delegate, or it is an open generic type.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-706"><paramref name="ptr" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-706">The <paramref name="ptr" /> parameter is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-707">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-707">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-708">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-708">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetEndComSlot">
      <MemberSignature Language="C#" Value="public static int GetEndComSlot (Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetEndComSlot(class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEndComSlot (t As Type) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetEndComSlot(Type ^ t);" />
      <MemberSignature Language="F#" Value="static member GetEndComSlot : Type -&gt; int" Usage="System.Runtime.InteropServices.Marshal.GetEndComSlot t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="t"><span data-ttu-id="68c54-709">インターフェイスまたはクラスを表す型。</span><span class="sxs-lookup"><span data-stu-id="68c54-709">A type that represents an interface or class.</span></span></param>
        <summary><span data-ttu-id="68c54-710">型が COM に公開されたときの仮想テーブル (V テーブルまたは VTBL) の最後のスロットを取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-710">Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.</span></span></summary>
        <returns><span data-ttu-id="68c54-711">COM に公開されたときのインターフェイスの最後の VTBL スロット。</span><span class="sxs-lookup"><span data-stu-id="68c54-711">The last VTBL slot of the interface when exposed to COM.</span></span> <span data-ttu-id="68c54-712"><paramref name="t" /> パラメーターがクラスの場合、返された VTBL スロットはそのクラスから生成されるインターフェイス内の最終スロットです。</span><span class="sxs-lookup"><span data-stu-id="68c54-712">If the <paramref name="t" /> parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-713">このメソッドは、インターフェイスまたはクラスの 0 から始まる、v テーブル数を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-713">This method returns the zero-based, v-table number for an interface or a class.</span></span> <span data-ttu-id="68c54-714">クラスで使用すると、返されるスロット数は、クラスのクラス インターフェイスを指します。</span><span class="sxs-lookup"><span data-stu-id="68c54-714">When used on a class, the slot number returned refers to the class interface for the class.</span></span> <span data-ttu-id="68c54-715">クラス インターフェイスがデュアル自動の場合は、このメソッドは常に、ディスパッチ専用インターフェイスがマネージ クライアントに v テーブルを公開しないことを示す-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-715">If the class interface is auto-dual, this method always returns -1 to indicate that the dispatch-only interface does not expose a v-table to managed clients.</span></span> <span data-ttu-id="68c54-716">使用することができます<xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A>と<xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=nameWithType>と共に<xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=nameWithType>を指定した範囲内のスロットを渡します。</span><span class="sxs-lookup"><span data-stu-id="68c54-716">You can use <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A> and <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=nameWithType> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=nameWithType> to pass slots within a specified range.</span></span> <span data-ttu-id="68c54-717">詳細については、次を参照してください。[クラス インターフェイスの概要](https://msdn.microsoft.com/library/733c0dd2-12e5-46e6-8de1-39d5b25df024)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-717">For additional information, see [Introducing the Class Interface](https://msdn.microsoft.com/library/733c0dd2-12e5-46e6-8de1-39d5b25df024).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-718">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-718">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-719">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-719">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)" />
      </Docs>
    </Member>
    <Member MemberName="GetExceptionCode">
      <MemberSignature Language="C#" Value="public static int GetExceptionCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetExceptionCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetExceptionCode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExceptionCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetExceptionCode();" />
      <MemberSignature Language="F#" Value="static member GetExceptionCode : unit -&gt; int" Usage="System.Runtime.InteropServices.Marshal.GetExceptionCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("GetExceptionCode() may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68c54-720">発生した例外の型を識別するコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-720">Retrieves a code that identifies the type of the exception that occurred.</span></span></summary>
        <returns><span data-ttu-id="68c54-721">例外の型。</span><span class="sxs-lookup"><span data-stu-id="68c54-721">The type of the exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-722"><xref:System.Runtime.InteropServices.Marshal.GetExceptionCode%2A> 構造化例外の処理 (SEH) のみのコンパイラ サポートのために公開されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-722"><xref:System.Runtime.InteropServices.Marshal.GetExceptionCode%2A> is exposed for compiler support of structured exception handling (SEH) only.</span></span> <span data-ttu-id="68c54-723">例外がスローされる前に、このメソッドを呼び出すと、0x0 を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-723">If this method is called before an exception is thrown, it returns 0x0.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-724">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-724">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-725">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-725">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExceptionForHR">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-726">HRESULT エラー コードを対応する <see cref="T:System.Exception" /> オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-726">Converts an HRESULT error code to a corresponding <see cref="T:System.Exception" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExceptionForHR">
      <MemberSignature Language="C#" Value="public static Exception GetExceptionForHR (int errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception GetExceptionForHR(int32 errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExceptionForHR (errorCode As Integer) As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Exception ^ GetExceptionForHR(int errorCode);" />
      <MemberSignature Language="F#" Value="static member GetExceptionForHR : int -&gt; Exception" Usage="System.Runtime.InteropServices.Marshal.GetExceptionForHR errorCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorCode" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="errorCode"><span data-ttu-id="68c54-727">変換される HRESULT。</span><span class="sxs-lookup"><span data-stu-id="68c54-727">The HRESULT to be converted.</span></span></param>
        <summary><span data-ttu-id="68c54-728">指定した HRESULT エラー コードを対応する <see cref="T:System.Exception" /> オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-728">Converts the specified HRESULT error code to a corresponding <see cref="T:System.Exception" /> object.</span></span></summary>
        <returns><span data-ttu-id="68c54-729">変換後の HRESULT を表すオブジェクトまたは<see langword="null" />HRESULT 値がエラー コードを表していない場合 (たとえば、<see langword="S_OK" />または<see langword="S_FALSE" />)。</span><span class="sxs-lookup"><span data-stu-id="68c54-729">An object that represents the converted HRESULT, or <see langword="null" /> if the HRESULT value doesn't represent an error code (for example, <see langword="S_OK" /> or <see langword="S_FALSE" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-730">使用して、<xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A>を取得するメソッド、<xref:System.Exception>に電話しなくても、HRESULT に基づいて、<xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>メソッドと、例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="68c54-730">Use the <xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A> method to get an <xref:System.Exception> based on an HRESULT without having to call the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method and catch the exception.</span></span>  
  
 <span data-ttu-id="68c54-731">現在[IErrorInfo](https://msdn.microsoft.com/library/4dda6909-2d9a-4727-ae0c-b5f90dcfa447)インターフェイスは、例外の構築に使用されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-731">The current [IErrorInfo](https://msdn.microsoft.com/library/4dda6909-2d9a-4727-ae0c-b5f90dcfa447) interface is used to construct the exception.</span></span>  
  
 <span data-ttu-id="68c54-732">各 HRESULT から .NET Framework では、その同等の例外クラスへのマッピングを参照してください。[方法。Hresult に例外](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-732">For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-733">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-733">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-734">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-734">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="Overload:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR" />
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx"><span data-ttu-id="68c54-735">IErrorInfo インターフェイス</span><span class="sxs-lookup"><span data-stu-id="68c54-735">IErrorInfo Interface</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetExceptionForHR">
      <MemberSignature Language="C#" Value="public static Exception GetExceptionForHR (int errorCode, IntPtr errorInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception GetExceptionForHR(int32 errorCode, native int errorInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExceptionForHR (errorCode As Integer, errorInfo As IntPtr) As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Exception ^ GetExceptionForHR(int errorCode, IntPtr errorInfo);" />
      <MemberSignature Language="F#" Value="static member GetExceptionForHR : int * nativeint -&gt; Exception" Usage="System.Runtime.InteropServices.Marshal.GetExceptionForHR (errorCode, errorInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorCode" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="errorInfo" Type="System.IntPtr" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="errorCode"><span data-ttu-id="68c54-736">変換される HRESULT。</span><span class="sxs-lookup"><span data-stu-id="68c54-736">The HRESULT to be converted.</span></span></param>
        <param name="errorInfo"><span data-ttu-id="68c54-737">エラーの詳細情報を提供する <see langword="IErrorInfo" /> インターフェイスへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-737">A pointer to the <see langword="IErrorInfo" /> interface that provides more information about the error.</span></span> <span data-ttu-id="68c54-738"><c>IntPtr(0)</c> を指定すると、現在の <see langword="IErrorInfo" /> インターフェイスを使用できます。または <c>IntPtr(-1)</c> を指定すると、現在の <see langword="IErrorInfo" /> インターフェイスを無視し、エラー コードだけを使用して例外を構築できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-738">You can specify <c>IntPtr(0)</c> to use the current <see langword="IErrorInfo" /> interface, or <c>IntPtr(-1)</c> to ignore the current <see langword="IErrorInfo" /> interface and construct the exception just from the error code.</span></span></param>
        <summary><span data-ttu-id="68c54-739">例外オブジェクトの [IErrorInfo](https://msdn.microsoft.com/library/4dda6909-2d9a-4727-ae0c-b5f90dcfa447)インターフェイスに渡された追加エラー情報を使用して、指定した HRESULT エラー コードを対応する <see cref="T:System.Exception" /> オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-739">Converts the specified HRESULT error code to a corresponding <see cref="T:System.Exception" /> object, with additional error information passed in an [IErrorInfo](https://msdn.microsoft.com/library/4dda6909-2d9a-4727-ae0c-b5f90dcfa447) interface for the exception object.</span></span></summary>
        <returns><span data-ttu-id="68c54-740">変換された HRESULT と情報を表すオブジェクトが取得した<paramref name="errorInfo" />、または<see langword="null" />HRESULT 値がエラー コードを表していない場合 (たとえば、<see langword="S_OK" />または<see langword="S_FALSE" />)。</span><span class="sxs-lookup"><span data-stu-id="68c54-740">An object that represents the converted HRESULT and information obtained from <paramref name="errorInfo" />, or <see langword="null" /> if an HRESULT value doesn't represent an error code (for example, <see langword="S_OK" /> or <see langword="S_FALSE" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-741">使用して、<xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A>を取得するメソッド、<xref:System.Exception>に電話しなくても、HRESULT に基づいて、<xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>メソッドと (そのため、対応するパフォーマンス オーバーヘッドを回避できます)、例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="68c54-741">Use the <xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A> method to get an <xref:System.Exception> based on an HRESULT without having to call the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method and catch the exception (thus avoiding the corresponding performance overhead).</span></span> <span data-ttu-id="68c54-742">`errorInfo`パラメーターは、その説明のテキストと、エラーを定義するインターフェイスのグローバル一意識別子 (GUID) など、エラーに関する追加情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="68c54-742">The `errorInfo` parameter supplies additional information about the error, such as its textual description and the globally unique identifier (GUID) for the interface that defined the error.</span></span>  
  
 <span data-ttu-id="68c54-743">変換時に提供する必要があるカスタム エラー情報がある場合は、このメソッドのオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="68c54-743">Use this method overload if you have custom error information that you have to supply in the conversion.</span></span>  
  
 <span data-ttu-id="68c54-744">各 HRESULT から .NET Framework では、その同等の例外クラスへのマッピングを参照してください。[方法。Hresult に例外](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-744">For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-745">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-745">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-746">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-746">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="Overload:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR" />
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx"><span data-ttu-id="68c54-747">IErrorInfo インターフェイス</span><span class="sxs-lookup"><span data-stu-id="68c54-747">IErrorInfo Interface</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetExceptionPointers">
      <MemberSignature Language="C#" Value="public static IntPtr GetExceptionPointers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetExceptionPointers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExceptionPointers () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetExceptionPointers();" />
      <MemberSignature Language="F#" Value="static member GetExceptionPointers : unit -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetExceptionPointers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68c54-748">例外発生時に、コンピューターに依存しない例外の記述、およびスレッドに対して存在した状態に関する情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-748">Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.</span></span></summary>
        <returns><span data-ttu-id="68c54-749"><see href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-_exception_pointers">EXCEPTION_POINTERS</see> 構造体へのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-749">A pointer to an <see href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-_exception_pointers">EXCEPTION_POINTERS</see> structure.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-750"><xref:System.Runtime.InteropServices.Marshal.GetExceptionPointers%2A> 構造化例外の処理 (SEH) のみのコンパイラ サポートのために公開されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-750"><xref:System.Runtime.InteropServices.Marshal.GetExceptionPointers%2A> is exposed for compiler support of structured exception handling (SEH) only.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-751">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-751">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-752">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-752">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFunctionPointerForDelegate">
      <MemberSignature Language="C#" Value="public static IntPtr GetFunctionPointerForDelegate (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetFunctionPointerForDelegate(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFunctionPointerForDelegate (d As Delegate) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetFunctionPointerForDelegate(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="static member GetFunctionPointerForDelegate : Delegate -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("GetFunctionPointerForDelegate(Delegate) may be unavailable in future releases. Instead, use GetFunctionPointerForDelegate&lt;T&gt;(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296522")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="68c54-753">アンマネージ コードに渡されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="68c54-753">The delegate to be passed to unmanaged code.</span></span></param>
        <summary><span data-ttu-id="68c54-754">アンマネージ コードから呼び出すことができる関数ポインターにデリゲートを変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-754">Converts a delegate into a function pointer that is callable from unmanaged code.</span></span></summary>
        <returns><span data-ttu-id="68c54-755">アンマネージド コードに渡すことができる値。アンマネージド コードはこの値を使用して、基になるマネージド デリゲートを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-755">A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-756">デリゲート`d`を使用してアンマネージ コードに渡すことができる関数ポインターに変換されます、 [_ _stdcall](https://msdn.microsoft.com/library/e212594b-1827-4d07-9527-7d412b300df8)呼び出し規約。</span><span class="sxs-lookup"><span data-stu-id="68c54-756">The delegate `d` is converted to a function pointer that can be passed to unmanaged code using the [__stdcall](https://msdn.microsoft.com/library/e212594b-1827-4d07-9527-7d412b300df8) calling convention.</span></span>  
  
 <span data-ttu-id="68c54-757">手動でマネージ コードから、ガベージ コレクターによって収集されるデータからデリゲートをおく必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-757">You must manually keep the delegate from being collected by the garbage collector from managed code.</span></span> <span data-ttu-id="68c54-758">ガベージ コレクターは、アンマネージ コードへの参照を追跡しません。</span><span class="sxs-lookup"><span data-stu-id="68c54-758">The garbage collector does not track references to unmanaged code.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-759"><paramref name="d" /> パラメーターがジェネリック型定義です。</span><span class="sxs-lookup"><span data-stu-id="68c54-759">The <paramref name="d" /> parameter is a generic type definition.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-760"><paramref name="d" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-760">The <paramref name="d" /> parameter is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-761">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-761">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-762">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-762">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFunctionPointerForDelegate&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr GetFunctionPointerForDelegate&lt;TDelegate&gt; (TDelegate d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetFunctionPointerForDelegate&lt;TDelegate&gt;(!!TDelegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFunctionPointerForDelegate(Of TDelegate) (d As TDelegate) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static IntPtr GetFunctionPointerForDelegate(TDelegate d);" />
      <MemberSignature Language="F#" Value="static member GetFunctionPointerForDelegate : 'Delegate -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="d" Type="TDelegate" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="68c54-763">変換するデリゲートの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-763">The type of delegate to convert.</span></span></typeparam>
        <param name="d"><span data-ttu-id="68c54-764">アンマネージ コードに渡されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="68c54-764">The delegate to be passed to unmanaged code.</span></span></param>
        <summary><span data-ttu-id="68c54-765">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-765">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-766">指定した型のデリゲートをアンマネージ コードから呼び出すことができる関数ポインターに変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-766">Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.</span></span></summary>
        <returns><span data-ttu-id="68c54-767">アンマネージド コードに渡すことができる値。アンマネージド コードはこの値を使用して、基になるマネージド デリゲートを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-767">A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-768">デリゲート`d`できますに渡すことによって、アンマネージ コードを使用して関数ポインターに変換されます、 [_ _stdcall](https://msdn.microsoft.com/library/e212594b-1827-4d07-9527-7d412b300df8)呼び出し規約。</span><span class="sxs-lookup"><span data-stu-id="68c54-768">The delegate `d` is converted to a function pointer that can be passed to unmanaged code by using the [__stdcall](https://msdn.microsoft.com/library/e212594b-1827-4d07-9527-7d412b300df8) calling convention.</span></span>  
  
 <span data-ttu-id="68c54-769">手動でマネージ コードから、ガベージ コレクターによって収集されるデータからデリゲートをおく必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-769">You must manually keep the delegate from being collected by the garbage collector from managed code.</span></span> <span data-ttu-id="68c54-770">ガベージ コレクターは、アンマネージ コードへの参照を追跡しません。</span><span class="sxs-lookup"><span data-stu-id="68c54-770">The garbage collector does not track references to unmanaged code.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-771"><paramref name="d" /> パラメーターがジェネリック型定義です。</span><span class="sxs-lookup"><span data-stu-id="68c54-771">The <paramref name="d" /> parameter is a generic type definition.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-772"><paramref name="d" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-772">The <paramref name="d" /> parameter is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-773">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-773">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-774">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-774">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetHINSTANCE">
      <MemberSignature Language="C#" Value="public static IntPtr GetHINSTANCE (System.Reflection.Module m);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetHINSTANCE(class System.Reflection.Module m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHINSTANCE (m As Module) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetHINSTANCE(System::Reflection::Module ^ m);" />
      <MemberSignature Language="F#" Value="static member GetHINSTANCE : System.Reflection.Module -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetHINSTANCE m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Reflection.Module" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="68c54-775">目的の HINSTANCE を持つモジュール。</span><span class="sxs-lookup"><span data-stu-id="68c54-775">The module whose HINSTANCE is desired.</span></span></param>
        <summary><span data-ttu-id="68c54-776">指定したモジュールのインスタンス ハンドル (HINSTANCE) を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-776">Returns the instance handle (HINSTANCE) for the specified module.</span></span></summary>
        <returns><span data-ttu-id="68c54-777"><paramref name="m" /> の HINSTANCE。モジュールに HINSTANCE がない場合は -1。</span><span class="sxs-lookup"><span data-stu-id="68c54-777">The HINSTANCE for <paramref name="m" />; or -1 if the module does not have an HINSTANCE.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-778">ときに動的またはメモリ内のモジュールに HINSTANCE がありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-778">When dynamic or in-memory, modules do not have an HINSTANCE.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-779"><paramref name="m" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-779">The <paramref name="m" /> parameter is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-780">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-780">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-781">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-781">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetHRForException">
      <MemberSignature Language="C#" Value="public static int GetHRForException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetHRForException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHRForException (e As Exception) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetHRForException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="static member GetHRForException : Exception -&gt; int" Usage="System.Runtime.InteropServices.Marshal.GetHRForException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="68c54-782">HRESULT に変換する例外。</span><span class="sxs-lookup"><span data-stu-id="68c54-782">The exception to convert to an HRESULT.</span></span></param>
        <summary><span data-ttu-id="68c54-783">指定した例外を HRESULT に変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-783">Converts the specified exception to an HRESULT.</span></span></summary>
        <returns><span data-ttu-id="68c54-784">提供された例外に割り当てられる HRESULT。</span><span class="sxs-lookup"><span data-stu-id="68c54-784">The HRESULT mapped to the supplied exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-785"><xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> 設定しても、 [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) COM GetErrorInfoNEEDGUID 関数を呼び出すことによって取得できる例外のインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-785"><xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> also sets up an [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) interface for the exception that can be obtained by calling the COM GetErrorInfoNEEDGUID function.</span></span> <span data-ttu-id="68c54-786">この関数を使用するを適用する COM インターフェイスのマネージ クラスの実装に HRESULT 値を返す、<xref:System.Runtime.InteropServices.PreserveSigAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="68c54-786">You can use this function to return an HRESULT value on a managed class implementation of a COM interface where you apply the <xref:System.Runtime.InteropServices.PreserveSigAttribute> attribute.</span></span> <span data-ttu-id="68c54-787">属性付きメソッドが例外をキャッチしてを使用して、<xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A>適切な HRESULT 値を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-787">Have the attributed method catch all exceptions and use the <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> method to return the appropriate HRESULT value.</span></span> <span data-ttu-id="68c54-788">メソッドの外部に反映されるまでに、例外を許可するには、不適切な動作が生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-788">Allowing an exception to propagate outside the method produces incorrect behavior.</span></span> <span data-ttu-id="68c54-789">(実際には、共通言語ランタイムが失敗した v テーブルを介してこのようなメソッドを呼び出す COM クライアントに例外を渡すことです。)</span><span class="sxs-lookup"><span data-stu-id="68c54-789">(In fact, the common language runtime fails to pass an exception to a COM client that calls such a method through a v-table.)</span></span>  
  
 <span data-ttu-id="68c54-790">なお、<xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A>メソッドのセット、 [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx)現在のスレッドのインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-790">Note that the <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> method sets the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) interface of the current thread.</span></span> <span data-ttu-id="68c54-791">これは、ようなメソッドの予期しない結果になることができます、<xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>を使用する既定のメソッド、 [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx)設定されている場合は、現在のスレッドの。</span><span class="sxs-lookup"><span data-stu-id="68c54-791">This can cause unexpected results for methods like the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> methods that default to using the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) of the current thread if it is set.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-792">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-792">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-793">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-793">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetHRForLastWin32Error">
      <MemberSignature Language="C#" Value="public static int GetHRForLastWin32Error ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetHRForLastWin32Error() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHRForLastWin32Error () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetHRForLastWin32Error();" />
      <MemberSignature Language="F#" Value="static member GetHRForLastWin32Error : unit -&gt; int" Usage="System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68c54-794"><see cref="T:System.Runtime.InteropServices.Marshal" /> を使用して実行した Win32 コードが原因の最終エラーに対応する HRESULT を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-794">Returns the HRESULT corresponding to the last error incurred by Win32 code executed using <see cref="T:System.Runtime.InteropServices.Marshal" />.</span></span></summary>
        <returns><span data-ttu-id="68c54-795">最終 Win32 エラー コードに対応する HRESULT。</span><span class="sxs-lookup"><span data-stu-id="68c54-795">The HRESULT corresponding to the last Win32 error code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-796">対象の関数がある必要があります、`setLastError`メタデータ フラグを設定します。</span><span class="sxs-lookup"><span data-stu-id="68c54-796">The target function must have had the `setLastError` metadata flag set.</span></span> <span data-ttu-id="68c54-797">たとえば、`SetLastError`のフィールド、<xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=nameWithType>必要があります`true`します。</span><span class="sxs-lookup"><span data-stu-id="68c54-797">For example, the `SetLastError` field of the <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=nameWithType> must be `true`.</span></span> <span data-ttu-id="68c54-798">このフラグを設定するためのプロセスは、使用するソース言語に依存します。C#C++ は`false`既定が、 `Declare` Visual Basic でのステートメントが`true`します。</span><span class="sxs-lookup"><span data-stu-id="68c54-798">The process for setting this flag depends on the source language used: C# and C++ are `false` by default, but the `Declare` statement in Visual Basic is `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-799">次の例は、使用する Win32 エラー コードに対応する HRESULT を取得する方法を示します、<xref:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-799">The following example demonstrates how to retrieve an HRESULT corresponding to a Win32 error code using the <xref:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error%2A> method.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.GetHRForLastWin32Error#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetHRForLastWin32Error/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.GetHRForLastWin32Error#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetHRForLastWin32Error/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-800">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-800">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-801">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-801">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetIDispatchForObject">
      <MemberSignature Language="C#" Value="public static IntPtr GetIDispatchForObject (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetIDispatchForObject(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetIDispatchForObject (o As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetIDispatchForObject(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member GetIDispatchForObject : obj -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetIDispatchForObject o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="68c54-802">要求される <see langword="IDispatch" /> インターフェイスを持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-802">The object whose <see langword="IDispatch" /> interface is requested.</span></span></param>
        <summary><span data-ttu-id="68c54-803">マネージド オブジェクトから <see href="https://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5">IDispatch</see> インターフェイスを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-803">Returns an <see href="https://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5">IDispatch</see> interface from a managed object.</span></span></summary>
        <returns><span data-ttu-id="68c54-804"><paramref name="o" /> パラメーターの <see langword="IDispatch" /> ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-804">The <see langword="IDispatch" /> pointer for the <paramref name="o" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-805">マネージ コードのほとんどを直接操作する、`IDispatch`インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-805">In managed code, you seldom work directly with the `IDispatch` interface.</span></span> <span data-ttu-id="68c54-806">ただし、<xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A>として COM オブジェクトのパラメーターを公開するメソッドを呼び出している場合に便利です、<xref:System.IntPtr>型、またはカスタム マーシャ リングします。</span><span class="sxs-lookup"><span data-stu-id="68c54-806">However, <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling.</span></span> <span data-ttu-id="68c54-807">このメソッドを使用してオブジェクトを呼び出すと、ポインターが返される前に、インターフェイス ポインターをインクリメントする参照カウントが、します。</span><span class="sxs-lookup"><span data-stu-id="68c54-807">Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned.</span></span> <span data-ttu-id="68c54-808">常に使用する<xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=nameWithType>ポインターが完了したら、参照カウントをデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="68c54-808">Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=nameWithType> to decrement the reference count once you have finished with the pointer.</span></span>  
  
 <span data-ttu-id="68c54-809">オブジェクトの COM 呼び出し可能ラッパーへのインターフェイス ポインターを取得するのにマネージ オブジェクトでこのメソッドを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="68c54-809">You can also use this method on a managed object to obtain an interface pointer to the COM callable wrapper for the object.</span></span> <span data-ttu-id="68c54-810">詳細については、次を参照してください。 [COM 呼び出し可能ラッパー](~/docs/framework/interop/com-callable-wrapper.md)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-810">For additional information, see [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="68c54-811"><paramref name="o" /> が要求されたインターフェイスをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="68c54-811"><paramref name="o" /> does not support the requested interface.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-812">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-812">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-813">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-813">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetIDispatchForObjectInContext">
      <MemberSignature Language="C#" Value="public static IntPtr GetIDispatchForObjectInContext (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetIDispatchForObjectInContext(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetIDispatchForObjectInContext (o As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetIDispatchForObjectInContext(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member GetIDispatchForObjectInContext : obj -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="68c54-814">要求される <see langword="IDispatch" /> インターフェイスを持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-814">The object whose <see langword="IDispatch" /> interface is requested.</span></span></param>
        <summary><span data-ttu-id="68c54-815">呼び出し元がマネージド オブジェクトと同じコンテキストに存在する場合に、そのマネージド オブジェクトから <see href="https://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5">IDispatch</see> インターフェイス ポインターを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-815">Returns an <see href="https://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5">IDispatch</see> interface pointer from a managed object, if the caller is in the same context as that object.</span></span></summary>
        <returns><span data-ttu-id="68c54-816">指定したオブジェクトの <see langword="IDispatch" /> インターフェイス ポインター。呼び出し元が指定したオブジェクトと同じコンテキストに存在しない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="68c54-816">The <see langword="IDispatch" /> interface pointer for the specified object, or <see langword="null" /> if the caller is not in the same context as the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-817">このメソッドは、同じ<xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A>を返す点が`null`場合は、呼び出し元がオブジェクトと同じコンテキストではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-817">This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A> except that it returns `null` if the caller is not in the same context as the object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="68c54-818"><paramref name="o" /> が要求されたインターフェイスをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="68c54-818"><paramref name="o" /> does not support the requested interface.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-819"><paramref name="o" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-819"><paramref name="o" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-820">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-820">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-821">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-821">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetITypeInfoForType">
      <MemberSignature Language="C#" Value="public static IntPtr GetITypeInfoForType (Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetITypeInfoForType(class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetITypeInfoForType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetITypeInfoForType (t As Type) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetITypeInfoForType(Type ^ t);" />
      <MemberSignature Language="F#" Value="static member GetITypeInfoForType : Type -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetITypeInfoForType t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="t"><span data-ttu-id="68c54-822">要求されている <see langword="ITypeInfo" /> インターフェイスを持つ型。</span><span class="sxs-lookup"><span data-stu-id="68c54-822">The type whose <see langword="ITypeInfo" /> interface is being requested.</span></span></param>
        <summary><span data-ttu-id="68c54-823">マネージド型から <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeInfo" /> インターフェイスを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-823">Returns a <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeInfo" /> interface from a managed type.</span></span></summary>
        <returns><span data-ttu-id="68c54-824"><paramref name="t" /> パラメーターの <see langword="ITypeInfo" /> インターフェイスへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-824">A pointer to the <see langword="ITypeInfo" /> interface for the <paramref name="t" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-825">このメソッドへのポインターを返します、`ITypeInfo`実装元の型に基づいています。</span><span class="sxs-lookup"><span data-stu-id="68c54-825">This method returns a pointer to an `ITypeInfo` implementation that is based on the original type.</span></span> <span data-ttu-id="68c54-826">オブジェクトを呼び出す<xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A>ポインターが返される前に、インターフェイス ポインターをインクリメントする参照カウントをによりします。</span><span class="sxs-lookup"><span data-stu-id="68c54-826">Calling an object with <xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A> causes the reference count to increment on the interface pointer before the pointer is returned.</span></span> <span data-ttu-id="68c54-827">常に使用する<xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=nameWithType>ポインターが完了したら、参照カウントをデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="68c54-827">Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=nameWithType> to decrement the reference count once you have finished with the pointer.</span></span> <span data-ttu-id="68c54-828">適用することができます、<xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=nameWithType>に標準の相互運用マーシャ リング動作をこのカスタム マーシャラーに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="68c54-828">You can apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=nameWithType> to replace standard interop marshaling behavior with this custom marshaler.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-829">次の例へのポインターを取得する方法を示します、`ITypeInfo`インターフェイスを使用して型を<xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-829">The following example demonstrates how to retrieve a pointer to the `ITypeInfo` interface for a type using the <xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A> method.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.GetITypeInfoForType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetITypeInfoForType/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.GetITypeInfoForType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetITypeInfoForType/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-830"><paramref name="t" /> は COM から参照できる型ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-830"><paramref name="t" /> is not a visible type to COM.</span></span>  
  
<span data-ttu-id="68c54-831">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-831">-or-</span></span> 
 <span data-ttu-id="68c54-832"><paramref name="t" /> は [!INCLUDE[wrt](~/includes/wrt-md.md)] 型です。</span><span class="sxs-lookup"><span data-stu-id="68c54-832"><paramref name="t" /> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="68c54-833">型を格納するアセンブリのタイプ ライブラリが登録されていますが、型定義が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="68c54-833">A type library is registered for the assembly that contains the type, but the type definition cannot be found.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-834">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-834">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-835">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-835">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo(System.IntPtr)" />
        <altmember cref="T:System.Runtime.InteropServices.MarshalAsAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetIUnknownForObject">
      <MemberSignature Language="C#" Value="public static IntPtr GetIUnknownForObject (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetIUnknownForObject(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetIUnknownForObject (o As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetIUnknownForObject(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member GetIUnknownForObject : obj -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetIUnknownForObject o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="68c54-836">要求される <see langword="IUnknown" /> インターフェイスを持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-836">The object whose <see langword="IUnknown" /> interface is requested.</span></span></param>
        <summary><span data-ttu-id="68c54-837">マネージド オブジェクトから <see href="https://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> インターフェイスを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-837">Returns an <see href="https://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> interface from a managed object.</span></span></summary>
        <returns><span data-ttu-id="68c54-838"><paramref name="o" /> パラメーターの <see langword="IUnknown" /> ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-838">The <see langword="IUnknown" /> pointer for the <paramref name="o" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-839">マネージ コードのほとんどを直接操作する、`IUnknown`インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-839">In managed code, you seldom work directly with the `IUnknown` interface.</span></span> <span data-ttu-id="68c54-840">ただし、<xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A>として COM オブジェクトのパラメーターを公開するメソッドを呼び出している場合に便利です、<xref:System.IntPtr>型、またはカスタム マーシャ リングします。</span><span class="sxs-lookup"><span data-stu-id="68c54-840">However, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling.</span></span> <span data-ttu-id="68c54-841">このメソッドを使用してオブジェクトを呼び出すと、ポインターが返される前に、インターフェイス ポインターをインクリメントする参照カウントが、します。</span><span class="sxs-lookup"><span data-stu-id="68c54-841">Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned.</span></span> <span data-ttu-id="68c54-842">常に使用する<xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=nameWithType>ポインターが完了したら、参照カウントをデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="68c54-842">Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=nameWithType> to decrement the reference count once you have finished with the pointer.</span></span> <span data-ttu-id="68c54-843">このメソッドは、反対側の機能を提供、<xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-843">This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="68c54-844">インターフェイス ポインターを取得するマネージ オブジェクトでこのメソッドを使用することもできます、 [COM 呼び出し可能ラッパー](~/docs/framework/interop/com-callable-wrapper.md)オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-844">You can also use this method on a managed object to obtain an interface pointer to the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md) for the object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-845">次の例は、取得する方法を示します、 [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003)インターフェイスを使用してマネージ オブジェクトを<xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-845">The following example demonstrates how to retrieve an [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) interface for a managed object using the <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> method.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-846">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-846">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-847">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-847">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="GetIUnknownForObjectInContext">
      <MemberSignature Language="C#" Value="public static IntPtr GetIUnknownForObjectInContext (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetIUnknownForObjectInContext(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetIUnknownForObjectInContext (o As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetIUnknownForObjectInContext(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member GetIUnknownForObjectInContext : obj -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="68c54-848">要求される <see langword="IUnknown" /> インターフェイスを持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-848">The object whose <see langword="IUnknown" /> interface is requested.</span></span></param>
        <summary><span data-ttu-id="68c54-849">呼び出し元がマネージド オブジェクトと同じコンテキストに存在する場合に、そのマネージド オブジェクトから <see href="https://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> インターフェイスを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-849">Returns an <see href="https://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> interface from a managed object, if the caller is in the same context as that object.</span></span></summary>
        <returns><span data-ttu-id="68c54-850">指定したオブジェクトの <see langword="IUnknown" /> ポインター。呼び出し元が指定したオブジェクトと同じコンテキストに存在しない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="68c54-850">The <see langword="IUnknown" /> pointer for the specified object, or <see langword="null" /> if the caller is not in the same context as the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-851">このメソッドは、同じ<xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A>を返す点が`null`場合は、呼び出し元がオブジェクトと同じコンテキストではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-851">This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> except that it returns `null` if the caller is not in the same context as the object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-852">次の例は、取得する方法を示します、`IUnknown`インターフェイスを使用してマネージ オブジェクトを<xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-852">The following example demonstrates how to retrieve an `IUnknown` interface for a managed object using the <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext%2A> method.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-853">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-853">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-854">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-854">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="GetLastWin32Error">
      <MemberSignature Language="C#" Value="public static int GetLastWin32Error ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetLastWin32Error() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastWin32Error () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetLastWin32Error();" />
      <MemberSignature Language="F#" Value="static member GetLastWin32Error : unit -&gt; int" Usage="System.Runtime.InteropServices.Marshal.GetLastWin32Error " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68c54-855"><see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> フラグが設定され、プラットフォーム呼び出しを使用して呼び出された、最終アンマネージ関数によって返されるエラー コードを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-855">Returns the error code returned by the last unmanaged function that was called using platform invoke that has the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> flag set.</span></span></summary>
        <returns><span data-ttu-id="68c54-856">Win32 <see href="https://msdn.microsoft.com/library/ms680627.aspx">SetLastError</see> 関数への呼び出しで最後に設定されたエラー コード。</span><span class="sxs-lookup"><span data-stu-id="68c54-856">The last error code set by a call to the Win32 <see href="https://msdn.microsoft.com/library/ms680627.aspx">SetLastError</see> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="68c54-857">Windows システムでは、 <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> 、Win32 の公開[GetLastError](/windows/desktop/ms679360)関数を Kernel32.DLL から。</span><span class="sxs-lookup"><span data-stu-id="68c54-857">On Windows systems, <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> exposes the Win32 [GetLastError](/windows/desktop/ms679360) function from Kernel32.DLL.</span></span> <span data-ttu-id="68c54-858">呼び出した direct プラットフォームに信頼性が高くないため、このメソッドが存在する`GetLastError`この情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-858">This method exists because it is not reliable to make a direct platform invoke call to `GetLastError` to obtain this information.</span></span> <span data-ttu-id="68c54-859">呼び出す必要がある場合、このエラー コードにアクセスするには、<xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>独自のプラットフォーム呼び出しの定義を記述する代わりに`GetLastError`および呼び出し。</span><span class="sxs-lookup"><span data-stu-id="68c54-859">If you want to access this error code, you must call <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> instead of writing your own platform invoke definition for `GetLastError` and calling it.</span></span> <span data-ttu-id="68c54-860">共通言語ランタイムは、上書き Api への内部の呼び出しを行うことが、`GetLastError`オペレーティング システムによって維持されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-860">The common language runtime can make internal calls to APIs that overwrite the `GetLastError` maintained by the operating system.</span></span>  

<span data-ttu-id="68c54-861">このメソッドを使用するには適用する場合にのみ、エラー コードを取得する、<xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=nameWithType>にメソッド シグネチャを設定し、<xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError?displayProperty=nameWithType>フィールドを`true`します。</span><span class="sxs-lookup"><span data-stu-id="68c54-861">You can use this method to obtain error codes only if you apply the <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=nameWithType> to the method signature and set the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError?displayProperty=nameWithType> field to`true`.</span></span> <span data-ttu-id="68c54-862">このプロセスは、使用するソース言語によって異なります。C#C++ は`false`既定が、 `Declare` Visual Basic でのステートメントが`true`します。</span><span class="sxs-lookup"><span data-stu-id="68c54-862">The process for this varies depending upon the source language used: C# and C++ are `false` by default, but the `Declare` statement in Visual Basic is `true`.</span></span>  
  
<span data-ttu-id="68c54-863">動作の違いがある、`GetLastWin32Error`メソッド .NET Core と .NET Framework と<xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError?displayProperty=nameWithType>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="68c54-863">There is a difference in the behavior of the `GetLastWin32Error` method on .NET Core and .NET Framework when <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError?displayProperty=nameWithType> is `true`.</span></span> <span data-ttu-id="68c54-864">.NET Framework では、上、`GetLastWin32Error`メソッドは、次の 1 つの P/invoke 呼び出しからエラー情報を保持できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-864">On .NET Framework, the `GetLastWin32Error` method can retain error information from one P/Invoke call to the next.</span></span> <span data-ttu-id="68c54-865">.NET Core でのエラー情報がオフになって、P/invoke 呼び出しの前に、`GetLastWin32Error`メソッドの最後の呼び出しからエラー情報のみを表します。</span><span class="sxs-lookup"><span data-stu-id="68c54-865">On .NET Core, error information is cleared before P/Invoke call, and the `GetLastWin32Error` represents only error information from the last method call.</span></span>

## Examples  
 <span data-ttu-id="68c54-866">次の例では、`GetLastWin32Error`メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-866">The following example calls the `GetLastWin32Error` method.</span></span> <span data-ttu-id="68c54-867">例では、エラーのないでメソッドを呼び出し、まず後、エラーが存在するメソッドを呼び出すことを示しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-867">The example first demonstrates calling the method with no error present and then demonstrates calling the method with an error present.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.GetLastWin32Error#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetLastWin32Error/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.GetLastWin32Error#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetLastWin32Error/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-868">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-868">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-869">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-869">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetManagedThunkForUnmanagedMethodPtr">
      <MemberSignature Language="C#" Value="public static IntPtr GetManagedThunkForUnmanagedMethodPtr (IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetManagedThunkForUnmanagedMethodPtr(native int pfnMethodToWrap, native int pbSignature, int32 cbSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetManagedThunkForUnmanagedMethodPtr (pfnMethodToWrap As IntPtr, pbSignature As IntPtr, cbSignature As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetManagedThunkForUnmanagedMethodPtr(IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature);" />
      <MemberSignature Language="F#" Value="static member GetManagedThunkForUnmanagedMethodPtr : nativeint * nativeint * int -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr (pfnMethodToWrap, pbSignature, cbSignature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("This method has been deprecated")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("The GetManagedThunkForUnmanagedMethodPtr method has been deprecated and will be removed in a future release.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pfnMethodToWrap" Type="System.IntPtr" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="pbSignature" Type="System.IntPtr" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="cbSignature" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pfnMethodToWrap"><span data-ttu-id="68c54-870">マーシャリングするメソッドへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-870">A pointer to the method to marshal.</span></span></param>
        <param name="pbSignature"><span data-ttu-id="68c54-871">メソッド シグネチャへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-871">A pointer to the method signature.</span></span></param>
        <param name="cbSignature"><span data-ttu-id="68c54-872">バイト数<paramref name="pbSignature" />します。</span><span class="sxs-lookup"><span data-stu-id="68c54-872">The number of bytes in <paramref name="pbSignature" />.</span></span></param>
        <summary><span data-ttu-id="68c54-873">マネージド コードからアンマネージド コードに呼び出しをマーシャリングする、ランタイムによって生成される関数へのポインターを取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-873">Gets a pointer to a runtime-generated function that marshals a call from managed to unmanaged code.</span></span></summary>
        <returns><span data-ttu-id="68c54-874"><paramref name="pfnMethodToWrap" /> パラメーターからアンマネージ コードに呼び出しをマーシャリングする関数へのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-874">A pointer to the function that will marshal a call from the <paramref name="pfnMethodToWrap" /> parameter to unmanaged code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-875"><xref:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr%2A> コンパイラのサポートのみ公開されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-875"><xref:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr%2A> is exposed for compiler support only.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-876">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-876">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-877">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-877">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodInfoForComSlot">
      <MemberSignature Language="C#" Value="public static System.Reflection.MemberInfo GetMethodInfoForComSlot (Type t, int slot, ref System.Runtime.InteropServices.ComMemberType memberType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MemberInfo GetMethodInfoForComSlot(class System.Type t, int32 slot, valuetype System.Runtime.InteropServices.ComMemberType&amp; memberType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMethodInfoForComSlot (t As Type, slot As Integer, ByRef memberType As ComMemberType) As MemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::MemberInfo ^ GetMethodInfoForComSlot(Type ^ t, int slot, System::Runtime::InteropServices::ComMemberType % memberType);" />
      <MemberSignature Language="F#" Value="static member GetMethodInfoForComSlot : Type * int *  -&gt; System.Reflection.MemberInfo" Usage="System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot (t, slot, memberType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="slot" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="memberType" Type="System.Runtime.InteropServices.ComMemberType" RefType="ref" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="t"><span data-ttu-id="68c54-878"><see cref="T:System.Reflection.MemberInfo" /> の取得対象となる型。</span><span class="sxs-lookup"><span data-stu-id="68c54-878">The type for which the <see cref="T:System.Reflection.MemberInfo" /> is to be retrieved.</span></span></param>
        <param name="slot"><span data-ttu-id="68c54-879">VTBL スロット。</span><span class="sxs-lookup"><span data-stu-id="68c54-879">The VTBL slot.</span></span></param>
        <param name="memberType"><span data-ttu-id="68c54-880">正常に返された場合は、メンバーの型を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="68c54-880">On successful return, one of the enumeration values that specifies the type of the member.</span></span></param>
        <summary><span data-ttu-id="68c54-881">指定した仮想関数テーブル (V テーブルまたは VTBL) のスロットの <see cref="T:System.Reflection.MemberInfo" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-881">Retrieves a <see cref="T:System.Reflection.MemberInfo" /> object for the specified virtual function table (v-table or VTBL) slot.</span></span></summary>
        <returns><span data-ttu-id="68c54-882">指定した VTBL スロットのメンバーを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-882">The object that represents the member at the specified VTBL slot.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-883">戻り値があります、 <xref:System.Reflection.FieldInfo>、 <xref:System.Reflection.MethodInfo>、または<xref:System.Reflection.PropertyInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-883">The return value may be a <xref:System.Reflection.FieldInfo>, <xref:System.Reflection.MethodInfo>, or <xref:System.Reflection.PropertyInfo> object.</span></span> <span data-ttu-id="68c54-884">戻り値は、特定の COM のスロットに存在する管理対象のメンバーの種類によって異なります (一般化された戻り値の型ため<xref:System.Reflection.MemberInfo>3 つの派生元とすべて)。</span><span class="sxs-lookup"><span data-stu-id="68c54-884">The return value depends on the type of managed member that exists in the given COM slot (hence the generalized return type <xref:System.Reflection.MemberInfo> from which all three derive).</span></span>  
  
 <span data-ttu-id="68c54-885">このメソッドによって返されるスロットの 0 から始まる番号が 3 つのアカウント[IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003)可能性がある 4 つと[IDispatch](https://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)メソッドを使用できる最初のスロットの値のいずれか 3 を行うまたは 7 です。</span><span class="sxs-lookup"><span data-stu-id="68c54-885">The zero-based slot number that is returned by this method accounts for three [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) and possibly four [IDispatch](https://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) methods, making the value of the first available slot either 3 or 7.</span></span> <span data-ttu-id="68c54-886"><xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> 反対側の機能を提供<xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-886"><xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="68c54-887">使用することができます<xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=nameWithType>と<xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=nameWithType>と共に<xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A>を指定した範囲内のスロットを渡します。</span><span class="sxs-lookup"><span data-stu-id="68c54-887">You can use <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=nameWithType> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> to pass slots within a specified range.</span></span>  
  
 <span data-ttu-id="68c54-888">`memberType`パラメーターが返された場合にのみ重要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-888">The `memberType` parameter is important only on return.</span></span> <span data-ttu-id="68c54-889">返されたに対応する COM メンバー (通常のメソッドまたはプロパティのアクセサー) の型が含まれている<xref:System.Reflection.MemberInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-889">It contains the type of the COM member (a regular method or a property accessor) that corresponds to the returned <xref:System.Reflection.MemberInfo> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-890"><paramref name="t" /> は COM から参照できません。</span><span class="sxs-lookup"><span data-stu-id="68c54-890"><paramref name="t" /> is not visible from COM.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-891">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-891">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-892">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-892">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)" />
        <altmember cref="T:System.Runtime.InteropServices.ComMemberType" />
      </Docs>
    </Member>
    <Member MemberName="GetNativeVariantForObject">
      <MemberSignature Language="C#" Value="public static void GetNativeVariantForObject (object obj, IntPtr pDstNativeVariant);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetNativeVariantForObject(object obj, native int pDstNativeVariant) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetNativeVariantForObject (obj As Object, pDstNativeVariant As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetNativeVariantForObject(System::Object ^ obj, IntPtr pDstNativeVariant);" />
      <MemberSignature Language="F#" Value="static member GetNativeVariantForObject : obj * nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.GetNativeVariantForObject (obj, pDstNativeVariant)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netstandard-2.1">
          <AttributeName>System.Obsolete("GetNativeVariantForObject(Object, IntPtr) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="pDstNativeVariant" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="68c54-893">COM VARIANT の取得対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-893">The object for which to get a COM VARIANT.</span></span></param>
        <param name="pDstNativeVariant"><span data-ttu-id="68c54-894"><paramref name="obj" /> パラメーターに対応する VARIANT を受け取るポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-894">A pointer to receive the VARIANT that corresponds to the <paramref name="obj" /> parameter.</span></span></param>
        <summary><span data-ttu-id="68c54-895">オブジェクトを COM VARIANT に変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-895">Converts an object to a COM VARIANT.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-896">`pDstNativeVariant`パラメーターは、結果として得られるバリアントを格納するための十分なメモリを指す必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-896">The `pDstNativeVariant` parameter must point to sufficient memory to store the resulting VARIANT.</span></span> <span data-ttu-id="68c54-897">また、このメソッドの実装を呼び出す、 [VariantInit](https://msdn.microsoft.com/library/ms221402\(v=vs.85\).aspx)生のメモリで関数を`pDstNativeVariant`パラメーターが指します。</span><span class="sxs-lookup"><span data-stu-id="68c54-897">Also, the implementation of this method calls the [VariantInit](https://msdn.microsoft.com/library/ms221402\(v=vs.85\).aspx) function on the raw memory that the `pDstNativeVariant` parameter points to.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-898"><paramref name="obj" /> パラメーターがジェネリック型のインスタンスです。</span><span class="sxs-lookup"><span data-stu-id="68c54-898">The <paramref name="obj" /> parameter is an instance of a generic type.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-899">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-899">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-900">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-900">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetNativeVariantForObject&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void GetNativeVariantForObject&lt;T&gt; (T obj, IntPtr pDstNativeVariant);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetNativeVariantForObject&lt;T&gt;(!!T obj, native int pDstNativeVariant) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetNativeVariantForObject(Of T) (obj As T, pDstNativeVariant As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void GetNativeVariantForObject(T obj, IntPtr pDstNativeVariant);" />
      <MemberSignature Language="F#" Value="static member GetNativeVariantForObject : 'T * nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.GetNativeVariantForObject (obj, pDstNativeVariant)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netstandard-2.1">
          <AttributeName>System.Obsolete("GetNativeVariantForObject&lt;T&gt;(T, IntPtr) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="obj" Type="T" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pDstNativeVariant" Type="System.IntPtr" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="68c54-901">変換対象のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-901">The type of the object to convert.</span></span></typeparam>
        <param name="obj"><span data-ttu-id="68c54-902">COM VARIANT の取得対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-902">The object for which to get a COM VARIANT.</span></span></param>
        <param name="pDstNativeVariant"><span data-ttu-id="68c54-903"><paramref name="obj" /> パラメーターに対応する VARIANT を受け取るポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-903">A pointer to receive the VARIANT that corresponds to the <paramref name="obj" /> parameter.</span></span></param>
        <summary><span data-ttu-id="68c54-904">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-904">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-905">指定した型のオブジェクトを COM VARIANT に変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-905">Converts an object of a specified type to a COM VARIANT.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-906">`pDstNativeVariant`パラメーターは、結果として得られるバリアントを格納するための十分なメモリを指す必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-906">The `pDstNativeVariant` parameter must point to sufficient memory to store the resulting VARIANT.</span></span> <span data-ttu-id="68c54-907">また、このメソッドの実装を呼び出す[VariantInit](https://msdn.microsoft.com/library/ms221402\(v=vs.85\).aspx)生のメモリで関数を`pDstNativeVariant`パラメーターが指します。</span><span class="sxs-lookup"><span data-stu-id="68c54-907">Also, the implementation of this method calls [VariantInit](https://msdn.microsoft.com/library/ms221402\(v=vs.85\).aspx) function on the raw memory that the `pDstNativeVariant` parameter points to.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-908">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-908">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-909">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-909">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetObjectForIUnknown">
      <MemberSignature Language="C#" Value="public static object GetObjectForIUnknown (IntPtr pUnk);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetObjectForIUnknown(native int pUnk) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetObjectForIUnknown (pUnk As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetObjectForIUnknown(IntPtr pUnk);" />
      <MemberSignature Language="F#" Value="static member GetObjectForIUnknown : nativeint -&gt; obj" Usage="System.Runtime.InteropServices.Marshal.GetObjectForIUnknown pUnk" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pUnk" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pUnk"><span data-ttu-id="68c54-910"><see langword="IUnknown" /> インターフェイスへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-910">A pointer to the <see langword="IUnknown" /> interface.</span></span></param>
        <summary><span data-ttu-id="68c54-911">COM オブジェクトを <see href="https://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> インターフェイスへのポインターによって表す型のインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-911">Returns an instance of a type that represents a COM object by a pointer to its <see href="https://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> interface.</span></span></summary>
        <returns><span data-ttu-id="68c54-912">指定したアンマネージ COM オブジェクトを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-912">An object that represents the specified unmanaged COM object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-913">このメソッドはラップ`IUnknown`マネージ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-913">This method wraps `IUnknown` in a managed object.</span></span> <span data-ttu-id="68c54-914">COM コンポーネントの参照カウントをインクリメントの効果があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-914">This has the effect of incrementing the reference count of the COM component.</span></span> <span data-ttu-id="68c54-915">ランタイムは、COM オブジェクトを表すマネージ オブジェクトでガベージ コレクションを実行するときに、参照カウントがデクリメントされます。</span><span class="sxs-lookup"><span data-stu-id="68c54-915">The reference count will be decremented when the runtime performs garbage collection on the managed object that represents the COM object.</span></span>  
  
 <span data-ttu-id="68c54-916">`pUnk`パラメーターを表す、`IUnknown`インターフェイス ポインター。 ただし、すべての COM インターフェイスから直接または間接的を派生するため`IUnknown`、任意の COM インターフェイスはこのメソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-916">The `pUnk` parameter represents an `IUnknown` interface pointer; however, because all COM interfaces derive directly or indirectly from `IUnknown`, you can pass any COM interface to this method.</span></span> <span data-ttu-id="68c54-917">によって返されるオブジェクト<xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A>は、[ランタイム呼び出し可能ラッパー](~/docs/framework/interop/runtime-callable-wrapper.md)、こととして、共通言語ランタイムを管理するは、他のマネージ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-917">The object returned by <xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A> is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), which the common language runtime manages as it does any other managed object.</span></span> <span data-ttu-id="68c54-918">このラッパーの型は、ベースでは多くの場合、`System.__ComObject`ラッパーの型があいまいな場合に使用される非表示の型である型。</span><span class="sxs-lookup"><span data-stu-id="68c54-918">The type of this wrapper is often a base `System.__ComObject` type, which is a hidden type used when the wrapper type is ambiguous.</span></span> <span data-ttu-id="68c54-919">COM オブジェクトを実装している限り、このような基本型への遅延バインディング呼び出しをかけることができます、 [IDispatch](https://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5(vs.85))インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-919">You can still make late-bound calls to such a base type as long as the COM object implements the [IDispatch](https://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5(vs.85)) interface.</span></span> <span data-ttu-id="68c54-920">同様に、返されたオブジェクトを適切な COM インターフェイスをキャストすることができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-920">Likewise, you can cast the returned object to an appropriate COM interface.</span></span>  
  
 <span data-ttu-id="68c54-921">ラップされるオブジェクトの特定のマネージ クラス型 (および汎用ラッパー型ではなく) では、次の要件に従う必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-921">For an object to be wrapped with a specific managed class type (and not a generic wrapper type), you must adhere to the following requirements:</span></span>  
  
-   <span data-ttu-id="68c54-922">実装、 [IProvideClassInfo](https://go.microsoft.com/fwlink/?LinkID=148012) COM オブジェクトのインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-922">Implement the [IProvideClassInfo](https://go.microsoft.com/fwlink/?LinkID=148012) interface for the COM object.</span></span>  
  
-   <span data-ttu-id="68c54-923">格納しているアセンブリを登録、 [Regasm.exe (アセンブリ登録ツール)](~/docs/framework/tools/regasm-exe-assembly-registration-tool.md)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-923">Register the containing assembly with the [Regasm.exe (Assembly Registration Tool)](~/docs/framework/tools/regasm-exe-assembly-registration-tool.md).</span></span>  
  
 <span data-ttu-id="68c54-924">または、これらの要件を回避し、オブジェクトを使用して、特定のマネージ クラス型でラップされます。 それでも、<xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-924">Alternatively, you can avoid these requirements and still get an object that is wrapped with a specific managed class type by using the <xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-925">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-925">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-926">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-926">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectForNativeVariant">
      <MemberSignature Language="C#" Value="public static object GetObjectForNativeVariant (IntPtr pSrcNativeVariant);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetObjectForNativeVariant(native int pSrcNativeVariant) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetObjectForNativeVariant (pSrcNativeVariant As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetObjectForNativeVariant(IntPtr pSrcNativeVariant);" />
      <MemberSignature Language="F#" Value="static member GetObjectForNativeVariant : nativeint -&gt; obj" Usage="System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant pSrcNativeVariant" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netstandard-2.1">
          <AttributeName>System.Obsolete("GetObjectForNativeVariant(IntPtr) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pSrcNativeVariant" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pSrcNativeVariant"><span data-ttu-id="68c54-927">COM VARIANT へのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-927">A pointer to a COM VARIANT.</span></span></param>
        <summary><span data-ttu-id="68c54-928">COM VARIANT をオブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-928">Converts a COM VARIANT to an object.</span></span></summary>
        <returns><span data-ttu-id="68c54-929"><paramref name="pSrcNativeVariant" /> パラメーターに対応するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-929">An object that corresponds to the <paramref name="pSrcNativeVariant" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-930"><xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> 生のポインターをアンマネージ バリアント型に対応するマネージ オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-930"><xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> returns a managed object that corresponds to a raw pointer to an unmanaged VARIANT type.</span></span> <span data-ttu-id="68c54-931">Interopmarshaler バリアント型をマネージ コードを公開するときに、同じ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="68c54-931">The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.</span></span>  
  
 <span data-ttu-id="68c54-932"><xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> 反対側の機能を提供<xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-932"><xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="68c54-933">VARIANT 型が、VT_ERROR<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A>型のオブジェクトを返します`Int32`の代わりに`UInt32`します。</span><span class="sxs-lookup"><span data-stu-id="68c54-933">When the VARIANT type is VT_ERROR, <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> returns an object of type `Int32` instead of `UInt32`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException"><span data-ttu-id="68c54-934"><paramref name="pSrcNativeVariant" /> が有効な VARIANT 型ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-934"><paramref name="pSrcNativeVariant" /> is not a valid VARIANT type.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="68c54-935"><paramref name="pSrcNativeVariant" /> に、サポートされていない型があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-935"><paramref name="pSrcNativeVariant" /> has an unsupported type.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-936">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-936">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-937">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-937">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectForNativeVariant&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetObjectForNativeVariant&lt;T&gt; (IntPtr pSrcNativeVariant);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetObjectForNativeVariant&lt;T&gt;(native int pSrcNativeVariant) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetObjectForNativeVariant(Of T) (pSrcNativeVariant As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T GetObjectForNativeVariant(IntPtr pSrcNativeVariant);" />
      <MemberSignature Language="F#" Value="static member GetObjectForNativeVariant : nativeint -&gt; 'T" Usage="System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant pSrcNativeVariant" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netstandard-2.1">
          <AttributeName>System.Obsolete("GetObjectForNativeVariant&lt;T&gt;(IntPtr) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="pSrcNativeVariant" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="68c54-938">COM VARIANT の変換先の型。</span><span class="sxs-lookup"><span data-stu-id="68c54-938">The type to which to convert the COM VARIANT.</span></span></typeparam>
        <param name="pSrcNativeVariant"><span data-ttu-id="68c54-939">COM VARIANT へのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-939">A pointer to a COM VARIANT.</span></span></param>
        <summary><span data-ttu-id="68c54-940">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-940">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-941">COM VARIANT を、指定した型のオブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-941">Converts a COM VARIANT to an object of a specified type.</span></span></summary>
        <returns><span data-ttu-id="68c54-942"><paramref name="pSrcNativeVariant" /> パラメーターに対応する、指定した型のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-942">An object of the specified type that corresponds to the <paramref name="pSrcNativeVariant" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-943"><xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> 型のマネージ オブジェクトを返します`T`生のポインターをアンマネージ バリアント型に対応します。</span><span class="sxs-lookup"><span data-stu-id="68c54-943"><xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> returns a managed object of type `T` that corresponds to a raw pointer to an unmanaged VARIANT type.</span></span> <span data-ttu-id="68c54-944">Interopmarshaler バリアント型をマネージ コードを公開するときに、同じ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="68c54-944">The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.</span></span>  
  
 <span data-ttu-id="68c54-945"><xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> 反対側の機能を提供<xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%60%601%28%60%600%2CSystem.IntPtr%29>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-945"><xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%60%601%28%60%600%2CSystem.IntPtr%29>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException"><span data-ttu-id="68c54-946"><paramref name="pSrcNativeVariant" /> が有効な VARIANT 型ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-946"><paramref name="pSrcNativeVariant" /> is not a valid VARIANT type.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="68c54-947"><paramref name="pSrcNativeVariant" /> に、サポートされていない型があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-947"><paramref name="pSrcNativeVariant" /> has an unsupported type.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-948">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-948">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-949">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-949">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetObjectsForNativeVariants">
      <MemberSignature Language="C#" Value="public static object[] GetObjectsForNativeVariants (IntPtr aSrcNativeVariant, int cVars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object[] GetObjectsForNativeVariants(native int aSrcNativeVariant, int32 cVars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetObjectsForNativeVariants (aSrcNativeVariant As IntPtr, cVars As Integer) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Object ^&gt; ^ GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars);" />
      <MemberSignature Language="F#" Value="static member GetObjectsForNativeVariants : nativeint * int -&gt; obj[]" Usage="System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants (aSrcNativeVariant, cVars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netstandard-2.1">
          <AttributeName>System.Obsolete("GetObjectsForNativeVariants(IntPtr, Int32) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aSrcNativeVariant" Type="System.IntPtr" />
        <Parameter Name="cVars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="aSrcNativeVariant"><span data-ttu-id="68c54-950">COM VARIANT の配列の最初の要素へのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-950">A pointer to the first element of an array of COM VARIANTs.</span></span></param>
        <param name="cVars"><span data-ttu-id="68c54-951">内の COM Variant の数<paramref name="aSrcNativeVariant" />します。</span><span class="sxs-lookup"><span data-stu-id="68c54-951">The count of COM VARIANTs in <paramref name="aSrcNativeVariant" />.</span></span></param>
        <summary><span data-ttu-id="68c54-952">COM <see href="https://go.microsoft.com/fwlink/?LinkId=148670">VARIANTs</see> の配列をオブジェクトの配列に変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-952">Converts an array of COM <see href="https://go.microsoft.com/fwlink/?LinkId=148670">VARIANTs</see> to an array of objects.</span></span></summary>
        <returns><span data-ttu-id="68c54-953"><paramref name="aSrcNativeVariant" /> に対応するオブジェクト配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-953">An object array that corresponds to <paramref name="aSrcNativeVariant" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-954"><xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%2A> 生のポインターをアンマネージのバリアント型の C スタイル配列に対応するマネージ オブジェクトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-954"><xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%2A> returns an array of managed objects that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types.</span></span> <span data-ttu-id="68c54-955">Interopmarshaler バリアント型をマネージ コードを公開するときに、同じ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="68c54-955">The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.</span></span> <span data-ttu-id="68c54-956">メソッドは、ときに、空の配列を返します、`cVars`パラメーターが 0 です。</span><span class="sxs-lookup"><span data-stu-id="68c54-956">The method returns an empty array when the `cVars` parameter is 0.</span></span>  
  
 <span data-ttu-id="68c54-957">オブジェクトの配列 (戻り値) では、ガベージ コレクションを通常どおり取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-957">The object array (the return value) gets garbage collected as usual.</span></span> <span data-ttu-id="68c54-958">非管理対象の入力配列または入力配列内の個々 のバリアントは解放されません。</span><span class="sxs-lookup"><span data-stu-id="68c54-958">The unmanaged input array or individual VARIANTs in the input array are not freed.</span></span> <span data-ttu-id="68c54-959">そのため、必要に応じてそれらを解放する必要がありますになります。</span><span class="sxs-lookup"><span data-stu-id="68c54-959">Therefore it is your responsibility to free them as appropriate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-960"><paramref name="cVars" /> は負の値です。</span><span class="sxs-lookup"><span data-stu-id="68c54-960"><paramref name="cVars" /> is a negative number.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-961">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-961">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-962">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-962">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetObjectsForNativeVariants&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] GetObjectsForNativeVariants&lt;T&gt; (IntPtr aSrcNativeVariant, int cVars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] GetObjectsForNativeVariants&lt;T&gt;(native int aSrcNativeVariant, int32 cVars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetObjectsForNativeVariants(Of T) (aSrcNativeVariant As IntPtr, cVars As Integer) As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static cli::array &lt;T&gt; ^ GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars);" />
      <MemberSignature Language="F#" Value="static member GetObjectsForNativeVariants : nativeint * int -&gt; 'T[]" Usage="System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants (aSrcNativeVariant, cVars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netstandard-2.1">
          <AttributeName>System.Obsolete("GetObjectsForNativeVariants&lt;T&gt;(IntPtr, Int32) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="aSrcNativeVariant" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cVars" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="68c54-963">返される配列の型。</span><span class="sxs-lookup"><span data-stu-id="68c54-963">The type of the array to return.</span></span></typeparam>
        <param name="aSrcNativeVariant"><span data-ttu-id="68c54-964">COM VARIANT の配列の最初の要素へのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-964">A pointer to the first element of an array of COM VARIANTs.</span></span></param>
        <param name="cVars"><span data-ttu-id="68c54-965">内の COM Variant の数<paramref name="aSrcNativeVariant" />します。</span><span class="sxs-lookup"><span data-stu-id="68c54-965">The count of COM VARIANTs in <paramref name="aSrcNativeVariant" />.</span></span></param>
        <summary><span data-ttu-id="68c54-966">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-966">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-967">COM VARIANT の配列を指定した型の配列に変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-967">Converts an array of COM VARIANTs to an array of a specified type.</span></span></summary>
        <returns><span data-ttu-id="68c54-968"><paramref name="aSrcNativeVariant" />. に対応する <typeparamref name="T" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-968">An array of <typeparamref name="T" /> objects that corresponds to <paramref name="aSrcNativeVariant" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-969"><xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%60%601%28System.IntPtr%2CSystem.Int32%29> 配列を返します`T`生のポインターをアンマネージのバリアント型の C スタイル配列に対応します。</span><span class="sxs-lookup"><span data-stu-id="68c54-969"><xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%60%601%28System.IntPtr%2CSystem.Int32%29> returns an array of `T` that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types.</span></span> <span data-ttu-id="68c54-970">Interopmarshaler バリアント型をマネージ コードを公開するときに、同じ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="68c54-970">The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.</span></span> <span data-ttu-id="68c54-971">メソッドは、ときに、空の配列を返します、`cVars`パラメーターが 0 です。</span><span class="sxs-lookup"><span data-stu-id="68c54-971">The method returns an empty array when the `cVars` parameter is 0.</span></span>  
  
 <span data-ttu-id="68c54-972">返される配列はガベージ コレクションが通常どおりです。</span><span class="sxs-lookup"><span data-stu-id="68c54-972">The returned array is garbage-collected as usual.</span></span> <span data-ttu-id="68c54-973">非管理対象の入力配列または入力配列内の個々 のバリアントは解放されません。</span><span class="sxs-lookup"><span data-stu-id="68c54-973">The unmanaged input array or individual VARIANTs in the input array are not freed.</span></span> <span data-ttu-id="68c54-974">そのため、必要に応じてそれらを解放する必要になります。</span><span class="sxs-lookup"><span data-stu-id="68c54-974">Therefore, it is your responsibility to free them as appropriate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-975"><paramref name="cVars" /> は負の値です。</span><span class="sxs-lookup"><span data-stu-id="68c54-975"><paramref name="cVars" /> is a negative number.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-976">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-976">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-977">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-977">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetStartComSlot">
      <MemberSignature Language="C#" Value="public static int GetStartComSlot (Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetStartComSlot(class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetStartComSlot (t As Type) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetStartComSlot(Type ^ t);" />
      <MemberSignature Language="F#" Value="static member GetStartComSlot : Type -&gt; int" Usage="System.Runtime.InteropServices.Marshal.GetStartComSlot t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="t"><span data-ttu-id="68c54-978">インターフェイスを表す型。</span><span class="sxs-lookup"><span data-stu-id="68c54-978">A type that represents an interface.</span></span></param>
        <summary><span data-ttu-id="68c54-979">ユーザー定義のメソッドを格納している、仮想関数テーブル (V テーブルまたは VTBL) の最初のスロットを取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-979">Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.</span></span></summary>
        <returns><span data-ttu-id="68c54-980">ユーザー定義のメソッドを格納している最初の VTBL スロット。</span><span class="sxs-lookup"><span data-stu-id="68c54-980">The first VTBL slot that contains user-defined methods.</span></span> <span data-ttu-id="68c54-981"><see href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</see> に基づくインターフェイスの場合、最初のスロットは 3 です。[IDispatch](https://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) に基づくインターフェイスの場合、最初のスロットは 7 です。</span><span class="sxs-lookup"><span data-stu-id="68c54-981">The first slot is 3 if the interface is based on <see href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</see>, and 7 if the interface is based on [IDispatch](https://msdn.microsoft.com/library/ebbff4bc-36b2-4861-9efa-ffa45e013eb5).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-982">このメソッドは、インターフェイスまたはクラスの 0 から始まる v テーブル数を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-982">This method returns the zero-based v-table number for an interface or a class.</span></span> <span data-ttu-id="68c54-983">クラスで使用すると、返されるスロット番号は、クラスのクラス インターフェイスを参照します。</span><span class="sxs-lookup"><span data-stu-id="68c54-983">When used on a class, the slot number that is returned refers to the class interface for the class.</span></span> <span data-ttu-id="68c54-984">クラス インターフェイスが自動ディスパッチの場合は、このメソッドは常に、ディスパッチ専用インターフェイスがマネージ クライアントに v テーブルを公開しないことを示す-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-984">If the class interface is auto-dispatch, this method always returns -1 to indicate that the dispatch-only interface does not expose a v-table to managed clients.</span></span> <span data-ttu-id="68c54-985">使用することができます<xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A>と<xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=nameWithType>と共に<xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=nameWithType>を指定した範囲内のスロットを渡します。</span><span class="sxs-lookup"><span data-stu-id="68c54-985">You can use <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A> and <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=nameWithType> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=nameWithType> to pass slots within a specified range.</span></span> <span data-ttu-id="68c54-986">詳細については、次を参照してください。[クラス インターフェイスの概要](https://msdn.microsoft.com/library/733c0dd2-12e5-46e6-8de1-39d5b25df024)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-986">For additional information, see [Introducing the Class Interface](https://msdn.microsoft.com/library/733c0dd2-12e5-46e6-8de1-39d5b25df024).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-987"><paramref name="t" /> は COM から参照できません。</span><span class="sxs-lookup"><span data-stu-id="68c54-987"><paramref name="t" /> is not visible from COM.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-988">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-988">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-989">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-989">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)" />
      </Docs>
    </Member>
    <Member MemberName="GetThreadFromFiberCookie">
      <MemberSignature Language="C#" Value="public static System.Threading.Thread GetThreadFromFiberCookie (int cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Thread GetThreadFromFiberCookie(int32 cookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetThreadFromFiberCookie (cookie As Integer) As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Thread ^ GetThreadFromFiberCookie(int cookie);" />
      <MemberSignature Language="F#" Value="static member GetThreadFromFiberCookie : int -&gt; System.Threading.Thread" Usage="System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie cookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("This method has been deprecated")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("The GetThreadFromFiberCookie method has been deprecated.  Use the hosting API to perform this operation.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="cookie"><span data-ttu-id="68c54-990">ファイバー クッキーを表す整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-990">An integer that represents a fiber cookie.</span></span></param>
        <summary><span data-ttu-id="68c54-991">ファイバー cookie を対応する <see cref="T:System.Threading.Thread" /> インスタンスに変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-991">Converts a fiber cookie into the corresponding <see cref="T:System.Threading.Thread" /> instance.</span></span></summary>
        <returns><span data-ttu-id="68c54-992"><paramref name="cookie" /> パラメーターに対応するスレッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-992">A thread that corresponds to the <paramref name="cookie" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-993">ファイバー cookie とは、そのファイバーのスケジュールを決定する共通言語ランタイムの警告時に、ホストによって使用される非透過のトークンです。</span><span class="sxs-lookup"><span data-stu-id="68c54-993">Fiber cookies are opaque tokens that are used by the host when alerting the common language runtime to its fiber-scheduling decisions.</span></span> <span data-ttu-id="68c54-994">スタックで構成され、コンテキストに登録します。</span><span class="sxs-lookup"><span data-stu-id="68c54-994">They consist of a stack and register context.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-995"><paramref name="cookie" /> パラメーターが 0 です。</span><span class="sxs-lookup"><span data-stu-id="68c54-995">The <paramref name="cookie" /> parameter is 0.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-996">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-996">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-997">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-997">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="GetTypedObjectForIUnknown">
      <MemberSignature Language="C#" Value="public static object GetTypedObjectForIUnknown (IntPtr pUnk, Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetTypedObjectForIUnknown(native int pUnk, class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypedObjectForIUnknown (pUnk As IntPtr, t As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetTypedObjectForIUnknown(IntPtr pUnk, Type ^ t);" />
      <MemberSignature Language="F#" Value="static member GetTypedObjectForIUnknown : nativeint * Type -&gt; obj" Usage="System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown (pUnk, t)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pUnk" Type="System.IntPtr" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="t" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="pUnk"><span data-ttu-id="68c54-998">アンマネージ オブジェクトの <see langword="IUnknown" />インターフェイスへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-998">A pointer to the <see langword="IUnknown" /> interface of the unmanaged object.</span></span></param>
        <param name="t"><span data-ttu-id="68c54-999">要求されたマネージド クラスの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-999">The type of the requested managed class.</span></span></param>
        <summary><span data-ttu-id="68c54-1000">COM オブジェクトを表す、指定した型のマネージド オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1000">Returns a managed object of a specified type that represents a COM object.</span></span></summary>
        <returns><span data-ttu-id="68c54-1001">要求されたアンマネージ COM オブジェクトを表す、<see cref="T:System.Type" /> オブジェクトに対応するクラスのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1001">An instance of the class corresponding to the <see cref="T:System.Type" /> object that represents the requested unmanaged COM object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1002">`t`パラメーターが COM インポート型または COM インポート型のサブタイプのいずれかにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1002">The `t` parameter must be either a COM-imported type or a subtype of a COM-imported type.</span></span> <span data-ttu-id="68c54-1003">さらに、`t`によってインポートされたメタデータを持つ型である必要があります、 [Tlbimp.exe (タイプ ライブラリ インポーター)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)ツール。</span><span class="sxs-lookup"><span data-stu-id="68c54-1003">In addition, `t` must be a type whose metadata was imported by the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool.</span></span> <span data-ttu-id="68c54-1004">この種類、クラスと関連付けられているコクラス インターフェイスではなく、COM クラスの名前が格納されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1004">This type must be a class and not an associated coclass interface, which carries the name of the COM class.</span></span> <span data-ttu-id="68c54-1005">たとえば、Tlbimp.exe でインポート`Myclass`という名前のクラスとして`MyclassClass`、コクラスのインターフェイスとしてと呼ばれます。 `Myclass`、使用する必要があります`MyclassClass`(いない`Myclass`) このメソッドを使用。</span><span class="sxs-lookup"><span data-stu-id="68c54-1005">For example, if Tlbimp.exe imports `Myclass` as a class called `MyclassClass` and as a coclass interface called `Myclass`, you must use `MyclassClass` (not `Myclass`) with this method.</span></span> <span data-ttu-id="68c54-1006">インポートされたクラスおよびインターフェイスのコクラスの詳細については、次を参照してください。[インポートの型変換](https://msdn.microsoft.com/library/cb1ee67d-8ef0-4e40-b2a5-13714b9f33c3)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1006">For additional information about imported classes and coclass interfaces, see [Imported Type Conversion](https://msdn.microsoft.com/library/cb1ee67d-8ef0-4e40-b2a5-13714b9f33c3).</span></span>  
  
 <span data-ttu-id="68c54-1007">オブジェクトが既に取得されている場合、`pUnk`パラメーター、`t`は無視されますと、既存のオブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1007">If an object has already been obtained for the `pUnk` parameter, `t` is ignored and the existing object is returned.</span></span> <span data-ttu-id="68c54-1008">`pUnk` 表す、 [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003)インターフェイス ポインター。 ただし、すべての COM インターフェイスから直接または間接的を派生するため`IUnknown`、任意の COM インターフェイスはこのメソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1008">`pUnk` represents an [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) interface pointer; however, because all COM interfaces derive directly or indirectly from `IUnknown`, you can pass any COM interface to this method.</span></span> <span data-ttu-id="68c54-1009">によって返されるオブジェクト<xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A>は、[ランタイム呼び出し可能ラッパー](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) こととして、共通言語ランタイムを管理するは、他のマネージ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1009">The object returned by <xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A> is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW), which the common language runtime manages as it does any other managed object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1010"><paramref name="t" /> は <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />を持つ属性ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1010"><paramref name="t" /> is not attributed with <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.</span></span>  
  
<span data-ttu-id="68c54-1011">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1011">-or-</span></span> 
 <span data-ttu-id="68c54-1012"><paramref name="t" /> は [!INCLUDE[wrt](~/includes/wrt-md.md)] 型です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1012"><paramref name="t" /> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1013">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1013">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1014">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1014">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.InteropServices.ComImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeForITypeInfo">
      <MemberSignature Language="C#" Value="public static Type GetTypeForITypeInfo (IntPtr piTypeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeForITypeInfo(native int piTypeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeForITypeInfo (piTypeInfo As IntPtr) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeForITypeInfo(IntPtr piTypeInfo);" />
      <MemberSignature Language="F#" Value="static member GetTypeForITypeInfo : nativeint -&gt; Type" Usage="System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo piTypeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="piTypeInfo" Type="System.IntPtr" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="piTypeInfo"><span data-ttu-id="68c54-1015">マーシャリングする <see langword="ITypeInfo" /> インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1015">The <see langword="ITypeInfo" /> interface to marshal.</span></span></param>
        <summary><span data-ttu-id="68c54-1016">アンマネージド [ITypeInfo](https://msdn.microsoft.com/library/f3356463-3373-4279-bae1-953378aa2680) オブジェクトをマネージド <see cref="T:System.Type" /> オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1016">Converts an unmanaged [ITypeInfo](https://msdn.microsoft.com/library/f3356463-3373-4279-bae1-953378aa2680) object into a managed <see cref="T:System.Type" /> object.</span></span></summary>
        <returns><span data-ttu-id="68c54-1017">アンマネージド <see langword="ITypeInfo" /> オブジェクトを表すマネージド型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1017">A managed type that represents the unmanaged <see langword="ITypeInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1018"><xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> 返します、<xref:System.Type?displayProperty=nameWithType>元の型に基づいているインスタンス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1018"><xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> returns a <xref:System.Type?displayProperty=nameWithType> instance that is based on the original type.</span></span> <span data-ttu-id="68c54-1019">適用することができます、<xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=nameWithType>に標準の相互運用マーシャ リング動作をこのカスタム マーシャラーに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1019">You can apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=nameWithType> to replace standard interop marshaling behavior with this custom marshaler.</span></span> <span data-ttu-id="68c54-1020">[Tlbimp.exe (タイプ ライブラリ インポーター)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)ツールでは、カスタム マーシャラーを使用して、翻訳`ITypeInfo`パラメーター<xref:System.Type?displayProperty=nameWithType>パラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1020">The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool uses the custom marshaler to translate `ITypeInfo` parameters to <xref:System.Type?displayProperty=nameWithType> parameters.</span></span> <span data-ttu-id="68c54-1021">ただし、取得した場合、`ITypeInfo`でいくつかのインターフェイスは Tlbimp.exe 以外の場合、使用することができます<xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A>同じ変換を手動で実行します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1021">However, if you obtain an `ITypeInfo` interface by some means other than Tlbimp.exe, you can use <xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> to manually perform the same translation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1022">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1022">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1023">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1023">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetITypeInfoForType(System.Type)" />
        <altmember cref="T:System.Runtime.InteropServices.MarshalAsAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid -&gt; Type" Usage="System.Runtime.InteropServices.Marshal.GetTypeFromCLSID clsid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="68c54-1024">返す型の CLSID。</span><span class="sxs-lookup"><span data-stu-id="68c54-1024">The CLSID of the type to return.</span></span></param>
        <summary><span data-ttu-id="68c54-1025">指定したクラス ID (CLSID) に関連付けられている型を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1025">Returns the type associated with the specified class identifier (CLSID).</span></span></summary>
        <returns><span data-ttu-id="68c54-1026">CLSID が有効かどうかに関係なく <see langword="System.__ComObject" />。</span><span class="sxs-lookup"><span data-stu-id="68c54-1026"><see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeInfoName">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1027">[ITypeInfo](https://msdn.microsoft.com/library/f3356463-3373-4279-bae1-953378aa2680) オブジェクトで表される型の名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1027">Retrieves the name of the type represented by an [ITypeInfo](https://msdn.microsoft.com/library/f3356463-3373-4279-bae1-953378aa2680) object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeInfoName">
      <MemberSignature Language="C#" Value="public static string GetTypeInfoName (System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTypeInfoName(class System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeInfoName (typeInfo As ITypeInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTypeInfoName(System::Runtime::InteropServices::ComTypes::ITypeInfo ^ typeInfo);" />
      <MemberSignature Language="F#" Value="static member GetTypeInfoName : System.Runtime.InteropServices.ComTypes.ITypeInfo -&gt; string" Usage="System.Runtime.InteropServices.Marshal.GetTypeInfoName typeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeInfo" Type="System.Runtime.InteropServices.ComTypes.ITypeInfo" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="typeInfo"><span data-ttu-id="68c54-1028"><see langword="ITypeInfo" /> ポインターを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1028">An object that represents an <see langword="ITypeInfo" /> pointer.</span></span></param>
        <summary><span data-ttu-id="68c54-1029">[ITypeInfo](https://msdn.microsoft.com/library/f3356463-3373-4279-bae1-953378aa2680) オブジェクトで表される型の名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1029">Retrieves the name of the type represented by an [ITypeInfo](https://msdn.microsoft.com/library/f3356463-3373-4279-bae1-953378aa2680) object.</span></span></summary>
        <returns><span data-ttu-id="68c54-1030"><paramref name="typeInfo" /> パラメーターが指す型の名前。</span><span class="sxs-lookup"><span data-stu-id="68c54-1030">The name of the type that the <paramref name="typeInfo" /> parameter points to.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1031">によって表される型の名前を取得することも、`ITypeInfo`呼び出すことによって、<xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=nameWithType>メソッドと最初のパラメーターの場合は-1 を渡します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1031">You can also retrieve the name of the type represented by an `ITypeInfo` by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=nameWithType> method and passing -1 for its first parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1032"><paramref name="typeInfo" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1032">The <paramref name="typeInfo" /> parameter is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1033">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1033">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1034">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1034">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfoName">
      <MemberSignature Language="C#" Value="public static string GetTypeInfoName (System.Runtime.InteropServices.UCOMITypeInfo pTI);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTypeInfoName(class System.Runtime.InteropServices.UCOMITypeInfo pTI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeInfoName (pTI As UCOMITypeInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTypeInfoName(System::Runtime::InteropServices::UCOMITypeInfo ^ pTI);" />
      <MemberSignature Language="F#" Value="static member GetTypeInfoName : System.Runtime.InteropServices.UCOMITypeInfo -&gt; string" Usage="System.Runtime.InteropServices.Marshal.GetTypeInfoName pTI" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Use System.Runtime.InteropServices.Marshal.GetTypeInfoName(ITypeInfo pTLB) instead. http://go.microsoft.com/fwlink/?linkid=14202&amp;ID=0000011.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pTI" Type="System.Runtime.InteropServices.UCOMITypeInfo" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pTI"><span data-ttu-id="68c54-1035"><see langword="ITypeInfo" /> ポインターを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1035">An object that represents an <see langword="ITypeInfo" /> pointer.</span></span></param>
        <summary><span data-ttu-id="68c54-1036">[ITypeInfo](https://msdn.microsoft.com/library/f3356463-3373-4279-bae1-953378aa2680) オブジェクトで表される型の名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1036">Retrieves the name of the type represented by an [ITypeInfo](https://msdn.microsoft.com/library/f3356463-3373-4279-bae1-953378aa2680) object.</span></span></summary>
        <returns><span data-ttu-id="68c54-1037"><paramref name="pTI" /> パラメーターが指す型の名前。</span><span class="sxs-lookup"><span data-stu-id="68c54-1037">The name of the type that the <paramref name="pTI" /> parameter points to.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1038">によって表される型の名前を取得することもできます、`ITypeInfo`オブジェクトを呼び出すことによって、<xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=nameWithType>メソッドと最初のパラメーターの場合は-1 を渡します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1038">You can also retrieve the name of the type represented by an `ITypeInfo` object by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=nameWithType> method and passing -1 for its first parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1039">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1039">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1040">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1040">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeLibGuid">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1041">タイプ ライブラリのライブラリ ID (LIBID) を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1041">Retrieves the library identifier (LIBID) of a type library.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeLibGuid">
      <MemberSignature Language="C#" Value="public static Guid GetTypeLibGuid (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid GetTypeLibGuid(class System.Runtime.InteropServices.ComTypes.ITypeLib typelib) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.ComTypes.ITypeLib)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeLibGuid (typelib As ITypeLib) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Guid GetTypeLibGuid(System::Runtime::InteropServices::ComTypes::ITypeLib ^ typelib);" />
      <MemberSignature Language="F#" Value="static member GetTypeLibGuid : System.Runtime.InteropServices.ComTypes.ITypeLib -&gt; Guid" Usage="System.Runtime.InteropServices.Marshal.GetTypeLibGuid typelib" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typelib" Type="System.Runtime.InteropServices.ComTypes.ITypeLib" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="typelib"><span data-ttu-id="68c54-1042">LIBID を取得するタイプ ライブラリ。</span><span class="sxs-lookup"><span data-stu-id="68c54-1042">The type library whose LIBID is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="68c54-1043">タイプ ライブラリのライブラリ ID (LIBID) を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1043">Retrieves the library identifier (LIBID) of a type library.</span></span></summary>
        <returns><span data-ttu-id="68c54-1044">指定したタイプ ライブラリの LIBID。</span><span class="sxs-lookup"><span data-stu-id="68c54-1044">The LIBID of the specified type library.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1045"><xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> 既存のタイプ ライブラリから直接、LIBID を抽出します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1045"><xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> extracts the LIBID directly from an existing type library.</span></span> <span data-ttu-id="68c54-1046">この操作が異なるの<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=nameWithType>べき LIBID を計算するメソッドは、現在のアセンブリに基づきます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1046">This action differs from that of the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=nameWithType> method, which calculates what the LIBID should be based on the current assembly.</span></span>  
  
 <span data-ttu-id="68c54-1047">ライブラリ識別子の詳細については、次を参照してください。[アセンブリの変換をエクスポート](https://msdn.microsoft.com/library/3fffd8db-240f-4fde-a558-a5bcc01e1a86)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1047">For more information about library identifiers, see [Exported Assembly Conversion](https://msdn.microsoft.com/library/3fffd8db-240f-4fde-a558-a5bcc01e1a86).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1048">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1048">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1049">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1049">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)" />
        <altmember cref="T:System.Runtime.InteropServices.ComTypes.ITypeLib" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeLibGuid">
      <MemberSignature Language="C#" Value="public static Guid GetTypeLibGuid (System.Runtime.InteropServices.UCOMITypeLib pTLB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid GetTypeLibGuid(class System.Runtime.InteropServices.UCOMITypeLib pTLB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeLibGuid (pTLB As UCOMITypeLib) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Guid GetTypeLibGuid(System::Runtime::InteropServices::UCOMITypeLib ^ pTLB);" />
      <MemberSignature Language="F#" Value="static member GetTypeLibGuid : System.Runtime.InteropServices.UCOMITypeLib -&gt; Guid" Usage="System.Runtime.InteropServices.Marshal.GetTypeLibGuid pTLB" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Use System.Runtime.InteropServices.Marshal.GetTypeLibGuid(ITypeLib pTLB) instead. http://go.microsoft.com/fwlink/?linkid=14202&amp;ID=0000011.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pTLB" Type="System.Runtime.InteropServices.UCOMITypeLib" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pTLB"><span data-ttu-id="68c54-1050">LIBID を取得するタイプ ライブラリ。</span><span class="sxs-lookup"><span data-stu-id="68c54-1050">The type library whose LIBID is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="68c54-1051">タイプ ライブラリのライブラリ ID (LIBID) を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1051">Retrieves the library identifier (LIBID) of a type library.</span></span></summary>
        <returns><span data-ttu-id="68c54-1052"><paramref name="pTLB" /> パラメーターが指すタイプ ライブラリの LIBID。</span><span class="sxs-lookup"><span data-stu-id="68c54-1052">The LIBID of the type library that the <paramref name="pTLB" /> parameter points to.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1053"><xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> 既存のタイプ ライブラリから直接、LIBID を抽出します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1053"><xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> extracts the LIBID directly from an existing type library.</span></span> <span data-ttu-id="68c54-1054">この操作が異なるの<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=nameWithType>べき LIBID を計算するメソッドは、現在のアセンブリに基づきます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1054">This action differs from that of the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=nameWithType> method, which calculates what the LIBID should be based on the current assembly.</span></span>  
  
 <span data-ttu-id="68c54-1055">ライブラリ識別子の詳細については、次を参照してください。[アセンブリの変換をエクスポート](https://msdn.microsoft.com/library/3fffd8db-240f-4fde-a558-a5bcc01e1a86)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1055">For more information about library identifiers, see [Exported Assembly Conversion](https://msdn.microsoft.com/library/3fffd8db-240f-4fde-a558-a5bcc01e1a86).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1056">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1056">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1057">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1057">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)" />
        <altmember cref="T:System.Runtime.InteropServices.UCOMITypeLib" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeLibGuidForAssembly">
      <MemberSignature Language="C#" Value="public static Guid GetTypeLibGuidForAssembly (System.Reflection.Assembly asm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid GetTypeLibGuidForAssembly(class System.Reflection.Assembly asm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeLibGuidForAssembly (asm As Assembly) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Guid GetTypeLibGuidForAssembly(System::Reflection::Assembly ^ asm);" />
      <MemberSignature Language="F#" Value="static member GetTypeLibGuidForAssembly : System.Reflection.Assembly -&gt; Guid" Usage="System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly asm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asm" Type="System.Reflection.Assembly" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asm"><span data-ttu-id="68c54-1058">タイプ ライブラリのエクスポート元のアセンブリ。</span><span class="sxs-lookup"><span data-stu-id="68c54-1058">The assembly from which the type library was exported.</span></span></param>
        <summary><span data-ttu-id="68c54-1059">指定したアセンブリからエクスポートされるときにタイプ ライブラリに割り当てられるライブラリ ID (LIBID) を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1059">Retrieves the library identifier (LIBID) that is assigned to a type library when it was exported from the specified assembly.</span></span></summary>
        <returns><span data-ttu-id="68c54-1060">指定したアセンブリからエクスポートされるときにタイプ ライブラリに割り当てられる LIBID。</span><span class="sxs-lookup"><span data-stu-id="68c54-1060">The LIBID that is assigned to a type library when it is exported from the specified assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1061">アセンブリがタイプ ライブラリにエクスポートされると、タイプ ライブラリには、LIBID が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1061">When assemblies are exported to type libraries, the type library is assigned a LIBID.</span></span> <span data-ttu-id="68c54-1062">LIBID を明示的に設定するには適用することで、<xref:System.Runtime.InteropServices.GuidAttribute?displayProperty=nameWithType>アセンブリでレベル、またはそのは自動的に生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1062">You can set the LIBID explicitly by applying the <xref:System.Runtime.InteropServices.GuidAttribute?displayProperty=nameWithType> at the assembly level, or it can be generated automatically.</span></span> <span data-ttu-id="68c54-1063">[Tlbimp.exe (タイプ ライブラリ インポーター)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)ツールは、アセンブリの id に基づく LIBID 値を計算します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1063">The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool calculates a LIBID value based on the identity of the assembly.</span></span> <span data-ttu-id="68c54-1064"><xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> 関連付けられている LIBID を返します、<xref:System.Runtime.InteropServices.GuidAttribute>属性が適用されている場合、します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1064"><xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> returns the LIBID that is associated with the <xref:System.Runtime.InteropServices.GuidAttribute>, if the attribute is applied.</span></span> <span data-ttu-id="68c54-1065">それ以外の場合、<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A>計算値を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1065">Otherwise, <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A> returns the calculated value.</span></span> <span data-ttu-id="68c54-1066">また、使用することができます、<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A>メソッドを既存のタイプ ライブラリから実際の LIBID を抽出します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1066">Alternatively, you can use the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> method to extract the actual LIBID from an existing type library.</span></span>  
  
 <span data-ttu-id="68c54-1067">参照してください、[アセンブリの変換をエクスポート](https://msdn.microsoft.com/library/3fffd8db-240f-4fde-a558-a5bcc01e1a86)ライブラリ識別子の詳細についてはトピック。</span><span class="sxs-lookup"><span data-stu-id="68c54-1067">See the [Exported Assembly Conversion](https://msdn.microsoft.com/library/3fffd8db-240f-4fde-a558-a5bcc01e1a86) topic for more information about library identifiers.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1068"><paramref name="asm" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1068"><paramref name="asm" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1069">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1069">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1070">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1070">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.InteropServices.GuidAttribute" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeLibLcid">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1071">タイプ ライブラリの LCID を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1071">Retrieves the LCID of a type library.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeLibLcid">
      <MemberSignature Language="C#" Value="public static int GetTypeLibLcid (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetTypeLibLcid(class System.Runtime.InteropServices.ComTypes.ITypeLib typelib) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.ComTypes.ITypeLib)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeLibLcid (typelib As ITypeLib) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetTypeLibLcid(System::Runtime::InteropServices::ComTypes::ITypeLib ^ typelib);" />
      <MemberSignature Language="F#" Value="static member GetTypeLibLcid : System.Runtime.InteropServices.ComTypes.ITypeLib -&gt; int" Usage="System.Runtime.InteropServices.Marshal.GetTypeLibLcid typelib" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typelib" Type="System.Runtime.InteropServices.ComTypes.ITypeLib" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="typelib"><span data-ttu-id="68c54-1072">LCID を取得するタイプ ライブラリ。</span><span class="sxs-lookup"><span data-stu-id="68c54-1072">The type library whose LCID is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="68c54-1073">タイプ ライブラリの LCID を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1073">Retrieves the LCID of a type library.</span></span></summary>
        <returns><span data-ttu-id="68c54-1074"><paramref name="typelib" /> パラメーターが指すタイプ ライブラリの LCID。</span><span class="sxs-lookup"><span data-stu-id="68c54-1074">The LCID of the type library that the <paramref name="typelib" /> parameter points to.</span></span></returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1075">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1075">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1076">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1076">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetTypeLibLcid">
      <MemberSignature Language="C#" Value="public static int GetTypeLibLcid (System.Runtime.InteropServices.UCOMITypeLib pTLB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetTypeLibLcid(class System.Runtime.InteropServices.UCOMITypeLib pTLB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeLibLcid (pTLB As UCOMITypeLib) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetTypeLibLcid(System::Runtime::InteropServices::UCOMITypeLib ^ pTLB);" />
      <MemberSignature Language="F#" Value="static member GetTypeLibLcid : System.Runtime.InteropServices.UCOMITypeLib -&gt; int" Usage="System.Runtime.InteropServices.Marshal.GetTypeLibLcid pTLB" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Use System.Runtime.InteropServices.Marshal.GetTypeLibLcid(ITypeLib pTLB) instead. http://go.microsoft.com/fwlink/?linkid=14202&amp;ID=0000011.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pTLB" Type="System.Runtime.InteropServices.UCOMITypeLib" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pTLB"><span data-ttu-id="68c54-1077">LCID を取得するタイプ ライブラリ。</span><span class="sxs-lookup"><span data-stu-id="68c54-1077">The type library whose LCID is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="68c54-1078">タイプ ライブラリの LCID を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1078">Retrieves the LCID of a type library.</span></span></summary>
        <returns><span data-ttu-id="68c54-1079"><paramref name="pTLB" /> パラメーターが指すタイプ ライブラリの LCID。</span><span class="sxs-lookup"><span data-stu-id="68c54-1079">The LCID of the type library that the <paramref name="pTLB" /> parameter points to.</span></span></returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1080">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1080">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1081">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1081">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeLibName">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1082">タイプ ライブラリの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1082">Retrieves the name of a type library.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeLibName">
      <MemberSignature Language="C#" Value="public static string GetTypeLibName (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTypeLibName(class System.Runtime.InteropServices.ComTypes.ITypeLib typelib) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.ComTypes.ITypeLib)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeLibName (typelib As ITypeLib) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTypeLibName(System::Runtime::InteropServices::ComTypes::ITypeLib ^ typelib);" />
      <MemberSignature Language="F#" Value="static member GetTypeLibName : System.Runtime.InteropServices.ComTypes.ITypeLib -&gt; string" Usage="System.Runtime.InteropServices.Marshal.GetTypeLibName typelib" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typelib" Type="System.Runtime.InteropServices.ComTypes.ITypeLib" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="typelib"><span data-ttu-id="68c54-1083">名前を取得するタイプ ライブラリ。</span><span class="sxs-lookup"><span data-stu-id="68c54-1083">The type library whose name is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="68c54-1084">タイプ ライブラリの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1084">Retrieves the name of a type library.</span></span></summary>
        <returns><span data-ttu-id="68c54-1085"><paramref name="typelib" /> パラメーターが指すタイプ ライブラリの名前。</span><span class="sxs-lookup"><span data-stu-id="68c54-1085">The name of the type library that the <paramref name="typelib" /> parameter points to.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1086">このメソッドによって返される名前は、Microsoft ADO タイプ ライブラリの ADODB などのライブラリ ステートメントで使用される識別子です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1086">The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library.</span></span> <span data-ttu-id="68c54-1087">名は、ファイル名ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1087">The name is not a file name.</span></span>  
  
 <span data-ttu-id="68c54-1088">呼び出すことによって、タイプ ライブラリ名を取得することも、<xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=nameWithType>メソッドと最初のパラメーターの場合は-1 を渡します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1088">You can also retrieve the type library name by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=nameWithType> method and passing -1 for its first parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1089"><paramref name="typelib" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1089">The <paramref name="typelib" /> parameter is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1090">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1090">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1091">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1091">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.UCOMITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeLibName">
      <MemberSignature Language="C#" Value="public static string GetTypeLibName (System.Runtime.InteropServices.UCOMITypeLib pTLB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTypeLibName(class System.Runtime.InteropServices.UCOMITypeLib pTLB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeLibName (pTLB As UCOMITypeLib) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTypeLibName(System::Runtime::InteropServices::UCOMITypeLib ^ pTLB);" />
      <MemberSignature Language="F#" Value="static member GetTypeLibName : System.Runtime.InteropServices.UCOMITypeLib -&gt; string" Usage="System.Runtime.InteropServices.Marshal.GetTypeLibName pTLB" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Use System.Runtime.InteropServices.Marshal.GetTypeLibName(ITypeLib pTLB) instead. http://go.microsoft.com/fwlink/?linkid=14202&amp;ID=0000011.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pTLB" Type="System.Runtime.InteropServices.UCOMITypeLib" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pTLB"><span data-ttu-id="68c54-1092">名前を取得するタイプ ライブラリ。</span><span class="sxs-lookup"><span data-stu-id="68c54-1092">The type library whose name is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="68c54-1093">タイプ ライブラリの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1093">Retrieves the name of a type library.</span></span></summary>
        <returns><span data-ttu-id="68c54-1094"><paramref name="pTLB" /> パラメーターが指すタイプ ライブラリの名前。</span><span class="sxs-lookup"><span data-stu-id="68c54-1094">The name of the type library that the <paramref name="pTLB" /> parameter points to.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1095">このメソッドによって返される名前は、Microsoft ADO タイプ ライブラリの ADODB などのライブラリ ステートメントで使用される識別子です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1095">The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library.</span></span> <span data-ttu-id="68c54-1096">名は、ファイル名ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1096">The name is not a file name.</span></span>  
  
 <span data-ttu-id="68c54-1097">呼び出すことによって、タイプ ライブラリ名を取得することも、<xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=nameWithType>メソッドと最初のパラメーターの場合は-1 を渡します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1097">You can also retrieve the type library name by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=nameWithType> method and passing -1 for its first parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1098">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1098">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1099">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1099">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.UCOMITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeLibVersionForAssembly">
      <MemberSignature Language="C#" Value="public static void GetTypeLibVersionForAssembly (System.Reflection.Assembly inputAssembly, out int majorVersion, out int minorVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetTypeLibVersionForAssembly(class System.Reflection.Assembly inputAssembly, [out] int32&amp; majorVersion, [out] int32&amp; minorVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly(System.Reflection.Assembly,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetTypeLibVersionForAssembly (inputAssembly As Assembly, ByRef majorVersion As Integer, ByRef minorVersion As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetTypeLibVersionForAssembly(System::Reflection::Assembly ^ inputAssembly, [Runtime::InteropServices::Out] int % majorVersion, [Runtime::InteropServices::Out] int % minorVersion);" />
      <MemberSignature Language="F#" Value="static member GetTypeLibVersionForAssembly : System.Reflection.Assembly *  *  -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly (inputAssembly, majorVersion, minorVersion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputAssembly" Type="System.Reflection.Assembly" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="majorVersion" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="minorVersion" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="inputAssembly"><span data-ttu-id="68c54-1100">マネージド アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="68c54-1100">A managed assembly.</span></span></param>
        <param name="majorVersion"><span data-ttu-id="68c54-1101">メジャー バージョン番号。</span><span class="sxs-lookup"><span data-stu-id="68c54-1101">The major version number.</span></span></param>
        <param name="minorVersion"><span data-ttu-id="68c54-1102">マイナー バージョン番号。</span><span class="sxs-lookup"><span data-stu-id="68c54-1102">The minor version number.</span></span></param>
        <summary><span data-ttu-id="68c54-1103">指定したアセンブリからエクスポートされるタイプ ライブラリのバージョン番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1103">Retrieves the version number of a type library that will be exported from the specified assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1104">使用してアセンブリをエクスポートする前に<xref:System.Runtime.InteropServices.TypeLibExporterFlags>で、`CallerResolvedReferences`値、アセンブリからタイプ ライブラリ バージョンを取得するこのメソッドを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1104">Before exporting an assembly by using <xref:System.Runtime.InteropServices.TypeLibExporterFlags> with the `CallerResolvedReferences` value, you can use this method to retrieve the type library version from the assembly.</span></span>  
  
 <span data-ttu-id="68c54-1105">適用しない場合、<xref:System.Runtime.InteropServices.TypeLibVersionAttribute>生成されたタイプ ライブラリのバージョン番号を属性に明示的に制御するエクスポートされたアセンブリをタイプ ライブラリが必要で、アセンブリと同じバージョン番号があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1105">If you do not apply the <xref:System.Runtime.InteropServices.TypeLibVersionAttribute> attribute to an exported assembly to explicitly control the version number of the generated type library, the type library will have the same version number as the assembly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1106"><paramref name="inputAssembly" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1106"><paramref name="inputAssembly" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1107">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1107">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1108">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1108">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.InteropServices.TypeLibExporterFlags" />
        <altmember cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" />
        <altmember cref="T:System.Runtime.InteropServices.ITypeLibConverter" />
      </Docs>
    </Member>
    <Member MemberName="GetUniqueObjectForIUnknown">
      <MemberSignature Language="C#" Value="public static object GetUniqueObjectForIUnknown (IntPtr unknown);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetUniqueObjectForIUnknown(native int unknown) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUniqueObjectForIUnknown (unknown As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetUniqueObjectForIUnknown(IntPtr unknown);" />
      <MemberSignature Language="F#" Value="static member GetUniqueObjectForIUnknown : nativeint -&gt; obj" Usage="System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown unknown" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unknown" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="unknown"><span data-ttu-id="68c54-1109"><see langword="IUnknown" /> インターフェイスへのマネージド ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1109">A managed pointer to an <see langword="IUnknown" /> interface.</span></span></param>
        <summary><span data-ttu-id="68c54-1110">指定された <see href="https://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> インターフェイスの一意の [ ランタイム呼び出し可能ラッパー ](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW: Runtime Callable Wrapper) オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1110">Creates a unique [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) object for a given <see href="https://go.microsoft.com/fwlink/?LinkId=148003">IUnknown</see> interface.</span></span></summary>
        <returns><span data-ttu-id="68c54-1111">指定した <see langword="IUnknown" /> インターフェイスの一意の RCW。</span><span class="sxs-lookup"><span data-stu-id="68c54-1111">A unique RCW for the specified <see langword="IUnknown" /> interface.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1112"><xref:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown%2A>メソッドは一致しないため、一意の RCW が表示されることを確認、`IUnknown`既存のオブジェクトへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1112">The <xref:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown%2A> method ensures that you receive a unique RCW, because it does not match an `IUnknown` pointer to an existing object.</span></span> <span data-ttu-id="68c54-1113">呼び出すコードは、他の影響を受けない一意の RCW を作成するときに、このメソッドを使用して、<xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1113">Use this method when you have to create a unique RCW that is not impacted by other code that calls the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1114">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1114">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1115">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1115">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetUnmanagedThunkForManagedMethodPtr">
      <MemberSignature Language="C#" Value="public static IntPtr GetUnmanagedThunkForManagedMethodPtr (IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetUnmanagedThunkForManagedMethodPtr(native int pfnMethodToWrap, native int pbSignature, int32 cbSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnmanagedThunkForManagedMethodPtr (pfnMethodToWrap As IntPtr, pbSignature As IntPtr, cbSignature As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetUnmanagedThunkForManagedMethodPtr(IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature);" />
      <MemberSignature Language="F#" Value="static member GetUnmanagedThunkForManagedMethodPtr : nativeint * nativeint * int -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr (pfnMethodToWrap, pbSignature, cbSignature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("This method has been deprecated")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("The GetUnmanagedThunkForManagedMethodPtr method has been deprecated and will be removed in a future release.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pfnMethodToWrap" Type="System.IntPtr" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="pbSignature" Type="System.IntPtr" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="cbSignature" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pfnMethodToWrap"><span data-ttu-id="68c54-1116">マーシャリングするメソッドへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1116">A pointer to the method to marshal.</span></span></param>
        <param name="pbSignature"><span data-ttu-id="68c54-1117">メソッド シグネチャへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1117">A pointer to the method signature.</span></span></param>
        <param name="cbSignature"><span data-ttu-id="68c54-1118">バイト数<paramref name="pbSignature" />します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1118">The number of bytes in <paramref name="pbSignature" />.</span></span></param>
        <summary><span data-ttu-id="68c54-1119">アンマネージド コードからマネージド コードに呼び出しをマーシャリングする、ランタイムによって生成される関数へのポインターを取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1119">Gets a pointer to a runtime-generated function that marshals a call from unmanaged to managed code.</span></span></summary>
        <returns><span data-ttu-id="68c54-1120"><paramref name="pfnMethodToWrap" /> からマネージド コードに呼び出しをマーシャリングする関数へのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1120">A pointer to a function that will marshal a call from <paramref name="pfnMethodToWrap" /> to managed code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1121"><xref:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr%2A> コンパイラのサポートのみ公開されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1121"><xref:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr%2A> is exposed for compiler support only.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1122">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1122">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1123">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1123">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IsComObject">
      <MemberSignature Language="C#" Value="public static bool IsComObject (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsComObject(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsComObject (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsComObject(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member IsComObject : obj -&gt; bool" Usage="System.Runtime.InteropServices.Marshal.IsComObject o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="68c54-1124">確認する対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1124">The object to check.</span></span></param>
        <summary><span data-ttu-id="68c54-1125">指定したオブジェクトが COM オブジェクトを表すかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1125">Indicates whether a specified object represents a COM object.</span></span></summary>
        <returns><span data-ttu-id="68c54-1126"><paramref name="o" /> パラメーターが COM 型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="68c54-1126"><see langword="true" /> if the <paramref name="o" /> parameter is a COM type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1127"><xref:System.Runtime.InteropServices.Marshal.IsComObject%2A> 返します`true`インスタンスのクラス型に属性がかどうか<xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=nameWithType>の属性がクラスから直接的または間接的に派生している場合、または<xref:System.Runtime.InteropServices.ComImportAttribute>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1127"><xref:System.Runtime.InteropServices.Marshal.IsComObject%2A> returns `true` if the class type of the instance is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=nameWithType> or if it derives directly or indirectly from a class attributed with <xref:System.Runtime.InteropServices.ComImportAttribute>.</span></span> <span data-ttu-id="68c54-1128">[Tlbimp.exe (タイプ ライブラリ インポーター)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)ツールは、タイプ ライブラリをインポートするときのこの属性を適用します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1128">The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library.</span></span>  
  
 <span data-ttu-id="68c54-1129">その他の 2 つのメソッドが、指定したオブジェクトを返すための要件が、COM オブジェクトを表すかどうかを判断しても`true`このメソッドの要件とは異なります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1129">Two other methods also determine whether a specified object represents a COM object, but the requirements for returning `true` differ from this method's requirements.</span></span> <span data-ttu-id="68c54-1130"><xref:System.Type.IsImport%2A?displayProperty=nameWithType> 返します`true`でクラス (またはインターフェイス) を指定するかどうかは<xref:System.Runtime.InteropServices.ComImportAttribute>は直接返されません`true`の派生型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1130"><xref:System.Type.IsImport%2A?displayProperty=nameWithType> returns `true` if the class (or interface) is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute> directly; it does not return `true` for derived types.</span></span> <span data-ttu-id="68c54-1131"><xref:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType%2A?displayProperty=nameWithType> 返します`true`場合に、型の属性が<xref:System.Runtime.InteropServices.ComImportAttribute>または同じ GUID を持つ型から派生します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1131"><xref:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType%2A?displayProperty=nameWithType> returns `true` if the type is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute> or derives from a type with the same GUID.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1132"><paramref name="o" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1132"><paramref name="o" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Runtime.InteropServices.ComImportAttribute" />
        <altmember cref="P:System.Type.IsImport" />
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="IsTypeVisibleFromCom">
      <MemberSignature Language="C#" Value="public static bool IsTypeVisibleFromCom (Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTypeVisibleFromCom(class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsTypeVisibleFromCom (t As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsTypeVisibleFromCom(Type ^ t);" />
      <MemberSignature Language="F#" Value="static member IsTypeVisibleFromCom : Type -&gt; bool" Usage="System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="t"><span data-ttu-id="68c54-1133">COM の参照可能範囲を確認する対象の型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1133">The type to check for COM visibility.</span></span></param>
        <summary><span data-ttu-id="68c54-1134">型が COM クライアントに表示されるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1134">Indicates whether a type is visible to COM clients.</span></span></summary>
        <returns><span data-ttu-id="68c54-1135">型が COM から参照できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="68c54-1135"><see langword="true" /> if the type is visible to COM; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1136"><xref:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom%2A> 1 つの手順で、COM の可視性を確認できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1136"><xref:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom%2A> enables you to check for COM visibility in one step.</span></span> <span data-ttu-id="68c54-1137">表示されていない型は COM から使用できません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1137">Types that are not visible cannot be used from COM.</span></span> <span data-ttu-id="68c54-1138">ある場合に表示される`public`に隠ぺいされていない、<xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1138">A type is visible if it is `public` and not hidden with the <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="NumParamBytes">
      <MemberSignature Language="C#" Value="public static int NumParamBytes (System.Reflection.MethodInfo m);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 NumParamBytes(class System.Reflection.MethodInfo m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.NumParamBytes(System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NumParamBytes (m As MethodInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int NumParamBytes(System::Reflection::MethodInfo ^ m);" />
      <MemberSignature Language="F#" Value="static member NumParamBytes : System.Reflection.MethodInfo -&gt; int" Usage="System.Runtime.InteropServices.Marshal.NumParamBytes m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Reflection.MethodInfo" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="68c54-1139">チェックするメソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1139">The method to be checked.</span></span></param>
        <summary><span data-ttu-id="68c54-1140">指定したメソッドのパラメーターを保持するために必要なアンマネージ メモリ内のバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1140">Calculates the number of bytes in unmanaged memory that are required to hold the parameters for the specified method.</span></span></summary>
        <returns><span data-ttu-id="68c54-1141">メソッドのパラメーターを表すために必要なアンマネージ メモリ内のバイト数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1141">The number of bytes required to represent the method parameters in unmanaged memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1142"><xref:System.Runtime.InteropServices.Marshal.NumParamBytes%2A>メソッドをアンマネージ メモリ内のメソッド シグネチャのパラメーターを表すために必要なバイト単位でスタック サイズを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1142">The <xref:System.Runtime.InteropServices.Marshal.NumParamBytes%2A> method returns the stack size (in bytes) needed to represent the parameters of a method signature in unmanaged memory.</span></span>  
  
 <span data-ttu-id="68c54-1143">このメソッドの戻り値は、プラットフォームに依存することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="68c54-1143">Note that the return value of this method is platform-dependent.</span></span> <span data-ttu-id="68c54-1144">たとえば、1 つの整数パラメーターのシグネチャには、32 ビット プラットフォームと 64 ビット プラットフォーム上で 8 の値を 4 の値を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1144">For example, a signature with a single integer parameter returns a value of 4 on 32-bit platforms and a value of 8 on 64-bit platforms.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1145"><paramref name="m" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1145">The <paramref name="m" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1146"><paramref name="m" /> パラメーターが <see cref="T:System.Reflection.MethodInfo" /> オブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1146">The <paramref name="m" /> parameter is not a <see cref="T:System.Reflection.MethodInfo" /> object.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1147">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1147">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1148">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1148">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="OffsetOf">
      <MemberSignature Language="C#" Value="public static IntPtr OffsetOf (Type t, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int OffsetOf(class System.Type t, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OffsetOf (t As Type, fieldName As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr OffsetOf(Type ^ t, System::String ^ fieldName);" />
      <MemberSignature Language="F#" Value="static member OffsetOf : Type * string -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.OffsetOf (t, fieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("OffsetOf(Type, string) may be unavailable in future releases. Instead, use OffsetOf&lt;T&gt;(string). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296511")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="t"><span data-ttu-id="68c54-1149">マネージド クラスを指定する値型または書式指定参照型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1149">A value type or formatted reference type that specifies the managed class.</span></span> <span data-ttu-id="68c54-1150"><see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> をクラスに適用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1150">You must apply the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> to the class.</span></span></param>
        <param name="fieldName"><span data-ttu-id="68c54-1151">内のフィールド、<paramref name="t" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1151">The field within the <paramref name="t" /> parameter.</span></span></param>
        <summary><span data-ttu-id="68c54-1152">マネージド クラスのアンマネージド フォームのフィールド オフセットを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1152">Returns the field offset of the unmanaged form of the managed class.</span></span></summary>
        <returns><span data-ttu-id="68c54-1153">プラットフォーム呼び出しによって宣言される指定したクラス内の <paramref name="fieldName" /> パラメーターのバイト単位のオフセット。</span><span class="sxs-lookup"><span data-stu-id="68c54-1153">The offset, in bytes, for the <paramref name="fieldName" /> parameter within the specified class that is declared by platform invoke.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1154"><xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> マネージ構造体レイアウトのオフセットに必ずしも対応しないアンマネージ構造体レイアウトの観点からのオフセットを提供します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1154"><xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout.</span></span> <span data-ttu-id="68c54-1155">構造体をマーシャ リング、レイアウトを変換し、オフセットを変更できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1155">Marshaling the structure can transform the layout and alter the offset.</span></span> <span data-ttu-id="68c54-1156">`t`パラメーターが値型または (いずれか、シーケンシャルまたは明示的なレイアウトで) 書式指定参照型にすることができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1156">The `t` parameter can be a value type or a formatted reference type (with either a sequential or explicit layout).</span></span> <span data-ttu-id="68c54-1157">使用して全体のレイアウトのサイズを取得することができます、<xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1157">You can obtain the size of the entire layout by using the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="68c54-1158">詳細については、次を参照してください。[既定値の型のマーシャ リング](https://msdn.microsoft.com/library/4d9a876c-e05a-40ba-bd85-bd22877f984a)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1158">For additional information, see [Default Marshaling for Value Types](https://msdn.microsoft.com/library/4d9a876c-e05a-40ba-bd85-bd22877f984a).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="68c54-1159">.NET Framework version 2.0 以降<xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A>プライベート フィールドを公開することがあります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1159">Beginning with the .NET Framework version 2.0, <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> may expose private fields.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1160">クラスを構造体としてエクスポートできません。またはフィールドが非パブリックです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1160">The class cannot be exported as a structure or the field is nonpublic.</span></span> <span data-ttu-id="68c54-1161">.NET Framework Version 2.0 から開始すると、フィールドはプライベートになる場合があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1161">Beginning with the .NET Framework version 2.0, the field may be private.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1162"><paramref name="t" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1162">The <paramref name="t" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OffsetOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr OffsetOf&lt;T&gt; (string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int OffsetOf&lt;T&gt;(string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OffsetOf(Of T) (fieldName As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static IntPtr OffsetOf(System::String ^ fieldName);" />
      <MemberSignature Language="F#" Value="static member OffsetOf : string -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.OffsetOf fieldName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="68c54-1163">マネージド値型または書式指定参照型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1163">A managed value type or formatted reference type.</span></span> <span data-ttu-id="68c54-1164"><see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 属性をクラスに適用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1164">You must apply the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> attribute to the class.</span></span></typeparam>
        <param name="fieldName"><span data-ttu-id="68c54-1165"><paramref name="T" /> 型内のフィールドの名前。</span><span class="sxs-lookup"><span data-stu-id="68c54-1165">The name of the field in the <paramref name="T" /> type.</span></span></param>
        <summary><span data-ttu-id="68c54-1166">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-1166">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-1167">指定されたマネージド クラスのアンマネージド フォームのフィールド オフセットを返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1167">Returns the field offset of the unmanaged form of a specified managed class.</span></span></summary>
        <returns><span data-ttu-id="68c54-1168">プラットフォーム呼び出しによって宣言される指定したクラス内の <paramref name="fieldName" /> パラメーターのバイト単位のオフセット。</span><span class="sxs-lookup"><span data-stu-id="68c54-1168">The offset, in bytes, for the <paramref name="fieldName" /> parameter within the specified class that is declared by platform invoke.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1169"><xref:System.Runtime.InteropServices.Marshal.OffsetOf%60%601%28System.String%29> マネージ構造体レイアウトのオフセットに必ずしも対応しないアンマネージ構造体レイアウトの観点からのオフセットを提供します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1169"><xref:System.Runtime.InteropServices.Marshal.OffsetOf%60%601%28System.String%29> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout.</span></span> <span data-ttu-id="68c54-1170">構造体をマーシャ リング、レイアウトを変換し、オフセットを変更できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1170">Marshaling the structure can transform the layout and alter the offset.</span></span> <span data-ttu-id="68c54-1171">`T`ジェネリック型パラメーターは、値型または (いずれか、シーケンシャルまたは明示的なレイアウトで) 書式指定参照型を指定できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1171">The `T` generic type parameter can be a value type or a formatted reference type (with either a sequential or explicit layout).</span></span> <span data-ttu-id="68c54-1172">使用して全体のレイアウトのサイズを取得することができます、<xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1172">You can obtain the size of the entire layout by using the <xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29> method.</span></span> <span data-ttu-id="68c54-1173">詳細については、次を参照してください。[既定値の型のマーシャ リング](https://msdn.microsoft.com/library/4d9a876c-e05a-40ba-bd85-bd22877f984a)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1173">For additional information, see [Default Marshaling for Value Types](https://msdn.microsoft.com/library/4d9a876c-e05a-40ba-bd85-bd22877f984a).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="68c54-1174">.NET Framework version 2.0 以降<xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A>プライベート フィールドを公開することがあります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1174">Beginning with the .NET Framework version 2.0, <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> may expose private fields.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="Prelink">
      <MemberSignature Language="C#" Value="public static void Prelink (System.Reflection.MethodInfo m);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Prelink(class System.Reflection.MethodInfo m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Prelink (m As MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Prelink(System::Reflection::MethodInfo ^ m);" />
      <MemberSignature Language="F#" Value="static member Prelink : System.Reflection.MethodInfo -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.Prelink m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Reflection.MethodInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="68c54-1175">チェックするメソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1175">The method to be checked.</span></span></param>
        <summary><span data-ttu-id="68c54-1176">メソッドを呼び出さずに、一度だけ実行されるメソッド セットアップ タスクを実行します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1176">Executes one-time method setup tasks without calling the method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1177">セットアップ タスクは、初期化を行い、ターゲット メソッドが呼び出されたときに自動的に実行されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1177">Setup tasks provide early initialization and are performed automatically when the target method is invoked.</span></span> <span data-ttu-id="68c54-1178">最初の作業を以下に示します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1178">First-time tasks include the following:</span></span>  
  
-   <span data-ttu-id="68c54-1179">検証、プラットフォーム呼び出しのメタデータが正しく書式設定します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1179">Verifying that the platform invoke metadata is correctly formatted.</span></span>  
  
-   <span data-ttu-id="68c54-1180">関数を呼び出すすべてのマネージ型のプラットフォームの有効なパラメーターを確認します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1180">Verifying that all the managed types are valid parameters of platform invoke functions.</span></span>  
  
-   <span data-ttu-id="68c54-1181">検索して、プロセスへのアンマネージ DLL の読み込み。</span><span class="sxs-lookup"><span data-stu-id="68c54-1181">Locating and loading the unmanaged DLL into the process.</span></span>  
  
-   <span data-ttu-id="68c54-1182">プロセスのエントリ ポイントを検索します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1182">Locating the entry point in the process.</span></span>  
  
 <span data-ttu-id="68c54-1183">呼び出す<xref:System.Runtime.InteropServices.Marshal.Prelink%2A>プラットフォームの外部でのメソッドの呼び出しも何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1183">Calling <xref:System.Runtime.InteropServices.Marshal.Prelink%2A> on a method outside of platform invoke has no effect.</span></span> <span data-ttu-id="68c54-1184">すべてのプラットフォームでのタスクが使用して、型でメソッドを呼び出すセットアップを実行する<xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1184">To execute setup tasks on all platform invoke methods in a type, use <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1185"><paramref name="m" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1185">The <paramref name="m" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1186"><paramref name="m" /> パラメーターが <see cref="T:System.Reflection.MethodInfo" /> オブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1186">The <paramref name="m" /> parameter is not a <see cref="T:System.Reflection.MethodInfo" /> object.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1187">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1187">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1188">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1188">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="PrelinkAll">
      <MemberSignature Language="C#" Value="public static void PrelinkAll (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PrelinkAll(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PrelinkAll (c As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrelinkAll(Type ^ c);" />
      <MemberSignature Language="F#" Value="static member PrelinkAll : Type -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.PrelinkAll c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="68c54-1189">メソッドをチェックするクラス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1189">The class whose methods are to be checked.</span></span></param>
        <summary><span data-ttu-id="68c54-1190">クラスのすべてのメソッドに対してリンク前の確認を実行します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1190">Performs a pre-link check for all methods on a class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1191"><xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A>メソッドを呼び出す<xref:System.Runtime.InteropServices.Marshal.Prelink%2A?displayProperty=nameWithType>特定の型のすべてのメソッドにします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1191">The <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> method invokes <xref:System.Runtime.InteropServices.Marshal.Prelink%2A?displayProperty=nameWithType> on every method for a given type.</span></span> <span data-ttu-id="68c54-1192"><xref:System.Runtime.InteropServices.Marshal.Prelink%2A> 各メソッドを呼び出さずにメソッドを 1 回限りのセットアップ タスクを実行します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1192"><xref:System.Runtime.InteropServices.Marshal.Prelink%2A> executes one-time method setup tasks without calling each method.</span></span> <span data-ttu-id="68c54-1193">使用することができます<xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A>プラットフォームでのみ呼び出しを実行します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1193">You can use <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> only for platform invoke calls.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1194"><paramref name="c" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1194">The <paramref name="c" /> parameter is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1195">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1195">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1196">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1196">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PtrToStringAnsi">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1197">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド ANSI 文字列のすべてまたは一部をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1197">Allocates a managed <see cref="T:System.String" /> and copies all or part of an unmanaged ANSI string into it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PtrToStringAnsi">
      <MemberSignature Language="C#" Value="public static string PtrToStringAnsi (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringAnsi(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PtrToStringAnsi (ptr As IntPtr) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ PtrToStringAnsi(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member PtrToStringAnsi : nativeint -&gt; string" Usage="System.Runtime.InteropServices.Marshal.PtrToStringAnsi ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1198">アンマネージ文字列の最初の文字のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1198">The address of the first character of the unmanaged string.</span></span></param>
        <summary><span data-ttu-id="68c54-1199">アンマネージド ANSI 文字列から最初の null 文字に遭遇するまでのすべての文字をマネージド <see cref="T:System.String" /> にコピーし、各 ANSI 文字を Unicode に拡張します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1199">Copies all characters up to the first null character from an unmanaged ANSI string to a managed <see cref="T:System.String" />, and widens each ANSI character to Unicode.</span></span></summary>
        <returns><span data-ttu-id="68c54-1200">アンマネージド ANSI 文字列のコピーを保持するマネージド文字列。</span><span class="sxs-lookup"><span data-stu-id="68c54-1200">A managed string that holds a copy of the unmanaged ANSI string.</span></span> <span data-ttu-id="68c54-1201"><paramref name="ptr" /> が <see langword="null" /> の場合、このメソッドは null 文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1201">If <paramref name="ptr" /> is <see langword="null" />, the method returns a null string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1202"><xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> カスタム マーシャ リング用、またはマネージ コードとアンマネージ コードが混在する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1202"><xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1203">このメソッドは、アンマネージ文字列の内容のコピーを作成するため、必要に応じて、元の文字列を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1203">Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate.</span></span> <span data-ttu-id="68c54-1204">このメソッドは、反対側の機能を提供、<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=nameWithType>と<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1204">This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1205">次の例では、<xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>アンマネージからマネージ文字列を作成するメソッドを`char`配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-1205">The following example uses the <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> method to create a managed string from an unmanaged `char` array.</span></span>  
  
 [!code-cpp[Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1206">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1206">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1207">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1207">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStringAnsi">
      <MemberSignature Language="C#" Value="public static string PtrToStringAnsi (IntPtr ptr, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringAnsi(native int ptr, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PtrToStringAnsi (ptr As IntPtr, len As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ PtrToStringAnsi(IntPtr ptr, int len);" />
      <MemberSignature Language="F#" Value="static member PtrToStringAnsi : nativeint * int -&gt; string" Usage="System.Runtime.InteropServices.Marshal.PtrToStringAnsi (ptr, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1208">アンマネージ文字列の最初の文字のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1208">The address of the first character of the unmanaged string.</span></span></param>
        <param name="len"><span data-ttu-id="68c54-1209">コピーする入力文字列のバイト数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1209">The byte count of the input string to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-1210">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド ANSI 文字列から指定された数の文字をコピーし、各 ANSI 文字を Unicode に変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1210">Allocates a managed <see cref="T:System.String" />, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.</span></span></summary>
        <returns><span data-ttu-id="68c54-1211"><paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、ネイティブ ANSI 文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" />.を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1211">A managed string that holds a copy of the native ANSI string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1212"><xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> カスタム マーシャ リング用、またはマネージ コードとアンマネージ コードが混在する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1212"><xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1213">このメソッドは、アンマネージ文字列の内容のコピーを作成するため、必要に応じて、元の文字列を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1213">Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate.</span></span> <span data-ttu-id="68c54-1214">このメソッドは、反対側の機能を提供、<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=nameWithType>と<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1214">This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1215">次の例では、<xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>アンマネージからマネージ文字列を作成するメソッドを`char`配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-1215">The following example uses the <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> method to create a managed string from an unmanaged`char` array.</span></span>  
  
 [!code-cpp[Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr-int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr-int/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1216"><paramref name="len" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1216"><paramref name="len" /> is less than zero.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1217">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1217">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1218">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1218">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PtrToStringAuto">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1219">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド文字列のすべてまたは一部をそれにコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1219">Allocates a managed <see cref="T:System.String" /> and copies all or part of an unmanaged string into it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PtrToStringAuto">
      <MemberSignature Language="C#" Value="public static string PtrToStringAuto (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringAuto(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PtrToStringAuto (ptr As IntPtr) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ PtrToStringAuto(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member PtrToStringAuto : nativeint -&gt; string" Usage="System.Runtime.InteropServices.Marshal.PtrToStringAuto ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1220">Unicode プラットフォームの場合は、先頭の Unicode 文字のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1220">For Unicode platforms, the address of the first Unicode character.</span></span>  
  
<span data-ttu-id="68c54-1221">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1221">-or-</span></span> 
<span data-ttu-id="68c54-1222">ANSI プラットフォームの場合は、先頭の ANSI 文字のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1222">For ANSI platforms, the address of the first ANSI character.</span></span></param>
        <summary><span data-ttu-id="68c54-1223">マネージド <see cref="T:System.String" /> を割り当て、最初の null 文字に遭遇するまでの文字をアンマネージド メモリに格納されている文字列からすべてコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1223">Allocates a managed <see cref="T:System.String" /> and copies all characters up to the first null character from a string stored in unmanaged memory into it.</span></span></summary>
        <returns><span data-ttu-id="68c54-1224"><paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、アンマネージド文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1224">A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1225">現在のプラットフォームが Unicode と、各 ANSI 文字が Unicode 文字に上位変換およびこのメソッドを呼び出す<xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1225">If the current platform is Unicode, each ANSI character is widened to a Unicode character and this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>.</span></span> <span data-ttu-id="68c54-1226">それ以外の場合、このメソッドを呼び出す<xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1226">Otherwise, this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>.</span></span>  
  
 <span data-ttu-id="68c54-1227"><xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> カスタム マーシャ リング用、またはマネージ コードとアンマネージ コードが混在する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1227"><xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> is useful for custom marshaling or when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1228">このメソッドは、アンマネージ文字列の内容のコピーを作成するため、必要に応じて、元の文字列を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1228">Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate.</span></span> <span data-ttu-id="68c54-1229"><xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> 反対側の機能を提供、<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=nameWithType>と<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1229"><xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=nameWithType> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1230">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1230">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1231">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1231">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStringAuto">
      <MemberSignature Language="C#" Value="public static string PtrToStringAuto (IntPtr ptr, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringAuto(native int ptr, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PtrToStringAuto (ptr As IntPtr, len As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ PtrToStringAuto(IntPtr ptr, int len);" />
      <MemberSignature Language="F#" Value="static member PtrToStringAuto : nativeint * int -&gt; string" Usage="System.Runtime.InteropServices.Marshal.PtrToStringAuto (ptr, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="len" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1232">Unicode プラットフォームの場合は、先頭の Unicode 文字のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1232">For Unicode platforms, the address of the first Unicode character.</span></span>  
  
<span data-ttu-id="68c54-1233">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1233">-or-</span></span> 
<span data-ttu-id="68c54-1234">ANSI プラットフォームの場合は、先頭の ANSI 文字のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1234">For ANSI platforms, the address of the first ANSI character.</span></span></param>
        <param name="len"><span data-ttu-id="68c54-1235">コピーする文字数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1235">The number of characters to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-1236">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド メモリに格納されている文字列から指定された数の文字をそれにコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1236">Allocates a managed <see cref="T:System.String" /> and copies the specified number of characters from a string stored in unmanaged memory into it.</span></span></summary>
        <returns><span data-ttu-id="68c54-1237"><paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、ネイティブ文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1237">A managed string that holds a copy of the native string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1238">Unicode プラットフォームでは、このメソッドを呼び出す<xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>; ANSI のプラットフォームで呼び出して<xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1238">On Unicode platforms, this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>; on ANSI platforms, it calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>.</span></span> <span data-ttu-id="68c54-1239">これらのメソッドが呼び出される前に、変換は行われません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1239">No transformations are done before these methods are called.</span></span>  
  
 <span data-ttu-id="68c54-1240"><xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> カスタム マーシャ リング用、またはマネージ コードとアンマネージ コードが混在する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1240"><xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> is useful for custom marshaling or when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1241">このメソッドは、アンマネージ文字列の内容のコピーを作成するため、必要に応じて、元の文字列を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1241">Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate.</span></span> <span data-ttu-id="68c54-1242"><xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> 反対側の機能を提供<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=nameWithType>と<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1242"><xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1243"><paramref name="len" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1243"><paramref name="len" /> is less than zero.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1244">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1244">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1245">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1245">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStringBSTR">
      <MemberSignature Language="C#" Value="public static string PtrToStringBSTR (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringBSTR(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PtrToStringBSTR (ptr As IntPtr) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ PtrToStringBSTR(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member PtrToStringBSTR : nativeint -&gt; string" Usage="System.Runtime.InteropServices.Marshal.PtrToStringBSTR ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1246">アンマネージ文字列の最初の文字のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1246">The address of the first character of the unmanaged string.</span></span></param>
        <summary><span data-ttu-id="68c54-1247">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド メモリに格納されている[ バイナリ文字列 (BSTR) ](https://msdn.microsoft.com/library/ms221069\(v=vs.85\).aspx) をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1247">Allocates a managed <see cref="T:System.String" /> and copies a [binary string (BSTR)](https://msdn.microsoft.com/library/ms221069\(v=vs.85\).aspx) stored in unmanaged memory into it.</span></span></summary>
        <returns><span data-ttu-id="68c54-1248">アンマネージド文字列のコピーを保持するマネージド文字列。</span><span class="sxs-lookup"><span data-stu-id="68c54-1248">A managed string that holds a copy of the unmanaged string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1249">割り当てられた文字列でのみこのメソッドを呼び出すと、アンマネージ[SysAllocString](https://msdn.microsoft.com/library/ms221458\(v=vs.85\).aspx)と[SysAllocStringLen](https://msdn.microsoft.com/library/ms221639\(v=vs.85\).aspx)関数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1249">Call this method only on strings that were allocated with the unmanaged [SysAllocString](https://msdn.microsoft.com/library/ms221458\(v=vs.85\).aspx) and [SysAllocStringLen](https://msdn.microsoft.com/library/ms221639\(v=vs.85\).aspx) functions.</span></span>  
  
 <span data-ttu-id="68c54-1250"><xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A> カスタム マーシャ リング用、またはマネージ コードとアンマネージ コードが混在する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1250"><xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A> is useful for custom marshaling or when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1251">このメソッドは、アンマネージ文字列の内容のコピーを作成するため、必要に応じて、元の文字列を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1251">Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate.</span></span> <span data-ttu-id="68c54-1252">このメソッドは、反対側の機能を提供、<xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1252">This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1253"><paramref name="ptr" /> と <see cref="F:System.IntPtr.Zero" /> は等しい。</span><span class="sxs-lookup"><span data-stu-id="68c54-1253"><paramref name="ptr" /> equals <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1254">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1254">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1255">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1255">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PtrToStringUni">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1256">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド Unicode 文字列のすべてまたは一部をそれにコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1256">Allocates a managed <see cref="T:System.String" /> and copies all or part of an unmanaged Unicode string into it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PtrToStringUni">
      <MemberSignature Language="C#" Value="public static string PtrToStringUni (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringUni(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PtrToStringUni (ptr As IntPtr) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ PtrToStringUni(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member PtrToStringUni : nativeint -&gt; string" Usage="System.Runtime.InteropServices.Marshal.PtrToStringUni ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1257">アンマネージ文字列の最初の文字のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1257">The address of the first character of the unmanaged string.</span></span></param>
        <summary><span data-ttu-id="68c54-1258">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド Unicode 文字列から最初の null 文字に遭遇するまでの文字をすべてコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1258">Allocates a managed <see cref="T:System.String" /> and copies all characters up to the first null character from an unmanaged Unicode string into it.</span></span></summary>
        <returns><span data-ttu-id="68c54-1259"><paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、アンマネージド文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1259">A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1260"><xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> マネージ コードとアンマネージ コードを混在させる場合カスタム マーシャ リング用、または使用するために便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1260"><xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1261">このメソッドは、アンマネージ文字列の内容のコピーを作成するため、必要に応じて、元の文字列を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1261">Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate.</span></span> <span data-ttu-id="68c54-1262">このメソッドは、反対側の機能を提供、<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=nameWithType>と<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1262">This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1263">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1263">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1264">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1264">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStringUni">
      <MemberSignature Language="C#" Value="public static string PtrToStringUni (IntPtr ptr, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringUni(native int ptr, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PtrToStringUni (ptr As IntPtr, len As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ PtrToStringUni(IntPtr ptr, int len);" />
      <MemberSignature Language="F#" Value="static member PtrToStringUni : nativeint * int -&gt; string" Usage="System.Runtime.InteropServices.Marshal.PtrToStringUni (ptr, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1265">アンマネージ文字列の最初の文字のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1265">The address of the first character of the unmanaged string.</span></span></param>
        <param name="len"><span data-ttu-id="68c54-1266">コピーする Unicode 文字の数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1266">The number of Unicode characters to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-1267">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド Unicode 文字列から指定された数の文字をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1267">Allocates a managed <see cref="T:System.String" /> and copies a specified number of characters from an unmanaged Unicode string into it.</span></span></summary>
        <returns><span data-ttu-id="68c54-1268"><paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、アンマネージド文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1268">A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1269"><xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> カスタム マーシャ リング用、またはマネージ コードとアンマネージ コードが混在する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1269"><xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> is useful for custom marshaling or when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1270">このメソッドは、アンマネージ文字列の内容のコピーを作成するため、必要に応じて、元の文字列を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1270">Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate.</span></span> <span data-ttu-id="68c54-1271">このメソッドは、反対側の機能を提供、<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=nameWithType>と<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1271">This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1272">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1272">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1273">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1273">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStringUTF8">
      <MemberSignature Language="C#" Value="public static string PtrToStringUTF8 (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringUTF8(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PtrToStringUTF8 (ptr As IntPtr) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ PtrToStringUTF8(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member PtrToStringUTF8 : nativeint -&gt; string" Usage="System.Runtime.InteropServices.Marshal.PtrToStringUTF8 ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.1">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ptr">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PtrToStringUTF8">
      <MemberSignature Language="C#" Value="public static string PtrToStringUTF8 (IntPtr ptr, int byteLen);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringUTF8(native int ptr, int32 byteLen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PtrToStringUTF8 (ptr As IntPtr, byteLen As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ PtrToStringUTF8(IntPtr ptr, int byteLen);" />
      <MemberSignature Language="F#" Value="static member PtrToStringUTF8 : nativeint * int -&gt; string" Usage="System.Runtime.InteropServices.Marshal.PtrToStringUTF8 (ptr, byteLen)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.1">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="byteLen" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ptr">To be added.</param>
        <param name="byteLen">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PtrToStructure">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1274">アンマネージド メモリ ブロックからマネージド オブジェクトにデータをマーシャリングします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1274">Marshals data from an unmanaged block of memory to a managed object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PtrToStructure">
      <MemberSignature Language="C#" Value="public static void PtrToStructure (IntPtr ptr, object structure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PtrToStructure(native int ptr, object structure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PtrToStructure (ptr As IntPtr, structure As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PtrToStructure(IntPtr ptr, System::Object ^ structure);" />
      <MemberSignature Language="F#" Value="static member PtrToStructure : nativeint * obj -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.PtrToStructure (ptr, structure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("PtrToStructure(IntPtr, Object) may be unavailable in future releases. Instead, use PtrToStructure&lt;T&gt;(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296512")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="structure" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1275">アンマネージ メモリ ブロックへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1275">A pointer to an unmanaged block of memory.</span></span></param>
        <param name="structure"><span data-ttu-id="68c54-1276">データのコピー先のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1276">The object to which the data is to be copied.</span></span> <span data-ttu-id="68c54-1277">これは、書式指定クラスのインスタンスである必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1277">This must be an instance of a formatted class.</span></span></param>
        <summary><span data-ttu-id="68c54-1278">アンマネージド メモリ ブロックからマネージド オブジェクトにデータをマーシャリングします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1278">Marshals data from an unmanaged block of memory to a managed object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1279"><xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> COM に必要な多くの場合、相互運用機能とプラットフォーム呼び出しの構造体のパラメーターとして表されるときに、<xref:System.IntPtr?displayProperty=nameWithType>値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1279"><xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> is often necessary in COM interop and platform invoke when structure parameters are represented as an <xref:System.IntPtr?displayProperty=nameWithType> value.</span></span> <span data-ttu-id="68c54-1280">このオーバー ロード メソッドは、値の型を使用できません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1280">You cannot use this overload method with value types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1281">構造体のレイアウトがシーケンシャルまたは明示的ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1281">Structure layout is not sequential or explicit.</span></span>  
  
<span data-ttu-id="68c54-1282">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1282">-or-</span></span> 
<span data-ttu-id="68c54-1283">構造体は、ボックス化された値型です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1283">Structure is a boxed value type.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1284">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1284">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1285">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1285">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PtrToStructure">
      <MemberSignature Language="C#" Value="public static object PtrToStructure (IntPtr ptr, Type structureType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object PtrToStructure(native int ptr, class System.Type structureType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PtrToStructure (ptr As IntPtr, structureType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ PtrToStructure(IntPtr ptr, Type ^ structureType);" />
      <MemberSignature Language="F#" Value="static member PtrToStructure : nativeint * Type -&gt; obj" Usage="System.Runtime.InteropServices.Marshal.PtrToStructure (ptr, structureType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("PtrToStructure(IntPtr, Type) may be unavailable in future releases. Instead, use PtrToStructure&lt;T&gt;(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296513")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="structureType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1286">アンマネージ メモリ ブロックへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1286">A pointer to an unmanaged block of memory.</span></span></param>
        <param name="structureType"><span data-ttu-id="68c54-1287">作成するオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1287">The type of object to be created.</span></span> <span data-ttu-id="68c54-1288">このオブジェクトは、書式指定クラスまたは構造体を表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1288">This object must represent a formatted class or a structure.</span></span></param>
        <summary><span data-ttu-id="68c54-1289">アンマネージド メモリ ブロックから、指定した型の、新しく割り当てられたマネージド オブジェクトにデータをマーシャリングします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1289">Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</span></span></summary>
        <returns><span data-ttu-id="68c54-1290"><paramref name="ptr" /> パラメーターが指すデータを格納しているマネージド オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1290">A managed object containing the data pointed to by the <paramref name="ptr" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1291"><xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> COM に必要な多くの場合、相互運用機能とプラットフォーム呼び出しの構造体のパラメーターとして表されるときに、<xref:System.IntPtr?displayProperty=nameWithType>値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1291"><xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> is often necessary in COM interop and platform invoke when structure parameters are represented as an <xref:System.IntPtr?displayProperty=nameWithType> value.</span></span> <span data-ttu-id="68c54-1292">値の型は、このオーバー ロード メソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1292">You can pass a value type to this overload method.</span></span> <span data-ttu-id="68c54-1293">この場合、返されたオブジェクトは、ボックス化されたインスタンスです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1293">In this case, the returned object is a boxed instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1294">次の例は、マネージ構造体を作成、アンマネージ メモリに転送し、後、マネージ メモリを使用してバックアップに転送、<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1294">The following example creates a managed structure, transfers it to unmanaged memory, and then transfers it back to managed memory using the <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> method.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/vb/sample.vb#1)]  
  
 <span data-ttu-id="68c54-1295">次の例では、マネージ構造体を使用して、メモリのアンマネージ ブロックをマーシャ リングする方法、<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1295">The following example demonstrates how to marshal an unmanaged block of memory to a managed structure using the <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="68c54-1296">このコードは、32 ビットのコンパイルを想定しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1296">This code assumes 32-bit compilation.</span></span> <span data-ttu-id="68c54-1297">64 ビット コンパイラを使用する前に置き換える<xref:System.IntPtr.ToInt32%2A?displayProperty=nameWithType>で<xref:System.IntPtr.ToInt64%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1297">Before using a 64-bit compiler, replace <xref:System.IntPtr.ToInt32%2A?displayProperty=nameWithType> with <xref:System.IntPtr.ToInt64%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[PtrToStructure#1](~/samples/snippets/cpp/VS_Snippets_CLR/PtrToStructure/CPP/pts.cpp#1)]
 [!code-csharp[PtrToStructure#1](~/samples/snippets/csharp/VS_Snippets_CLR/PtrToStructure/CS/pts.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1298"><paramref name="structureType" /> パラメーターのレイアウトがシーケンシャルまたは明示的ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1298">The <paramref name="structureType" /> parameter layout is not sequential or explicit.</span></span>  
  
<span data-ttu-id="68c54-1299">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1299">-or-</span></span> 
<span data-ttu-id="68c54-1300"><paramref name="structureType" /> パラメーターがジェネリック型定義です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1300">The <paramref name="structureType" /> parameter is a generic type definition.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1301"><paramref name="structureType" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1301"><paramref name="structureType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="68c54-1302"><paramref name="structureType" /> で指定したクラスがアクセスできる既定のコンストラクターがありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1302">The class specified by <paramref name="structureType" /> does not have an accessible default constructor.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1303">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1303">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1304">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1304">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.UCOMITypeInfo.GetTypeAttr(System.IntPtr@)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStructure&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T PtrToStructure&lt;T&gt; (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T PtrToStructure&lt;T&gt;(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PtrToStructure(Of T) (ptr As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T PtrToStructure(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member PtrToStructure : nativeint -&gt; 'T" Usage="System.Runtime.InteropServices.Marshal.PtrToStructure ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="68c54-1305">データをコピーする先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1305">The type of the object to which the data is to be copied.</span></span> <span data-ttu-id="68c54-1306">これは、書式指定クラスまたは構造体である必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1306">This must be a formatted class or a structure.</span></span></typeparam>
        <param name="ptr"><span data-ttu-id="68c54-1307">アンマネージ メモリ ブロックへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1307">A pointer to an unmanaged block of memory.</span></span></param>
        <summary><span data-ttu-id="68c54-1308">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-1308">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-1309">アンマネージド メモリ ブロックから、ジェネリック型パラメーターによって指定された型の、新しく割り当てられたマネージド オブジェクトにデータをマーシャリングします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1309">Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="68c54-1310"><paramref name="ptr" /> パラメーターが指すデータを格納しているマネージド オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1310">A managed object that contains the data that the <paramref name="ptr" /> parameter points to.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1311"><xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%29> COM に必要な多くの場合、相互運用機能とプラットフォーム呼び出しの構造体のパラメーターとして表されるときに<xref:System.IntPtr?displayProperty=nameWithType>値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1311"><xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%29> is often necessary in COM interop and platform invoke when structure parameters are represented as <xref:System.IntPtr?displayProperty=nameWithType> values.</span></span> <span data-ttu-id="68c54-1312">値の型は、このメソッドのオーバー ロードに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1312">You can pass a value type to this method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1313"><typeparamref name="T" /> のレイアウトがシーケンシャルまたは明示的ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1313">The layout of <typeparamref name="T" /> is not sequential or explicit.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="68c54-1314"><typeparamref name="T" /> で指定したクラスがアクセスできる既定のコンストラクターがありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1314">The class specified by <typeparamref name="T" /> does not have an accessible default constructor.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1315">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1315">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1316">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1316">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PtrToStructure&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void PtrToStructure&lt;T&gt; (IntPtr ptr, T structure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PtrToStructure&lt;T&gt;(native int ptr, !!T structure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PtrToStructure(Of T) (ptr As IntPtr, structure As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void PtrToStructure(IntPtr ptr, T structure);" />
      <MemberSignature Language="F#" Value="static member PtrToStructure : nativeint * 'T -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.PtrToStructure (ptr, structure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="structure" Type="T" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="68c54-1317"><paramref name="structure" /> の型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1317">The type of <paramref name="structure" />.</span></span> <span data-ttu-id="68c54-1318">書式が設定されたクラスである必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1318">This must be a formatted class.</span></span></typeparam>
        <param name="ptr"><span data-ttu-id="68c54-1319">アンマネージ メモリ ブロックへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1319">A pointer to an unmanaged block of memory.</span></span></param>
        <param name="structure"><span data-ttu-id="68c54-1320">データのコピー先のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1320">The object to which the data is to be copied.</span></span></param>
        <summary><span data-ttu-id="68c54-1321">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-1321">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-1322">アンマネージド メモリ ブロックから、指定した型のマネージド オブジェクトにデータをマーシャリングします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1322">Marshals data from an unmanaged block of memory to a managed object of the specified type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1323"><xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%2C%60%600%29> COM に必要な多くの場合、相互運用機能とプラットフォーム呼び出しの構造体のパラメーターとして表されるときに<xref:System.IntPtr>値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1323"><xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%2C%60%600%29> is often necessary in COM interop and platform invoke when structure parameters are represented as <xref:System.IntPtr> values.</span></span> <span data-ttu-id="68c54-1324">このメソッドのオーバー ロードは、値の型を使用できません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1324">You cannot use this method overload with value types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1325">構造体のレイアウトがシーケンシャルまたは明示的ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1325">Structure layout is not sequential or explicit.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1326">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1326">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1327">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1327">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="QueryInterface">
      <MemberSignature Language="C#" Value="public static int QueryInterface (IntPtr pUnk, ref Guid iid, out IntPtr ppv);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 QueryInterface(native int pUnk, valuetype System.Guid&amp; iid, [out] native int&amp; ppv) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueryInterface (pUnk As IntPtr, ByRef iid As Guid, ByRef ppv As IntPtr) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QueryInterface(IntPtr pUnk, Guid % iid, [Runtime::InteropServices::Out] IntPtr % ppv);" />
      <MemberSignature Language="F#" Value="static member QueryInterface : nativeint *  *  -&gt; int" Usage="System.Runtime.InteropServices.Marshal.QueryInterface (pUnk, iid, ppv)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pUnk" Type="System.IntPtr" />
        <Parameter Name="iid" Type="System.Guid" RefType="ref" />
        <Parameter Name="ppv" Type="System.IntPtr" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pUnk"><span data-ttu-id="68c54-1328">照会するインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1328">The interface to be queried.</span></span></param>
        <param name="iid"><span data-ttu-id="68c54-1329">要求したインターフェイスのインターフェイス ID (IID: Interface Identifier)。</span><span class="sxs-lookup"><span data-stu-id="68c54-1329">The interface identifier (IID) of the requested interface.</span></span></param>
        <param name="ppv"><span data-ttu-id="68c54-1330">このメソッドが返されるときに、返されたインターフェイスへの参照を格納します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1330">When this method returns, contains a reference to the returned interface.</span></span></param>
        <summary><span data-ttu-id="68c54-1331">COM オブジェクトから指定したインターフェイスへのポインターを要求します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1331">Requests a pointer to a specified interface from a COM object.</span></span></summary>
        <returns><span data-ttu-id="68c54-1332">呼び出しの成功または失敗を示す HRESULT。</span><span class="sxs-lookup"><span data-stu-id="68c54-1332">An HRESULT that indicates the success or failure of the call.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1333"><xref:System.Runtime.InteropServices.Marshal.QueryInterface%2A>メソッドが公開、 [iunknown::queryinterface](https://go.microsoft.com/fwlink/?LinkID=144867) 、特定のインターフェイス ポインターを取得しようとしました。 COM オブジェクトのメソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1333">The <xref:System.Runtime.InteropServices.Marshal.QueryInterface%2A> method exposes the [IUnknown::QueryInterface](https://go.microsoft.com/fwlink/?LinkID=144867) method of a COM object, which attempts to obtain a specific interface pointer.</span></span> <span data-ttu-id="68c54-1334">使用して`QueryInterface`オブジェクトでは、com がマネージ コードでキャスト操作の実行と同じです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1334">Using `QueryInterface` on a COM object is the same as performing a cast operation in managed code.</span></span> <span data-ttu-id="68c54-1335">このメソッドを使用してオブジェクトを呼び出すと、ポインターが返される前に、インターフェイス ポインターをインクリメントする参照カウントが、します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1335">Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned.</span></span> <span data-ttu-id="68c54-1336">常に使用する<xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=nameWithType>ポインターが完了したら、参照カウントをデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1336">Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=nameWithType> to decrement the reference count once you have finished with the pointer.</span></span> <span data-ttu-id="68c54-1337">取得する、<xref:System.IntPtr>を表す値を[IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003)インターフェイス ポインターを呼び出すことができます<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=nameWithType>、 <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=nameWithType>、または<xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1337">To obtain an <xref:System.IntPtr> value that represents a [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) interface pointer, you can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=nameWithType>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=nameWithType>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1338">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1338">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1339">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1339">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadByte">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1340">アンマネージ メモリから 1 バイトを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1340">Reads a single byte from unmanaged memory.</span></span> <span data-ttu-id="68c54-1341">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1341">Reading from unaligned memory locations is supported.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public static byte ReadByte (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ReadByte(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadByte (ptr As IntPtr) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ReadByte(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member ReadByte : nativeint -&gt; byte" Usage="System.Runtime.InteropServices.Marshal.ReadByte ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1342">読み込み元となるアンマネージ メモリ内のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1342">The address in unmanaged memory from which to read.</span></span></param>
        <summary><span data-ttu-id="68c54-1343">アンマネージ メモリから 1 バイトを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1343">Reads a single byte from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1344">アンマネージ メモリから読み取られたバイト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1344">The byte read from unmanaged memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1345"><xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> 0 の暗黙のオフセットがあります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1345"><xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> has an implied offset of 0.</span></span> <span data-ttu-id="68c54-1346">このメソッドのアンマネージ配列全体のコピーのコストが削減、アンマネージ C スタイルのバイト配列との直接操作できます (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1346">This method enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1347">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1347">Reading from unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1348">次の例は、アンマネージ メモリ ブロックを作成、アンマネージ メモリにバイトを書き込みます化し、アンマネージ メモリからのバイトを読み取りますをアンマネージ メモリを破棄します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1348">The following example creates a block of unmanaged memory, writes a byte to the unmanaged memory, reads the byte back from unmanaged memory, and then disposes the unmanaged memory.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.ReadByte - WriteByte#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.ReadByte - WriteByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/vb/example.vb#1)]  
  
 <span data-ttu-id="68c54-1349">次の例では、使用する方法、<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A>非管理対象の文字の値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1349">The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> method to read the value of an unmanaged character.</span></span>  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadByte#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1350"><paramref name="ptr" /> が認識された形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1350"><paramref name="ptr" /> is not a recognized format.</span></span>  
  
<span data-ttu-id="68c54-1351">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1351">-or-</span></span> 
 <span data-ttu-id="68c54-1352"><paramref name="ptr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1352"><paramref name="ptr" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-1353">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1353">-or-</span></span> 
 <span data-ttu-id="68c54-1354"><paramref name="ptr" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1354"><paramref name="ptr" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1355">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1355">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1356">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1356">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public static byte ReadByte (IntPtr ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ReadByte(native int ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadByte (ptr As IntPtr, ofs As Integer) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ReadByte(IntPtr ptr, int ofs);" />
      <MemberSignature Language="F#" Value="static member ReadByte : nativeint * int -&gt; byte" Usage="System.Runtime.InteropServices.Marshal.ReadByte (ptr, ofs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1357">読み込み元となるアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1357">The base address in unmanaged memory from which to read.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-1358">追加される、追加のバイト オフセット、<paramref name="ptr" />読み取る前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1358">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</span></span></param>
        <summary><span data-ttu-id="68c54-1359">アンマネージ メモリから、指定したオフセット (またはインデックス) の 1 バイトを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1359">Reads a single byte at a given offset (or index) from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1360">アンマネージ メモリの指定されたオフセットから読み取られたバイト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1360">The byte read from unmanaged memory at the given offset.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1361"><xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> により直接アンマネージ配列全体のコピーのコストが削減、アンマネージ C スタイルのバイト配列との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1361"><xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1362">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1362">Reading from unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1363">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteByte%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1363">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#3)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#3)]  
  
 <span data-ttu-id="68c54-1364">次の例では、使用する方法、<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A>非管理対象の文字の値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1364">The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> method to read the value of an unmanaged character.</span></span>  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadByte-IntPtr-int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte-IntPtr-int/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1365">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1365">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1366">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1366">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1367">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1367">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public static byte ReadByte (object ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ReadByte([in]object ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadByte (ptr As Object, ofs As Integer) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ReadByte(System::Object ^ ptr, int ofs);" />
      <MemberSignature Language="F#" Value="static member ReadByte : obj * int -&gt; byte" Usage="System.Runtime.InteropServices.Marshal.ReadByte (ptr, ofs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("ReadByte(Object, Int32) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1368">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1368">The base address in unmanaged memory of the source object.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-1369">追加される、追加のバイト オフセット、<paramref name="ptr" />読み取る前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1369">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</span></span></param>
        <summary><span data-ttu-id="68c54-1370">アンマネージ メモリから、指定したオフセット (またはインデックス) の 1 バイトを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1370">Reads a single byte at a given offset (or index) from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1371">アンマネージ メモリの指定されたオフセットから読み取られたバイト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1371">The byte read from unmanaged memory at the given offset.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1372"><xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> により直接アンマネージ配列全体のコピーのコストが削減、アンマネージ C スタイルのバイト配列との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1372"><xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1373">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1373">Reading from unaligned memory locations is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1374">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1374">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1375"><paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1375"><paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object.</span></span> <span data-ttu-id="68c54-1376">このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1376">This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1377">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1377">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1378">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1378">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadInt16">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1379">アンマネージ メモリから 16 ビット符号付き整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1379">Reads a 16-bit signed integer from unmanaged memory.</span></span> <span data-ttu-id="68c54-1380">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1380">Reading from unaligned memory locations is supported.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadInt16">
      <MemberSignature Language="C#" Value="public static short ReadInt16 (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ReadInt16(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt16 (ptr As IntPtr) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ReadInt16(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member ReadInt16 : nativeint -&gt; int16" Usage="System.Runtime.InteropServices.Marshal.ReadInt16 ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1381">読み込み元となるアンマネージ メモリ内のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1381">The address in unmanaged memory from which to read.</span></span></param>
        <summary><span data-ttu-id="68c54-1382">アンマネージ メモリから 16 ビット符号付き整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1382">Reads a 16-bit signed integer from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1383">アンマネージ メモリから読み取られた 16 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1383">The 16-bit signed integer read from unmanaged memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1384"><xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> 0 の暗黙のオフセットがあります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1384"><xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> has an implied offset of 0.</span></span> <span data-ttu-id="68c54-1385">このメソッドにより、非管理対象の C スタイルとは直接やり取り`Int16`アンマネージ配列全体のコピーのコストが削減配列 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>)、要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1385">This method enables direct interaction with an unmanaged C-style `Int16` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1386">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1386">Reading from unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1387">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1387">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  
  
 <span data-ttu-id="68c54-1388">次の例では、使用する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A>メソッドを非管理対象の値を読み取る`short`変数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1388">The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> method to read the value of an unmanaged `short` variable.</span></span>  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadInt16#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt16/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1389"><paramref name="ptr" /> が認識された形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1389"><paramref name="ptr" /> is not a recognized format.</span></span>  
  
<span data-ttu-id="68c54-1390">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1390">-or-</span></span> 
 <span data-ttu-id="68c54-1391"><paramref name="ptr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1391"><paramref name="ptr" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-1392">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1392">-or-</span></span> 
 <span data-ttu-id="68c54-1393"><paramref name="ptr" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1393"><paramref name="ptr" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1394">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1394">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1395">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1395">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt16">
      <MemberSignature Language="C#" Value="public static short ReadInt16 (IntPtr ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ReadInt16(native int ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt16 (ptr As IntPtr, ofs As Integer) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ReadInt16(IntPtr ptr, int ofs);" />
      <MemberSignature Language="F#" Value="static member ReadInt16 : nativeint * int -&gt; int16" Usage="System.Runtime.InteropServices.Marshal.ReadInt16 (ptr, ofs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1396">読み込み元となるアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1396">The base address in unmanaged memory from which to read.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-1397">追加される、追加のバイト オフセット、<paramref name="ptr" />読み取る前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1397">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</span></span></param>
        <summary><span data-ttu-id="68c54-1398">アンマネージ メモリの指定されたオフセットから 16 ビット符号付き整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1398">Reads a 16-bit signed integer at a given offset from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1399">アンマネージ メモリの指定されたオフセットから読み取られた 16 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1399">The 16-bit signed integer read from unmanaged memory at the given offset.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1400"><xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> 有効とは直接やり取りアンマネージ 16 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1400"><xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1401">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1401">Reading from unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1402">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1402">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  
  
 <span data-ttu-id="68c54-1403">次の例では、使用する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A>メソッドを非管理対象の値を読み取る`short`変数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1403">The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> method to read the value of an unmanaged `short` variable.</span></span>  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadInt16-IntPtr-Int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt16-IntPtr-Int/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1404">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1404">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1405">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1405">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1406">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1406">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt16">
      <MemberSignature Language="C#" Value="public static short ReadInt16 (object ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ReadInt16([in]object ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt16 (ptr As Object, ofs As Integer) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ReadInt16(System::Object ^ ptr, int ofs);" />
      <MemberSignature Language="F#" Value="static member ReadInt16 : obj * int -&gt; int16" Usage="System.Runtime.InteropServices.Marshal.ReadInt16 (ptr, ofs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("ReadInt16(Object, Int32) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1407">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1407">The base address in unmanaged memory of the source object.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-1408">追加される、追加のバイト オフセット、<paramref name="ptr" />読み取る前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1408">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</span></span></param>
        <summary><span data-ttu-id="68c54-1409">アンマネージ メモリの指定されたオフセットから 16 ビット符号付き整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1409">Reads a 16-bit signed integer at a given offset from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1410">アンマネージ メモリの指定されたオフセットから読み取られた 16 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1410">The 16-bit signed integer read from unmanaged memory at the given offset.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1411"><xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> 有効とは直接やり取りアンマネージ 16 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1411"><xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1412">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1412">Reading from unaligned memory locations is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1413">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1413">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1414"><paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1414"><paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object.</span></span> <span data-ttu-id="68c54-1415">このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1415">This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1416">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1416">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1417">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1417">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadInt32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1418">アンマネージ メモリから 32 ビット符号付き整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1418">Reads a 32-bit signed integer from unmanaged memory.</span></span> <span data-ttu-id="68c54-1419">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1419">Reading from unaligned memory locations is supported.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadInt32">
      <MemberSignature Language="C#" Value="public static int ReadInt32 (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReadInt32(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt32 (ptr As IntPtr) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ReadInt32(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member ReadInt32 : nativeint -&gt; int" Usage="System.Runtime.InteropServices.Marshal.ReadInt32 ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1420">読み込み元となるアンマネージ メモリ内のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1420">The address in unmanaged memory from which to read.</span></span></param>
        <summary><span data-ttu-id="68c54-1421">アンマネージ メモリから 32 ビット符号付き整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1421">Reads a 32-bit signed integer from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1422">アンマネージ メモリから読み取られた 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1422">The 32-bit signed integer read from unmanaged memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1423"><xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> 0 の暗黙のオフセットがあります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1423"><xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> has an implied offset of 0.</span></span> <span data-ttu-id="68c54-1424">このメソッドにより、非管理対象の C スタイルとは直接やり取り`Int32`アンマネージ配列全体のコピーのコストが削減配列 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>)、要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1424">This method enables direct interaction with an unmanaged C-style `Int32` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1425">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1425">Reading from unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1426">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1426">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]  
  
 <span data-ttu-id="68c54-1427">次の例では、使用する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A>メソッドを非管理対象の値を読み取る`int`変数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1427">The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> method to read the value of an unmanaged `int` variable.</span></span>  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadInt32#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt32/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1428"><paramref name="ptr" /> が認識された形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1428"><paramref name="ptr" /> is not a recognized format.</span></span>  
  
<span data-ttu-id="68c54-1429">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1429">-or-</span></span> 
 <span data-ttu-id="68c54-1430"><paramref name="ptr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1430"><paramref name="ptr" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-1431">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1431">-or-</span></span> 
 <span data-ttu-id="68c54-1432"><paramref name="ptr" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1432"><paramref name="ptr" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1433">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1433">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1434">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1434">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt32">
      <MemberSignature Language="C#" Value="public static int ReadInt32 (IntPtr ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReadInt32(native int ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt32 (ptr As IntPtr, ofs As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ReadInt32(IntPtr ptr, int ofs);" />
      <MemberSignature Language="F#" Value="static member ReadInt32 : nativeint * int -&gt; int" Usage="System.Runtime.InteropServices.Marshal.ReadInt32 (ptr, ofs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1435">読み込み元となるアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1435">The base address in unmanaged memory from which to read.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-1436">追加される、追加のバイト オフセット、<paramref name="ptr" />読み取る前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1436">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</span></span></param>
        <summary><span data-ttu-id="68c54-1437">アンマネージ メモリの指定されたオフセットから 32 ビット符号付き整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1437">Reads a 32-bit signed integer at a given offset from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1438">アンマネージ メモリから読み取られた 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1438">The 32-bit signed integer read from unmanaged memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1439"><xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> により直接管理されていない 32 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1439"><xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1440">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1440">Reading from unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1441">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1441">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]  
  
 <span data-ttu-id="68c54-1442">次の例では、使用する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A>メソッドを非管理対象の値を読み取る`int`変数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1442">The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> method to read the value of an unmanaged `int` variable.</span></span>  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadInt32-IntPtr-Int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt32-IntPtr-Int/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1443">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1443">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1444">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1444">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1445">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1445">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt32">
      <MemberSignature Language="C#" Value="public static int ReadInt32 (object ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReadInt32([in]object ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt32 (ptr As Object, ofs As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ReadInt32(System::Object ^ ptr, int ofs);" />
      <MemberSignature Language="F#" Value="static member ReadInt32 : obj * int -&gt; int" Usage="System.Runtime.InteropServices.Marshal.ReadInt32 (ptr, ofs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("ReadInt32(Object, Int32) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1446">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1446">The base address in unmanaged memory of the source object.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-1447">追加される、追加のバイト オフセット、<paramref name="ptr" />読み取る前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1447">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</span></span></param>
        <summary><span data-ttu-id="68c54-1448">アンマネージ メモリの指定されたオフセットから 32 ビット符号付き整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1448">Reads a 32-bit signed integer at a given offset from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1449">アンマネージ メモリの指定されたオフセットから読み取られた 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1449">The 32-bit signed integer read from unmanaged memory at the given offset.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1450"><xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> により直接管理されていない 32 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1450"><xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1451">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1451">Reading from unaligned memory locations is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1452">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1452">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1453"><paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1453"><paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object.</span></span> <span data-ttu-id="68c54-1454">このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1454">This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1455">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1455">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1456">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1456">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadInt64">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1457">アンマネージ メモリから 64 ビット符号付き整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1457">Reads a 64-bit signed integer from unmanaged memory.</span></span> <span data-ttu-id="68c54-1458">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1458">Reading from unaligned memory locations is supported.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadInt64">
      <MemberSignature Language="C#" Value="public static long ReadInt64 (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ReadInt64(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt64 (ptr As IntPtr) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ReadInt64(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member ReadInt64 : nativeint -&gt; int64" Usage="System.Runtime.InteropServices.Marshal.ReadInt64 ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1459">読み込み元となるアンマネージ メモリ内のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1459">The address in unmanaged memory from which to read.</span></span></param>
        <summary><span data-ttu-id="68c54-1460">アンマネージ メモリから 64 ビット符号付き整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1460">Reads a 64-bit signed integer from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1461">アンマネージ メモリから読み取られた 64 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1461">The 64-bit signed integer read from unmanaged memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1462"><xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> 0 の暗黙のオフセットがあります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1462"><xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> has an implied offset of 0.</span></span> <span data-ttu-id="68c54-1463">このメソッドにより、非管理対象の C スタイルとは直接やり取り`Int64`アンマネージ配列全体のコピーのコストが削減配列 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>)、要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1463">This method enables direct interaction with an unmanaged C-style `Int64` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1464">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1464">Reading from unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1465">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1465">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]  
  
 <span data-ttu-id="68c54-1466">次の例では、使用する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A>メソッドを非管理対象の値を読み取る`__int64`変数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1466">The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> method to read the value of an unmanaged `__int64` variable.</span></span>  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadInt64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt64/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1467"><paramref name="ptr" /> が認識された形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1467"><paramref name="ptr" /> is not a recognized format.</span></span>  
  
<span data-ttu-id="68c54-1468">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1468">-or-</span></span> 
 <span data-ttu-id="68c54-1469"><paramref name="ptr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1469"><paramref name="ptr" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-1470">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1470">-or-</span></span> 
 <span data-ttu-id="68c54-1471"><paramref name="ptr" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1471"><paramref name="ptr" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1472">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1472">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1473">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1473">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt64">
      <MemberSignature Language="C#" Value="public static long ReadInt64 (IntPtr ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ReadInt64(native int ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt64 (ptr As IntPtr, ofs As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ReadInt64(IntPtr ptr, int ofs);" />
      <MemberSignature Language="F#" Value="static member ReadInt64 : nativeint * int -&gt; int64" Usage="System.Runtime.InteropServices.Marshal.ReadInt64 (ptr, ofs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1474">読み込み元となるアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1474">The base address in unmanaged memory from which to read.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-1475">追加される、追加のバイト オフセット、<paramref name="ptr" />読み取る前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1475">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</span></span></param>
        <summary><span data-ttu-id="68c54-1476">アンマネージ メモリの指定されたオフセットから 64 ビット符号付き整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1476">Reads a 64-bit signed integer at a given offset from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1477">アンマネージ メモリの指定されたオフセットから読み取られた 64 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1477">The 64-bit signed integer read from unmanaged memory at the given offset.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1478"><xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> により直接管理されていない 64 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1478"><xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1479">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1479">Reading from unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1480">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1480">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]  
  
 <span data-ttu-id="68c54-1481">次の例では、使用する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A>メソッドを非管理対象の値を読み取る`__int64`変数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1481">The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> method to read the value of an unmanaged `__int64` variable.</span></span>  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadInt64-IntPtr-Int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt64-IntPtr-Int/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1482">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1482">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1483">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1483">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1484">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1484">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt64">
      <MemberSignature Language="C#" Value="public static long ReadInt64 (object ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ReadInt64([in]object ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInt64 (ptr As Object, ofs As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ReadInt64(System::Object ^ ptr, int ofs);" />
      <MemberSignature Language="F#" Value="static member ReadInt64 : obj * int -&gt; int64" Usage="System.Runtime.InteropServices.Marshal.ReadInt64 (ptr, ofs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("ReadInt64(Object, Int32) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1485">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1485">The base address in unmanaged memory of the source object.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-1486">追加される、追加のバイト オフセット、<paramref name="ptr" />読み取る前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1486">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</span></span></param>
        <summary><span data-ttu-id="68c54-1487">アンマネージ メモリの指定されたオフセットから 64 ビット符号付き整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1487">Reads a 64-bit signed integer at a given offset from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1488">アンマネージ メモリの指定されたオフセットから読み取られた 64 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1488">The 64-bit signed integer read from unmanaged memory at the given offset.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1489"><xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> により直接管理されていない 64 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1489"><xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1490">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1490">Reading from unaligned memory locations is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1491">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1491">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1492"><paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1492"><paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object.</span></span> <span data-ttu-id="68c54-1493">このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1493">This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1494">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1494">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1495">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1495">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadIntPtr">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1496">アンマネージ メモリからプロセッサ ネイティブ サイズの整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1496">Reads a processor native sized integer from unmanaged memory.</span></span> <span data-ttu-id="68c54-1497">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1497">Reading from unaligned memory locations is supported.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadIntPtr">
      <MemberSignature Language="C#" Value="public static IntPtr ReadIntPtr (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ReadIntPtr(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadIntPtr (ptr As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr ReadIntPtr(IntPtr ptr);" />
      <MemberSignature Language="F#" Value="static member ReadIntPtr : nativeint -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.ReadIntPtr ptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1498">読み込み元となるアンマネージ メモリ内のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1498">The address in unmanaged memory from which to read.</span></span></param>
        <summary><span data-ttu-id="68c54-1499">アンマネージ メモリからプロセッサ ネイティブ サイズの整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1499">Reads a processor native-sized integer from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1500">アンマネージ メモリから読み取られた整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1500">The integer read from unmanaged memory.</span></span> <span data-ttu-id="68c54-1501">32 ビット コンピューター上では 32 ビット整数が返され、64 ビット コンピューター上では 64 ビット整数が返されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1501">A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1502"><xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> 0 の暗黙のオフセットがあります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1502"><xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> has an implied offset of 0.</span></span> <span data-ttu-id="68c54-1503">このメソッドにより、非管理対象の C スタイルとは直接やり取り`IntPtr`アンマネージ配列全体のコピーのコストが削減配列 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>)、要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1503">This method enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1504">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1504">Reading from unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1505">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1505">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1506"><paramref name="ptr" /> が認識された形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1506"><paramref name="ptr" /> is not a recognized format.</span></span>  
  
<span data-ttu-id="68c54-1507">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1507">-or-</span></span> 
 <span data-ttu-id="68c54-1508"><paramref name="ptr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1508"><paramref name="ptr" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-1509">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1509">-or-</span></span> 
 <span data-ttu-id="68c54-1510"><paramref name="ptr" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1510"><paramref name="ptr" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1511">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1511">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1512">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1512">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadIntPtr">
      <MemberSignature Language="C#" Value="public static IntPtr ReadIntPtr (IntPtr ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ReadIntPtr(native int ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadIntPtr (ptr As IntPtr, ofs As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr ReadIntPtr(IntPtr ptr, int ofs);" />
      <MemberSignature Language="F#" Value="static member ReadIntPtr : nativeint * int -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.ReadIntPtr (ptr, ofs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1513">読み込み元となるアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1513">The base address in unmanaged memory from which to read.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-1514">追加される、追加のバイト オフセット、<paramref name="ptr" />読み取る前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1514">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</span></span></param>
        <summary><span data-ttu-id="68c54-1515">アンマネージ メモリの指定されたオフセットからプロセッサ ネイティブ サイズの整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1515">Reads a processor native sized integer at a given offset from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1516">アンマネージ メモリの指定されたオフセットから読み取られた整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1516">The integer read from unmanaged memory at the given offset.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1517"><xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> 有効とは直接やり取りアンマネージ C スタイル`IntPtr`アンマネージ配列全体のコピーのコストが削減配列 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>)、要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1517"><xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1518">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1518">Reading from unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1519">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1519">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1520">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1520">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1521">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1521">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1522">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1522">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadIntPtr">
      <MemberSignature Language="C#" Value="public static IntPtr ReadIntPtr (object ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ReadIntPtr([in]object ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadIntPtr (ptr As Object, ofs As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr ReadIntPtr(System::Object ^ ptr, int ofs);" />
      <MemberSignature Language="F#" Value="static member ReadIntPtr : obj * int -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.ReadIntPtr (ptr, ofs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("ReadIntPtr(Object, Int32) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1523">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1523">The base address in unmanaged memory of the source object.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-1524">追加される、追加のバイト オフセット、<paramref name="ptr" />読み取る前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1524">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</span></span></param>
        <summary><span data-ttu-id="68c54-1525">アンマネージ メモリからプロセッサ ネイティブ サイズの整数を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1525">Reads a processor native sized integer from unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1526">アンマネージ メモリの指定されたオフセットから読み取られた整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1526">The integer read from unmanaged memory at the given offset.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1527"><xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> 有効とは直接やり取りアンマネージ C スタイル`IntPtr`アンマネージ配列全体のコピーのコストが削減配列 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>)、要素の値を読み取る前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1527"><xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before reading its element values.</span></span>  
  
 <span data-ttu-id="68c54-1528">アライメントされていないメモリ位置からの読み取りはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1528">Reading from unaligned memory locations is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1529">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1529">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1530"><paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1530"><paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object.</span></span> <span data-ttu-id="68c54-1531">このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1531">This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1532">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1532">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1533">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1533">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReAllocCoTaskMem">
      <MemberSignature Language="C#" Value="public static IntPtr ReAllocCoTaskMem (IntPtr pv, int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ReAllocCoTaskMem(native int pv, int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReAllocCoTaskMem (pv As IntPtr, cb As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr ReAllocCoTaskMem(IntPtr pv, int cb);" />
      <MemberSignature Language="F#" Value="static member ReAllocCoTaskMem : nativeint * int -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem (pv, cb)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pv" Type="System.IntPtr" />
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pv"><span data-ttu-id="68c54-1534"><see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> を使用して割り当てられたメモリへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1534">A pointer to memory allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</span></span></param>
        <param name="cb"><span data-ttu-id="68c54-1535">割り当てられたブロックの新しいサイズ。</span><span class="sxs-lookup"><span data-stu-id="68c54-1535">The new size of the allocated block.</span></span></param>
        <summary><span data-ttu-id="68c54-1536">以前に <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> を使用して割り当てられたメモリ ブロックのサイズを変更します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1536">Resizes a block of memory previously allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</span></span></summary>
        <returns><span data-ttu-id="68c54-1537">再割り当てされたメモリ ブロックのアドレスを表す整数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1537">An integer representing the address of the reallocated block of memory.</span></span> <span data-ttu-id="68c54-1538">このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> を使用して解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1538">This memory must be released with <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1539"><xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A> 2 つのメモリ割り当ての変更方法の 1 つ、<xref:System.Runtime.InteropServices.Marshal>クラス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1539"><xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A> is one of two memory reallocation methods in the <xref:System.Runtime.InteropServices.Marshal> class.</span></span> <span data-ttu-id="68c54-1540">(<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A>は、その他)。再割り当てされたメモリのコンテンツの先頭は、元のコンテンツと同じです。ただし、全体のメモリ ブロックは、別の場所にできます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1540">(<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> is the other.) The beginning of the reallocated memory content is the same as the original content; however, the entire memory block can be in a different location.</span></span> <span data-ttu-id="68c54-1541">このメソッドは、COM を公開する[CoTaskMemRealloc](https://go.microsoft.com/fwlink/?LinkId=148778) COM タスク メモリ アロケーターと呼ばれる関数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1541">This method exposes the COM [CoTaskMemRealloc](https://go.microsoft.com/fwlink/?LinkId=148778) function, which is referred to as the COM task memory allocator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-1542">メモリが不足しているため要求を満たせません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1542">There is insufficient memory to satisfy the request.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1543">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1543">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1544">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1544">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="ReAllocHGlobal">
      <MemberSignature Language="C#" Value="public static IntPtr ReAllocHGlobal (IntPtr pv, IntPtr cb);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ReAllocHGlobal(native int pv, native int cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReAllocHGlobal (pv As IntPtr, cb As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr ReAllocHGlobal(IntPtr pv, IntPtr cb);" />
      <MemberSignature Language="F#" Value="static member ReAllocHGlobal : nativeint * nativeint -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.ReAllocHGlobal (pv, cb)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pv" Type="System.IntPtr" />
        <Parameter Name="cb" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pv"><span data-ttu-id="68c54-1545"><see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> を使用して割り当てられたメモリへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1545">A pointer to memory allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</span></span></param>
        <param name="cb"><span data-ttu-id="68c54-1546">割り当てられたブロックの新しいサイズ。</span><span class="sxs-lookup"><span data-stu-id="68c54-1546">The new size of the allocated block.</span></span> <span data-ttu-id="68c54-1547">これはポインターではありません。<see cref="T:System.IntPtr" /> 型にキャストされた、要求しているバイト数です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1547">This is not a pointer; it is the byte count you are requesting, cast to type <see cref="T:System.IntPtr" />.</span></span> <span data-ttu-id="68c54-1548">ポインターを渡すと、サイズとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1548">If you pass a pointer, it is treated as a size.</span></span></param>
        <summary><span data-ttu-id="68c54-1549">以前に <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> を使用して割り当てられたメモリ ブロックのサイズを変更します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1549">Resizes a block of memory previously allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</span></span></summary>
        <returns><span data-ttu-id="68c54-1550">再割り当てされたメモリへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1550">A pointer to the reallocated memory.</span></span> <span data-ttu-id="68c54-1551">このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> を使用して解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1551">This memory must be released using <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1552"><xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> 2 つのメモリ割り当ての変更の 1 つの API メソッド、<xref:System.Runtime.InteropServices.Marshal>クラス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1552"><xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> is one of two memory reallocation API methods in the <xref:System.Runtime.InteropServices.Marshal> class.</span></span> <span data-ttu-id="68c54-1553">(<xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A?displayProperty=nameWithType>は、その他)。</span><span class="sxs-lookup"><span data-stu-id="68c54-1553">(<xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A?displayProperty=nameWithType> is the other.)</span></span>  
  
 <span data-ttu-id="68c54-1554">このメソッドは公開 Win32 [GlobalReAlloc](https://go.microsoft.com/fwlink/?LinkId=148780)関数を Kernel32.dll から。</span><span class="sxs-lookup"><span data-stu-id="68c54-1554">This method exposes the Win32 [GlobalReAlloc](https://go.microsoft.com/fwlink/?LinkId=148780) function from Kernel32.dll.</span></span> <span data-ttu-id="68c54-1555">返されるポインターは、元の異なることができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1555">The returned pointer can differ from the original.</span></span> <span data-ttu-id="68c54-1556">異なる場合は、元のメモリ ブロックの内容は、新しいブロックにコピーされているし、元のメモリ ブロックが解放されました。</span><span class="sxs-lookup"><span data-stu-id="68c54-1556">If it is different, the contents of the original memory block have been copied to the new block, and the original memory block has been freed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-1557">メモリが不足しているため要求を満たせません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1557">There is insufficient memory to satisfy the request.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1558">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1558">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1559">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1559">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=148781"><span data-ttu-id="68c54-1560">GlobalAlloc 関数</span><span class="sxs-lookup"><span data-stu-id="68c54-1560">GlobalAlloc Function</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public static int Release (IntPtr pUnk);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Release(native int pUnk) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Release (pUnk As IntPtr) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Release(IntPtr pUnk);" />
      <MemberSignature Language="F#" Value="static member Release : nativeint -&gt; int" Usage="System.Runtime.InteropServices.Marshal.Release pUnk" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pUnk" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pUnk"><span data-ttu-id="68c54-1561">解放するインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1561">The interface to release.</span></span></param>
        <summary><span data-ttu-id="68c54-1562">指定したインターフェイスの参照カウントをデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1562">Decrements the reference count on the specified interface.</span></span></summary>
        <returns><span data-ttu-id="68c54-1563"><paramref name="pUnk" /> パラメーターで指定したインターフェイスの参照カウントの新しい値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1563">The new value of the reference count on the interface specified by the <paramref name="pUnk" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1564">共通言語ランタイムは、このメソッドを直接使用する必要がないようにする COM オブジェクトの参照カウントを管理します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1564">The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly.</span></span> <span data-ttu-id="68c54-1565">テスト目的でのみ、この値を使用します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1565">Use this value only for testing purposes.</span></span> <span data-ttu-id="68c54-1566">カスタム マーシャラーでは、テストなどのまれなケースでした方オブジェクトの有効期間を手動で操作するために必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1566">In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object's lifetime manually.</span></span> <span data-ttu-id="68c54-1567">その呼び出しをプログラムのみ<xref:System.Runtime.InteropServices.Marshal.AddRef%2A?displayProperty=nameWithType>呼び出す必要があります<xref:System.Runtime.InteropServices.Marshal.Release%2A>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1567">Only programs that call <xref:System.Runtime.InteropServices.Marshal.AddRef%2A?displayProperty=nameWithType> should call <xref:System.Runtime.InteropServices.Marshal.Release%2A>.</span></span> <span data-ttu-id="68c54-1568">呼び出す<xref:System.Runtime.InteropServices.Marshal.Release%2A>参照カウントに達した後に 0、未定義の動作。</span><span class="sxs-lookup"><span data-stu-id="68c54-1568">Calling <xref:System.Runtime.InteropServices.Marshal.Release%2A> after the reference count has reached zero causes undefined behavior.</span></span>  
  
 <span data-ttu-id="68c54-1569">呼び出すことができます<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=nameWithType>、 <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=nameWithType>、または<xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=nameWithType>を取得する、<xref:System.IntPtr>を表す値を[IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003)リリースへのインターフェイス ポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1569">You can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=nameWithType>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=nameWithType>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=nameWithType> to obtain an <xref:System.IntPtr> value that represents a [IUnknown](https://go.microsoft.com/fwlink/?LinkId=148003) interface pointer to release.</span></span> <span data-ttu-id="68c54-1570">これらのメソッドを使用することもでき、 <xref:System.Runtime.InteropServices.Marshal.Release%2A> 、マネージ オブジェクトによって表される COM インターフェイスを解放するマネージ オブジェクトに対するメソッド[COM 呼び出し可能ラッパー](~/docs/framework/interop/com-callable-wrapper.md)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1570">You can also use these methods and the <xref:System.Runtime.InteropServices.Marshal.Release%2A> method on managed objects to release the COM interfaces represented by the managed object's [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1571">次の例は、取得する方法を示します、`IUnknown`インターフェイスを使用してマネージ オブジェクトを<xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1571">The following example demonstrates how to retrieve an `IUnknown` interface for a managed object using the <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> method.</span></span> <span data-ttu-id="68c54-1572">例が呼び出すことによって、インターフェイス ポインターを解放、<xref:System.Runtime.InteropServices.Marshal.Release%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1572">The example then releases the interface pointer by calling the <xref:System.Runtime.InteropServices.Marshal.Release%2A> method.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1573">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1573">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1574">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1574">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseComObject">
      <MemberSignature Language="C#" Value="public static int ReleaseComObject (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReleaseComObject(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReleaseComObject (o As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ReleaseComObject(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member ReleaseComObject : obj -&gt; int" Usage="System.Runtime.InteropServices.Marshal.ReleaseComObject o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="68c54-1575">解放する COM オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1575">The COM object to release.</span></span></param>
        <summary><span data-ttu-id="68c54-1576">指定した COM オブジェクトに関連付けられている指定した [ ランタイム呼び出し可能ラッパー ](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW: Runtime Callable Wrapper) の参照カウントをデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1576">Decrements the reference count of the [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) associated with the specified COM object.</span></span></summary>
        <returns><span data-ttu-id="68c54-1577"><paramref name="o" /> に関連付けられている RCW の参照カウントの新しい値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1577">The new value of the reference count of the RCW associated with <paramref name="o" />.</span></span> <span data-ttu-id="68c54-1578">この値は通常 0 です。RCW は、ラップされた COM オブジェクトへの参照を、それを呼び出しているマネージド クライアントの数に関係なく、1 つしか保持しないためです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1578">This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1579">このメソッドは、マネージ コードから使用される COM オブジェクトの有効期間を明示的に制御に使用されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1579">This method is used to explicitly control the lifetime of a COM object used from managed code.</span></span> <span data-ttu-id="68c54-1580">このメソッドを使用して、適切なタイミングで、または特定の順序でオブジェクトを解放する必要があります、リソースへの参照を保持する、基になる COM オブジェクトを解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1580">You should use this method to free the underlying COM object that holds references to resources in a timely manner or when objects must be freed in a specific order.</span></span>  
  
 <span data-ttu-id="68c54-1581">COM インターフェイス ポインターが共通言語ランタイム (CLR) を入力するたびに、RCW にラップします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1581">Every time a COM interface pointer enters the common language runtime (CLR), it is wrapped in an RCW.</span></span>  
  
 <span data-ttu-id="68c54-1582">RCW は、COM インターフェイス ポインターをマップするたびにインクリメントされる参照カウントが。</span><span class="sxs-lookup"><span data-stu-id="68c54-1582">The RCW has a reference count that is incremented every time a COM interface pointer is mapped to it.</span></span> <span data-ttu-id="68c54-1583"><xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A>メソッドは、RCW の参照カウントをデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1583">The <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method decrements the reference count of an RCW.</span></span> <span data-ttu-id="68c54-1584">参照カウントがゼロに達すると、ランタイムが解放されたアンマネージ COM オブジェクトのすべての参照をスローします、<xref:System.NullReferenceException?displayProperty=nameWithType>しようとすると、さらに、オブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1584">When the reference count reaches zero, the runtime releases all its references on the unmanaged COM object, and throws a <xref:System.NullReferenceException?displayProperty=nameWithType> if you attempt to use the object further.</span></span> <span data-ttu-id="68c54-1585">ラッパーの参照カウントは、呼び出すと、毎回インクリメントされた場合は、同じ COM インターフェイスは、アンマネージ コードから、1 つ以上の時間をマネージ コードに渡される、<xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A>残っている参照の数を返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1585">If the same COM interface is passed more than one time from unmanaged to managed code, the reference count on the wrapper is incremented every time, and calling <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> returns the number of remaining references.</span></span>  
  
 <span data-ttu-id="68c54-1586">このメソッドでは、正確にする場合に実行されるように、RCW の参照カウントの解放を強制することができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1586">This method enables you to force an RCW reference count release so that it occurs precisely when you want it to.</span></span> <span data-ttu-id="68c54-1587">ただし、不適切な使用の<xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A>アプリケーションが失敗する場合がありますか、アクセス違反が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1587">However, improper use of <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> may cause your application to fail, or may cause an access violation.</span></span>  
  
 <span data-ttu-id="68c54-1588">アプリケーション ドメイン内のマネージ コードが COM コンポーネントを表す RCW を保持しているシナリオを検討してください。</span><span class="sxs-lookup"><span data-stu-id="68c54-1588">Consider a scenario in which managed code in an application domain is holding onto an RCW that represents a COM component.</span></span> <span data-ttu-id="68c54-1589">呼び出す場合、 <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> 、RCW でメソッド、マネージ コードは、RCW にアクセスすることはできず、発生させる、<xref:System.Runtime.InteropServices.InvalidComObjectException>例外。</span><span class="sxs-lookup"><span data-stu-id="68c54-1589">If you call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the RCW, the managed code will be unable to access the RCW and will raise an <xref:System.Runtime.InteropServices.InvalidComObjectException> exception.</span></span>  
  
 <span data-ttu-id="68c54-1590">重大なエラーは、RCW がリリースされたときに、RCW への呼び出しが実行している場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1590">A more serious error may occur if a call to the RCW is executing when the RCW is released.</span></span> <span data-ttu-id="68c54-1591">この場合、呼び出しを行っているスレッドによってアクセス違反が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1591">In this case, there is a good chance that the thread making the call will cause an access violation.</span></span> <span data-ttu-id="68c54-1592">ただし、プロセス メモリが破損し、プロセスは、デバッグが非常に困難であるため失敗するまでの実行を続行できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1592">However, process memory may become corrupted, and the process may continue to run until it fails for reasons that are very difficult to debug.</span></span>  
  
 <span data-ttu-id="68c54-1593">使用されている COM コンポーネントが、シングルトンの場合、次の理由により、このリスクはいっそう複雑になります。CLR が COM を呼び出すことによって COM コンポーネントをアクティブに[CoCreateInstance](https://go.microsoft.com/fwlink/?LinkID=142894)シングルトン COM コンポーネントが呼び出されるたびに同じインターフェイス ポインターを返す関数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1593">This risk is compounded when the COM component that is being used is a singleton, for the following reason: The CLR activates COM components by calling the COM [CoCreateInstance](https://go.microsoft.com/fwlink/?LinkID=142894) function, which returns the same interface pointer every time it is called for singleton COM components.</span></span> <span data-ttu-id="68c54-1594">そのため、アプリケーション ドメイン内のマネージ コードの独立した部分を使用できます、同じ RCW シングルトン COM コンポーネントは、いずれかと 1 つの呼び出し、<xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A>メソッドでは、COM コンポーネント、他方は無効になります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1594">Thus, separate and independent pieces of managed code in an application domain can be using the same RCW for a singleton COM component, and if either one calls the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the COM component, the other will be broken.</span></span>  
  
 <span data-ttu-id="68c54-1595">そのため、使用、<xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A>は絶対に必要な場合にのみです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1595">Therefore, use the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> only if it is absolutely required.</span></span> <span data-ttu-id="68c54-1596">COM コンポーネントが決定時に解放されることを確認するには、このメソッドを呼び出す場合は、使用を検討して、<xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1596">If you want to call this method to ensure that a COM component is released at a determined time, consider using the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method instead.</span></span> <span data-ttu-id="68c54-1597"><xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> CLR を再入力がその回数に関係なく、基になる COM コンポーネントをリリースします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1597"><xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> will release the underlying COM component regardless of how many times it has re-entered the CLR.</span></span> <span data-ttu-id="68c54-1598">COM コンポーネントは、CLR を再入力するたびに、いずれかによって、RCW の内部参照カウントがインクリメントされます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1598">The internal reference count of the RCW is incremented by one every time the COM component re-enters the CLR.</span></span> <span data-ttu-id="68c54-1599">そのため、呼び出すことができます、<xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A>値が返されるまでループ内でのメソッドは 0 です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1599">Therefore, you could call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until the value returned is zero.</span></span> <span data-ttu-id="68c54-1600">これと同じ結果が得られます、<xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1600">This achieves the same result as the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1601"><paramref name="o" /> は有効な COM オブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1601"><paramref name="o" /> is not a valid COM object.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="68c54-1602"><paramref name="o" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1602"><paramref name="o" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1603">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1603">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1604">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1604">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)" />
        <altmember cref="T:System.NullReferenceException" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseThreadCache">
      <MemberSignature Language="C#" Value="public static void ReleaseThreadCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReleaseThreadCache() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReleaseThreadCache" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReleaseThreadCache ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReleaseThreadCache();" />
      <MemberSignature Language="F#" Value="static member ReleaseThreadCache : unit -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.ReleaseThreadCache " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API did not perform any operation and will be removed in future versions of the CLR.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68c54-1605">スレッドのキャッシュを解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1605">Releases the thread cache.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1606">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1606">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1607">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1607">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SecureStringToBSTR">
      <MemberSignature Language="C#" Value="public static IntPtr SecureStringToBSTR (System.Security.SecureString s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int SecureStringToBSTR(class System.Security.SecureString s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SecureStringToBSTR (s As SecureString) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr SecureStringToBSTR(System::Security::SecureString ^ s);" />
      <MemberSignature Language="F#" Value="static member SecureStringToBSTR : System.Security.SecureString -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.SecureStringToBSTR s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Security.SecureString" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-1608">コピーするマネージド オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1608">The managed object to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-1609">アンマネージドの [ バイナリ文字列 (BSTR) ](https://msdn.microsoft.com/library/ms221069\(v=vs.85\).aspx)を割り当て、それにマネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1609">Allocates an unmanaged [binary string (BSTR)](https://msdn.microsoft.com/library/ms221069\(v=vs.85\).aspx) and copies the contents of a managed <see cref="T:System.Security.SecureString" /> object into it.</span></span></summary>
        <returns><span data-ttu-id="68c54-1610"><paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</span><span class="sxs-lookup"><span data-stu-id="68c54-1610">The address, in unmanaged memory, where the <paramref name="s" /> parameter was copied to, or 0 if a null object was supplied.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1611"><xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A>メソッドはカスタム マーシャ リングに適しています。 または、と混在させるマネージ コードとアンマネージ コード。</span><span class="sxs-lookup"><span data-stu-id="68c54-1611">The <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method is useful for custom marshaling or when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1612">このメソッドは、文字列に必要なアンマネージ メモリを割り当てて、ため、いつでも無料、`BSTR`を呼び出して完了すると、<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1612">Because this method allocates the unmanaged memory required for a string, always free the `BSTR` when finished by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1613"><paramref name="s" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1613">The <paramref name="s" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="68c54-1614">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1614">The current computer is not running Windows 2000 Service Pack 3 or later.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-1615">使用できるメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1615">There is insufficient memory available.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1616">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1616">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1617">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1617">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <block subset="none" type="usage"><para><span data-ttu-id="68c54-1618">このメソッドは、Windows 2000 Service Pack 3 を実行しているコンピューターでのみサポートされている以降です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1618">This method is supported only on computers running Windows 2000 Service Pack 3 or later.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SecureStringToCoTaskMemAnsi">
      <MemberSignature Language="C#" Value="public static IntPtr SecureStringToCoTaskMemAnsi (System.Security.SecureString s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int SecureStringToCoTaskMemAnsi(class System.Security.SecureString s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SecureStringToCoTaskMemAnsi (s As SecureString) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr SecureStringToCoTaskMemAnsi(System::Security::SecureString ^ s);" />
      <MemberSignature Language="F#" Value="static member SecureStringToCoTaskMemAnsi : System.Security.SecureString -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Security.SecureString" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-1619">コピーするマネージド オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1619">The managed object to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-1620">アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1620">Copies the contents of a managed <see cref="T:System.Security.SecureString" /> object to a block of memory allocated from the unmanaged COM task allocator.</span></span></summary>
        <returns><span data-ttu-id="68c54-1621"><paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</span><span class="sxs-lookup"><span data-stu-id="68c54-1621">The address, in unmanaged memory, where the <paramref name="s" /> parameter was copied to, or 0 if a null object was supplied.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1622"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A>メソッドはカスタム マーシャ リングに適しています。 または、と混在させるマネージ コードとアンマネージ コード。</span><span class="sxs-lookup"><span data-stu-id="68c54-1622">The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method is useful for custom marshaling or when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1623">呼び出すことによって、メモリを常に解放ため、このメソッドは、文字列に必要なアンマネージ メモリを割り当てて、<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1623">Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A>.</span></span> <span data-ttu-id="68c54-1624">文字列の文字は、ANSI 文字としてコピーされます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1624">The characters of the string are copied as ANSI characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1625">次の例では、<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A>マーシャ リングし、のコンテンツを復号化するメソッド、<xref:System.Security.SecureString>アンマネージ メモリ ブロックへのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1625">The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory.</span></span> <span data-ttu-id="68c54-1626">次を使用して、<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A>をゼロにし、アンマネージ ブロックを破棄します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1626">It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> method to zero out and dispose the unmanaged block.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1627"><paramref name="s" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1627">The <paramref name="s" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="68c54-1628">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1628">The current computer is not running Windows 2000 Service Pack 3 or later.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-1629">使用できるメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1629">There is insufficient memory available.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1630">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1630">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1631">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1631">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <block subset="none" type="usage"><para><span data-ttu-id="68c54-1632">このメソッドは、Windows 2000 Service Pack 3 を実行しているコンピューターでのみサポートされている以降です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1632">This method is supported only on computers running Windows 2000 Service Pack 3 or later.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SecureStringToCoTaskMemUnicode">
      <MemberSignature Language="C#" Value="public static IntPtr SecureStringToCoTaskMemUnicode (System.Security.SecureString s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int SecureStringToCoTaskMemUnicode(class System.Security.SecureString s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SecureStringToCoTaskMemUnicode (s As SecureString) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr SecureStringToCoTaskMemUnicode(System::Security::SecureString ^ s);" />
      <MemberSignature Language="F#" Value="static member SecureStringToCoTaskMemUnicode : System.Security.SecureString -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Security.SecureString" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-1633">コピーするマネージド オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1633">The managed object to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-1634">アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1634">Copies the contents of a managed <see cref="T:System.Security.SecureString" /> object to a block of memory allocated from the unmanaged COM task allocator.</span></span></summary>
        <returns><span data-ttu-id="68c54-1635"><paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</span><span class="sxs-lookup"><span data-stu-id="68c54-1635">The address, in unmanaged memory, where the <paramref name="s" /> parameter was copied to, or 0 if a null object was supplied.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1636"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A>メソッドはカスタム マーシャ リングに適しています。 または、と混在させるマネージ コードとアンマネージ コード。</span><span class="sxs-lookup"><span data-stu-id="68c54-1636">The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method is useful for custom marshaling or when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1637">このメソッドは、文字列に必要なアンマネージ メモリを割り当てて、ため、呼び出すことによって、メモリを解放常に、<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1637">Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method.</span></span> <span data-ttu-id="68c54-1638">文字列の文字は Unicode 文字としてコピーされます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1638">The characters of the string are copied as Unicode characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1639">次の例では、<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A>マーシャ リングし、のコンテンツを復号化するメソッド、<xref:System.Security.SecureString>アンマネージ メモリ ブロックへのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1639">The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory.</span></span> <span data-ttu-id="68c54-1640">次を使用して、<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A>をゼロにし、アンマネージ ブロックを破棄します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1640">It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method to zero out and dispose the unmanaged block.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1641"><paramref name="s" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1641">The <paramref name="s" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="68c54-1642">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1642">The current computer is not running Windows 2000 Service Pack 3 or later.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-1643">使用できるメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1643">There is insufficient memory available.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1644">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1644">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1645">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1645">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <block subset="none" type="usage"><para><span data-ttu-id="68c54-1646">このメソッドは、Windows 2000 Service Pack 3 を実行しているコンピューターでのみサポートされている以降です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1646">This method is supported only on computers running Windows 2000 Service Pack 3 or later.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SecureStringToGlobalAllocAnsi">
      <MemberSignature Language="C#" Value="public static IntPtr SecureStringToGlobalAllocAnsi (System.Security.SecureString s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int SecureStringToGlobalAllocAnsi(class System.Security.SecureString s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SecureStringToGlobalAllocAnsi (s As SecureString) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr SecureStringToGlobalAllocAnsi(System::Security::SecureString ^ s);" />
      <MemberSignature Language="F#" Value="static member SecureStringToGlobalAllocAnsi : System.Security.SecureString -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Security.SecureString" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-1647">コピーするマネージド オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1647">The managed object to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-1648">マネージド <see cref="T:System.Security.SecureString" /> の内容をアンマネージド メモリにコピーし、コピー時に ANSI 形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1648">Copies the contents of a managed <see cref="T:System.Security.SecureString" /> into unmanaged memory, converting into ANSI format as it copies.</span></span></summary>
        <returns><span data-ttu-id="68c54-1649"><paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</span><span class="sxs-lookup"><span data-stu-id="68c54-1649">The address, in unmanaged memory, to where the <paramref name="s" /> parameter was copied, or 0 if a null object was supplied.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1650"><xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A>メソッドはカスタム マーシャ リングに適しています。 または、と混在させるマネージ コードとアンマネージ コード。</span><span class="sxs-lookup"><span data-stu-id="68c54-1650">The <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method is useful for custom marshaling or when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1651">このメソッドは、文字列に必要なアンマネージ メモリを割り当てて、ため、呼び出すことによって、メモリを解放常に、<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1651">Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1652">次の例では、<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A>マーシャ リングし、のコンテンツを復号化するメソッド、<xref:System.Security.SecureString>アンマネージ メモリ ブロックへのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1652">The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory.</span></span> <span data-ttu-id="68c54-1653">次を使用して、<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A>をゼロにし、アンマネージ ブロックを破棄します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1653">It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method to zero out and dispose the unmanaged block.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/CS/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1654"><paramref name="s" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1654">The <paramref name="s" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="68c54-1655">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1655">The current computer is not running Windows 2000 Service Pack 3 or later.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-1656">使用できるメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1656">There is insufficient memory available.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1657">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1657">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1658">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1658">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <block subset="none" type="usage"><para><span data-ttu-id="68c54-1659">このメソッドは、Windows 2000 Service Pack 3 を実行しているコンピューターでのみサポートされている以降です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1659">This method is supported only on computers running Windows 2000 Service Pack 3 or later.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SecureStringToGlobalAllocUnicode">
      <MemberSignature Language="C#" Value="public static IntPtr SecureStringToGlobalAllocUnicode (System.Security.SecureString s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int SecureStringToGlobalAllocUnicode(class System.Security.SecureString s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SecureStringToGlobalAllocUnicode (s As SecureString) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr SecureStringToGlobalAllocUnicode(System::Security::SecureString ^ s);" />
      <MemberSignature Language="F#" Value="static member SecureStringToGlobalAllocUnicode : System.Security.SecureString -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Security.SecureString" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-1660">コピーするマネージド オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1660">The managed object to copy.</span></span></param>
        <summary><span data-ttu-id="68c54-1661">マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をアンマネージド メモリにコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1661">Copies the contents of a managed <see cref="T:System.Security.SecureString" /> object into unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1662"><paramref name="s" /> のコピー先となった (アンマネージ メモリ内の) アドレス。<paramref name="s" /> が長さ 0 の <see cref="T:System.Security.SecureString" /> オブジェクトである場合は 0。</span><span class="sxs-lookup"><span data-stu-id="68c54-1662">The address, in unmanaged memory, where <paramref name="s" /> was copied, or 0 if <paramref name="s" /> is a <see cref="T:System.Security.SecureString" /> object whose length is 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1663"><xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A>メソッドは、マネージし、アンマネージ コードの混在させる場合、カスタム マーシャ リング用、または使用するために便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1663">The <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method is useful for custom marshaling or for use when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1664">このメソッドは、文字列に必要なアンマネージ メモリを割り当てて、ため、呼び出すことによって、メモリを解放常に、<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1664">Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1665">次の例では、使用する方法、<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A>メソッドをアンマネージ`LogonUser`で偽装を実行する関数、<xref:System.Security.SecureString>クラス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1665">The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method with the unmanaged `LogonUser` function to perform impersonation with the <xref:System.Security.SecureString> class.</span></span> <span data-ttu-id="68c54-1666">使用して、<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A>をゼロにし、アンマネージ文字列の参照を解放するメソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1666">The example then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method to zero out and free the unmanaged string reference.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/CS/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1667"><paramref name="s" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1667">The <paramref name="s" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="68c54-1668">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1668">The current computer is not running Windows 2000 Service Pack 3 or later.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-1669">使用できるメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1669">There is insufficient memory available.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1670">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1670">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1671">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1671">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <block subset="none" type="usage"><para><span data-ttu-id="68c54-1672">このメソッドは、Windows 2000 Service Pack 3 を実行しているコンピューターでのみサポートされている以降です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1672">This method is supported only on computers running Windows 2000 Service Pack 3 or later.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SetComObjectData">
      <MemberSignature Language="C#" Value="public static bool SetComObjectData (object obj, object key, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetComObjectData(object obj, object key, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetComObjectData (obj As Object, key As Object, data As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetComObjectData(System::Object ^ obj, System::Object ^ key, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="static member SetComObjectData : obj * obj * obj -&gt; bool" Usage="System.Runtime.InteropServices.Marshal.SetComObjectData (obj, key, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="key" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="data" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="68c54-1673">データを格納する COM オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1673">The COM object in which to store the data.</span></span></param>
        <param name="key"><span data-ttu-id="68c54-1674">データを格納する COM オブジェクトの内部ハッシュ テーブルにあるキー。</span><span class="sxs-lookup"><span data-stu-id="68c54-1674">The key in the internal hash table of the COM object in which to store the data.</span></span></param>
        <param name="data"><span data-ttu-id="68c54-1675">設定するデータ。</span><span class="sxs-lookup"><span data-stu-id="68c54-1675">The data to set.</span></span></param>
        <summary><span data-ttu-id="68c54-1676">指定した COM オブジェクトに、指定したキーで参照するデータを設定します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1676">Sets data referenced by the specified key in the specified COM object.</span></span></summary>
        <returns><span data-ttu-id="68c54-1677">データが正常に設定された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="68c54-1677"><see langword="true" /> if the data was set successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1678">ラップされたすべての COM オブジェクト、[ランタイム呼び出し可能ラッパー](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) を関連付けられたハッシュ テーブルがある<xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A>データを追加します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1678">All COM objects wrapped in a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) have an associated hash table, to which <xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A> adds data.</span></span> <span data-ttu-id="68c54-1679"><xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A?displayProperty=nameWithType> ハッシュ テーブルからデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1679"><xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A?displayProperty=nameWithType> retrieves data from the hash table.</span></span> <span data-ttu-id="68c54-1680">コードからいずれかのメソッドを呼び出すにすることはありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1680">You should never have to call either method from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1681"><paramref name="obj" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1681"><paramref name="obj" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-1682">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1682">-or-</span></span> 
 <span data-ttu-id="68c54-1683"><paramref name="key" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1683"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1684"><paramref name="obj" /> はCOM オブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1684"><paramref name="obj" /> is not a COM object.</span></span>  
  
<span data-ttu-id="68c54-1685">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1685">-or-</span></span> 
 <span data-ttu-id="68c54-1686"><paramref name="obj" /> は [!INCLUDE[wrt](~/includes/wrt-md.md)] オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1686"><paramref name="obj" /> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1687">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1687">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1688">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1688">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SizeOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1689">クラスのアンマネージ サイズを返します (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="68c54-1689">Returns the unmanaged size, in bytes, of a class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SizeOf">
      <MemberSignature Language="C#" Value="public static int SizeOf (object structure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf(object structure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SizeOf (structure As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int SizeOf(System::Object ^ structure);" />
      <MemberSignature Language="F#" Value="static member SizeOf : obj -&gt; int" Usage="System.Runtime.InteropServices.Marshal.SizeOf structure" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("SizeOf(Object) may be unavailable in future releases. Instead, use SizeOf&lt;T&gt;(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296514")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="structure" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="structure"><span data-ttu-id="68c54-1690">サイズが返されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1690">The object whose size is to be returned.</span></span></param>
        <summary><span data-ttu-id="68c54-1691">オブジェクトのアンマネージ サイズをバイト単位で返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1691">Returns the unmanaged size of an object in bytes.</span></span></summary>
        <returns><span data-ttu-id="68c54-1692">アンマネージ コードの指定したオブジェクトのサイズ。</span><span class="sxs-lookup"><span data-stu-id="68c54-1692">The size of the specified object in unmanaged code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1693">このメソッドは、参照型またはボックス化された値の型を指定できます構造体のインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1693">This method accepts an instance of a structure, which can be a reference type or a boxed value type.</span></span> <span data-ttu-id="68c54-1694">レイアウトは、シーケンシャルまたは明示的である必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1694">The layout must be sequential or explicit.</span></span>  
  
 <span data-ttu-id="68c54-1695">返されるサイズは、アンマネージ オブジェクトのサイズです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1695">The size returned is the size of the unmanaged object.</span></span> <span data-ttu-id="68c54-1696">オブジェクトのアンマネージ コードとマネージのサイズが異なることができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1696">The unmanaged and managed sizes of an object can differ.</span></span> <span data-ttu-id="68c54-1697">文字型の場合、サイズが影響を受ける、<xref:System.Runtime.InteropServices.CharSet>そのクラスに適用される値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1697">For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.</span></span>  
  
 <span data-ttu-id="68c54-1698">使用することができます、<xref:System.Runtime.InteropServices.Marshal.SizeOf%2A>割り当てを使用してアンマネージ メモリの量を決定する方法、<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>と<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1698">You can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> method to determine how much unmanaged memory to allocate using the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> and <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1699">次の例は、マネージ構造体を作成します。、アンマネージ メモリに転送し、マネージ メモリに再度に転送します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1699">The following example creates a managed structure, transfers it to unmanaged memory, and then transfers it back to managed memory.</span></span> <span data-ttu-id="68c54-1700">この例では、<xref:System.Runtime.InteropServices.Marshal.SizeOf%2A>メソッドをアンマネージ メモリの量を割り当てることを確認します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1700">This example uses the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> method to determine how much unmanaged memory to allocate.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1701"><paramref name="structure" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1701">The <paramref name="structure" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="SizeOf">
      <MemberSignature Language="C#" Value="public static int SizeOf (Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf(class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SizeOf (t As Type) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int SizeOf(Type ^ t);" />
      <MemberSignature Language="F#" Value="static member SizeOf : Type -&gt; int" Usage="System.Runtime.InteropServices.Marshal.SizeOf t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("SizeOf(Type) may be unavailable in future releases. Instead, use SizeOf&lt;T&gt;(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296515")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="t"><span data-ttu-id="68c54-1702">サイズが返される型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1702">The type whose size is to be returned.</span></span></param>
        <summary><span data-ttu-id="68c54-1703">アンマネージ型のサイズを返します (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="68c54-1703">Returns the size of an unmanaged type in bytes.</span></span></summary>
        <returns><span data-ttu-id="68c54-1704">アンマネージ コードの指定した型のサイズ。</span><span class="sxs-lookup"><span data-stu-id="68c54-1704">The size of the specified type in unmanaged code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1705">構造体を持っていない場合、このメソッドを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1705">You can use this method when you do not have a structure.</span></span> <span data-ttu-id="68c54-1706">レイアウトは、シーケンシャルまたは明示的である必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1706">The layout must be sequential or explicit.</span></span>  
  
 <span data-ttu-id="68c54-1707">返されるサイズは、アンマネージ型のサイズです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1707">The size returned is the size of the unmanaged type.</span></span> <span data-ttu-id="68c54-1708">オブジェクトのアンマネージ コードとマネージのサイズが異なることができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1708">The unmanaged and managed sizes of an object can differ.</span></span> <span data-ttu-id="68c54-1709">文字型の場合、サイズが影響を受ける、<xref:System.Runtime.InteropServices.CharSet>そのクラスに適用される値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1709">For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1710">次の例では、<xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> メソッドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1710">The following example demonstrates calling the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> method.</span></span> <span data-ttu-id="68c54-1711">このコード例が示されている例の一部、<xref:System.Runtime.InteropServices.Marshal>クラス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1711">This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.</span></span>  
  
 [!code-cpp[Marshal#3](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#3)]
 [!code-csharp[Marshal#3](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#3)]
 [!code-vb[Marshal#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1712"><paramref name="t" /> パラメーターがジェネリック型定義です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1712">The <paramref name="t" /> parameter is a generic type definition.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1713"><paramref name="t" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1713">The <paramref name="t" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="SizeOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SizeOf&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SizeOf``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SizeOf(Of T) () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int SizeOf();" />
      <MemberSignature Language="F#" Value="static member SizeOf : unit -&gt; int" Usage="System.Runtime.InteropServices.Marshal.SizeOf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="68c54-1714">サイズが返される型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1714">The type whose size is to be returned.</span></span></typeparam>
        <summary><span data-ttu-id="68c54-1715">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-1715">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-1716">アンマネージ型のサイズを返します (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="68c54-1716">Returns the size of an unmanaged type in bytes.</span></span></summary>
        <returns><span data-ttu-id="68c54-1717"><typeparamref name="T" /> ジェネリック型パラメーターで指定される型のサイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="68c54-1717">The size, in bytes, of the type that is specified by the <typeparamref name="T" /> generic type parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1718">構造体を持っていない場合、このメソッドを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1718">You can use this method when you do not have a structure.</span></span> <span data-ttu-id="68c54-1719">レイアウトは、シーケンシャルまたは明示的である必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1719">The layout must be sequential or explicit.</span></span>  
  
 <span data-ttu-id="68c54-1720">返されるサイズは、アンマネージ型のサイズです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1720">The size returned is the size of the unmanaged type.</span></span> <span data-ttu-id="68c54-1721">オブジェクトのアンマネージ コードとマネージのサイズが異なることができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1721">The unmanaged and managed sizes of an object can differ.</span></span> <span data-ttu-id="68c54-1722">文字型の場合、サイズが影響を受ける、<xref:System.Runtime.InteropServices.CharSet>そのクラスに適用される値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1722">For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SizeOf&lt;T&gt; (T structure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf&lt;T&gt;(!!T structure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SizeOf(Of T) (structure As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int SizeOf(T structure);" />
      <MemberSignature Language="F#" Value="static member SizeOf : 'T -&gt; int" Usage="System.Runtime.InteropServices.Marshal.SizeOf structure" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="structure" Type="T" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="68c54-1723"><paramref name="structure" /> パラメーターの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1723">The type of the <paramref name="structure" /> parameter.</span></span></typeparam>
        <param name="structure"><span data-ttu-id="68c54-1724">サイズが返されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1724">The object whose size is to be returned.</span></span></param>
        <summary><span data-ttu-id="68c54-1725">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-1725">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-1726">指定された型のオブジェクトのアンマネージのサイズをバイト数で返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1726">Returns the unmanaged size of an object of a specified type in bytes.</span></span></summary>
        <returns><span data-ttu-id="68c54-1727">アンマネージ コードの指定したオブジェクトのサイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="68c54-1727">The size, in bytes, of the specified object in unmanaged code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1728">このメソッドは、参照型またはボックス化された値の型を指定できます構造体のインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1728">This method accepts an instance of a structure, which can be a reference type or a boxed value type.</span></span> <span data-ttu-id="68c54-1729">レイアウトは、シーケンシャルまたは明示的である必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1729">The layout must be sequential or explicit.</span></span>  
  
 <span data-ttu-id="68c54-1730">返されるサイズは、アンマネージ オブジェクトのサイズです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1730">The size returned is the size of the unmanaged object.</span></span> <span data-ttu-id="68c54-1731">オブジェクトのアンマネージ コードとマネージのサイズが異なることができます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1731">The unmanaged and managed sizes of an object can differ.</span></span> <span data-ttu-id="68c54-1732">文字型の場合、サイズが影響を受ける、<xref:System.Runtime.InteropServices.CharSet>そのクラスに適用される値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1732">For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.</span></span>  
  
 <span data-ttu-id="68c54-1733">使用することができます、<xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29>を使用して割り当てるアンマネージ メモリの量を決定する方法、<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>と<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1733">You can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29> method to determine how much unmanaged memory to allocate by using the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> and <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68c54-1734"><paramref name="structure" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1734">The <paramref name="structure" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StringToBSTR">
      <MemberSignature Language="C#" Value="public static IntPtr StringToBSTR (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToBSTR(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StringToBSTR (s As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr StringToBSTR(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member StringToBSTR : string -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.StringToBSTR s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-1735">コピーするマネージド文字列。</span><span class="sxs-lookup"><span data-stu-id="68c54-1735">The managed string to be copied.</span></span></param>
        <summary><span data-ttu-id="68c54-1736">[BSTR](https://msdn.microsoft.com/library/ms221069.aspx) を割り当て、それにマネージド <see cref="T:System.String" /> の内容をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1736">Allocates a [BSTR](https://msdn.microsoft.com/library/ms221069.aspx) and copies the contents of a managed <see cref="T:System.String" /> into it.</span></span></summary>
        <returns><span data-ttu-id="68c54-1737"><see langword="BSTR" /> へのアンマネージ ポインター。<paramref name="s" /> が null の場合は 0。</span><span class="sxs-lookup"><span data-stu-id="68c54-1737">An unmanaged pointer to the <see langword="BSTR" />, or 0 if <paramref name="s" /> is null.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1738"><xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A> カスタム マーシャ リング用、またはマネージ コードとアンマネージ コードが混在する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1738"><xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A> is useful for custom marshaling or when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1739">このメソッドは、文字列に必要なアンマネージ メモリを割り当てて、ため、いつでも無料、`BSTR`を呼び出して完了すると<xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1739">Because this method allocates the unmanaged memory required for a string, always free the `BSTR` when finished by calling <xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="68c54-1740">このメソッドは、反対側の機能を提供します。<xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1740">This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-1741">使用できるメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1741">There is insufficient memory available.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-1742"><paramref name="s" /> の長さが範囲外です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1742">The length for <paramref name="s" /> is out of range.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1743">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1743">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1744">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1744">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="StringToCoTaskMemAnsi">
      <MemberSignature Language="C#" Value="public static IntPtr StringToCoTaskMemAnsi (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToCoTaskMemAnsi(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StringToCoTaskMemAnsi (s As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr StringToCoTaskMemAnsi(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member StringToCoTaskMemAnsi : string -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-1745">コピーされるマネージド文字列。</span><span class="sxs-lookup"><span data-stu-id="68c54-1745">A managed string to be copied.</span></span></param>
        <summary><span data-ttu-id="68c54-1746">アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.String" /> の内容をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1746">Copies the contents of a managed <see cref="T:System.String" /> to a block of memory allocated from the unmanaged COM task allocator.</span></span></summary>
        <returns><span data-ttu-id="68c54-1747">文字列に割り当てられたメモリ ブロックへのポインターを表す整数。<paramref name="s" /> が <see langword="null" /> の場合は 0。</span><span class="sxs-lookup"><span data-stu-id="68c54-1747">An integer representing a pointer to the block of memory allocated for the string, or 0 if <paramref name="s" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1748"><xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A> カスタム マーシャ リング用、またはマネージ コードとアンマネージ コードが混在する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1748"><xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1749">呼び出すことによって、メモリを常に解放ため、このメソッドは、文字列に必要なアンマネージ メモリを割り当てて、<xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1749">Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>.</span></span> <span data-ttu-id="68c54-1750">このメソッドは、反対側の機能を提供します。<xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1750">This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="68c54-1751">文字列の文字は、ANSI 文字としてコピーされます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1751">The characters of the string are copied as ANSI characters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-1752">使用できるメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1752">There is insufficient memory available.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-1753"><paramref name="s" /> パラメーターがオペレーティング システムで許可されている最大長を超えています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1753">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1754">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1754">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1755">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1755">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="StringToCoTaskMemAuto">
      <MemberSignature Language="C#" Value="public static IntPtr StringToCoTaskMemAuto (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToCoTaskMemAuto(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StringToCoTaskMemAuto (s As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr StringToCoTaskMemAuto(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member StringToCoTaskMemAuto : string -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-1756">コピーされるマネージド文字列。</span><span class="sxs-lookup"><span data-stu-id="68c54-1756">A managed string to be copied.</span></span></param>
        <summary><span data-ttu-id="68c54-1757">アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.String" /> の内容をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1757">Copies the contents of a managed <see cref="T:System.String" /> to a block of memory allocated from the unmanaged COM task allocator.</span></span></summary>
        <returns><span data-ttu-id="68c54-1758">割り当てられたメモリ ブロック。<paramref name="s" /> が <see langword="null" /> の場合は 0。</span><span class="sxs-lookup"><span data-stu-id="68c54-1758">The allocated memory block, or 0 if <paramref name="s" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1759"><xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A> マネージ コードとアンマネージ コードを混在させる場合カスタム マーシャ リング用、または使用するために便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1759"><xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1760">呼び出すことによって、メモリを常に解放ため、このメソッドは、文字列に必要なアンマネージ メモリを割り当てて、<xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1760">Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>.</span></span> <span data-ttu-id="68c54-1761">このメソッドは、反対側の機能を提供します。<xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1761">This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="68c54-1762">文字列の文字は、コードを実行しているオペレーティング システムに応じて、ANSI または Unicode のいずれかの文字としてコピーされます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1762">The characters of the string are copied as either ANSI or Unicode characters, depending on the operating system where the code is executing.</span></span> <span data-ttu-id="68c54-1763">Windows 98 では、文字は、ANSI 文字としてコピーされます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1763">On Windows 98, the characters are copied as ANSI characters.</span></span> <span data-ttu-id="68c54-1764">Windows NT 4.0、Windows 2000、Windows XP、および Windows Server 2003 ファミリの文字は Unicode 文字としてコピーされます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1764">On Windows NT 4.0, Windows 2000, Windows XP, and the Windows Server 2003 family, the characters are copied as Unicode characters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-1765">使用できるメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1765">There is insufficient memory available.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-1766"><paramref name="s" /> の長さが範囲外です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1766">The length for <paramref name="s" /> is out of range.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1767">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1767">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1768">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1768">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StringToCoTaskMemUni">
      <MemberSignature Language="C#" Value="public static IntPtr StringToCoTaskMemUni (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToCoTaskMemUni(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StringToCoTaskMemUni (s As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr StringToCoTaskMemUni(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member StringToCoTaskMemUni : string -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-1769">コピーされるマネージド文字列。</span><span class="sxs-lookup"><span data-stu-id="68c54-1769">A managed string to be copied.</span></span></param>
        <summary><span data-ttu-id="68c54-1770">アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.String" /> の内容をコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1770">Copies the contents of a managed <see cref="T:System.String" /> to a block of memory allocated from the unmanaged COM task allocator.</span></span></summary>
        <returns><span data-ttu-id="68c54-1771">文字列に割り当てられたメモリ ブロックへのポインターを表す整数。s が <see langword="null" /> の場合は 0。</span><span class="sxs-lookup"><span data-stu-id="68c54-1771">An integer representing a pointer to the block of memory allocated for the string, or 0 if s is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1772"><xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A> マネージ コードとアンマネージ コードを混在させる場合カスタム マーシャ リング用、または使用するために便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1772"><xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1773">呼び出すことによって、メモリを常に解放ため、このメソッドは、文字列に必要なアンマネージ メモリを割り当てて、<xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1773">Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="68c54-1774">このメソッドは、反対側の機能を提供します。<xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1774">This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="68c54-1775">文字列の文字は Unicode 文字としてコピーされます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1775">The characters of the string are copied as Unicode characters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-1776"><paramref name="s" /> パラメーターがオペレーティング システムで許可されている最大長を超えています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1776">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-1777">使用できるメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1777">There is insufficient memory available.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1778">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1778">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1779">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1779">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StringToCoTaskMemUTF8">
      <MemberSignature Language="C#" Value="public static IntPtr StringToCoTaskMemUTF8 (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToCoTaskMemUTF8(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StringToCoTaskMemUTF8 (s As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr StringToCoTaskMemUTF8(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member StringToCoTaskMemUTF8 : string -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8 s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.1">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringToHGlobalAnsi">
      <MemberSignature Language="C#" Value="public static IntPtr StringToHGlobalAnsi (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToHGlobalAnsi(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StringToHGlobalAnsi (s As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr StringToHGlobalAnsi(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member StringToHGlobalAnsi : string -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-1780">コピーされるマネージド文字列。</span><span class="sxs-lookup"><span data-stu-id="68c54-1780">A managed string to be copied.</span></span></param>
        <summary><span data-ttu-id="68c54-1781">マネージド <see cref="T:System.String" /> の内容をアンマネージド メモリにコピーし、コピー時に ANSI 形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1781">Copies the contents of a managed <see cref="T:System.String" /> into unmanaged memory, converting into ANSI format as it copies.</span></span></summary>
        <returns><span data-ttu-id="68c54-1782"><paramref name="s" /> のコピー先となったアンマネージ メモリ内のアドレス。<paramref name="s" /> が <see langword="null" /> の場合は 0。</span><span class="sxs-lookup"><span data-stu-id="68c54-1782">The address, in unmanaged memory, to where <paramref name="s" /> was copied, or 0 if <paramref name="s" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1783"><xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> カスタム マーシャ リング用、またはマネージ コードとアンマネージ コードが混在する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1783"><xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1784">呼び出すことによって、メモリを常に解放ため、このメソッドは、文字列に必要なアンマネージ メモリを割り当てて、<xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1784">Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>.</span></span> <span data-ttu-id="68c54-1785"><xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> 反対側の機能を提供<xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1785"><xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="68c54-1786">このメソッドは、埋め込まれた null 文字をコピーし、終端の null 文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1786">This method copies embedded null characters, and includes a terminating null character.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1787">次の例は、管理対象の内容を変換する方法を示します<xref:System.String>をアンマネージ メモリのクラスし、し、完了時に、アンマネージ メモリを破棄します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1787">The following example demonstrates how to convert the contents of a managed <xref:System.String> class to unmanaged memory and then dispose of the unmanaged memory when done.</span></span>  
  
 [!code-cpp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/CPP/stringtohglobalansi.cpp#1)]
 [!code-csharp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/cs/stringtohglobalansi.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-1788">使用できるメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1788">There is insufficient memory available.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-1789"><paramref name="s" /> パラメーターがオペレーティング システムで許可されている最大長を超えています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1789">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1790">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1790">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1791">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1791">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="StringToHGlobalAuto">
      <MemberSignature Language="C#" Value="public static IntPtr StringToHGlobalAuto (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToHGlobalAuto(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StringToHGlobalAuto (s As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr StringToHGlobalAuto(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member StringToHGlobalAuto : string -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.StringToHGlobalAuto s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-1792">コピーされるマネージド文字列。</span><span class="sxs-lookup"><span data-stu-id="68c54-1792">A managed string to be copied.</span></span></param>
        <summary><span data-ttu-id="68c54-1793">マネージド <see cref="T:System.String" /> の内容をアンマネージド メモリにコピーし、必要に応じて ANSI 形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1793">Copies the contents of a managed <see cref="T:System.String" /> into unmanaged memory, converting into ANSI format if required.</span></span></summary>
        <returns><span data-ttu-id="68c54-1794">文字列のコピー先となったアンマネージ メモリ内のアドレス。<paramref name="s" /> が <see langword="null" /> の場合は 0。</span><span class="sxs-lookup"><span data-stu-id="68c54-1794">The address, in unmanaged memory, to where the string was copied, or 0 if <paramref name="s" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1795"><xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A> マネージ コードとアンマネージ コードを混在させる場合カスタム マーシャ リング用、または使用するために便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1795"><xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1796">呼び出すことによって、メモリを常に解放ため、このメソッドは、文字列に必要なアンマネージ メモリを割り当てて、<xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1796">Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>.</span></span> <span data-ttu-id="68c54-1797">このメソッドは、反対側の機能を提供します。<xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1797">This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="68c54-1798">このメソッドは、埋め込まれた null 文字をコピーし、終端の null 文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1798">This method copies embedded null characters, and includes a terminating null character.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1799">次の例は、管理対象の内容を変換する方法を示します<xref:System.String>をアンマネージ メモリのクラスし、し、完了時に、アンマネージ メモリを破棄します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1799">The following example demonstrates how to convert the contents of a managed <xref:System.String> class to unmanaged memory and then dispose of the unmanaged memory when done.</span></span>  
  
 [!code-cpp[Runtime.InteropServices.Marshal.StringToHGlobalAuto#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAuto/CPP/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-1800">使用できるメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1800">There is insufficient memory available.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1801">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1801">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1802">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1802">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StringToHGlobalUni">
      <MemberSignature Language="C#" Value="public static IntPtr StringToHGlobalUni (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToHGlobalUni(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StringToHGlobalUni (s As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr StringToHGlobalUni(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member StringToHGlobalUni : string -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.StringToHGlobalUni s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-1803">コピーされるマネージド文字列。</span><span class="sxs-lookup"><span data-stu-id="68c54-1803">A managed string to be copied.</span></span></param>
        <summary><span data-ttu-id="68c54-1804">マネージド <see cref="T:System.String" /> の内容をアンマネージド メモリにコピーします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1804">Copies the contents of a managed <see cref="T:System.String" /> into unmanaged memory.</span></span></summary>
        <returns><span data-ttu-id="68c54-1805"><paramref name="s" /> のコピー先となったアンマネージ メモリ内のアドレス。<paramref name="s" /> が <see langword="null" /> の場合は 0。</span><span class="sxs-lookup"><span data-stu-id="68c54-1805">The address, in unmanaged memory, to where the <paramref name="s" /> was copied, or 0 if <paramref name="s" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1806"><xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A> マネージ コードとアンマネージ コードを混在させる場合カスタム マーシャ リング用、または使用するために便利です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1806"><xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code.</span></span> <span data-ttu-id="68c54-1807">呼び出すことによって、メモリを常に解放ため、このメソッドは、文字列に必要なアンマネージ メモリを割り当てて、<xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1807">Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>.</span></span> <span data-ttu-id="68c54-1808">このメソッドは、反対側の機能を提供します。<xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1808">This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="68c54-1809">このメソッドは、埋め込まれた null 文字をコピーし、終端の null 文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1809">This method copies embedded null characters, and includes a terminating null character.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68c54-1810">メソッドが十分なネイティブ ヒープ メモリを割り当てることができませんでした。</span><span class="sxs-lookup"><span data-stu-id="68c54-1810">The method could not allocate enough native heap memory.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68c54-1811"><paramref name="s" /> パラメーターがオペレーティング システムで許可されている最大長を超えています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1811">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1812">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1812">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1813">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1813">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StructureToPtr">
      <MemberSignature Language="C#" Value="public static void StructureToPtr (object structure, IntPtr ptr, bool fDeleteOld);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StructureToPtr(object structure, native int ptr, bool fDeleteOld) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StructureToPtr (structure As Object, ptr As IntPtr, fDeleteOld As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StructureToPtr(System::Object ^ structure, IntPtr ptr, bool fDeleteOld);" />
      <MemberSignature Language="F#" Value="static member StructureToPtr : obj * nativeint * bool -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.StructureToPtr (structure, ptr, fDeleteOld)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("StructureToPtr(Object, IntPtr, Boolean) may be unavailable in future releases. Instead, use StructureToPtr&lt;T&gt;(T, IntPtr, Boolean). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296516")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="structure" Type="System.Object" />
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="fDeleteOld" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="structure"><span data-ttu-id="68c54-1814">マーシャリングするデータを保持すマネージド オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1814">A managed object that holds the data to be marshaled.</span></span> <span data-ttu-id="68c54-1815">このオブジェクトは、書式指定クラスの構造体またはインスタンスである必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1815">This object must be a structure or an instance of a formatted class.</span></span></param>
        <param name="ptr"><span data-ttu-id="68c54-1816">このメソッドを呼び出す前に割り当てる必要があるアンマネージ メモリ ブロックへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1816">A pointer to an unmanaged block of memory, which must be allocated before this method is called.</span></span></param>
        <param name="fDeleteOld"><span data-ttu-id="68c54-1817">このメソッドがデータをコピーする前に、<paramref name="ptr" /> パラメーターに対して <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> メソッドを呼び出す場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="68c54-1817"><see langword="true" /> to call the <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> method on the <paramref name="ptr" /> parameter before this method copies the data.</span></span> <span data-ttu-id="68c54-1818">ブロックには有効なデータを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1818">The block must contain valid data.</span></span> <span data-ttu-id="68c54-1819">メモリ ブロックに既にデータが格納されているときに <see langword="false" /> を渡すと、メモリ リークが発生する可能性があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="68c54-1819">Note that passing <see langword="false" /> when the memory block already contains data can lead to a memory leak.</span></span></param>
        <summary><span data-ttu-id="68c54-1820">マネージド オブジェクトからアンマネージド メモリ ブロックにデータをマーシャリングします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1820">Marshals data from a managed object to an unmanaged block of memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1821">場合`structure`値の型がボックス化されたまたはボックス化解除できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1821">If `structure` is a value type, it can be boxed or unboxed.</span></span> <span data-ttu-id="68c54-1822">ボックス化される場合はボックス化されたコピーする前に</span><span class="sxs-lookup"><span data-stu-id="68c54-1822">If it is boxed, it is unboxed before copying.</span></span>  
  
 <span data-ttu-id="68c54-1823">書式設定されたクラスは、レイアウトを持つがで指定された参照型、<xref:System.Runtime.InteropServices.StructLayoutAttribute>属性は、いずれかとして<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>または<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1823">A formatted class is a reference type whose layout is specified by the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute, as either <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> or <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="68c54-1824"><xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> 内容をコピー `structure` 、事前に割り当てられたメモリ ブロックにする、`ptr`パラメーターを指します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1824"><xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> copies the contents of `structure` to the pre-allocated block of memory that the `ptr` parameter points to.</span></span> <span data-ttu-id="68c54-1825">場合`structure`COM インターフェイス ポインターをマーシャ リングする参照型が含まれています (インターフェイス、レイアウト、なしのクラスと<xref:System.Object?displayProperty=nameWithType>)、管理対象のオブジェクトは、参照カウントが維持されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1825">If `structure` contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <xref:System.Object?displayProperty=nameWithType>), the managed objects are kept alive with reference counts.</span></span> <span data-ttu-id="68c54-1826">すべての他の参照型 (文字列、配列など) は、コピーにマーシャ リングされます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1826">All other reference types (for example, strings and arrays) are marshaled to copies.</span></span> <span data-ttu-id="68c54-1827">これらのマネージまたはアンマネージ オブジェクトを解放するには、呼び出す必要がある、<xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A?displayProperty=nameWithType>メソッド メモリ ブロックを解放する前にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1827">To release these managed or unmanaged objects, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A?displayProperty=nameWithType> method before you free the memory block.</span></span>  
  
 <span data-ttu-id="68c54-1828">使用する場合、<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A>は後で別のインスタンスをメモリ ブロックにコピーする方法を指定する`true`の`fDeleteOld`参照を削除する参照型の前のインスタンスでカウントされます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1828">If you use the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method to copy a different instance to the memory block at a later time, specify `true` for `fDeleteOld` to remove reference counts for reference types in the previous instance.</span></span> <span data-ttu-id="68c54-1829">それ以外の場合、マネージ参照型と非管理対象のコピーがリーク効果的にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1829">Otherwise, the managed reference types and unmanaged copies are effectively leaked.</span></span>  
  
 <span data-ttu-id="68c54-1830">使用するため、全体的なパターン<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A>のとおりです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1830">The overall pattern for using <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> is as follows:</span></span>  
  
1.  <span data-ttu-id="68c54-1831">最初の呼び出しで、<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A>後に、メモリ ブロックが割り当て済み、`fDeleteOld`必要があります`false`をクリアする内容がないため、します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1831">On the first call to the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method after a memory block has been allocated, `fDeleteOld` must be `false`, because there are no contents to clear.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="68c54-1832">指定`true`の`fDeleteOld`ブロックには、有効なデータが含まれている場合のみです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1832">Specify `true` for `fDeleteOld` only if the block contains valid data.</span></span>  
  
2.  <span data-ttu-id="68c54-1833">メモリ ブロックを別のインスタンスをコピーして、オブジェクトが、参照型を含む場合`fDeleteOld`必要があります`true`古い内容の種類の参照を解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1833">If you copy a different instance to the memory block, and the object contains reference types, `fDeleteOld` must be `true` to free reference types in the old contents.</span></span>  
  
3.  <span data-ttu-id="68c54-1834">呼び出す必要があるオブジェクトに参照型が含まれている場合、<xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A>メソッド メモリ ブロックを解放する前にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1834">If the object contains reference types, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> method before you free the memory block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="68c54-1835">コピーすることではなく、既存の構造をピン留めするには、使用、<xref:System.Runtime.InteropServices.GCHandle?displayProperty=nameWithType>構造の固定ハンドルを作成する型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1835">To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=nameWithType> type to create a pinned handle for the structure.</span></span> <span data-ttu-id="68c54-1836">ピン留めする方法の詳細については、次を参照してください。[コピーと固定](~/docs/framework/interop/copying-and-pinning.md)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1836">For details on how to pin, see [Copying and Pinning](~/docs/framework/interop/copying-and-pinning.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1837">次の例では、マネージ構造体を作成し、アンマネージ メモリを使用してに転送、<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A>メソッド、およびマネージ メモリを使用して、再度、転送、<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1837">The following example creates a managed structure, transfers it to unmanaged memory using the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method, and then transfers it back to managed memory using the <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> method.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1838"><paramref name="structure" /> は書式指定クラスではない参照型です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1838"><paramref name="structure" /> is a reference type that is not a formatted class.</span></span>  
  
<span data-ttu-id="68c54-1839">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1839">-or-</span></span> 
 <span data-ttu-id="68c54-1840"><paramref name="structure" /> がジェネリック型のインスタンスです (.NET Framework 4.5 以前のバージョンのみ)</span><span class="sxs-lookup"><span data-stu-id="68c54-1840"><paramref name="structure" /> is an instance of a generic type (in the .NET Framework 4.5 and earlier versions only).</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1841">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1841">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1842">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1842">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" />
        <altmember cref="T:System.Runtime.InteropServices.GCHandle" />
      </Docs>
    </Member>
    <Member MemberName="StructureToPtr&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void StructureToPtr&lt;T&gt; (T structure, IntPtr ptr, bool fDeleteOld);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StructureToPtr&lt;T&gt;(!!T structure, native int ptr, bool fDeleteOld) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StructureToPtr(Of T) (structure As T, ptr As IntPtr, fDeleteOld As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void StructureToPtr(T structure, IntPtr ptr, bool fDeleteOld);" />
      <MemberSignature Language="F#" Value="static member StructureToPtr : 'T * nativeint * bool -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.StructureToPtr (structure, ptr, fDeleteOld)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="structure" Type="T" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ptr" Type="System.IntPtr" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="fDeleteOld" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="68c54-1843">マネージド オブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1843">The type of the managed object.</span></span></typeparam>
        <param name="structure"><span data-ttu-id="68c54-1844">マーシャリングするデータを保持すマネージド オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-1844">A managed object that holds the data to be marshaled.</span></span> <span data-ttu-id="68c54-1845">オブジェクトは、書式指定クラスの構造体またはインスタンスである必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1845">The object must be a structure or an instance of a formatted class.</span></span></param>
        <param name="ptr"><span data-ttu-id="68c54-1846">このメソッドを呼び出す前に割り当てる必要があるアンマネージ メモリ ブロックへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1846">A pointer to an unmanaged block of memory, which must be allocated before this method is called.</span></span></param>
        <param name="fDeleteOld"><span data-ttu-id="68c54-1847">このメソッドがデータをコピーする前に、<paramref name="ptr" /> パラメーターに対して <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> メソッドを呼び出す場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="68c54-1847"><see langword="true" /> to call the <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> method on the <paramref name="ptr" /> parameter before this method copies the data.</span></span> <span data-ttu-id="68c54-1848">ブロックには有効なデータを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1848">The block must contain valid data.</span></span> <span data-ttu-id="68c54-1849">メモリ ブロックに既にデータが格納されているときに <see langword="false" /> を渡すと、メモリ リークが発生する可能性があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="68c54-1849">Note that passing <see langword="false" /> when the memory block already contains data can lead to a memory leak.</span></span></param>
        <summary><span data-ttu-id="68c54-1850">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-1850">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-1851">指定した型のマネージド オブジェクトから、アンマネージド メモリ ブロックにデータをマーシャリングします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1851">Marshals data from a managed object of a specified type to an unmanaged block of memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1852">書式設定されたクラスは、レイアウトを持つがで指定された参照型、<xref:System.Runtime.InteropServices.StructLayoutAttribute>属性は、いずれかとして<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>または<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1852">A formatted class is a reference type whose layout is specified by the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute, as either <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> or <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="68c54-1853"><xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> 内容をコピー `structure` 、事前に割り当てられたメモリ ブロックにする、`ptr`パラメーターを指します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1853"><xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> copies the contents of `structure` to the pre-allocated block of memory that the `ptr` parameter points to.</span></span> <span data-ttu-id="68c54-1854">場合`structure`COM インターフェイス ポインターをマーシャ リングする参照型が含まれています (インターフェイス、レイアウト、なしのクラスと<xref:System.Object?displayProperty=nameWithType>)、管理対象のオブジェクトは、参照カウントが維持されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1854">If `structure` contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <xref:System.Object?displayProperty=nameWithType>), the managed objects are kept alive with reference counts.</span></span> <span data-ttu-id="68c54-1855">すべての他の参照型 (文字列、配列など) は、コピーにマーシャ リングされます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1855">All other reference types (for example, strings and arrays) are marshaled to copies.</span></span> <span data-ttu-id="68c54-1856">これらのマネージまたはアンマネージ オブジェクトを解放するには、呼び出す必要がある、<xref:System.Runtime.InteropServices.Marshal.DestroyStructure%60%601%28System.IntPtr%29>メソッド メモリ ブロックを解放する前にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1856">To release these managed or unmanaged objects, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%60%601%28System.IntPtr%29> method before you free the memory block.</span></span>  
  
 <span data-ttu-id="68c54-1857">使用する場合、<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29>は後で別のインスタンスをメモリ ブロックにコピーする方法を指定する`true`の`fDeleteOld`参照を削除する参照型の前のインスタンスでカウントされます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1857">If you use the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> method to copy a different instance to the memory block at a later time, specify `true` for `fDeleteOld` to remove reference counts for reference types in the previous instance.</span></span> <span data-ttu-id="68c54-1858">それ以外の場合、マネージ参照型と非管理対象のコピーがリーク効果的にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1858">Otherwise, the managed reference types and unmanaged copies are effectively leaked.</span></span>  
  
 <span data-ttu-id="68c54-1859">使用するため、全体的なパターン<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29>のとおりです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1859">The overall pattern for using <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> is as follows:</span></span>  
  
1.  <span data-ttu-id="68c54-1860">最初の呼び出しで、<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A>後に、メモリ ブロックが割り当て済み、`fDeleteOld`必要があります`false`をクリアする内容がないため、します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1860">On the first call to the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method after a memory block has been allocated, `fDeleteOld` must be `false`, because there are no contents to clear.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="68c54-1861">指定`true`の`fDeleteOld`ブロックには、有効なデータが含まれている場合のみです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1861">Specify `true` for `fDeleteOld` only if the block contains valid data.</span></span>  
  
2.  <span data-ttu-id="68c54-1862">メモリ ブロックを別のインスタンスをコピーして、オブジェクトが、参照型を含む場合`fDeleteOld`必要があります`true`古い内容の種類の参照を解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1862">If you copy a different instance to the memory block, and the object contains reference types, `fDeleteOld` must be `true` to free reference types in the old contents.</span></span>  
  
3.  <span data-ttu-id="68c54-1863">呼び出す必要があるオブジェクトに参照型が含まれている場合、<xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A>メソッド メモリ ブロックを解放する前にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1863">If the object contains reference types, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> method before you free the memory block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="68c54-1864">コピーすることではなく、既存の構造をピン留めするには、使用、<xref:System.Runtime.InteropServices.GCHandle?displayProperty=nameWithType>構造の固定ハンドルを作成する型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1864">To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=nameWithType> type to create a pinned handle for the structure.</span></span> <span data-ttu-id="68c54-1865">ピン留めする方法の詳細については、次を参照してください。[コピーと固定](~/docs/framework/interop/copying-and-pinning.md)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1865">For details on how to pin, see [Copying and Pinning](~/docs/framework/interop/copying-and-pinning.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1866"><paramref name="structure" /> は書式指定クラスではない参照型です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1866"><paramref name="structure" /> is a reference type that is not a formatted class.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1867">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1867">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1868">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1868">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" />
        <altmember cref="T:System.Runtime.InteropServices.GCHandle" />
      </Docs>
    </Member>
    <Member MemberName="SystemDefaultCharSize">
      <MemberSignature Language="C#" Value="public static readonly int SystemDefaultCharSize;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 SystemDefaultCharSize" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SystemDefaultCharSize As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly int SystemDefaultCharSize;" />
      <MemberSignature Language="F#" Value=" staticval mutable SystemDefaultCharSize : int" Usage="System.Runtime.InteropServices.Marshal.SystemDefaultCharSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c54-1869">システムの既定の文字サイズを表します。Unicode システムの既定の文字サイズは 2 で、ANSI システムの場合は 1 です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1869">Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems.</span></span> <span data-ttu-id="68c54-1870">このフィールドは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1870">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="68c54-1871">次の例で、<xref:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize>フィールド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1871">The following example demonstrates the <xref:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize> field.</span></span> <span data-ttu-id="68c54-1872">このコード例が示されている例の一部、<xref:System.Runtime.InteropServices.Marshal>クラス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1872">This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.</span></span>  
  
 [!code-cpp[Marshal#2](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#2)]
 [!code-csharp[Marshal#2](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#2)]
 [!code-vb[Marshal#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SystemMaxDBCSCharSize">
      <MemberSignature Language="C#" Value="public static readonly int SystemMaxDBCSCharSize;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 SystemMaxDBCSCharSize" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SystemMaxDBCSCharSize As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly int SystemMaxDBCSCharSize;" />
      <MemberSignature Language="F#" Value=" staticval mutable SystemMaxDBCSCharSize : int" Usage="System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68c54-1873">現在のオペレーティング システムでの 2 バイト文字セット (DBCS) サイズの上限をバイト単位で表します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1873">Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system.</span></span> <span data-ttu-id="68c54-1874">このフィールドは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1874">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="68c54-1875">次の例で、<xref:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize>フィールド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1875">The following example demonstrates the <xref:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize> field.</span></span> <span data-ttu-id="68c54-1876">このコード例が示されている例の一部、<xref:System.Runtime.InteropServices.Marshal>クラス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1876">This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.</span></span>  
  
 [!code-cpp[Marshal#2](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#2)]
 [!code-csharp[Marshal#2](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#2)]
 [!code-vb[Marshal#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ThrowExceptionForHR">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1877">特定の失敗 HRESULT 値を使用して例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1877">Throws an exception with a specific failure HRESULT value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThrowExceptionForHR">
      <MemberSignature Language="C#" Value="public static void ThrowExceptionForHR (int errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ThrowExceptionForHR(int32 errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ThrowExceptionForHR (errorCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ThrowExceptionForHR(int errorCode);" />
      <MemberSignature Language="F#" Value="static member ThrowExceptionForHR : int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.ThrowExceptionForHR errorCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="errorCode"><span data-ttu-id="68c54-1878">必要な例外に対応する HRESULT。</span><span class="sxs-lookup"><span data-stu-id="68c54-1878">The HRESULT corresponding to the desired exception.</span></span></param>
        <summary><span data-ttu-id="68c54-1879">特定の失敗 HRESULT 値を使用して例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1879">Throws an exception with a specific failure HRESULT value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1880">このメソッドは、指定したエラーの HRESULT の例外オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1880">This method creates an exception object for the specified failure HRESULT.</span></span> <span data-ttu-id="68c54-1881">HRESULT が 0 または正の値 (成功コード) の場合は、メソッドを作成したり、例外をスローせずに返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1881">If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.</span></span>  
  
 <span data-ttu-id="68c54-1882">なお、<xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%28System.Int32%29>に基づいて例外を返します、 [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx)が設定されている場合は、現在のスレッドのインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1882">Note that the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%28System.Int32%29> method returns an exception based on the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) interface of the current thread if one is set.</span></span> <span data-ttu-id="68c54-1883">この場合、`errorCode`パラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1883">When this happens, the `errorCode` parameter is ignored.</span></span>  
  
 <span data-ttu-id="68c54-1884">いくつかのエラー Hresult は、定義済みの例外にマップしないもの。</span><span class="sxs-lookup"><span data-stu-id="68c54-1884">Some failure HRESULTs map to defined exceptions, whereas others do not.</span></span> <span data-ttu-id="68c54-1885">HRESULT は、定義済みの例外にマップされている場合<xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>例外のインスタンスを作成し、それをスローします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1885">If the HRESULT maps to a defined exception, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> creates an instance of the exception and throws it.</span></span> <span data-ttu-id="68c54-1886">インスタンスを作成する場合は、 <xref:System.Runtime.InteropServices.COMException>hresult エラー コードのフィールドを初期化し、その例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1886">Otherwise, it creates an instance of <xref:System.Runtime.InteropServices.COMException>, initializes the error code field with the HRESULT, and throws that exception.</span></span> <span data-ttu-id="68c54-1887">ときに<xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>は、管理されていないを使用して、エラーに関する追加情報の取得を試みますが呼び出される[GetErrorInfo](https://msdn.microsoft.com/library/ms221032\(v=vs.85\).aspx)関数。</span><span class="sxs-lookup"><span data-stu-id="68c54-1887">When <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> is invoked, it attempts to retrieve extra information regarding the error by using the unmanaged [GetErrorInfo](https://msdn.microsoft.com/library/ms221032\(v=vs.85\).aspx) function.</span></span>  
  
 <span data-ttu-id="68c54-1888">各 HRESULT から .NET Framework では、その同等の例外クラスへのマッピングを参照してください。[方法。Hresult に例外](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1888">For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).</span></span>  
  
 <span data-ttu-id="68c54-1889">場合によっては、<xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>前の COM 呼び出しから例外を返す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="68c54-1889">Occasionally, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> might return an exception from a previous COM call.</span></span> <span data-ttu-id="68c54-1890">この場合は、次の回避策を使用し、渡す`IntPtr(-1)`2 番目のパラメーター (`errorInfo`)。</span><span class="sxs-lookup"><span data-stu-id="68c54-1890">In this case, you can use the following workaround and pass `IntPtr(-1)` as the second parameter (`errorInfo`):</span></span>  
  
```  
[SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]  
public static void ThrowExceptionForHR(interrorCode,IntPtrerrorInfo)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1891">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1891">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1892">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1892">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.InteropServices.COMException" />
      </Docs>
    </Member>
    <Member MemberName="ThrowExceptionForHR">
      <MemberSignature Language="C#" Value="public static void ThrowExceptionForHR (int errorCode, IntPtr errorInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ThrowExceptionForHR(int32 errorCode, native int errorInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ThrowExceptionForHR (errorCode As Integer, errorInfo As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ThrowExceptionForHR(int errorCode, IntPtr errorInfo);" />
      <MemberSignature Language="F#" Value="static member ThrowExceptionForHR : int * nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.ThrowExceptionForHR (errorCode, errorInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorCode" Type="System.Int32" />
        <Parameter Name="errorInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="errorCode"><span data-ttu-id="68c54-1893">必要な例外に対応する HRESULT。</span><span class="sxs-lookup"><span data-stu-id="68c54-1893">The HRESULT corresponding to the desired exception.</span></span></param>
        <param name="errorInfo"><span data-ttu-id="68c54-1894">エラーの詳細情報を提供する [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) インターフェイスへのポインター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1894">A pointer to the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) interface that provides more information about the error.</span></span> <span data-ttu-id="68c54-1895"><c>IntPtr(0)</c> を指定すると、現在の [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) インターフェイスを使用できます。また <c>IntPtr(-1)</c> を指定すると、現在の [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) インターフェイスを無視して、エラー コードだけを使用して例外を作成できます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1895">You can specify <c>IntPtr(0)</c> to use the current [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) interface, or <c>IntPtr(-1)</c> to ignore the current [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) interface and construct the exception just from the error code.</span></span></param>
        <summary><span data-ttu-id="68c54-1896">指定した <see href="https://msdn.microsoft.com/library/ms221233\(v=vs.85\">IErrorInfo</see>.aspx) インターフェイスに基づいて、特定のエラー HRESULT を含む例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1896">Throws an exception with a specific failure HRESULT, based on the specified <see href="https://msdn.microsoft.com/library/ms221233\(v=vs.85\">IErrorInfo</see>.aspx) interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1897">このメソッドは、指定したエラーの HRESULT の例外オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1897">This method creates an exception object for the specified failure HRESULT.</span></span> <span data-ttu-id="68c54-1898">HRESULT が 0 または正の値 (成功コード) の場合は、メソッドを作成したり、例外をスローせずに返します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1898">If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.</span></span>  
  
 <span data-ttu-id="68c54-1899"><xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>メソッド リリース、`errorInfo`パラメーター、減少、COM 参照の数、 [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx)インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1899">The <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method releases the `errorInfo` parameter, decreasing the COM reference count of the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) interface.</span></span>  
  
 <span data-ttu-id="68c54-1900">なお、<xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>に基づいて例外を返します、 [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx)が設定されている場合は、現在のスレッドのインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1900">Note that the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method returns an exception based on the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) interface of the current thread if one is set.</span></span> <span data-ttu-id="68c54-1901">この場合、`errorCode`パラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1901">When this happens, the `errorCode` parameter is ignored.</span></span>  
  
 <span data-ttu-id="68c54-1902">いくつかのエラー Hresult は、定義済みの例外にマップしないもの。</span><span class="sxs-lookup"><span data-stu-id="68c54-1902">Some failure HRESULTs map to defined exceptions, whereas others do not.</span></span> <span data-ttu-id="68c54-1903">HRESULT は、定義済みの例外にマップされている場合<xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>例外のインスタンスを作成し、それをスローします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1903">If the HRESULT maps to a defined exception, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> creates an instance of the exception and throws it.</span></span> <span data-ttu-id="68c54-1904">インスタンスを作成する場合は、 <xref:System.Runtime.InteropServices.COMException?displayProperty=nameWithType>hresult エラー コードのフィールドを初期化し、その例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1904">Otherwise, it creates an instance of <xref:System.Runtime.InteropServices.COMException?displayProperty=nameWithType>, initializes the error code field with the HRESULT, and throws that exception.</span></span> <span data-ttu-id="68c54-1905">`errorInfo`パラメーターは、エラーに関する追加情報を取得するために使用します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1905">The `errorInfo` parameter is used to retrieve extra information regarding the error.</span></span>  
  
 <span data-ttu-id="68c54-1906">各 HRESULT から .NET Framework では、その同等の例外クラスへのマッピングを参照してください。[方法。Hresult に例外](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1906">For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1907">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1907">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1908">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1908">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.InteropServices.COMException" />
      </Docs>
    </Member>
    <Member MemberName="UnsafeAddrOfPinnedArrayElement">
      <MemberSignature Language="C#" Value="public static IntPtr UnsafeAddrOfPinnedArrayElement (Array arr, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int UnsafeAddrOfPinnedArrayElement(class System.Array arr, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeAddrOfPinnedArrayElement (arr As Array, index As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr UnsafeAddrOfPinnedArrayElement(Array ^ arr, int index);" />
      <MemberSignature Language="F#" Value="static member UnsafeAddrOfPinnedArrayElement : Array * int -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement (arr, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("UnsafeAddrOfPinnedArrayElement(Array, Int32) may be unavailable in future releases. Instead, use UnsafeAddrOfPinnedArrayElement&lt;T&gt;(T[], Int32). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296517")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arr" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arr"><span data-ttu-id="68c54-1909">目的の要素を格納している配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-1909">The array that contains the desired element.</span></span></param>
        <param name="index"><span data-ttu-id="68c54-1910">内のインデックス、<paramref name="arr" />目的の要素のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1910">The index in the <paramref name="arr" /> parameter of the desired element.</span></span></param>
        <summary><span data-ttu-id="68c54-1911">指定した配列内の、指定したインデックス位置にある要素のアドレスを取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1911">Gets the address of the element at the specified index inside the specified array.</span></span></summary>
        <returns><span data-ttu-id="68c54-1912"><paramref name="arr" /> 内の <paramref name="index" /> のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1912">The address of <paramref name="index" /> inside <paramref name="arr" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1913">使用して、配列を固定する必要があります、<xref:System.Runtime.InteropServices.GCHandle>前に、このメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1913">The array must be pinned using a <xref:System.Runtime.InteropServices.GCHandle> before it is passed to this method.</span></span> <span data-ttu-id="68c54-1914">パフォーマンスを最大にするには、このメソッドは検証されません。 渡された配列その結果、予期しない動作。</span><span class="sxs-lookup"><span data-stu-id="68c54-1914">For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1915">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1915">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1916">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1916">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.InteropServices.GCHandle" />
      </Docs>
    </Member>
    <Member MemberName="UnsafeAddrOfPinnedArrayElement&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr UnsafeAddrOfPinnedArrayElement&lt;T&gt; (T[] arr, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int UnsafeAddrOfPinnedArrayElement&lt;T&gt;(!!T[] arr, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeAddrOfPinnedArrayElement(Of T) (arr As T(), index As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static IntPtr UnsafeAddrOfPinnedArrayElement(cli::array &lt;T&gt; ^ arr, int index);" />
      <MemberSignature Language="F#" Value="static member UnsafeAddrOfPinnedArrayElement : 'T[] * int -&gt; nativeint" Usage="System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement (arr, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="arr" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="68c54-1917">配列の型。</span><span class="sxs-lookup"><span data-stu-id="68c54-1917">The type of the array.</span></span></typeparam>
        <param name="arr"><span data-ttu-id="68c54-1918">目的の要素を格納している配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-1918">The array that contains the desired element.</span></span></param>
        <param name="index"><span data-ttu-id="68c54-1919">目的の要素のインデックス、<paramref name="arr" />配列。</span><span class="sxs-lookup"><span data-stu-id="68c54-1919">The index of the desired element in the <paramref name="arr" /> array.</span></span></param>
        <summary><span data-ttu-id="68c54-1920">[.NET Framework 4.5.1 以降のバージョンでサポート]</span><span class="sxs-lookup"><span data-stu-id="68c54-1920">[Supported in the .NET Framework 4.5.1 and later versions]</span></span> 
<span data-ttu-id="68c54-1921">指定された型の配列内の、指定したインデックス位置にある要素のアドレスを取得します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1921">Gets the address of the element at the specified index in an array of a specified type.</span></span></summary>
        <returns><span data-ttu-id="68c54-1922"><paramref name="arr" /> 内の <paramref name="index" /> のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1922">The address of <paramref name="index" /> in <paramref name="arr" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1923">使用して、配列を固定する必要があります、<xref:System.Runtime.InteropServices.GCHandle>前に、このメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1923">The array must be pinned by using a <xref:System.Runtime.InteropServices.GCHandle> before it is passed to this method.</span></span> <span data-ttu-id="68c54-1924">パフォーマンスを最大にするには、このメソッドは検証されません。 渡された配列その結果、予期しない動作。</span><span class="sxs-lookup"><span data-stu-id="68c54-1924">For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1925">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1925">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1926">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1926">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.InteropServices.GCHandle" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteByte">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1927">1 バイト値をアンマネージ メモリに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1927">Writes a single byte value to unmanaged memory.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public static void WriteByte (IntPtr ptr, byte val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteByte(native int ptr, unsigned int8 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteByte (ptr As IntPtr, val As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteByte(IntPtr ptr, System::Byte val);" />
      <MemberSignature Language="F#" Value="static member WriteByte : nativeint * byte -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteByte (ptr, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="val" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1928">書き込み先となるアンマネージ メモリ内のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1928">The address in unmanaged memory to write to.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-1929">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1929">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-1930">1 バイト値をアンマネージ メモリに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1930">Writes a single byte value to unmanaged memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1931"><xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> により直接アンマネージ配列全体のコピーのコストが削減、アンマネージ C スタイルのバイト配列との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1931"><xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1932">次の例は、アンマネージ メモリ ブロックを作成、アンマネージ メモリにバイトを書き込みます化し、アンマネージ メモリからのバイトを読み取りますをアンマネージ メモリを破棄します。</span><span class="sxs-lookup"><span data-stu-id="68c54-1932">The following example creates a block of unmanaged memory, writes a byte to the unmanaged memory, reads the byte back from unmanaged memory, and then disposes the unmanaged memory.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.ReadByte - WriteByte#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.ReadByte - WriteByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1933"><paramref name="ptr" /> が認識された形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1933"><paramref name="ptr" /> is not a recognized format.</span></span>  
  
<span data-ttu-id="68c54-1934">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1934">-or-</span></span> 
 <span data-ttu-id="68c54-1935"><paramref name="ptr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1935"><paramref name="ptr" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-1936">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1936">-or-</span></span> 
 <span data-ttu-id="68c54-1937"><paramref name="ptr" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1937"><paramref name="ptr" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1938">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1938">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1939">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1939">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public static void WriteByte (IntPtr ptr, int ofs, byte val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteByte(native int ptr, int32 ofs, unsigned int8 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteByte (ptr As IntPtr, ofs As Integer, val As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteByte(IntPtr ptr, int ofs, System::Byte val);" />
      <MemberSignature Language="F#" Value="static member WriteByte : nativeint * int * byte -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteByte (ptr, ofs, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1940">書き込み先となるアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1940">The base address in unmanaged memory to write to.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-1941">追加される、追加のバイト オフセット、<paramref name="ptr" />書き込みの前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1941">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-1942">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1942">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-1943">1 バイトをアンマネージ メモリの指定されたオフセット位置に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1943">Writes a single byte value to unmanaged memory at a specified offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1944"><xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> により直接アンマネージ配列全体のコピーのコストが削減、アンマネージ C スタイルのバイト配列との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1944"><xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1945">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteByte%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1945">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#3)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1946">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1946">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1947">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1947">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1948">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1948">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public static void WriteByte (object ptr, int ofs, byte val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteByte([out] object ptr, int32 ofs, unsigned int8 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteByte (ptr As Object, ofs As Integer, val As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteByte(System::Object ^ ptr, int ofs, System::Byte val);" />
      <MemberSignature Language="F#" Value="static member WriteByte : obj * int * byte -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteByte (ptr, ofs, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("WriteByte(Object, Int32, Byte) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1949">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1949">The base address in unmanaged memory of the target object.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-1950">追加される、追加のバイト オフセット、<paramref name="ptr" />書き込みの前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1950">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-1951">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1951">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-1952">1 バイトをアンマネージ メモリの指定されたオフセット位置に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1952">Writes a single byte value to unmanaged memory at a specified offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1953"><xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> により直接アンマネージ配列全体のコピーのコストが削減、アンマネージ C スタイルのバイト配列との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1953"><xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1954">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1954">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-1955"><paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="68c54-1955"><paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object.</span></span> <span data-ttu-id="68c54-1956">このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1956">This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1957">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1957">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1958">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1958">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteInt16">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-1959">アンマネージ メモリに 16 ビット符号付き整数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1959">Writes a 16-bit signed integer value to unmanaged memory.</span></span> <span data-ttu-id="68c54-1960">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1960">Writing to unaligned memory locations is supported.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteInt16">
      <MemberSignature Language="C#" Value="public static void WriteInt16 (IntPtr ptr, char val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt16(native int ptr, char val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt16 (ptr As IntPtr, val As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt16(IntPtr ptr, char val);" />
      <MemberSignature Language="F#" Value="static member WriteInt16 : nativeint * char -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteInt16 (ptr, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="val" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1961">書き込み先となるアンマネージ メモリ内のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1961">The address in unmanaged memory to write to.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-1962">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1962">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-1963">文字を 16 ビット整数としてアンマネージ メモリに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1963">Writes a character as a 16-bit integer value to unmanaged memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1964"><xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> 有効とは直接やり取りアンマネージ 16 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1964"><xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-1965">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1965">Writing to unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1966">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1966">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1967"><paramref name="ptr" /> が認識された形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1967"><paramref name="ptr" /> is not a recognized format.</span></span>  
  
<span data-ttu-id="68c54-1968">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1968">-or-</span></span> 
 <span data-ttu-id="68c54-1969"><paramref name="ptr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1969"><paramref name="ptr" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-1970">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1970">-or-</span></span> 
 <span data-ttu-id="68c54-1971"><paramref name="ptr" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1971"><paramref name="ptr" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1972">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1972">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1973">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1973">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt16">
      <MemberSignature Language="C#" Value="public static void WriteInt16 (IntPtr ptr, short val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt16(native int ptr, int16 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt16 (ptr As IntPtr, val As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt16(IntPtr ptr, short val);" />
      <MemberSignature Language="F#" Value="static member WriteInt16 : nativeint * int16 -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteInt16 (ptr, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="val" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1974">書き込み先となるアンマネージ メモリ内のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1974">The address in unmanaged memory to write to.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-1975">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1975">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-1976">アンマネージ メモリに 16 ビット整数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1976">Writes a 16-bit integer value to unmanaged memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1977"><xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> 有効とは直接やり取りアンマネージ 16 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1977"><xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-1978">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1978">Writing to unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1979">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1979">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1980"><paramref name="ptr" /> が認識された形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1980"><paramref name="ptr" /> is not a recognized format.</span></span>  
  
<span data-ttu-id="68c54-1981">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1981">-or-</span></span> 
 <span data-ttu-id="68c54-1982"><paramref name="ptr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1982"><paramref name="ptr" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-1983">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-1983">-or-</span></span> 
 <span data-ttu-id="68c54-1984"><paramref name="ptr" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1984"><paramref name="ptr" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1985">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1985">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1986">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1986">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt16">
      <MemberSignature Language="C#" Value="public static void WriteInt16 (IntPtr ptr, int ofs, char val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt16(native int ptr, int32 ofs, char val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt16 (ptr As IntPtr, ofs As Integer, val As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt16(IntPtr ptr, int ofs, char val);" />
      <MemberSignature Language="F#" Value="static member WriteInt16 : nativeint * int * char -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteInt16 (ptr, ofs, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1987">書き込み先となるネイティブ ヒープ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1987">The base address in the native heap to write to.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-1988">追加される、追加のバイト オフセット、<paramref name="ptr" />書き込みの前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1988">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-1989">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1989">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-1990">16 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1990">Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-1991"><xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> 有効とは直接やり取りアンマネージ 16 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-1991"><xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-1992">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-1992">Writing to unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-1993">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-1993">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-1994">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-1994">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-1995">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-1995">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-1996">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-1996">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt16">
      <MemberSignature Language="C#" Value="public static void WriteInt16 (IntPtr ptr, int ofs, short val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt16(native int ptr, int32 ofs, int16 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt16 (ptr As IntPtr, ofs As Integer, val As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt16(IntPtr ptr, int ofs, short val);" />
      <MemberSignature Language="F#" Value="static member WriteInt16 : nativeint * int * int16 -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteInt16 (ptr, ofs, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-1997">書き込み先となるアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-1997">The base address in unmanaged memory to write to.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-1998">追加される、追加のバイト オフセット、<paramref name="ptr" />書き込みの前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-1998">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-1999">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-1999">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-2000">16 ビット符号付き整数をアンマネージ メモリの指定されたオフセット位置に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2000">Writes a 16-bit signed integer value into unmanaged memory at a specified offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2001"><xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> 有効とは直接やり取りアンマネージ 16 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-2001"><xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-2002">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2002">Writing to unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-2003">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-2003">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-2004">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2004">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2005">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2005">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2006">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2006">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt16">
      <MemberSignature Language="C#" Value="public static void WriteInt16 (object ptr, int ofs, char val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt16([out] object ptr, int32 ofs, char val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt16 (ptr As Object, ofs As Integer, val As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt16(System::Object ^ ptr, int ofs, char val);" />
      <MemberSignature Language="F#" Value="static member WriteInt16 : obj * int * char -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteInt16 (ptr, ofs, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("WriteInt16(Object, Int32, Char) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-2007">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2007">The base address in unmanaged memory of the target object.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-2008">追加される、追加のバイト オフセット、<paramref name="ptr" />書き込みの前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-2008">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-2009">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-2009">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-2010">16 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2010">Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2011"><xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> 有効とは直接やり取りアンマネージ 16 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-2011"><xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-2012">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2012">Writing to unaligned memory locations is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-2013">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2013">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-2014"><paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="68c54-2014"><paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object.</span></span> <span data-ttu-id="68c54-2015">このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2015">This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2016">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2016">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2017">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2017">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt16">
      <MemberSignature Language="C#" Value="public static void WriteInt16 (object ptr, int ofs, short val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt16([out] object ptr, int32 ofs, int16 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt16 (ptr As Object, ofs As Integer, val As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt16(System::Object ^ ptr, int ofs, short val);" />
      <MemberSignature Language="F#" Value="static member WriteInt16 : obj * int * int16 -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteInt16 (ptr, ofs, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("WriteInt16(Object, Int32, Int16) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-2018">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2018">The base address in unmanaged memory of the target object.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-2019">追加される、追加のバイト オフセット、<paramref name="ptr" />書き込みの前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-2019">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-2020">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-2020">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-2021">16 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2021">Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2022"><xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> 有効とは直接やり取りアンマネージ 16 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-2022"><xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-2023">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2023">Writing to unaligned memory locations is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-2024">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2024">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-2025"><paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="68c54-2025"><paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object.</span></span> <span data-ttu-id="68c54-2026">このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2026">This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2027">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2027">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2028">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2028">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteInt32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-2029">アンマネージ メモリに 32 ビット符号付き整数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2029">Writes a 32-bit signed integer value to unmanaged memory.</span></span> <span data-ttu-id="68c54-2030">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2030">Writing to unaligned memory locations is supported.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteInt32">
      <MemberSignature Language="C#" Value="public static void WriteInt32 (IntPtr ptr, int val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt32(native int ptr, int32 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt32 (ptr As IntPtr, val As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt32(IntPtr ptr, int val);" />
      <MemberSignature Language="F#" Value="static member WriteInt32 : nativeint * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteInt32 (ptr, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="val" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-2031">書き込み先となるアンマネージ メモリ内のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2031">The address in unmanaged memory to write to.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-2032">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-2032">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-2033">アンマネージ メモリに 32 ビット符号付き整数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2033">Writes a 32-bit signed integer value to unmanaged memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2034"><xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> により直接管理されていない 32 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-2034"><xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-2035">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2035">Writing to unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-2036">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-2036">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-2037"><paramref name="ptr" /> が認識された形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2037"><paramref name="ptr" /> is not a recognized format.</span></span>  
  
<span data-ttu-id="68c54-2038">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-2038">-or-</span></span> 
 <span data-ttu-id="68c54-2039"><paramref name="ptr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2039"><paramref name="ptr" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-2040">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-2040">-or-</span></span> 
 <span data-ttu-id="68c54-2041"><paramref name="ptr" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2041"><paramref name="ptr" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2042">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2042">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2043">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2043">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt32">
      <MemberSignature Language="C#" Value="public static void WriteInt32 (IntPtr ptr, int ofs, int val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt32(native int ptr, int32 ofs, int32 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt32 (ptr As IntPtr, ofs As Integer, val As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt32(IntPtr ptr, int ofs, int val);" />
      <MemberSignature Language="F#" Value="static member WriteInt32 : nativeint * int * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteInt32 (ptr, ofs, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-2044">書き込み先となるアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2044">The base address in unmanaged memory to write to.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-2045">追加される、追加のバイト オフセット、<paramref name="ptr" />書き込みの前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-2045">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-2046">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-2046">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-2047">32 ビット符号付き整数をアンマネージ メモリの指定されたオフセット位置に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2047">Writes a 32-bit signed integer value into unmanaged memory at a specified offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2048"><xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> により直接管理されていない 32 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-2048"><xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-2049">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2049">Writing to unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-2050">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-2050">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-2051">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2051">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2052">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2052">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2053">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2053">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt32">
      <MemberSignature Language="C#" Value="public static void WriteInt32 (object ptr, int ofs, int val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt32([out] object ptr, int32 ofs, int32 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt32 (ptr As Object, ofs As Integer, val As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt32(System::Object ^ ptr, int ofs, int val);" />
      <MemberSignature Language="F#" Value="static member WriteInt32 : obj * int * int -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteInt32 (ptr, ofs, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("WriteInt32(Object, Int32, Int32) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-2054">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2054">The base address in unmanaged memory of the target object.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-2055">追加される、追加のバイト オフセット、<paramref name="ptr" />書き込みの前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-2055">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-2056">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-2056">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-2057">32 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2057">Writes a 32-bit signed integer value to unmanaged memory at a specified offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2058"><xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> により直接管理されていない 32 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-2058"><xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-2059">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2059">Writing to unaligned memory locations is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-2060">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2060">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-2061"><paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="68c54-2061"><paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object.</span></span> <span data-ttu-id="68c54-2062">このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2062">This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2063">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2063">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2064">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2064">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteInt64">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-2065">アンマネージ メモリに 64 ビット符号付き整数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2065">Writes a 64-bit signed integer value to unmanaged memory.</span></span> <span data-ttu-id="68c54-2066">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2066">Writing to unaligned memory locations is supported.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteInt64">
      <MemberSignature Language="C#" Value="public static void WriteInt64 (IntPtr ptr, long val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt64(native int ptr, int64 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt64 (ptr As IntPtr, val As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt64(IntPtr ptr, long val);" />
      <MemberSignature Language="F#" Value="static member WriteInt64 : nativeint * int64 -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteInt64 (ptr, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="val" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-2067">書き込み先となるアンマネージ メモリ内のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2067">The address in unmanaged memory to write to.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-2068">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-2068">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-2069">アンマネージ メモリに 64 ビット符号付き整数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2069">Writes a 64-bit signed integer value to unmanaged memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2070"><xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> により直接管理されていない 64 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-2070"><xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-2071">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2071">Writing to unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-2072">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-2072">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-2073"><paramref name="ptr" /> が認識された形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2073"><paramref name="ptr" /> is not a recognized format.</span></span>  
  
<span data-ttu-id="68c54-2074">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-2074">-or-</span></span> 
 <span data-ttu-id="68c54-2075"><paramref name="ptr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2075"><paramref name="ptr" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-2076">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-2076">-or-</span></span> 
 <span data-ttu-id="68c54-2077"><paramref name="ptr" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2077"><paramref name="ptr" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2078">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2078">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2079">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2079">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt64">
      <MemberSignature Language="C#" Value="public static void WriteInt64 (IntPtr ptr, int ofs, long val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt64(native int ptr, int32 ofs, int64 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt64 (ptr As IntPtr, ofs As Integer, val As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt64(IntPtr ptr, int ofs, long val);" />
      <MemberSignature Language="F#" Value="static member WriteInt64 : nativeint * int * int64 -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteInt64 (ptr, ofs, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-2080">書き込み先となるアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2080">The base address in unmanaged memory to write.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-2081">追加される、追加のバイト オフセット、<paramref name="ptr" />書き込みの前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-2081">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-2082">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-2082">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-2083">64 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2083">Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2084"><xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> により直接管理されていない 64 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-2084"><xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-2085">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2085">Writing to unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-2086">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-2086">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-2087">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2087">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2088">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2088">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2089">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2089">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt64">
      <MemberSignature Language="C#" Value="public static void WriteInt64 (object ptr, int ofs, long val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt64([out] object ptr, int32 ofs, int64 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteInt64 (ptr As Object, ofs As Integer, val As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteInt64(System::Object ^ ptr, int ofs, long val);" />
      <MemberSignature Language="F#" Value="static member WriteInt64 : obj * int * int64 -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteInt64 (ptr, ofs, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("WriteInt64(Object, Int32, Int64) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-2090">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2090">The base address in unmanaged memory of the target object.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-2091">追加される、追加のバイト オフセット、<paramref name="ptr" />書き込みの前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-2091">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-2092">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-2092">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-2093">64 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2093">Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2094"><xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> により直接管理されていない 64 ビット符号付き、配列のアンマネージ配列全体のコピーのコストが削減との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-2094"><xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-2095">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2095">Writing to unaligned memory locations is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-2096">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2096">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-2097"><paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="68c54-2097"><paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object.</span></span> <span data-ttu-id="68c54-2098">このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2098">This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2099">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2099">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2100">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2100">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteIntPtr">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68c54-2101">アンマネージ メモリにプロセッサ ネイティブ サイズの整数値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2101">Writes a processor native-sized integer value to unmanaged memory.</span></span> <span data-ttu-id="68c54-2102">32 ビット システム上では 32 ビット整数が書き込まれ、64 ビット システム上では 64 ビット整数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2102">32-bit integers are written on 32-bit systems, and 64-bit integers are written on 64-bit systems.</span></span> <span data-ttu-id="68c54-2103">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2103">Writing to unaligned memory locations is supported.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteIntPtr">
      <MemberSignature Language="C#" Value="public static void WriteIntPtr (IntPtr ptr, IntPtr val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIntPtr(native int ptr, native int val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIntPtr (ptr As IntPtr, val As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIntPtr(IntPtr ptr, IntPtr val);" />
      <MemberSignature Language="F#" Value="static member WriteIntPtr : nativeint * nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteIntPtr (ptr, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="val" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-2104">書き込み先となるアンマネージ メモリ内のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2104">The address in unmanaged memory to write to.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-2105">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-2105">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-2106">アンマネージ メモリにプロセッサ ネイティブ サイズの整数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2106">Writes a processor native sized integer value into unmanaged memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2107"><xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> 有効とは直接やり取りアンマネージ C スタイル`IntPtr`アンマネージ配列全体のコピーのコストが削減配列 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>)、要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-2107"><xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-2108">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2108">Writing to unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-2109">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-2109">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-2110"><paramref name="ptr" /> が認識された形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2110"><paramref name="ptr" /> is not a recognized format.</span></span>  
  
<span data-ttu-id="68c54-2111">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-2111">-or-</span></span> 
 <span data-ttu-id="68c54-2112"><paramref name="ptr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2112"><paramref name="ptr" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="68c54-2113">- または -</span><span class="sxs-lookup"><span data-stu-id="68c54-2113">-or-</span></span> 
 <span data-ttu-id="68c54-2114"><paramref name="ptr" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2114"><paramref name="ptr" /> is invalid.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2115">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2115">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2116">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2116">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteIntPtr">
      <MemberSignature Language="C#" Value="public static void WriteIntPtr (IntPtr ptr, int ofs, IntPtr val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIntPtr(native int ptr, int32 ofs, native int val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIntPtr (ptr As IntPtr, ofs As Integer, val As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIntPtr(IntPtr ptr, int ofs, IntPtr val);" />
      <MemberSignature Language="F#" Value="static member WriteIntPtr : nativeint * int * nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteIntPtr (ptr, ofs, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-2117">書き込み先となるアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2117">The base address in unmanaged memory to write to.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-2118">追加される、追加のバイト オフセット、<paramref name="ptr" />書き込みの前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-2118">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-2119">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-2119">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-2120">アンマネージ メモリの指定されたオフセット位置にプロセッサ ネイティブ サイズの整数値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2120">Writes a processor native-sized integer value to unmanaged memory at a specified offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2121">このメソッドは、32 ビット システム、および 64 ビット システムで 64 ビットの整数で、32 ビット整数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2121">This method writes a 32 bit integer on 32 bit systems, and a 64 bit integer on 64 bit systems.</span></span>  
  
 <span data-ttu-id="68c54-2122"><xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> 有効とは直接やり取りアンマネージ C スタイル`IntPtr`アンマネージ配列全体のコピーのコストが削減配列 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>)、要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-2122"><xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-2123">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2123">Writing to unaligned memory locations is supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-2124">次の例では、読み取りし、書き込みを使用して、アンマネージ配列する方法、<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-2124">The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> methods.</span></span>  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-2125">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2125">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2126">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2126">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2127">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2127">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)" />
      </Docs>
    </Member>
    <Member MemberName="WriteIntPtr">
      <MemberSignature Language="C#" Value="public static void WriteIntPtr (object ptr, int ofs, IntPtr val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIntPtr([out] object ptr, int32 ofs, native int val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIntPtr (ptr As Object, ofs As Integer, val As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIntPtr(System::Object ^ ptr, int ofs, IntPtr val);" />
      <MemberSignature Language="F#" Value="static member WriteIntPtr : obj * int * nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.WriteIntPtr (ptr, ofs, val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("WriteIntPtr(Object, Int32, IntPtr) may be unavailable in future releases.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-1.2;netstandard-1.3;netstandard-1.4">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr"><span data-ttu-id="68c54-2128">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2128">The base address in unmanaged memory of the target object.</span></span></param>
        <param name="ofs"><span data-ttu-id="68c54-2129">追加される、追加のバイト オフセット、<paramref name="ptr" />書き込みの前にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="68c54-2129">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</span></span></param>
        <param name="val"><span data-ttu-id="68c54-2130">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="68c54-2130">The value to write.</span></span></param>
        <summary><span data-ttu-id="68c54-2131">アンマネージ メモリにプロセッサ ネイティブ サイズの整数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2131">Writes a processor native sized integer value to unmanaged memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2132"><xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> により直接アンマネージ配列全体のコピーのコストが削減、アンマネージ C スタイルのバイト配列との対話 (を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) その要素の値を設定する前に別のマネージ配列にします。</span><span class="sxs-lookup"><span data-stu-id="68c54-2132"><xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=nameWithType>) to a separate managed array before setting its element values.</span></span>  
  
 <span data-ttu-id="68c54-2133">アライメントされていないメモリ位置への書き込みはサポートされています。</span><span class="sxs-lookup"><span data-stu-id="68c54-2133">Writing to unaligned memory locations is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="68c54-2134">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="68c54-2134">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68c54-2135"><paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="68c54-2135"><paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object.</span></span> <span data-ttu-id="68c54-2136">このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2136">This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2137">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2137">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2138">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2138">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ZeroFreeBSTR">
      <MemberSignature Language="C#" Value="public static void ZeroFreeBSTR (IntPtr s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ZeroFreeBSTR(native int s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ZeroFreeBSTR (s As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ZeroFreeBSTR(IntPtr s);" />
      <MemberSignature Language="F#" Value="static member ZeroFreeBSTR : nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.ZeroFreeBSTR s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-2139">解放する <see langword="BSTR" /> のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2139">The address of the <see langword="BSTR" /> to free.</span></span></param>
        <summary><span data-ttu-id="68c54-2140"><see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" /> メソッドを使用して割り当てられた [BSTR](https://msdn.microsoft.com/library/ms221069.aspx) ポインターを解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-2140">Frees a [BSTR](https://msdn.microsoft.com/library/ms221069.aspx) pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2141"><xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A>メソッド対 0 の場合、BSTR の内容をまず設定し、BSTR を解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-2141">The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A> method first sets the contents of the BSTR to zero, and then frees the BSTR.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2142">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2142">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2143">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2143">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ZeroFreeCoTaskMemAnsi">
      <MemberSignature Language="C#" Value="public static void ZeroFreeCoTaskMemAnsi (IntPtr s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ZeroFreeCoTaskMemAnsi(native int s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ZeroFreeCoTaskMemAnsi (s As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ZeroFreeCoTaskMemAnsi(IntPtr s);" />
      <MemberSignature Language="F#" Value="static member ZeroFreeCoTaskMemAnsi : nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-2144">解放するアンマネージ文字列のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2144">The address of the unmanaged string to free.</span></span></param>
        <summary><span data-ttu-id="68c54-2145"><see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> メソッドを使用して割り当てられたアンマネージ文字列ポインターを解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-2145">Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2146"><xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A>メソッドは、最初はゼロ (0) クリアしを使用して割り当てられたアンマネージ メモリを解放し、<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-2146">The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-2147">次の例では、<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A>マーシャ リングし、のコンテンツを復号化するメソッド、<xref:System.Security.SecureString>アンマネージ メモリ ブロックへのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-2147">The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory.</span></span> <span data-ttu-id="68c54-2148">次を使用して、<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A>をゼロにし、アンマネージ ブロックを破棄します。</span><span class="sxs-lookup"><span data-stu-id="68c54-2148">It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> method to zero out and dispose the unmanaged block.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2149">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2149">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2150">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2150">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ZeroFreeCoTaskMemUnicode">
      <MemberSignature Language="C#" Value="public static void ZeroFreeCoTaskMemUnicode (IntPtr s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ZeroFreeCoTaskMemUnicode(native int s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ZeroFreeCoTaskMemUnicode (s As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ZeroFreeCoTaskMemUnicode(IntPtr s);" />
      <MemberSignature Language="F#" Value="static member ZeroFreeCoTaskMemUnicode : nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-2151">解放するアンマネージ文字列のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2151">The address of the unmanaged string to free.</span></span></param>
        <summary><span data-ttu-id="68c54-2152"><see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> メソッドを使用して割り当てられたアンマネージ文字列ポインターを解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-2152">Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2153"><xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A>メソッドは、最初はゼロ (0) クリアしを使用して割り当てられたアンマネージ メモリを解放し、<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-2153">The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2154">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2154">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2155">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2155">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ZeroFreeCoTaskMemUTF8">
      <MemberSignature Language="C#" Value="public static void ZeroFreeCoTaskMemUTF8 (IntPtr s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ZeroFreeCoTaskMemUTF8(native int s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ZeroFreeCoTaskMemUTF8 (s As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ZeroFreeCoTaskMemUTF8(IntPtr s);" />
      <MemberSignature Language="F#" Value="static member ZeroFreeCoTaskMemUTF8 : nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8 s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.1">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.IntPtr" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZeroFreeGlobalAllocAnsi">
      <MemberSignature Language="C#" Value="public static void ZeroFreeGlobalAllocAnsi (IntPtr s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ZeroFreeGlobalAllocAnsi(native int s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ZeroFreeGlobalAllocAnsi (s As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ZeroFreeGlobalAllocAnsi(IntPtr s);" />
      <MemberSignature Language="F#" Value="static member ZeroFreeGlobalAllocAnsi : nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-2156">解放するアンマネージ文字列のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2156">The address of the unmanaged string to free.</span></span></param>
        <summary><span data-ttu-id="68c54-2157"><see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> メソッドを使用して割り当てられたアンマネージ文字列ポインターを解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-2157">Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2158"><xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A>メソッドは、最初はゼロ (0) クリアしを使用して割り当てられたアンマネージ メモリを解放し、<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-2158">The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-2159">次の例では、<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A>マーシャ リングし、のコンテンツを復号化するメソッド、<xref:System.Security.SecureString>アンマネージ メモリ ブロックへのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="68c54-2159">The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory.</span></span> <span data-ttu-id="68c54-2160">次を使用して、<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A>をゼロにし、アンマネージ ブロックを破棄します。</span><span class="sxs-lookup"><span data-stu-id="68c54-2160">It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method to zero out and dispose the unmanaged block.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/CS/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2161">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2161">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2162">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2162">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ZeroFreeGlobalAllocUnicode">
      <MemberSignature Language="C#" Value="public static void ZeroFreeGlobalAllocUnicode (IntPtr s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ZeroFreeGlobalAllocUnicode(native int s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ZeroFreeGlobalAllocUnicode (s As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ZeroFreeGlobalAllocUnicode(IntPtr s);" />
      <MemberSignature Language="F#" Value="static member ZeroFreeGlobalAllocUnicode : nativeint -&gt; unit" Usage="System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.IntPtr" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="68c54-2163">解放するアンマネージ文字列のアドレス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2163">The address of the unmanaged string to free.</span></span></param>
        <summary><span data-ttu-id="68c54-2164"><see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" /> メソッドを使用して割り当てられたアンマネージ文字列ポインターを解放します。</span><span class="sxs-lookup"><span data-stu-id="68c54-2164">Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68c54-2165"><xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A>メソッドは、最初はゼロ (0) クリアしを使用して割り当てられたアンマネージ メモリを解放し、<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-2165">The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68c54-2166">次の例では、使用する方法、<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A>メソッドをアンマネージ`LogonUser`で偽装を実行する関数、<xref:System.Security.SecureString>クラス。</span><span class="sxs-lookup"><span data-stu-id="68c54-2166">The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method with the unmanaged `LogonUser` function to perform impersonation with the <xref:System.Security.SecureString> class.</span></span> <span data-ttu-id="68c54-2167">使用して、<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A>をゼロにし、アンマネージ文字列の参照を解放するメソッド。</span><span class="sxs-lookup"><span data-stu-id="68c54-2167">The example then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method to zero out and free the unmanaged string reference.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/CS/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="68c54-2168">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="68c54-2168">requires full trust for the immediate caller.</span></span> <span data-ttu-id="68c54-2169">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="68c54-2169">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>
