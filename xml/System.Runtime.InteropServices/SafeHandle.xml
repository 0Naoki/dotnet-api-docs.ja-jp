<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SafeHandle.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56c4334868cde5130ed9da65bfda7e798c24b12cd.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c4334868cde5130ed9da65bfda7e798c24b12cd</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Represents a wrapper class for operating system handles.</source>
          <target state="translated">オペレーティング システム ハンドルのラッパー クラスを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This class must be inherited.</source>
          <target state="translated">このクラスは継承する必要があります。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class provides critical finalization of handle resources, preventing handles from being reclaimed prematurely by garbage collection and from being recycled by Windows to reference unintended unmanaged objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>クラスは、およびガベージ コレクションによって処理の途中で解放されてから意図しないアンマネージ オブジェクトを参照する Windows では、リサイクル中にハンドルを防止ハンドル リソースの重要な終了処理を提供します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This topic includes the following sections:</source>
          <target state="translated">このトピックには、次のセクションがあります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source><bpt id="p1">[</bpt>Why SafeHandle?<ept id="p1">](#Why)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>なぜ SafeHandle しますか?<ept id="p1">](#Why)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source><bpt id="p1">[</bpt>What SafeHandle does<ept id="p1">](#Does)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>SafeHandle の動作<ept id="p1">](#Does)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source><bpt id="p1">[</bpt>Classes derived from SafeHandle<ept id="p1">](#Derived)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>SafeHandle から派生したクラス<ept id="p1">](#Derived)</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Why SafeHandle?</source>
          <target state="translated">なぜ SafeHandle しますか?</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Before the .NET Framework version 2.0, all operating system handles could only be encapsulated in the <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> managed wrapper object.</source>
          <target state="translated">.NET Framework version 2.0 では、すべてのオペレーティング システムでハンドルをカプセル化でしただけ前に、<ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>マネージ ラッパー オブジェクト。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>While this was a convenient way to interoperate with native code, handles could be leaked by asynchronous exceptions, such as a thread aborting unexpectedly or a stack overflow.</source>
          <target state="translated">これには、ネイティブ コードと相互運用する便利な手段がでしたが、ハンドルが予期せず中止スレッドまたはスタック オーバーフローなど、非同期の例外によってリークする可能性があります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>These asynchronous exceptions are an obstacle to cleaning up operating system resources, and they can occur almost anywhere in your app.</source>
          <target state="translated">これらの非同期の例外は、オペレーティング システム リソースのクリーンアップに支障をきたすと、アプリでほぼどこでも発生することができます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Although overrides to the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method allow cleanup of unmanaged resources when an object is being garbage collected, in some circumstances, finalizable objects can be reclaimed by garbage collection while executing a method within a platform invoke call.</source>
          <target state="translated">上書きを<ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>メソッドがアンマネージ リソースのクリーンアップを許可するときにオブジェクトがガベージ コレクション、状況によっては、ファイナライズ可能なオブジェクトを再要求できるガベージによって、プラットフォーム内のメソッドの実行中にコレクションが呼び出しです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>If a finalizer frees the handle passed to that platform invoke call, it could lead to handle corruption.</source>
          <target state="translated">ファイナライザーは、そのプラットフォームに渡されたハンドルを解放呼び出し、破損を処理する可能性があります。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>The handle could also be reclaimed while your method is blocked during a platform invoke call, such as while reading a file.</source>
          <target state="translated">プラットフォームの中に、メソッドがブロックされている間、ハンドルを解放もでしたなど、ファイルの読み取り中に呼び出しを起動します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>More critically, because Windows aggressively recycles handles, a handle could be recycled and point to another resource that might contain sensitive data.</source>
          <target state="translated">ほど、Windows では、積極的にハンドルを再利用、ためハンドルでしたリサイクルされ機密データを含めることができる他のリソースをポイントします。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This is known as a recycle attack and can potentially corrupt data and be a security threat.</source>
          <target state="translated">これは、リサイクル攻撃と呼ばれますとことができますデータが破損する可能性のあるセキュリティの脅威となります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>What SafeHandle does</source>
          <target state="translated">SafeHandle の動作</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class simplifies several of these object lifetime issues, and is integrated with platform invoke so that operating system resources are not leaked.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>クラスは、これらのオブジェクトの有効期間の問題のいくつかを簡略化し、プラットフォームと統合されたオペレーティング システムのリソースが漏洩しないようにを起動します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class resolves object lifetime issues by assigning and releasing handles without interruption.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>クラスは、割り当てと解放を中断することがなくハンドルによってオブジェクトの有効期間に関する問題を解決します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>It contains a critical finalizer that ensures that the handle is closed and is guaranteed to run during unexpected <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> unloads, even in cases when the platform invoke call is assumed to be in a corrupted state.</source>
          <target state="translated">ハンドルが閉じているして中に予期しない実行することが保証されるようにする重要なファイナライザーが含まれている<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>アンロードされると、プラットフォーム呼び出しの状況であってもが破損した状態であると見なされます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Because <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject&gt;</ph>, all the noncritical finalizers are called before any of the critical finalizers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>から継承<ph id="ph2">&lt;xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject&gt;</ph>、重要でないすべてのファイナライザーがクリティカル ファイナライザーのいずれかの前に呼び出されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>The finalizers are called on objects that are no longer live during the same garbage collection pass.</source>
          <target state="translated">同じガベージ コレクションの実行中にライブが不要になったオブジェクトでは、ファイナライザーが呼び出されます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>For example, a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> object can run a normal finalizer to flush out existing buffered data without the risk of the handle being leaked or recycled.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>オブジェクトはハンドルのリークまたはリサイクルされるリスクを避けてバッファー内の既存のデータをフラッシュする標準のファイナライザーを実行できます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This very weak ordering between critical and noncritical finalizers is not intended for general use.</source>
          <target state="translated">一般的な用途は、重大かつ重要でないファイナライザー間この非常に弱い順序付けすることはありません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>It exists primarily to assist in the migration of existing libraries by allowing those libraries to use <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> without altering their semantics.</source>
          <target state="translated">使用するこれらのライブラリを許可することで既存のライブラリの移行を支援するには、主に存在する<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>のセマンティクスを変更することがなくです。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Additionally, the critical finalizer and anything it calls, such as the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType&gt;</ph> method, must be in a constrained execution region.</source>
          <target state="translated">さらに、クリティカル ファイナライザーと何も呼び出して、ように、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType&gt;</ph>メソッドが制約された実行領域である必要があります。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This imposes constraints on what code can be written within the finalizer's call graph.</source>
          <target state="translated">これには、ファイナライザーの呼び出し先内でどのようなコードを記述する制約が適用されます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Platform invoke operations automatically increment the reference count of handles encapsulated by a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> and decrement them upon completion.</source>
          <target state="translated">プラットフォームが自動的に操作を呼び出しによってカプセル化されたハンドルの参照カウントをインクリメント、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>と完了したときにそれらをデクリメントします。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This ensures that the handle will not be recycled or closed unexpectedly.</source>
          <target state="translated">ハンドルがありませんするリサイクルされるかになりますが異常終了しました。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>You can specify ownership of the underlying handle when constructing <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> objects by supplying a value to the <ph id="ph2">`ownsHandle`</ph> argument in the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class constructor.</source>
          <target state="translated">基になるハンドルの所有権を指定するには、構築するときに<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>オブジェクトに値を指定して、<ph id="ph2">`ownsHandle`</ph>の引数、<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>クラスのコンス トラクターです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This controls whether the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object will release the handle after the object has been disposed.</source>
          <target state="translated">これを制御するかどうか、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>オブジェクトは、オブジェクトが破棄された後に、ハンドルを解放します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This is useful for handles with peculiar lifetime requirements or for consuming a handle whose lifetime is controlled by someone else.</source>
          <target state="translated">これは例外的な有効期間の要件を持つハンドルまたはその有効期間が他のユーザーによって制御されますハンドルを使用するために役立ちます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Classes derived from SafeHandle</source>
          <target state="translated">SafeHandle から派生したクラス</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> is an abstract wrapper class for operating system handles.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> オペレーティング システム ハンドルのラッパーの抽象クラスです。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Deriving from this class is difficult.</source>
          <target state="translated">このクラスからの派生は困難です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Instead, use the derived classes in the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles&gt;</ph> namespace that provide safe handles for the following:</source>
          <target state="translated">代わりに、次のセーフ ハンドルを提供する <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles&gt;</ph> 名前空間の派生クラスを使用してください。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Files (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph> class).</source>
          <target state="translated">ファイル (、<ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph>クラス)。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Memory mapped files (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle&gt;</ph> class).</source>
          <target state="translated">メモリ マップト ファイル (、<ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle&gt;</ph>クラス)。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Pipes (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafePipeHandle&gt;</ph> class).</source>
          <target state="translated">パイプ (、<ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafePipeHandle&gt;</ph>クラス)。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Memory views (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle&gt;</ph> class).</source>
          <target state="translated">メモリ ビュー (、<ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle&gt;</ph>クラス)。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Cryptography constructs (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle&gt;</ph>, <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle&gt;</ph>, <ph id="ph3">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle&gt;</ph>, and <ph id="ph4">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle&gt;</ph> classes).</source>
          <target state="translated">暗号化の構成体 (、 <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle&gt;</ph>、 <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle&gt;</ph>、 <ph id="ph3">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle&gt;</ph>、および<ph id="ph4">&lt;xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle&gt;</ph>クラス)。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Processes (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeProcessHandle&gt;</ph> class).</source>
          <target state="translated">プロセス (、<ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeProcessHandle&gt;</ph>クラス)。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Registry keys (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle&gt;</ph> class).</source>
          <target state="translated">レジストリ キー (、<ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle&gt;</ph>クラス)。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Wait handles (the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;</ph> class).</source>
          <target state="translated">待機ハンドル (、<ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;</ph>クラス)。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>The following code example creates a custom safe handle for an operating system file handle, deriving from <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid&gt;</ph>.</source>
          <target state="translated">派生する、オペレーティング システム ファイル ハンドル用のカスタムのセーフ ハンドルを作成するコード例を次<ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>It reads bytes from a file and displays their hexadecimal values.</source>
          <target state="translated">ファイルからバイトを読み取り、16 進数値が表示されます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>It also contains a fault testing harness that causes the thread to abort, but the handle value is freed.</source>
          <target state="translated">テスト ハーネス エラーも含まれています。 中止するには、スレッドを原因となったが、ハンドル値を解放します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>When using an <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> to represent handles, the handle is occasionally leaked due to the asynchronous thread abort.</source>
          <target state="translated">使用する場合、<ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>ハンドルを表す、ハンドルが非同期スレッドの中止のためリーク場合があります。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>You will need a text file in the same folder as the compiled application.</source>
          <target state="translated">コンパイル済みのアプリケーションと同じフォルダー内のテキスト ファイルを必要があります。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Assuming that you name the application "HexViewer", the command line usage is:</source>
          <target state="translated">コマンドラインの使用方法は、"hexviewer"だアプリケーションの名前を入力する場合です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Optionally specify <ph id="ph1">`-Fault`</ph> to intentionally attempt to leak the handle by aborting the thread in a certain window.</source>
          <target state="translated">必要に応じて指定<ph id="ph1">`-Fault`</ph>意図的に特定のウィンドウでスレッドを中止することで、ハンドルのリークしようとします。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Use the Windows Perform.exe tool to monitor handle counts while injecting faults.</source>
          <target state="translated">Windows Perform.exe ツールを使用すると、エラーを挿入中にハンドル数を監視できます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>for full trust for inheritors.</source>
          <target state="translated">継承時の完全な信頼。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This member cannot be inherited by partially trusted code.</source>
          <target state="translated">このメンバーは、部分的に信頼されたコードでは継承できません。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>To create a class derived from <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>, you must know how to create and free an operating system handle.</source>
          <target state="translated">派生したクラスを作成する<ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>、作成し、オペレーティング システム ハンドルを解放する方法を理解する必要があります。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>This process is different for different handle types because some use the <bpt id="p1">[</bpt>CloseHandle<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx)</ept> function, while others use more specific functions such as <bpt id="p2">[</bpt>UnmapViewOfFile<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx)</ept> or <bpt id="p3">[</bpt>FindClose<ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx)</ept>.</source>
          <target state="translated">別のハンドル型の一部を使用しているために、このプロセスは異なる、 <bpt id="p1">[</bpt>CloseHandle<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx)</ept>関数は、具体的な関数をなど使用して他のユーザーに対し<bpt id="p2">[</bpt>UnmapViewOfFile<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx)</ept>または<bpt id="p3">[</bpt>FindClose<ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx)</ept>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>For this reason, you must create a derived class of <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> for each operating system handle type that you want to wrap in a safe handle.</source>
          <target state="translated">このための派生クラスを作成する必要があります<ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>にセーフ ハンドルをラップするオペレーティング システム ハンドルの種類ごとにします。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> から継承する場合は、<ph id="ph2">&lt;see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /&gt;</ph> メンバーと <ph id="ph3">&lt;see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" /&gt;</ph> メンバーをオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>You should also provide a default constructor that calls the base constructor with a value that represent an invalid handle value, and a <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> value indicating whether the native handle is owned by the <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> and consequently should be freed when that <ph id="ph3">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> has been disposed.</source>
          <target state="translated">無効なハンドル値を表す値を持つ基底コンス トラクターを呼び出す既定のコンス トラクターを提供することも必要があります、<ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>ネイティブ ハンドルが所有しているかどうかを示す値、<ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>し、その結果、ときに解放する必要があります<ph id="ph3">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>は破棄されました。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>The value of an invalid handle (usually 0 or -1).</source>
          <target state="translated">無効なハンドルの値 (通常は 0 または -1)。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>Your implementation of <ph id="ph1">&lt;see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /&gt;</ph> should return <ph id="ph2">&lt;see langword="true" /&gt;</ph> for this value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /&gt;</ph> の実装では、この値に対して <ph id="ph2">&lt;see langword="true" /&gt;</ph> を返す必要があります。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to reliably let <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> release the handle during the finalization phase; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph> (not recommended).</source>
          <target state="translated">終了処理中に <ph id="ph1">&lt;see langword="true" /&gt;</ph> によってハンドルを確実に解放する場合は <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> (お勧めしません)。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> class with the specified invalid handle value.</source>
          <target state="translated">指定した無効なハンドル値を使用して、<ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>If the <ph id="ph1">`ownsHandle`</ph> parameter is <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> is never called; thus, it is not recommended to use this parameter value as your code may leak resources.</source>
          <target state="translated">場合、<ph id="ph1">`ownsHandle`</ph>パラメーターは<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph>ことはありませんが呼び出されます。 したがって、これはお勧めできませんリソース リークが発生するコードと、このパラメーター値を使用します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>The derived class resides in an assembly without unmanaged code access permission.</source>
          <target state="translated">派生クラスがアンマネージ コードのアクセス許可なしにアセンブリに存在しています。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>for full trust for inheritors.</source>
          <target state="translated">継承時の完全な信頼。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>This member cannot be inherited by partially trusted code.</source>
          <target state="translated">このメンバーは、部分的に信頼されたコードでは継承できません。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Marks the handle for releasing and freeing resources.</source>
          <target state="translated">リソースを解放するためのハンドルをマークします。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Calling the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> method allows the resources to be freed.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph>メソッドにより、リソースを解放します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>This might not happen immediately if other threads are using the same safe handle object, but will happen as soon as that is no longer the case.</source>
          <target state="translated">これにより、他のスレッドが同じオブジェクトのセーフ ハンドルを使用している場合は直ちにに実行されない可能性がありますが、されなくなるとすぐに実行されます。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Although most classes that use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</source>
          <target state="translated">ほとんどのクラスを使用するが、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>クラスは、この操作は、必要に応じて、ファイナライザーを用意する必要はありません (たとえば、ファイル バッファーをフラッシュするかを記述するいくつかのデータ バックアップをメモリに)。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>In this case, the class can provide a finalizer that is guaranteed to run before the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> critical finalizer runs.</source>
          <target state="translated">この例では、クラスが前に実行することが保証が不要なファイナライザーを提供できます、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>クリティカル ファイナライザーを実行します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> method when you are finished using the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph>が完了したら、メソッドを使用して、<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Always call <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> before you release your last reference to the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object.</source>
          <target state="translated">常に呼び出す<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph>への参照を解放する前に、<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object's <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">そうしないと、ガベージ コレクターが <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> オブジェクトの <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A&gt;</ph> メソッドを呼び出すまで、使用されているリソースは解放されません。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">セキュリティ アクション:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Close">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the reference counter was successfully incremented; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">参照カウンターが正常にインクリメントされた場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>Manually increments the reference counter on <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> instances.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> インスタンスの参照カウンターを手動でインクリメントします。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> method prevents the common language runtime from reclaiming memory used by a handle (which occurs when the runtime calls the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> method).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>メソッドでは、共通言語ランタイムを防止をハンドルによって使用されるメモリを再利用 (ランタイムが呼び出す場合に発生する、<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph>メソッド)。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>You can use this method to manually increment the reference count on a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> instance.</source>
          <target state="translated">参照カウントを手動でインクリメントするには、このメソッドを使用することができます、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> returns a Boolean value using a <ph id="ph2">`ref`</ph> parameter (<ph id="ph3">`success`</ph>) that indicates whether the reference count was incremented successfully.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> 使用して、ブール値を返します、<ph id="ph2">`ref`</ph>パラメーター (<ph id="ph3">`success`</ph>)、参照カウントが正常にインクリメントされたかどうかを示すです。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>This allows your program logic to back out in case of failure.</source>
          <target state="translated">これにより、障害の発生バックアップするのには、プログラム ロジックです。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>You should set <ph id="ph1">`success`</ph> to <ph id="ph2">`false`</ph> before calling <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>.</source>
          <target state="translated">設定する必要があります<ph id="ph1">`success`</ph>に<ph id="ph2">`false`</ph>呼び出す前に<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>If <ph id="ph1">`success`</ph> is <ph id="ph2">`true`</ph>, avoid resource leaks by matching the call to <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> with a corresponding call to <ph id="ph4">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph>.</source>
          <target state="translated">場合<ph id="ph1">`success`</ph>は<ph id="ph2">`true`</ph>への呼び出しを照合することによってリソースのリークの回避<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>への対応する呼び出しで<ph id="ph4">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>This method is intended for advanced users and must always be used carefully.</source>
          <target state="translated">このメソッドは上級ユーザー向けにあり、常に慎重に使用する必要があります。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing.</source>
          <target state="translated">ハンドル リソースのリークを避けるためには、常に、制約された実行領域 (CER)、スレッドの中断が処理を中断できない内部このメソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">セキュリティ アクション:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>Returns the value of the <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /&gt;</ph> field.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /&gt;</ph> フィールドの値を戻します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>An <ph id="ph1">&lt;see langword="IntPtr" /&gt;</ph> representing the value of the <ph id="ph2">&lt;see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /&gt;</ph> field.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="IntPtr" /&gt;</ph> フィールドの値を表す <ph id="ph2">&lt;see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>If the handle has been marked invalid with <ph id="ph1">&lt;see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" /&gt;</ph>, this method still returns the original handle value, which can be a stale value.</source>
          <target state="translated">ハンドルが <ph id="ph1">&lt;see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" /&gt;</ph> で無効としてマークされている場合にも、このメソッドは元のハンドル値を返すため、返される値が古い値である可能性があります。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>You can use this method to retrieve the actual handle value from an instance of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> derived class.</source>
          <target state="translated">このメソッドを使用するには値を取得、実際のハンドルのインスタンスから、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>This method is needed for backwards compatibility because many properties in the .NET Framework return <ph id="ph1">`IntPtr`</ph> handle types.</source>
          <target state="translated">このメソッドは、必要なの旧バージョンとの互換性、.NET Framework のプロパティの多くを返すため<ph id="ph1">`IntPtr`</ph>型を処理します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source><ph id="ph1">`IntPtr`</ph> handle types are platform-specific types used to represent a pointer or a handle.</source>
          <target state="translated"><ph id="ph1">`IntPtr`</ph> ハンドル型は、プラットフォーム固有の型のポインターまたはハンドルを表すために使用します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>Using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph> method can pose security risks because, if the handle has been marked as invalid with <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph> still returns the original, potentially stale handle value.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph>ために、メソッドはセキュリティ上のリスクをもたらすことができます、ハンドルが設定されている場合とが無効、 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph>、<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph>も古い可能性がある、元のハンドル値を返します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>The returned handle can also be recycled at any point.</source>
          <target state="translated">返されるハンドルは、任意の時点でリサイクルされることもできます。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>At best, this means the handle might suddenly stop working.</source>
          <target state="translated">最高、つまり、ハンドルが突然動作を停止した可能性があります。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>At worst, if the handle or the resource that the handle represents is exposed to untrusted code, this can lead to a recycling security attack on the reused or returned handle.</source>
          <target state="translated">最悪の場合、ハンドル、またはハンドルが表すリソースが信頼できないコードに公開されている場合は、再利用または返されるハンドルのリサイクル セキュリティ攻撃に対してこの可能性があります。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>For example, an untrusted caller can query data on the handle just returned and receive information for an entirely unrelated resource.</source>
          <target state="translated">など、信頼されていない呼び出し元はハンドルでのデータが返されるクエリを実行し、まったく関係のないリソースの情報を取得できます。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>See the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> methods for more information about using the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph> methodsafely.</source>
          <target state="translated">参照してください、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph>メソッドを使用しての詳細については、 <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph> methodsafely です。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">セキュリティ アクション:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>Manually decrements the reference counter on a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> インスタンスの参照カウンターを手動でデクリメントします。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> method is the counterpart to <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph>メソッドに対応するは<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>You should always match a call to the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> method with a successful call to <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>.</source>
          <target state="translated">呼び出しを常に一致する必要があります、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph>メソッド呼び出しは成功を<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>This method is intended for advanced users and must always be used carefully.</source>
          <target state="translated">このメソッドは上級ユーザー向けにあり、常に慎重に使用する必要があります。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing.</source>
          <target state="translated">ハンドル リソースのリークを避けるためには、常に、制約された実行領域 (CER)、スレッドの中断が処理を中断できない内部このメソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>In the same way that unmatched <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> calls can cause resource leaks, unmatched <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> calls can cause invalid handle states to become visible to other threads.</source>
          <target state="translated">同じ方法を一致しない<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>呼び出しが一致しないリソース リークを起こすことができます<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph>呼び出しを他のスレッドを表示するに無効なハンドルの状態が発生することができます。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>Do not expose <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph> calls to untrusted code.</source>
          <target state="translated">公開しない<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A&gt;</ph>信頼されていないコードへの呼び出しです。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">セキュリティ アクション:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.SafeHandle">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> クラスによって使用されているリソースを解放します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> クラスによって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Calling the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> method allows the resources to be freed.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph>メソッドにより、リソースを解放します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>This might not happen immediately if other threads are using the same instance of the safe handle, but will happen as soon as that is no longer the case.</source>
          <target state="translated">これにより、他のスレッドは、セーフ ハンドルの同じインスタンスを使用している場合は直ちにに実行されない可能性がありますが、されなくなるとすぐに実行されます。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Although most classes using <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</source>
          <target state="translated">クラスの使用の最も<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>ファイナライザーを提供する必要はありません、これは (たとえば、ファイル バッファーをフラッシュするか、一部のデータをメモリに書き戻す) 必要があります。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>In this case, they can provide a finalizer that is guaranteed to run before the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> critical finalizer runs.</source>
          <target state="translated">この例では、前に実行することが保証が不要なファイナライザーを提示できます、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>クリティカル ファイナライザーを実行します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> method when you are finished using the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph>が完了したら、メソッドを使用して、<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object in an unusable state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph>メソッドによって、<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>使用不可の状態オブジェクト。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Always call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> method before you release your last reference to the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object.</source>
          <target state="translated">常に呼び出し、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph>メソッドへの参照を解放する前に、<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object's <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">そうしないと、ガベージ コレクターが <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> オブジェクトの <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A&gt;</ph> メソッドを呼び出すまで、使用されているリソースは解放されません。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">セキュリティ アクション:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> for a normal dispose operation; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to finalize the handle.</source>
          <target state="translated">通常の破棄操作を実行する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。ハンドルを終了する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> class specifying whether to perform a normal dispose operation.</source>
          <target state="translated">通常の破棄操作を実行するかどうかを指定して、<ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> クラスによって使用されているアンマネージ リソースを解放します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
          <source>You should never explicitly call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> method with the <ph id="ph2">`disposing`</ph> parameter set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">明示的に呼び出す必要があります、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph>メソッドを<ph id="ph2">`disposing`</ph>パラメーターに設定<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">セキュリティ アクション:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.Finalize">
          <source>Frees all resources associated with the handle.</source>
          <target state="translated">ハンドルに関連付けられたすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Finalize">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A&gt;</ph> method is the destructor for the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A&gt;</ph>メソッドは、デストラクター、<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Finalize">
          <source>Application code should not call this method directly.</source>
          <target state="translated">アプリケーション コードでは、このメソッドを直接呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Finalize">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Finalize">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">セキュリティ アクション:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.Finalize">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.SafeHandle.handle">
          <source>Specifies the handle to be wrapped.</source>
          <target state="translated">ラップするハンドルを指定します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.SafeHandle.handle">
          <source>Do not expose the handle publicly (that is, outside of the derived class).</source>
          <target state="translated">ハンドルをパブリックに公開しません (つまり、派生クラスの外部で)。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>Gets a value indicating whether the handle is closed.</source>
          <target state="translated">ハンドルが閉じているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is closed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ハンドルが閉じている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A&gt;</ph> method returns a value indicating whether the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object's handle is no longer associated with a native resource.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A&gt;</ph>メソッドを示す値を返すかどうか、<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>オブジェクトのハンドルは、ネイティブ リソースに関連付けが不要になった。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>This differs from the definition of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> property, which computes whether a given handle is always considered invalid.</source>
          <target state="translated">これの定義とは異なります、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph>プロパティで、かどうか、指定されたハンドルは常に無効とみなさを計算します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A&gt;</ph> method returns a <ph id="ph2">`true`</ph> value in the following cases:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A&gt;</ph>メソッドを返します、<ph id="ph2">`true`</ph>値は、次の場合。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph> method was called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph>メソッドが呼び出されました。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph> method or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph> method was called and there are no references to the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object on other threads.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph>メソッドまたは<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.Close%2A&gt;</ph>メソッドが呼び出されへの参照がない、<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>他のスレッド上のオブジェクト。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">セキュリティ アクション:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</source>
          <target state="translated">派生クラスでオーバーライドされると、ハンドル値が無効かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle value is invalid; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ハンドル値が無効な場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>Derived classes must implement the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> property so that the common language runtime can determine whether critical finalization is required.</source>
          <target state="translated">派生クラスを実装する必要があります、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph>プロパティ、共通言語ランタイムでは、重要な終了処理が必要かどうかを確認できるようにします。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>Derived classes must provide an implementation that suits the general type of handle they support (0 or -1 is invalid).</source>
          <target state="translated">派生クラスは、一般的な種類のハンドルをサポートするのに適した実装を提供する必要があります (0 または-1 が無効)。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>These classes can then be further derived for specific safe handle types.</source>
          <target state="translated">これらのクラスは、特定のセーフ ハンドルの種類をさらに派生します。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A&gt;</ph> property, which reports whether the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> object has finished using the underlying handle, the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> property calculates whether the given handle value is always considered invalid.</source>
          <target state="translated">異なり、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A&gt;</ph>プロパティで、報告するかどうか、 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> 、基になるハンドルを使用してオブジェクトが完了した、<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph>プロパティを計算するかどうか、指定したハンドルの値は常に無効とみなさです。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>Therefore, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> property always returns the same value for any one handle value.</source>
          <target state="translated">したがって、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph>プロパティは常に任意の 1 つのハンドル値に対して同じ値を返します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>The following example checks if a file was opened successfully.</source>
          <target state="translated">次の例では、ファイルが正常に開かれたかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">セキュリティ アクション:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>When overridden in a derived class, executes the code required to free the handle.</source>
          <target state="translated">派生クラスでオーバーライドされると、ハンドルを解放するために必要なコードを実行します。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ハンドルが正常に解放された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。深刻なエラーが発生した場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>In this case, it generates a <bpt id="p1">[</bpt>releaseHandleFailed<ept id="p1">](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md)</ept> Managed Debugging Assistant.</source>
          <target state="translated">この場合、<bpt id="p1">[</bpt>releaseHandleFailed<ept id="p1">](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md)</ept> マネージ デバッグ アシスタントが生成されます。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> method is guaranteed to be called only once and only if the handle is valid as defined by the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph>メソッドを呼び出すだけで 1 回場合にのみ、ハンドルが有効で定義されていることが保証、<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>Implement this method in your <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> derived classes to execute any code that is required to free the handle.</source>
          <target state="translated">このメソッドの実装、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>ハンドルを解放するために必要なすべてのコードを実行するクラスを派生します。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>Because one of the functions of <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> is to guarantee prevention of resource leaks, the code in your implementation of <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> must never fail.</source>
          <target state="translated">の関数の 1 つ<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>、コードの実装で、リソース リークの防止を保証するためには、<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph>失敗しない必要があります。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>The garbage collector calls <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> after normal finalizers have been run for objects that were garbage collected at the same time.</source>
          <target state="translated">ガベージ コレクター<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph>ガベージ コレクション、同時になったオブジェクトの通常のファイナライザーを実行した後です。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>The garbage collector guarantees the resources to invoke this method and that the method will not be interrupted while it is in progress.</source>
          <target state="translated">ガベージ コレクターがこのメソッドを呼び出すためのリソースを保証するが進行している間に、メソッドは中断されません。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>This method will be prepared as a constrained execution region (CER) at instance construction time (along with all the methods in its statically determinable call graph).</source>
          <target state="translated">このメソッドは、(その静的に確定呼び出し先のすべてのメソッド) およびインスタンスの構築時に、制約された実行領域 (CER) として準備されます。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>Although this prevents thread abort interrupts, you must still be careful not to introduce any fault paths in your overridden <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> method.</source>
          <target state="translated">オーバーライドされたどのエラー パスを導入しないように注意する必要がありますが、これには、スレッドの中止割り込みが防止されますが、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>In particular, apply the <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt;</ph> attribute to any methods you call from <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph>.</source>
          <target state="translated">具体的には、適用、<ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt;</ph>から呼び出すメソッドが存在する属性<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>In most cases this code should be:</source>
          <target state="translated">ほとんどの場合、このコードがあります。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>Additionally, for simple cleanup (for example, calling the Win32 API <ph id="ph1">`CloseHandle`</ph> on a file handle) you can check the return value for the single platform invoke call.</source>
          <target state="translated">簡単なクリーンアップをさらに、(たとえば、Win32 API の呼び出し<ph id="ph1">`CloseHandle`</ph>ファイル ハンドルの) 1 つのプラットフォーム呼び出しの戻り値を確認することができます。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>For complex cleanup, you may have a lot of program logic and many method calls, some of which might fail.</source>
          <target state="translated">複雑なクリーンアップは、多くのプログラム ロジックとこれらの一部が失敗する多くのメソッド呼び出しがあります。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>You must ensure that your program logic has fallback code for each of those cases.</source>
          <target state="translated">プログラム ロジックでこのような場合の各フォールバック コードはことを確認する必要があります。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>If <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph> returns <ph id="ph2">`false`</ph> for any reason, it generates a <bpt id="p1">[</bpt>releaseHandleFailed<ept id="p1">](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md)</ept> Managed Debugging Assistant.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A&gt;</ph>返します<ph id="ph2">`false`</ph>生成何らかの理由で、 <bpt id="p1">[</bpt>releaseHandleFailed<ept id="p1">](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md)</ept>マネージ デバッグ アシスタントします。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>This helps you detect cases where your attempt to release resources fails.</source>
          <target state="translated">これにより、リソースを解放しようとすると、失敗した場合を検出できます。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>The following code example releases the handle and is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class.</source>
          <target state="translated">次のコード例は、ハンドルを解放し、示されている例の一部である、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">セキュリティ アクション:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
          <source>The pre-existing handle to use.</source>
          <target state="translated">使用する既存のハンドル。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
          <source>Sets the handle to the specified pre-existing handle.</source>
          <target state="translated">ハンドルを指定した既存のハンドルに設定します。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
          <source>Use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A&gt;</ph> method only if you need to support a pre-existing handle (for example, if the handle is returned in a structure) because the .NET Framework COM interop infrastructure does not support marshaling output handles in a structure.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A&gt;</ph>メソッドは .NET Framework の COM 相互運用インフラストラクチャは、マーシャ リングをサポートしていないため (たとえば、ハンドルは、構造体で返される) 場合、既存のハンドルをサポートする必要がある場合にのみ出力、構造内のハンドル。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">セキュリティ アクション:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>Marks a handle as no longer used.</source>
          <target state="translated">今後は使用しないものとしてハンドルをマークします。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>Call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph> method only when you know that your handle no longer references a resource.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph>メソッド ハンドルが不要になったリソースを参照していることがわかっている場合にのみです。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>Doing so does not change the value of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.handle&gt;</ph> field; it only marks the handle as closed.</source>
          <target state="translated">これは、値を変更しない、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.handle&gt;</ph>フィールド; 終了としてのみのハンドルをマークにします。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>The handle might then contain a potentially stale value.</source>
          <target state="translated">ハンドルは、値が古い可能性のある値を含めるし可能性があります。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>The effect of this call is that no attempt is made to free the resources.</source>
          <target state="translated">この呼び出しの影響は、ことは行われません、リソースを解放します。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>As with the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A&gt;</ph> method, use <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph> only if you need to support a pre-existing handle.</source>
          <target state="translated">同様、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A&gt;</ph>メソッドを使用して<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A&gt;</ph>を既存のハンドルをサポートする必要がある場合のみです。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">セキュリティ アクション:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>