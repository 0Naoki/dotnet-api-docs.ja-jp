<Type Name="SafeHandle" FullName="System.Runtime.InteropServices.SafeHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2df2050dc2138073d3f5a6997faff754918bedf1" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51879518" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit SafeHandle extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.SafeHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SafeHandle&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SafeHandle abstract : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type SafeHandle = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Handles</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-1.5;netframework-4.8;netcore-2.0">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="cacf6-101">オペレーティング システム ハンドルのラッパー クラスを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cacf6-101">Represents a wrapper class for operating system handles.</span>
      </span>
      <span data-ttu-id="cacf6-102">このクラスは継承する必要があります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cacf6-102">This class must be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-103"><xref:System.Runtime.InteropServices.SafeHandle>ハンドル リソース、およびガベージ コレクションによって途中で回収されてから意図しないアンマネージ オブジェクトを参照する Windows では、リサイクル中にハンドルを防止のクリティカル ファイナライズがクラスに用意されています。</span><span class="sxs-lookup"><span data-stu-id="cacf6-103">The <xref:System.Runtime.InteropServices.SafeHandle> class provides critical finalization of handle resources, preventing handles from being reclaimed prematurely by garbage collection and from being recycled by Windows to reference unintended unmanaged objects.</span></span>  
  
 <span data-ttu-id="cacf6-104">このトピックには、次のセクションがあります。</span><span class="sxs-lookup"><span data-stu-id="cacf6-104">This topic includes the following sections:</span></span>  
  
 <span data-ttu-id="cacf6-105">[なぜ SafeHandle でしょうか。](#Why) </span><span class="sxs-lookup"><span data-stu-id="cacf6-105">[Why SafeHandle?](#Why) </span></span>  
 <span data-ttu-id="cacf6-106">[SafeHandle の特長](#Does) </span><span class="sxs-lookup"><span data-stu-id="cacf6-106">[What SafeHandle does](#Does) </span></span>  
 [<span data-ttu-id="cacf6-107">SafeHandle から派生したクラス</span><span class="sxs-lookup"><span data-stu-id="cacf6-107">Classes derived from SafeHandle</span></span>](#Derived)  
  
<a name="Why"></a>   
## <a name="why-safehandle"></a><span data-ttu-id="cacf6-108">なぜ SafeHandle でしょうか。</span><span class="sxs-lookup"><span data-stu-id="cacf6-108">Why SafeHandle?</span></span>  
 <span data-ttu-id="cacf6-109">.NET Framework version 2.0 では、すべてのオペレーティング システム ハンドルでしたのみにカプセル化する前に、<xref:System.IntPtr>マネージ ラッパー オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cacf6-109">Before the .NET Framework version 2.0, all operating system handles could only be encapsulated in the <xref:System.IntPtr> managed wrapper object.</span></span> <span data-ttu-id="cacf6-110">これは、ネイティブ コードと相互運用する便利な方法でしたが予期せず中止されたスレッドまたはスタック オーバーフローなどの非同期例外によってハンドルがリークする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cacf6-110">While this was a convenient way to interoperate with native code, handles could be leaked by asynchronous exceptions, such as a thread aborting unexpectedly or a stack overflow.</span></span> <span data-ttu-id="cacf6-111">これらの非同期例外は妨げにオペレーティング システムのリソースをクリーンアップして、アプリでほぼどこでも発生することができます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-111">These asynchronous exceptions are an obstacle to cleaning up operating system resources, and they can occur almost anywhere in your app.</span></span>  
  
 <span data-ttu-id="cacf6-112">上書きを<xref:System.Object.Finalize%2A?displayProperty=nameWithType>オブジェクトがガベージ コレクション、状況によってをされているときに、メソッドがアンマネージ リソースのクリーンアップを許可する、ファイナライズ可能なオブジェクトは、プラットフォーム内でのメソッドの実行中にガベージ コレクションによって解放することができますを呼び出す呼び出します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-112">Although overrides to the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method allow cleanup of unmanaged resources when an object is being garbage collected, in some circumstances, finalizable objects can be reclaimed by garbage collection while executing a method within a platform invoke call.</span></span> <span data-ttu-id="cacf6-113">ファイナライザーは、そのプラットフォームに渡されるハンドルを解放する場合は、呼び出し、ハンドルの破損する可能性が。</span><span class="sxs-lookup"><span data-stu-id="cacf6-113">If a finalizer frees the handle passed to that platform invoke call, it could lead to handle corruption.</span></span> <span data-ttu-id="cacf6-114">プラットフォームの中に、メソッドがブロックされている間、ハンドルが解放もされるなど、ファイルの読み取り中に呼び出しを起動します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-114">The handle could also be reclaimed while your method is blocked during a platform invoke call, such as while reading a file.</span></span>  
  
 <span data-ttu-id="cacf6-115">非常により、Windows では、積極的にハンドルを再利用、ため、ハンドルはリサイクルされ、機密データを含む可能性がある別のリソースをポイントが。</span><span class="sxs-lookup"><span data-stu-id="cacf6-115">More critically, because Windows aggressively recycles handles, a handle could be recycled and point to another resource that might contain sensitive data.</span></span> <span data-ttu-id="cacf6-116">これは、リサイクルの攻撃と呼ばれますとできますデータが破損する可能性のあるセキュリティの脅威となります。</span><span class="sxs-lookup"><span data-stu-id="cacf6-116">This is known as a recycle attack and can potentially corrupt data and be a security threat.</span></span>  
  
<a name="Does"></a>   
## <a name="what-safehandle-does"></a><span data-ttu-id="cacf6-117">SafeHandle の特長</span><span class="sxs-lookup"><span data-stu-id="cacf6-117">What SafeHandle does</span></span>  
 <span data-ttu-id="cacf6-118"><xref:System.Runtime.InteropServices.SafeHandle>クラスは、これらオブジェクトの有効期間に関する問題のいくつかを簡素化し、プラットフォームと統合されて起動オペレーティング システムのリソースがリークしないようにします。</span><span class="sxs-lookup"><span data-stu-id="cacf6-118">The <xref:System.Runtime.InteropServices.SafeHandle> class simplifies several of these object lifetime issues, and is integrated with platform invoke so that operating system resources are not leaked.</span></span> <span data-ttu-id="cacf6-119"><xref:System.Runtime.InteropServices.SafeHandle>クラスは、割り当てと解放を中断することがなくハンドルによってオブジェクトの有効期間に関する問題を解決します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-119">The <xref:System.Runtime.InteropServices.SafeHandle> class resolves object lifetime issues by assigning and releasing handles without interruption.</span></span> <span data-ttu-id="cacf6-120">によって、ハンドルが閉じられるし、予期しない時に実行することが保証 クリティカル ファイナライザーが含まれている<xref:System.AppDomain>アンロードされると、プラットフォーム呼び出しの場合であってが破損した状態であると見なされます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-120">It contains a critical finalizer that ensures that the handle is closed and is guaranteed to run during unexpected <xref:System.AppDomain> unloads, even in cases when the platform invoke call is assumed to be in a corrupted state.</span></span>  
  
 <span data-ttu-id="cacf6-121"><xref:System.Runtime.InteropServices.SafeHandle>継承<xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject>、クリティカル ファイナライザーの前に、すべてのクリティカル ファイナライザーと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-121">Because <xref:System.Runtime.InteropServices.SafeHandle> inherits from <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject>, all the noncritical finalizers are called before any of the critical finalizers.</span></span> <span data-ttu-id="cacf6-122">同じガベージ コレクションの実行中にライブは不要になったオブジェクトでは、ファイナライザーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-122">The finalizers are called on objects that are no longer live during the same garbage collection pass.</span></span> <span data-ttu-id="cacf6-123">たとえば、<xref:System.IO.FileStream>オブジェクトがリークまたはリサイクルされるハンドルのリスクを負うことがなくバッファー内の既存のデータをフラッシュする通常のファイナライザーを実行できます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-123">For example, a <xref:System.IO.FileStream> object can run a normal finalizer to flush out existing buffered data without the risk of the handle being leaked or recycled.</span></span> <span data-ttu-id="cacf6-124">一般的な用途は、重要および重大でないファイナライザーの間でこの非常に弱い順序付けすることはありません。</span><span class="sxs-lookup"><span data-stu-id="cacf6-124">This very weak ordering between critical and noncritical finalizers is not intended for general use.</span></span> <span data-ttu-id="cacf6-125">使用するこれらのライブラリを許可することで既存のライブラリの移行を支援するには、主に存在する<xref:System.Runtime.InteropServices.SafeHandle>のセマンティクスを変更することがなく。</span><span class="sxs-lookup"><span data-stu-id="cacf6-125">It exists primarily to assist in the migration of existing libraries by allowing those libraries to use <xref:System.Runtime.InteropServices.SafeHandle> without altering their semantics.</span></span> <span data-ttu-id="cacf6-126">さらに、クリティカル ファイナライザーと何も呼び出してなど、<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType>メソッドが制約された実行領域である必要があります。</span><span class="sxs-lookup"><span data-stu-id="cacf6-126">Additionally, the critical finalizer and anything it calls, such as the <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType> method, must be in a constrained execution region.</span></span> <span data-ttu-id="cacf6-127">これには、ファイナライザーの呼び出しグラフ内でどのようなコードを記述する制約が適用されます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-127">This imposes constraints on what code can be written within the finalizer's call graph.</span></span>  
  
 <span data-ttu-id="cacf6-128">プラットフォームが自動的に操作を呼び出しによってカプセル化されたハンドルの参照カウントをインクリメント、<xref:System.Runtime.InteropServices.SafeHandle>と完了時にそれらをデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="cacf6-128">Platform invoke operations automatically increment the reference count of handles encapsulated by a <xref:System.Runtime.InteropServices.SafeHandle> and decrement them upon completion.</span></span> <span data-ttu-id="cacf6-129">これにより、ハンドル リサイクルまたはされませんを閉じました。</span><span class="sxs-lookup"><span data-stu-id="cacf6-129">This ensures that the handle will not be recycled or closed unexpectedly.</span></span>  
  
 <span data-ttu-id="cacf6-130">基になるハンドルの所有権を指定するには、構築するときに<xref:System.Runtime.InteropServices.SafeHandle>オブジェクトに値を指定して、`ownsHandle`引数、<xref:System.Runtime.InteropServices.SafeHandle>クラスのコンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="cacf6-130">You can specify ownership of the underlying handle when constructing <xref:System.Runtime.InteropServices.SafeHandle> objects by supplying a value to the `ownsHandle` argument in the <xref:System.Runtime.InteropServices.SafeHandle> class constructor.</span></span> <span data-ttu-id="cacf6-131">これを制御するかどうか、<xref:System.Runtime.InteropServices.SafeHandle>オブジェクトは、オブジェクトが破棄された後に、ハンドルが解放されます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-131">This controls whether the <xref:System.Runtime.InteropServices.SafeHandle> object will release the handle after the object has been disposed.</span></span>  <span data-ttu-id="cacf6-132">これは特殊な有効期間の要件でのハンドルまたは有効期限が他のユーザーによって制御されるハンドルを使用するために役立ちます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-132">This is useful for handles with peculiar lifetime requirements or for consuming a handle whose lifetime is controlled by someone else.</span></span>  
  
<a name="Derived"></a>   
## <a name="classes-derived-from-safehandle"></a><span data-ttu-id="cacf6-133">SafeHandle から派生したクラス</span><span class="sxs-lookup"><span data-stu-id="cacf6-133">Classes derived from SafeHandle</span></span>  
 <span data-ttu-id="cacf6-134"><xref:System.Runtime.InteropServices.SafeHandle> オペレーティング システム ハンドルの抽象ラッパー クラスです。</span><span class="sxs-lookup"><span data-stu-id="cacf6-134"><xref:System.Runtime.InteropServices.SafeHandle> is an abstract wrapper class for operating system handles.</span></span> <span data-ttu-id="cacf6-135">このクラスからの派生は困難です。</span><span class="sxs-lookup"><span data-stu-id="cacf6-135">Deriving from this class is difficult.</span></span> <span data-ttu-id="cacf6-136">代わりに、次のセーフ ハンドルを提供する <xref:Microsoft.Win32.SafeHandles> 名前空間の派生クラスを使用してください。</span><span class="sxs-lookup"><span data-stu-id="cacf6-136">Instead, use the derived classes in the <xref:Microsoft.Win32.SafeHandles> namespace that provide safe handles for the following:</span></span>  
  
-   <span data-ttu-id="cacf6-137">ファイル (、<xref:Microsoft.Win32.SafeHandles.SafeFileHandle>クラス)。</span><span class="sxs-lookup"><span data-stu-id="cacf6-137">Files (the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class).</span></span>  
  
-   <span data-ttu-id="cacf6-138">メモリ マップ ファイル (、<xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle>クラス)。</span><span class="sxs-lookup"><span data-stu-id="cacf6-138">Memory mapped files (the <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> class).</span></span>  
  
-   <span data-ttu-id="cacf6-139">パイプ (、<xref:Microsoft.Win32.SafeHandles.SafePipeHandle>クラス)。</span><span class="sxs-lookup"><span data-stu-id="cacf6-139">Pipes (the <xref:Microsoft.Win32.SafeHandles.SafePipeHandle> class).</span></span>  
  
-   <span data-ttu-id="cacf6-140">メモリ ビュー (、<xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle>クラス)。</span><span class="sxs-lookup"><span data-stu-id="cacf6-140">Memory views (the <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> class).</span></span>  
  
-   <span data-ttu-id="cacf6-141">暗号の構成要素 (、 <xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle>、 <xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>、 <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>、および<xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle>クラス)。</span><span class="sxs-lookup"><span data-stu-id="cacf6-141">Cryptography constructs (the <xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, and <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> classes).</span></span>  
  
-   <span data-ttu-id="cacf6-142">プロセス (、<xref:Microsoft.Win32.SafeHandles.SafeProcessHandle>クラス)。</span><span class="sxs-lookup"><span data-stu-id="cacf6-142">Processes (the <xref:Microsoft.Win32.SafeHandles.SafeProcessHandle> class).</span></span>  
  
-   <span data-ttu-id="cacf6-143">レジストリ キー (、<xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle>クラス)。</span><span class="sxs-lookup"><span data-stu-id="cacf6-143">Registry keys (the <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> class).</span></span>  
  
-   <span data-ttu-id="cacf6-144">待機ハンドル (、<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>クラス)。</span><span class="sxs-lookup"><span data-stu-id="cacf6-144">Wait handles (the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> class).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cacf6-145">次のコード例から派生するオペレーティング システム ファイル ハンドル用のカスタムのセーフ ハンドルを作成します。<xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-145">The following code example creates a custom safe handle for an operating system file handle, deriving from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>.</span></span> <span data-ttu-id="cacf6-146">ファイルからバイトを読み取るし、16 進数の値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-146">It reads bytes from a file and displays their hexadecimal values.</span></span> <span data-ttu-id="cacf6-147">テスト ハーネスの障害も含まれています。 スレッドを中止するには、原因となったが、ハンドル値は解放されます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-147">It also contains a fault testing harness that causes the thread to abort, but the handle value is freed.</span></span>  <span data-ttu-id="cacf6-148">使用する場合、<xref:System.IntPtr>ハンドルを表す、ハンドルが非同期のスレッドの中止のためリーク場合があります。</span><span class="sxs-lookup"><span data-stu-id="cacf6-148">When using an <xref:System.IntPtr> to represent handles, the handle is occasionally leaked due to the asynchronous thread abort.</span></span>  
  
 <span data-ttu-id="cacf6-149">コンパイル済みのアプリケーションと同じフォルダー内のテキスト ファイルを必要があります。</span><span class="sxs-lookup"><span data-stu-id="cacf6-149">You will need a text file in the same folder as the compiled application.</span></span> <span data-ttu-id="cacf6-150">コマンドラインの使用方法は、"hexviewer"だというアプリケーションの名前を入力すると仮定した場合です。</span><span class="sxs-lookup"><span data-stu-id="cacf6-150">Assuming that you name the application "HexViewer", the command line usage is:</span></span>  
  
 `HexViewer <filename> -Fault`  
  
 <span data-ttu-id="cacf6-151">必要に応じて指定`-Fault`意図的に特定のウィンドウでスレッドを中止することによって、ハンドルをリークしようとします。</span><span class="sxs-lookup"><span data-stu-id="cacf6-151">Optionally specify `-Fault` to intentionally attempt to leak the handle by aborting the thread in a certain window.</span></span> <span data-ttu-id="cacf6-152">Windows Perfmon.exe ツールを使用すると、エラーを作り出す中にハンドル カウントを監視できます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-152">Use the Windows Perfmon.exe tool to monitor handle counts while injecting faults.</span></span>  
  
 [!code-csharp[SafeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="cacf6-153">継承クラスの完全な信頼。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cacf6-153">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="cacf6-154">部分的に信頼されたコードでは、このメンバーを継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cacf6-154">This member cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <permission cref="T:System.Security.SecurityCriticalAttribute">
      <span data-ttu-id="cacf6-155">直前の呼び出し元に対する完全な信頼が必要です。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cacf6-155">requires full trust for the immediate caller.</span>
      </span>
      <span data-ttu-id="cacf6-156">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cacf6-156">This member cannot be used by partially trusted or transparent code.</span>
      </span>
    </permission>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="cacf6-157">派生したクラスを作成する<see cref="T:System.Runtime.InteropServices.SafeHandle" />を作成し、オペレーティング システム ハンドルを解放する方法を理解する必要があります。</span>
        <span class="sxs-lookup">
          <span data-stu-id="cacf6-157">To create a class derived from <see cref="T:System.Runtime.InteropServices.SafeHandle" />, you must know how to create and free an operating system handle.</span>
        </span>
        <span data-ttu-id="cacf6-158">別のハンドル型の一部を使用しているために、このプロセスは異なる、 [CloseHandle](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx)関数などのより特定の機能を使用しながら[unmapviewoffile に](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx)または[FindClose](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx).</span>
        <span class="sxs-lookup">
          <span data-stu-id="cacf6-158">This process is different for different handle types because some use the [CloseHandle](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx) function, while others use more specific functions such as [UnmapViewOfFile](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx) or [FindClose](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx).</span>
        </span>
        <span data-ttu-id="cacf6-159">このための派生クラスを作成する必要があります<see cref="T:System.Runtime.InteropServices.SafeHandle" />でセーフ ハンドルをラップするオペレーティング システム ハンドルの種類ごとにします。</span>
        <span class="sxs-lookup">
          <span data-stu-id="cacf6-159">For this reason, you must create a derived class of <see cref="T:System.Runtime.InteropServices.SafeHandle" /> for each operating system handle type that you want to wrap in a safe handle.</span>
        </span>
        <span data-ttu-id="cacf6-160">
          <see cref="T:System.Runtime.InteropServices.SafeHandle" /> から継承する場合は、<see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> メンバーと <see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" /> メンバーをオーバーライドする必要があります。</span>
        <span class="sxs-lookup">
          <span data-stu-id="cacf6-160">When you inherit from <see cref="T:System.Runtime.InteropServices.SafeHandle" />, you must override the following members: <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> and <see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />.</span>
        </span>
        <span data-ttu-id="cacf6-161">値は、無効なハンドル値を表す、基本コンス トラクターを呼び出す既定のコンス トラクターを提供することも必要があります、<see cref="T:System.Boolean" />ネイティブ ハンドルを所有するかどうかを示す値、<see cref="T:System.Runtime.InteropServices.SafeHandle" />され、その結果はときに解放する必要があります<see cref="T:System.Runtime.InteropServices.SafeHandle" />は破棄されています。</span>
        <span class="sxs-lookup">
          <span data-stu-id="cacf6-161">You should also provide a default constructor that calls the base constructor with a value that represent an invalid handle value, and a <see cref="T:System.Boolean" /> value indicating whether the native handle is owned by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> and consequently should be freed when that <see cref="T:System.Runtime.InteropServices.SafeHandle" /> has been disposed.</span>
        </span>
      </para>
    </block>
    <altmember cref="N:Microsoft.Win32.SafeHandles" />
    <altmember cref="T:System.Runtime.InteropServices.CriticalHandle" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SafeHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SafeHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SafeHandle (IntPtr invalidHandleValue, bool ownsHandle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int invalidHandleValue, bool ownsHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (invalidHandleValue As IntPtr, ownsHandle As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SafeHandle(IntPtr invalidHandleValue, bool ownsHandle);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.SafeHandle : nativeint * bool -&gt; System.Runtime.InteropServices.SafeHandle" Usage="new System.Runtime.InteropServices.SafeHandle (invalidHandleValue, ownsHandle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="invalidHandleValue" Type="System.IntPtr" />
        <Parameter Name="ownsHandle" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="invalidHandleValue">
          <span data-ttu-id="cacf6-162">無効なハンドルの値 (通常は 0 または -1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-162">The value of an invalid handle (usually 0 or -1).</span>
          </span>
          <span data-ttu-id="cacf6-163">
            <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> の実装では、この値に対して <see langword="true" /> を返す必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-163">Your implementation of <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> should return <see langword="true" /> for this value.</span>
          </span>
        </param>
        <param name="ownsHandle">
          <span data-ttu-id="cacf6-164">終了処理中に <see langword="true" /> によってハンドルを確実に解放する場合は <see cref="T:System.Runtime.InteropServices.SafeHandle" />。それ以外の場合は <see langword="false" /> (お勧めしません)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-164">
              <see langword="true" /> to reliably let <see cref="T:System.Runtime.InteropServices.SafeHandle" /> release the handle during the finalization phase; otherwise, <see langword="false" /> (not recommended).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cacf6-165">指定した無効なハンドル値を使用して、<see cref="T:System.Runtime.InteropServices.SafeHandle" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-165">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class with the specified invalid handle value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-166">場合、`ownsHandle`パラメーターが`false`、<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>は呼び出されません。 したがって、これは使用しないでリソース リークが発生する、コードとしては、このパラメーターの値を使用します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-166">If the `ownsHandle` parameter is `false`, <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> is never called; thus, it is not recommended to use this parameter value as your code may leak resources.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cacf6-167">派生クラスがアンマネージ コードのアクセス許可なしにアセンブリに存在しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-167">The derived class resides in an assembly without unmanaged code access permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="cacf6-168">継承クラスの完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-168">for full trust for inheritors.</span>
          </span>
          <span data-ttu-id="cacf6-169">部分的に信頼されたコードでは、このメンバーを継承できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-169">This member cannot be inherited by partially trusted code.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="cacf6-170">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-170">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="cacf6-171">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-171">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="safeHandle.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cacf6-172">リソースを解放するためのハンドルをマークします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-172">Marks the handle for releasing and freeing resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-173">呼び出す、<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>または<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>メソッドにより、リソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-173">Calling the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method allows the resources to be freed.</span></span> <span data-ttu-id="cacf6-174">これにより、他のスレッドが同じのセーフ ハンドル オブジェクトを使用している場合は、すぐに行われない可能性がありますが、できなくなるとすぐに実行されます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-174">This might not happen immediately if other threads are using the same safe handle object, but will happen as soon as that is no longer the case.</span></span> <span data-ttu-id="cacf6-175">ほとんどのクラスを使用するが、<xref:System.Runtime.InteropServices.SafeHandle>クラスは、これが必要になる、ファイナライザーを用意する必要はありません (たとえば、ファイル バッファーをフラッシュするかを記述するいくつかのデータ バックアップをメモリに)。</span><span class="sxs-lookup"><span data-stu-id="cacf6-175">Although most classes that use the <xref:System.Runtime.InteropServices.SafeHandle> class do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</span></span> <span data-ttu-id="cacf6-176">この場合は、クラスの前に実行することが保証されるファイナライザーを提供、<xref:System.Runtime.InteropServices.SafeHandle>クリティカル ファイナライザーを実行します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-176">In this case, the class can provide a finalizer that is guaranteed to run before the <xref:System.Runtime.InteropServices.SafeHandle> critical finalizer runs.</span></span>  
  
 <span data-ttu-id="cacf6-177">呼び出す、<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>または<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>が完了したら、メソッドを使用して、<xref:System.Runtime.InteropServices.SafeHandle>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cacf6-177">Call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method when you are finished using the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cacf6-178">常に呼び出す<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>または<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>への参照を解放する前に、<xref:System.Runtime.InteropServices.SafeHandle>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cacf6-178">Always call <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> before you release your last reference to the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="cacf6-179">そうしないと、ガベージ コレクターが <xref:System.Runtime.InteropServices.SafeHandle> オブジェクトの <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="cacf6-179">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.InteropServices.SafeHandle> object's <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="cacf6-180">アンマネージ コードを呼び出すアクセス許可。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-180">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="cacf6-181">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-181">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="cacf6-182">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-182">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DangerousAddRef">
      <MemberSignature Language="C#" Value="public void DangerousAddRef (ref bool success);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DangerousAddRef(bool&amp; success) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DangerousAddRef (ByRef success As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DangerousAddRef(bool % success);" />
      <MemberSignature Language="F#" Value="member this.DangerousAddRef :  -&gt; unit" Usage="safeHandle.DangerousAddRef success" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-1.5;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="success" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="success">
          <span data-ttu-id="cacf6-183">参照カウンターが正常にインクリメントされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-183">
              <see langword="true" /> if the reference counter was successfully incremented; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cacf6-184">
            <see cref="T:System.Runtime.InteropServices.SafeHandle" /> インスタンスの参照カウンターを手動でインクリメントします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-184">Manually increments the reference counter on <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instances.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-185"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>メソッドでは、共通言語ランタイムを防ぎますハンドルによって使用されるメモリを再利用 (ランタイムが呼び出す場合に発生する、<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>メソッド)。</span><span class="sxs-lookup"><span data-stu-id="cacf6-185">The <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> method prevents the common language runtime from reclaiming memory used by a handle (which occurs when the runtime calls the <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method).</span></span> <span data-ttu-id="cacf6-186">このメソッドの参照カウントを手動でインクリメントを使用することができます、<xref:System.Runtime.InteropServices.SafeHandle>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="cacf6-186">You can use this method to manually increment the reference count on a <xref:System.Runtime.InteropServices.SafeHandle> instance.</span></span> <span data-ttu-id="cacf6-187"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 使用してブール値を返します、`ref`パラメーター (`success`)、参照カウントが正常にインクリメントされたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-187"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> returns a Boolean value using a `ref` parameter (`success`) that indicates whether the reference count was incremented successfully.</span></span> <span data-ttu-id="cacf6-188">これにより、障害発生時に、プログラム ロジックです。</span><span class="sxs-lookup"><span data-stu-id="cacf6-188">This allows your program logic to back out in case of failure.</span></span> <span data-ttu-id="cacf6-189">設定する必要があります`success`に`false`呼び出す前に<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-189">You should set `success` to `false` before calling <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span> <span data-ttu-id="cacf6-190">場合`success`は`true`への呼び出しを照合することによってリソースのリークを避けるため<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>に対応する呼び出しで<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-190">If `success` is `true`, avoid resource leaks by matching the call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> with a corresponding call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="cacf6-191">このメソッドは、高度なユーザーのためのものでは、常に慎重に使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cacf6-191">This method is intended for advanced users and must always be used carefully.</span></span> <span data-ttu-id="cacf6-192">ハンドル リソースのリークを避けるため、常に、スレッドの中止が処理を中断できない制約された実行領域 (CER) 内でこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-192">To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="cacf6-193">アンマネージ コードを呼び出すアクセス許可。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-193">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="cacf6-194">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-194">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="cacf6-195">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-195">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease" />
      </Docs>
    </Member>
    <Member MemberName="DangerousGetHandle">
      <MemberSignature Language="C#" Value="public IntPtr DangerousGetHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int DangerousGetHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function DangerousGetHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr DangerousGetHandle();" />
      <MemberSignature Language="F#" Value="member this.DangerousGetHandle : unit -&gt; nativeint" Usage="safeHandle.DangerousGetHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cacf6-196">
            <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> フィールドの値を戻します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-196">Returns the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cacf6-197">
            <see langword="IntPtr" /> フィールドの値を表す <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-197">An <see langword="IntPtr" /> representing the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</span>
          </span>
          <span data-ttu-id="cacf6-198">ハンドルが <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" /> で無効としてマークされている場合にも、このメソッドは元のハンドル値を返すため、返される値が古い値である可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-198">If the handle has been marked invalid with <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />, this method still returns the original handle value, which can be a stale value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-199">インスタンスから実際のハンドル値を取得するこのメソッドを使用することができます、<xref:System.Runtime.InteropServices.SafeHandle>クラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-199">You can use this method to retrieve the actual handle value from an instance of the <xref:System.Runtime.InteropServices.SafeHandle> derived class.</span></span> <span data-ttu-id="cacf6-200">このメソッドは、必要な下位互換性、.NET Framework のプロパティの多くを返すため`IntPtr`型を処理します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-200">This method is needed for backwards compatibility because many properties in the .NET Framework return `IntPtr` handle types.</span></span> <span data-ttu-id="cacf6-201">`IntPtr` ハンドル型は、プラットフォーム固有の型のポインターまたはハンドルを表すために使用します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-201">`IntPtr` handle types are platform-specific types used to represent a pointer or a handle.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="cacf6-202">使用して、<xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>メソッドはセキュリティ上のリスクをもたらすことができますので、ハンドルが設定されている場合に無効として、 <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>、<xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>も古い可能性がある、元のハンドル値を返します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-202">Using the <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> method can pose security risks because, if the handle has been marked as invalid with <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>, <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> still returns the original, potentially stale handle value.</span></span> <span data-ttu-id="cacf6-203">返されたハンドルは、任意の時点でリサイクルされることもできます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-203">The returned handle can also be recycled at any point.</span></span> <span data-ttu-id="cacf6-204">せいぜい、ハンドルが突然動作を停止した可能性がありますこれを意味します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-204">At best, this means the handle might suddenly stop working.</span></span> <span data-ttu-id="cacf6-205">最悪の場合、ハンドルまたはハンドルを表すリソースは、信頼されていないコードに公開されるが、これで、再利用または返されるハンドル リサイクル セキュリティ攻撃につながることができます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-205">At worst, if the handle or the resource that the handle represents is exposed to untrusted code, this can lead to a recycling security attack on the reused or returned handle.</span></span> <span data-ttu-id="cacf6-206">など、信頼されていない呼び出し元はハンドルで、返されるデータのクエリを実行し、まったく関係のないリソースの情報を受信できます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-206">For example, an untrusted caller can query data on the handle just returned and receive information for an entirely unrelated resource.</span></span> <span data-ttu-id="cacf6-207">参照してください、<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>と<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>メソッド使用の詳細について、 <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> methodsafely します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-207">See the <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> and the <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> methods for more information about using the <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> methodsafely.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="cacf6-208">アンマネージ コードを呼び出すアクセス許可。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-208">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="cacf6-209">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-209">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="cacf6-210">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-210">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DangerousRelease">
      <MemberSignature Language="C#" Value="public void DangerousRelease ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DangerousRelease() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease" />
      <MemberSignature Language="VB.NET" Value="Public Sub DangerousRelease ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DangerousRelease();" />
      <MemberSignature Language="F#" Value="member this.DangerousRelease : unit -&gt; unit" Usage="safeHandle.DangerousRelease " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-1.5;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cacf6-211">
            <see cref="T:System.Runtime.InteropServices.SafeHandle" /> インスタンスの参照カウンターを手動でデクリメントします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-211">Manually decrements the reference counter on a <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-212"><xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>メソッドに対応するは<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-212">The <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> method is the counterpart to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span> <span data-ttu-id="cacf6-213">呼び出しを常に一致する必要があります、<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>メソッド呼び出しは成功を<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-213">You should always match a call to the <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> method with a successful call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="cacf6-214">このメソッドは、高度なユーザーのためのものでは、常に慎重に使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cacf6-214">This method is intended for advanced users and must always be used carefully.</span></span> <span data-ttu-id="cacf6-215">ハンドル リソースのリークを避けるため、常に、スレッドの中止が処理を中断できない制約された実行領域 (CER) 内でこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-215">To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing.</span></span> <span data-ttu-id="cacf6-216">同じ方法を比類のない<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>呼び出しによりリソースのリーク、比類のない<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>呼び出しを他のスレッドを表示するに無効なハンドルの状態が発生することができます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-216">In the same way that unmatched <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> calls can cause resource leaks, unmatched <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> calls can cause invalid handle states to become visible to other threads.</span></span> <span data-ttu-id="cacf6-217">公開しない<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>または<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>信頼されていないコードへの呼び出し。</span><span class="sxs-lookup"><span data-stu-id="cacf6-217">Do not expose <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> or <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> calls to untrusted code.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="cacf6-218">アンマネージ コードを呼び出すアクセス許可。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-218">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="cacf6-219">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-219">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="cacf6-220">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-220">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cacf6-221">
            <see cref="T:System.Runtime.InteropServices.SafeHandle" /> クラスによって使用されているリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-221">Releases the resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="safeHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-1.5;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cacf6-222">
            <see cref="T:System.Runtime.InteropServices.SafeHandle" /> クラスによって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-222">Releases all resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-223">呼び出す、<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>または<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>メソッドにより、リソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-223">Calling the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method allows the resources to be freed.</span></span> <span data-ttu-id="cacf6-224">これにより、他のスレッドは、セーフ ハンドルの同じインスタンスを使用している場合は、すぐに行われない可能性がありますが、できなくなるとすぐに実行されます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-224">This might not happen immediately if other threads are using the same instance of the safe handle, but will happen as soon as that is no longer the case.</span></span> <span data-ttu-id="cacf6-225">クラスの使用の最も<xref:System.Runtime.InteropServices.SafeHandle>ファイナライザーを提供する必要はありません、これは (たとえば、ファイル バッファをフラッシュするまたは一部のデータをメモリに書き戻す) 必要があります。</span><span class="sxs-lookup"><span data-stu-id="cacf6-225">Although most classes using <xref:System.Runtime.InteropServices.SafeHandle> do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</span></span> <span data-ttu-id="cacf6-226">この場合は、前に実行することが保証されるファイナライザーを提示できます、<xref:System.Runtime.InteropServices.SafeHandle>クリティカル ファイナライザーを実行します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-226">In this case, they can provide a finalizer that is guaranteed to run before the <xref:System.Runtime.InteropServices.SafeHandle> critical finalizer runs.</span></span>  
  
 <span data-ttu-id="cacf6-227">呼び出す、<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>または<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>が完了したら、メソッドを使用して、<xref:System.Runtime.InteropServices.SafeHandle>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cacf6-227">Call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method when you are finished using the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="cacf6-228"><xref:System.Runtime.InteropServices.SafeHandle.Close%2A>メソッドによって、<xref:System.Runtime.InteropServices.SafeHandle>オブジェクトを使用できない状態です。</span><span class="sxs-lookup"><span data-stu-id="cacf6-228">The <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> method leaves the <xref:System.Runtime.InteropServices.SafeHandle> object in an unusable state.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cacf6-229">常に呼び出し、<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>または<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>メソッドへの参照を解放する前に、<xref:System.Runtime.InteropServices.SafeHandle>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cacf6-229">Always call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method before you release your last reference to the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="cacf6-230">そうしないと、ガベージ コレクターが <xref:System.Runtime.InteropServices.SafeHandle> オブジェクトの <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="cacf6-230">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.InteropServices.SafeHandle> object's <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="cacf6-231">アンマネージ コードを呼び出すアクセス許可。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-231">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="cacf6-232">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-232">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="cacf6-233">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-233">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="safeHandle.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-1.5;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="cacf6-234">通常の破棄操作を実行する場合は <see langword="true" />。ハンドルを終了する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-234">
              <see langword="true" /> for a normal dispose operation; <see langword="false" /> to finalize the handle.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cacf6-235">通常の破棄操作を実行するかどうかを指定して、<see cref="T:System.Runtime.InteropServices.SafeHandle" /> クラスによって使用されているアンマネージ リソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-235">Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class specifying whether to perform a normal dispose operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-236">明示的に呼び出す必要があります、<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>メソッドを`disposing`パラメーターに設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-236">You should never explicitly call the <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method with the `disposing` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="cacf6-237">アンマネージ コードを呼び出すアクセス許可。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-237">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="cacf6-238">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-238">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="cacf6-239">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-239">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SafeHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SafeHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="safeHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cacf6-240">ハンドルに関連付けられたすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-240">Frees all resources associated with the handle.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-241"><xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A>メソッドは、デストラクター、<xref:System.Runtime.InteropServices.SafeHandle>クラス。</span><span class="sxs-lookup"><span data-stu-id="cacf6-241">The <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method is the destructor for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span> <span data-ttu-id="cacf6-242">アプリケーション コードでは、このメソッドを直接呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="cacf6-242">Application code should not call this method directly.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="cacf6-243">アンマネージ コードを呼び出すアクセス許可。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-243">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="cacf6-244">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-244">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="cacf6-245">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-245">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="handle">
      <MemberSignature Language="C#" Value="protected IntPtr handle;" />
      <MemberSignature Language="ILAsm" Value=".field family native int handle" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.SafeHandle.handle" />
      <MemberSignature Language="VB.NET" Value="Protected handle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: IntPtr handle;" />
      <MemberSignature Language="F#" Value="val mutable handle : nativeint" Usage="System.Runtime.InteropServices.SafeHandle.handle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cacf6-246">ラップするハンドルを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-246">Specifies the handle to be wrapped.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-247">ハンドルをパブリックに公開しません (つまり、派生クラスの外部で)。</span><span class="sxs-lookup"><span data-stu-id="cacf6-247">Do not expose the handle publicly (that is, outside of the derived class).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.SafeHandle.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClosed : bool" Usage="System.Runtime.InteropServices.SafeHandle.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cacf6-248">ハンドルが閉じているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-248">Gets a value indicating whether the handle is closed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cacf6-249">ハンドルが閉じている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-249">
              <see langword="true" /> if the handle is closed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-250"><xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A>メソッドを示す値を返すかどうか、<xref:System.Runtime.InteropServices.SafeHandle>オブジェクトのハンドルは、ネイティブ リソースに関連付けられてが不要になった。</span><span class="sxs-lookup"><span data-stu-id="cacf6-250">The <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> method returns a value indicating whether the <xref:System.Runtime.InteropServices.SafeHandle> object's handle is no longer associated with a native resource.</span></span> <span data-ttu-id="cacf6-251">定義からこれに対し、<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>プロパティで、計算するかどうか指定したハンドルが常に無効と見なされます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-251">This differs from the definition of the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property, which computes whether a given handle is always considered invalid.</span></span> <span data-ttu-id="cacf6-252"><xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A>メソッドを返します。 を`true`値は、次の場合。</span><span class="sxs-lookup"><span data-stu-id="cacf6-252">The <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> method returns a `true` value in the following cases:</span></span>  
  
-   <span data-ttu-id="cacf6-253"><xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>メソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="cacf6-253">The <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> method was called.</span></span>  
  
-   <span data-ttu-id="cacf6-254"><xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>メソッドまたは<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>メソッドが呼び出されへの参照がない、<xref:System.Runtime.InteropServices.SafeHandle>他のスレッド上のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cacf6-254">The <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method or <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> method was called and there are no references to the <xref:System.Runtime.InteropServices.SafeHandle> object on other threads.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="cacf6-255">アンマネージ コードを呼び出すアクセス許可。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-255">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="cacf6-256">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-256">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="cacf6-257">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-257">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IsInvalid">
      <MemberSignature Language="C#" Value="public abstract bool IsInvalid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInvalid" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsInvalid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsInvalid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInvalid : bool" Usage="System.Runtime.InteropServices.SafeHandle.IsInvalid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cacf6-258">派生クラスでオーバーライドされると、ハンドル値が無効かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-258">When overridden in a derived class, gets a value indicating whether the handle value is invalid.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cacf6-259">ハンドル値が無効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-259">
              <see langword="true" /> if the handle value is invalid; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-260">派生クラスで実装する必要があります、<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>プロパティ、共通言語ランタイムはクリティカル ファイナライズが必要かどうかを確認できるようにします。</span><span class="sxs-lookup"><span data-stu-id="cacf6-260">Derived classes must implement the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property so that the common language runtime can determine whether critical finalization is required.</span></span> <span data-ttu-id="cacf6-261">派生クラスでサポートされるハンドルの一般的な型に合った実装を提供する必要があります (0 または-1 が無効です)。</span><span class="sxs-lookup"><span data-stu-id="cacf6-261">Derived classes must provide an implementation that suits the general type of handle they support (0 or -1 is invalid).</span></span> <span data-ttu-id="cacf6-262">これらのクラスは、特定のセーフ ハンドルの種類をさらに派生します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-262">These classes can then be further derived for specific safe handle types.</span></span>  
  
 <span data-ttu-id="cacf6-263">異なり、<xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A>プロパティ、報告するかどうか、 <xref:System.Runtime.InteropServices.SafeHandle> 、基になるハンドルを使用してオブジェクトが完了した、<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>プロパティを計算するかどうか指定したハンドルの値は常に無効と見なされます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-263">Unlike the <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> property, which reports whether the <xref:System.Runtime.InteropServices.SafeHandle> object has finished using the underlying handle, the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property calculates whether the given handle value is always considered invalid.</span></span> <span data-ttu-id="cacf6-264">そのため、<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>プロパティは常に任意の 1 つのハンドル値に対して同じ値を返します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-264">Therefore, the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property always returns the same value for any one handle value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cacf6-265">次の例では、ファイルが正常に開かれたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-265">The following example checks if a file was opened successfully.</span></span> <span data-ttu-id="cacf6-266">このコード例が示されている例の一部、<xref:System.Runtime.InteropServices.SafeHandle>クラス。</span><span class="sxs-lookup"><span data-stu-id="cacf6-266">This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 [!code-csharp[SafeHandle#2](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="cacf6-267">アンマネージ コードを呼び出すアクセス許可。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-267">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="cacf6-268">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-268">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="cacf6-269">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-269">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="protected abstract bool ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ReleaseHandle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; bool" Usage="safeHandle.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cacf6-270">派生クラスでオーバーライドされると、ハンドルを解放するために必要なコードを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-270">When overridden in a derived class, executes the code required to free the handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cacf6-271">ハンドルが正常に解放された場合は <see langword="true" />。深刻なエラーが発生した場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-271">
              <see langword="true" /> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="cacf6-272">この場合、<see href="https://docs.microsoft.com/dotnet/framework/debug-trace-profile/releasehandlefailed-mda">releaseHandleFailed</see> マネージド デバッグ アシスタントが生成されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-272">In this case, it generates a <see href="https://docs.microsoft.com/dotnet/framework/debug-trace-profile/releasehandlefailed-mda">releaseHandleFailed</see> Managed Debugging Assistant.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-273"><xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>メソッドだけで、ハンドルがによって定義されている有効な場合にのみと呼び出されることが保証、<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="cacf6-273">The <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method is guaranteed to be called only once and only if the handle is valid as defined by the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property.</span></span> <span data-ttu-id="cacf6-274">このメソッドの実装、<xref:System.Runtime.InteropServices.SafeHandle>ハンドルを解放するために必要なすべてのコードを実行するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-274">Implement this method in your <xref:System.Runtime.InteropServices.SafeHandle> derived classes to execute any code that is required to free the handle.</span></span> <span data-ttu-id="cacf6-275">の関数の 1 つ<xref:System.Runtime.InteropServices.SafeHandle>、コードの実装では、リソースのリークの防止を保証するためには、<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>失敗しない必要があります。</span><span class="sxs-lookup"><span data-stu-id="cacf6-275">Because one of the functions of <xref:System.Runtime.InteropServices.SafeHandle> is to guarantee prevention of resource leaks, the code in your implementation of <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> must never fail.</span></span> <span data-ttu-id="cacf6-276">ガベージ コレクター<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>ガベージ コレクションで同時に収集されたオブジェクトの通常のファイナライザーが実行された後にします。</span><span class="sxs-lookup"><span data-stu-id="cacf6-276">The garbage collector calls <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> after normal finalizers have been run for objects that were garbage collected at the same time.</span></span> <span data-ttu-id="cacf6-277">ガベージ コレクターは、このメソッドを呼び出すためのリソースを保証する間に、メソッドは中断されませんが進行中.</span><span class="sxs-lookup"><span data-stu-id="cacf6-277">The garbage collector guarantees the resources to invoke this method and that the method will not be interrupted while it is in progress.</span></span> <span data-ttu-id="cacf6-278">このメソッドは、(その静的に特定の呼び出しグラフですべてのメソッド) およびインスタンスの構築時に制約された実行領 (域 CER) として準備されます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-278">This method will be prepared as a constrained execution region (CER) at instance construction time (along with all the methods in its statically determinable call graph).</span></span> <span data-ttu-id="cacf6-279">オーバーライドされたどのエラー パスを導入しないように注意する必要がありますが、これには、スレッドの中止の割り込みが防止されますが、<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cacf6-279">Although this prevents thread abort interrupts, you must still be careful not to introduce any fault paths in your overridden <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method.</span></span> <span data-ttu-id="cacf6-280">具体的には、適用、<xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute>から呼び出すメソッドが存在する属性<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cacf6-280">In particular, apply the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to any methods you call from <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>.</span></span> <span data-ttu-id="cacf6-281">ほとんどの場合、このコードがあります。</span><span class="sxs-lookup"><span data-stu-id="cacf6-281">In most cases this code should be:</span></span>  
  
 `ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)`  
  
 <span data-ttu-id="cacf6-282">単純なクリーンアップのさらに、(たとえば、Win32 API の呼び出し`CloseHandle`ファイル ハンドルで) 1 つのプラットフォーム呼び出しの戻り値を確認することができます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-282">Additionally, for simple cleanup (for example, calling the Win32 API `CloseHandle` on a file handle) you can check the return value for the single platform invoke call.</span></span> <span data-ttu-id="cacf6-283">複雑なクリーンアップは、多くのプログラム ロジックとその一部が失敗する多くのメソッド呼び出しがあります。</span><span class="sxs-lookup"><span data-stu-id="cacf6-283">For complex cleanup, you may have a lot of program logic and many method calls, some of which might fail.</span></span> <span data-ttu-id="cacf6-284">プログラム ロジックでは、そのような場合の各フォールバック コードはことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cacf6-284">You must ensure that your program logic has fallback code for each of those cases.</span></span>  
  
 <span data-ttu-id="cacf6-285">場合<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>返します`false`生成何らかの理由で、 [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md)マネージ デバッグ アシスタントです。</span><span class="sxs-lookup"><span data-stu-id="cacf6-285">If <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> returns `false` for any reason, it generates a [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed Debugging Assistant.</span></span>  <span data-ttu-id="cacf6-286">これにより、リソースを解放しようとすると、失敗した場合を検出できます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-286">This helps you detect cases where your attempt to release resources fails.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cacf6-287">次のコード例はハンドルを解放し、示されている例の一部である、<xref:System.Runtime.InteropServices.SafeHandle>クラス。</span><span class="sxs-lookup"><span data-stu-id="cacf6-287">The following code example releases the handle and is part of a larger example provided for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 [!code-csharp[SafeHandle#3](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="cacf6-288">アンマネージ コードを呼び出すアクセス許可。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-288">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="cacf6-289">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-289">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="cacf6-290">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-290">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <related type="Article" href="https://msdn.microsoft.com/library/76994ee6-9fa9-4059-b813-26578d24427c">
          <span data-ttu-id="cacf6-291">マネージ デバッグ アシスタントによるランタイム エラーを診断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-291">Diagnosing Run-time Errors with Managed Debugging Assistants</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/44cd98ba-95e5-40a1-874d-e8e163612c51">
          <span data-ttu-id="cacf6-292">releaseHandleFailed</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-292">ReleaseHandleFailed</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SetHandle">
      <MemberSignature Language="C#" Value="protected void SetHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.SetHandle : nativeint -&gt; unit" Usage="safeHandle.SetHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="cacf6-293">使用する既存のハンドル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-293">The pre-existing handle to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cacf6-294">ハンドルを指定した既存のハンドルに設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-294">Sets the handle to the specified pre-existing handle.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-295">使用して、<xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A>メソッド、.NET Framework の COM 相互運用機能のインフラストラクチャがマーシャ リングをサポートしていないため (たとえば、構造体には、ハンドルが返されます) 場合、既存のハンドルをサポートする必要がある場合にのみ出力構造体のハンドル。</span><span class="sxs-lookup"><span data-stu-id="cacf6-295">Use the <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> method only if you need to support a pre-existing handle (for example, if the handle is returned in a structure) because the .NET Framework COM interop infrastructure does not support marshaling output handles in a structure.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="cacf6-296">アンマネージ コードを呼び出すアクセス許可。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-296">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="cacf6-297">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-297">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="cacf6-298">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-298">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetHandleAsInvalid">
      <MemberSignature Language="C#" Value="public void SetHandleAsInvalid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetHandleAsInvalid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetHandleAsInvalid ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetHandleAsInvalid();" />
      <MemberSignature Language="F#" Value="member this.SetHandleAsInvalid : unit -&gt; unit" Usage="safeHandle.SetHandleAsInvalid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-1.5;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cacf6-299">今後は使用しないものとしてハンドルをマークします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-299">Marks a handle as no longer used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cacf6-300">呼び出す、<xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>メソッド ハンドルが不要になったリソースを参照することがわかっている場合にのみです。</span><span class="sxs-lookup"><span data-stu-id="cacf6-300">Call the <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> method only when you know that your handle no longer references a resource.</span></span> <span data-ttu-id="cacf6-301">値は変更は、<xref:System.Runtime.InteropServices.SafeHandle.handle>フィールド; 終了としてのみ、ハンドルがマークされます。</span><span class="sxs-lookup"><span data-stu-id="cacf6-301">Doing so does not change the value of the <xref:System.Runtime.InteropServices.SafeHandle.handle> field; it only marks the handle as closed.</span></span> <span data-ttu-id="cacf6-302">ハンドル、値が古い可能性がある値があります。</span><span class="sxs-lookup"><span data-stu-id="cacf6-302">The handle might then contain a potentially stale value.</span></span> <span data-ttu-id="cacf6-303">この呼び出しの効果は、リソースを解放する試行が行われませんことです。</span><span class="sxs-lookup"><span data-stu-id="cacf6-303">The effect of this call is that no attempt is made to free the resources.</span></span>  
  
 <span data-ttu-id="cacf6-304">同様、<xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A>メソッドを使用して<xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>既存のハンドルをサポートする必要がある場合にのみです。</span><span class="sxs-lookup"><span data-stu-id="cacf6-304">As with the <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> method, use <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> only if you need to support a pre-existing handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="cacf6-305">アンマネージ コードを呼び出すアクセス許可。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-305">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="cacf6-306">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-306">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="cacf6-307">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="cacf6-307">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>