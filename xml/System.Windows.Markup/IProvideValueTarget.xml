<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IProvideValueTarget.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5fe449848bcdce05ca59b27ae4a3b23e50137f9b6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe449848bcdce05ca59b27ae4a3b23e50137f9b6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Represents a service that reports situational object-property relationships for markup extension evaluation.</source>
          <target state="translated">マークアップ拡張機能の評価に対する状況的なオブジェクトとプロパティの関係を報告するサービスを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> represents a service that reports information regarding the object-property structure surrounding where a value converter is invoked.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> 値コンバーターが呼び出される周囲オブジェクト プロパティの構造に関する情報を報告するサービスを表します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Type converters and markup extensions can query for <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> as a service on the service context that is provided by a XAML object writer, when the XAML object writer invokes value conversion behavior.</source>
          <target state="translated">型コンバーターおよびマークアップ拡張機能を照会できます<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>XAML オブジェクト ライターは、値変換の動作を呼び出すときは、XAML オブジェクト ライターによって提供されるサービスのコンテキストでサービスとして。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>For more information, see <bpt id="p1">[</bpt>Type Converters and Markup Extensions for XAML<ept id="p1">](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept> and <bpt id="p2">[</bpt>Service Contexts Available to Type Converters and Markup Extensions<ept id="p2">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>型コンバーターと XAML のマークアップ拡張機能<ept id="p1">](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept>と<bpt id="p2">[</bpt>サービスで使用できるコンテキスト型コンバーターおよびマークアップ拡張機能<ept id="p2">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>For markup extensions specifically, a scenario where <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> is useful is to determine the validity of your markup extension's situational usage.</source>
          <target state="translated">マークアップ拡張機能のシナリオでは具体的には、ここで<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>役に立ちます、マークアップ拡張機能の状況に左右の使用状況の有効性を特定することです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>For example, your markup extension might implement a value deferral mechanism, but using that mechanism might only be appropriate if the target object is capable of using other components of your deferral mechanism at run time.</source>
          <target state="translated">たとえば、マークアップ拡張機能が、値の遅延メカニズムを実装する可能性がありますがそのメカニズムを使用して可能性がありますのみを指定対象のオブジェクトが実行時に、遅延メカニズムの他のコンポーネントを使用できる場合に適しています。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>You could check the type system characteristics of the object returned as <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> and make sure that object supports your deferral technique.</source>
          <target state="translated">として返されるオブジェクトの型システムの特性を確認することが<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph>し、そのオブジェクトが、遅延の手法をサポートしているかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>If so, your markup extension returns a value, and if not, your markup extension throws an exception that will be picked up as an inner exception by a XAML object writer.</source>
          <target state="translated">マークアップ拡張機能が値を返す場合は、およびマークアップ拡張機能が取得されるを内部例外として、XAML オブジェクト ライターによって例外をスローされていない場合。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>A similar scenario is assuring that a particular property supports a capability, by checking type system characteristics of the <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph>.</source>
          <target state="translated">型システムの特性をチェックして、特定のプロパティが、機能をサポートしているようなシナリオを保証、<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Although the API name <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> might imply an association with <ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=nameWithType&gt;</ph>, the information reported by <ph id="ph3">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> can also be useful to a <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.</source>
          <target state="translated">その API 名<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>こととの関連付けを示唆<ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=nameWithType&gt;</ph>、によって報告された、情報<ph id="ph3">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>も役に立ちます、<ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>または<ph id="ph5">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> typically have more context than a markup extension because they are dedicated to a particular target type or target property, and thus the situational validity is usually predictable in the type system.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>型の特定のターゲットまたはターゲット プロパティが専用であるために、通常、マークアップ拡張機能よりも詳細なコンテキストがあるし、状況に左右の有効性が通常の型システムで予測可能なためです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>However, other scenarios exist.</source>
          <target state="translated">ただし、他のシナリオがあります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>The following is a list of some scenarios that might be implemented by either a type converter or a markup extension:</source>
          <target state="translated">型コンバーターまたはマークアップ拡張機能のいずれかで実装する場合がありますのあるいくつかのシナリオの一覧を次に示します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Get <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> to read instance values of other properties on that object.</source>
          <target state="translated">取得<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph>をそのオブジェクトに対する他のプロパティのインスタンスの値を読み取る。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Note that your handling here might need to be robust for unset values, because the processing order of XAML members on the target object can be nondeterministic.</source>
          <target state="translated">処理をここで必要とする可能性に設定されていない値は、堅牢なターゲット オブジェクトの XAML メンバーの処理順序は非決定的であることができますに注意してください。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Get <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> to read type-level metadata, or to verify that required interfaces are implemented by the type.</source>
          <target state="translated">取得<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph>型レベルのメタデータを読み取り、必要なインターフェイスが、型によって実装されることを確認してください。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Get <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> to read property metadata.</source>
          <target state="translated">取得<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph>プロパティ メタデータを読み取る。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>One scenario is to use <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> information to limit which objects or properties are permitted to be set by your markup extension.</source>
          <target state="translated">1 つのシナリオは、使用する<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>については、どのオブジェクトまたはプロパティは、マークアップ拡張機能によって設定する許可を制限します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Before attempting to use the service, make sure that the service itself is not <ph id="ph1">`null`</ph> when returned by the relevant service provider parameter you are using for context.</source>
          <target state="translated">サービスを使用する前に、サービス自体がないことを確認します<ph id="ph1">`null`</ph>コンテキストを使用している関連するサービス プロバイダーのパラメーターによって返されるときにします。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>When using the service, it is particularly important not to modify the object referenced by the <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> property, or other objects referenced by that object.</source>
          <target state="translated">によって参照されるオブジェクトを変更することがなく、特に重要では、サービスを使用する場合、<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph>プロパティ、またはそのオブジェクトによって参照される他のオブジェクト。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>For WPF specifically, these changes could cause unexpected changes that would invalidate the WPF property system.</source>
          <target state="translated">WPF 具体的には、これらの変更により、予期しない変更 WPF プロパティ システムを無効にします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Do not use the type of <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> to determine which precise type a markup extension or type converter should return.</source>
          <target state="translated">型を使用しないで<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph>正確な型をマークアップ拡張機能または型コンバーターを返す必要があります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>That is not a best practice.</source>
          <target state="translated">ベスト プラクティスれていません。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Your return type should be consistent with attributing (<ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph> for markup extensions) or patterns (class name of the type converter).</source>
          <target state="translated">戻り値の型は属性と一致する必要があります (<ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph>のマークアップ拡張機能) またはパターン (型コンバーターのクラス名)。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.</source>
          <target state="translated">.NET Framework の以前のバージョンでは、このインターフェイスは、WPF 固有の WindowsBase アセンブリに存在します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>In <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> is in the System.Xaml assembly.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>、<ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>は System.Xaml アセンブリにします。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>For more information, see <bpt id="p1">[</bpt>Types Migrated from WPF to System.Xaml<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>WPF から System.Xaml に移行した型<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>WPF Usage Notes</source>
          <target state="translated">WPF の使用上の注意</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>This service supports framework features such as binding on a dependency property.</source>
          <target state="translated">このサービスは、依存関係プロパティのバインドなどのフレームワークの機能をサポートします。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>In WPF, the service represented by <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> can return objects and properties for situations where the value to return from a markup extension or type converter depends on context.</source>
          <target state="translated">WPF では、によって表されるサービス<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>マークアップ拡張機能または型コンバーターから返される値をコンテキストに依存する場所の場合のオブジェクトとプロパティを返すことができます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> is leveraged heavily in the internal implementation of <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase&gt;</ph>, the class that implements the binding mechanism for dependency properties in WPF.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> 内部実装で大きくを活用<ph id="ph2">&lt;xref:System.Windows.Data.BindingBase&gt;</ph>WPF の依存関係プロパティの関連付けの機構を実装するクラス。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>A default internal service provider for WPF implements <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> for usage by a custom markup extension or type converter.</source>
          <target state="translated">WPF 実装の既定の内部サービス プロバイダー<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>カスタム マークアップ拡張機能または型コンバーターで使用するためです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>The object and property reported by <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> can only be set by the internal WPF service.</source>
          <target state="translated">オブジェクトとプロパティによって報告された<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>内部 WPF サービスによってのみ設定できます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Going beyond this definition of how <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> operates would require defining your own service provider for markup extension and type converter usages that implements at the very least the <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph> services, and that is an advanced scenario that is not described here.</source>
          <target state="translated">この方法の定義を超えると<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>動作少なくともを実装する独自のサービス プロバイダーのマークアップ拡張機能と型コンバーターの使用を定義する必要があります、<ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>と<ph id="ph3">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph>services、およびはここで説明されていない高度なシナリオです。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>A null value for <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> does not necessarily mean that a markup extension or type converter cannot act, although that depends on your implementation.</source>
          <target state="translated">Null 値を<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph>が必ずしもいるマークアップ拡張機能または型コンバーターは機能しません、実装に依存するがします。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>An example case where the values from <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> are null even if the service is available is if your markup extension is nested within another markup extension, such as a <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>.</source>
          <target state="translated">例のケースから値<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>null では、サービスが利用可能な場合でもはマークアップ拡張機能が他のマークアップ拡張機能内でなど入れ子になったかどうか、<ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>An implementation that relies on <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> should always check for null values if only for the purpose of throwing a specific exception, if that is your intended design.</source>
          <target state="translated">実装に依存している<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>null 値の場合は、その特定の例外をスローするために、目的の設計はだけの場合に常に確認します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
          <source>Gets the target object being reported.</source>
          <target state="translated">報告されるターゲット オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
          <source>The target object being reported.</source>
          <target state="translated">報告されるターゲット オブジェクト。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
          <source>The value returned by <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> is the actual reference, not a type system identifier or other identifier.</source>
          <target state="translated">によって返される値<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph>実際の参照、型システム識別子またはその他の識別子。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
          <source>The value can also be <ph id="ph1">`null`</ph>; see <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>.</source>
          <target state="translated">値を指定できますも<ph id="ph1">`null`</ph>; を参照してください<ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
          <source>When using the service, it is particularly important not to modify the object referenced by the <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> property, or other objects referenced by that object as properties that are not specifically the value-conversion case you are handling.</source>
          <target state="translated">によって参照されるオブジェクトを変更することがなく、特に重要では、サービスを使用する場合、<ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph>プロパティ、または具体的には、値の変換ではないプロパティ ケースすると、そのオブジェクトによって参照される他のオブジェクトを処理します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
          <source>For WPF specifically, changing the target object could cause unexpected changes that would invalidate the WPF  property system.</source>
          <target state="translated">WPF の具体的には、ターゲット オブジェクトを変更する変更される可能性が予期しない WPF プロパティ システムを無効にします。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
          <source>Gets an identifier for the target property being reported.</source>
          <target state="translated">報告されるターゲット プロパティの識別子を取得します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
          <source>An identifier for the target property being reported.</source>
          <target state="translated">報告されるターゲット プロパティの識別子。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
          <source>The value can also be <ph id="ph1">`null`</ph>; see <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>.</source>
          <target state="translated">値を指定できますも<ph id="ph1">`null`</ph>; を参照してください<ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
          <source>WPF Usage Notes</source>
          <target state="translated">WPF の使用上の注意</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
          <source>For a dependency property, the default WPF service may return a <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>, such that the markup extension or type converter can use metadata.</source>
          <target state="translated">依存関係プロパティの既定の WPF サービスが返す可能性があります、 <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>、マークアップ拡張機能または型コンバーターは、メタデータを使用できるようにします。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
          <source>Otherwise, the returned object can be a <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> for a CLR property.</source>
          <target state="translated">それ以外の場合、返されたオブジェクトには、 <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> CLR プロパティ。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>