<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MarkupExtension.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f36d9706c5d26b97dcc9537ee7078eceaf138fc8.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f36d9706c5d26b97dcc9537ee7078eceaf138fc8</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.MarkupExtension">
          <source>Provides a base class for XAML markup extension implementations that can be supported by .NET Framework XAML Services and other XAML readers and XAML writers.</source>
          <target state="translated">.NET Framework XAML サービスおよびその他の XAML リーダーと XAML ライターによってサポートされる XAML マークアップ拡張機能の実装のための基底クラスを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>Markup extensions return objects to callers, based on the input of string attribute values or markup elements in XAML.</source>
          <target state="translated">マークアップ拡張機能は、入力の文字列属性値または XAML でのマークアップ要素に基づいて、呼び出し元にオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>Markup extensions return objects in a more sophisticated way than type converters alone can accomplish.</source>
          <target state="translated">マークアップ拡張機能は、型コンバーターのみを行うよりもより高度な方法でオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>A XAML object writer invokes a type converter because a type or member has a type converter implementation associated with it.</source>
          <target state="translated">XAML オブジェクト ライターでは、型またはメンバーに関連付けられている型コンバーターの実装があるために、型コンバーターが呼び出されます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>From the CLR frame of reference, this means that a type or member is <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> attributed.</source>
          <target state="translated">CLR の基準枠、つまり、型またはメンバーが<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>に起因します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>From the XAML type system perspective, this means that a XAML type or a XAML member has a value for its <ph id="ph1">`TypeConverter`</ph> property.</source>
          <target state="translated">XAML 型システムの観点から、つまり、XAML 型または XAML メンバーが値をその<ph id="ph1">`TypeConverter`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>The invocation of a type converter is tied to the type or property definition, and is always invoked by XAML processing for these cases.</source>
          <target state="translated">型コンバーターの呼び出しでは、型またはプロパティの定義に関連付けられていますおよび、このような場合の XAML 処理では、常に呼び出されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>In contrast, a markup extension is more under the control of user code and user-produced markup, and can be applied whenever an application scenario demands it.</source>
          <target state="translated">これに対し、マークアップ拡張機能ユーザー コードとユーザー生成のマークアップの制御下にある詳細は、アプリケーション シナリオが要求するたびに適用することができます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>A markup extension can be invoked and can be used for setting different type-member values, so long as the markup extension's return type is assignable to that value.</source>
          <target state="translated">マークアップ拡張機能では、呼び出すことができ、マークアップ拡張機能の戻り値の型はその値を割り当てることができる限り、さまざまな型メンバーの値を設定するため使用されることができます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>For information on creating a custom markup extension, see <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>.</source>
          <target state="translated">カスタム マークアップ拡張機能を作成する方法については、次を参照してください。<ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>For more information on markup extensions in general, see <bpt id="p1">[</bpt>Markup Extensions for XAML Overview<ept id="p1">](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>.</source>
          <target state="translated">一般にマークアップ拡張機能の詳細については、次を参照してください。 <bpt id="p1">[</bpt>XAML の概要のマークアップ拡張機能<ept id="p1">](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>If you are building on WPF and using or creating markup extensions for XAML, other relevant information can be found in the topic <bpt id="p1">[</bpt>Markup Extensions and WPF XAML<ept id="p1">](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept>.</source>
          <target state="translated">WPF とを使用して、または XAML のマークアップ拡張機能の作成を構築する、他の関連情報がトピックに記載されて<bpt id="p1">[</bpt>マークアップ拡張機能と WPF XAML<ept id="p1">](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> method of each markup extension implementation can use an <ph id="ph2">&lt;xref:System.IServiceProvider&gt;</ph> at run time that can provide context.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>それぞれマークアップ拡張機能の実装の方法を使用することができます、<ph id="ph2">&lt;xref:System.IServiceProvider&gt;</ph>実行時コンテキストを提供できます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>This  <ph id="ph1">&lt;xref:System.IServiceProvider&gt;</ph> is then queried for specific services that pass information, such as <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph>.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.IServiceProvider&gt;</ph>などの情報を渡す特定のサービスを照会し、<ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>または<ph id="ph3">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>For more information on service contexts for a markup extension, see <bpt id="p1">[</bpt>Service Contexts Available to Type Converters and Markup Extensions<ept id="p1">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>.</source>
          <target state="translated">マークアップ拡張機能のサービス コンテキストの詳細については、次を参照してください。<bpt id="p1">[</bpt>サービスで使用できるコンテキスト型コンバーターおよびマークアップ拡張機能<ept id="p1">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>Derived classes should be attributed with <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph> to inform consumers of the most specific return type available from the markup extension's <ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> implementation.</source>
          <target state="translated">派生クラスの属性を使用する必要があります<ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph>からマークアップ拡張機能の使用可能な最も固有の戻り値の型のコンシューマーに通知する<ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.MarkupExtension.#ctor">
          <source>Initializes a new instance of a class derived from <ph id="ph1">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph> から派生したクラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph> abstract class does not hold any private values that require initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph>抽象クラスが初期化を必要とする任意のプライベート値を保持しません。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.#ctor">
          <source>A functional markup extension should define its own public default constructor.</source>
          <target state="translated">機能のマークアップ拡張機能は、独自のパブリックな既定コンス トラクターを定義します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.#ctor">
          <source>Additionally, the markup extension should implement constructors that are appropriate for the extension's intended capabilities and markup usage.</source>
          <target state="translated">さらに、マークアップ拡張機能では、拡張機能の目的の機能およびマークアップの使用に適したコンス トラクターを実装する必要があります。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.#ctor">
          <source>For more information, see <bpt id="p1">[</bpt>Markup Extensions for XAML Overview<ept id="p1">](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XAML の概要のマークアップ拡張機能<ept id="p1">](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>A service provider helper that can provide services for the markup extension.</source>
          <target state="translated">マークアップ拡張機能のサービスを提供できるサービス プロバイダーのヘルパー。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.</source>
          <target state="translated">派生クラスで実装された場合、このマークアップ拡張機能のターゲット プロパティの値として提供されるオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>The object value to set on the property where the extension is applied.</source>
          <target state="translated">拡張機能が適用されたプロパティで設定するオブジェクト値。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>When a XAML processor processes a type node and member value that is a markup extension, it invokes the <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> method of that markup extension and writes the result into the object graph or serialization stream.</source>
          <target state="translated">呼び出す、XAML プロセッサは、マークアップ拡張機能は、型のノードとメンバー値を処理するとき、<ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>そのマークアップ拡張機能のメソッド、オブジェクト グラフやシリアル化ストリームに結果を書き込みます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>The XAML object writer passes service context to each such implementation through the <ph id="ph1">`serviceProvider`</ph> parameter.</source>
          <target state="translated">XAML オブジェクト ライターがによるそのような実装を各にサービス コンテキストを渡す、<ph id="ph1">`serviceProvider`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>See "Notes to Implementers" section for more information on how to implement <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> in a custom markup extension.</source>
          <target state="translated">実装する方法についての詳細を参照してください「ノート実行者」セクション<ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>カスタム マークアップ拡張機能です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>WPF Usage Notes</source>
          <target state="translated">WPF の使用上の注意</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>WPF classes that have specific interactions with markup set operations should not rely on <ph id="ph1">&lt;xref:System.Windows.Markup.IReceiveMarkupExtension&gt;</ph> for a <ph id="ph2">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> implementation.</source>
          <target state="translated">マークアップのセットの操作で特定の相互作用の WPF クラスに依存しないように<ph id="ph1">&lt;xref:System.Windows.Markup.IReceiveMarkupExtension&gt;</ph>の<ph id="ph2">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>実装します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;</ph>-attributed callbacks instead.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;</ph>-属性付きコールバックを代わりにします。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>Common services returned by the default service provider that is typically available to a custom or existing <ph id="ph1">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph> implementation include the following primary services.</source>
          <target state="translated">通常使用できるカスタム、または既存する既定のサービス プロバイダーによって返される一般的なサービス<ph id="ph1">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph>実装には、次のプライマリ サービスが含まれます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Markup.IProvideValueTarget" /&gt;</ph> reports the object reference and a property identifier from the context where the markup extension is used</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Markup.IProvideValueTarget" /&gt;</ph> オブジェクト参照が、マークアップ拡張機能が使用されているコンテキストからプロパティの識別子を報告します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Markup.IXamlTypeResolver" /&gt;</ph> exposes a service that parallels the general XAML object writing behavior that can provide a <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> based on a XAML type name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Markup.IXamlTypeResolver" /&gt;</ph> 匹敵全般の XAML オブジェクトの提供できる動作を記述するサービスを公開、 <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> XAML 型名を基にします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>The name can optionally include a prefix for a mapped XAML namespace.</source>
          <target state="translated">名前は、マップされている XAML 名前空間のプレフィックスを含めることができます必要に応じて。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source><ph id="ph1">&lt;see cref="T:System.Xaml.IXamlSchemaContextProvider" /&gt;</ph> exposes the active XAML schema context directly.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.IXamlSchemaContextProvider" /&gt;</ph> アクティブな XAML スキーマ コンテキストを直接公開します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>From the reported <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>, you can obtain XAML schema context information such as how assemblies are mapped for type support, preferred prefix in assemblies, lists of each <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> in an assembly, and so on.</source>
          <target state="translated">報告された<ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>、XAML スキーマ コンテキスト情報の種類のサポート、アセンブリ内の適切なプレフィックスのアセンブリがマップされている方法の一覧などのそれぞれを取得する<ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>アセンブリ、およびようにします。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>Other services available for more specialized markup extension scenarios include:</source>
          <target state="translated">特殊なマークアップ拡張機能のシナリオに使用できるその他のサービスは次のとおりです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>Potentially, implementations of <ph id="ph1">&lt;see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /&gt;</ph> can ignore the <ph id="ph2">&lt;paramref name="serviceProvider" /&gt;</ph> parameter.</source>
          <target state="translated">実装では、可能性のある<ph id="ph1">&lt;see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /&gt;</ph>無視することができます、<ph id="ph2">&lt;paramref name="serviceProvider" /&gt;</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>This is viable for some basic scenarios, where no context at all is required for returning a value.</source>
          <target state="translated">これは、コンテキストまったくが存在しない値を返すために必要ないくつかの基本的なシナリオの実行可能です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>In typical usage, the .NET Framework XAML Services and the implemented XAML object writers will provide a service provider to all value converter methods that are invoked during XAML processing.</source>
          <target state="translated">一般的な使用法]、[.NET Framework XAML サービス、および実装した XAML オブジェクト ライターが XAML の中に呼び出されるすべての値コンバーターのメソッドに、サービス プロバイダーを提供する処理します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>However, for robustness, you should provide code paths for null values both for the service provider itself and for any requested service.</source>
          <target state="translated">ただし、堅牢性、サービス プロバイダー自体と、要求されたサービスの両方にコード パスを null 値に提供する必要があります。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>Null values might occur if your markup extension is applied in a circumstance where the typical service support provided by a XAML processor infrastructure is not available.</source>
          <target state="translated">Null 値が発生する状況でマークアップ拡張機能が適用される場合 XAML プロセッサ インフラストラクチャによって提供される一般的なサービス サポートは使用できません。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>For more information on available services from the XAML service provider context and how to use them, see <bpt id="p1">[</bpt>Type Converters and Markup Extensions for XAML<ept id="p1">](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept>.</source>
          <target state="translated">使用可能なサービスから XAML サービス プロバイダー コンテキストとその使用方法の詳細については、次を参照してください。<bpt id="p1">[</bpt>型コンバーターと XAML のマークアップ拡張機能<ept id="p1">](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>Implementations that require a certain service to be available in order to produce a useful <ph id="ph1">&lt;see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /&gt;</ph> result are expected to throw exceptions if that service is not available.</source>
          <target state="translated">特定のサービスを便利な生成するために使用できるを使用して実装する<ph id="ph1">&lt;see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /&gt;</ph>そのサービスが利用できない場合に例外をスローする予測結果。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>The recommended exception to throw is <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">推奨される例外をスローするは<ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>The implementation may also throw exceptions if one of the arguments that the custom markup extension needs in order to provide a value is null, is invalid for its data type, or does not contain a value that the markup extension is capable of processing.</source>
          <target state="translated">カスタム マークアップ拡張機能は、値は null を提供するために必要な引数の 1 つはそのデータ型に対して無効またはマークアップ拡張機能が処理できる値が含まれていない場合、実装は例外をスローできます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>The recommended exception to throw is <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">推奨される例外をスローするは<ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>