<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1ae350a552fc26c4cf919e3c7ddd4041a5f79898" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36502833" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameScope" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameScope" />
  <TypeSignature Language="F#" Value="type INameScope = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="dda4e-101">特定の XAML 名前スコープ内で要素の名前にアクセスする方法、およびその XAML 名前スコープ内で名前の一意性を確保する方法のコントラクトを定義します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="dda4e-101">Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dda4e-102">このインターフェイスは、テンプレートを使って再利用するか、比喩を延期するものでは子要素を持つクラスで実装されます。</span><span class="sxs-lookup"><span data-stu-id="dda4e-102">This interface is implemented by classes that have child elements that are intended to be reused through the template or defer metaphor.</span></span> <span data-ttu-id="dda4e-103">テンプレート、ファクトリと類似したコンストラクトには、主要なオブジェクト グラフから切り離し、XAML のルートを一意の XAML 名前スコープがある場合があります。</span><span class="sxs-lookup"><span data-stu-id="dda4e-103">Templates, factories and similar constructs must have unique XAML namescopes that are separate from a main object graph and root XAML.</span></span> <span data-ttu-id="dda4e-104">ないはずの名前の衝突の DOM 操作および名前の識別子に依存する XAML の参照方法は、名前に依存できるように、それらの子要素から作成されたオブジェクトは、アプリケーションのオブジェクト グラフを導入するときに、ここでの原則一意性は、それぞれの XAML 名前スコープにします。</span><span class="sxs-lookup"><span data-stu-id="dda4e-104">The principle here is that there should be no name collisions when objects created from those child elements are introduced to an application's object graph, and so that DOM operations and XAML reference techniques that rely on the name identifier can rely on name uniqueness in each XAML namescope.</span></span>  
  
 <span data-ttu-id="dda4e-105">.NET Framework の以前のバージョンでは、このインターフェイスは、WPF 固有の WindowsBase アセンブリに存在します。</span><span class="sxs-lookup"><span data-stu-id="dda4e-105">In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="dda4e-106">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、<xref:System.Windows.Markup.INameScope>は System.Xaml アセンブリにします。</span><span class="sxs-lookup"><span data-stu-id="dda4e-106">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> is in the System.Xaml assembly.</span></span> <span data-ttu-id="dda4e-107">詳細については、次を参照してください。 [WPF から System.Xaml に移行した型](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)です。</span><span class="sxs-lookup"><span data-stu-id="dda4e-107">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="dda4e-108">WPF の使用上の注意</span><span class="sxs-lookup"><span data-stu-id="dda4e-108">WPF Usage Notes</span></span>  
 <span data-ttu-id="dda4e-109">このインターフェイスは、WPF クラスによって実装<xref:System.Windows.NameScope>です。</span><span class="sxs-lookup"><span data-stu-id="dda4e-109">This interface is implemented by the WPF class <xref:System.Windows.NameScope>.</span></span> <span data-ttu-id="dda4e-110">ほとんどの XAML 名前スコープ操作で[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]を使用して動作<xref:System.Windows.NameScope>情報は、インスタンスがときどき伝えられた内部的を使用して<xref:System.Windows.Markup.INameScope>参照します。</span><span class="sxs-lookup"><span data-stu-id="dda4e-110">Most XAML namescope operations in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] operate by using <xref:System.Windows.NameScope> instances, but information is occasionally communicated internally by using <xref:System.Windows.Markup.INameScope> references.</span></span>  
  
 <span data-ttu-id="dda4e-111">ファクトリを使用してまたは XAML 表現と組み合わせる比喩を延期する WPF クラスの例としては<xref:System.Windows.Style>と<xref:System.Windows.FrameworkTemplate>です。</span><span class="sxs-lookup"><span data-stu-id="dda4e-111">Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <xref:System.Windows.Style> and <xref:System.Windows.FrameworkTemplate>.</span></span> <span data-ttu-id="dda4e-112">これらの実装は、通常から使用可能なインターフェイス メソッドの明示的なバージョンに依存、<xref:System.Windows.NameScope>クラスです。</span><span class="sxs-lookup"><span data-stu-id="dda4e-112">These implementations usually rely on the explicit versions of the interface methods available from the <xref:System.Windows.NameScope> class.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member FindName : string -&gt; obj" Usage="iNameScope.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="dda4e-113">要求されたオブジェクトの名前の識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dda4e-113">The name identifier for the object being requested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dda4e-114">指定された識別名を持つオブジェクトを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dda4e-114">Returns an object that has the provided identifying name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dda4e-115">見つかった場合はオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dda4e-115">The object, if found.</span>
          </span>
          <span data-ttu-id="dda4e-116">その名前のオブジェクトが見つからなかった場合は <see langword="null" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dda4e-116">Returns <see langword="null" /> if no object of that name was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dda4e-117">XAML マークアップで有効な名前の文字列に記載されている要件に一致する必要があります[XamlName の文法](~/docs/framework/xaml-services/xamlname-grammar.md)です。</span><span class="sxs-lookup"><span data-stu-id="dda4e-117">Valid name strings in XAML markup must match the requirements documented in [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="abstract member RegisterName : string * obj -&gt; unit" Usage="iNameScope.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="dda4e-118">登録する名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dda4e-118">The name to register.</span>
          </span>
        </param>
        <param name="scopedElement">
          <span data-ttu-id="dda4e-119">指定した <c>name</c> が参照する特定の要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dda4e-119">The specific element that the provided <c>name</c> refers to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dda4e-120">現在の XAML 名前スコープに指定された名前を登録します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dda4e-120">Registers the provided name into the current XAML namescope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dda4e-121">XAML 名前スコープで重複する名前を指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="dda4e-121">Duplicate names in a XAML namescope are not permitted.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="dda4e-122">
            <para>重複する名前の登録を許可されていません。場合、入力<paramref name="name" />XAML 名前スコープのコレクションの内部表現内の既存の要素に既に割り当てられている (と同じである場合でも<paramref name="scopedElement" />)、例外をスローします。また [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md) には、指定された名前は準拠していない場合、例外がスローを検討してください。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="dda4e-122">
              <para>Do not permit duplicate names to be registered. If the input <paramref name="name" /> is already assigned to an existing element in the internal collection representation of the XAML namescope (even if it is the same as <paramref name="scopedElement" />), throw an exception.  Also consider throwing an exception if the provided name does not conform to [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member UnregisterName : string -&gt; unit" Usage="iNameScope.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="dda4e-123">登録解除する名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dda4e-123">The name to unregister.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dda4e-124">指定された名前を現在の XAML 名前スコープから登録解除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dda4e-124">Unregisters the provided name from the current XAML namescope.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="dda4e-125">
            <para>入力名が存在しない場合は、例外をスローします。今後、同じ名前をもう一度登録できるように、名前と XAML 名前スコープのコレクションの表現を参照している登録済みの要素を削除する必要があります。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="dda4e-125">
              <para>If the input name does not exist, throw an exception.  You should remove the name and the previously registered element it refers to from the collection representation of the XAML namescope, so that the same name could potentially be registered again in the future.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>