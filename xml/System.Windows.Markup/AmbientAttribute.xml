<Type Name="AmbientAttribute" FullName="System.Windows.Markup.AmbientAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="baa263074eed8e44641b6e694586499e323d9183" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65004522" /></Metadata><TypeSignature Language="C#" Value="public sealed class AmbientAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AmbientAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.AmbientAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AmbientAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class AmbientAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type AmbientAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Property, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property, Inherited=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="bd9e9-101">プロパティまたは型をアンビエントとして扱うように指定しています。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-101">Specifies that a property or type should be treated as ambient.</span></span> <span data-ttu-id="bd9e9-102">アンビエントの概念は XAML プロセッサがメンバーの型の所有者を確認する方法と関連します。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-102">The ambient concept relates to how XAML processors determine type owners of members.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd9e9-103">アンビエント プロパティは、即時の XAML ノードが作成されるセットのために一般的な型メンバーの参照が中断されているが、オブジェクト グラフを作成するときに、パーサー コンテキストで使用できる値が必要な場所のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-103">An ambient property is a property where the value is expected to be available in the parser context when creating an object graph, but where typical type-member lookup is suspended for purposes of the immediate XAML node set being created.</span></span> <span data-ttu-id="bd9e9-104">アンビエントの概念の 2 つの主なシナリオがあります。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-104">There are two main scenarios for the ambient concept:</span></span>  
  
-   <span data-ttu-id="bd9e9-105">同じオブジェクトのさまざまなプロパティは影響し、そのオブジェクトとプロパティ検索のしくみを修飾します。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-105">Some other property of the same object influences and qualifies how that object-property lookup should work.</span></span>  
  
-   <span data-ttu-id="bd9e9-106">プロパティは遅延の大きいメカニズムを表し、メンバー値を検索するためのアンビエント機能は、現在のオブジェクト内に含まれるすべてのオブジェクトに拡張します。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-106">The property represents a larger deferral mechanism and the ambient capabilities for looking up a member value extend to all objects contained within the current object.</span></span>  
  
 <span data-ttu-id="bd9e9-107">この属性は、アンビエント プロパティの検索動作を有効にするコンテナーを必要とする特定のプロパティに適用できるか、プロパティの値型のすべてのケースでのアンビエント プロパティの動作を有効にするクラスに適用できます。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-107">This attribute can be applied to specific properties that have expected containers that enable an ambient property lookup behavior, or can be applied to a class to enable the ambient property behavior in all cases of that value type for a property.</span></span>  
  
 <span data-ttu-id="bd9e9-108"><xref:System.Windows.Markup.AmbientAttribute> XAML のアタッチ可能なプロパティをアンビエントとして属性設定をサポートするために、CLR メソッドにも適用できます。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-108"><xref:System.Windows.Markup.AmbientAttribute> can also be applied to a CLR method, to support attributing a XAML attachable property as ambient.</span></span> <span data-ttu-id="bd9e9-109">これは、CLR の実装を XAML で添付プロパティを実装/表されるでアクセサー パターンとしてリフレクションのために必要な可能性のある`get`と`set`メソッド。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-109">This is potentially necessary because in a CLR implementation a XAML attached property is implemented/represented to reflection as an accessor pattern with `get` and `set` methods.</span></span> <span data-ttu-id="bd9e9-110">属性に実際の CLR プロパティが存在しないための使用量を制限する<xref:System.AttributeTargets>に`Property`が有効にしていないアンビエントとしてアタッチ可能なメンバーを指定することです。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-110">No actual CLR property to attribute exists, so restricting usage for <xref:System.AttributeTargets> to `Property` would not have enabled specifying an attachable member as ambient.</span></span> <span data-ttu-id="bd9e9-111">アンビエントとして報告するアタッチ可能なメンバー、属性、`get`アクセサー。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-111">For an attachable member that you want to report as ambient, attribute the `get` accessor.</span></span> <span data-ttu-id="bd9e9-112">アタッチ可能なメンバーのサポート方法を具体的にはない属性のメソッドにはしないでください。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-112">You should not attempt to attribute methods that are not specifically support methods of attachable members.</span></span>  
  
 <span data-ttu-id="bd9e9-113">.NET Framework の以前のバージョンでは、このクラスは、WPF 固有の WindowsBase アセンブリに存在します。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-113">In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="bd9e9-114">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、<xref:System.Windows.Markup.AmbientAttribute>は System.Xaml アセンブリにします。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-114">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.AmbientAttribute> is in the System.Xaml assembly.</span></span> <span data-ttu-id="bd9e9-115">詳細については、「 [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-115">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
 <span data-ttu-id="bd9e9-116">アンビエント型 (型 where<xref:System.Windows.Markup.AmbientAttribute>型レベルで適用されます)、プロパティの型解決が必要誤順序の特定の XAML の処理状況のために使用できます。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-116">Ambient types (types where <xref:System.Windows.Markup.AmbientAttribute> is applied at type level) can be used for certain XAML processing situations where the type of a property needs to be resolved out of order.</span></span>  
  
## <a name="object-writer-scenarios"></a><span data-ttu-id="bd9e9-117">オブジェクト ライターのシナリオ</span><span class="sxs-lookup"><span data-stu-id="bd9e9-117">Object Writer Scenarios</span></span>  
 <span data-ttu-id="bd9e9-118">XAML オブジェクト ライターを定義して、プロパティ、メソッドまたは型が発生した場合、<xref:System.Windows.Markup.AmbientAttribute>が適用するには、通常必要がありますサービスにアクセスする、オブジェクトを記述するために必要な目的のアンビエント プロパティ検索の動作を決定します。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-118">If you are defining a XAML object writer, and you encounter a property, method or type where <xref:System.Windows.Markup.AmbientAttribute> is applied, you typically must access a service to determine the intended ambient property lookup behavior that is needed for writing out objects.</span></span> <span data-ttu-id="bd9e9-119">詳細については、「 <xref:System.Xaml.IAmbientProvider> 」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-119">For more information, see <xref:System.Xaml.IAmbientProvider>.</span></span>  
  
## <a name="value-converters"></a><span data-ttu-id="bd9e9-120">値コンバーター</span><span class="sxs-lookup"><span data-stu-id="bd9e9-120">Value Converters</span></span>  
 <span data-ttu-id="bd9e9-121">型コンバーターまたはマークアップ拡張機能は、文字列名または修飾なしで、メンバーまたは型を指定するプロパティなどの間接的な型マッピングを表すプロパティを処理するために、アンビエント情報を把握する必要があります。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-121">Type converters or markup extensions might need to know the ambient information in order to process properties that represent indirect type mappings, such as properties that specify members or types by string names with or without qualification.</span></span> <span data-ttu-id="bd9e9-122">このシナリオで<xref:System.Windows.Markup.AmbientAttribute>値コンバーター コード ロジックに直接使用するものではありません。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-122">In this scenario, <xref:System.Windows.Markup.AmbientAttribute> is not intended to be used directly for value converter code logic.</span></span> <span data-ttu-id="bd9e9-123">XAML のライター処理動作が合格する必要があります、値コンバーターを利用ではなく、<xref:System.Xaml.IAmbientProvider>値コンバーターのメソッドが呼び出されたときにそのサービスのコンテキストでします。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-123">Rather, the value converter should rely on the XAML writer processing behavior, which will pass <xref:System.Xaml.IAmbientProvider> in its service contexts to your value converter methods when called.</span></span>  
  
## <a name="wpf-scenarios-for-ambientattribute"></a><span data-ttu-id="bd9e9-124">AmbientAttribute の WPF のシナリオ</span><span class="sxs-lookup"><span data-stu-id="bd9e9-124">WPF Scenarios for AmbientAttribute</span></span>  
  
-   <span data-ttu-id="bd9e9-125">プロパティを<xref:System.Windows.Style>(<xref:System.Windows.Style.TargetType%2A>) のプロパティ名のバッキングの参照を検索するために必要なために必要なプロパティ名の参照を修飾できます<xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType>値。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-125">A property of a <xref:System.Windows.Style> (<xref:System.Windows.Style.TargetType%2A>) can qualify the necessary property name lookups that are needed to find the backing references for property names in <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> values.</span></span>  
  
-   <span data-ttu-id="bd9e9-126">内のすべてのコンテンツを`Resources`プロパティ (の項目を<xref:System.Windows.ResourceDictionary>) テンプレートの内容とする必要がありますにアクセスできる他のピアとして値。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-126">All content within a `Resources` property (items of a <xref:System.Windows.ResourceDictionary>) as well as template content, should be able to access other peers as values.</span></span> <span data-ttu-id="bd9e9-127">全体を宣言する`Resources`プロパティをアンビエントとしては、WPF XAML パーサーでこのようにするロジックを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-127">Declaring the entire `Resources` property as ambient invokes logic that enables this in the WPF XAML parser.</span></span>  
  
 <span data-ttu-id="bd9e9-128">参照してください<xref:System.Windows.ResourceDictionary>設定用のシナリオ例については<xref:System.Windows.Markup.AmbientAttribute>型レベル。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-128">See <xref:System.Windows.ResourceDictionary> for an example of a scenario for setting <xref:System.Windows.Markup.AmbientAttribute> at type level.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
    <altmember cref="T:System.Xaml.XamlMember" />
    <altmember cref="T:System.Xaml.IAmbientProvider" />
    <related type="Article" href="https://msdn.microsoft.com/library/5dfb299a-b6e2-41b8-8694-e6ac987547f1"><span data-ttu-id="bd9e9-129">カスタム型およびライブラリの XAML 関連の CLR 属性</span><span class="sxs-lookup"><span data-stu-id="bd9e9-129">XAML-Related CLR Attributes For Custom Types and Libraries</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/c2667cbd-2f46-4a7f-9dfc-53696e35e8e4"><span data-ttu-id="bd9e9-130">.NET Framework XAML サービスで使用するためのカスタム型の定義</span><span class="sxs-lookup"><span data-stu-id="bd9e9-130">Defining Custom Types for Use with .NET Framework XAML Services</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/0e11f386-808c-4eae-9ba6-029ad7ba2211"><span data-ttu-id="bd9e9-131">NET XAML サービスの概念に関するドキュメント</span><span class="sxs-lookup"><span data-stu-id="bd9e9-131">NET XAML Services Conceptual Documentation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AmbientAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.AmbientAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AmbientAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bd9e9-132"><see cref="T:System.Windows.Markup.AmbientAttribute" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="bd9e9-132">Initializes a new instance of the <see cref="T:System.Windows.Markup.AmbientAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>