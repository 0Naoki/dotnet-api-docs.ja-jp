<Type Name="AmbientAttribute" FullName="System.Windows.Markup.AmbientAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ef06ba6a6917bfcac9b7286dc147a92adbad2d8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69167768" /></Metadata><TypeSignature Language="C#" Value="public sealed class AmbientAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AmbientAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.AmbientAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AmbientAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class AmbientAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type AmbientAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Property, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property, Inherited=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>プロパティまたは型をアンビエントとして扱うよう指定しています。 アンビエントの概念は XAML プロセッサがメンバーの型の所有者を確認する方法と関連します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アンビエントプロパティは、オブジェクトグラフを作成するときにパーサーコンテキストで値を使用できると想定されるプロパティですが、作成される直前の XAML ノードセットのために一般的な型メンバーの参照が中断されます。 アンビエント概念には、主に次の2つのシナリオがあります。  
  
-   同じオブジェクトの他のいくつかのプロパティは、オブジェクトプロパティの参照がどのように動作するかを指定します。  
  
-   プロパティは、より大きな遅延メカニズムを表し、メンバー値を検索するためのアンビエント機能は、現在のオブジェクト内に含まれるすべてのオブジェクトに拡張されます。  
  
 この属性は、アンビエントプロパティの検索動作を有効にするコンテナーが想定されている特定のプロパティに適用できます。また、プロパティに対してその値型のすべてのケースでアンビエントプロパティの動作を有効にするためにクラスに適用することもできます。  
  
 <xref:System.Windows.Markup.AmbientAttribute>を CLR メソッドに適用して、XAML アタッチ可能なプロパティの属性をアンビエントとしてサポートすることもできます。 CLR の実装では、XAML の添付プロパティが実装されているか、 `get` `set`メソッドとメソッドを使用してアクセサーパターンとしてリフレクションに表されるため、これが必要になることがあります。 属性に対する実際の CLR プロパティが存在しないため<xref:System.AttributeTargets> 、 `Property`の使用をに制限しても、アタッチ可能なメンバーをアンビエントとして指定することはできません。 アンビエントとして報告するアタッチ可能なメンバーの場合は、 `get`アクセサーを属性として指定します。 アタッチ可能なメンバーのメソッドを明示的にサポートしていないメソッドは、属性を使用しないようにしてください。  
  
 以前のバージョンの .NET Framework では、このクラスは WPF 固有のアセンブリ WindowsBase に存在していました。 で[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]は<xref:System.Windows.Markup.AmbientAttribute> 、は、システムの .xaml アセンブリにあります。 詳細については、「 [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)」を参照してください。  
  
 アンビエント型 ( <xref:System.Windows.Markup.AmbientAttribute>が型レベルで適用される型) は、プロパティの型を順序どおりに解決する必要がある特定の XAML 処理状況に使用できます。  
  
## <a name="object-writer-scenarios"></a>オブジェクトライターのシナリオ  
 XAML オブジェクトライターを定義していて、が適用されている<xref:System.Windows.Markup.AmbientAttribute>プロパティ、メソッド、または型が発生した場合は、通常、サービスにアクセスして、オブジェクトの書き込みに必要なアンビエントプロパティの参照動作を決定する必要があります。 詳細については、「<xref:System.Xaml.IAmbientProvider>」を参照してください。  
  
## <a name="value-converters"></a>値コンバーター  
 型コンバーターまたはマークアップ拡張機能は、間接的な型のマッピングを表すプロパティ (修飾の有無にかかわらず、文字列名によってメンバーまたは型を指定するプロパティなど) を処理するために、アンビエント情報を知る必要がある場合があります。 このシナリオでは<xref:System.Windows.Markup.AmbientAttribute> 、は、値コンバーターのコードロジックに直接使用するためのものではありません。 代わりに、値コンバーターは XAML ライターの処理動作に依存する必要があります<xref:System.Xaml.IAmbientProvider> 。これは、呼び出されたときに、そのサービスコンテキストを値コンバーターメソッドに渡します。  
  
## <a name="wpf-scenarios-for-ambientattribute"></a>AmbientAttribute の WPF シナリオ  
  
-   <xref:System.Windows.Style> ( <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> ) のプロパティは、値内のプロパティ名のバッキング参照を検索するために必要なプロパティ名参照を修飾できます。<xref:System.Windows.Style.TargetType%2A>  
  
-   `Resources`プロパティ(<xref:System.Windows.ResourceDictionary>の項目) およびテンプレートコンテンツ内のすべてのコンテンツは、他のピアに値としてアクセスできる必要があります。 アンビエントとし`Resources`てプロパティ全体を宣言すると、WPF XAML パーサーでこれを有効にするロジックが呼び出されます。  
  
 を<xref:System.Windows.ResourceDictionary>型レベルで設定<xref:System.Windows.Markup.AmbientAttribute>するシナリオの例については、「」を参照してください。  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
    <altmember cref="T:System.Xaml.XamlMember" />
    <altmember cref="T:System.Xaml.IAmbientProvider" />
    <related type="Article" href="https://msdn.microsoft.com/library/5dfb299a-b6e2-41b8-8694-e6ac987547f1">カスタム型およびライブラリの XAML 関連の CLR 属性</related>
    <related type="Article" href="https://msdn.microsoft.com/library/c2667cbd-2f46-4a7f-9dfc-53696e35e8e4">.NET Framework XAML サービスで使用するためのカスタム型の定義</related>
    <related type="Article" href="https://msdn.microsoft.com/library/0e11f386-808c-4eae-9ba6-029ad7ba2211">NET XAML サービスの概念説明ドキュメント</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AmbientAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.AmbientAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AmbientAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Markup.AmbientAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
