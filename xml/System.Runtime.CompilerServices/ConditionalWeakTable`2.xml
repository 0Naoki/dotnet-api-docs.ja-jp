<Type Name="ConditionalWeakTable&lt;TKey,TValue&gt;" FullName="System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b1a77597b1732d693bde5a84d6db7a706b6010e8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69066185" /></Metadata><TypeSignature Language="C#" Value="public sealed class ConditionalWeakTable&lt;TKey,TValue&gt; where TKey : class where TValue : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ConditionalWeakTable`2&lt;class TKey, class TValue&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ConditionalWeakTable(Of TKey, TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA; where TKey : class where TValue : classpublic ref class ConditionalWeakTable sealed" />
  <TypeSignature Language="F#" Value="type ConditionalWeakTable&lt;'Key, 'Value (requires 'Key : null and 'Value : null)&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TValue">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey"><span data-ttu-id="22d62-101">フィールドがアタッチされる参照型。</span><span class="sxs-lookup"><span data-stu-id="22d62-101">The reference type to which the field is attached.</span></span></typeparam>
    <typeparam name="TValue"><span data-ttu-id="22d62-102">フィールドの種類。</span><span class="sxs-lookup"><span data-stu-id="22d62-102">The field's type.</span></span> <span data-ttu-id="22d62-103">参照型である必要があります。</span><span class="sxs-lookup"><span data-stu-id="22d62-103">This must be a reference type.</span></span></typeparam>
    <summary><span data-ttu-id="22d62-104">コンパイラがマネージド オブジェクトに動的にオブジェクト フィールドをアタッチできるようにします。</span><span class="sxs-lookup"><span data-stu-id="22d62-104">Enables compilers to dynamically attach object fields to managed objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22d62-105">クラス<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>を使用すると、言語コンパイラは、実行時に任意のプロパティをマネージオブジェクトにアタッチできます。</span><span class="sxs-lookup"><span data-stu-id="22d62-105">The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class enables language compilers to attach arbitrary properties to managed objects at run time.</span></span> <span data-ttu-id="22d62-106"><xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>オブジェクトは、キーによって表されるマネージオブジェクトを、値で表される添付プロパティにバインドするディクショナリです。</span><span class="sxs-lookup"><span data-stu-id="22d62-106">A <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object is a dictionary that binds a managed object, which is represented by a key, to its attached property, which is represented by a value.</span></span> <span data-ttu-id="22d62-107">オブジェクトのキーは、プロパティがアタッチされ`TKey`ているクラスの個別のインスタンスであり、その値は、対応するオブジェクトに割り当てられているプロパティ値です。</span><span class="sxs-lookup"><span data-stu-id="22d62-107">The object's keys are the individual instances of the `TKey` class to which the property is attached, and its values are the property values that are assigned to the corresponding objects.</span></span>  
  
 <span data-ttu-id="22d62-108">キーは一意である必要があります。つまり、クラスは、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>マネージオブジェクトごとに1つのアタッチされた値をサポートします。</span><span class="sxs-lookup"><span data-stu-id="22d62-108">Keys must be unique; in other words, the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class supports one attached value per managed object.</span></span> <span data-ttu-id="22d62-109">2つのキーは、 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>それらを`true`メソッドに渡すと等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="22d62-109">Two keys are equal if passing them to the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method returns `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="22d62-110">をオーバーライド<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>して、キーのハッシュコードを明示的に設定することによって、等価比較を制御することはできません。</span><span class="sxs-lookup"><span data-stu-id="22d62-110">You cannot control equality comparisons by overriding <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> to explicitly set the hash code for a key.</span></span> <span data-ttu-id="22d62-111">クラス<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>は、ハッシュコードを<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>計算するためにメソッドを使用しないため、 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>オーバーライドを呼び出しません。</span><span class="sxs-lookup"><span data-stu-id="22d62-111">The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class does not use the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> method to compute hash codes, and therefore does not invoke <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> overrides.</span></span>  
  
 <span data-ttu-id="22d62-112">クラスは<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>キーと値のペアのコレクションを保持しますが、ディクショナリオブジェクトではなくテーブルとして考えることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="22d62-112">Although the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class holds a collection of key/value pairs, it is best thought of as a table rather than a dictionary object.</span></span> <span data-ttu-id="22d62-113">クラス<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>は、次のいくつかの点でディクショナリとは異なります。</span><span class="sxs-lookup"><span data-stu-id="22d62-113">The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class differs from a dictionary in several ways:</span></span>  
  
-   <span data-ttu-id="22d62-114">キーを保持しません。</span><span class="sxs-lookup"><span data-stu-id="22d62-114">It does not persist keys.</span></span> <span data-ttu-id="22d62-115">つまり、キーが保持されるのは、コレクションのメンバーであるためです。</span><span class="sxs-lookup"><span data-stu-id="22d62-115">That is, a key is not kept alive only because it is a member of the collection.</span></span>  
  
-   <span data-ttu-id="22d62-116">通常、ディクショナリに含まれるすべてのメソッド ( `GetEnumerator`や`Contains`など) は含まれません。</span><span class="sxs-lookup"><span data-stu-id="22d62-116">It does not include all the methods (such as `GetEnumerator` or `Contains`) that a dictionary typically has.</span></span>  
  
-   <span data-ttu-id="22d62-117">インターフェイスを<xref:System.Collections.Generic.IDictionary%602>実装していません。</span><span class="sxs-lookup"><span data-stu-id="22d62-117">It does not implement the <xref:System.Collections.Generic.IDictionary%602> interface.</span></span>  
  
 <span data-ttu-id="22d62-118">クラス<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>は、コレクションに格納されているキーのオブジェクトの有効期間を管理するために、他のコレクションオブジェクトとは異なります。</span><span class="sxs-lookup"><span data-stu-id="22d62-118">The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class differs from other collection objects in its management of the object lifetime of keys stored in the collection.</span></span> <span data-ttu-id="22d62-119">通常、オブジェクトがコレクションに格納されている場合、その有効期間は、削除されるまで (およびオブジェクトへの追加の参照がない)、またはコレクションオブジェクト自体が破棄されるまで継続されます。</span><span class="sxs-lookup"><span data-stu-id="22d62-119">Ordinarily, when an object is stored in a collection, its lifetime lasts until it is removed (and there are no additional references to the object) or until the collection object itself is destroyed.</span></span> <span data-ttu-id="22d62-120">ただし、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>クラスでキーと値のペアをテーブルに追加しても、テーブルに格納されている値から直接アクセスできる場合でも、キーが保持されることはありません (たとえば、テーブルに値 V1 のキーが1つ含まれている場合)。、2番目のキー B、およびへの参照を含む値 P2。</span><span class="sxs-lookup"><span data-stu-id="22d62-120">However, in the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class, adding a key/value pair to the table does not ensure that the key will persist, even if it can be reached directly from a value stored in the table (for example, if the table contains one key, A, with a value V1, and a second key, B, with a value P2 that contains a reference to A).</span></span> <span data-ttu-id="22d62-121">代わりに、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>では、キーへの他の参照がテーブルの外部に存在しなくなるとすぐに、キー/値エントリが自動的に削除されます。</span><span class="sxs-lookup"><span data-stu-id="22d62-121">Instead, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> automatically removes the key/value entry as soon as no other references to a key exist outside the table.</span></span> <span data-ttu-id="22d62-122">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="22d62-122">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22d62-123">次の例は、テーブルの外部に格納<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>されているキーが破棄されても保持されないことを示しています。</span><span class="sxs-lookup"><span data-stu-id="22d62-123">The following example illustrates that a key stored in the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table does not persist after references to it outside the table are destroyed.</span></span> <span data-ttu-id="22d62-124">この例では、と`ManagedClass` `ClassData`いう2つのクラスを定義しています。これは、テーブル内のキーを表し、はキーの値を表します。</span><span class="sxs-lookup"><span data-stu-id="22d62-124">The example defines two classes: `ManagedClass`, which represents the key in the table, and `ClassData`, which represents the key's value.</span></span> <span data-ttu-id="22d62-125">この例では、それぞれの型の3つのオブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="22d62-125">The example instantiates three objects of each type.</span></span> <span data-ttu-id="22d62-126">また、2番<xref:System.WeakReference>目`ManagedClass`のを表すオブジェクトをインスタンス化し、2 `ManagedClass`番目のインスタンスを破棄します。</span><span class="sxs-lookup"><span data-stu-id="22d62-126">It also instantiates a <xref:System.WeakReference> object that represents the second `ManagedClass`, and then destroys the second `ManagedClass` instance.</span></span> <span data-ttu-id="22d62-127">プロパティから2番目`ManagedClass`のオブジェクトを取得しようとすると、そのオブジェクトへの参照が残っていないことを示します。 <xref:System.WeakReference.Target%2A></span><span class="sxs-lookup"><span data-stu-id="22d62-127">The attempt to retrieve the second `ManagedClass` object from the <xref:System.WeakReference.Target%2A> property indicates that no references to the object remain.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.class/cs/example1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.class/vb/example1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="22d62-128"><see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" />クラスのインスタンスはスレッドセーフです。</span><span class="sxs-lookup"><span data-stu-id="22d62-128">Instances of the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> class are thread safe.</span></span> <span data-ttu-id="22d62-129">呼び出し元は、追加のロックを行う必要はありません。</span><span class="sxs-lookup"><span data-stu-id="22d62-129">They do not require callers to do any additional locking.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionalWeakTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConditionalWeakTable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="22d62-130"><see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="22d62-130">Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22d62-131">コンストラクター <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A>は空<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>のテーブルをインスタンス化します。つまり、テーブルにはキーと値のペアが含まれていません。</span><span class="sxs-lookup"><span data-stu-id="22d62-131">The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A> constructor instantiates an empty <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table; that is, the table contains no key/value pairs.</span></span> <span data-ttu-id="22d62-132">、、または<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A>の各メソッドを呼び出すこと<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>によって、キーと値のペアを追加できます。</span><span class="sxs-lookup"><span data-stu-id="22d62-132">You can add key/value pairs by calling the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>, or <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method.</span></span>  
  
 <span data-ttu-id="22d62-133"><xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>オブジェクト内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="22d62-133">Every key in a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object must be unique.</span></span> <span data-ttu-id="22d62-134">キーは、同じオブジェクトを参照する場合は一意ではありません (つまり、 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> `true`メソッドがを引数として渡す場合)。</span><span class="sxs-lookup"><span data-stu-id="22d62-134">Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method returns `true`).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="member this.Add : 'Key * 'Value -&gt; unit" Usage="conditionalWeakTable.Add (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="22d62-135">追加するキー。</span><span class="sxs-lookup"><span data-stu-id="22d62-135">The key to add.</span></span> <span data-ttu-id="22d62-136"><paramref name="key" /> は、プロパティのアタッチ先となるオブジェクトを表します。</span><span class="sxs-lookup"><span data-stu-id="22d62-136"><paramref name="key" /> represents the object to which the property is attached.</span></span></param>
        <param name="value"><span data-ttu-id="22d62-137">キーのプロパティ値。</span><span class="sxs-lookup"><span data-stu-id="22d62-137">The key's property value.</span></span></param>
        <summary><span data-ttu-id="22d62-138">テーブルにキーを追加します。</span><span class="sxs-lookup"><span data-stu-id="22d62-138">Adds a key to the table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22d62-139"><xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>オブジェクト内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="22d62-139">Every key in a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object must be unique.</span></span> <span data-ttu-id="22d62-140">キーは、同じオブジェクトを参照する場合は一意ではありません (つまり、 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> `true`メソッドがを引数として渡す場合)。</span><span class="sxs-lookup"><span data-stu-id="22d62-140">Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method returns `true`).</span></span>  
  
 <span data-ttu-id="22d62-141">加算操作中にキーがガベージコレクトされると、既存のキーと値のペアが削除され、例外がスローされることなく新しいキーと値のペアが追加されます。</span><span class="sxs-lookup"><span data-stu-id="22d62-141">If the key is garbage-collected during the addition operation, the existing key/value pair is removed and the new key/value pair is added without an exception being thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22d62-142">次の例では`MainClass` 、 `MainClass`インスタンスに`MainInfo`関する情報を提供するクラスとクラスを定義しています。</span><span class="sxs-lookup"><span data-stu-id="22d62-142">The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance.</span></span> <span data-ttu-id="22d62-143">次に、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>メソッドを呼び出して、 `MainClass`オブジェクトと<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>そのアタッチさ`MainInfo`れたオブジェクトをテーブルに追加します。</span><span class="sxs-lookup"><span data-stu-id="22d62-143">The example then calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> method to add a `MainClass` object and its attached `MainInfo` object to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table.</span></span> <span data-ttu-id="22d62-144">また、この例では、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A>メソッド<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>およびメソッドを呼び出して、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A>テーブルにキーと値のペアを追加する方法と、既存のキーの値を取得するメソッドについても説明します。</span><span class="sxs-lookup"><span data-stu-id="22d62-144">The example also illustrates calls to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> methods to add key/value pairs to the table, and to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to retrieve the value of an existing key.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="22d62-145"><paramref name="key" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="22d62-145"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="22d62-146"><paramref name="key" /> が既に存在します。</span><span class="sxs-lookup"><span data-stu-id="22d62-146"><paramref name="key" /> already exists.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="22d62-147">直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="22d62-147">requires full trust for the immediate caller.</span></span> <span data-ttu-id="22d62-148">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="22d62-148">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdate">
      <MemberSignature Language="C#" Value="public void AddOrUpdate (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOrUpdate(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.AddOrUpdate(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddOrUpdate (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddOrUpdate(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="member this.AddOrUpdate : 'Key * 'Value -&gt; unit" Usage="conditionalWeakTable.AddOrUpdate (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="TValue" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="22d62-149">追加または更新するキー。</span><span class="sxs-lookup"><span data-stu-id="22d62-149">The key to add or update.</span></span> <span data-ttu-id="22d62-150"><see langword="null" /> は指定できません。</span><span class="sxs-lookup"><span data-stu-id="22d62-150">May not be <see langword="null" />.</span></span></param>
        <param name="value"><span data-ttu-id="22d62-151"><paramref name="key" /> に関連付ける値。</span><span class="sxs-lookup"><span data-stu-id="22d62-151">The value to associate with <paramref name="key" />.</span></span></param>
        <summary><span data-ttu-id="22d62-152">キーが存在しない場合はキーと値を追加し、存在する場合は既存のキーの値を更新します。</span><span class="sxs-lookup"><span data-stu-id="22d62-152">Adds the key and value if the key doesn't exist, or updates the existing key's value if it does exist.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="22d62-153"><paramref name="key" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="22d62-153"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="conditionalWeakTable.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="22d62-154">すべてのキーと値のペアを消去する。</span><span class="sxs-lookup"><span data-stu-id="22d62-154">Clears all the key/value pairs.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ConditionalWeakTable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ConditionalWeakTable`2 ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="conditionalWeakTable.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="22d62-155">ガベージ コレクターが <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> オブジェクトを再利用しているときに、リソースが解放され、他のクリーンアップ操作が確実に実行されるようにします。</span><span class="sxs-lookup"><span data-stu-id="22d62-155">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22d62-156">現在のオブジェクトを<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Finalize%2A>完了する準備が整うと、ガベージコレクターはを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="22d62-156">The garbage collector calls <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Finalize%2A> when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateValue">
      <MemberSignature Language="C#" Value="public TValue GetOrCreateValue (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TValue GetOrCreateValue(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreateValue (key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue GetOrCreateValue(TKey key);" />
      <MemberSignature Language="F#" Value="member this.GetOrCreateValue : 'Key -&gt; 'Value" Usage="conditionalWeakTable.GetOrCreateValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="22d62-157">検索対象のキー。</span><span class="sxs-lookup"><span data-stu-id="22d62-157">The key to search for.</span></span> <span data-ttu-id="22d62-158"><paramref name="key" /> は、プロパティのアタッチ先となるオブジェクトを表します。</span><span class="sxs-lookup"><span data-stu-id="22d62-158"><paramref name="key" /> represents the object to which the property is attached.</span></span></param>
        <summary><span data-ttu-id="22d62-159">テーブルで指定されたキーをアトミックに検索し、対応する値を返します。</span><span class="sxs-lookup"><span data-stu-id="22d62-159">Atomically searches for a specified key in the table and returns the corresponding value.</span></span> <span data-ttu-id="22d62-160">キーがテーブルに存在しない場合は、メソッドによって、テーブルの値を表すクラスのパラメーターなしのコンストラクターが呼び出され、指定されたキーにバインドされる値を作成します。</span><span class="sxs-lookup"><span data-stu-id="22d62-160">If the key does not exist in the table, the method invokes the parameterless constructor of the class that represents the table's value to create a value that is bound to the specified key.</span></span></summary>
        <returns><span data-ttu-id="22d62-161"><paramref name="key" /> がテーブル内に既に存在する場合には、<paramref name="key" /> に対応する値。それ以外の場合には、<paramref name="TValue" /> ジェネリック型パラメーターによって定義されるクラスのパラメーターなしのコンストラクターによって作成された新しい値。</span><span class="sxs-lookup"><span data-stu-id="22d62-161">The value that corresponds to <paramref name="key" />, if <paramref name="key" /> already exists in the table; otherwise, a new value created by the parameterless constructor of the class defined by the <paramref name="TValue" /> generic type parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22d62-162">が`key`テーブル内に存在しない場合、メソッドは、 `TValue`ジェネリック型パラメーターで定義されているクラスのパラメーターなしのコンストラクターを呼び出すことによってインスタンス化されたオブジェクトと共に、それを追加します。</span><span class="sxs-lookup"><span data-stu-id="22d62-162">If `key` does not exist in the table, the method adds it, along with the object that is instantiated by calling the parameterless constructor of the class defined by the `TValue` generic type parameter.</span></span> <span data-ttu-id="22d62-163">クラスに`TValue`パラメーターなしのコンストラクター <xref:System.MissingMethodException>がない場合は、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="22d62-163">If the `TValue` class has no parameterless constructor, a <xref:System.MissingMethodException> is thrown.</span></span>  
  
 <span data-ttu-id="22d62-164">これは、テーブルの値のクラスでパラメーターなしのコンストラクターが定義され<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>ている場合に、既存の値を取得したり、テーブルに新しい値を追加したりするために推奨される方法です。</span><span class="sxs-lookup"><span data-stu-id="22d62-164">This is the recommended method of retrieving an existing value or adding a new value to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table if the class of the table's value defines a parameterless constructor.</span></span> <span data-ttu-id="22d62-165">パラメーターなしのコンストラクターを定義しない場合は、代わりに<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>メソッドを呼び出すことができます。このメソッドは、コールバックによって提供されるメソッドに依存して、テーブルの値を表すオブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="22d62-165">If it does not define a parameterless constructor, you can instead call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> method, which relies on a callback-provided method to instantiate the object representing the table's value</span></span>  
  
 <span data-ttu-id="22d62-166">キーがテーブルに見つからない場合にキーと値のペアを追加せずに既存のキーの値を取得するに<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A>は、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="22d62-166">To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22d62-167">次の例では`MainClass` 、 `MainClass`インスタンスに`MainInfo`関する情報を提供するクラスとクラスを定義しています。</span><span class="sxs-lookup"><span data-stu-id="22d62-167">The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance.</span></span> <span data-ttu-id="22d62-168">この例では<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> 、メソッドを呼び出し`MainClass`て、オブジェクトと`MainInfo` <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>そのアタッチされたオブジェクトをテーブルに追加します。</span><span class="sxs-lookup"><span data-stu-id="22d62-168">The example calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method to add a `MainClass` object and its attached `MainInfo` object to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table.</span></span> <span data-ttu-id="22d62-169">また、この例では、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>メソッド<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>およびメソッドを呼び出して、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A>テーブルにキーと値のペアを追加する方法と、既存のキーの値を取得するメソッドについても説明します。</span><span class="sxs-lookup"><span data-stu-id="22d62-169">The example also illustrates calls to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> methods to add key/value pairs to the table, and to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to retrieve the value of an existing key.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="22d62-170"><paramref name="key" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="22d62-170"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="22d62-171"><see href="https://go.microsoft.com/fwlink/?LinkID=247912">Windows ストア アプリ用 .NET</see> または<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">ポータブル クラス ライブラリ</see>では、基本クラスの例外である <see cref="T:System.MissingMemberException" /> を代わりにキャッチします。</span><span class="sxs-lookup"><span data-stu-id="22d62-171">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="22d62-172">テーブルの値を表すクラスでは、パラメーターなしのコンストラクターが定義されません。</span><span class="sxs-lookup"><span data-stu-id="22d62-172">The class that represents the table's value does not define a parameterless constructor.</span></span></exception>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)" />
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public TValue GetValue (TKey key, System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.CreateValueCallback createValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TValue GetValue(!TKey key, class System.Runtime.CompilerServices.ConditionalWeakTable`2/CreateValueCallback&lt;!TKey, !TValue&gt; createValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue GetValue(TKey key, System::Runtime::CompilerServices::ConditionalWeakTable&lt;TKey, TValue&gt;::CreateValueCallback ^ createValueCallback);" />
      <MemberSignature Language="F#" Value="member this.GetValue : 'Key * System.Runtime.CompilerServices.ConditionalWeakTable&lt;'Key, 'Value (requires 'Key : null and 'Value : null)&gt;.CreateValueCallback -&gt; 'Value" Usage="conditionalWeakTable.GetValue (key, createValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="createValueCallback" Type="System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;+CreateValueCallback" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="22d62-173">検索対象のキー。</span><span class="sxs-lookup"><span data-stu-id="22d62-173">The key to search for.</span></span> <span data-ttu-id="22d62-174"><paramref name="key" /> は、プロパティのアタッチ先となるオブジェクトを表します。</span><span class="sxs-lookup"><span data-stu-id="22d62-174"><paramref name="key" /> represents the object to which the property is attached.</span></span></param>
        <param name="createValueCallback"><span data-ttu-id="22d62-175">指定された <paramref name="key" /> の値を作成できるメソッドへのデリゲート。</span><span class="sxs-lookup"><span data-stu-id="22d62-175">A delegate to a method that can create a value for the given <paramref name="key" />.</span></span> <span data-ttu-id="22d62-176"><c>TKey</c> 型の 1 つのパラメーターを持ち、<c>TValue</c> 型の値を戻します。</span><span class="sxs-lookup"><span data-stu-id="22d62-176">It has a single parameter of type <c>TKey</c>, and returns a value of type <c>TValue</c>.</span></span></param>
        <summary><span data-ttu-id="22d62-177">テーブルで指定されたキーをアトミックに検索し、対応する値を返します。</span><span class="sxs-lookup"><span data-stu-id="22d62-177">Atomically searches for a specified key in the table and returns the corresponding value.</span></span> <span data-ttu-id="22d62-178">キーがテーブルに存在しない場合は、メソッドがコールバック メソッドを呼び出して、指定されたキーにバインドされる値を作成します。</span><span class="sxs-lookup"><span data-stu-id="22d62-178">If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.</span></span></summary>
        <returns><span data-ttu-id="22d62-179"><paramref name="key" /> がテーブルに既に存在している場合は、<paramref name="key" /> に添付されている値。それ以外の場合は、<paramref name="createValueCallback" /> デリゲートによって返される新しい値。</span><span class="sxs-lookup"><span data-stu-id="22d62-179">The value attached to <paramref name="key" />, if <paramref name="key" /> already exists in the table; otherwise, the new value returned by the <paramref name="createValueCallback" /> delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22d62-180">が`key`テーブル内に存在しない場合<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>は、 `createValueCallback`パラメーターによって定義されたメソッドを呼び出し、キーを渡します。</span><span class="sxs-lookup"><span data-stu-id="22d62-180">If `key` does not exist in the table, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> invokes the method that is defined by the `createValueCallback` parameter and passes it the key.</span></span> <span data-ttu-id="22d62-181">新しい値がテーブル内のキーにバインドされ、結果として返されます。</span><span class="sxs-lookup"><span data-stu-id="22d62-181">A new value is bound to the key in the table and returned as a result.</span></span>  
  
 <span data-ttu-id="22d62-182">このメソッドは、テーブルの値を表すクラスがパラメーターなしのコンストラクターを定義していない場合にのみ使用します。</span><span class="sxs-lookup"><span data-stu-id="22d62-182">Use this method only when the class that represents the table's value does not define a parameterless constructor.</span></span> <span data-ttu-id="22d62-183">パラメーターなしのコンストラクターを定義する場合は、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A>代わりにメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="22d62-183">If it does define a parameterless constructor, use the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method instead.</span></span> <span data-ttu-id="22d62-184">キーがテーブルに見つからない場合にキーと値のペアを追加せずに既存のキーの値を取得するに<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A>は、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="22d62-184">To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method.</span></span>  
  
 <span data-ttu-id="22d62-185">複数のスレッドが同じキーを作成しよう`createValueCallback`とすると、同じキーを使用して複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="22d62-185">If multiple threads try to create the same key, `createValueCallback` may be invoked multiple times with the same key.</span></span> <span data-ttu-id="22d62-186">これらの呼び出しのうち1つだけが成功し、その戻り値がテーブルに追加されます。</span><span class="sxs-lookup"><span data-stu-id="22d62-186">Only one of these calls will succeed, and its returned value will be added to the table.</span></span> <span data-ttu-id="22d62-187">値の作成に成功するスレッドは不確定です。</span><span class="sxs-lookup"><span data-stu-id="22d62-187">Which thread succeeds in creating the value is indeterminate.</span></span> <span data-ttu-id="22d62-188">このルールは、デッドロックを`createValueCallback`防ぐためにテーブルを内部テーブルロックの外部で呼び出すことを許可します。</span><span class="sxs-lookup"><span data-stu-id="22d62-188">This rule permits the table to invoke `createValueCallback` outside the internal table lock to prevent deadlocks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22d62-189">次の例では`MainClass` 、 `MainClass`インスタンスに`MainInfo`関する情報を提供するクラスとクラスを定義しています。</span><span class="sxs-lookup"><span data-stu-id="22d62-189">The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance.</span></span> <span data-ttu-id="22d62-190">また、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback>デリゲートに割り当てて`Shared` <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>メソッドに渡す`CreateAttachedValue`ことができる静的な (Visual Basic) メソッドも定義します。</span><span class="sxs-lookup"><span data-stu-id="22d62-190">It also defines a static (`Shared` in Visual Basic) `CreateAttachedValue` method that can be assigned to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback> delegate and passed to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> method.</span></span> <span data-ttu-id="22d62-191">この例では<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 、メソッドを呼び出し`MainClass`て、オブジェクトと`MainInfo` <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>そのアタッチされたオブジェクトをテーブルに追加します。</span><span class="sxs-lookup"><span data-stu-id="22d62-191">The example calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> method to add a `MainClass` object and its attached `MainInfo` object to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table.</span></span> <span data-ttu-id="22d62-192">また、この例では、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>メソッド<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A>およびメソッドを呼び出して、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A>テーブルにキーと値のペアを追加する方法と、既存のキーの値を取得するメソッドについても説明します。</span><span class="sxs-lookup"><span data-stu-id="22d62-192">The example also illustrates calls to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> methods to add key/value pairs to the table, and to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to retrieve the value of an existing key.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="22d62-193"><paramref name="key" /> または <paramref name="createValueCallback" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="22d62-193"><paramref name="key" /> or <paramref name="createValueCallback" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="22d62-194">直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="22d62-194">requires full trust for the immediate caller.</span></span> <span data-ttu-id="22d62-195">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="22d62-195">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)" />
        <altmember cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'Key -&gt; bool" Usage="conditionalWeakTable.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="22d62-196">削除するキー。</span><span class="sxs-lookup"><span data-stu-id="22d62-196">The key to remove.</span></span></param>
        <summary><span data-ttu-id="22d62-197">テーブルから、キーとその値を削除します。</span><span class="sxs-lookup"><span data-stu-id="22d62-197">Removes a key and its value from the table.</span></span></summary>
        <returns><span data-ttu-id="22d62-198">キーが見つかり、削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="22d62-198"><see langword="true" /> if the key is found and removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22d62-199">この操作中にキーがガベージコレクトされた場合、メソッドは例外を発生させず、戻り値は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="22d62-199">If the key is garbage-collected during this operation, the method does not raise an exception and the return value is undefined.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="22d62-200"><paramref name="key" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="22d62-200"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="22d62-201">直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="22d62-201">requires full trust for the immediate caller.</span></span> <span data-ttu-id="22d62-202">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="22d62-202">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of TKey, TValue)) Implements IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'Key *  -&gt; bool" Usage="conditionalWeakTable.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="22d62-203">添付プロパティのオブジェクトを表すキー。</span><span class="sxs-lookup"><span data-stu-id="22d62-203">The key that represents an object with an attached property.</span></span></param>
        <param name="value"><span data-ttu-id="22d62-204">このメソッドから戻るときに、添付プロパティの値が格納されています。</span><span class="sxs-lookup"><span data-stu-id="22d62-204">When this method returns, contains the attached property value.</span></span> <span data-ttu-id="22d62-205"><paramref name="key" /> が見つからない場合は、<paramref name="value" /> に既定値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="22d62-205">If <paramref name="key" /> is not found, <paramref name="value" /> contains the default value.</span></span></param>
        <summary><span data-ttu-id="22d62-206">指定したキーの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="22d62-206">Gets the value of the specified key.</span></span></summary>
        <returns><span data-ttu-id="22d62-207"><paramref name="key" /> が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="22d62-207"><see langword="true" /> if <paramref name="key" /> is found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22d62-208">この操作中にキーがガベージコレクトされた場合、メソッドは`false`を返し`value` 、を既定値に設定することがあります (キーが存在しない場合と同様)。</span><span class="sxs-lookup"><span data-stu-id="22d62-208">If the key is garbage-collected during this operation, the method may return `false` and set `value` to the default value (as if the key were not present).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22d62-209">次の例では`MainClass` 、 `MainClass`インスタンスに`MainInfo`関する情報を提供するクラスとクラスを定義しています。</span><span class="sxs-lookup"><span data-stu-id="22d62-209">The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance.</span></span> <span data-ttu-id="22d62-210">この例では<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A>、、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>およびの各メソッド<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>を呼び出して、テーブルにキーと値のペアを追加します。</span><span class="sxs-lookup"><span data-stu-id="22d62-210">The example calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A>, and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> methods to add key/value pairs to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table.</span></span> <span data-ttu-id="22d62-211">この例では、 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A>メソッドを呼び出して、キーと値のペアがテーブルに追加されていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="22d62-211">In each case, the example calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to confirm that the key/value pair has been added to the table.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="22d62-212"><paramref name="key" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="22d62-212"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="22d62-213">直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="22d62-213">requires full trust for the immediate caller.</span></span> <span data-ttu-id="22d62-214">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="22d62-214">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)" />
      </Docs>
    </Member>
  </Members>
</Type>
