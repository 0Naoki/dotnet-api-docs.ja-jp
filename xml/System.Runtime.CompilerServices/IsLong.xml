<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f8bf804695c48d4ce5c23b8a91eec7f8319047e2" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37472126" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <TypeSignature Language="F#" Value="type IsLong = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>修飾される整数が標準の C++ <see langword="long" /> 値であることを示します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C++ 標準では、ことを示します、`long`は別の型の値と整数値。  ただし、これらは両方を使用して表す`ELEMENT_TYPE_I4`アセンブリ。  区別するために、 `long` Microsoft C コンパイラが追加、C++ の整数から、<xref:System.Runtime.CompilerServices.IsLong>修飾子の任意のインスタンスを`long`emited のインスタンスの場合します。  このプロセスは、言語レベルの種類の安全性を維持するために非常に重要です。  
  
 コンパイラは、ジャストイン タイム (JIT) コンパイラが、既定の動作が適切ではない場合に、値を処理する方法を変更するメタデータ内のカスタム修飾子を出力します。  JIT コンパイラには、カスタム修飾子が検出されると、修飾子を指定する方法で値を処理します。  コンパイラは、メソッド、パラメーターにカスタム修飾子を適用して、戻り値です。  JIT コンパイラでは、必須の修飾子に応答する必要がありますが、オプションの修飾子を無視することができます。  
  
 カスタム修飾子を使用して、次の手法のいずれかのメタデータに出力できます。  
  
-   内のメソッドを使用して、<xref:System.Reflection.Emit.TypeBuilder>などクラス<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>、 <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>、 <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>、および<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>します。  
  
-   呼び出しを含む Microsoft intermediate language (MSIL) の命令ファイルを生成する`modopt`と`modreq`、使用して、ファイルをアセンブルし、 [Ilasm.exe (IL アセンブラー)](~/docs/framework/tools/ilasm-exe-il-assembler.md)します。  
  
-   アンマネージ リフレクション API を使用します。  
  
   
  
## Examples  
 次の例では、出力する方法、<xref:System.Runtime.CompilerServices.IsLong>リフレクションを使用してアセンブリのオブジェクト。  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>