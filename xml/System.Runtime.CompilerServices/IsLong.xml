<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f0ff9e7ca9b500686e20b077aeaf036990a624ae" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30476136" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="3d19f-101">修飾される整数が標準の C++ <see langword="long" /> 値であることを示します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3d19f-101">Indicates that a modified integer is a standard C++ <see langword="long" /> value.</span>
      </span>
      <span data-ttu-id="3d19f-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3d19f-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d19f-103">C++ 標準では、ことを示します、`long`値と整数値は個別の型。</span><span class="sxs-lookup"><span data-stu-id="3d19f-103">The C++ standard indicates that a `long` value and an integer value are distinct types.</span></span>  <span data-ttu-id="3d19f-104">ただし、それらは両方の表現を使用して`ELEMENT_TYPE_I4`アセンブリにします。</span><span class="sxs-lookup"><span data-stu-id="3d19f-104">However, they are both represented using `ELEMENT_TYPE_I4` in an assembly.</span></span>  <span data-ttu-id="3d19f-105">区別するために、 `long` Microsoft C コンパイラを追加、C++ の整数から、<xref:System.Runtime.CompilerServices.IsLong>修飾子の任意のインスタンスを`long`emited がインスタンスの場合。</span><span class="sxs-lookup"><span data-stu-id="3d19f-105">To distinguish a `long` from an integer in C++, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsLong> modifier to any instance of a `long` when the instance is emited.</span></span>  <span data-ttu-id="3d19f-106">このプロセスは、言語レベルの種類の安全性を維持するために非常に重要です。</span><span class="sxs-lookup"><span data-stu-id="3d19f-106">This process is critically important for maintaining language-level type safety.</span></span>  
  
 <span data-ttu-id="3d19f-107">コンパイラは、ジャストイン タイム (JIT) コンパイラが既定の動作が適切ではない場合に、値を処理する方法を変更するメタデータ内のカスタム修飾子を生成します。</span><span class="sxs-lookup"><span data-stu-id="3d19f-107">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="3d19f-108">JIT コンパイラには、カスタム修飾子が検出されると、修飾子を指定する方法で値を処理します。</span><span class="sxs-lookup"><span data-stu-id="3d19f-108">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="3d19f-109">コンパイラは、メソッド、パラメーターにカスタム修飾子を適用し、値を返します。</span><span class="sxs-lookup"><span data-stu-id="3d19f-109">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="3d19f-110">JIT コンパイラでは、必須の修飾子に応答する必要がありますが、オプションの修飾子を無視することができます。</span><span class="sxs-lookup"><span data-stu-id="3d19f-110">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="3d19f-111">次の手法のいずれかを使用してメタデータにカスタム修飾子を出力することができます。</span><span class="sxs-lookup"><span data-stu-id="3d19f-111">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="3d19f-112">内のメソッドを使用して、<xref:System.Reflection.Emit.TypeBuilder>などクラス<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>、 <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>、 <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>、および<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>です。</span><span class="sxs-lookup"><span data-stu-id="3d19f-112">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="3d19f-113">呼び出しを含む Microsoft intermediate language (MSIL) の命令ファイルを生成する`modopt`と`modreq`を使用してファイルをまとめることと、 [Ilasm.exe (IL アセンブラー)](~/docs/framework/tools/ilasm-exe-il-assembler.md)です。</span><span class="sxs-lookup"><span data-stu-id="3d19f-113">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="3d19f-114">アンマネージ リフレクション API を使用します。</span><span class="sxs-lookup"><span data-stu-id="3d19f-114">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d19f-115">次の例で出力する方法、<xref:System.Runtime.CompilerServices.IsLong>リフレクションを使用してアセンブリにオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3d19f-115">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsLong> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>