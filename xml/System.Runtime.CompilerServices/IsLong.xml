<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IsLong.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f0ff9e7ca9b500686e20b077aeaf036990a624ae.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0ff9e7ca9b500686e20b077aeaf036990a624ae</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>Indicates that a modified integer is a standard C++ <ph id="ph1">&lt;see langword="long" /&gt;</ph> value.</source>
          <target state="translated">修飾される整数が標準の C++ <ph id="ph1">&lt;see langword="long" /&gt;</ph> 値であることを示します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>The C++ standard indicates that a <ph id="ph1">`long`</ph> value and an integer value are distinct types.</source>
          <target state="translated">C++ 標準では、ことを示します、<ph id="ph1">`long`</ph>値と整数値は個別の型。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>However, they are both represented using <ph id="ph1">`ELEMENT_TYPE_I4`</ph> in an assembly.</source>
          <target state="translated">ただし、それらは両方の表現を使用して<ph id="ph1">`ELEMENT_TYPE_I4`</ph>アセンブリにします。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>To distinguish a <ph id="ph1">`long`</ph> from an integer in C++, the Microsoft C++ compiler adds the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.IsLong&gt;</ph> modifier to any instance of a <ph id="ph3">`long`</ph> when the instance is emited.</source>
          <target state="translated">区別するために、 <ph id="ph1">`long`</ph> Microsoft C コンパイラを追加、C++ の整数から、<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.IsLong&gt;</ph>修飾子の任意のインスタンスを<ph id="ph3">`long`</ph>emited がインスタンスの場合。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>This process is critically important for maintaining language-level type safety.</source>
          <target state="translated">このプロセスは、言語レベルの種類の安全性を維持するために非常に重要です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</source>
          <target state="translated">コンパイラは、ジャストイン タイム (JIT) コンパイラが既定の動作が適切ではない場合に、値を処理する方法を変更するメタデータ内のカスタム修飾子を生成します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</source>
          <target state="translated">JIT コンパイラには、カスタム修飾子が検出されると、修飾子を指定する方法で値を処理します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>Compilers can apply custom modifiers to methods, parameters, and return values.</source>
          <target state="translated">コンパイラは、メソッド、パラメーターにカスタム修飾子を適用し、値を返します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>The JIT compiler must respond to required modifiers but can ignore optional modifiers.</source>
          <target state="translated">JIT コンパイラでは、必須の修飾子に応答する必要がありますが、オプションの修飾子を無視することができます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>You can emit custom modifiers into metadata using one of the following techniques:</source>
          <target state="translated">次の手法のいずれかを使用してメタデータにカスタム修飾子を出力することができます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>Using methods in the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> class such as <ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph>.</source>
          <target state="translated">内のメソッドを使用して、<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph>などクラス<ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <ph id="ph1">`modopt`</ph> and <ph id="ph2">`modreq`</ph>, and assembling the file with the <bpt id="p1">[</bpt>Ilasm.exe (IL Assembler)<ept id="p1">](~/docs/framework/tools/ilasm-exe-il-assembler.md)</ept>.</source>
          <target state="translated">呼び出しを含む Microsoft intermediate language (MSIL) の命令ファイルを生成する<ph id="ph1">`modopt`</ph>と<ph id="ph2">`modreq`</ph>を使用してファイルをまとめることと、 <bpt id="p1">[</bpt>Ilasm.exe (IL アセンブラー)<ept id="p1">](~/docs/framework/tools/ilasm-exe-il-assembler.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>Using the unmanaged reflection API.</source>
          <target state="translated">アンマネージ リフレクション API を使用します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsLong">
          <source>The following example demonstrates how to emit an <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsLong&gt;</ph> object into an assembly using reflection.</source>
          <target state="translated">次の例で出力する方法、<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsLong&gt;</ph>リフレクションを使用してアセンブリにオブジェクト。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>