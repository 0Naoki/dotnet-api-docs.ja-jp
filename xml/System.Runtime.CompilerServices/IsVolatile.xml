<Type Name="IsVolatile" FullName="System.Runtime.CompilerServices.IsVolatile">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="37a76c714e637ea2e4143094372ccfe538204aa2" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39754336" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsVolatile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsVolatile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsVolatile" />
  <TypeSignature Language="VB.NET" Value="Public Class IsVolatile" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsVolatile abstract sealed" />
  <TypeSignature Language="F#" Value="type IsVolatile = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ecdaa-101">フィールドを volatile としてマークします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ecdaa-101">Marks a field as volatile.</span>
      </span>
      <span data-ttu-id="ecdaa-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ecdaa-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ecdaa-103">`IsVolatile` そのフィールドが揮発性であることを示すメソッドのシグネチャのカスタム修飾子でのみ使用されます。</span><span class="sxs-lookup"><span data-stu-id="ecdaa-103">`IsVolatile` is used only in custom modifiers of method signatures to indicate that the field it marks is volatile.</span></span> <span data-ttu-id="ecdaa-104">コンパイラは volatile としてマークされている 1 つまたは複数のフィールドのメタデータをインポートする必要があります付けた命令を使用して`volatile.`このようなフィールドにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="ecdaa-104">Any compiler that imports metadata with one or more fields marked as volatile must use instructions prefixed with `volatile.` to access such fields.</span></span>  
  
 <span data-ttu-id="ecdaa-105">クラスは、<xref:System.Runtime.CompilerServices>コンパイラ ライターの使用のみ。</span><span class="sxs-lookup"><span data-stu-id="ecdaa-105">The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only.</span></span>  
  
 <span data-ttu-id="ecdaa-106">コンパイラは、ジャストイン タイム (JIT) コンパイラが、既定の動作が適切ではない場合に、値を処理する方法を変更するメタデータ内のカスタム修飾子を出力します。</span><span class="sxs-lookup"><span data-stu-id="ecdaa-106">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="ecdaa-107">JIT コンパイラには、カスタム修飾子が検出されると、修飾子を指定する方法で値を処理します。</span><span class="sxs-lookup"><span data-stu-id="ecdaa-107">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="ecdaa-108">コンパイラは、メソッド、パラメーターにカスタム修飾子を適用して、戻り値です。</span><span class="sxs-lookup"><span data-stu-id="ecdaa-108">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="ecdaa-109">JIT コンパイラでは、必須の修飾子に応答する必要がありますが、オプションの修飾子を無視することができます。</span><span class="sxs-lookup"><span data-stu-id="ecdaa-109">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  <span data-ttu-id="ecdaa-110">C++ コンパイラでは、既定では、バイト処理、JIT コンパイラが C++ と互換性のない方法でバイトを処理する場合に使用する方法を定義するカスタム修飾子を出力でした。</span><span class="sxs-lookup"><span data-stu-id="ecdaa-110">A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.</span></span>  
  
 <span data-ttu-id="ecdaa-111">カスタム修飾子を使用して、次の手法のいずれかのメタデータに出力できます。</span><span class="sxs-lookup"><span data-stu-id="ecdaa-111">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="ecdaa-112">内のメソッドを使用して、<xref:System.Reflection.Emit.TypeBuilder>などクラス<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>、 <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>、 <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>、および<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>します。</span><span class="sxs-lookup"><span data-stu-id="ecdaa-112">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="ecdaa-113">呼び出しを含む Microsoft intermediate language (MSIL) の命令ファイルを生成する`modopt`と`modreq`、使用して、ファイルをアセンブルし、 [Ilasm.exe (IL アセンブラー)](~/docs/framework/tools/ilasm-exe-il-assembler.md)します。</span><span class="sxs-lookup"><span data-stu-id="ecdaa-113">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="ecdaa-114">アンマネージ リフレクション API を使用します。</span><span class="sxs-lookup"><span data-stu-id="ecdaa-114">Using the unmanaged reflection API.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>