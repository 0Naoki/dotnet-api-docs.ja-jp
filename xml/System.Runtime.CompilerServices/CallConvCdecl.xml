<Type Name="CallConvCdecl" FullName="System.Runtime.CompilerServices.CallConvCdecl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0d447ae62cb6e9f07cc6901f78051cc8319ac8c0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30475426" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CallConvCdecl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CallConvCdecl extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.CallConvCdecl" />
  <TypeSignature Language="VB.NET" Value="Public Class CallConvCdecl" />
  <TypeSignature Language="C++ CLI" Value="public ref class CallConvCdecl" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="de826-101">メソッドが <see langword="Cdecl" /> 呼び出し規約を使用する必要があることを示します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="de826-101">Indicates that a method should use the <see langword="Cdecl" /> calling convention.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de826-102">呼び出し元がスタックを消去します。</span><span class="sxs-lookup"><span data-stu-id="de826-102">The caller cleans the stack.</span></span> <span data-ttu-id="de826-103">これにより、関数を呼び出す`varargs`です。</span><span class="sxs-lookup"><span data-stu-id="de826-103">This enables calling functions with `varargs`.</span></span>  
  
 <span data-ttu-id="de826-104">このクラスは、メソッドのメタデータ署名のカスタム修飾子としてのみ使用されます。</span><span class="sxs-lookup"><span data-stu-id="de826-104">This class is used only as a custom modifier of the metadata signature of a method.</span></span>  
  
 <span data-ttu-id="de826-105">クラスは、<xref:System.Runtime.CompilerServices>コンパイラ ライターの使用のみ。</span><span class="sxs-lookup"><span data-stu-id="de826-105">The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only.</span></span>  
  
 <span data-ttu-id="de826-106">コンパイラは、ジャストイン タイム (JIT) コンパイラが既定の動作が適切ではない場合に、値を処理する方法を変更するメタデータ内のカスタム修飾子を生成します。</span><span class="sxs-lookup"><span data-stu-id="de826-106">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="de826-107">JIT コンパイラには、カスタム修飾子が検出されると、修飾子を指定する方法で値を処理します。</span><span class="sxs-lookup"><span data-stu-id="de826-107">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="de826-108">コンパイラは、メソッド、パラメーターにカスタム修飾子を適用し、値を返します。</span><span class="sxs-lookup"><span data-stu-id="de826-108">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="de826-109">JIT コンパイラでは、必須の修飾子に応答する必要がありますが、オプションの修飾子を無視することができます。</span><span class="sxs-lookup"><span data-stu-id="de826-109">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  <span data-ttu-id="de826-110">C++ コンパイラでは、既定では、バイト処理、JIT コンパイラが C++ との互換性のない方法でバイトを処理する場合に使用する方法を定義するカスタム修飾子を生成可能性があります。</span><span class="sxs-lookup"><span data-stu-id="de826-110">A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.</span></span>  
  
 <span data-ttu-id="de826-111">次の手法のいずれかを使用してメタデータにカスタム修飾子を出力することができます。</span><span class="sxs-lookup"><span data-stu-id="de826-111">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="de826-112">内のメソッドを使用して、<xref:System.Reflection.Emit.TypeBuilder>などクラス<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>、 <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>、 <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>、および<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>です。</span><span class="sxs-lookup"><span data-stu-id="de826-112">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="de826-113">呼び出しを含む Microsoft intermediate language (MSIL) の命令ファイルを生成する`modopt`と`modreq`を使用してファイルをまとめることと、 [Ilasm.exe (IL アセンブラー)](~/docs/framework/tools/ilasm-exe-il-assembler.md)です。</span><span class="sxs-lookup"><span data-stu-id="de826-113">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="de826-114">アンマネージ リフレクション API を使用します。</span><span class="sxs-lookup"><span data-stu-id="de826-114">Using the unmanaged reflection API.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CallConvCdecl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.CallConvCdecl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CallConvCdecl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="de826-115">
            <see cref="T:System.Runtime.CompilerServices.CallConvCdecl" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="de826-115">Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallConvCdecl" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de826-116">クラスは、<xref:System.Runtime.CompilerServices>コンパイラ ライターの使用のみ。</span><span class="sxs-lookup"><span data-stu-id="de826-116">The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>