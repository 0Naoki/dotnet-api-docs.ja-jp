<Namespace Name="System.Text">
  <Metadata><Meta Name="ms.openlocfilehash" Value="34cddae6e8018aa3245a0db0838a6b65070528ea" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70417168" /></Metadata><Docs>
    <summary><span data-ttu-id="06bde-101"><see cref="N:System.Text" /> 名前空間には、ASCII および Unicode 文字エンコーディングを表すクラスが含まれます。バイトのブロック間で文字ブロックを変換するための抽象型基本クラス、<see cref="T:System.String" /> の中間インスタンスを作成せずに <see cref="T:System.String" /> オブジェクトを操作および書式設定するヘルパー クラスです。</span><span class="sxs-lookup"><span data-stu-id="06bde-101">The <see cref="N:System.Text" /> namespace contains classes that represent ASCII and Unicode character encodings; abstract base classes for converting blocks of characters to and from blocks of bytes; and a helper class that manipulates and formats <see cref="T:System.String" /> objects without creating intermediate instances of <see cref="T:System.String" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06bde-102">エンコーディングクラスは、主に、異なるエンコーディングまたはコードページと Unicode エンコーディングの間で変換を行うことを目的としています。</span><span class="sxs-lookup"><span data-stu-id="06bde-102">The encoding classes are primarily intended to convert between different encodings or code pages and a Unicode encoding.</span></span> <span data-ttu-id="06bde-103"><xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>(Utf-16) エンコーディングは、.NET Framework <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>によって内部的に使用されます。エンコーディングは、コンピューターとカルチャ間での移植性を確保するために文字データを格納するためによく使用されます。</span><span class="sxs-lookup"><span data-stu-id="06bde-103"><xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType> (UTF-16) encoding is used internally by the .NET Framework, and <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> encoding is often used for storing character data to ensure portability across machines and cultures.</span></span>  
  
 <span data-ttu-id="06bde-104">から<xref:System.Text.Encoding>派生したクラスを使用すると、フォールバックストラテジを選択できます。これにより、バイトシーケンスにエンコードできない文字、または文字にデコードできないバイトを処理する方法が決定されます。</span><span class="sxs-lookup"><span data-stu-id="06bde-104">The classes derived from <xref:System.Text.Encoding> enable you to choose a fallback strategy, which determines how characters that cannot be encoded into a sequence of bytes, or bytes that cannot be decoded into characters, are handled.</span></span> <span data-ttu-id="06bde-105">次のいずれかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="06bde-105">You can choose one of the following:</span></span>  
  
-   <span data-ttu-id="06bde-106">例外フォールバック。</span><span class="sxs-lookup"><span data-stu-id="06bde-106">Exception fallback.</span></span> <span data-ttu-id="06bde-107">一部のクラスコンストラクターで使用できる`throwonerror`フラグを使用するか、クラス<xref:System.Text.EncoderExceptionFallback>と<xref:System.Text.DecoderExceptionFallback>クラスを使用することにより、データエラーに対して例外をスローすることを選択できます。</span><span class="sxs-lookup"><span data-stu-id="06bde-107">You can choose to throw exceptions on data errors either by using a `throwonerror` flag that is available in some class constructors or by using the <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallback> classes.</span></span> <span data-ttu-id="06bde-108">データストリームの整合性に不安がある場合は、例外をスローすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="06bde-108">If you are concerned about the integrity of the data stream, throwing on an exception is recommended.</span></span>  
  
-   <span data-ttu-id="06bde-109">置換フォールバック。</span><span class="sxs-lookup"><span data-stu-id="06bde-109">Replacement fallback.</span></span> <span data-ttu-id="06bde-110">クラス<xref:System.Text.EncoderFallback> と <xref:System.Text.DecoderFallback> クラスを使用して、文字を暗黙的に "?" または Unicode の置換文字 (U + fffd) に変更できます。</span><span class="sxs-lookup"><span data-stu-id="06bde-110">You can use the <xref:System.Text.EncoderFallback> and <xref:System.Text.DecoderFallback> classes to silently change a character to "?" or to the Unicode replacement character (U+FFFD).</span></span>  
  
-   <span data-ttu-id="06bde-111">最適フォールバック。</span><span class="sxs-lookup"><span data-stu-id="06bde-111">Best-fit fallback.</span></span> <span data-ttu-id="06bde-112">このオプションは、あるエンコーディングの文字を別のエンコーディングの文字にマップします。</span><span class="sxs-lookup"><span data-stu-id="06bde-112">This option maps a character in one encoding to a character in another encoding.</span></span> <span data-ttu-id="06bde-113">ベストフィットフォールバックは、データの損失や混乱を招く可能性があり、単純な "?" 文字の置換よりも低速であるため、推奨されません。</span><span class="sxs-lookup"><span data-stu-id="06bde-113">Best fit fallback is often not recommended because it can cause data loss and confusion, and is slower than simple "?" character replacements.</span></span> <span data-ttu-id="06bde-114">ただし、ANSI コードページの場合は、最適な動作が既定値になります。</span><span class="sxs-lookup"><span data-stu-id="06bde-114">However, for ANSI code pages the best-fit behavior is the default.</span></span>  
  
 <span data-ttu-id="06bde-115">クラス<xref:System.Text.StringBuilder>は、1つの文字列に対して広範な操作を実行する操作向けに設計されています。</span><span class="sxs-lookup"><span data-stu-id="06bde-115">The <xref:System.Text.StringBuilder> class is designed for operations that perform extensive manipulations on a single string.</span></span> <span data-ttu-id="06bde-116">クラスとは異なり<xref:System.Text.StringBuilder> 、クラスは変更可能で、文字列を連結または削除するときにパフォーマンスが向上します。 <xref:System.String></span><span class="sxs-lookup"><span data-stu-id="06bde-116">Unlike the <xref:System.String> class, the <xref:System.Text.StringBuilder> class is mutable and provides better performance when concatenating or deleting strings.</span></span>  
  
 <span data-ttu-id="06bde-117">の詳細<xref:System.Text?displayProperty=nameWithType>については、「 [.NET Framework の文字エンコード](~/docs/standard/base-types/character-encoding.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="06bde-117">For more information about <xref:System.Text?displayProperty=nameWithType>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) .</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>
