<Type Name="FormViewUpdatedEventArgs" FullName="System.Web.UI.WebControls.FormViewUpdatedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ae8b6d0cbe457000dec5a9e9ea0987ec2b6abd1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36582347" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FormViewUpdatedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FormViewUpdatedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class FormViewUpdatedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormViewUpdatedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type FormViewUpdatedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" /> イベントのデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>制御を発生させます、<xref:System.Web.UI.WebControls.FormView.ItemUpdated>更新ボタンをクリックしたときにイベント (ボタンをその`CommandName`プロパティが「更新」に設定) コントロール内でをクリックした後は、<xref:System.Web.UI.WebControls.FormView>コントロールは、レコードを更新します。 これにより、このイベントが発生するたびに、更新操作の結果を確認するなど、カスタムのルーチンを実行するイベント処理メソッドを提供できます。  
  
 A<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs>とが発生する例外の影響を受けたレコードの数を決定することができるイベント処理メソッドにオブジェクトが渡されます。 更新操作によって影響を受けたレコードの数を確認するには<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>プロパティです。 使用して、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>プロパティを任意の例外が発生したかどうかを判断します。 設定して、イベント処理メソッドで例外が処理されたかどうかを指定することも、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>プロパティです。 更新されたレコードの元のキー フィールドの値にアクセスする必要がある場合、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>プロパティです。 元の非キー フィールド値を使用してアクセスできる、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A>プロパティです。 使用して更新された値 (キー フィールドを編集するユーザーを許可する場合は、更新されたキー フィールドの値を含む) は、アクセス、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>プロパティです。  
  
 既定では、<xref:System.Web.UI.WebControls.FormView>によって指定されたモードに制御が戻る、<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>更新操作の後のプロパティです。 保持することができます、更新操作中に発生した例外を処理するときに、<xref:System.Web.UI.WebControls.FormView>コントロールを設定して編集モードで、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>プロパティを`true`です。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> クラスのインスタンスの初期プロパティ値一覧については、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.%23ctor%2A> コンストラクターに関するトピックを参照してください。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs>オブジェクトのイベント処理メソッドに渡される、<xref:System.Web.UI.WebControls.FormView.ItemUpdated>更新操作中に例外が発生したかどうかを決定するイベントです。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.FormView" />
    <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
    <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormViewUpdatedEventArgs (int affectedRows, Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 affectedRows, class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (affectedRows As Integer, e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormViewUpdatedEventArgs(int affectedRows, Exception ^ e);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.FormViewUpdatedEventArgs : int * Exception -&gt; System.Web.UI.WebControls.FormViewUpdatedEventArgs" Usage="new System.Web.UI.WebControls.FormViewUpdatedEventArgs (affectedRows, e)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="affectedRows" Type="System.Int32" />
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="affectedRows">更新操作の影響を受けた行の数。</param>
        <param name="e">更新操作の実行時に発生した例外を表す <see cref="T:System.Exception" />。 例外が発生しない場合は、このパラメーターに <see langword="null" /> を使用します。</param>
        <summary>
          <see cref="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しいインスタンスを初期化するためにこのコンス トラクターを使用して、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs>クラスです。  
  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> クラスのインスタンスのプロパティの初期値を次の表に示します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>|`affectedRows` パラメーターの値。|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>|<xref:System.Exception?displayProperty=nameWithType>に含まれているオブジェクト、`e`パラメーター。|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>|初期化された`false`です。|  
|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>|初期化された`false`です。|  
  
> [!NOTE]
>  このコンス トラクターは、イベントを発生させる場合、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
      </Docs>
    </Member>
    <Member MemberName="AffectedRows">
      <MemberSignature Language="C#" Value="public int AffectedRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AffectedRows" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AffectedRows As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AffectedRows { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AffectedRows : int" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作の影響を受けた行の数を取得します。</summary>
        <value>更新操作の影響を受けた行の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>更新操作によって影響を受けたレコードの数を決定するプロパティです。 このプロパティは次の状況で、正しい数のレコードが更新されたことを確認します。  
  
-   単一のレコードだけが更新されたことを確認します。 場合があります、不適切に記述された update ステートメントでは、複数のレコードを更新できます。  
  
-   例外は発生しません更新操作中にエラーが発生したときに、レコードが更新されたことを確認します。  
  
-   データ ソース コントロールなど (オプティミスティック同時実行制御チェック)、競合検出をサポートするときに、レコードが更新されたことを確認してください、<xref:System.Web.UI.WebControls.SqlDataSource>と<xref:System.Web.UI.WebControls.ObjectDataSource>制御は、その<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>プロパティに設定、`ConflictOptions.CompareAllValues`列挙値. この設定では同時に別のユーザーによって変更されたレコードは更新されません。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>プロパティをレコードが更新されたことを確認します。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作中に例外が発生した場合は、その例外を取得します。</summary>
        <value>更新操作中に発生した例外を表す <see cref="T:System.Exception" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> (存在する場合)、例外を決定するプロパティが更新操作中に発生しました。 例外が発生しなかった場合、このプロパティは `null` を返します。  
  
> [!NOTE]
>  場合に例外が発生して、イベント ハンドラーで例外を処理するか、必ず設定する、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>プロパティを`true`以外の場合、もう一度で例外がスローされた、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>更新操作中に例外が発生したかどうかを決定するプロパティです。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作中に発生した例外がイベント ハンドラーで処理されたかどうかを示す値を取得または設定します。</summary>
        <value>イベント ハンドラーで例外が処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例外が発生すると、更新操作中を使用して、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>例外が、イベント ハンドラーで処理されたかどうかを示すプロパティです。 このプロパティに設定するときに`true`、例外が処理され、もう一度ではスローされませんと見なされます、<xref:System.Web.UI.WebControls.FormView>コントロール。 このプロパティ設定されている場合`false`例外が再度スローされます。 発生した例外を確認するには<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>プロパティです。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>例外が、イベント ハンドラーで処理されたことを示すプロパティです。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
      </Docs>
    </Member>
    <Member MemberName="KeepInEditMode">
      <MemberSignature Language="C#" Value="public bool KeepInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepInEditMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.KeepInEditMode : bool with get, set" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作の後で、<see cref="T:System.Web.UI.WebControls.FormView" /> コントロールを編集モードのまま維持するかどうかを示す値を取得または設定します。</summary>
        <value>更新操作後に編集モードのままにする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、<xref:System.Web.UI.WebControls.FormView>によって指定されたモードに制御が戻る、<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>更新操作の後のプロパティです。 使用して、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>プロパティを指定するかどうか、<xref:System.Web.UI.WebControls.FormView>コントロール編集モードのままにする必要があります。 保持する、<xref:System.Web.UI.WebControls.FormView>編集モードでコントロールをこのプロパティを設定`true`です。  
  
> [!NOTE]
>  状況が発生した例外が発生) など、コントロールが通常とは異なる動作を必要とする場合にのみ、このプロパティを使用する必要があります。 場合、<xref:System.Web.UI.WebControls.FormView>コントロールが編集モードのままに既定では、設定する必要があります、<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>プロパティ代わりにします。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>を保持するプロパティ、<xref:System.Web.UI.WebControls.FormView>例外が発生したときに、編集モードで制御します。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DefaultMode" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary Keys" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ Keys { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Specialized.IOrderedDictionary" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新されたレコードの元のキー フィールドの名前と値のペアが格納されているディクショナリを取得します。</summary>
        <value>更新されたレコードの元のキー フィールドの名前と値のペアのディクショナリが格納されている <see cref="T:System.Collections.Specialized.IOrderedDictionary" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>プロパティに記載されたキー フィールドの元の値が含まれています、<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>のプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロール。 使用して、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>更新されたレコードのキー フィールドの値にアクセスするプロパティです。 たとえば、これらの値を使用して、更新されたレコードのログを保持することができます。  
  
> [!NOTE]
>  キーのフィールドの値を更新するユーザーを許可する場合、<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A>プロパティには、元のキー フィールドの値が含まれています。 更新された値が格納されている、<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>プロパティです。  
  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>プロパティから返される、<xref:System.Collections.Specialized.OrderedDictionary>を実装するオブジェクト、<xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=nameWithType>インターフェイスです。 <xref:System.Collections.Specialized.OrderedDictionary>オブジェクトを含む<xref:System.Collections.DictionaryEntry?displayProperty=nameWithType>更新されたレコードのフィールドを表すオブジェクト。 フィールド名にアクセスするには、使用、<xref:System.Collections.Specialized.OrderedDictionary.Keys%2A>のプロパティ、<xref:System.Collections.Specialized.OrderedDictionary>オブジェクト。 同様を使用して、フィールドの値にアクセスすることができます、<xref:System.Collections.Specialized.OrderedDictionary.Values%2A>プロパティです。  
  
> [!NOTE]
>  簡単な方法としてのインデクサーを使用することも、<xref:System.Collections.Specialized.OrderedDictionary>値を直接フィールドにアクセスするオブジェクト。 データ ソースのフィールドの順序に依存するコントロール (など<xref:System.Web.UI.WebControls.AccessDataSource>) フィールドの値をインデックスによってのみアクセスできます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>更新されたレコードのキー フィールドの値にアクセスするプロパティです。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.Specialized.OrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Keys" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Values" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      </Docs>
    </Member>
    <Member MemberName="NewValues">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary NewValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary NewValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewValues As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ NewValues { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NewValues : System.Collections.Specialized.IOrderedDictionary" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新されたレコードの新しいフィールドの名前と値のペアが格納されているディクショナリを取得します。</summary>
        <value>更新されたレコードの新しいフィールドの名前と値のペアのディクショナリが格納されている <see cref="T:System.Collections.Specialized.IOrderedDictionary" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>更新されたレコードの新しいフィールドの値にアクセスするプロパティです。 たとえば、これらの値を使用して、更新されたレコードのログを保持することができます。  
  
> [!NOTE]
>  キーのフィールドの値を更新するユーザーを許可する場合、<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A>プロパティには、元のキー フィールドの値が含まれています。 更新された値が格納されている、<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>プロパティです。  
  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>プロパティから返される、<xref:System.Collections.Specialized.OrderedDictionary>を実装するオブジェクト、<xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=nameWithType>インターフェイスです。 <xref:System.Collections.Specialized.OrderedDictionary>オブジェクトを含む<xref:System.Collections.DictionaryEntry?displayProperty=nameWithType>更新されたレコードのフィールドを表すオブジェクト。 フィールド名にアクセスするには、使用、<xref:System.Collections.Specialized.OrderedDictionary.Keys%2A>のプロパティ、<xref:System.Collections.Specialized.OrderedDictionary>オブジェクト。 同様を使用して、フィールドの値にアクセスすることができます、<xref:System.Collections.Specialized.OrderedDictionary.Values%2A>プロパティです。  
  
> [!NOTE]
>  簡単な方法としてのインデクサーを使用することも、<xref:System.Collections.Specialized.OrderedDictionary>値を直接フィールドにアクセスするオブジェクト。 データ ソースのフィールドの順序に依存するコントロール (など<xref:System.Web.UI.WebControls.AccessDataSource>) フィールドの値をインデックスによってのみアクセスできます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>更新されたレコードの非キー フィールドについて、ユーザーが入力した新しい値にアクセスするプロパティです。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertedEventHandler" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.Specialized.OrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Keys" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Values" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      </Docs>
    </Member>
    <Member MemberName="OldValues">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary OldValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary OldValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OldValues As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ OldValues { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OldValues : System.Collections.Specialized.IOrderedDictionary" Usage="System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新されたレコードの元のキー以外のフィールドの名前と値のペアが格納されているディクショナリを取得します。</summary>
        <value>更新されたレコードの元のフィールドの名前と値のペアのディクショナリが格納されている <see cref="T:System.Collections.Specialized.IOrderedDictionary" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A>更新されたレコードの元のキー以外のフィールド値にアクセスするプロパティです。 たとえば、これらの値を使用して、更新されたレコードのログを保持することができます。 データ ソース コントロールなど (オプティミスティック同時実行制御チェック)、競合検出をサポートする、<xref:System.Web.UI.WebControls.SqlDataSource>と<xref:System.Web.UI.WebControls.ObjectDataSource>、コントロールとその<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>プロパティに設定、`ConflictOptions.CompareAllValues`もに対して元の値を比較、更新操作の前に、データベース内のレコードが実行されます。 別のユーザーによってレコードが同時に変更された場合、レコードは更新されません。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A>プロパティにキー フィールドが含まれていません。 元のキー フィールドの値が格納されたキー フィールドの値を更新するユーザーを許可する場合、<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A>プロパティです。 更新された値が格納されている、<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>プロパティです。  
  
 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>プロパティから返される、<xref:System.Collections.Specialized.OrderedDictionary>を実装するオブジェクト、<xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=nameWithType>インターフェイスです。 <xref:System.Collections.Specialized.OrderedDictionary>オブジェクトを含む<xref:System.Collections.DictionaryEntry?displayProperty=nameWithType>更新されたレコードのフィールドを表すオブジェクト。 フィールド名にアクセスするには、使用、<xref:System.Collections.Specialized.OrderedDictionary.Keys%2A>のプロパティ、<xref:System.Collections.Specialized.OrderedDictionary>オブジェクト。 同様を使用して、フィールドの値にアクセスすることができます、<xref:System.Collections.Specialized.OrderedDictionary.Values%2A>プロパティです。  
  
> [!NOTE]
>  簡単な方法としてのインデクサーを使用することも、<xref:System.Collections.Specialized.OrderedDictionary>値を直接フィールドにアクセスするオブジェクト。 データ ソースのフィールドの順序に依存するコントロール (など<xref:System.Web.UI.WebControls.AccessDataSource>) フィールドの値をインデックスによってのみアクセスできます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A>更新されたレコードのキー以外のフィールドの元の値にアクセスするプロパティです。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.Specialized.OrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Keys" />
        <altmember cref="P:System.Collections.Specialized.OrderedDictionary.Values" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      </Docs>
    </Member>
  </Members>
</Type>