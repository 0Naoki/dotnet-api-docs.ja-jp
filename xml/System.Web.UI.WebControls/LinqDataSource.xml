<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eb47995a42e8b5a63458997b016e35704034a00a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ContextTypeName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8a91b-101">ASP.NET Web ページでマークアップ テキストを通じて統合言語クエリ (LINQ) を使用し、データ オブジェクトのデータを取得したり変更したりできるようにします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8a91b-101">Enables the use of Language-Integrated Query (LINQ) in an ASP.NET Web page through markup text to retrieve and modify data from a data object.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-102">このトピックの内容:</span><span class="sxs-lookup"><span data-stu-id="8a91b-102">In this topic:</span></span>  
  
-   [<span data-ttu-id="8a91b-103">はじめに</span><span class="sxs-lookup"><span data-stu-id="8a91b-103">Introduction</span></span>](#introduction)  
  
-   [<span data-ttu-id="8a91b-104">操作の順序</span><span class="sxs-lookup"><span data-stu-id="8a91b-104">Order of Operations</span></span>](#order_of_operations)  
  
-   [<span data-ttu-id="8a91b-105">データの順序</span><span class="sxs-lookup"><span data-stu-id="8a91b-105">Ordering Data</span></span>](#ordering_data)  
  
-   [<span data-ttu-id="8a91b-106">データのグループ化</span><span class="sxs-lookup"><span data-stu-id="8a91b-106">Grouping Data</span></span>](#grouping_data)  
  
-   [<span data-ttu-id="8a91b-107">データの変更</span><span class="sxs-lookup"><span data-stu-id="8a91b-107">Data Modifications</span></span>](#data_modifications)  
  
-   [<span data-ttu-id="8a91b-108">実行時に値を評価します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-108">Evaluating Values at Run Time</span></span>](#evaluating_value_at_run_time)  
  
-   [<span data-ttu-id="8a91b-109">ストアド プロシージャの使用</span><span class="sxs-lookup"><span data-stu-id="8a91b-109">Working with Stored Procedures</span></span>](#working_with_stored_procedures)  
  
-   [<span data-ttu-id="8a91b-110">宣言型の構文</span><span class="sxs-lookup"><span data-stu-id="8a91b-110">Declarative Syntax</span></span>](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a><span data-ttu-id="8a91b-111">はじめに</span><span class="sxs-lookup"><span data-stu-id="8a91b-111">Introduction</span></span>  
 <span data-ttu-id="8a91b-112">統合言語クエリ (LINQ) は、クエリ演算子のセットを定義するクエリ構文です。NET ベースのプログラミング言語です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-112">Language-Integrated Query (LINQ) is a query syntax that defines a set of query operators that enable traversal, filter, and projection operations to be expressed in a declarative way in any .NET-based programming language.</span></span> <span data-ttu-id="8a91b-113">データ オブジェクトには、メモリ内のデータ コレクションまたはデータベースからデータを表すオブジェクトを指定できます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-113">The data object can be an in-memory data collection or an object that represents data from a database.</span></span> <span data-ttu-id="8a91b-114">取得したり、各操作に対する SQL コマンドを記述することがなく、データを変更できます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-114">You can retrieve or modify the data without having to write SQL commands for each operation.</span></span>  
  
 <span data-ttu-id="8a91b-115"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールでは、マークアップ テキストでプロパティを設定して、ASP.NET Web ページに LINQ を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-115">The <xref:System.Web.UI.WebControls.LinqDataSource> control enables you to use LINQ in an ASP.NET Web page by setting properties in markup text.</span></span> <span data-ttu-id="8a91b-116"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールでは、LINQ to SQL を使用して、データ コマンドを自動的に生成します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-116">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically generate the data commands.</span></span> <span data-ttu-id="8a91b-117">LINQ to SQL の詳細については、次を参照してください。 [LINQ to SQL](http://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655)です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-117">For more information about LINQ to SQL, see [LINQ to SQL](http://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).</span></span>  
  
 <span data-ttu-id="8a91b-118">メモリ内のデータ コレクションからデータを取得する際に設定する、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>データ コレクションを格納するクラスにプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-118">When you are retrieving data from an in-memory data collection, you set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the class that contains the data collection.</span></span> <span data-ttu-id="8a91b-119">設定する、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティをプロパティまたはフィールドをデータ コレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-119">You set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property or field that returns the data collection.</span></span> <span data-ttu-id="8a91b-120">たとえば、という名前のクラスがある`Person`という名前のプロパティを格納している`FavoriteCities`文字列値の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-120">For example, you might have a class named `Person` that contains a property named `FavoriteCities` that returns an array of string values.</span></span> <span data-ttu-id="8a91b-121">その場合を設定する、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティを`Person`設定と、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティを`FavoriteCities`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-121">In that case, you set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to `Person` and set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to `FavoriteCities`.</span></span>  
  
 <span data-ttu-id="8a91b-122">データベースのクエリを実行するときに、まず、データベースとそのテーブルを表すエンティティ クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-122">When you are querying a database, you must first create entity classes that represent the database and its tables.</span></span> <span data-ttu-id="8a91b-123">使用することができます、[!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)]または SqlMetal.exe ユーティリティは、これらのクラスを生成します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-123">You can use the [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] or the SqlMetal.exe utility to generate these classes.</span></span> <span data-ttu-id="8a91b-124">設定する、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティをデータベースを表すクラスを設定し、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティをデータベース テーブルを表すプロパティをします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-124">You then set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the class that represents the database and set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property that represents the database table.</span></span>  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a><span data-ttu-id="8a91b-125">操作の順序</span><span class="sxs-lookup"><span data-stu-id="8a91b-125">Order of Operations</span></span>  
 <span data-ttu-id="8a91b-126"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、次の順序でのデータ操作を適用します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-126">The <xref:System.Web.UI.WebControls.LinqDataSource> control applies data operations in the following order:</span></span>  
  
1.  <span data-ttu-id="8a91b-127">場所 (データが返されるレコードの指定)。</span><span class="sxs-lookup"><span data-stu-id="8a91b-127">Where (specify which data records to return).</span></span>  
  
2.  <span data-ttu-id="8a91b-128">順序 (並べ替え) ではします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-128">Order By (sort).</span></span>  
  
3.  <span data-ttu-id="8a91b-129">グループ (値を共有するデータの集計レコード) ではします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-129">Group By (aggregate data records that share values).</span></span>  
  
4.  <span data-ttu-id="8a91b-130">(グループ化のデータの並べ替え) でグループを並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-130">Order Groups By (sort grouped data).</span></span>  
  
5.  <span data-ttu-id="8a91b-131">(どのフィールドまたはプロパティを返すの指定) を選択します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-131">Select (specify which fields or properties to return).</span></span>  
  
6.  <span data-ttu-id="8a91b-132">(ユーザーが選択されているプロパティでデータ レコードの並べ替え) を自動で並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-132">Auto-sort (sort data records by a property that the user has selected).</span></span>  
  
7.  <span data-ttu-id="8a91b-133">自動ページ (ユーザーが選択されているデータ レコードのサブセットを取得)。</span><span class="sxs-lookup"><span data-stu-id="8a91b-133">Auto-page (retrieve a subset of data records that were selected by the user).</span></span>  
  
 <span data-ttu-id="8a91b-134">条件を追加することができます、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>クエリから返されるデータ レコードをフィルター選択するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-134">You can add conditions to the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter the data records that are returned from a query.</span></span> <span data-ttu-id="8a91b-135">場合、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティが設定されていない、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、データ オブジェクトからすべてのレコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-135">If the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is not set, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves every record from the data object.</span></span>  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a><span data-ttu-id="8a91b-136">データの順序</span><span class="sxs-lookup"><span data-stu-id="8a91b-136">Ordering Data</span></span>  
 <span data-ttu-id="8a91b-137">使用する、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティを並べ替えるには、返されたデータからプロパティの名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-137">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to specify the names of properties from the returned data to sort by.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8a91b-138">使用する場合、<xref:System.Web.UI.WebControls.LinqDataSource>で制御[!INCLUDE[ss2k](~/includes/ss2k-md.md)]または[!INCLUDE[ssEW](~/includes/ssew-md.md)]と<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>プロパティに設定されている`true`の値を指定する必要があります、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-138">When you use the <xref:System.Web.UI.WebControls.LinqDataSource> control with [!INCLUDE[ss2k](~/includes/ss2k-md.md)] or [!INCLUDE[ssEW](~/includes/ssew-md.md)] and the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is set to `true`, you must provide a value in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="8a91b-139">既定では、<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-139">By default, the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is `true`.</span></span> <span data-ttu-id="8a91b-140">値を代入する場合、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティを含める必要もありますすべての identity 列は、クエリで返されるプロパティの一覧にします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-140">If you assign a value to the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, you must also include all identity columns in the list of properties that is returned in the query.</span></span>  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a><span data-ttu-id="8a91b-141">データのグループ化</span><span class="sxs-lookup"><span data-stu-id="8a91b-141">Grouping Data</span></span>  
 <span data-ttu-id="8a91b-142">使用する、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティを指定するプロパティを使用してに同じ値を持つデータ レコードを統合します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-142">You use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to specify which properties are used to consolidate data records that have the same values.</span></span> <span data-ttu-id="8a91b-143">データをグループ化するときに含める`Key`と`It`が動的に作成されたプロパティで、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-143">When you group data, you can include `Key` and `It`, which are dynamically created properties, in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="8a91b-144">`Key`プロパティまたは複数のデータをグループ化に使用されたプロパティの値を参照します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-144">The `Key` property refers to the values in the property or properties that were used to group the data.</span></span> <span data-ttu-id="8a91b-145">たとえば、という名前のプロパティによってグループ化する`Category`、`Key`プロパティにすべての一意の値が格納されます、`Category`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-145">For example, if you group by a property named `Category`, the `Key` property will contain all unique values in the `Category` property.</span></span> <span data-ttu-id="8a91b-146">`It`プロパティはデータのグループ内の個々 のレコードのコレクションを参照します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-146">The `It` property refers to a collection of individual records in a grouping of data.</span></span> <span data-ttu-id="8a91b-147">反復処理することができます、`It`プロパティをグループ化操作に統合されている個々 のレコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-147">You can iterate over the `It` property to retrieve the individual records that have been consolidated in the grouping operation.</span></span> <span data-ttu-id="8a91b-148">たとえば、という名前のプロパティによってグループ化する場合`Category`、`It`プロパティにはで共通の値を共有するすべての個々 のレコードが含まれています、`Category`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-148">For example, if you group by a property named `Category`, the `It` property contains all the individual records that share a common value in the `Category` property.</span></span>  
  
 <span data-ttu-id="8a91b-149">使用する、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>プロパティをグループ化されたデータの並べ替えに使用するプロパティを指定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-149">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property to specify the properties to use for sorting the grouped data.</span></span> <span data-ttu-id="8a91b-150">データをグループ化するときに、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティでは、グループ化されたデータ内の各レコードの並べ替え方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-150">When you group data, the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property specifies how the individual records within the grouped data are sorted.</span></span>  
  
 <span data-ttu-id="8a91b-151">既定では、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、データ オブジェクトからすべてのプロパティの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-151">By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves values for all the properties from a data object.</span></span> <span data-ttu-id="8a91b-152">使用する、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティを使用できるプロパティのサブセットを操作するかどうかを返すプロパティを指定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-152">You use the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to specify which properties to return if you want to work with a subset of available properties.</span></span> <span data-ttu-id="8a91b-153">Select 操作が Where 句、後に適用される Order By と Group By 操作します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-153">The Select operation is applied after the Where, Order By, and Group By operations.</span></span> <span data-ttu-id="8a91b-154">そのため、Select 句で別名を作成する場合は、エイリアスは他の句で使用できません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-154">Therefore, if you create an aliased name in a Select clause, the alias is not available in the other clauses.</span></span>  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a><span data-ttu-id="8a91b-155">データ変更</span><span class="sxs-lookup"><span data-stu-id="8a91b-155">Data Modifications</span></span>  
 <span data-ttu-id="8a91b-156">使用してデータの変更が有効にするかどうかを指定することができます、 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>、 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>、および<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-156">You can specify whether data modifications are enabled by using the <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, and <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> properties.</span></span> <span data-ttu-id="8a91b-157">データを変更するためのユーザー インターフェイス、<xref:System.Web.UI.WebControls.LinqDataSource>コントロール通常を介して提供される、データ バインド コントロールなど、<xref:System.Web.UI.WebControls.DetailsView>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-157">The user interface for modifying data from a <xref:System.Web.UI.WebControls.LinqDataSource> control is typically provided through a data-bound control, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span> <span data-ttu-id="8a91b-158">設定に加えて<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>、 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>、または<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>に`true`データの自動変更を有効にする次の条件が必要があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-158">In addition to setting <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, or <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> to `true`, the following conditions are required to enable automatic data modifications:</span></span>  
  
-   <span data-ttu-id="8a91b-159"><xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティに値を割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-159">The <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property cannot be assigned a value.</span></span>  
  
-   <span data-ttu-id="8a91b-160"><xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティに値を割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-160">The <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property cannot be assigned a value.</span></span>  
  
-   <span data-ttu-id="8a91b-161">割り当てられているクラス、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティから派生しなければなりません<xref:System.Data.Linq.DataContext>です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-161">The class that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property must derive from <xref:System.Data.Linq.DataContext>.</span></span>  
  
-   <span data-ttu-id="8a91b-162">割り当てられているプロパティ、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティから派生しなければなりません<xref:System.Data.Linq.Table%601>です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-162">The property that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property must derive from <xref:System.Data.Linq.Table%601>.</span></span>  
  
 <span data-ttu-id="8a91b-163">2 つの方法でデータ バインド コントロールに表示するプロパティを制限することができます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-163">You can restrict which properties are displayed in a data-bound control in two ways.</span></span> <span data-ttu-id="8a91b-164">設定するか、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティのサブセットにプロパティが追加することで、データ バインド コントロールのフィールドを定義できます<xref:System.Web.UI.WebControls.DataControlField>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-164">You can either set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to a subset of properties, or you can define the fields for a data-bound control by adding <xref:System.Web.UI.WebControls.DataControlField> controls.</span></span> <span data-ttu-id="8a91b-165">ただし、設定した場合、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティ、そのことを意味する自動更新、挿入、および削除操作を有効にできません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-165">However, if you set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, it means that automatic update, insert, and delete operations cannot be enabled.</span></span> <span data-ttu-id="8a91b-166">使用可能なプロパティのサブセットを操作中に、データの自動変更を有効にする場合は設定しないでください、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-166">If you want to enable automatic data modifications while you work with a subset of available properties, do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="8a91b-167">代わりに、データ オブジェクトからすべてのプロパティを取得し、管理、データ バインド コントロールを使用して、どれが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-167">Instead, retrieve all properties from the data object and manage which ones are displayed by using the data-bound control.</span></span> <span data-ttu-id="8a91b-168">使用すると、<xref:System.Web.UI.WebControls.DetailsView>コントロールまたは<xref:System.Web.UI.WebControls.GridView>コントロールを設定する必要も、<xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>または<xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>プロパティ`false`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-168">When you use the <xref:System.Web.UI.WebControls.DetailsView> control or the <xref:System.Web.UI.WebControls.GridView> control, you must also set the <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> or <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> properties to `false`.</span></span> <span data-ttu-id="8a91b-169">これは、データ バインド コントロールが編集、およびデータを削除するためのボタンを自動的に追加することを防ぎます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-169">This prevents the data-bound control from automatically including buttons for editing and deleting the data.</span></span> <span data-ttu-id="8a91b-170">データ バインド コントロールに表示されていない任意の値は、ビュー ステートに格納されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-170">Any values that are not displayed in the data-bound control are stored in view state.</span></span> <span data-ttu-id="8a91b-171">渡すことが変更されていないデータ ソース データ更新を実行するとします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-171">They are passed unchanged to the data source when the data update is performed.</span></span>  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a><span data-ttu-id="8a91b-172">実行時に値を評価します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-172">Evaluating Values at Run Time</span></span>  
 <span data-ttu-id="8a91b-173">評価する必要が値の並べ替え、実行時にフィルター処理、または値をグループ化するパラメーターを追加することができる場合、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>、または<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-173">If you have to evaluate values at run time for ordering, filtering, or grouping values, you can add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, or <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collections.</span></span>  
  
 <span data-ttu-id="8a91b-174">既定値を指定する場合は、パラメーターを追加することができます、<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-174">If you want to specify default values, you can add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection.</span></span>  
  
 <span data-ttu-id="8a91b-175">確認またはデータ操作が実行される前に、値を変更する場合は、処理、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>、または<xref:System.Web.UI.WebControls.LinqDataSource.Updating>イベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-175">If you want to examine or modify values before the data operation is executed, you can handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, or <xref:System.Web.UI.WebControls.LinqDataSource.Updating> events.</span></span> <span data-ttu-id="8a91b-176">これらのイベントを処理できるは、データ操作をキャンセルするために、ユーザー入力に基づいてデータ クラスにプロパティを設定するときに発生した検証エラーを確認したりもできます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-176">You can also handle these events in order to cancel the data operation or to examine validation errors that occurred when you set properties in the data class based on user input.</span></span>  
  
 <span data-ttu-id="8a91b-177">値を確認するデータの操作が完了した後、処理、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected>、または<xref:System.Web.UI.WebControls.LinqDataSource.Updated>イベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-177">To examine values after the data operation has finished, handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, or <xref:System.Web.UI.WebControls.LinqDataSource.Updated> events.</span></span>  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a><span data-ttu-id="8a91b-178">ストアド プロシージャの使用</span><span class="sxs-lookup"><span data-stu-id="8a91b-178">Working with Stored Procedures</span></span>  
 <span data-ttu-id="8a91b-179">使用する、<xref:System.Web.UI.WebControls.LinqDataSource>のイベント ハンドラーを作成することで、ストアド プロシージャからデータを取得するコントロール、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-179">You use the <xref:System.Web.UI.WebControls.LinqDataSource> control to retrieve data from a stored procedure by creating an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="8a91b-180">イベント ハンドラー メソッドを呼び出し、ストアド プロシージャを表すデータ コンテキスト クラス内とに、結果を設定、<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>のプロパティ、<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a91b-180">In the event handler, you call the method in the data context class that represents the stored procedure and set the result to the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> object.</span></span> <span data-ttu-id="8a91b-181">自動更新を有効にする、insert、およびデータの削除操作をする場合、メソッドから返される必要がありますと型が一致で指定されている、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-181">If you want to enable automatic update, insert, and delete operations for the data, the type that is returned from the method must match the type that is specified in the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property.</span></span> <span data-ttu-id="8a91b-182">データ コンテキストのメソッドの作成の詳細については、次を参照してください。[する方法: ストアド プロシージャおよび関数 (O/r デザイナー) にマップされる DataContext の作成メソッド](http://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a)です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-182">For more information about creating data context methods, see [How to: Create DataContext methods mapped to stored procedures and functions (O/R Designer)](http://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a).</span></span>  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a><span data-ttu-id="8a91b-183">宣言型の構文</span><span class="sxs-lookup"><span data-stu-id="8a91b-183">Declarative Syntax</span></span>  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-184">次の例は、<xref:System.Web.UI.WebControls.LinqDataSource>という名前のエンティティ クラスからデータを取得するコントロール`Products`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-184">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that retrieves data from an entity class named `Products`.</span></span> <span data-ttu-id="8a91b-185">使用して、そのエンティティ クラスが生成される可能性がありますが、[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]または SqlMetal.exe ユーティリティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-185">The entity class could have been generated by using the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] or the SqlMetal.exe utility.</span></span> <span data-ttu-id="8a91b-186"><xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティの値を持つレコードのみを返す、 `Price` 50 を超えるプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-186">The <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is set to return only records that have a value in the `Price` property greater than 50.</span></span> <span data-ttu-id="8a91b-187">A<xref:System.Web.UI.WebControls.GridView>コントロールにバインドする、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールにデータを表示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-187">A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 <span data-ttu-id="8a91b-188">次の例は、<xref:System.Web.UI.WebControls.LinqDataSource>更新、削除、およびデータ ソースのレコードを挿入できるようにするコントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-188">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that enables users to update, delete, and insert records in the data source.</span></span> <span data-ttu-id="8a91b-189">A<xref:System.Web.UI.WebControls.DetailsView>コントロールにバインドする、<xref:System.Web.UI.WebControls.LinqDataSource>を制御しを参照してくださいおよびデータを変更することができます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-189">A <xref:System.Web.UI.WebControls.DetailsView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control and enables users to see and modify the data.</span></span> <span data-ttu-id="8a91b-190">選択、更新、削除、またはレコードを挿入するために SQL コマンドが必要ないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8a91b-190">Notice that no SQL commands are required in order to select, update, delete, or insert the records.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 <span data-ttu-id="8a91b-191">次の例は、イベント ハンドラーを<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>Web ページ内の値に基づいて、データ オブジェクトを設定するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-191">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event that sets the data object based on a value in the Web page.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 <span data-ttu-id="8a91b-192">例を次に、<xref:System.Web.UI.WebControls.LinqDataSource>制御されている 2 つの列でグループを構成します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-192">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns.</span></span> <span data-ttu-id="8a91b-193">`Key`プロパティを 2 つのプロパティを持つオブジェクトを参照して`ProductCategory`と`Color`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-193">The `Key` property references an object that has two properties, `ProductCategory` and `Color`.</span></span> <span data-ttu-id="8a91b-194">によって表されるオブジェクト`It`(エイリアス) の名前を変更したが、`Products`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-194">The object represented by `It` is renamed (aliased) to `Products`.</span></span> <span data-ttu-id="8a91b-195">名前が変更された`Products`オブジェクトは、グループ内の個々 のレコードのコレクションを格納します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-195">The renamed `Products` object contains a collection of the individual records in a grouping.</span></span> <span data-ttu-id="8a91b-196">各インスタンスにはからのすべての列が含まれて、`Products`テーブル。</span><span class="sxs-lookup"><span data-stu-id="8a91b-196">Each instance will contain all the columns from the `Products` table.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 <span data-ttu-id="8a91b-197">次の例は 2 つ<xref:System.Web.UI.WebControls.ListView>からデータを表示するコントロールを<xref:System.Web.UI.WebControls.LinqDataSource>前の例で制御します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-197">The following example shows two <xref:System.Web.UI.WebControls.ListView> controls that display the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example.</span></span> <span data-ttu-id="8a91b-198">1 つ<xref:System.Web.UI.WebControls.ListView>グループ化されたデータと、その他のコントロールが表示されます<xref:System.Web.UI.WebControls.ListView>コントロールがそのグループに属している製品の個々 の名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-198">One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data, and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group.</span></span> <span data-ttu-id="8a91b-199">入れ子になったデータ バインド コントロールの<xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A>プロパティに設定されている`Products`のエイリアスは、これは、`It`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a91b-199">The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-200">
            <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-200">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-201">
            <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールが <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" /> コレクション内の値に基づいて Order By 句を動的に作成するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-201">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control dynamically creates an Order By clause based on values in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" /> collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-202">
            <see langword="true" /> 場合、<see cref="T:System.Web.UI.WebControls.LinqDataSource" />コントロールは、Order By 句を作成、それ以外の<see langword="false" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-202">
              <see langword="true" /> if the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control creates the Order By clause; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8a91b-203">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-203">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-204">設定すると、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>プロパティを`true`、<xref:System.Web.UI.WebControls.LinqDataSource>コントロール内の値に基づいている Order By 句を動的に作成する、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-204">When you set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property to `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control dynamically creates an Order By clause that is based on the values in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="8a91b-205"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールがデータを並べ替えるとき、最初のパラメーターと、各追加パラメーターのデータをさらに並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-205">The <xref:System.Web.UI.WebControls.LinqDataSource> control sorts the data by the first parameter and then additionally sorts the data for each additional parameter.</span></span> <span data-ttu-id="8a91b-206">パラメーターを含む`null`または空の値は、Order By 句に含まれません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-206">Parameters that contain `null` or an empty value are not included in the Order By clause.</span></span>  
  
 <span data-ttu-id="8a91b-207">設定しない、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティと、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>に設定されている`true`パーサーは、Order By 句を動的に作成されるため、します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-207">You do not set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property when the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> is set to `true`, because the parser dynamically creates the Order By clause.</span></span> <span data-ttu-id="8a91b-208"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールは例外をスロー、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>に設定されている`true`と<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティの値が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-208">The <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> is set to `true` and the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property is assigned values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-209">次の例は、<xref:System.Web.UI.WebControls.LinqDataSource>と制御、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>に設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-209">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> set to `true`.</span></span> <span data-ttu-id="8a91b-210">パラメーターが含まれている、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>から並べ替えプロパティに基づいてデータの名前をユーザー コレクションを選択、<xref:System.Web.UI.WebControls.DropDownList>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-210">A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-211">
            <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールが <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> コレクションに定義された値に基づいて Where 句を動的に作成するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-211">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control dynamically creates a Where clause based on values defined in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-212">
            <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールが Where 句を作成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-212">
              <see langword="true" /> if the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control will create the Where clause; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8a91b-213">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-213">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-214">設定すると、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>プロパティを`true`、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、Where を動的に作成では、パラメーターから句、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-214">When you set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control dynamically creates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="8a91b-215">追加する各パラメーター、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクションが必要です、<xref:System.Web.UI.WebControls.Parameter.Name%2A>プロパティをクエリが実行されるデータ オブジェクトのプロパティに一致する値に設定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-215">Each parameter that you add to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection must have its <xref:System.Web.UI.WebControls.Parameter.Name%2A> property set to a value that matches a property in the data object that is being queried.</span></span> <span data-ttu-id="8a91b-216">自動的に生成された句はどこで確認するかどうかに指定された値、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクション データ オブジェクトに一致するプロパティの値に等しい。</span><span class="sxs-lookup"><span data-stu-id="8a91b-216">The automatically generated Where clause will check whether the value specified in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection equals the value of the matching property in the data object.</span></span> <span data-ttu-id="8a91b-217">1 つ以上のパラメーターを指定する場合、パラメーターにリンク論理`AND`操作します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-217">If you provide more than one parameter, the parameters are linked with a logical `AND` operation.</span></span> <span data-ttu-id="8a91b-218">パラメーターを含む`null`または Where 句で空の値が含まれていない句。</span><span class="sxs-lookup"><span data-stu-id="8a91b-218">Parameters that contain `null` or an empty value are not included in the Where clause.</span></span>  
  
 <span data-ttu-id="8a91b-219">自動的に生成された<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>句が等価性のみをテストできますおよびのみを持つパラメーターをリンクできる、`AND`操作します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-219">The automatically generated <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> clause can test only for equality and can link parameters only with the `AND` operation.</span></span> <span data-ttu-id="8a91b-220">設定しないでください、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>プロパティを`true`等しいかどうかをテストしないその条件を追加する必要がある場合、またはパラメーターに関連付ける必要がある場合、`OR`操作します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-220">Do not set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` if you have to add a condition that does not test for equality or if you have to relate parameters with the `OR` operation.</span></span> <span data-ttu-id="8a91b-221">設定して、これらのタスクを行うことができます、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>プロパティを`false`内のプレース ホルダーを追加して、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>内の各パラメーターのプロパティ、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-221">You can accomplish these tasks by setting the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `false` and adding placeholders in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property for each parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="8a91b-222"><xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティ、各プレース ホルダー名をはじめ、@ 記号。</span><span class="sxs-lookup"><span data-stu-id="8a91b-222">In the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property, preface each placeholder name with the @ symbol.</span></span>  
  
 <span data-ttu-id="8a91b-223">設定しない、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティと、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>プロパティは`true`パーサーは、Where を動的に作成されるため、句。</span><span class="sxs-lookup"><span data-stu-id="8a91b-223">You do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property when the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, because the parser dynamically creates the Where clause.</span></span> <span data-ttu-id="8a91b-224"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールは例外をスロー、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>プロパティは`true`と<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティの値が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-224">The <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true` and the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is assigned values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-225">次の例は、<xref:System.Web.UI.WebControls.LinqDataSource>と制御、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>に設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-225">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> set to `true`.</span></span> <span data-ttu-id="8a91b-226">A<xref:System.Web.UI.WebControls.GridView>コントロールにバインドする、<xref:System.Web.UI.WebControls.LinqDataSource>クエリから返されるデータを表示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-226">A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data that is returned from the query.</span></span> <span data-ttu-id="8a91b-227">A<xref:System.Web.UI.WebControls.DropDownList>コントロールが次の 3 つの値が入力されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-227">A <xref:System.Web.UI.WebControls.DropDownList> control is included that is populated with three values.</span></span> <span data-ttu-id="8a91b-228">パラメーターが含まれている、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>設定した名前を持つコレクション`Category,`データ オブジェクトのプロパティのいずれかに一致します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-228">A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection with the name set to `Category,` which matches one of the properties of the data object.</span></span> <span data-ttu-id="8a91b-229">その<xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A>の ID に設定されて、<xref:System.Web.UI.WebControls.DropDownList>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-229">Its <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> property is set to the ID of the <xref:System.Web.UI.WebControls.DropDownList> control.</span></span> <span data-ttu-id="8a91b-230"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールが自動的に作成、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>からユーザーを選択する値に基づいて、レコードをフィルターするプロパティ、<xref:System.Web.UI.WebControls.DropDownList>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-230">The <xref:System.Web.UI.WebControls.LinqDataSource> control automatically creates the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter records based on the value that the user selects from the <xref:System.Web.UI.WebControls.DropDownList> control.</span></span> <span data-ttu-id="8a91b-231">クエリには、レコードが返されますが`Category`プロパティから、ユーザーが選択した値に一致する、<xref:System.Web.UI.WebControls.DropDownList>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-231">The query returns the records whose `Category` property matches the value that the user has selected from the <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-232">実行時に <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールがデータ セクションでのナビゲーションをサポートするかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-232">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control supports navigation through sections of the data at run time.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-233">ユーザーがデータを閲覧できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-233">
              <see langword="true" /> if the user can page through the data; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8a91b-234">既定値は <see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-234">The default value is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-235">設定、<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>プロパティを`true`でページングを有効にする、<xref:System.Web.UI.WebControls.LinqDataSource>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-235">Set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property to `true` to enable paging in the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="8a91b-236">データをページにユーザーを有効にするには、接続へのページングのインターフェイスを提供するデータ バインド コントロール、<xref:System.Web.UI.WebControls.LinqDataSource>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-236">To enable the user to page through the data, connect a data-bound control that provides the interface for paging to the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="8a91b-237">ときに、<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>プロパティに設定されている`true`、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールがデータ バインド コントロール内の 1 つのページのための十分なレコードだけを取得します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-237">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves only enough records for one page in the data-bound control.</span></span> <span data-ttu-id="8a91b-238">使用して、<xref:System.Linq.Enumerable.Skip%2A>と<xref:System.Linq.Enumerable.Take%2A>を現在のページのレコードを取得するメソッド。</span><span class="sxs-lookup"><span data-stu-id="8a91b-238">It uses the <xref:System.Linq.Enumerable.Skip%2A> and <xref:System.Linq.Enumerable.Take%2A> methods to retrieve the records for the current page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-239">次の例は、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールを<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>プロパティに設定`true`と<xref:System.Web.UI.WebControls.GridView>コントロールにバインドされている、<xref:System.Web.UI.WebControls.LinqDataSource>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-239">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="8a91b-240"><xref:System.Web.UI.WebControls.GridView.AllowPaging%2A>のプロパティ、<xref:System.Web.UI.WebControls.GridView>コントロールに設定されて`true`がデータをユーザー ページをできるようにするインターフェイスを提供します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-240">The <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users page through the data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-241">実行時に <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールがデータの並べ替えをサポートするかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-241">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control supports sorting the data at run time.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-242">ユーザーがデータを並べ替えられる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-242">
              <see langword="true" /> if the user can sort the data; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8a91b-243">既定値は <see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-243">The default value is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-244"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、データを並べ替えるための 2 つの方法をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="8a91b-244">The <xref:System.Web.UI.WebControls.LinqDataSource> control supports two approaches for sorting data.</span></span> <span data-ttu-id="8a91b-245">使用することができます、<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>または実行時の並べ替えを有効にするプロパティが設定できる、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>デザイン時の並べ替えを定義するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-245">You can use the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property to enable run-time sorting or you can set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to define the sorting at design time.</span></span>  
  
 <span data-ttu-id="8a91b-246">設定、<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>プロパティを`true`で並べ替えを有効にする<xref:System.Web.UI.WebControls.LinqDataSource>データ バインド コントロールから、並べ替え式に基づいているコントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-246">Set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property to `true` to enable sorting in a <xref:System.Web.UI.WebControls.LinqDataSource> control that is based on the sort expression from a data-bound control.</span></span> <span data-ttu-id="8a91b-247">データ バインド コントロールでは、実行時に、並べ替えに使用するプロパティを選択するユーザーを有効にするインターフェイスを提供します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-247">The data-bound control provides the interface to enable the user to select at run time which property to use for sorting.</span></span>  
  
 <span data-ttu-id="8a91b-248">プログラムで設定してデータが返されます順序を設定することができます、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティをプロパティまたはプロパティの並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-248">You can programmatically set the order in which data is returned by setting the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to the property or properties used for sorting.</span></span> <span data-ttu-id="8a91b-249">ときに、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティがプロパティに設定され、<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>プロパティは`true`で式の後に、データ バインド コントロールから並べ替え式が適用される、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-249">When the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property is set to a property and the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property is `true`, the sort expression from the data-bound control is applied after the expression in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="8a91b-250">そのため、データの最終的な並べ替えを決定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-250">Therefore, this determines the final sorting of the data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-251">次の例は、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールを<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>プロパティに設定`true`と<xref:System.Web.UI.WebControls.GridView>コントロールにバインドされている、<xref:System.Web.UI.WebControls.LinqDataSource>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-251">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="8a91b-252"><xref:System.Web.UI.WebControls.GridView.AllowSorting%2A>のプロパティ、<xref:System.Web.UI.WebControls.GridView>コントロールに設定されている`true`ユーザーがデータを並べ替えできるインターフェイスを提供します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-252">The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users sort the data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-253">コンテキスト タイプ オブジェクトのインスタンスが作成された後に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-253">Occurs after an instance of the context type object is created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-254">処理、<xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>コンテキスト型のオブジェクトを確認またはオブジェクトの作成中に発生する例外を確認するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-254">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> event to examine the context type object or examine exceptions that are raised while the object is being created.</span></span> <span data-ttu-id="8a91b-255">コンテキスト型のオブジェクトを取得する、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>のプロパティ、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>このイベントに関連付けられているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a91b-255">You retrieve the context type object from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is associated with this event.</span></span> <span data-ttu-id="8a91b-256">データの操作中に発生した例外を取得する、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-256">You retrieve the exception that was raised during the data operation from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property.</span></span>  
  
 <span data-ttu-id="8a91b-257">コンテキスト型オブジェクトでは、select、update、insert、および削除操作中に作成され、要求全体で再利用します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-257">The context type object is created during select, update, insert, and delete operations and is reused throughout the request.</span></span>  
  
 <span data-ttu-id="8a91b-258">1 回の場合、イベントは発生しませんがあります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-258">There is one time when the event is not raised.</span></span> <span data-ttu-id="8a91b-259">これは、プログラムで設定する場合、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティ中にオブジェクトを<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-259">This is when you programmatically set the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property to an object during the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="8a91b-260">追加の条件は、元のいずれかの値を表示状態、または内のオブジェクトに格納する必要はありません、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティを実装して、<xref:System.Data.Linq.ITable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-260">An additional condition is that either the original values do not have to be stored in view state, or the object in the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property implements the <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-261">コンテキスト タイプ オブジェクトのインスタンスが作成される前に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-261">Occurs before an instance of the context type object is created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-262">既定では、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールで指定されている型のインスタンスを作成、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-262">By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control creates an instance of the type that is specified in the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property.</span></span> <span data-ttu-id="8a91b-263"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、オブジェクトのインスタンスを作成するデータ コンテキスト オブジェクトの既定のコンス トラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-263">The <xref:System.Web.UI.WebControls.LinqDataSource> control calls the default constructor of the data context object to create an instance of the object.</span></span> <span data-ttu-id="8a91b-264">既定以外のコンス トラクターを使用する必要がかで指定されたものとは異なるオブジェクトを作成する必要がある可能性が、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-264">It is possible that you have to use a non-default constructor or you have to create an object that differs from the one specified in the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property.</span></span> <span data-ttu-id="8a91b-265">その場合は、処理する必要があります、<xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating>イベント データ コンテキスト オブジェクトを手動で作成します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-265">In that case, you must handle the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event and manually create the data context object.</span></span>  
  
 <span data-ttu-id="8a91b-266">コンテキスト型のオブジェクトは、select、update、insert、および削除操作中に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-266">The context type object is created during select, update, insert, and delete operations.</span></span>  
  
 <span data-ttu-id="8a91b-267">1 回の場合、イベントは発生しませんがあります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-267">There is one time when the event is not raised.</span></span> <span data-ttu-id="8a91b-268">これは、プログラムで設定する場合、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティのイベント ハンドラー内のオブジェクトを<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-268">This is when you programmatically set the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property to an object in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="8a91b-269">追加の条件は、元のいずれかの値を表示状態、または内のオブジェクトに格納する必要はありません、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティを実装して、<xref:System.Data.Linq.ITable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-269">An additional condition is that either the original values do not have to be stored in view state, or the object in the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property implements the <xref:System.Data.Linq.ITable> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-270">次の例は、中に既定以外のコンス トラクターを使用して、データ コンテキスト オブジェクトを作成する方法を示しています、<xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating>イベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-270">The following example shows how to create the data context object by using a non-default constructor during the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event.</span></span> <span data-ttu-id="8a91b-271">オブジェクトを代入して、<xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-271">The code assigns the object to the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-272">コンテキスト タイプ オブジェクトが破棄される前に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-272">Occurs before disposing the context type object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-273">処理する、<xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing>を手動でオブジェクトを破棄する場合、またはクリーンアップ操作は、オブジェクトに固有のオブジェクトが破棄される前に実行するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-273">You handle the <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> event to dispose the object manually, or to perform clean-up that is specific to the object before the object is destroyed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-274">取得するデータが値として格納されているプロパティを含む型の名前を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-274">Gets or sets the name of the type that contains the property whose value has the data that you want to retrieve.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-275">取得するデータが含まれているクラスの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-275">The name of the class to retrieve data from.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-276">使用すると、<xref:System.Web.UI.WebControls.LinqDataSource>メモリ内のデータ コレクションまたはデータベースからデータを取得するコントロールを 2 つのプロパティを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-276">When you use the <xref:System.Web.UI.WebControls.LinqDataSource> control to retrieve data from either an in-memory data collection or a database, you must specify two properties.</span></span> <span data-ttu-id="8a91b-277">最初は、データ ソースを表すデータ コンテキスト クラスです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-277">The first is a data context class that represents the data source.</span></span> <span data-ttu-id="8a91b-278">2 つ目は、データを含むデータ コンテキスト クラスのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-278">The second is a property in the data context class that contains the data.</span></span> <span data-ttu-id="8a91b-279">設定する、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティ データ コンテキスト クラスの名前を設定、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティ データを格納しているデータ コレクションをします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-279">You set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the name of the data context class and you set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the data collection that contains the data.</span></span>  
  
 <span data-ttu-id="8a91b-280">たとえば、データベースからデータを取得するときに設定、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティをデータベースを表すクラスの名前にします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-280">For example, when you retrieve data from a database, set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the name of the class that represents the database.</span></span> <span data-ttu-id="8a91b-281">設定も、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティをデータベース内のテーブルを表すプロパティ。</span><span class="sxs-lookup"><span data-stu-id="8a91b-281">Also set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property that represents the table in the database.</span></span> <span data-ttu-id="8a91b-282">データベースからクラスを生成するには、使用、[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]または SqlMetal.exe ユーティリティを自動的にこれらのクラスを生成します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-282">To generate classes from a database, use the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] or the SqlMetal.exe utility to automatically generate those classes.</span></span>  
  
 <span data-ttu-id="8a91b-283">配列などのメモリ内のデータ コレクションからデータを取得する場合、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティ配列プロパティが含まれているクラスの名前にします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-283">When you retrieve data from an in-memory data collection such as an array, set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the name of the class that contains the array property.</span></span> <span data-ttu-id="8a91b-284">設定して、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティの配列を取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-284">Then set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property that gets the array.</span></span>  
  
 <span data-ttu-id="8a91b-285">自動更新を有効にするには、挿入、または削除操作を<xref:System.Web.UI.WebControls.LinqDataSource>に割り当てられているクラスを制御する、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティから派生しなければなりません<xref:System.Data.Linq.DataContext>です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-285">To enable automatic update, insert, or delete operations through the <xref:System.Web.UI.WebControls.LinqDataSource> control, the class assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property must derive from <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="8a91b-286">さらに、プロパティは割り当て、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティから派生しなければなりません<xref:System.Data.Linq.Table%601>です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-286">In addition, the property assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property must derive from <xref:System.Data.Linq.Table%601>.</span></span> <span data-ttu-id="8a91b-287">必要な自動更新を有効にする insert、またはしない削除操作、割り当てることができますをクラスの任意の型の名前、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-287">If you do not need to enable automatic update, insert, or delete operations, you can assign the name of any type of class to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property.</span></span>  
  
 <span data-ttu-id="8a91b-288">クラスのインスタンスからデータを選択する方法については、次を参照してください。、<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-288">For information about how to select data from an instance of a class, see the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-289">次の例は、設定する方法を示します、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>を文字列の配列を含むクラスのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-289">The following example shows how to set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to a class that contains an array of strings.</span></span> <span data-ttu-id="8a91b-290">クラスにプロパティを設定する方法も示しています (によって生成された、 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]) を表すデータベース。</span><span class="sxs-lookup"><span data-stu-id="8a91b-290">It also shows how to set the property to a class (generated by the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]) that represents a database.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 <span data-ttu-id="8a91b-291">という名前のクラス`ExampleDataContext`を表すデータベース テーブルが表示されないようにこの例ではします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-291">The class named `ExampleDataContext` that represents the database table is not shown in this example.</span></span> <span data-ttu-id="8a91b-292">この例を実行するは、名前付き Example.dbml テーブルをドラッグして、上にムービーをという名前の LINQ に SQL クラスを追加することによってこのクラスを作成する必要があります、[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-292">For this example to work, you must create this class by adding a LINQ To SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].</span></span> <span data-ttu-id="8a91b-293">という名前のクラス`ExampleDataContext`という名前のプロパティと`Movies`が生成されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-293">A class named `ExampleDataContext` with a property named `Movies` is generated.</span></span>  
  
 <span data-ttu-id="8a91b-294">次の例は、という名前のクラスを示しています。`MovieLibrary`で参照されている、<xref:System.Web.UI.WebControls.LinqDataSource>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-294">The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-295">クエリ可能なビューを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-295">Returns a queryable view.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a91b-296">クエリ可能なビュー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-296">A queryable view.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-297">このコントロールに関連付けられている <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> クラスの新しいインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-297">Creates a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> class that is associated with this control.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a91b-298">データ バインド コントロールのインターフェイスとして動作するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-298">An object that acts as the interface for data-bound controls.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-299">カスタム ビューを提供するには、派生クラスでは、このメソッドをオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-299">To provide a custom view, you can override this method in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">
          <span data-ttu-id="8a91b-300">削除するレコードの行のキー値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-300">The row key values for the records to be deleted.</span>
          </span>
        </param>
        <param name="oldValues">
          <span data-ttu-id="8a91b-301">データの競合を検出するために評価される行の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-301">The row values that are evaluated to detect data conflicts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a91b-302">削除の操作を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-302">Performs a delete operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a91b-303">削除操作によって影響を受けたレコードの数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-303">The number of records affected by the delete operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-304">通常がありませんを呼び出して、<xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>コードからメソッドです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-304">Typically, you do not have to call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method from your code.</span></span> <span data-ttu-id="8a91b-305">使用すると、<xref:System.Web.UI.WebControls.LinqDataSource>データ バインド コントロール、データ バインド コントロールでは自動的に呼び出す、<xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>メソッドは、ユーザーがレコードを削除する操作とします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-305">When you use a <xref:System.Web.UI.WebControls.LinqDataSource> control with a data-bound control, the data-bound control will automatically call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method when the user takes action to delete a record.</span></span> <span data-ttu-id="8a91b-306">明示的に呼び出す、<xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>メソッド データを削除するための独自のプロセスを作成するときにします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-306">You explicitly call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method when you want to create your own process for deleting data.</span></span> <span data-ttu-id="8a91b-307">たとえばを呼び出すことができます、<xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>データ バインド コントロールの外部イベントに基づいて、このメソッドは、レコードを削除するとします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-307">For example, you can call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method when you want to delete a record based on an event outside the data-bound control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-308">削除操作が終了したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-308">Occurs when a delete operation has finished.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-309">処理、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> delete 操作から例外をキャッチする場合、または操作が完了した後、出力パラメーターを検査するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-309">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> event to catch any exceptions from the delete operation, or to examine output parameters after the operation has finished.</span></span> <span data-ttu-id="8a91b-310">出力パラメーターを取得することができます、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>イベント ハンドラーに渡されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a91b-310">You can retrieve the output parameters from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-311">このプロパティは、<see cref="T:System.Web.UI.WebControls.LinqDataSource" /> クラスでは使用されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-311">This property is not used by the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> class.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-312">パラメーターのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-312">A collection of parameters.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-313">削除操作の前に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-313">Occurs before a delete operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-314">処理、<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>を削除する、削除操作の前に値を変更または削除操作をキャンセルするデータ クラスからのデータの検証エラーを検査するオブジェクトを検証するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-314">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event to validate the object to be deleted, to examine data validation errors from the data class, to change a value before the delete operation, or to cancel the delete operation.</span></span> <span data-ttu-id="8a91b-315"><xref:System.Web.UI.WebControls.LinqDataSource>パスを制御する<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>オブジェクトのイベント ハンドラーを<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>イベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-315">The <xref:System.Web.UI.WebControls.LinqDataSource> control passes a <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> object to event handlers for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event.</span></span> <span data-ttu-id="8a91b-316"><xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>オブジェクトには、データが削除され、削除操作をキャンセルすることができますが含まれています。</span><span class="sxs-lookup"><span data-stu-id="8a91b-316">The <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> object contains the data that will be deleted and enables you to cancel the delete operation.</span></span> <span data-ttu-id="8a91b-317">データ クラスをスローする場合、 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 、例外、<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>オブジェクトにはで、その例外が含まれています、<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-317">If the data class throws a <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> exception, the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> object contains that exception in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> property.</span></span>  
  
 <span data-ttu-id="8a91b-318">かどうかのイベント ハンドラーで例外がスローされます、<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>イベント、そのイベント ハンドラーで例外を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-318">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="8a91b-319">例外は、のイベント ハンドラーに渡すことはできません、<xref:System.Web.UI.WebControls.LinqDataSource.Deleted>イベント (を通じて、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>のプロパティ、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>オブジェクト)。</span><span class="sxs-lookup"><span data-stu-id="8a91b-319">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="8a91b-320"><xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティには、後にスローされた例外だけが含まれています、<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>イベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-320">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-321">次の例は、イベント ハンドラーを<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>イベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-321">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event.</span></span> <span data-ttu-id="8a91b-322">コードでは、プロパティに基づいて、削除操作のキャンセル、<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A>プロパティと、Web ページからの値。</span><span class="sxs-lookup"><span data-stu-id="8a91b-322">The code cancels the delete operation based on a property in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> property and a value from the Web page.</span></span> <span data-ttu-id="8a91b-323">例では、ときに、`OnSale`プロパティに設定されている`true`、ユーザーを選択する必要があります、<xref:System.Web.UI.WebControls.CheckBox>コントロールをレコードが削除されることを確認します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-323">In the example, when the `OnSale` property is set to `true`, the user must select a <xref:System.Web.UI.WebControls.CheckBox> control to confirm that a record should be deleted.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-324">
            <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールを通じてデータ レコードを削除できるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-324">Gets or sets a value that indicates whether data records can be deleted through the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-325">削除の自動実行が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-325">
              <see langword="true" /> if automatic delete operations are enabled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8a91b-326">既定値は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-326">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-327">設定、<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>プロパティを`true`を通じてデータ レコードを削除するユーザーを有効にするときに、<xref:System.Web.UI.WebControls.LinqDataSource>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-327">Set the <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> property to `true` when you want to enable users to delete a data record through the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="8a91b-328">ときに<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>は`true`、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールは LINQ to SQL を使用してデータを削除するコマンドを自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-328">When <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> is `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically create the command to delete the data.</span></span> <span data-ttu-id="8a91b-329">ユーザーなどを削除するレコードを選択できるインターフェイスを含める必要があります、<xref:System.Web.UI.WebControls.DetailsView>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-329">You must include an interface that lets users select a record to delete, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span>  
  
 <span data-ttu-id="8a91b-330"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールが自動削除の各操作をサポートしていないときに、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティまたは<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティが設定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-330">The <xref:System.Web.UI.WebControls.LinqDataSource> control does not support automatic delete operations when the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property or the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is set.</span></span> <span data-ttu-id="8a91b-331">その場合は、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、削除操作を試みた場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-331">In that case, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if a delete operation is tried.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-332">次の例は、<xref:System.Web.UI.WebControls.LinqDataSource>を持つコントロールを<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>'éý'`true`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-332">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> set to `true`.</span></span> <span data-ttu-id="8a91b-333">A<xref:System.Web.UI.WebControls.DetailsView>コントロールは、データが表示され、ユーザーがデータ レコードを削除できるボタンを作成します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-333">A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users delete a data record.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-334">
            <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールを通じてデータ レコードを挿入できるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-334">Gets or sets a value that indicates whether data records can be inserted through the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-335">挿入の自動実行が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-335">
              <see langword="true" /> if automatic insert operations are enabled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8a91b-336">既定値は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-336">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-337">設定、<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>プロパティを`true`から新しいデータ レコードを挿入するユーザーを有効にするときに、<xref:System.Web.UI.WebControls.LinqDataSource>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-337">Set the <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> property to `true` when you want to enable users to insert a new data record through the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="8a91b-338">ときに<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>は`true`、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールがデータを挿入するコマンドを自動的に作成する LINQ to SQL を使用します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-338">When <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> is `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically create the command to insert the data.</span></span> <span data-ttu-id="8a91b-339">ユーザーがなど、新しいレコードを挿入できるインターフェイスを含める必要があります、<xref:System.Web.UI.WebControls.DetailsView>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-339">You must include an interface that lets users insert a new record, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span>  
  
 <span data-ttu-id="8a91b-340"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールが自動挿入操作をサポートしていないときに、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティまたは<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティが設定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-340">The <xref:System.Web.UI.WebControls.LinqDataSource> control does not support automatic insert operations when the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property or the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is set.</span></span> <span data-ttu-id="8a91b-341">その場合は、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、挿入操作を試みた場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-341">In that case, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if an insert operation is tried.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-342">次の例は、<xref:System.Web.UI.WebControls.LinqDataSource>を持つコントロールを<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>'éý'`true`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-342">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> set to `true`.</span></span> <span data-ttu-id="8a91b-343">A<xref:System.Web.UI.WebControls.DetailsView>コントロールは、データを表示し、モード、ユーザーが作成し、新しいレコードの保存を挿入するコントロールを切り替えるボタンが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-343">A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and displays a button that switches the control to insert mode where users can create and save a new record.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-344">データ コンテキスト オブジェクトの変更履歴を記録するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-344">Gets or sets the value that indicates whether changes to the data context object are tracked.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-345">データ コンテキスト オブジェクトの変更履歴を記録する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-345">
              <see langword="true" /> if the data context object is tracked for changes; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8a91b-346">既定値は、<see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-346">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-347"><xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A>プロパティは、LINQ に SQL データ コンテキストのオブジェクトからデータを選択するときにのみ使用します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-347">The <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> property is only used when selecting data from a LINQ To SQL data context object.</span></span>  
  
 <span data-ttu-id="8a91b-348">読み取り専用のデータをやり取りする場合、設定、<xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A>プロパティを`false`データが変更されているかどうかを決定するキャッシュされませんのでパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-348">When you are interacting with read-only data, setting the <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> property to `false` improves performance because the data is not cached to determine if it has changed.</span></span> <span data-ttu-id="8a91b-349">ただし、クエリの遅延実行も無効にします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-349">However, it also disables deferred query execution.</span></span> <span data-ttu-id="8a91b-350">このプロパティに設定する必要があります`true`クエリの遅延実行を使用する場合。</span><span class="sxs-lookup"><span data-stu-id="8a91b-350">This property must be set to `true` if you want to use deferred query execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-351">
            <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールを通じてデータ レコードを更新できるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-351">Gets or sets a value that indicates whether data records can be updated through the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-352">更新の自動実行が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-352">
              <see langword="true" /> if automatic update operations are enabled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8a91b-353">既定値は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-353">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-354">設定、<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>プロパティを`true`を使用してデータ レコードを更新するユーザーを有効にするときに、<xref:System.Web.UI.WebControls.LinqDataSource>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-354">Set the <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> property to `true` when you want to enable users to update a data record by using the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="8a91b-355">ときに<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>は`true`、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールがデータを更新するコマンドを自動的に作成する LINQ to SQL を使用します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-355">When <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> is `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically create the command to update the data.</span></span> <span data-ttu-id="8a91b-356">ユーザーがなど、レコードを更新できるインターフェイスを含める必要があります、<xref:System.Web.UI.WebControls.DetailsView>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-356">You must include an interface that lets users update a record, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span>  
  
 <span data-ttu-id="8a91b-357"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールが自動更新操作をサポートしていないときに、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティまたは<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティが設定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-357">The <xref:System.Web.UI.WebControls.LinqDataSource> control does not support automatic update operations when the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property or the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is set.</span></span> <span data-ttu-id="8a91b-358">その場合は、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、更新操作を試みた場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-358">In that case, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if an update operation is tried.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-359">次の例は、<xref:System.Web.UI.WebControls.LinqDataSource>を持つコントロールを<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>'éý'`true`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-359">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> set to `true`.</span></span> <span data-ttu-id="8a91b-360">A<xref:System.Web.UI.WebControls.DetailsView>コントロールは、データが表示され、ユーザーがデータ レコードを更新できるボタンを作成します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-360">A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users update a data record.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-361">取得したデータのグループ化に使用するプロパティを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-361">Gets or sets a value that specifies which properties are used for grouping the retrieved data.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-362">Group By 句の作成に使用される文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-362">A string that is used to create the Group By clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-363">使用する、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティを同じ値を持つデータ レコードを統合するために使用するプロパティを指定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-363">You use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to specify which properties are used for consolidating data records that have the same values.</span></span> <span data-ttu-id="8a91b-364">たとえば、設定した場合、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティを`Name`が同じである、クエリ内のすべてのレコード`Name`プロパティの値は 1 つの統合されたレコードとして返されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-364">For example, if you set the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to `Name`, all the records in the query that have the same `Name` property value are returned as a single consolidated record.</span></span>  
  
 <span data-ttu-id="8a91b-365">1 つ以上のプロパティを割り当てることができます、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティ内のすべてのプロパティを囲むことによって、`new`関数し、コンマを使用して、各プロパティを分離します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-365">You can assign more than one property to the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property by enclosing all the properties in the `new` function and separating each property by using a comma.</span></span> <span data-ttu-id="8a91b-366">プロパティでグループ化する場合など、`Name`し`Category`、設定、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティを`new(Name, Category)`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-366">For example, to group by the properties `Name` and then `Category`, set the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to `new(Name, Category)`.</span></span>  
  
 <span data-ttu-id="8a91b-367">グループ化に使用されるプロパティの値は、という名前の生成されたプロパティを通じて返される`Key`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-367">The values in the property that are used for grouping are returned through a generated property named `Key`.</span></span> <span data-ttu-id="8a91b-368">含める、`Key`プロパティに、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティをグループ化された値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-368">You include the `Key` property in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to retrieve the grouped values.</span></span> <span data-ttu-id="8a91b-369">設定することができます、`Key`プロパティを使用して別名を`As`キーワード、ですが、別名を使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-369">You can set the `Key` property to an alias by using the `As` keyword, but you are not required to use an alias.</span></span> <span data-ttu-id="8a91b-370">たとえば、設定することがあります、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>という名前のプロパティをプロパティ`Category`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-370">For example, you might set the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to a property named `Category`.</span></span> <span data-ttu-id="8a91b-371">統合の値を取得することができます、`Category`プロパティを設定して、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティを`new(Key As ProductCategory)`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-371">You can retrieve the consolidated values from the `Category` property by setting the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to `new(Key As ProductCategory)`.</span></span>  
  
 <span data-ttu-id="8a91b-372">含めることによって、グループ内の個々 のレコードにアクセスすることができます、`It`プロパティに、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-372">You can access the individual records in a grouping by including the `It` property in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="8a91b-373">`It`プロパティには、グループ化されたプロパティの値を共有するレコードのコレクションが含まれています。</span><span class="sxs-lookup"><span data-stu-id="8a91b-373">The `It` property contains a collection of records that share a value in the grouped property.</span></span> <span data-ttu-id="8a91b-374">反復処理することができます、`It`個々 のレコードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-374">You can iterate over the `It` property to retrieve the individual records.</span></span>  
  
 <span data-ttu-id="8a91b-375"><xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティは集計メソッドでよく使用します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-375">The <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is often used with aggregation methods.</span></span> <span data-ttu-id="8a91b-376">次の集計メソッドを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-376">You can use the following aggregate methods:</span></span>  
  
-   `Count()`  
  
-   <span data-ttu-id="8a91b-377">`Average(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="8a91b-377">`Average(` *column* `)`</span></span>  
  
-   <span data-ttu-id="8a91b-378">`Sum(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="8a91b-378">`Sum(` *column* `)`</span></span>  
  
-   <span data-ttu-id="8a91b-379">`Max(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="8a91b-379">`Max(` *column* `)`</span></span>  
  
-   <span data-ttu-id="8a91b-380">`Min(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="8a91b-380">`Min(` *column* `)`</span></span>  
  
-   <span data-ttu-id="8a91b-381">`Where(` *condition* `)`</span><span class="sxs-lookup"><span data-stu-id="8a91b-381">`Where(` *condition* `)`</span></span>  
  
-   `Any()`  
  
-   <span data-ttu-id="8a91b-382">`All(` *condition* `)`</span><span class="sxs-lookup"><span data-stu-id="8a91b-382">`All(` *condition* `)`</span></span>  
  
 <span data-ttu-id="8a91b-383">詳細については、次を参照してください。 [NIB: LinqDataSource Web サーバー コントロールの概要](http://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136)と[する方法: グループおよび LinqDataSource コントロールを使用してデータを集計](http://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af)です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-383">For more information, see [NIB: LinqDataSource Web Server Control Overview](http://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) and [How to: Group and Aggregate Data Using the LinqDataSource Control](http://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-384">次の例は、<xref:System.Web.UI.WebControls.LinqDataSource>という名前のプロパティによって返されるデータをグループ化するコントロール`Category`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-384">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that groups the returned data by a property named `Category`.</span></span> <span data-ttu-id="8a91b-385">共有の値を返し、グループ化されたレコードの平均価格を計算します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-385">It returns the shared values and calculates the average price for the grouped records.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 <span data-ttu-id="8a91b-386">例を次に、<xref:System.Web.UI.WebControls.LinqDataSource>制御されている 2 つの列でグループを構成します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-386">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns.</span></span> <span data-ttu-id="8a91b-387">`Key`プロパティを 2 つのプロパティを持つオブジェクトを参照して`ProductCategory`と`Color`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-387">The `Key` property references an object that has two properties, `ProductCategory` and `Color`.</span></span> <span data-ttu-id="8a91b-388">によって表されるオブジェクト`It`名前が変更`Products`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-388">The object represented by `It` is renamed `Products`.</span></span> <span data-ttu-id="8a91b-389">名前が変更された`Products`オブジェクトには、グループ内の個々 のレコードのコレクションが含まれ、各インスタンスには、Products テーブルからのすべての列が含まれています。</span><span class="sxs-lookup"><span data-stu-id="8a91b-389">The renamed `Products` object contains a collection of the individual records in a grouping, and each instance contains all the columns from the Products table.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 <span data-ttu-id="8a91b-390">次の例は 2 つ<xref:System.Web.UI.WebControls.ListView>からデータを表示するコントロールを<xref:System.Web.UI.WebControls.LinqDataSource>前の例で制御します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-390">The following example shows two <xref:System.Web.UI.WebControls.ListView> controls for displaying the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example.</span></span> <span data-ttu-id="8a91b-391">1 つ<xref:System.Web.UI.WebControls.ListView>グループ化されたデータと、その他のコントロールが表示されます<xref:System.Web.UI.WebControls.ListView>コントロールがそのグループに属している製品の個々 の名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-391">One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group.</span></span> <span data-ttu-id="8a91b-392">入れ子になったデータ バインド コントロールの<xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A>プロパティに設定されている`Products`のエイリアスは、これは、`It`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a91b-392">The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-393">Group By 句の作成に使用されるパラメーターのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-393">Gets the collection of parameters that are used to create the Group By clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-394">Group By 句の作成に使用されるパラメーター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-394">The parameters that are used to create the Group By clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-395"><xref:System.Web.UI.WebControls.LinqDataSource>コントロール内のパラメーターを使用して、<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>実行時に、Group By 句を作成するコレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-395">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection to create the Group By clause at run time.</span></span> <span data-ttu-id="8a91b-396">通常は使用しません、<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>コレクション データをグループ化します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-396">Typically you will not use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection to group data.</span></span> <span data-ttu-id="8a91b-397">代わりに、使用することができます、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-397">Instead, you can use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property.</span></span> <span data-ttu-id="8a91b-398">使用する、<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>場合のみ、Group By 句内の値のコレクションは、実行時に設定する必要があり、その値がプロパティ名ではありません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-398">You use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection only when a value in the Group By clause must be set at run time and that value is not a property name.</span></span> <span data-ttu-id="8a91b-399">たとえば、使用して、<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>コレクション データをグループ化するかどうかに基づいて、`LastName`データ レコードのプロパティがユーザーによって提供される値に等しい。</span><span class="sxs-lookup"><span data-stu-id="8a91b-399">For example, use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection to group data based on whether the `LastName` property in the data records equals a value provided by the user.</span></span>  
  
 <span data-ttu-id="8a91b-400">プロパティでデータをグループ化するし、そのプロパティは実行時に設定する必要はありませんでグループ化プロパティを定義できます、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-400">If you want to group data by a property and that property does not have to be set at run time, you can define the grouping property in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property.</span></span> <span data-ttu-id="8a91b-401">たとえば、データベース テーブルから値を返すでグループ化された`LastName`設定、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 「姓」パラメーターを使用せずにします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-401">For example, to return values from a database table grouped by `LastName`, set <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> to "LastName" without any parameters.</span></span> <span data-ttu-id="8a91b-402">プロパティによって動的にデータをグループ化する場合は、イベント ハンドラーを作成、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベントとカスタマイズ、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティに応じて。</span><span class="sxs-lookup"><span data-stu-id="8a91b-402">If you want to dynamically group data by a property, create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event and customize the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property as needed.</span></span>  
  
 <span data-ttu-id="8a91b-403">パラメーターの値として、プロパティの名前を割り当てることはできません、<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-403">You cannot assign the name of a property as the value for a parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection.</span></span> <span data-ttu-id="8a91b-404">パラメーターを追加する、<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>する条件を追加する場合に、コレクション、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティを実行時に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-404">You add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection when you want to add a condition to the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property that must be set at run time.</span></span>  
  
 <span data-ttu-id="8a91b-405">値を設定する、<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>コレクション、各パラメーターに名前を割り当てるし、追加するにプレース ホルダー、<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>という名前のパラメーターのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-405">To set values in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection, you assign a name to each parameter and then add a placeholder in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property for that named parameter.</span></span> <span data-ttu-id="8a91b-406">Group By 句で各パラメーター名をはじめ、@ 記号。</span><span class="sxs-lookup"><span data-stu-id="8a91b-406">In the Group By clause, preface each parameter name with the @ symbol.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">
          <span data-ttu-id="8a91b-407">データ ソースに挿入する行の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-407">The row values to be inserted into the data source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a91b-408">挿入の操作を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-408">Performs an insert operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a91b-409">挿入操作の影響を受けた行の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-409">The number of rows affected by the insert operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-410">通常がありませんを呼び出して、<xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>コードからメソッドです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-410">Typically, you do not have to call the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method from your code.</span></span> <span data-ttu-id="8a91b-411">データ バインド コントロールが自動的に呼び出す、<xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>メソッドは、ユーザーが新しいレコードを挿入する操作とします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-411">The data-bound control will automatically call the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method when the user takes action to insert a new record.</span></span> <span data-ttu-id="8a91b-412">明示的に呼び出す、<xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>メソッド データを挿入するための独自のプロセスを作成するときにします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-412">You explicitly call the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method when you want to create your own process for inserting data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-413">次の例では、プログラムで、ユーザーがボタンをクリックした後、データ ソースで新しいレコードを挿入する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-413">The following example shows how to programmatically insert a new record in the data source after the user clicks a button.</span></span> <span data-ttu-id="8a91b-414">コードを渡します、<xref:System.Collections.Specialized.ListDictionary>既定値を格納しているオブジェクトの値を<xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-414">The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains default values to the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 <span data-ttu-id="8a91b-415">次の例では、前の例のマークアップを示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-415">The following example shows the markup for the previous example.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-416">挿入操作が終了したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-416">Occurs when an insert operation has finished.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-417">処理、<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>挿入操作から例外をキャッチする場合、または挿入操作が完了した後に値を調べイベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-417">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event to catch any exceptions from the insert operation or to examine the values after the insert operation has finished.</span></span> <span data-ttu-id="8a91b-418">使用して、新しい値を取得することができます、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>イベント ハンドラーに渡されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a91b-418">You can retrieve the new values through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span> <span data-ttu-id="8a91b-419">たとえば、使用することができます、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>新しいデータのレコードのデータベースによって生成された id プロパティを取得するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a91b-419">For example, you can use the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object to retrieve the identity property generated by a database for a new data record.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-420">次の例は、イベント ハンドラーを作成する方法を示しています、<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>例外をチェックし、新しいレコードの id プロパティを取得するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-420">The following example shows how to create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event that checks for exceptions and retrieves the identity property for the new record.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-421">挿入操作の前に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-421">Occurs before an insert operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-422">処理、<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>を挿入する、insert 操作の前に値を変更または挿入操作をキャンセルするデータ クラスからのデータの検証エラーを検査するオブジェクトを検証するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-422">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event to validate the object to be inserted, to examine data validation errors from the data class, to change a value before the insert operation, or to cancel the insert operation.</span></span> <span data-ttu-id="8a91b-423"><xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>このイベントには、データ ソースに挿入する新しいオブジェクトが含まれており、オブジェクトがイベント ハンドラーに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-423">The <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object passed to event handlers for this event contains the new object to insert in the data source.</span></span>  
  
 <span data-ttu-id="8a91b-424">挿入操作中に検証エラーが発生した場合、<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>オブジェクトには、データ クラスによってスローされる検証例外が含まれています。</span><span class="sxs-lookup"><span data-stu-id="8a91b-424">If a validation error occurs during the insert operation, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains the validation exceptions that are thrown by the data class.</span></span> <span data-ttu-id="8a91b-425">挿入する値がデータ クラスでプロパティの型と一致しない場合、またはカスタムの検証チェックに合格していない場合、検証エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-425">A validation error occurs if a value to be inserted does not match the type of the property in the data class, or if it does not pass a custom validation check.</span></span> <span data-ttu-id="8a91b-426">イベント ハンドラーで、<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>イベント、検証の例外を取得して、適切なアクションを実行することができます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-426">In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event, you can retrieve the validation exceptions and take appropriate action.</span></span>  
  
 <span data-ttu-id="8a91b-427">かどうかのイベント ハンドラーで例外がスローされます、<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>イベント、そのイベント ハンドラーで例外を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-427">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="8a91b-428">例外は、のイベント ハンドラーに渡すことはできません、<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>イベント (を通じて、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>のプロパティ、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>オブジェクト)。</span><span class="sxs-lookup"><span data-stu-id="8a91b-428">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="8a91b-429"><xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティには、後にスローされた例外だけが含まれています、<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>イベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-429">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-430">次の例は、イベント ハンドラーを<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>挿入操作の前にデータを変更するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-430">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event that modifies data before the insert operation.</span></span> <span data-ttu-id="8a91b-431">オブジェクトから、<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A>プロパティがという名前の型にキャスト`Product`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-431">The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`.</span></span> <span data-ttu-id="8a91b-432">`DateModified`のプロパティ、`Product`オブジェクトが現在の日付と時刻に設定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-432">The `DateModified` property of the `Product` object is set to the current date and time.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 <span data-ttu-id="8a91b-433">次の例は、イベント ハンドラーを<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>検証例外を取得するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-433">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event that retrieves validation exceptions.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 <span data-ttu-id="8a91b-434">前の例では、検証の例外を取得します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-434">The previous example retrieves validation exceptions.</span></span> <span data-ttu-id="8a91b-435">値がプロパティの型と一致しない場合、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-435">An exception might be thrown if a value does not match the type of the property.</span></span> <span data-ttu-id="8a91b-436">次の例のようなカスタマイズされたチェックからもスロー可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-436">It might also be thrown from a customized check such as the one in the following example.</span></span> <span data-ttu-id="8a91b-437">`OnAgeChanging`メソッドでは、ことを確認の数、`Age`プロパティは負の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-437">The `OnAgeChanging` method checks that the number for the `Age` property is not negative.</span></span>  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-438">挿入の操作中に使用されるパラメーターのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-438">Gets the collection of parameters that are used during an insert operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-439">挿入の操作中に使用されるパラメーターのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-439">The parameters that are used during an insert operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-440">挿入操作に必要な値が渡される通常、<xref:System.Web.UI.WebControls.LinqDataSource>データ バインドされたコントロールによって制御します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-440">Typically the values that are needed for an insert operation are passed to the <xref:System.Web.UI.WebControls.LinqDataSource> control by the data-bound control.</span></span> <span data-ttu-id="8a91b-441">Insert、既定値を指定するときに値を定義や空の値に変換するかどうかを指定する`null`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-441">You specify insert parameters when you want to provide a default value or define whether to convert empty values to `null`.</span></span> <span data-ttu-id="8a91b-442">ユーザーが値を指定しない場合に処理する必要がある値に対してのみ、挿入される値ごとにパラメーターを指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-442">You do not have to provide a parameter for every value that will be inserted, only for the values that must be handled when the user does not provide a value.</span></span>  
  
 <span data-ttu-id="8a91b-443">指定する値、<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>コレクションは、データ ソースで定義されているが、データ コントロールにバインドされていないフィールドでのみ使用します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-443">The values that you provide in the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection are used only for fields that are defined in the data source but that are not bound in the data control.</span></span> <span data-ttu-id="8a91b-444">たとえば、データベース テーブルに列名、アドレス、および郵便番号、名前付きであると仮定しますが、<xref:System.Web.UI.WebControls.ListView>名前と住所のフィールドにのみ、テーブルにバインドされているコントロールがバインドされています。</span><span class="sxs-lookup"><span data-stu-id="8a91b-444">For example, suppose a database table has columns that are named Name, Address, and PostalCode, but a <xref:System.Web.UI.WebControls.ListView> control that is bound to the table is bound only to the Name and Address fields.</span></span> <span data-ttu-id="8a91b-445">内の値、<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>コレクションは、PostalCode フィールドに対してのみ使用されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-445">The values in the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection will be used only for the PostalCode field.</span></span> <span data-ttu-id="8a91b-446">これらは、名前と住所のフィールドの使用されません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-446">They will not be used for the Name and Address field.</span></span> <span data-ttu-id="8a91b-447">これは、それらのフィールドの値が入力されていない場合でも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-447">This is true even if no value is entered for those fields.</span></span> <span data-ttu-id="8a91b-448">かどうか、データ バインド コントロール自動生成するデータのすべてのフィールドのソース フィールドから値のない、<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>コレクションを使用します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-448">If the data-bound control autogenerates fields for all fields in the data source, no values from the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection will be used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-449">次の例は、<xref:System.Web.UI.WebControls.LinqDataSource>で既定値を提供するパラメーターを持つコントロール、<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-449">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with a parameter that provides a default value in the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection.</span></span> <span data-ttu-id="8a91b-450">ユーザーがの値を指定しない場合、`Category`プロパティ、パラメーターによって提供される既定値は、データベースに保存します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-450">If the user does not provide a value for the `Category` property, the default value that is provided by the parameter is saved in the database.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8a91b-451">イベントのデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-451">The event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a91b-452">
            <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> オブジェクトを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-452">Initializes the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8a91b-453">イベント データを格納している <see cref="T:System.EventArgs" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-453">An <see cref="T:System.EventArgs" /> object that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a91b-454">
            <see cref="E:System.Web.UI.Control.Unload" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-454">Raises the <see cref="E:System.Web.UI.Control.Unload" /> event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-455">取得したデータの並べ替えに使用するフィールドを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-455">Gets or sets a value that specifies which fields are used for ordering the retrieved data.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-456">Order By 句の作成に使用される文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-456">A string that is used to create the Order By clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-457">使用する、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティから返されるデータの並べ替えに使用するプロパティを指定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-457">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to specify which properties from the returned data to use for sorting.</span></span> <span data-ttu-id="8a91b-458">データの並べ替えプロパティが元のデータ ソースに存在する必要がありますに含まれる必要はありません、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-458">The property for sorting the data must exist in the original data source, but it does not have to be included in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="8a91b-459">スペースを追加して`Ascending`、 `ASC`、 `Descending`、または`DESC`内のプロパティを<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>順序付けされたデータを返す方法を指定するために文字列です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-459">You can add a space and `Ascending`, `ASC`, `Descending`, or `DESC` to a property in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> string in order to specify how the ordered data is returned.</span></span>  
  
 <span data-ttu-id="8a91b-460">1 つ以上のプロパティを指定することができます、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>コンマを使用して各プロパティを分離することによりプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-460">You can provide more than one property in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property by separating each property by using a comma.</span></span> <span data-ttu-id="8a91b-461">たとえば、という名前のプロパティ順に`LastName`と`FirstName`、設定されて、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 「姓、名」にプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-461">For example, to order by properties named `LastName` and `FirstName`, set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to "LastName, FirstName".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8a91b-462">使用する場合、<xref:System.Web.UI.WebControls.LinqDataSource>で制御[!INCLUDE[ss2k](~/includes/ss2k-md.md)]または[!INCLUDE[ssEW](~/includes/ssew-md.md)]と<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>プロパティに設定されている`true`の値を指定する必要があります、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-462">When you use the <xref:System.Web.UI.WebControls.LinqDataSource> control with [!INCLUDE[ss2k](~/includes/ss2k-md.md)] or [!INCLUDE[ssEW](~/includes/ssew-md.md)] and the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is set to `true`, you must provide a value in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="8a91b-463">既定では、<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-463">By default, the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is `true`.</span></span> <span data-ttu-id="8a91b-464">値を代入する場合、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティを含める必要もありますすべての identity 列は、クエリで返されるプロパティの一覧にします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-464">If you assign a value to the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, you must also include all identity columns in the list of properties that is returned in the query.</span></span>  
  
 <span data-ttu-id="8a91b-465">場合、<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>プロパティに設定されている`true`、データ バインド コントロールに並べ替え式を渡すことができます、<xref:System.Web.UI.WebControls.LinqDataSource>実行時に制御します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-465">If the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property is set to `true`, a data-bound control can pass a sort expression to the <xref:System.Web.UI.WebControls.LinqDataSource> control at run time.</span></span> <span data-ttu-id="8a91b-466"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、適用した後、データ バインド コントロールから、並べ替え式に適用されます、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-466">The <xref:System.Web.UI.WebControls.LinqDataSource> control will apply the sort expression from the data-bound control after it applies the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="8a91b-467">したがって、データは、データ バインド コントロールからは、並べ替え式に従って返されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-467">Therefore, the data is returned according to the sort expression from the data-bound control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-468">次の例では、データを返しますの値に基づいて順序を逆に、`Category`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-468">The following example returns data in reverse alphabetical order based on values in the `Category` property.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-469">Order By 句の作成に使用されるパラメーターのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-469">Gets the collection of parameters that are used to create the Order By clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-470">Order By 句の作成に使用されるパラメーター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-470">The parameters that are used for creating the Order By clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-471"><xref:System.Web.UI.WebControls.LinqDataSource>コントロール内のパラメーターを使用して、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>実行時に、Order By 句を作成するコレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-471">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection to create the Order By clause at run time.</span></span> <span data-ttu-id="8a91b-472">一般に設定する、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>プロパティを`true`へのパラメーターを追加すると、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-472">Typically you set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property to `true` when you add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="8a91b-473">ときに、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>プロパティに設定されている`true`、内の各パラメーター、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 、Order By 句に指定されている、シーケンス内にコレクションの要素を追加、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-473">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property is set to `true`, each parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection is added to the Order By clause in the sequence that they are specified in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="8a91b-474">ときに、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>プロパティは`true`パラメーターを順番に適用され、プレース ホルダーには一致していませんので名前を指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-474">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property is `true`, the parameters do not have to be named because they are applied in sequence and are not matched to a placeholder.</span></span>  
  
 <span data-ttu-id="8a91b-475">Order By 句での実行時に値を設定する必要はない場合は、使用する必要はありません、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-475">If you do not have to set a value at run time in the Order By clause, you do not have to use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="8a91b-476">内のデータの並べ替えに使用するフィールドを定義することができます、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-476">You can define the fields to use for ordering the data in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="8a91b-477">たとえば、データベース テーブルから値を返す順で`LastName`設定、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 「姓」パラメーターを使用せずにします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-477">For example, to return values from a database table ordered by `LastName`, set <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> to "LastName" without any parameters.</span></span>  
  
 <span data-ttu-id="8a91b-478">パラメーターを設定することができます、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>コレクション内のプレース ホルダーにパラメーターに一致して、<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティが、この方法が制限されているアプリケーション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-478">You can set parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection and match the parameters to placeholders in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property, but this approach has limited application.</span></span> <span data-ttu-id="8a91b-479">この方法では、パラメーターを使用すると、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>コレクションは、列名を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-479">When you use this approach, the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection cannot represent a column name.</span></span> <span data-ttu-id="8a91b-480">パラメーターの値に設定し、その値をプロパティに値を比較できます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-480">You can set a parameter to a value and then compare that value to values in a property.</span></span> <span data-ttu-id="8a91b-481">たとえば、プロパティの値は、パラメーターによって表される実行時の値より小さいかどうかに基づいてデータを注文できます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-481">For example, you can order the data based on whether the values in a property are less than the run-time value represented by the parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-482">次の例は、<xref:System.Web.UI.WebControls.LinqDataSource> プロパティが <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> に設定された `true` コントロールを示したものです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-482">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property set to `true`.</span></span> <span data-ttu-id="8a91b-483">パラメーターが含まれている、<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>から並べ替えプロパティに基づいてデータの名前をユーザー コレクションを選択、<xref:System.Web.UI.WebControls.DropDownList>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-483">A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-484">グループ化されたデータの並べ替えに使用するフィールドを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-484">Gets or sets the fields that are used for ordering grouped data.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-485">グループの Order By 句の作成に使用される文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-485">A string that is used to create the Order Groups By clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-486">使用する、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>プロパティ データのグループの並べ替え方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-486">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property to specify how the groups of data are sorted.</span></span> <span data-ttu-id="8a91b-487">たとえば、グループ化できます、`CategoryID`プロパティと各カテゴリ ID でグループの平均化し、並べ替え、`Price`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-487">For example, you can group by the `CategoryID` property and then sort each category ID group by the average of the `Price` property.</span></span>  
  
 <span data-ttu-id="8a91b-488">設定することができます、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>プロパティ データをグループ化されている場合にのみです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-488">You can set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property only when you have grouped the data.</span></span> <span data-ttu-id="8a91b-489">設定した場合、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>プロパティ設定を指定せず、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 、プロパティ、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-489">If you set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property without setting the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception.</span></span>  
  
 <span data-ttu-id="8a91b-490">データの並べ替えに使用されるプロパティは、データをグループに使用されるプロパティまたはグループ化されたデータの集計関数の結果のいずれかにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-490">The property that is used to sort the data must be either a property that is used to group the data, or the result of an aggregation function on the grouped data.</span></span> <span data-ttu-id="8a91b-491">データの並べ替え方法を指定することができますに追加する場所と、文字列"Ascending"、"ASC"、"Descending"または"DESC"のプロパティ名、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>文字列。</span><span class="sxs-lookup"><span data-stu-id="8a91b-491">To specify how the data is sorted, you can add a space and the string "Ascending", "ASC", "Descending", or "DESC" to a property name in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> string.</span></span>  
  
 <span data-ttu-id="8a91b-492">1 つ以上のプロパティを指定することができます、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-492">You can specify more than one property in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property.</span></span> <span data-ttu-id="8a91b-493">コンマを使用して、各プロパティを区切ります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-493">Separate each property by using a comma.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-494">次の例では、2 つのプロパティを使用してデータをグループ化方法とそれらのプロパティのいずれかを使用してグループ化されたデータを並べ替える方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-494">The following example shows how to group the data by using two properties, and how to sort the grouped data by using one of those properties.</span></span> <span data-ttu-id="8a91b-495">という名前のテーブルからデータを`Products`という名前のプロパティを使用して、グループ化`CategoryID`と`Discontinued`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-495">The data from a table named `Products` is grouped by using properties named `CategoryID` and `Discontinued`.</span></span> <span data-ttu-id="8a91b-496">グループ化されたデータを並べ替えて、`CategoryID`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-496">The grouped data is sorted by the `CategoryID` property.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 <span data-ttu-id="8a91b-497">次の例では、集計関数の結果に基づいてソートする方法と、プロパティを使用してデータをグループ化する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-497">The following example shows how to group the data by using a property, and how to sort it based on the results of an aggregation function.</span></span> <span data-ttu-id="8a91b-498">データ、`Products`を使用してテーブルがグループ化、`CategoryID`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-498">The data from the `Products` table is grouped by using the `CategoryID` property.</span></span> <span data-ttu-id="8a91b-499">平均値に基づいて並べ替えられますが、`UnitPrice`各グループ内のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-499">It is sorted based on the average of the `UnitPrice` property within each group.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-500">Order Groups By 句の作成に使用されるパラメーターのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-500">Gets the collection of parameters that are used to create the Order Groups By clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-501">グループの Order By 句の作成に使用されるパラメーター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-501">The parameters that are used to create the Order Groups By clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-502"><xref:System.Web.UI.WebControls.LinqDataSource>コントロール内のパラメーターを使用して、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>実行時に、グループの Order By 句を作成するコレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-502">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection to create the Order Groups By clause at run time.</span></span>  
  
 <span data-ttu-id="8a91b-503">値を追加する、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>コレクションは、グループの Order By 句の実行時に値を設定する必要がある時だけです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-503">You add values to the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection only when you must set values at run time in the Order Groups By clause.</span></span> <span data-ttu-id="8a91b-504">使用して、データの並べ替えに使用されるフィールドを定義することができます、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-504">You can define the fields that are used to order the data by using the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property.</span></span>  
  
 <span data-ttu-id="8a91b-505">パラメーターを設定することができます、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>コレクション内のプレース ホルダーにパラメーターに一致して、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-505">You can set parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection and match the parameters to placeholders in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property.</span></span> <span data-ttu-id="8a91b-506">ただし、この方法では、パラメーターを使用すると、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>コレクションは、列名を表すことはできません。 これらの値を表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-506">However, when you use this approach, the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection cannot represent a column name; they must represent values.</span></span> <span data-ttu-id="8a91b-507">パラメーターの値に設定し、その値をプロパティを比較できます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-507">You can set a parameter to a value and then compare that value to a property.</span></span> <span data-ttu-id="8a91b-508">たとえば、プロパティの値は、パラメーターによって表される実行時の値より小さいかどうかに基づいてデータを注文できます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-508">For example, you can order the data based on whether the values in a property are less than the run-time value represented by the parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-509">取得したデータに含まれるプロパティと計算値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-509">Gets or sets the properties and calculated values that are included in the retrieved data.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-510">Select 句の作成に使用される文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-510">A string that is used to create the Select clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-511">設定しない場合、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 、プロパティ、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、データ オブジェクトからすべてのプロパティ (データの列) を取得します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-511">If you do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves all the properties (data columns) from the data object.</span></span> <span data-ttu-id="8a91b-512">使用する、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティまたはオブジェクトからプロパティのサブセットを取得するデータを取得するときに、新しい値を計算します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-512">You use the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to retrieve a subset of properties from the object or to calculate new values when the data is being retrieved.</span></span>  
  
 <span data-ttu-id="8a91b-513">設定を取得するプロパティを指定する、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティによって返されるデータに追加するプロパティの名前をします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-513">You specify which properties to retrieve by setting the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to the names of the properties that you want to include in the returned data.</span></span>  
  
 <span data-ttu-id="8a91b-514">データ オブジェクトからプロパティのサブセットを取得する場合、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールで指定したプロパティのみを含むクラスを動的に作成する、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-514">If you retrieve a subset of properties from the data object, the <xref:System.Web.UI.WebControls.LinqDataSource> control dynamically creates a class that contains only the properties that you specify in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="8a91b-515">データ オブジェクトのプロパティではないプロパティを計算する場合は、クラスが動的に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-515">A class is also created dynamically if you calculate properties that are not properties in the data object.</span></span> <span data-ttu-id="8a91b-516">このような場合は、クエリから返されるオブジェクトはで指定されているクラスのインスタンス、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-516">In these cases, the object returned from the query is not an instance of the class that is specified in the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property.</span></span> <span data-ttu-id="8a91b-517">代わりに、使用する必要があります、`new`メソッドで、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>新しいクラスがクエリから返されたことを示すプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-517">Instead, you must use the `new` method in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to indicate that a new class is returned from the query.</span></span> <span data-ttu-id="8a91b-518">たとえば、のみを返す、`FirstName`と`LastName`プロパティを格納するオブジェクトから複数のこれらのプロパティを設定、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティを`new(FirstName, LastName)`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-518">For example, to return only the `FirstName` and `LastName` properties from an object that contains more than these properties, set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to `new(FirstName, LastName)`.</span></span> <span data-ttu-id="8a91b-519"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールで指定した新しいクラスを動的に作成、`new`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-519">The <xref:System.Web.UI.WebControls.LinqDataSource> control will dynamically create the new class that you specified in the `new` method.</span></span>  
  
 <span data-ttu-id="8a91b-520">使用することができます、`As`キーワードを選択した値にエイリアスを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-520">You can use the `As` keyword to assign an alias to a selected value.</span></span> <span data-ttu-id="8a91b-521">別名を割り当てた場合は、別名のプロパティを含める必要があります、`new`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-521">If you assign an alias, you must include the aliased properties in the `new` method.</span></span> <span data-ttu-id="8a91b-522">任意のデータ バインド コントロールからの結果にバインドする、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、別名でプロパティを参照する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-522">Any data-bound control that binds to the results from the <xref:System.Web.UI.WebControls.LinqDataSource> control must refer to the property by the alias.</span></span> <span data-ttu-id="8a91b-523">たとえば、設定した場合、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティを`new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`、データ バインド コントロールが 2 つのプロパティにアクセスできる`SalesRegion`と`RevenueThousands`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-523">For example, if you set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, the data-bound control can access two properties, `SalesRegion` and `RevenueThousands`.</span></span>  
  
 <span data-ttu-id="8a91b-524">使用する、`new`で機能、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>条件に従ってプロパティが次の表に一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-524">You use the `new` function in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property according to the conditions listed in the following table.</span></span>  
  
|<span data-ttu-id="8a91b-525">選択</span><span class="sxs-lookup"><span data-stu-id="8a91b-525">Select</span></span>|<span data-ttu-id="8a91b-526">新規のを使用します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-526">Use of new</span></span>|<span data-ttu-id="8a91b-527">例</span><span class="sxs-lookup"><span data-stu-id="8a91b-527">Example</span></span>|  
|------------|----------------|-------------|  
|<span data-ttu-id="8a91b-528">1 つのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-528">Single property.</span></span>|<span data-ttu-id="8a91b-529">`new` 必要ありません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-529">`new` not needed.</span></span>|`Select="Category"`|  
|<span data-ttu-id="8a91b-530">複数のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-530">Multiple properties.</span></span>|<span data-ttu-id="8a91b-531">`new` 必要です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-531">`new` needed.</span></span>|`Select="new(Cateogry, Name)"`|  
|<span data-ttu-id="8a91b-532">別名を持つ複数のプロパティまたは 1 です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-532">Single or multiple properties that have an alias.</span></span>|<span data-ttu-id="8a91b-533">`new` 必要です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-533">`new` needed.</span></span>|`Select="new(Category As CategoryGroup)"`|  
  
 <span data-ttu-id="8a91b-534">データの自動変更を有効にするデータ オブジェクトからのすべてのプロパティを表示したくない場合は設定しないでください、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-534">If you want to enable automatic data modifications, but you do not want to display all the properties from the data object, do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="8a91b-535">代わりに、管理、データ バインド コントロールを表示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-535">Instead, manage the display through the data-bound control.</span></span> <span data-ttu-id="8a91b-536">使用すると、<xref:System.Web.UI.WebControls.DetailsView>コントロールまたは<xref:System.Web.UI.WebControls.GridView>コントロールを設定する必要も、<xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>または<xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>プロパティを`false`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-536">When you use the <xref:System.Web.UI.WebControls.DetailsView> control or the <xref:System.Web.UI.WebControls.GridView> control, you must also set the <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> or the <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> property to `false`.</span></span> <span data-ttu-id="8a91b-537">データ バインド コントロールに表示されていない任意の値は、ビュー ステートに格納されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-537">Any values that are not displayed in the data-bound control are stored in view state.</span></span> <span data-ttu-id="8a91b-538">渡すことが変更されていないデータ ソース データ更新を実行するとします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-538">They are passed unchanged to the data source when the data update is performed.</span></span>  
  
 <span data-ttu-id="8a91b-539">集計のメソッドを含めることができます、クエリ内のデータをグループ化すると、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-539">When you group data in the query, you can include aggregate methods in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="8a91b-540">次の集計メソッドを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-540">You can use the following aggregate methods:</span></span>  
  
-   `Count()`  
  
-   <span data-ttu-id="8a91b-541">`Average(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="8a91b-541">`Average(` *column* `)`</span></span>  
  
-   <span data-ttu-id="8a91b-542">`Sum(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="8a91b-542">`Sum(` *column* `)`</span></span>  
  
-   <span data-ttu-id="8a91b-543">`Max(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="8a91b-543">`Max(` *column* `)`</span></span>  
  
-   <span data-ttu-id="8a91b-544">`Min(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="8a91b-544">`Min(` *column* `)`</span></span>  
  
-   <span data-ttu-id="8a91b-545">`Where(` *condition* `)`</span><span class="sxs-lookup"><span data-stu-id="8a91b-545">`Where(` *condition* `)`</span></span>  
  
-   `Any()`  
  
-   <span data-ttu-id="8a91b-546">`All(` *condition* `)`</span><span class="sxs-lookup"><span data-stu-id="8a91b-546">`All(` *condition* `)`</span></span>  
  
 <span data-ttu-id="8a91b-547">詳細については、次を参照してください。 [NIB: LinqDataSource Web サーバー コントロールの概要](http://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136)と[する方法: グループおよび LinqDataSource コントロールを使用してデータを集計](http://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af)です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-547">For more information, see [NIB: LinqDataSource Web Server Control Overview](http://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) and [How to: Group and Aggregate Data Using the LinqDataSource Control](http://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).</span></span>  
  
 <span data-ttu-id="8a91b-548">データをグループ化するときに含める`Key`と`It`が動的に作成されたプロパティで、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-548">When you group data, you can include `Key` and `It`, which are dynamically created properties, in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="8a91b-549">`Key`プロパティまたは複数のデータをグループ化に使用されたプロパティの値を参照します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-549">The `Key` property refers to the values in the property or properties that were used to group the data.</span></span> <span data-ttu-id="8a91b-550">たとえば、という名前のプロパティによってグループ化する場合`Category`、`Key`プロパティに一意の値ごとに格納されます、`Category`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-550">For example, if you group by a property named `Category`, the `Key` property will contain each unique value in the `Category` property.</span></span> <span data-ttu-id="8a91b-551">`It`プロパティはデータのグループ内の個々 のレコードのコレクションを参照します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-551">The `It` property refers to a collection of individual records in a grouping of data.</span></span> <span data-ttu-id="8a91b-552">反復処理することができます、`It`プロパティをグループ化操作に統合されている個々 のレコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-552">You can iterate over the `It` property to retrieve the individual records that have been consolidated in the grouping operation.</span></span> <span data-ttu-id="8a91b-553">たとえば、という名前のプロパティによってグループ化する場合`Category`、`It`プロパティにはで共通の値を共有するすべての個々 のレコードが含まれています、`Category`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-553">For example, if you group by a property named `Category`, the `It` property contains all the individual records that share a common value in the `Category` property.</span></span>  
  
 <span data-ttu-id="8a91b-554">含める場合は、`It`キーワード、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>データをグループ化すると、プロパティのエイリアスを割り当てる必要があります、`It`キーワード。</span><span class="sxs-lookup"><span data-stu-id="8a91b-554">If you include the `It` keyword in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property when you group data, you must assign an alias to the `It` keyword.</span></span> <span data-ttu-id="8a91b-555"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールは例外をスロー`It`エイリアスはありません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-555">The <xref:System.Web.UI.WebControls.LinqDataSource> control will throw an exception if `It` does not have an alias.</span></span> <span data-ttu-id="8a91b-556">エイリアスを割り当てることができます、`Key`キーワードが、これは必要ありません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-556">You can assign an alias to the `Key` keyword, but this is not required.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-557">次の例は、設定する方法を示します、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティのデータ オブジェクトのプロパティのサブセットをします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-557">The following example shows how to set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to a subset of properties in the data object.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 <span data-ttu-id="8a91b-558">次の例では、データをグループ化に使用されているプロパティの値を取得して、グループ化されたレコードの平均値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-558">The following example shows how to retrieve values in a property that has been used to group data, and to retrieve the average for the grouped records.</span></span> <span data-ttu-id="8a91b-559">`Key`キーワードには、データをグループ化するために使用されているプロパティが含まれています。</span><span class="sxs-lookup"><span data-stu-id="8a91b-559">The `Key` keyword contains the property that has been used for grouping data.</span></span> <span data-ttu-id="8a91b-560">この例では`Key`から共有の値を含む、`ProductCategory`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-560">In this example, `Key` will contain the shared values from the `ProductCategory` property.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-561">データ取得操作が終了したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-561">Occurs when a data retrieval operation has finished.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-562">処理、<xref:System.Web.UI.WebControls.LinqDataSource.Selected>データ取得操作から例外をキャッチする場合、または取得操作が完了した後、データ オブジェクトを検査するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-562">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Selected> event to catch any exceptions from the data retrieval operation or to examine the data object after the retrieval operation has finished.</span></span> <span data-ttu-id="8a91b-563">オブジェクトがから利用可能な<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>イベント ハンドラーに渡されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a91b-563">The object is available from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-564">データ取得操作の前に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-564">Occurs before a data-retrieval operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-565">処理、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>次のタスクを実行するためにイベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-565">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event in order to perform the following tasks:</span></span>  
  
-   <span data-ttu-id="8a91b-566">データの取得のパラメーターを変更します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-566">Modify parameters for data retrieval.</span></span>  
  
-   <span data-ttu-id="8a91b-567">プログラムでクエリを生成します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-567">Generate the query programmatically.</span></span>  
  
-   <span data-ttu-id="8a91b-568">並べ替えとページングの値を変更します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-568">Modify the values for sorting or paging.</span></span>  
  
-   <span data-ttu-id="8a91b-569">カスタムの並べ替えとページングを実行します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-569">Perform custom sorting or paging.</span></span>  
  
-   <span data-ttu-id="8a91b-570">データ取得操作をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-570">Cancel the data-retrieval operation.</span></span>  
  
 <span data-ttu-id="8a91b-571"><xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>このイベントには、データ取得操作のパラメーターが含まれており、イベント ハンドラーに渡されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a91b-571">The <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> object that is passed to event handlers for this event contains the parameters for the data-retrieval operation.</span></span> <span data-ttu-id="8a91b-572">内のパラメーターを変更することができます、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>クエリを実行または新しい結果セットを作成して割り当てるをする前に、イベント ハンドラー、<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-572">You can modify the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event handler before the query executes, or you can create a new result set and assign that to the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property.</span></span>  
  
 <span data-ttu-id="8a91b-573">カスタムの並べ替えまたはこのイベントは、コントロールにバインドされているによって制限される可能性がありますのハンドラーでページングを実装する機能、<xref:System.Web.UI.WebControls.LinqDataSource>です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-573">Your ability to implement custom sorting or paging in handlers for this event might be limited by the control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource>.</span></span> <span data-ttu-id="8a91b-574">たとえばの列見出し、<xref:System.Web.UI.WebControls.GridView>コントロールがクリックされると、コントロールが自動並べ替えする可能性がありますオーバーライドする任意の順序を確立、イベント ハンドラーを実行します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-574">For example, when the column header of a <xref:System.Web.UI.WebControls.GridView> control is clicked, the control performs automatic sorting which might override whatever order you establish in the event handler.</span></span>  
  
 <span data-ttu-id="8a91b-575">かどうかのイベント ハンドラーで例外がスローされます、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベント、そのイベント ハンドラーで例外を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-575">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="8a91b-576">例外は、のイベント ハンドラーに渡すことはできません、<xref:System.Web.UI.WebControls.LinqDataSource.Selected>イベント (を通じて、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>のプロパティ、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>オブジェクト)。</span><span class="sxs-lookup"><span data-stu-id="8a91b-576">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selected> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="8a91b-577"><xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティには、後にスローされた例外だけが含まれています、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-577">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-578">次の例は、イベント ハンドラーを<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-578">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="8a91b-579">ハンドラーは、Web ページ内の文字列値の配列から値を取得するクエリを作成します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-579">The handler creates a query that retrieves values from an array of string values in the Web page.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 <span data-ttu-id="8a91b-580">次の例を割り当てる方法を示しています、<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>をストアド プロシージャを表すメソッドから返されるオブジェクトのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-580">The following example shows how to assign the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property to the object that is returned from a method that represents a stored procedure.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-581">データ取得の操作中に使用されるパラメーターのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-581">Gets the collection of parameters that are used during a data-retrieval operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-582">Select 句の作成に使用されるパラメーター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-582">The parameters that are used to create the Select clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-583"><xref:System.Web.UI.WebControls.LinqDataSource>コントロール内のパラメーターを使用して、<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>実行時に、Select 句を作成するコレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-583">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection to create the Select clause at run time.</span></span> <span data-ttu-id="8a91b-584">パラメーターを追加する、 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> Select 句での実行時の値を使用するときのコレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-584">You add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection when you want to use run-time values in the Select clause.</span></span> <span data-ttu-id="8a91b-585">たとえばへのパラメーターを追加することができます、<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>ユーザーのプロファイルでは、プロパティを表すコレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-585">For example, you can add a parameter to the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection to represent a property in the user's profile.</span></span> <span data-ttu-id="8a91b-586">データ ソースから新しい値を計算するのに、そのプロパティと値を使用することができますし、します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-586">You can then use that property and a value from the data source to calculate a new value.</span></span>  
  
 <span data-ttu-id="8a91b-587">Select 句での実行時に値を設定する必要はない場合は、使用する必要はありません、<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-587">If you do not have to set a value at run time in the Select clause, you do not have to use the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection.</span></span> <span data-ttu-id="8a91b-588">取得するプロパティを定義することができます、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-588">You can define the properties to retrieve in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="8a91b-589">例については、返される、`FirstName`と`LastName`データベース テーブルから値を設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>"firstname、LastName"パラメーターを使用せずします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-589">For example, to return the `FirstName` and `LastName` values from a database table, set <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> to "FirstName, LastName" without any parameters.</span></span>  
  
 <span data-ttu-id="8a91b-590">値を設定する、 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 、コレクション内のプレース ホルダーを追加する、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>名前付きパラメーターのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-590">To set values in the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection, you add a placeholder in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property for the named parameter.</span></span> <span data-ttu-id="8a91b-591">各パラメーター名をはじめ、Select 句で、@ 記号。</span><span class="sxs-lookup"><span data-stu-id="8a91b-591">In the Select clause, preface each parameter name with the @ symbol.</span></span>  
  
 <span data-ttu-id="8a91b-592">内のパラメーターを使用することはできません、<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>プロパティ名を表すコレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-592">You cannot use a parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection to represent a property name.</span></span> <span data-ttu-id="8a91b-593">動的に設定する、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティ、プロパティの名前をイベント ハンドラーを作成する、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベントとカスタマイズ、<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティに応じて。</span><span class="sxs-lookup"><span data-stu-id="8a91b-593">To dynamically set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to the name of a property, create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event and customize the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property as needed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-594">次の例では、ユーザー指定の値を使用して、返されるデータの値を計算する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-594">The following example shows how to use a user-supplied value to calculate a value in the returned data.</span></span> <span data-ttu-id="8a91b-595">ユーザーは、製造日の数を表すテキスト ボックスに値を入力することができます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-595">The user can enter a value in the text box that represents the number of manufacturing days.</span></span> <span data-ttu-id="8a91b-596">その値は、製品の製造に日数を表すデータベースからの値で除算されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-596">That value is divided by a value from a database that represents the number of days to manufacture a product.</span></span> <span data-ttu-id="8a91b-597">返される値では、指定した日数で製造可能な製品の数を示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-597">The returned value indicates how many products can be manufactured during the specified number of days.</span></span> <span data-ttu-id="8a91b-598">ユーザーの入力をを通じて Select コマンドに含まれる、<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-598">The user's input is included in the Select command through the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-599">データ ソースから取得するデータをビューステートに保存して、そのデータが更新または削除される前に別のプロセスによって変更されていないことを確認する値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-599">Gets or sets a value that indicates whether the data from the data source should be stored in view state to make sure that the data has not been changed by another process before it is updated or deleted.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-600">値をビューステートに保存する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-600">
              <see langword="true" /> if the values will be stored in view state; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8a91b-601">既定値は <see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-601">The default value is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-602">既定では、ときに更新および削除操作を有効になっている、<xref:System.Web.UI.WebControls.LinqDataSource>ビューステートへのすべてのレコードのコントロールが元の値を格納します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-602">By default, when update and delete operations have been enabled, the <xref:System.Web.UI.WebControls.LinqDataSource> control stores the original values for all the records in view state.</span></span> <span data-ttu-id="8a91b-603"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールがすべてのプライマリ キーの値を格納し、すべてのプロパティでマークされていない`UpdateCheck.Never`で、`Column`属性。</span><span class="sxs-lookup"><span data-stu-id="8a91b-603">The <xref:System.Web.UI.WebControls.LinqDataSource> control stores values for all primary keys and all properties not marked with `UpdateCheck.Never` in the `Column` attribute.</span></span> <span data-ttu-id="8a91b-604">設定する、`UpdateCheck`のプロパティ、`Column`属性、[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-604">You set the `UpdateCheck` property of the `Column` attribute in the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].</span></span>  
  
 <span data-ttu-id="8a91b-605">LINQ to SQL を更新またはデータの削除、前に、データ ソース内の現在の値と比較をビュー ステートの値を確認します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-605">Before LINQ to SQL updates or deletes data, it checks the values in view state against the current values in the data source.</span></span> <span data-ttu-id="8a91b-606">値が一致しない場合、データ ソースのレコードが変更されました。</span><span class="sxs-lookup"><span data-stu-id="8a91b-606">If the values do not match, the data source record has changed.</span></span> <span data-ttu-id="8a91b-607">その場合は、LINQ to SQL 例外をスローしは更新を続行または削除しない操作します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-607">In that case, LINQ to SQL throws an exception and does not continue with the update or delete operation.</span></span> <span data-ttu-id="8a91b-608">LINQ to SQL の詳細については、次を参照してください。 [LINQ to SQL](http://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655)です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-608">For more information about LINQ to SQL, see [LINQ to SQL](http://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).</span></span>  
  
 <span data-ttu-id="8a91b-609">ビュー内の元の値を格納する状態は、ページ サイズが不必要に大きくなる可能性があり、悪意のあるユーザーに機密データを公開できます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-609">Storing the original values in view state can cause the page size to become unnecessarily large and can expose sensitive data to a malicious user.</span></span> <span data-ttu-id="8a91b-610">設定して値をビュー ステートを格納する無効にすることができます、<xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A>プロパティを`false`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-610">You can disable storing values in view state by setting the <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> property to `false`.</span></span> <span data-ttu-id="8a91b-611">これを行う場合は、データが変更されていないかどうかを確認する、独自の方法を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-611">If you do this, you must provide your own way to make sure that the data has not changed.</span></span> <span data-ttu-id="8a91b-612">設定した場合、<xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A>プロパティを`false`、元の値は、データ バインド コントロールのビュー ステートに残りません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-612">If you set the <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> property to `false`, the original values are not persisted in view state for the data-bound control.</span></span> <span data-ttu-id="8a91b-613">その場合は、LINQ to SQL では、データの整合性を確認できません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-613">In that case, LINQ to SQL cannot verify the integrity of the data.</span></span> <span data-ttu-id="8a91b-614">LINQ to SQL をデータ ソース内のデータが実際に変更されていない場合でも、データの競合を示す例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-614">LINQ to SQL will throw an exception that indicates a data conflict even if the data in the data source has not actually changed.</span></span>  
  
 <span data-ttu-id="8a91b-615">基になるデータ ソースが更新中に自動的に更新されるタイムスタンプ フィールドが含まれている場合は、ビュー ステートにその値だけを格納できます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-615">If the underlying data source contains a timestamp field that is automatically updated during an update, you can store only that value in view state.</span></span> <span data-ttu-id="8a91b-616">エンティティ クラスでタイムスタンプ プロパティに設定する場合は、`IsVersion=true`とすべてのプロパティに設定`UpdateCheck.Never`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-616">In that case, the timestamp property in the entity class is set to `IsVersion=true` and all the properties are set to `UpdateCheck.Never`.</span></span> <span data-ttu-id="8a91b-617">タイムスタンプ フィールドは、そのレコード内のデータが変更されるたびに、データベースによって自動的に更新、ために、LINQ to SQL は、データが変更された場合は、その値から決定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-617">Because a timestamp field is automatically updated by the database every time that data in that record changes, LINQ to SQL determines from that value if data has changed.</span></span> <span data-ttu-id="8a91b-618">これにより、ビュー状態のサイズを削減し、公開されている機密データがありません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-618">This helps reduce the size of view state, and no sensitive data is exposed.</span></span> <span data-ttu-id="8a91b-619">LINQ to SQL はチェック、データの整合性ビュー内のタイムスタンプ値を比較することによって、データベース内のタイムスタンプ値と状態。</span><span class="sxs-lookup"><span data-stu-id="8a91b-619">LINQ to SQL will check for data consistency by comparing the timestamp value in view state with the timestamp value in the database.</span></span> <span data-ttu-id="8a91b-620">詳細については、次を参照してください。[チュートリアル: データの整合性を確認する LinqDataSource コントロールにタイムスタンプを使用して](http://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa)です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-620">For more information, see [Walkthrough: Using a Timestamp with the LinqDataSource Control to Check Data Integrity](http://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System.Web.DynamicData.IDynamicDataSource.ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-621">このメンバーの詳細については、「<see cref="T:System.Web.DynamicData.IDynamicDataSource" />」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-621">For a description of this member, see <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-622">クラスに関連付けられている型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-622">The type that is associated with the class.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-623">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-623">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8a91b-624">これは、<xref:System.Web.UI.WebControls.LinqDataSource> のインスタンスが <xref:System.Web.DynamicData.IDynamicDataSource> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-624">It can be used only when the <xref:System.Web.UI.WebControls.LinqDataSource> instance is cast to an <xref:System.Web.DynamicData.IDynamicDataSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System.Web.DynamicData.IDynamicDataSource.EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-625">このメンバーの詳細については、「<see cref="T:System.Web.DynamicData.IDynamicDataSource" />」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-625">For a description of this member, see <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-626">エンティティの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-626">The name of the entity.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-627">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-627">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8a91b-628">これは、<xref:System.Web.UI.WebControls.LinqDataSource> のインスタンスが <xref:System.Web.DynamicData.IDynamicDataSource> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-628">It can be used only when the <xref:System.Web.UI.WebControls.LinqDataSource> instance is cast to an <xref:System.Web.DynamicData.IDynamicDataSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-629">データ コンテキスト クラス内でデータ コレクションを表すプロパティまたはフィールドの名前を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-629">Gets or sets the name of the property or field in the data context class that represents a data collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-630">データ コレクションを含むプロパティの名前を示す文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-630">A string that contains the name of the property that contains the data collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-631">設定、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティのプロパティまたはフィールドを取得するデータを表す名前にします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-631">Set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the name of the property or field that represents the data that you want to retrieve.</span></span> <span data-ttu-id="8a91b-632">データベース テーブルに接続するときに、プロパティの名前は通常、テーブルの名前と同じです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-632">When you are connecting to a database table, the name of the property is usually the same as the name of the table.</span></span> <span data-ttu-id="8a91b-633">メモリ内のデータ コレクションに接続するときの設定、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティをプロパティやデータ コレクションを返すフィールドの名前にします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-633">When you are connecting to an in-memory data collection, set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the name of the property or field that returns the data collection.</span></span>  
  
 <span data-ttu-id="8a91b-634">任意の種類を返すプロパティを割り当てることができます、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>取得操作のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-634">You can assign a property that returns any type to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property for retrieval operations.</span></span> <span data-ttu-id="8a91b-635">プロパティによって表されるオブジェクトを実装しないかどうか<xref:System.Collections.IEnumerable>、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールがのインスタンスでオブジェクトを自動的に折り返されます、<xref:System.Collections.IEnumerable>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a91b-635">If the object that is represented by the property does not implement <xref:System.Collections.IEnumerable>, the <xref:System.Web.UI.WebControls.LinqDataSource> control will automatically wrap the object in an instance of an <xref:System.Collections.IEnumerable> object.</span></span>  
  
 <span data-ttu-id="8a91b-636">自動更新を有効にするのには、挿入、または削除の各操作に割り当てられているクラス、<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティがから派生する必要があります<xref:System.Data.Linq.DataContext>とプロパティに割り当てられている、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティから派生しなければなりません<xref:System.Data.Linq.Table%601>です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-636">To enable automatic update, insert, or delete operations, the class that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property must derive from <xref:System.Data.Linq.DataContext> and the property that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property must derive from <xref:System.Data.Linq.Table%601>.</span></span>  
  
 <span data-ttu-id="8a91b-637">クラスのインスタンスからデータを選択する方法については、次を参照してください。、<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-637">For information about how to select data from an instance of a class, see the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-638">次の例は 2 つ<xref:System.Web.UI.WebControls.LinqDataSource>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-638">The following example shows two <xref:System.Web.UI.WebControls.LinqDataSource> controls.</span></span> <span data-ttu-id="8a91b-639">いずれかで<xref:System.Web.UI.WebControls.LinqDataSource>コントロール、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティがクラスでプロパティに設定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-639">In one <xref:System.Web.UI.WebControls.LinqDataSource> control, the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property is set to a property in a class.</span></span> <span data-ttu-id="8a91b-640">そのプロパティは、文字列の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-640">That property returns an array of strings.</span></span> <span data-ttu-id="8a91b-641">もう一方の<xref:System.Web.UI.WebControls.LinqDataSource>コントロール、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティは、データベース テーブルを表すプロパティに設定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-641">In the other <xref:System.Web.UI.WebControls.LinqDataSource> control, the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property is set to a property that represents a database table.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 <span data-ttu-id="8a91b-642">という名前のクラス`ExampleDataContext`を表すデータベース テーブルが表示されないようにこの例ではします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-642">The class named `ExampleDataContext` that represents the database table is not shown in this example.</span></span> <span data-ttu-id="8a91b-643">この例を実行するは、名前付き Example.dbml テーブルをドラッグしては、上にムービーをという名前の SQL クラスを LINQ を追加することでこのクラスを作成する必要があります、[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-643">For this example to work, you must create this class by adding a LINQ to SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].</span></span> <span data-ttu-id="8a91b-644">という名前のクラス`ExampleDataContext`という名前のプロパティと`Movies`が生成されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-644">A class named `ExampleDataContext` with a property named `Movies` is generated.</span></span>  
  
 <span data-ttu-id="8a91b-645">次の例は、という名前のクラスを示しています。`MovieLibrary`で参照されている、<xref:System.Web.UI.WebControls.LinqDataSource>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-645">The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">
          <span data-ttu-id="8a91b-646">更新するレコードの行のキー値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-646">The row key values for the records to be updated.</span>
          </span>
        </param>
        <param name="values">
          <span data-ttu-id="8a91b-647">データ ソース内で更新する行の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-647">The row values to be updated in the data source.</span>
          </span>
        </param>
        <param name="oldValues">
          <span data-ttu-id="8a91b-648">データの競合を検出するために評価される行の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-648">The row values that are evaluated to detect data conflicts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a91b-649">更新の操作を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-649">Performs an update operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a91b-650">更新操作によって影響を受けたレコードの数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-650">The number of records affected by the update operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-651">通常がありませんを呼び出して、<xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>コードからメソッドです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-651">Typically, you do not have to call the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method from your code.</span></span> <span data-ttu-id="8a91b-652">データ バインド コントロールが自動的に呼び出す、<xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>メソッドは、ユーザーがレコードを更新する操作とします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-652">The data-bound control will automatically call the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method when the user takes action to update a record.</span></span> <span data-ttu-id="8a91b-653">明示的に呼び出す、<xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>メソッド データを更新するための独自のプロセスを作成するときにします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-653">You explicitly call the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method when you want to create your own process for updating data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-654">次の例では、プログラムによって、ユーザーがボタンをクリックした後、データ ソース内のレコードを更新する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-654">The following example shows how to programmatically update a record in the data source after the user clicks a button.</span></span> <span data-ttu-id="8a91b-655">コードを渡します、<xref:System.Collections.Specialized.ListDictionary>キーの値を格納しているオブジェクト、 <xref:System.Collections.Specialized.ListDictionary> 、元の値を格納しているオブジェクトと<xref:System.Collections.Specialized.ListDictionary>に新しい値を格納しているオブジェクト、<xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-655">The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains the key value, a <xref:System.Collections.Specialized.ListDictionary> object that contains the original values, and a <xref:System.Collections.Specialized.ListDictionary> object that contains the new values to the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 <span data-ttu-id="8a91b-656">次の例では、前の例のマークアップを示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-656">The following example shows the markup for the previous example.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-657">更新操作が終了したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-657">Occurs when an update operation has finished.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-658">処理、<xref:System.Web.UI.WebControls.LinqDataSource.Updated>更新操作が完了した後、更新操作から例外をキャッチする、またはの値を調べ、イベント出力パラメーターです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-658">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Updated> event to catch any exceptions from the update operation or to examine the values of output parameters after the update operation has finished.</span></span> <span data-ttu-id="8a91b-659">出力パラメーターは、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>イベント ハンドラーに渡されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a91b-659">The output parameters are available from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-660">このコレクションは、<see cref="T:System.Web.UI.WebControls.LinqDataSource" /> クラスでは使用されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-660">This collection is not used by the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> class.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-661">パラメーターのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-661">A collection of parameters.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-662">更新操作の前に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-662">Occurs before an update operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-663">処理、<xref:System.Web.UI.WebControls.LinqDataSource.Updating>を更新する、更新操作の前に値を変更するか、更新操作をキャンセルするデータ クラスからのデータの検証エラーを検査するオブジェクトを検証するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-663">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event to validate the object to be updated, to examine data validation errors from the data class, to change a value before the update operation, or to cancel the update operation.</span></span> <span data-ttu-id="8a91b-664"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>イベント ハンドラーに渡されるオブジェクトには、元のオブジェクトと更新されたオブジェクトの両方が含まれています。</span><span class="sxs-lookup"><span data-stu-id="8a91b-664">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object that is passed to event handlers contains both the original object and the updated object.</span></span>  
  
 <span data-ttu-id="8a91b-665">更新操作中に検証エラーが発生した場合、<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>オブジェクトには、データ クラスによってスローされる検証例外が含まれています。</span><span class="sxs-lookup"><span data-stu-id="8a91b-665">If a validation error occurs during the update operation, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains the validation exceptions that are thrown by the data class.</span></span> <span data-ttu-id="8a91b-666">検証エラーは、値を更新するデータ クラスでプロパティの型に一致しない場合、またはカスタムの検証チェックに合格していない場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-666">A validation error occurs if a value to be updated does not match the type of the property in the data class, or if it does not pass a custom validation check.</span></span> <span data-ttu-id="8a91b-667">イベント ハンドラーで、<xref:System.Web.UI.WebControls.LinqDataSource.Updating>イベント、検証の例外を取得して、適切なアクションを実行することができます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-667">In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you can retrieve the validation exceptions and take appropriate action.</span></span>  
  
 <span data-ttu-id="8a91b-668">かどうかのイベント ハンドラーで例外がスローされます、<xref:System.Web.UI.WebControls.LinqDataSource.Updating>イベント、そのイベント ハンドラーで例外を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-668">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="8a91b-669">例外は、のイベント ハンドラーに渡すことはできません、<xref:System.Web.UI.WebControls.LinqDataSource.Updated>イベント (を通じて、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>のプロパティ、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>オブジェクト)。</span><span class="sxs-lookup"><span data-stu-id="8a91b-669">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updated> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="8a91b-670"><xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティには、後にスローされた例外だけが含まれています、<xref:System.Web.UI.WebControls.LinqDataSource.Updating>イベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-670">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-671">次の例は、イベント ハンドラーを<xref:System.Web.UI.WebControls.LinqDataSource.Updating>イベント。</span><span class="sxs-lookup"><span data-stu-id="8a91b-671">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="8a91b-672">コードからプロパティを比較し、<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A>プロパティおよび<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>プロパティに値が変更されたかどうかを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8a91b-672">The code compares properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to see whether a value has changed.</span></span> <span data-ttu-id="8a91b-673">値が変更すると、値の場合、<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>プロパティに設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-673">If the value has changed, a value of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 <span data-ttu-id="8a91b-674">次の例は、イベント ハンドラーを<xref:System.Web.UI.WebControls.LinqDataSource.Updating>検証例外を取得するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-674">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event that retrieves validation exceptions.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 <span data-ttu-id="8a91b-675">前の例では、検証の例外を取得します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-675">The previous example retrieves validation exceptions.</span></span> <span data-ttu-id="8a91b-676">値がプロパティの型と一致しない場合、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-676">An exception might be thrown if a value does not match the type of the property.</span></span> <span data-ttu-id="8a91b-677">次の例のようなカスタマイズされたチェックからもスロー可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-677">It might also be thrown from a customized check such as the one in the following example.</span></span> <span data-ttu-id="8a91b-678">`OnAgeChanging`メソッドでは、ことを確認の数、`Age`プロパティは負の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="8a91b-678">The `OnAgeChanging` method checks that the number for the `Age` property is not negative.</span></span>  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-679">取得されるデータにレコードを含めるかどうかを決める条件を示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-679">Gets or sets a value that specifies what conditions must be true for a record to be included in the retrieved data.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-680">Where 句の作成に使用される文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-680">A string that is used to create the Where clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-681">使用する、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティをクエリから返されるレコードの条件を指定します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-681">You use the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to specify the conditions for the record to be returned from a query.</span></span> <span data-ttu-id="8a91b-682">構文、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティは、c# での LINQ Where 句の構文と同じです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-682">The syntax for the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is the same as the syntax for a LINQ Where clause in C#.</span></span>  
  
 <span data-ttu-id="8a91b-683">ブール値に評価される式を指定するに式が評価されると`true`特定の行の行が結果セットに含まれます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-683">You specify an expression that results in a Boolean value, and if the expression evaluates to `true` for a given row, the row is included in the result set.</span></span> <span data-ttu-id="8a91b-684">式は、次の例のようにと比較するには、列名、比較演算子、および値から構成されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-684">Expressions are composed of column names, comparison operators, and values to compare to, as shown in the following example:</span></span>  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 <span data-ttu-id="8a91b-685">論理によってリンクされている複数の式を指定する`AND`または`OR`演算子を使用する`&&`論理 AND 演算子としてと`||`として次の例で示すように、論理 OR 演算子。</span><span class="sxs-lookup"><span data-stu-id="8a91b-685">To specify multiple expressions linked by logical `AND` or `OR` operators, you use `&&` as a logical AND operator and `||` as a logical OR operator, as shown in the following example:</span></span>  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 <span data-ttu-id="8a91b-686">リテラル文字列の値に対してプロパティをテストする場合は、リテラル文字列値を二重引用符で囲む必要があります。</span><span class="sxs-lookup"><span data-stu-id="8a91b-686">If you want to test a property against a literal string value, the literal string value must be enclosed in double quotation marks.</span></span> <span data-ttu-id="8a91b-687">これを行うマークアップで、囲む、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>句の値を次の例で示すように、単一引用符で。</span><span class="sxs-lookup"><span data-stu-id="8a91b-687">To do this in markup, enclose the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> clause value in single quotation marks, as shown in the following example:</span></span>  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 <span data-ttu-id="8a91b-688">コード内のリテラル文字列値をテストするには、次の例で示すように、二重引用符を挿入するために使用する言語を適切なエスケープ文字を使用します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-688">To test against a literal string value in code, use escape characters that are appropriate to the language you are using in order to insert double quotation marks, as shown in the following example:</span></span>  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 <span data-ttu-id="8a91b-689">文字列がより大きいか別の文字列よりも小さいかどうかをテストする場合は、メソッドを使用する必要があります、<xref:System.String>クラスを使用せずに`<`または`>`列名と文字列値間の演算子。</span><span class="sxs-lookup"><span data-stu-id="8a91b-689">If you want to test whether a string is greater than or less than another string, you must use methods of the <xref:System.String> class instead of using `<` or `>` operators between the column name and the string value.</span></span> <span data-ttu-id="8a91b-690">次の例より大きい、またはより大きい「スポーツ」と等しいより小さいより小さいか等しい、カテゴリ値を持つ行を選択する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-690">The following examples show how to select rows that have Category values that are less than, less than or equal to, greater than, or greater than or equal to "Sports":</span></span>  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 <span data-ttu-id="8a91b-691">他のメソッドを使用することも、<xref:System.String>クラスなど<xref:System.String.StartsWith%2A>、 <xref:System.String.EndsWith%2A>、および<xref:System.String.Contains%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-691">You can also use other methods of the <xref:System.String> class, such as <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.Contains%2A>.</span></span> <span data-ttu-id="8a91b-692">文字列を比較する方法の詳細については、次を参照してください。[文字列の比較](~/docs/standard/base-types/comparing.md)です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-692">For more information about how to compare strings, see [Comparing Strings](~/docs/standard/base-types/comparing.md).</span></span> <span data-ttu-id="8a91b-693">場所の詳細については句の構文を参照してください[c# 演算子](http://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43)と[場所句](~/docs/csharp/language-reference/keywords/where-clause.md)です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-693">For more information about Where clause syntax, see [C# Operators](http://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43) and [where clause](~/docs/csharp/language-reference/keywords/where-clause.md).</span></span>  
  
 <span data-ttu-id="8a91b-694">Web ページを作成する場合に定義する静的な値に基づくフィルター処理、だけでなく実行時に評価されるに基づいて動的な値をフィルター処理できます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-694">In addition to filtering based on static values that you define when you create the Web page, you can filter based on dynamic values that are evaluated at run time.</span></span> <span data-ttu-id="8a91b-695">名前付きパラメーターを含める場合は、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティ値のプレース ホルダーとして機能します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-695">In that case, you include a named parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property that acts as a placeholder for the value.</span></span> <span data-ttu-id="8a91b-696">一致する名前を持つパラメーターを追加、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-696">You then add a parameter that has the matching name to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span>  
  
 <span data-ttu-id="8a91b-697">また、設定することができます、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>プロパティを`true`でパラメーターを定義し、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-697">Alternatively, you can set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` and define the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="8a91b-698">ときに、<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>プロパティは`true`で名前付きパラメーターを含める必要はありません、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-698">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, you do not have to include the named parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property.</span></span> <span data-ttu-id="8a91b-699">代わりに、<xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、Where を自動的に生成句内のパラメーターから、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-699">Instead, the <xref:System.Web.UI.WebControls.LinqDataSource> control automatically generates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> property.</span></span>  
  
 <span data-ttu-id="8a91b-700">データをフィルター処理方法の詳細については、次を参照してください。[チュートリアル: を選択すると、LinqDataSource GridView コントロールとデータのサブセットをフィルター処理](http://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)です。</span><span class="sxs-lookup"><span data-stu-id="8a91b-700">For more information about how to filter data, see [Walkthrough: Selecting and Filtering a Subset of Data with the LinqDataSource and GridView Controls](http://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-701">次の例では、静的な条件に基づくクエリから返されたデータをフィルター処理する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-701">The following example shows how to filter the data returned from a query based on a static condition.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 <span data-ttu-id="8a91b-702">次の例では、実行時にユーザーによって提供される値に基づいてデータをフィルター処理する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-702">The following example shows how to filter the data based on a value that is provided by the user at run time.</span></span> <span data-ttu-id="8a91b-703">この例では、<xref:System.Web.UI.WebControls.DropDownList>コントロールと<xref:System.Web.UI.WebControls.GridView>コントロールがページに表示されます。</span><span class="sxs-lookup"><span data-stu-id="8a91b-703">In this example a <xref:System.Web.UI.WebControls.DropDownList> control and a <xref:System.Web.UI.WebControls.GridView> control are displayed on the page.</span></span> <span data-ttu-id="8a91b-704">ユーザーが内の値の 1 つを選択するときに、<xref:System.Web.UI.WebControls.DropDownList>コントロール、<xref:System.Web.UI.WebControls.LinqDataSource>からコントロールを選択、`Products`テーブルを持つ行のみ`UserPrice`値を選択した値にします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-704">When the user selects one of the values in the <xref:System.Web.UI.WebControls.DropDownList> control, the <xref:System.Web.UI.WebControls.LinqDataSource> control selects from the `Products` table only rows that have `UserPrice` values equal to the selected value.</span></span> <span data-ttu-id="8a91b-705"><xref:System.Web.UI.WebControls.GridView>コントロールは、フィルター選択されたデータを表示します。</span><span class="sxs-lookup"><span data-stu-id="8a91b-705">The <xref:System.Web.UI.WebControls.GridView> control then displays the filtered data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a91b-706">Where 句の作成に使用されるパラメーターのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-706">Gets the collection of parameters that is used to create the Where clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a91b-707">Where 句を作成するために使用される、<see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" /> プロパティのパラメーターのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a91b-707">A collection of the parameters that are used to create the Where clause in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" /> property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a91b-708"><xref:System.Web.UI.WebControls.LinqDataSource>コントロール内のパラメーターを使用して、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Where を作成するコレクション実行時の句。</span><span class="sxs-lookup"><span data-stu-id="8a91b-708">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection to create the Where clause at run time.</span></span> <span data-ttu-id="8a91b-709">パラメーターを追加する、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>をプログラムで、Where 句で 1 つまたは複数の条件を設定する場合に、コレクション句。</span><span class="sxs-lookup"><span data-stu-id="8a91b-709">You add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection when you want to programmatically set one or more of the conditions in the Where clause.</span></span> <span data-ttu-id="8a91b-710">たとえば、姓の値と等しい、レコードをデータベース テーブルを検索する場合があります、<xref:System.Web.UI.WebControls.TextBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-710">For example, you might search a database table for records with a last name equal to the value of a <xref:System.Web.UI.WebControls.TextBox> control.</span></span> <span data-ttu-id="8a91b-711">パラメーターを追加する場合は、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>テキスト ボックスの値のコレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-711">In that case, you add a parameter to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection for the text box value.</span></span>  
  
 <span data-ttu-id="8a91b-712">Where 句で、実行時に値を設定する必要はない場合、句がありませんを使用する、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="8a91b-712">If you do not have to set a value at run time in the Where clause, you do not have to use the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="8a91b-713">取得するフィールドを定義することができます、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-713">You can define the fields to retrieve in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property.</span></span> <span data-ttu-id="8a91b-714">例については、データベース テーブルから値を返す場所`LastName`equals"Adams"マークアップでは、設定、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティを`'LastName = "Adams"'`パラメーターを使用せずします。</span><span class="sxs-lookup"><span data-stu-id="8a91b-714">For example, to return values from a database table where `LastName` equals "Adams" in markup, set the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to `'LastName = "Adams"'` without any parameters.</span></span>  
  
 <span data-ttu-id="8a91b-715">値を設定する、<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクション、各パラメーターに名前を割り当てるし、追加するにプレース ホルダー、<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>そのパラメーターのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a91b-715">To set values in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection, you assign a name to each parameter and then add a placeholder in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property for that parameter.</span></span> <span data-ttu-id="8a91b-716">Where 句で各パラメーターの名前を付けます、@ 記号。</span><span class="sxs-lookup"><span data-stu-id="8a91b-716">In the Where clause, preface each parameter name with the @ symbol.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a91b-717">次の例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Where を動的に作成するコレクション句。</span><span class="sxs-lookup"><span data-stu-id="8a91b-717">The following example shows how to use the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection to dynamically create the Where clause.</span></span> <span data-ttu-id="8a91b-718"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールで値を持つすべてのレコードが返されます、`Price`でユーザーが選択されている値よりも大きい列、<xref:System.Web.UI.WebControls.DropDownList>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8a91b-718">The <xref:System.Web.UI.WebControls.LinqDataSource> control returns all the records with a value in the `Price` column that is greater than the value selected by the user in a <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>