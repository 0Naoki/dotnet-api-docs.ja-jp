<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9d46e6e7f74ff3dad0ce22397441b4b8aebb8984" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70496208" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit ContextDataSource&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.5">System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ContextTypeName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", System.ComponentModel.ToolboxItemFilterType.Require)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.ico")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9e4a9-101">ASP.NET Web ページでマークアップ テキストを通じて統合言語クエリ (LINQ) を使用し、データ オブジェクトのデータを取得したり変更したりできるようにします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-101">Enables the use of Language-Integrated Query (LINQ) in an ASP.NET Web page through markup text to retrieve and modify data from a data object.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-102">このトピックの内容:</span><span class="sxs-lookup"><span data-stu-id="9e4a9-102">In this topic:</span></span>  
  
-   [<span data-ttu-id="9e4a9-103">はじめに</span><span class="sxs-lookup"><span data-stu-id="9e4a9-103">Introduction</span></span>](#introduction)  
  
-   [<span data-ttu-id="9e4a9-104">操作の順序</span><span class="sxs-lookup"><span data-stu-id="9e4a9-104">Order of Operations</span></span>](#order_of_operations)  
  
-   [<span data-ttu-id="9e4a9-105">データの順序付け</span><span class="sxs-lookup"><span data-stu-id="9e4a9-105">Ordering Data</span></span>](#ordering_data)  
  
-   [<span data-ttu-id="9e4a9-106">データのグループ化</span><span class="sxs-lookup"><span data-stu-id="9e4a9-106">Grouping Data</span></span>](#grouping_data)  
  
-   [<span data-ttu-id="9e4a9-107">データの変更</span><span class="sxs-lookup"><span data-stu-id="9e4a9-107">Data Modifications</span></span>](#data_modifications)  
  
-   [<span data-ttu-id="9e4a9-108">実行時の値の評価</span><span class="sxs-lookup"><span data-stu-id="9e4a9-108">Evaluating Values at Run Time</span></span>](#evaluating_value_at_run_time)  
  
-   [<span data-ttu-id="9e4a9-109">ストアドプロシージャの操作</span><span class="sxs-lookup"><span data-stu-id="9e4a9-109">Working with Stored Procedures</span></span>](#working_with_stored_procedures)  
  
-   [<span data-ttu-id="9e4a9-110">宣言型の構文</span><span class="sxs-lookup"><span data-stu-id="9e4a9-110">Declarative Syntax</span></span>](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a><span data-ttu-id="9e4a9-111">はじめに</span><span class="sxs-lookup"><span data-stu-id="9e4a9-111">Introduction</span></span>  
 <span data-ttu-id="9e4a9-112">統合言語クエリ (LINQ) は、走査、フィルター、および射影操作を任意のの宣言型の方法で表現できるようにする一連のクエリ演算子を定義するクエリ構文です。NET ベースのプログラミング言語。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-112">Language-Integrated Query (LINQ) is a query syntax that defines a set of query operators that enable traversal, filter, and projection operations to be expressed in a declarative way in any .NET-based programming language.</span></span> <span data-ttu-id="9e4a9-113">データオブジェクトには、メモリ内のデータコレクションまたはデータベースのデータを表すオブジェクトを指定できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-113">The data object can be an in-memory data collection or an object that represents data from a database.</span></span> <span data-ttu-id="9e4a9-114">各操作の SQL コマンドを記述しなくても、データを取得または変更できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-114">You can retrieve or modify the data without having to write SQL commands for each operation.</span></span>  
  
 <span data-ttu-id="9e4a9-115">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>を使用すると、マークアップテキストのプロパティを設定することによって、ASP.NET Web ページで LINQ を使用できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-115">The <xref:System.Web.UI.WebControls.LinqDataSource> control enables you to use LINQ in an ASP.NET Web page by setting properties in markup text.</span></span> <span data-ttu-id="9e4a9-116">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、LINQ to SQL を使用して、データコマンドを自動的に生成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-116">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically generate the data commands.</span></span> <span data-ttu-id="9e4a9-117">LINQ to SQL の詳細については、「 [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-117">For more information about LINQ to SQL, see [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).</span></span>  
  
 <span data-ttu-id="9e4a9-118">メモリ内のデータコレクションからデータを取得する場合は、データコレクションを<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>含むクラスにプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-118">When you are retrieving data from an in-memory data collection, you set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the class that contains the data collection.</span></span> <span data-ttu-id="9e4a9-119"><xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティは、データコレクションを返すプロパティまたはフィールドに設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-119">You set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property or field that returns the data collection.</span></span> <span data-ttu-id="9e4a9-120">たとえば、という名前`Person`のクラスに、文字列値の配列を返すという名前`FavoriteCities`のプロパティが含まれている場合があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-120">For example, you might have a class named `Person` that contains a property named `FavoriteCities` that returns an array of string values.</span></span> <span data-ttu-id="9e4a9-121"><xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>その場合は、プロパティをに`Person`設定し、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティをに`FavoriteCities`設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-121">In that case, you set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to `Person` and set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to `FavoriteCities`.</span></span>  
  
 <span data-ttu-id="9e4a9-122">データベースに対してクエリを実行する場合は、まずデータベースとそのテーブルを表すエンティティクラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-122">When you are querying a database, you must first create entity classes that represent the database and its tables.</span></span> <span data-ttu-id="9e4a9-123">これらのクラスは[!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] 、または SqlMetal ユーティリティを使用して生成できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-123">You can use the [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] or the SqlMetal.exe utility to generate these classes.</span></span> <span data-ttu-id="9e4a9-124">次に、データベース<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>を表すクラスにプロパティを設定し、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティをデータベーステーブルを表すプロパティに設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-124">You then set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the class that represents the database and set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property that represents the database table.</span></span>  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a><span data-ttu-id="9e4a9-125">操作の順序</span><span class="sxs-lookup"><span data-stu-id="9e4a9-125">Order of Operations</span></span>  
 <span data-ttu-id="9e4a9-126">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、次の順序でデータ操作を適用します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-126">The <xref:System.Web.UI.WebControls.LinqDataSource> control applies data operations in the following order:</span></span>  
  
1.  <span data-ttu-id="9e4a9-127">Where (返されるデータレコードを指定します)。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-127">Where (specify which data records to return).</span></span>  
  
2.  <span data-ttu-id="9e4a9-128">Order By (並べ替え)。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-128">Order By (sort).</span></span>  
  
3.  <span data-ttu-id="9e4a9-129">Group By (値を共有する集計データレコード)。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-129">Group By (aggregate data records that share values).</span></span>  
  
4.  <span data-ttu-id="9e4a9-130">グループの順序付け (グループ化されたデータの並べ替え)</span><span class="sxs-lookup"><span data-stu-id="9e4a9-130">Order Groups By (sort grouped data).</span></span>  
  
5.  <span data-ttu-id="9e4a9-131">Select (返すフィールドまたはプロパティを指定します)。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-131">Select (specify which fields or properties to return).</span></span>  
  
6.  <span data-ttu-id="9e4a9-132">自動並べ替え (ユーザーが選択したプロパティでデータレコードを並べ替えます)。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-132">Auto-sort (sort data records by a property that the user has selected).</span></span>  
  
7.  <span data-ttu-id="9e4a9-133">自動ページ (ユーザーによって選択されたデータレコードのサブセットを取得します)。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-133">Auto-page (retrieve a subset of data records that were selected by the user).</span></span>  
  
 <span data-ttu-id="9e4a9-134"><xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティに条件を追加して、クエリから返されるデータレコードをフィルター処理できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-134">You can add conditions to the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter the data records that are returned from a query.</span></span> <span data-ttu-id="9e4a9-135">プロパティが設定されていない<xref:System.Web.UI.WebControls.LinqDataSource>場合、コントロールはデータオブジェクトからすべてのレコードを取得します。 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A></span><span class="sxs-lookup"><span data-stu-id="9e4a9-135">If the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is not set, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves every record from the data object.</span></span>  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a><span data-ttu-id="9e4a9-136">データの順序付け</span><span class="sxs-lookup"><span data-stu-id="9e4a9-136">Ordering Data</span></span>  
 <span data-ttu-id="9e4a9-137"><xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティを使用して、並べ替えの基準となる、返されるデータのプロパティの名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-137">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to specify the names of properties from the returned data to sort by.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9e4a9-138"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールをまた<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>は[!INCLUDE[ss2k](~/includes/ss2k-md.md)] [!INCLUDE[ssEW](~/includes/ssew-md.md)]と共に使用し<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 、プロパティをに`true`設定する場合は、プロパティで値を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-138">When you use the <xref:System.Web.UI.WebControls.LinqDataSource> control with [!INCLUDE[ss2k](~/includes/ss2k-md.md)] or [!INCLUDE[ssEW](~/includes/ssew-md.md)] and the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is set to `true`, you must provide a value in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="9e4a9-139">既定では、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>プロパティは`true`です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-139">By default, the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is `true`.</span></span> <span data-ttu-id="9e4a9-140"><xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティに値を割り当てる場合は、クエリで返されるプロパティの一覧にすべての id 列を含める必要もあります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-140">If you assign a value to the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, you must also include all identity columns in the list of properties that is returned in the query.</span></span>  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a><span data-ttu-id="9e4a9-141">データのグループ化</span><span class="sxs-lookup"><span data-stu-id="9e4a9-141">Grouping Data</span></span>  
 <span data-ttu-id="9e4a9-142"><xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティを使用して、同じ値を持つデータレコードを統合するために使用するプロパティを指定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-142">You use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to specify which properties are used to consolidate data records that have the same values.</span></span> <span data-ttu-id="9e4a9-143">データをグループ化する場合は、 `Key` <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティ`It`に、動的に作成されるプロパティであるおよびを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-143">When you group data, you can include `Key` and `It`, which are dynamically created properties, in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="9e4a9-144">`Key`プロパティは、データをグループ化するために使用されたプロパティの値を参照します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-144">The `Key` property refers to the values in the property or properties that were used to group the data.</span></span> <span data-ttu-id="9e4a9-145">たとえば、という名前`Category` `Key`のプロパティでグループ化した場合、プロパティには、プロパティ内`Category`のすべての一意の値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-145">For example, if you group by a property named `Category`, the `Key` property will contain all unique values in the `Category` property.</span></span> <span data-ttu-id="9e4a9-146">プロパティ`It`は、データグループ内の個々のレコードのコレクションを参照します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-146">The `It` property refers to a collection of individual records in a grouping of data.</span></span> <span data-ttu-id="9e4a9-147">`It`プロパティを反復処理して、グループ化操作で統合された個々のレコードを取得できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-147">You can iterate over the `It` property to retrieve the individual records that have been consolidated in the grouping operation.</span></span> <span data-ttu-id="9e4a9-148">たとえば、という名前`Category` `It`のプロパティでグループ化した場合、プロパティには、 `Category`プロパティで共通の値を共有するすべてのレコードが含まれます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-148">For example, if you group by a property named `Category`, the `It` property contains all the individual records that share a common value in the `Category` property.</span></span>  
  
 <span data-ttu-id="9e4a9-149"><xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>プロパティを使用して、グループ化されたデータの並べ替えに使用するプロパティを指定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-149">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property to specify the properties to use for sorting the grouped data.</span></span> <span data-ttu-id="9e4a9-150">データをグループ化する場合<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 、プロパティは、グループ化されたデータ内の個々のレコードの並べ替え方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-150">When you group data, the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property specifies how the individual records within the grouped data are sorted.</span></span>  
  
 <span data-ttu-id="9e4a9-151">既定では、 <xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、データオブジェクトからすべてのプロパティの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-151">By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves values for all the properties from a data object.</span></span> <span data-ttu-id="9e4a9-152">使用できるプロパティ<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>のサブセットを操作する場合は、プロパティを使用して、どのプロパティを返すかを指定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-152">You use the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to specify which properties to return if you want to work with a subset of available properties.</span></span> <span data-ttu-id="9e4a9-153">Select 操作は、Where、Order By、および Group By 操作の後に適用されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-153">The Select operation is applied after the Where, Order By, and Group By operations.</span></span> <span data-ttu-id="9e4a9-154">そのため、Select 句で別名を作成した場合、その別名を他の句で使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-154">Therefore, if you create an aliased name in a Select clause, the alias is not available in the other clauses.</span></span>  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a><span data-ttu-id="9e4a9-155">データ変更</span><span class="sxs-lookup"><span data-stu-id="9e4a9-155">Data Modifications</span></span>  
 <span data-ttu-id="9e4a9-156">、 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 、 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> およびの各プロパティを使用して、データ変更を有効にするかどうかを <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 指定できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-156">You can specify whether data modifications are enabled by using the <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, and <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> properties.</span></span> <span data-ttu-id="9e4a9-157"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールからデータを変更するためのユーザーインターフェイスは、通常、 <xref:System.Web.UI.WebControls.DetailsView>コントロールなどのデータバインドコントロールを使用して提供されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-157">The user interface for modifying data from a <xref:System.Web.UI.WebControls.LinqDataSource> control is typically provided through a data-bound control, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span> <span data-ttu-id="9e4a9-158">自動データ変更を<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>有効にする<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>に`true`は、、 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>、またはをに設定するだけでなく、次の条件を満たす必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-158">In addition to setting <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, or <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> to `true`, the following conditions are required to enable automatic data modifications:</span></span>  
  
-   <span data-ttu-id="9e4a9-159">プロパティ<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>に値を割り当てることはできません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-159">The <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property cannot be assigned a value.</span></span>  
  
-   <span data-ttu-id="9e4a9-160">プロパティ<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>に値を割り当てることはできません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-160">The <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property cannot be assigned a value.</span></span>  
  
-   <span data-ttu-id="9e4a9-161"><xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティに割り当てられるクラスは、から<xref:System.Data.Linq.DataContext>派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-161">The class that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property must derive from <xref:System.Data.Linq.DataContext>.</span></span>  
  
-   <span data-ttu-id="9e4a9-162"><xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティに割り当てられるプロパティは、から<xref:System.Data.Linq.Table%601>派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-162">The property that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property must derive from <xref:System.Data.Linq.Table%601>.</span></span>  
  
 <span data-ttu-id="9e4a9-163">データバインドコントロールに表示されるプロパティを制限するには、次の2つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-163">You can restrict which properties are displayed in a data-bound control in two ways.</span></span> <span data-ttu-id="9e4a9-164">プロパティは<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 、プロパティのサブセットに設定するか、コントロールを追加<xref:System.Web.UI.WebControls.DataControlField>してデータバインドコントロールのフィールドを定義することができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-164">You can either set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to a subset of properties, or you can define the fields for a data-bound control by adding <xref:System.Web.UI.WebControls.DataControlField> controls.</span></span> <span data-ttu-id="9e4a9-165">ただし、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティを設定した場合は、自動更新、挿入、および削除の各操作を有効にできないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-165">However, if you set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, it means that automatic update, insert, and delete operations cannot be enabled.</span></span> <span data-ttu-id="9e4a9-166">使用可能なプロパティのサブセットを操作しているときに自動データ変更を有効にする場合<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>は、プロパティを設定しないでください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-166">If you want to enable automatic data modifications while you work with a subset of available properties, do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="9e4a9-167">代わりに、データオブジェクトからすべてのプロパティを取得し、データバインドコントロールを使用して表示されるプロパティを管理します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-167">Instead, retrieve all properties from the data object and manage which ones are displayed by using the data-bound control.</span></span> <span data-ttu-id="9e4a9-168"><xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>コントロール`false` <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>またはコントロールを使用する場合は、プロパティまたはプロパティもに設定する必要があります。 <xref:System.Web.UI.WebControls.GridView></span><span class="sxs-lookup"><span data-stu-id="9e4a9-168">When you use the <xref:System.Web.UI.WebControls.DetailsView> control or the <xref:System.Web.UI.WebControls.GridView> control, you must also set the <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> or <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> properties to `false`.</span></span> <span data-ttu-id="9e4a9-169">これにより、データバインドコントロールに、データの編集と削除を行うためのボタンが自動的に追加されるのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-169">This prevents the data-bound control from automatically including buttons for editing and deleting the data.</span></span> <span data-ttu-id="9e4a9-170">データバインドコントロールに表示されない値は、ビューステートに格納されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-170">Any values that are not displayed in the data-bound control are stored in view state.</span></span> <span data-ttu-id="9e4a9-171">これらは、データ更新の実行時にデータソースに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-171">They are passed unchanged to the data source when the data update is performed.</span></span>  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a><span data-ttu-id="9e4a9-172">実行時の値の評価</span><span class="sxs-lookup"><span data-stu-id="9e4a9-172">Evaluating Values at Run Time</span></span>  
 <span data-ttu-id="9e4a9-173">実行時に値の順序付け、フィルター処理、またはグループ化の値を評価する必要がある場合<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>は<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>、、、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 、またはの各コレクションにパラメーターを追加できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-173">If you have to evaluate values at run time for ordering, filtering, or grouping values, you can add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, or <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collections.</span></span>  
  
 <span data-ttu-id="9e4a9-174">既定値を指定する場合は、 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>コレクションにパラメーターを追加できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-174">If you want to specify default values, you can add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection.</span></span>  
  
 <span data-ttu-id="9e4a9-175">データ操作を実行する前に値を確認または変更する<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>場合は<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>、、、または<xref:System.Web.UI.WebControls.LinqDataSource.Updating>の各イベントを処理できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-175">If you want to examine or modify values before the data operation is executed, you can handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, or <xref:System.Web.UI.WebControls.LinqDataSource.Updating> events.</span></span> <span data-ttu-id="9e4a9-176">また、これらのイベントを処理して、データ操作をキャンセルしたり、ユーザー入力に基づいてデータクラスのプロパティを設定するときに発生した検証エラーを確認したりすることもできます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-176">You can also handle these events in order to cancel the data operation or to examine validation errors that occurred when you set properties in the data class based on user input.</span></span>  
  
 <span data-ttu-id="9e4a9-177">データ操作の完了後に値を調べるには、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected>、また<xref:System.Web.UI.WebControls.LinqDataSource.Updated>はの各イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-177">To examine values after the data operation has finished, handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, or <xref:System.Web.UI.WebControls.LinqDataSource.Updated> events.</span></span>  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a><span data-ttu-id="9e4a9-178">ストアドプロシージャの操作</span><span class="sxs-lookup"><span data-stu-id="9e4a9-178">Working with Stored Procedures</span></span>  
 <span data-ttu-id="9e4a9-179"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールを使用して、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベントのイベントハンドラーを作成することによって、ストアドプロシージャからデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-179">You use the <xref:System.Web.UI.WebControls.LinqDataSource> control to retrieve data from a stored procedure by creating an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="9e4a9-180">イベントハンドラーでは、ストアドプロシージャを表すデータコンテキストクラスのメソッドを呼び出し、結果を<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>オブジェクトのプロパティに設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-180">In the event handler, you call the method in the data context class that represents the stored procedure and set the result to the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> object.</span></span> <span data-ttu-id="9e4a9-181">データの更新、挿入、および削除の自動操作を有効にする場合は、メソッドから返される型が、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティで指定されている型と一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-181">If you want to enable automatic update, insert, and delete operations for the data, the type that is returned from the method must match the type that is specified in the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property.</span></span> <span data-ttu-id="9e4a9-182">データコンテキストメソッドの作成の詳細については、「[方法: ストアドプロシージャおよび関数にマップされる DataContext メソッドを作成する (O/R デザイナー)](https://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-182">For more information about creating data context methods, see [How to: Create DataContext methods mapped to stored procedures and functions (O/R Designer)](https://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a).</span></span>  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a><span data-ttu-id="9e4a9-183">宣言型の構文</span><span class="sxs-lookup"><span data-stu-id="9e4a9-183">Declarative Syntax</span></span>  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-184">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource>という名前`Products`のエンティティクラスからデータを取得するコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-184">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that retrieves data from an entity class named `Products`.</span></span> <span data-ttu-id="9e4a9-185">エンティティクラスは、 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]または SqlMetal ユーティリティを使用して生成された可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-185">The entity class could have been generated by using the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] or the SqlMetal.exe utility.</span></span> <span data-ttu-id="9e4a9-186">プロパティは、 `Price`プロパティの値が50より大きいレコードのみを返すように設定されています。 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A></span><span class="sxs-lookup"><span data-stu-id="9e4a9-186">The <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is set to return only records that have a value in the `Price` property greater than 50.</span></span> <span data-ttu-id="9e4a9-187">コントロールは、データを表示<xref:System.Web.UI.WebControls.LinqDataSource>するコントロールにバインドされます。 <xref:System.Web.UI.WebControls.GridView></span><span class="sxs-lookup"><span data-stu-id="9e4a9-187">A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 <span data-ttu-id="9e4a9-188">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource>ユーザーがデータソースのレコードを更新、削除、および挿入できるようにするコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-188">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that enables users to update, delete, and insert records in the data source.</span></span> <span data-ttu-id="9e4a9-189">コントロールは<xref:System.Web.UI.WebControls.LinqDataSource>コントロールにバインドされ、ユーザーはデータを表示および変更できます。 <xref:System.Web.UI.WebControls.DetailsView></span><span class="sxs-lookup"><span data-stu-id="9e4a9-189">A <xref:System.Web.UI.WebControls.DetailsView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control and enables users to see and modify the data.</span></span> <span data-ttu-id="9e4a9-190">レコードを選択、更新、削除、または挿入するために SQL コマンドが必要ないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-190">Notice that no SQL commands are required in order to select, update, delete, or insert the records.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 <span data-ttu-id="9e4a9-191">次の例は、Web ページの値<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>に基づいてデータオブジェクトを設定するイベントのイベントハンドラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-191">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event that sets the data object based on a value in the Web page.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 <span data-ttu-id="9e4a9-192">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource> 2 つの列でグループ化するように構成されたコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-192">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns.</span></span> <span data-ttu-id="9e4a9-193">プロパティ`Key`は、 `ProductCategory`とと`Color`いう2つのプロパティを持つオブジェクトを参照します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-193">The `Key` property references an object that has two properties, `ProductCategory` and `Color`.</span></span> <span data-ttu-id="9e4a9-194">によって`It`表されるオブジェクトの名前がに`Products`変更されます (別名)。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-194">The object represented by `It` is renamed (aliased) to `Products`.</span></span> <span data-ttu-id="9e4a9-195">名前が`Products`変更されたオブジェクトには、グループ内の個々のレコードのコレクションが含まれます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-195">The renamed `Products` object contains a collection of the individual records in a grouping.</span></span> <span data-ttu-id="9e4a9-196">各インスタンスには、 `Products`テーブルのすべての列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-196">Each instance will contain all the columns from the `Products` table.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 <span data-ttu-id="9e4a9-197">次の例は、 <xref:System.Web.UI.WebControls.ListView>前の例の<xref:System.Web.UI.WebControls.LinqDataSource>コントロールのデータを表示する2つのコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-197">The following example shows two <xref:System.Web.UI.WebControls.ListView> controls that display the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example.</span></span> <span data-ttu-id="9e4a9-198">1 <xref:System.Web.UI.WebControls.ListView>つのコントロールにグループ化された<xref:System.Web.UI.WebControls.ListView>データが表示され、もう一方のコントロールには、そのグループに属する製品の個別の名前が表示されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-198">One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data, and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group.</span></span> <span data-ttu-id="9e4a9-199">入れ子になったデータバインドコントロール<xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A>のプロパティは、 `Products` `It`オブジェクトの別名であるに設定されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-199">The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655"><span data-ttu-id="9e4a9-200">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="9e4a9-200">LINQ to SQL</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e4a9-201"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-201">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateOrderByClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-202"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールが <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" /> コレクション内の値に基づいて Order By 句を動的に作成するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-202">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control dynamically creates an Order By clause based on values in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" /> collection.</span></span></summary>
        <value><span data-ttu-id="9e4a9-203"><see langword="true" />コントロールで<see cref="T:System.Web.UI.WebControls.LinqDataSource" /> order by 句を作成する場合は。 <see langword="false" />それ以外の場合は。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-203"><see langword="true" /> if the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control creates the Order By clause; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9e4a9-204">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-204">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-205"><xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>プロパティをに`true`設定すると、コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>コレクション内の値に基づいて order by 句を動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-205">When you set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property to `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control dynamically creates an Order By clause that is based on the values in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="9e4a9-206">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、最初のパラメーターを使用してデータを並べ替え、さらに追加のパラメーターごとにデータを並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-206">The <xref:System.Web.UI.WebControls.LinqDataSource> control sorts the data by the first parameter and then additionally sorts the data for each additional parameter.</span></span> <span data-ttu-id="9e4a9-207">または空`null`の値を含むパラメーターは、Order by 句に含まれません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-207">Parameters that contain `null` or an empty value are not included in the Order By clause.</span></span>  
  
 <span data-ttu-id="9e4a9-208">がに設定され<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>ている`true`場合、パーサーは order by 句を動的に作成するので、プロパティを設定しません。 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A></span><span class="sxs-lookup"><span data-stu-id="9e4a9-208">You do not set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property when the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> is set to `true`, because the parser dynamically creates the Order By clause.</span></span> <span data-ttu-id="9e4a9-209">がに <xref:System.Web.UI.WebControls.LinqDataSource> 設定され 、プロパティに値が割り当てられている場合、コントロールは例外をスローします。 `true`  <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A></span><span class="sxs-lookup"><span data-stu-id="9e4a9-209">The <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> is set to `true` and the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property is assigned values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-210">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource>が<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>に`true`設定されたコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-210">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> set to `true`.</span></span> <span data-ttu-id="9e4a9-211">パラメーターは、ユーザーが<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> <xref:System.Web.UI.WebControls.DropDownList>コントロールから選択したプロパティ名に基づいてデータを並べ替えるコレクションに含まれます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-211">A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateWhereClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-212"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールが <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> コレクションに定義された値に基づいて Where 句を動的に作成するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-212">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control dynamically creates a Where clause based on values defined in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> collection.</span></span></summary>
        <value><span data-ttu-id="9e4a9-213"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールが Where 句を作成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-213"><see langword="true" /> if the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control will create the Where clause; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9e4a9-214">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-214">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-215"><xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>プロパティをに設定すると`true`、コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクション内のパラメーターから where 句を動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-215">When you set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control dynamically creates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="9e4a9-216"><xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクションに追加する各パラメーターの<xref:System.Web.UI.WebControls.Parameter.Name%2A>プロパティは、クエリ対象のデータオブジェクトのプロパティと一致する値に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-216">Each parameter that you add to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection must have its <xref:System.Web.UI.WebControls.Parameter.Name%2A> property set to a value that matches a property in the data object that is being queried.</span></span> <span data-ttu-id="9e4a9-217">自動的に生成される where 句は、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクションで指定された値が、データオブジェクト内の一致するプロパティの値と等しいかどうかをチェックします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-217">The automatically generated Where clause will check whether the value specified in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection equals the value of the matching property in the data object.</span></span> <span data-ttu-id="9e4a9-218">複数のパラメーターを指定すると、パラメーターは論理`AND`操作にリンクされます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-218">If you provide more than one parameter, the parameters are linked with a logical `AND` operation.</span></span> <span data-ttu-id="9e4a9-219">または空`null`の値を含むパラメーターは、Where 句に含まれません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-219">Parameters that contain `null` or an empty value are not included in the Where clause.</span></span>  
  
 <span data-ttu-id="9e4a9-220">自動的に生成<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>された句は、等しいかどうかのみをテスト`AND`でき、操作によってのみパラメーターをリンクできます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-220">The automatically generated <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> clause can test only for equality and can link parameters only with the `AND` operation.</span></span> <span data-ttu-id="9e4a9-221">等しいかどうか<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>をテスト`true`しない条件を追加する必要がある場合、またはパラメーター `OR`を操作に関連付ける必要がある場合は、プロパティをに設定しないでください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-221">Do not set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` if you have to add a condition that does not test for equality or if you have to relate parameters with the `OR` operation.</span></span> <span data-ttu-id="9e4a9-222">これらのタスクを実行するには<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 、プロパティ`false`をに設定<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>し、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクション内の各パラメーターのプロパティにプレースホルダーを追加します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-222">You can accomplish these tasks by setting the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `false` and adding placeholders in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property for each parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="9e4a9-223"><xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティで、各プレースホルダー名の先頭に @ 記号を付けます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-223">In the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property, preface each placeholder name with the @ symbol.</span></span>  
  
 <span data-ttu-id="9e4a9-224">プロパティが<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> の `true` 場合、パーサーは Where 句を動的に作成するので、プロパティを設定し<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>ません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-224">You do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property when the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, because the parser dynamically creates the Where clause.</span></span> <span data-ttu-id="9e4a9-225">プロパティが<xref:System.Web.UI.WebControls.LinqDataSource> で `true` 、プロパティに値が割り当てられている場合、コントロールは例外をスロー <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-225">The <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true` and the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is assigned values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-226">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource>が<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>に`true`設定されたコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-226">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> set to `true`.</span></span> <span data-ttu-id="9e4a9-227">コントロールは、クエリから返さ<xref:System.Web.UI.WebControls.LinqDataSource>れたデータを表示するためにコントロールにバインドされます。 <xref:System.Web.UI.WebControls.GridView></span><span class="sxs-lookup"><span data-stu-id="9e4a9-227">A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data that is returned from the query.</span></span> <span data-ttu-id="9e4a9-228">3つの値が設定されたコントロールが含まれています。 <xref:System.Web.UI.WebControls.DropDownList></span><span class="sxs-lookup"><span data-stu-id="9e4a9-228">A <xref:System.Web.UI.WebControls.DropDownList> control is included that is populated with three values.</span></span> <span data-ttu-id="9e4a9-229"><xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクションには、データオブジェクトのプロパティの1つに`Category,`一致する名前が設定されたパラメーターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-229">A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection with the name set to `Category,` which matches one of the properties of the data object.</span></span> <span data-ttu-id="9e4a9-230">このプロパティは、 <xref:System.Web.UI.WebControls.DropDownList>コントロールの ID に設定されます。 <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A></span><span class="sxs-lookup"><span data-stu-id="9e4a9-230">Its <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> property is set to the ID of the <xref:System.Web.UI.WebControls.DropDownList> control.</span></span> <span data-ttu-id="9e4a9-231">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> ユーザー <xref:System.Web.UI.WebControls.DropDownList> がコントロールから選択した値に基づいてレコードをフィルター処理するためのプロパティを自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-231">The <xref:System.Web.UI.WebControls.LinqDataSource> control automatically creates the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter records based on the value that the user selects from the <xref:System.Web.UI.WebControls.DropDownList> control.</span></span> <span data-ttu-id="9e4a9-232">このクエリは、ユーザーが`Category` <xref:System.Web.UI.WebControls.DropDownList>コントロールから選択した値と一致するプロパティを持つレコードを返します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-232">The query returns the records whose `Category` property matches the value that the user has selected from the <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPage : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-233">実行時に <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールがデータ セクションでのナビゲーションをサポートするかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-233">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control supports navigation through sections of the data at run time.</span></span></summary>
        <value><span data-ttu-id="9e4a9-234">ユーザーがデータを閲覧できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-234"><see langword="true" /> if the user can page through the data; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9e4a9-235">既定値は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-235">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-236">コントロールで<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>ページングを`true`有効にするには、プロパティをに設定します。 <xref:System.Web.UI.WebControls.LinqDataSource></span><span class="sxs-lookup"><span data-stu-id="9e4a9-236">Set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property to `true` to enable paging in the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="9e4a9-237">ユーザーがデータをページ化できるようにするには、 <xref:System.Web.UI.WebControls.LinqDataSource>コントロールにページングするためのインターフェイスを提供するデータバインドコントロールを接続します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-237">To enable the user to page through the data, connect a data-bound control that provides the interface for paging to the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="9e4a9-238">プロパティがに`true`設定されている<xref:System.Web.UI.WebControls.LinqDataSource>場合、コントロールは、データバインドコントロール内の1ページに対して十分なレコードだけを取得します。 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A></span><span class="sxs-lookup"><span data-stu-id="9e4a9-238">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves only enough records for one page in the data-bound control.</span></span> <span data-ttu-id="9e4a9-239"><xref:System.Linq.Enumerable.Skip%2A>また、メソッドと<xref:System.Linq.Enumerable.Take%2A>メソッドを使用して、現在のページのレコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-239">It uses the <xref:System.Linq.Enumerable.Skip%2A> and <xref:System.Linq.Enumerable.Take%2A> methods to retrieve the records for the current page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-240">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> `true` プロパティが <xref:System.Web.UI.WebControls.LinqDataSource> に設定されたコントロールと、コントロールにバインドされたコントロールを示しています。 <xref:System.Web.UI.WebControls.GridView></span><span class="sxs-lookup"><span data-stu-id="9e4a9-240">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="9e4a9-241">コントロールのプロパティは、ユーザーがデータ`true`を使用できるようにするインターフェイスを提供するために、に設定されます。 <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> <xref:System.Web.UI.WebControls.GridView></span><span class="sxs-lookup"><span data-stu-id="9e4a9-241">The <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users page through the data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSort : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-242">実行時に <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールがデータの並べ替えをサポートするかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-242">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control supports sorting the data at run time.</span></span></summary>
        <value><span data-ttu-id="9e4a9-243">ユーザーがデータを並べ替えられる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-243"><see langword="true" /> if the user can sort the data; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9e4a9-244">既定値は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-244">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-245">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、データを並べ替えるための2つの方法をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-245">The <xref:System.Web.UI.WebControls.LinqDataSource> control supports two approaches for sorting data.</span></span> <span data-ttu-id="9e4a9-246"><xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>プロパティを使用すると、実行時の並べ替えを有効にすることが<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>できます。また、プロパティを設定して、デザイン時に並べ替えを定義することもできます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-246">You can use the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property to enable run-time sorting or you can set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to define the sorting at design time.</span></span>  
  
 <span data-ttu-id="9e4a9-247">プロパティをに`true` 設定 <xref:System.Web.UI.WebControls.LinqDataSource> すると、データバインドコントロールの並べ替え式に基づくコントロールで並べ替えが有効になります。 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A></span><span class="sxs-lookup"><span data-stu-id="9e4a9-247">Set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property to `true` to enable sorting in a <xref:System.Web.UI.WebControls.LinqDataSource> control that is based on the sort expression from a data-bound control.</span></span> <span data-ttu-id="9e4a9-248">データバインドコントロールは、ユーザーが並べ替えに使用するプロパティを実行時に選択できるようにするインターフェイスを提供します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-248">The data-bound control provides the interface to enable the user to select at run time which property to use for sorting.</span></span>  
  
 <span data-ttu-id="9e4a9-249"><xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティを並べ替えに使用するプロパティまたはプロパティに設定することにより、プログラムによってデータが返される順序を設定できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-249">You can programmatically set the order in which data is returned by setting the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to the property or properties used for sorting.</span></span> <span data-ttu-id="9e4a9-250">プロパティがプロパティ<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>に設定され、プロパティが`true`の場合、データバインド<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>コントロールの並べ替え式は、プロパティの式の後に適用されます。 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A></span><span class="sxs-lookup"><span data-stu-id="9e4a9-250">When the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property is set to a property and the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property is `true`, the sort expression from the data-bound control is applied after the expression in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="9e4a9-251">したがって、これにより、データの最終的な並べ替えが決定されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-251">Therefore, this determines the final sorting of the data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-252">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> `true` プロパティが <xref:System.Web.UI.WebControls.LinqDataSource> に設定されたコントロールと、コントロールにバインドされたコントロールを示しています。 <xref:System.Web.UI.WebControls.GridView></span><span class="sxs-lookup"><span data-stu-id="9e4a9-252">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="9e4a9-253">コントロールのプロパティは、ユーザーがデータ`true`を並べ替えることができるインターフェイスを提供するようにに設定されています。 <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> <xref:System.Web.UI.WebControls.GridView></span><span class="sxs-lookup"><span data-stu-id="9e4a9-253">The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users sort the data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberSignature Language="F#" Value="member this.ContextCreated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.ContextCreated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-254">コンテキスト タイプ オブジェクトのインスタンスが作成された後に発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-254">Occurs after an instance of the context type object is created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-255"><xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>イベントを処理してコンテキスト型オブジェクトを調べたり、オブジェクトの作成中に発生した例外を調べたりします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-255">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> event to examine the context type object or examine exceptions that are raised while the object is being created.</span></span> <span data-ttu-id="9e4a9-256">このイベントに関連付けられて<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>いる<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>オブジェクトのプロパティからコンテキスト型オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-256">You retrieve the context type object from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is associated with this event.</span></span> <span data-ttu-id="9e4a9-257">データ操作中に発生した例外は、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティから取得します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-257">You retrieve the exception that was raised during the data operation from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property.</span></span>  
  
 <span data-ttu-id="9e4a9-258">コンテキスト型オブジェクトは、select、update、insert、および delete 操作中に作成され、要求全体で再利用されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-258">The context type object is created during select, update, insert, and delete operations and is reused throughout the request.</span></span>  
  
 <span data-ttu-id="9e4a9-259">イベントが発生しない場合は、1回だけ発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-259">There is one time when the event is not raised.</span></span> <span data-ttu-id="9e4a9-260">これは、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベント中にプログラム<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>によってプロパティをオブジェクトに設定する場合です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-260">This is when you programmatically set the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property to an object during the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="9e4a9-261">追加の条件として、元の値をビューステートに格納する必要がないこと、または<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティのオブジェクトがインターフェイスを<xref:System.Data.Linq.ITable>実装していることが挙げられます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-261">An additional condition is that either the original values do not have to be stored in view state, or the object in the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property implements the <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberSignature Language="F#" Value="member this.ContextCreating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " Usage="member this.ContextCreating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-262">コンテキスト タイプ オブジェクトのインスタンスが作成される前に発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-262">Occurs before an instance of the context type object is created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-263">既定では、 <xref:System.Web.UI.WebControls.LinqDataSource>コントロールは、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティで指定された型のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-263">By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control creates an instance of the type that is specified in the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property.</span></span> <span data-ttu-id="9e4a9-264">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、データコンテキストオブジェクトのパラメーターなしのコンストラクターを呼び出して、オブジェクトのインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-264">The <xref:System.Web.UI.WebControls.LinqDataSource> control calls the parameterless constructor of the data context object to create an instance of the object.</span></span> <span data-ttu-id="9e4a9-265">パラメーターなしのコンストラクターを使用するか、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティに指定されているものとは異なるオブジェクトを作成する必要がある可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-265">It is possible that you have to use a non-parameterless constructor or you have to create an object that differs from the one specified in the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property.</span></span> <span data-ttu-id="9e4a9-266">その場合は、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating>イベントを処理し、データコンテキストオブジェクトを手動で作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-266">In that case, you must handle the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event and manually create the data context object.</span></span>  
  
 <span data-ttu-id="9e4a9-267">Context 型オブジェクトは、select、update、insert、delete の各操作中に作成されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-267">The context type object is created during select, update, insert, and delete operations.</span></span>  
  
 <span data-ttu-id="9e4a9-268">イベントが発生しない場合は、1回だけ発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-268">There is one time when the event is not raised.</span></span> <span data-ttu-id="9e4a9-269">これは、プログラムを使用し<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>て、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベントのイベントハンドラー内のオブジェクトにプロパティを設定する場合です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-269">This is when you programmatically set the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property to an object in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="9e4a9-270">追加の条件として、元の値をビューステートに格納する必要がないこと、または<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティのオブジェクトがインターフェイスを<xref:System.Data.Linq.ITable>実装していることが挙げられます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-270">An additional condition is that either the original values do not have to be stored in view state, or the object in the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property implements the <xref:System.Data.Linq.ITable> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-271">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating>イベント中にパラメーターなしのコンストラクターを使用して、データコンテキストオブジェクトを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-271">The following example shows how to create the data context object by using a non-parameterless constructor during the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event.</span></span> <span data-ttu-id="9e4a9-272">このコードは、オブジェクトを<xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A>プロパティに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-272">The code assigns the object to the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberSignature Language="F#" Value="member this.ContextDisposing : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " Usage="member this.ContextDisposing : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-273">コンテキスト タイプ オブジェクトが破棄される前に発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-273">Occurs before disposing the context type object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-274">オブジェクトを手動<xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing>で破棄するイベントを処理するか、オブジェクトが破棄される前にオブジェクトに固有のクリーンアップを実行します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-274">You handle the <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> event to dispose the object manually, or to perform clean-up that is specific to the object before the object is destroyed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextTypeName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-275">取得するデータが値として格納されているプロパティを含む型の名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-275">Gets or sets the name of the type that contains the property whose value has the data that you want to retrieve.</span></span></summary>
        <value><span data-ttu-id="9e4a9-276">取得するデータが含まれているクラスの名前。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-276">The name of the class to retrieve data from.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-277">コントロールを使用し<xref:System.Web.UI.WebControls.LinqDataSource>て、メモリ内のデータコレクションまたはデータベースからデータを取得する場合は、2つのプロパティを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-277">When you use the <xref:System.Web.UI.WebControls.LinqDataSource> control to retrieve data from either an in-memory data collection or a database, you must specify two properties.</span></span> <span data-ttu-id="9e4a9-278">1つ目は、データソースを表すデータコンテキストクラスです。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-278">The first is a data context class that represents the data source.</span></span> <span data-ttu-id="9e4a9-279">2つ目は、データを格納しているデータコンテキストクラスのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-279">The second is a property in the data context class that contains the data.</span></span> <span data-ttu-id="9e4a9-280"><xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティをデータコンテキストクラスの名前に設定し、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティをデータを格納するデータコレクションに設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-280">You set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the name of the data context class and you set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the data collection that contains the data.</span></span>  
  
 <span data-ttu-id="9e4a9-281">たとえば、データベースからデータを取得する場合は、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティをデータベースを表すクラスの名前に設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-281">For example, when you retrieve data from a database, set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the name of the class that represents the database.</span></span> <span data-ttu-id="9e4a9-282">また、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティを、データベース内のテーブルを表すプロパティに設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-282">Also set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property that represents the table in the database.</span></span> <span data-ttu-id="9e4a9-283">データベースからクラスを生成するには、 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]または SqlMetal ユーティリティを使用して、これらのクラスを自動的に生成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-283">To generate classes from a database, use the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] or the SqlMetal.exe utility to automatically generate those classes.</span></span>  
  
 <span data-ttu-id="9e4a9-284">配列などのメモリ内データコレクションからデータを取得する場合は、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティを配列プロパティを含むクラスの名前に設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-284">When you retrieve data from an in-memory data collection such as an array, set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the name of the class that contains the array property.</span></span> <span data-ttu-id="9e4a9-285">次に、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティを、配列を取得するプロパティに設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-285">Then set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property that gets the array.</span></span>  
  
 <span data-ttu-id="9e4a9-286"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールを使用して、更新、挿入、または削除の自動操作を有効に<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>するには、 <xref:System.Data.Linq.DataContext>プロパティに割り当てられたクラスがから派生している必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-286">To enable automatic update, insert, or delete operations through the <xref:System.Web.UI.WebControls.LinqDataSource> control, the class assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property must derive from <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="9e4a9-287">また、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティに割り当てられるプロパティは、から<xref:System.Data.Linq.Table%601>派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-287">In addition, the property assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property must derive from <xref:System.Data.Linq.Table%601>.</span></span> <span data-ttu-id="9e4a9-288">更新、挿入、または削除の自動操作を有効にする必要がない場合は、任意の型のクラスの名前を<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティに割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-288">If you do not need to enable automatic update, insert, or delete operations, you can assign the name of any type of class to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property.</span></span>  
  
 <span data-ttu-id="9e4a9-289">クラスのインスタンスからデータを選択する方法の詳細については、 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-289">For information about how to select data from an instance of a class, see the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-290">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>プロパティを、文字列の配列を含むクラスに設定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-290">The following example shows how to set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to a class that contains an array of strings.</span></span> <span data-ttu-id="9e4a9-291">また、データベースを表すクラス (によって[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]生成される) にプロパティを設定する方法についても説明します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-291">It also shows how to set the property to a class (generated by the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]) that represents a database.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 <span data-ttu-id="9e4a9-292">この例で`ExampleDataContext`は、データベーステーブルを表すという名前のクラスは示されていません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-292">The class named `ExampleDataContext` that represents the database table is not shown in this example.</span></span> <span data-ttu-id="9e4a9-293">この例を使用するには、Example .dbml という名前の LINQ To SQL クラスを追加し、Movie という名前のテーブルをに[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]ドラッグして、このクラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-293">For this example to work, you must create this class by adding a LINQ To SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].</span></span> <span data-ttu-id="9e4a9-294">という名前`ExampleDataContext` `Movies`のプロパティを持つという名前のクラスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-294">A class named `ExampleDataContext` with a property named `Movies` is generated.</span></span>  
  
 <span data-ttu-id="9e4a9-295">次の例は、 `MovieLibrary` <xref:System.Web.UI.WebControls.LinqDataSource>コントロールで参照されるという名前のクラスを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-295">The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655"><span data-ttu-id="9e4a9-296">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="9e4a9-296">LINQ to SQL</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberSignature Language="F#" Value="override this.CreateQueryableView : unit -&gt; System.Web.UI.WebControls.QueryableDataSourceView" Usage="linqDataSource.CreateQueryableView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e4a9-297">クエリ可能なビューを返します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-297">Returns a queryable view.</span></span></summary>
        <returns><span data-ttu-id="9e4a9-298">クエリ可能なビュー。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-298">A queryable view.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberSignature Language="F#" Value="abstract member CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView&#xA;override this.CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView" Usage="linqDataSource.CreateView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e4a9-299">このコントロールに関連付けられている <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> クラスの新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-299">Creates a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> class that is associated with this control.</span></span></summary>
        <returns><span data-ttu-id="9e4a9-300">データ バインド コントロールのインターフェイスとして動作するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-300">An object that acts as the interface for data-bound controls.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-301">カスタムビューを提供するには、派生クラスでこのメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-301">To provide a custom view, you can override this method in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Delete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="9e4a9-302">削除するレコードの行のキー値。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-302">The row key values for the records to be deleted.</span></span></param>
        <param name="oldValues"><span data-ttu-id="9e4a9-303">データの競合を検出するために評価される行の値。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-303">The row values that are evaluated to detect data conflicts.</span></span></param>
        <summary><span data-ttu-id="9e4a9-304">削除の操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-304">Performs a delete operation.</span></span></summary>
        <returns><span data-ttu-id="9e4a9-305">削除操作によって影響を受けたレコードの数。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-305">The number of records affected by the delete operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-306">通常、コードから<xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>メソッドを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-306">Typically, you do not have to call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method from your code.</span></span> <span data-ttu-id="9e4a9-307">データバインドコントロールで<xref:System.Web.UI.WebControls.LinqDataSource>コントロールを使用すると、ユーザーがレコードを削除するアクションを実行した<xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>ときに、データバインドコントロールによって自動的にメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-307">When you use a <xref:System.Web.UI.WebControls.LinqDataSource> control with a data-bound control, the data-bound control will automatically call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method when the user takes action to delete a record.</span></span> <span data-ttu-id="9e4a9-308">データを削除する<xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>独自のプロセスを作成する場合は、明示的にメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-308">You explicitly call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method when you want to create your own process for deleting data.</span></span> <span data-ttu-id="9e4a9-309">たとえば、データバインドコントロール以外の<xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>イベントに基づいてレコードを削除する場合は、メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-309">For example, you can call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method when you want to delete a record based on an event outside the data-bound control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Deleted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-310">削除操作が終了したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-310">Occurs when a delete operation has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-311"><xref:System.Web.UI.WebControls.LinqDataSource.Deleted>イベントを処理して、削除操作から例外をキャッチするか、操作の完了後に出力パラメーターを確認します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-311">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> event to catch any exceptions from the delete operation, or to examine output parameters after the operation has finished.</span></span> <span data-ttu-id="9e4a9-312">イベントハンドラーに渡される<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>オブジェクトから出力パラメーターを取得できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-312">You can retrieve the output parameters from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-313">このプロパティは、<see cref="T:System.Web.UI.WebControls.LinqDataSource" /> クラスでは使用されません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-313">This property is not used by the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> class.</span></span></summary>
        <value><span data-ttu-id="9e4a9-314">パラメーターのコレクション。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-314">A collection of parameters.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " Usage="member this.Deleting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-315">削除操作の前に発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-315">Occurs before a delete operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-316">削除するオブジェクトの検証、データクラスからのデータ検証エラーの調査、削除操作の前の値の変更、または削除操作の取り消しを行うために、イベントを処理します。 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting></span><span class="sxs-lookup"><span data-stu-id="9e4a9-316">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event to validate the object to be deleted, to examine data validation errors from the data class, to change a value before the delete operation, or to cancel the delete operation.</span></span> <span data-ttu-id="9e4a9-317">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>イベント<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>のイベントハンドラーにオブジェクトを渡します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-317">The <xref:System.Web.UI.WebControls.LinqDataSource> control passes a <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> object to event handlers for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event.</span></span> <span data-ttu-id="9e4a9-318">オブジェクト<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>には削除されるデータが含まれており、削除操作を取り消すことができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-318">The <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> object contains the data that will be deleted and enables you to cancel the delete operation.</span></span> <span data-ttu-id="9e4a9-319">データクラスが<xref:System.Web.UI.WebControls.LinqDataSourceValidationException>例外をスローした場合<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 、オブジェクトにはその例外<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A>がプロパティに格納されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-319">If the data class throws a <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> exception, the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> object contains that exception in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> property.</span></span>  
  
 <span data-ttu-id="9e4a9-320">イベントの<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>イベントハンドラーで例外がスローされた場合は、そのイベントハンドラーで例外を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-320">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="9e4a9-321">例外は、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>オブジェクトの<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティを使用して、イベントのイベントハンドラーに渡されません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-321">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="9e4a9-322">プロパティ<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>は、イベントの<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>後にスローされる例外のみを格納します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-322">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-323">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>イベントのイベントハンドラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-323">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event.</span></span> <span data-ttu-id="9e4a9-324">このコードは、 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A>プロパティのプロパティおよび Web ページの値に基づいて、削除操作を取り消します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-324">The code cancels the delete operation based on a property in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> property and a value from the Web page.</span></span> <span data-ttu-id="9e4a9-325">この例では、 `OnSale`プロパティがに`true`設定されている場合、ユーザー <xref:System.Web.UI.WebControls.CheckBox>は、レコードを削除する必要があることを確認するためにコントロールを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-325">In the example, when the `OnSale` property is set to `true`, the user must select a <xref:System.Web.UI.WebControls.CheckBox> control to confirm that a record should be deleted.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDelete : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-326"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールを通じてデータ レコードを削除できるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-326">Gets or sets a value that indicates whether data records can be deleted through the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <value><span data-ttu-id="9e4a9-327">削除の自動実行が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-327"><see langword="true" /> if automatic delete operations are enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9e4a9-328">既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-328">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-329">ユーザーが<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> <xref:System.Web.UI.WebControls.LinqDataSource>コントロールを`true`使用してデータレコードを削除できるようにする場合は、プロパティをに設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-329">Set the <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> property to `true` when you want to enable users to delete a data record through the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="9e4a9-330"><xref:System.Web.UI.WebControls.LinqDataSource>が<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> の `true` 場合、コントロールは LINQ to SQL を使用して、データを削除するコマンドを自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-330">When <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> is `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically create the command to delete the data.</span></span> <span data-ttu-id="9e4a9-331"><xref:System.Web.UI.WebControls.DetailsView>コントロールなど、削除するレコードをユーザーが選択できるようにするには、インターフェイスを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-331">You must include an interface that lets users select a record to delete, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span>  
  
 <span data-ttu-id="9e4a9-332">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティまた<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>はプロパティが設定されている場合、自動削除操作をサポートしません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-332">The <xref:System.Web.UI.WebControls.LinqDataSource> control does not support automatic delete operations when the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property or the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is set.</span></span> <span data-ttu-id="9e4a9-333">この場合、削除操作<xref:System.Web.UI.WebControls.LinqDataSource>を実行しようとすると、コントロールは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-333">In that case, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if a delete operation is tried.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-334">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource>が<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>に`true`設定されたコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-334">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> set to `true`.</span></span> <span data-ttu-id="9e4a9-335">コントロール<xref:System.Web.UI.WebControls.DetailsView>はデータを表示し、ユーザーがデータレコードを削除できるようにするボタンを作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-335">A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users delete a data record.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655"><span data-ttu-id="9e4a9-336">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="9e4a9-336">LINQ to SQL</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableInsert : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-337"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールを通じてデータ レコードを挿入できるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-337">Gets or sets a value that indicates whether data records can be inserted through the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <value><span data-ttu-id="9e4a9-338">挿入の自動実行が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-338"><see langword="true" /> if automatic insert operations are enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9e4a9-339">既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-339">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-340">ユーザーが<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> <xref:System.Web.UI.WebControls.LinqDataSource>コントロールを`true`使用して新しいデータレコードを挿入できるようにする場合は、プロパティをに設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-340">Set the <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> property to `true` when you want to enable users to insert a new data record through the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="9e4a9-341"><xref:System.Web.UI.WebControls.LinqDataSource>が<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> の `true` 場合、コントロールは LINQ to SQL を使用して、データを挿入するコマンドを自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-341">When <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> is `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically create the command to insert the data.</span></span> <span data-ttu-id="9e4a9-342">ユーザーが<xref:System.Web.UI.WebControls.DetailsView>コントロールなどの新しいレコードを挿入できるようにするには、インターフェイスを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-342">You must include an interface that lets users insert a new record, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span>  
  
 <span data-ttu-id="9e4a9-343">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>では、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティまた<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>はプロパティが設定されている場合、自動挿入操作はサポートされません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-343">The <xref:System.Web.UI.WebControls.LinqDataSource> control does not support automatic insert operations when the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property or the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is set.</span></span> <span data-ttu-id="9e4a9-344">その場合、挿入操作<xref:System.Web.UI.WebControls.LinqDataSource>が試行されると、コントロールは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-344">In that case, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if an insert operation is tried.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-345">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource>が<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>に`true`設定されたコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-345">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> set to `true`.</span></span> <span data-ttu-id="9e4a9-346">コントロール<xref:System.Web.UI.WebControls.DetailsView>はデータを表示し、ユーザーが新しいレコードを作成して保存できる挿入モードにコントロールを切り替えるボタンを表示します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-346">A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and displays a button that switches the control to insert mode where users can create and save a new record.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655"><span data-ttu-id="9e4a9-347">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="9e4a9-347">LINQ to SQL</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableObjectTracking : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-348">データ コンテキスト オブジェクトの変更履歴を記録するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-348">Gets or sets the value that indicates whether changes to the data context object are tracked.</span></span></summary>
        <value><span data-ttu-id="9e4a9-349">データ コンテキスト オブジェクトの変更履歴を記録する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-349"><see langword="true" /> if the data context object is tracked for changes; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9e4a9-350">既定値は、<see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-350">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-351">プロパティ<xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A>は、LINQ to SQL データコンテキストオブジェクトからデータを選択する場合にのみ使用されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-351">The <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> property is only used when selecting data from a LINQ To SQL data context object.</span></span>  
  
 <span data-ttu-id="9e4a9-352">読み取り専用データを操作する場合、 <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A>プロパティをに設定する`false`と、データがキャッシュされずに変更されたかどうかが判断されるため、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-352">When you are interacting with read-only data, setting the <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> property to `false` improves performance because the data is not cached to determine if it has changed.</span></span> <span data-ttu-id="9e4a9-353">ただし、クエリの遅延実行も無効になります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-353">However, it also disables deferred query execution.</span></span> <span data-ttu-id="9e4a9-354">遅延クエリの実行を使用`true`する場合は、このプロパティをに設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-354">This property must be set to `true` if you want to use deferred query execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableUpdate : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-355"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールを通じてデータ レコードを更新できるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-355">Gets or sets a value that indicates whether data records can be updated through the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <value><span data-ttu-id="9e4a9-356">更新の自動実行が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-356"><see langword="true" /> if automatic update operations are enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9e4a9-357">既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-357">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-358">ユーザーが<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> <xref:System.Web.UI.WebControls.LinqDataSource>コントロールを`true`使用してデータレコードを更新できるようにする場合は、プロパティをに設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-358">Set the <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> property to `true` when you want to enable users to update a data record by using the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="9e4a9-359"><xref:System.Web.UI.WebControls.LinqDataSource>が<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> の `true` 場合、コントロールは LINQ to SQL を使用して、データを更新するコマンドを自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-359">When <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> is `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically create the command to update the data.</span></span> <span data-ttu-id="9e4a9-360">ユーザーが<xref:System.Web.UI.WebControls.DetailsView>コントロールなどのレコードを更新できるようにするには、インターフェイスを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-360">You must include an interface that lets users update a record, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span>  
  
 <span data-ttu-id="9e4a9-361">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティまた<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>はプロパティが設定されている場合に、自動更新操作をサポートしません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-361">The <xref:System.Web.UI.WebControls.LinqDataSource> control does not support automatic update operations when the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property or the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is set.</span></span> <span data-ttu-id="9e4a9-362">この場合、更新操作<xref:System.Web.UI.WebControls.LinqDataSource>を実行しようとすると、コントロールは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-362">In that case, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if an update operation is tried.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-363">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource>が<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>に`true`設定されたコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-363">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> set to `true`.</span></span> <span data-ttu-id="9e4a9-364">コントロール<xref:System.Web.UI.WebControls.DetailsView>はデータを表示し、ユーザーがデータレコードを更新できるようにするボタンを作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-364">A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users update a data record.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="linqDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="viewName"><span data-ttu-id="9e4a9-365">取得するビューの名前。"DefaultView" である必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-365">The name of the view to retrieve, which must be "DefaultView".</span></span></param>
        <summary><span data-ttu-id="9e4a9-366"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> オブジェクトに関連付けられたデータ ソース ビューを返します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-366">Returns the data source view that is associated with the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> object.</span></span></summary>
        <returns><span data-ttu-id="9e4a9-367"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> オブジェクトに関連付けられたデータ ソース ビュー。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-367">The data source view that is associated with the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="9e4a9-368">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>でサポートされるデータソースビューは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-368">The <xref:System.Web.UI.WebControls.LinqDataSource> control supports only one data source view.</span></span> <span data-ttu-id="9e4a9-369">オブジェクト<xref:System.Web.UI.WebControls.LinqDataSourceView>の既定の名前は "DefaultView" です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-369">The <xref:System.Web.UI.WebControls.LinqDataSourceView> object has a default name of "DefaultView".</span></span> <span data-ttu-id="9e4a9-370">オブジェクト<xref:System.Web.UI.WebControls.LinqDataSourceView>は、データソースコントロールの機能を定義し、基になるデータベースからデータを取得して、並べ替え、挿入、削除、更新などの操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-370">The <xref:System.Web.UI.WebControls.LinqDataSourceView> object defines the data source control's capabilities, retrieves data from the underlying database, and performs operations such as sort, insert, delete, and update.</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><p><span data-ttu-id="9e4a9-371">viewName は null (Visual Basic では Nothing)、または "DefaultView" 以外の何か。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-371">viewName is null (Nothing in Visual Basic) or something other than "DefaultView".</span></span></p></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="9e4a9-372">LinqDataSource Web サーバーコントロールの概要</span><span class="sxs-lookup"><span data-stu-id="9e4a9-372">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="9e4a9-373">ASP.NET データ アクセスの概要</span><span class="sxs-lookup"><span data-stu-id="9e4a9-373">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="linqDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e4a9-374"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールに関連付けられたビュー オブジェクトのリストを表す名前のコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-374">Returns a collection of names that represents the list of view objects that are associated with the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <returns><span data-ttu-id="9e4a9-375">"DefaultView" という名前を含む 1 つの要素があるコレクション。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-375">A collection with one element that contains the name "DefaultView".</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="9e4a9-376">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、基になるデータに対して、という名前`DefaultView`のビューを1つだけサポートします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-376">The <xref:System.Web.UI.WebControls.LinqDataSource> control supports only one view on its underlying data, which is named `DefaultView`.</span></span> <span data-ttu-id="9e4a9-377">したがっ`GetViewNames`て、このメソッドは、このビュー名を含む要素を1つだけ持つコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-377">The `GetViewNames` method therefore returns a collection with only one element, which contains this view name.</span></span>

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="9e4a9-378">LinqDataSource Web サーバーコントロールの概要</span><span class="sxs-lookup"><span data-stu-id="9e4a9-378">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="9e4a9-379">ASP.NET データ アクセスの概要</span><span class="sxs-lookup"><span data-stu-id="9e4a9-379">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-380">取得したデータのグループ化に使用するプロパティを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-380">Gets or sets a value that specifies which properties are used for grouping the retrieved data.</span></span></summary>
        <value><span data-ttu-id="9e4a9-381">Group By 句の作成に使用される文字列。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-381">A string that is used to create the Group By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-382"><xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティを使用して、同じ値を持つデータレコードを統合するために使用するプロパティを指定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-382">You use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to specify which properties are used for consolidating data records that have the same values.</span></span> <span data-ttu-id="9e4a9-383">たとえば、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティをに`Name`設定すると、同じ`Name`プロパティ値を持つクエリ内のすべてのレコードが1つの統合レコードとして返されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-383">For example, if you set the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to `Name`, all the records in the query that have the same `Name` property value are returned as a single consolidated record.</span></span>  
  
 <span data-ttu-id="9e4a9-384">`new`関数のすべてのプロパティを囲み、コンマ<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>を使用して各プロパティを区切ることによって、プロパティに複数のプロパティを割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-384">You can assign more than one property to the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property by enclosing all the properties in the `new` function and separating each property by using a comma.</span></span> <span data-ttu-id="9e4a9-385">たとえば`Name` 、プロパティ`Category`でグループ化するには、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティをに`new(Name, Category)`設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-385">For example, to group by the properties `Name` and then `Category`, set the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to `new(Name, Category)`.</span></span>  
  
 <span data-ttu-id="9e4a9-386">グループ化に使用されるプロパティの値は、という名前`Key`の生成されたプロパティを通じて返されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-386">The values in the property that are used for grouping are returned through a generated property named `Key`.</span></span> <span data-ttu-id="9e4a9-387">グループ化さ`Key`れた値<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>を取得するには、プロパティにプロパティを含めます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-387">You include the `Key` property in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to retrieve the grouped values.</span></span> <span data-ttu-id="9e4a9-388">キーワード `As` を使用し`Key`てプロパティを別名に設定できますが、別名を使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-388">You can set the `Key` property to an alias by using the `As` keyword, but you are not required to use an alias.</span></span> <span data-ttu-id="9e4a9-389">たとえば、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティをという名前`Category`のプロパティに設定できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-389">For example, you might set the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to a property named `Category`.</span></span> <span data-ttu-id="9e4a9-390">プロパティをに`Category` <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>設定する`new(Key As ProductCategory)`と、プロパティから統合された値を取得できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-390">You can retrieve the consolidated values from the `Category` property by setting the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to `new(Key As ProductCategory)`.</span></span>  
  
 <span data-ttu-id="9e4a9-391">`It` プロパティ <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> にプロパティを含めることで、グループ内の個々のレコードにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-391">You can access the individual records in a grouping by including the `It` property in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="9e4a9-392">プロパティ`It`は、グループ化されたプロパティの値を共有するレコードのコレクションを格納します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-392">The `It` property contains a collection of records that share a value in the grouped property.</span></span> <span data-ttu-id="9e4a9-393">`It`プロパティを繰り返し処理して、個々のレコードを取得できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-393">You can iterate over the `It` property to retrieve the individual records.</span></span>  
  
 <span data-ttu-id="9e4a9-394">プロパティ<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>は、多くの場合、集計メソッドと共に使用されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-394">The <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is often used with aggregation methods.</span></span> <span data-ttu-id="9e4a9-395">次の集計メソッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-395">You can use the following aggregate methods:</span></span>  
  
-   `Count()`  
  
-   <span data-ttu-id="9e4a9-396">`Average(`*列*`)`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-396">`Average(` *column* `)`</span></span>  
  
-   <span data-ttu-id="9e4a9-397">`Sum(`*列*`)`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-397">`Sum(` *column* `)`</span></span>  
  
-   <span data-ttu-id="9e4a9-398">`Max(`*列*`)`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-398">`Max(` *column* `)`</span></span>  
  
-   <span data-ttu-id="9e4a9-399">`Min(`*列*`)`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-399">`Min(` *column* `)`</span></span>  
  
-   <span data-ttu-id="9e4a9-400">`Where(`*条件*`)`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-400">`Where(` *condition* `)`</span></span>  
  
-   `Any()`  
  
-   <span data-ttu-id="9e4a9-401">`All(`*条件*`)`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-401">`All(` *condition* `)`</span></span>  
  
 <span data-ttu-id="9e4a9-402">詳細については、「 [NIB: Linqdatasource Web サーバーコントロールの概要](https://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136)」および「[方法: Linqdatasource コントロールを使用してデータをグループ化および集計](https://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-402">For more information, see [NIB: LinqDataSource Web Server Control Overview](https://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) and [How to: Group and Aggregate Data Using the LinqDataSource Control](https://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-403">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource>という名前`Category`のプロパティによって返されたデータをグループ化するコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-403">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that groups the returned data by a property named `Category`.</span></span> <span data-ttu-id="9e4a9-404">共有値を返し、グループ化されたレコードの平均価格を計算します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-404">It returns the shared values and calculates the average price for the grouped records.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 <span data-ttu-id="9e4a9-405">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource> 2 つの列でグループ化するように構成されたコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-405">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns.</span></span> <span data-ttu-id="9e4a9-406">プロパティ`Key`は、 `ProductCategory`とと`Color`いう2つのプロパティを持つオブジェクトを参照します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-406">The `Key` property references an object that has two properties, `ProductCategory` and `Color`.</span></span> <span data-ttu-id="9e4a9-407">によって`It`表されるオブジェクト`Products`の名前が変更されました。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-407">The object represented by `It` is renamed `Products`.</span></span> <span data-ttu-id="9e4a9-408">名前が`Products`変更されたオブジェクトには、グループ内の個々のレコードのコレクションが含まれ、各インスタンスには Products テーブルのすべての列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-408">The renamed `Products` object contains a collection of the individual records in a grouping, and each instance contains all the columns from the Products table.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 <span data-ttu-id="9e4a9-409">次の例では<xref:System.Web.UI.WebControls.ListView> 、前の例の<xref:System.Web.UI.WebControls.LinqDataSource>コントロールからデータを表示するための2つのコントロールを示します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-409">The following example shows two <xref:System.Web.UI.WebControls.ListView> controls for displaying the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example.</span></span> <span data-ttu-id="9e4a9-410">1 <xref:System.Web.UI.WebControls.ListView>つのコントロールにグループ化され<xref:System.Web.UI.WebControls.ListView>たデータが表示され、もう一方のコントロールには、そのグループに属する製品の個別の名前が表示されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-410">One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group.</span></span> <span data-ttu-id="9e4a9-411">入れ子になったデータバインドコントロール<xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A>のプロパティは、 `Products` `It`オブジェクトの別名であるに設定されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-411">The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GroupByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-412">Group By 句の作成に使用されるパラメーターのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-412">Gets the collection of parameters that are used to create the Group By clause.</span></span></summary>
        <value><span data-ttu-id="9e4a9-413">Group By 句の作成に使用されるパラメーター。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-413">The parameters that are used to create the Group By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-414">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>コレクションのパラメーターを使用して、実行時に group by 句を作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-414">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection to create the Group By clause at run time.</span></span> <span data-ttu-id="9e4a9-415">通常、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>コレクションを使用してデータをグループ化することはありません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-415">Typically you will not use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection to group data.</span></span> <span data-ttu-id="9e4a9-416">代わりに、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-416">Instead, you can use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property.</span></span> <span data-ttu-id="9e4a9-417"><xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>コレクションを使用するのは、Group by 句の値を実行時に設定する必要があり、その値がプロパティ名ではない場合のみです。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-417">You use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection only when a value in the Group By clause must be set at run time and that value is not a property name.</span></span> <span data-ttu-id="9e4a9-418">たとえば、データレコードの<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>プロパティが`LastName`ユーザーによって指定された値と等しいかどうかに基づいてデータをグループ化するには、コレクションを使用します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-418">For example, use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection to group data based on whether the `LastName` property in the data records equals a value provided by the user.</span></span>  
  
 <span data-ttu-id="9e4a9-419">プロパティでデータをグループ化する必要があり、そのプロパティを実行時に設定する必要がない場合は、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティで grouping プロパティを定義できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-419">If you want to group data by a property and that property does not have to be set at run time, you can define the grouping property in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property.</span></span> <span data-ttu-id="9e4a9-420">たとえば、によって`LastName`グループ化されたデータベーステーブルから値を返すには、パラメーターを指定せずに "LastName" に設定<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-420">For example, to return values from a database table grouped by `LastName`, set <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> to "LastName" without any parameters.</span></span> <span data-ttu-id="9e4a9-421">プロパティによってデータを動的にグループ化する場合は、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベントのイベントハンドラーを作成し、必要に応じて<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティをカスタマイズします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-421">If you want to dynamically group data by a property, create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event and customize the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property as needed.</span></span>  
  
 <span data-ttu-id="9e4a9-422"><xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>コレクション内のパラメーターの値として、プロパティの名前を割り当てることはできません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-422">You cannot assign the name of a property as the value for a parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection.</span></span> <span data-ttu-id="9e4a9-423">実行時に設定する<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>必要がある条件を<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>プロパティに追加する場合は、コレクションにパラメーターを追加します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-423">You add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection when you want to add a condition to the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property that must be set at run time.</span></span>  
  
 <span data-ttu-id="9e4a9-424"><xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>コレクション内の値を設定するには、各パラメーターに名前を割り当ててから、その名前<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>付きパラメーターのプロパティにプレースホルダーを追加します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-424">To set values in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection, you assign a name to each parameter and then add a placeholder in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property for that named parameter.</span></span> <span data-ttu-id="9e4a9-425">Group By 句で、各パラメーター名の先頭に @ 記号を付けます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-425">In the Group By clause, preface each parameter name with the @ symbol.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="member this.Insert : System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Insert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="9e4a9-426">データ ソースに挿入する行の値。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-426">The row values to be inserted into the data source.</span></span></param>
        <summary><span data-ttu-id="9e4a9-427">挿入の操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-427">Performs an insert operation.</span></span></summary>
        <returns><span data-ttu-id="9e4a9-428">挿入操作の影響を受けた行の数。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-428">The number of rows affected by the insert operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-429">通常、コードから<xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>メソッドを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-429">Typically, you do not have to call the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method from your code.</span></span> <span data-ttu-id="9e4a9-430">データバインドコントロールは、ユーザーが新しいレコード<xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>を挿入するアクションを実行すると、自動的にメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-430">The data-bound control will automatically call the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method when the user takes action to insert a new record.</span></span> <span data-ttu-id="9e4a9-431">データを挿入する<xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>ための独自のプロセスを作成する場合は、明示的にメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-431">You explicitly call the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method when you want to create your own process for inserting data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-432">次の例は、ユーザーがボタンをクリックした後に、プログラムによってデータソースに新しいレコードを挿入する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-432">The following example shows how to programmatically insert a new record in the data source after the user clicks a button.</span></span> <span data-ttu-id="9e4a9-433">このコードは、 <xref:System.Collections.Specialized.ListDictionary>既定値を含むオブジェクトを<xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-433">The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains default values to the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 <span data-ttu-id="9e4a9-434">次の例は、前の例のマークアップを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-434">The following example shows the markup for the previous example.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Inserted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-435">挿入操作が終了したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-435">Occurs when an insert operation has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-436">挿入操作<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>から例外をキャッチしたり、挿入操作の完了後に値を調べたりするには、イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-436">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event to catch any exceptions from the insert operation or to examine the values after the insert operation has finished.</span></span> <span data-ttu-id="9e4a9-437">イベントハンドラーに渡される<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>オブジェクトを使用して、新しい値を取得できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-437">You can retrieve the new values through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span> <span data-ttu-id="9e4a9-438">たとえば、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>オブジェクトを使用して、データベースによって生成された新しいデータレコードの id プロパティを取得できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-438">For example, you can use the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object to retrieve the identity property generated by a database for a new data record.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-439">次の例では、例外を確認し、新しい<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>レコードの identity プロパティを取得するイベントのイベントハンドラーを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-439">The following example shows how to create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event that checks for exceptions and retrieves the identity property for the new record.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " Usage="member this.Inserting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-440">挿入操作の前に発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-440">Occurs before an insert operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-441"><xref:System.Web.UI.WebControls.LinqDataSource.Inserting>イベントを処理して、挿入するオブジェクトの検証、データクラスからのデータの検証エラーの調査、挿入操作の前の値の変更、または挿入操作のキャンセルを行います。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-441">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event to validate the object to be inserted, to examine data validation errors from the data class, to change a value before the insert operation, or to cancel the insert operation.</span></span> <span data-ttu-id="9e4a9-442">このイベントのイベントハンドラーに渡されるオブジェクトには、データソースに挿入する新しいオブジェクトが含まれています。 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs></span><span class="sxs-lookup"><span data-stu-id="9e4a9-442">The <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object passed to event handlers for this event contains the new object to insert in the data source.</span></span>  
  
 <span data-ttu-id="9e4a9-443">挿入操作中に検証エラーが発生した場合<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 、オブジェクトには、データクラスによってスローされた検証例外が含まれます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-443">If a validation error occurs during the insert operation, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains the validation exceptions that are thrown by the data class.</span></span> <span data-ttu-id="9e4a9-444">挿入する値がデータクラスのプロパティの型と一致しない場合、またはカスタム検証チェックに合格しなかった場合は、検証エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-444">A validation error occurs if a value to be inserted does not match the type of the property in the data class, or if it does not pass a custom validation check.</span></span> <span data-ttu-id="9e4a9-445"><xref:System.Web.UI.WebControls.LinqDataSource.Inserting>イベントのイベントハンドラーでは、検証例外を取得して適切なアクションを実行できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-445">In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event, you can retrieve the validation exceptions and take appropriate action.</span></span>  
  
 <span data-ttu-id="9e4a9-446">イベントの<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>イベントハンドラーで例外がスローされた場合は、そのイベントハンドラーで例外を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-446">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="9e4a9-447">例外は、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>オブジェクトの<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティを使用して、イベントのイベントハンドラーに渡されません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-447">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="9e4a9-448">プロパティ<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>は、イベントの<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>後にスローされる例外のみを格納します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-448">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-449">次の例は、挿入操作の前<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>にデータを変更するイベントのイベントハンドラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-449">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event that modifies data before the insert operation.</span></span> <span data-ttu-id="9e4a9-450"><xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A>プロパティからのオブジェクトは、という名前`Product`の型にキャストされます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-450">The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`.</span></span> <span data-ttu-id="9e4a9-451">オブジェクトのプロパティは、現在の日付と時刻に設定されます。 `DateModified` `Product`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-451">The `DateModified` property of the `Product` object is set to the current date and time.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 <span data-ttu-id="9e4a9-452">次の例は、検証例外を取得<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>するイベントのイベントハンドラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-452">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event that retrieves validation exceptions.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 <span data-ttu-id="9e4a9-453">前の例では、検証例外を取得します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-453">The previous example retrieves validation exceptions.</span></span> <span data-ttu-id="9e4a9-454">値がプロパティの型と一致しない場合、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-454">An exception might be thrown if a value does not match the type of the property.</span></span> <span data-ttu-id="9e4a9-455">また、次の例に示すように、カスタマイズされたチェックからもスローされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-455">It might also be thrown from a customized check such as the one in the following example.</span></span> <span data-ttu-id="9e4a9-456">メソッドは、 `Age`プロパティの数値が負でないことを確認します。 `OnAgeChanging`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-456">The `OnAgeChanging` method checks that the number for the `Age` property is not negative.</span></span>  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-457">挿入の操作中に使用されるパラメーターのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-457">Gets the collection of parameters that are used during an insert operation.</span></span></summary>
        <value><span data-ttu-id="9e4a9-458">挿入の操作中に使用されるパラメーターのコレクション。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-458">The parameters that are used during an insert operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-459">通常、挿入操作に必要な値は、データバインドコントロールに<xref:System.Web.UI.WebControls.LinqDataSource>よってコントロールに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-459">Typically the values that are needed for an insert operation are passed to the <xref:System.Web.UI.WebControls.LinqDataSource> control by the data-bound control.</span></span> <span data-ttu-id="9e4a9-460">既定値を指定する場合、または空の値をに`null`変換するかどうかを定義する場合は、insert パラメーターを指定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-460">You specify insert parameters when you want to provide a default value or define whether to convert empty values to `null`.</span></span> <span data-ttu-id="9e4a9-461">ユーザーが値を指定しなかった場合に処理する必要がある値に対してのみ、挿入されるすべての値に対してパラメーターを指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-461">You do not have to provide a parameter for every value that will be inserted, only for the values that must be handled when the user does not provide a value.</span></span>  
  
 <span data-ttu-id="9e4a9-462"><xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>コレクションで指定した値は、データソースで定義されているがデータコントロールにバインドされていないフィールドに対してのみ使用されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-462">The values that you provide in the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection are used only for fields that are defined in the data source but that are not bound in the data control.</span></span> <span data-ttu-id="9e4a9-463">たとえば、データベーステーブルに、name、address、および郵便<xref:System.Web.UI.WebControls.ListView>番号という名前の列があり、そのテーブルにバインドされているコントロールが、name フィールドと address フィールドにのみバインドされているとします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-463">For example, suppose a database table has columns that are named Name, Address, and PostalCode, but a <xref:System.Web.UI.WebControls.ListView> control that is bound to the table is bound only to the Name and Address fields.</span></span> <span data-ttu-id="9e4a9-464"><xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>コレクション内の値は、郵便番号フィールドに対してのみ使用されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-464">The values in the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection will be used only for the PostalCode field.</span></span> <span data-ttu-id="9e4a9-465">名前とアドレスフィールドには使用されません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-465">They will not be used for the Name and Address field.</span></span> <span data-ttu-id="9e4a9-466">これは、これらのフィールドに値が入力されていない場合でも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-466">This is true even if no value is entered for those fields.</span></span> <span data-ttu-id="9e4a9-467">データバインドコントロールがデータソース内のすべてのフィールドに対してフィールドを自動生成する場合は<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 、コレクションの値は使用されません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-467">If the data-bound control autogenerates fields for all fields in the data source, no values from the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection will be used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-468">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>コレクションの既定値を提供するパラメーターを持つコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-468">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with a parameter that provides a default value in the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection.</span></span> <span data-ttu-id="9e4a9-469">ユーザーが`Category`プロパティの値を指定しなかった場合は、パラメーターによって指定された既定値がデータベースに保存されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-469">If the user does not provide a value for the `Category` property, the default value that is provided by the parameter is saved in the database.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="linqDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="savedState"><span data-ttu-id="9e4a9-470"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールの状態を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-470">An object that represents the state of the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></param>
        <summary><span data-ttu-id="9e4a9-471">永続化する必要がある <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロール内の値の状態を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-471">Loads the state of the values in the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control that must be persisted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="9e4a9-472">メソッドは、以前に保存した<xref:System.Web.UI.WebControls.LinqDataSource>コントロールのビューステートを読み込むために使用されます。 `LoadViewState`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-472">The `LoadViewState` method is used to load the previously saved view state of the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span>

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="9e4a9-473">LinqDataSource Web サーバーコントロールの概要</span><span class="sxs-lookup"><span data-stu-id="9e4a9-473">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="9e4a9-474">ASP.NET データ アクセスの概要</span><span class="sxs-lookup"><span data-stu-id="9e4a9-474">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="linqDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9e4a9-475">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-475">The event data.</span></span></param>
        <summary><span data-ttu-id="9e4a9-476"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> オブジェクトを初期化します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-476">Initializes the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="linqDataSource.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9e4a9-477">イベント データを格納している <see cref="T:System.EventArgs" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-477">An <see cref="T:System.EventArgs" /> object that contains the event data.</span></span></param>
        <summary><span data-ttu-id="9e4a9-478"><see cref="E:System.Web.UI.Control.Unload" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-478">Raises the <see cref="E:System.Web.UI.Control.Unload" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-479">取得したデータの並べ替えに使用するフィールドを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-479">Gets or sets a value that specifies which fields are used for ordering the retrieved data.</span></span></summary>
        <value><span data-ttu-id="9e4a9-480">Order By 句の作成に使用される文字列。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-480">A string that is used to create the Order By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-481"><xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティを使用して、返されたデータから並べ替えに使用するプロパティを指定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-481">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to specify which properties from the returned data to use for sorting.</span></span> <span data-ttu-id="9e4a9-482">データの並べ替えに使用するプロパティは、元のデータソースに存在している必要がありますが、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティに含める必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-482">The property for sorting the data must exist in the original data source, but it does not have to be included in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="9e4a9-483">順序付けされたデータ`Ascending`の取得`Descending`方法を指定するために、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>スペース`ASC`、、、、または`DESC`を文字列のプロパティに追加できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-483">You can add a space and `Ascending`, `ASC`, `Descending`, or `DESC` to a property in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> string in order to specify how the ordered data is returned.</span></span>  
  
 <span data-ttu-id="9e4a9-484">コンマを使用して各プロパティを区切る<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>ことによって、プロパティに複数のプロパティを指定できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-484">You can provide more than one property in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property by separating each property by using a comma.</span></span> <span data-ttu-id="9e4a9-485">たとえば、とと`LastName` `FirstName`いう名前のプロパティを使用するに<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>は、プロパティを "LastName, FirstName" に設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-485">For example, to order by properties named `LastName` and `FirstName`, set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to "LastName, FirstName".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9e4a9-486"><xref:System.Web.UI.WebControls.LinqDataSource>コントロールをまた<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>は[!INCLUDE[ss2k](~/includes/ss2k-md.md)] [!INCLUDE[ssEW](~/includes/ssew-md.md)]と共に使用し<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 、プロパティをに`true`設定する場合は、プロパティで値を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-486">When you use the <xref:System.Web.UI.WebControls.LinqDataSource> control with [!INCLUDE[ss2k](~/includes/ss2k-md.md)] or [!INCLUDE[ssEW](~/includes/ssew-md.md)] and the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is set to `true`, you must provide a value in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="9e4a9-487">既定では、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>プロパティは`true`です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-487">By default, the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is `true`.</span></span> <span data-ttu-id="9e4a9-488"><xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティに値を割り当てる場合は、クエリで返されるプロパティの一覧にすべての id 列を含める必要もあります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-488">If you assign a value to the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, you must also include all identity columns in the list of properties that is returned in the query.</span></span>  
  
 <span data-ttu-id="9e4a9-489">プロパティが<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>に`true`設定されている場合、データバインドコントロールは、実行時に<xref:System.Web.UI.WebControls.LinqDataSource>コントロールに並べ替え式を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-489">If the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property is set to `true`, a data-bound control can pass a sort expression to the <xref:System.Web.UI.WebControls.LinqDataSource> control at run time.</span></span> <span data-ttu-id="9e4a9-490">コントロールは、プロパティを<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>適用した後、データバインドコントロールから並べ替え式を適用します。 <xref:System.Web.UI.WebControls.LinqDataSource></span><span class="sxs-lookup"><span data-stu-id="9e4a9-490">The <xref:System.Web.UI.WebControls.LinqDataSource> control will apply the sort expression from the data-bound control after it applies the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="9e4a9-491">したがって、データバインドコントロールからの並べ替え式に従ってデータが返されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-491">Therefore, the data is returned according to the sort expression from the data-bound control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-492">次の例では、 `Category`プロパティの値に基づいてアルファベット順で逆順にデータを返します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-492">The following example returns data in reverse alphabetical order based on values in the `Category` property.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-493">Order By 句の作成に使用されるパラメーターのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-493">Gets the collection of parameters that are used to create the Order By clause.</span></span></summary>
        <value><span data-ttu-id="9e4a9-494">Order By 句の作成に使用されるパラメーター。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-494">The parameters that are used for creating the Order By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-495">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>コレクションのパラメーターを使用して、実行時に order by 句を作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-495">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection to create the Order By clause at run time.</span></span> <span data-ttu-id="9e4a9-496">通常、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> コレクション <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> にパラメーターを`true`追加するときに、プロパティをに設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-496">Typically you set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property to `true` when you add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="9e4a9-497">プロパティがに`true`設定されている場合<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 、コレクション内の各パラメーターは、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>コレクションで指定されている順序で order By 句に追加されます。 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A></span><span class="sxs-lookup"><span data-stu-id="9e4a9-497">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property is set to `true`, each parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection is added to the Order By clause in the sequence that they are specified in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="9e4a9-498"><xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>プロパティが `true` の場合、パラメーターはシーケンスで適用され、プレースホルダーとは一致しないため、名前を付ける必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-498">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property is `true`, the parameters do not have to be named because they are applied in sequence and are not matched to a placeholder.</span></span>  
  
 <span data-ttu-id="9e4a9-499">実行時に Order by 句で値を設定する必要がない場合は、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>コレクションを使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-499">If you do not have to set a value at run time in the Order By clause, you do not have to use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="9e4a9-500"><xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティでデータを並べ替えるために使用するフィールドを定義できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-500">You can define the fields to use for ordering the data in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="9e4a9-501">たとえば、によって`LastName`並べ替えられたデータベーステーブルから値を返すには、パラメーターを指定せずに "LastName" に設定<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-501">For example, to return values from a database table ordered by `LastName`, set <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> to "LastName" without any parameters.</span></span>  
  
 <span data-ttu-id="9e4a9-502"><xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>コレクションでパラメーターを設定し、パラメーターを<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>プロパティのプレースホルダーに一致させることができますが、この方法ではアプリケーションが制限されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-502">You can set parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection and match the parameters to placeholders in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property, but this approach has limited application.</span></span> <span data-ttu-id="9e4a9-503">この方法を使用する場合、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>コレクション内のパラメーターは列名を表すことができません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-503">When you use this approach, the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection cannot represent a column name.</span></span> <span data-ttu-id="9e4a9-504">パラメーターを値に設定し、その値をプロパティの値と比較することができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-504">You can set a parameter to a value and then compare that value to values in a property.</span></span> <span data-ttu-id="9e4a9-505">たとえば、プロパティの値が、パラメーターによって表される実行時の値よりも小さいかどうかに基づいてデータを並べ替えることができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-505">For example, you can order the data based on whether the values in a property are less than the run-time value represented by the parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-506">次の例は、<xref:System.Web.UI.WebControls.LinqDataSource> プロパティが <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> に設定された `true` コントロールを示したものです。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-506">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property set to `true`.</span></span> <span data-ttu-id="9e4a9-507">パラメーターは、ユーザーが<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> <xref:System.Web.UI.WebControls.DropDownList>コントロールから選択したプロパティ名に基づいてデータを並べ替えるコレクションに含まれます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-507">A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-508">グループ化されたデータの並べ替えに使用するフィールドを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-508">Gets or sets the fields that are used for ordering grouped data.</span></span></summary>
        <value><span data-ttu-id="9e4a9-509">Order Groups By 句の作成に使用される文字列。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-509">A string that is used to create the Order Groups By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-510"><xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>プロパティを使用して、データのグループの並べ替え方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-510">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property to specify how the groups of data are sorted.</span></span> <span data-ttu-id="9e4a9-511">たとえば、 `CategoryID`プロパティでグループ化し、各カテゴリ ID グループを`Price`プロパティの平均によって並べ替えることができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-511">For example, you can group by the `CategoryID` property and then sort each category ID group by the average of the `Price` property.</span></span>  
  
 <span data-ttu-id="9e4a9-512"><xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>プロパティを設定できるのは、データをグループ化した場合のみです。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-512">You can set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property only when you have grouped the data.</span></span> <span data-ttu-id="9e4a9-513">プロパティを設定せ<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>ず<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>にプロパティを設定した<xref:System.Web.UI.WebControls.LinqDataSource>場合、コントロールは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-513">If you set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property without setting the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception.</span></span>  
  
 <span data-ttu-id="9e4a9-514">データの並べ替えに使用されるプロパティは、データのグループ化に使用されるプロパティか、グループ化されたデータに対する集計関数の結果である必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-514">The property that is used to sort the data must be either a property that is used to group the data, or the result of an aggregation function on the grouped data.</span></span> <span data-ttu-id="9e4a9-515">データの並べ替え方法を指定するには、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>文字列のプロパティ名にスペースと文字列 "昇順"、"ASC"、"降順"、または "DESC" を追加します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-515">To specify how the data is sorted, you can add a space and the string "Ascending", "ASC", "Descending", or "DESC" to a property name in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> string.</span></span>  
  
 <span data-ttu-id="9e4a9-516">プロパティには、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>複数のプロパティを指定できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-516">You can specify more than one property in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property.</span></span> <span data-ttu-id="9e4a9-517">コンマを使用して、各プロパティを区切ります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-517">Separate each property by using a comma.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-518">次の例では、2つのプロパティを使用してデータをグループ化する方法と、これらのプロパティのいずれかを使用してグループ化されたデータを並べ替える方法を示します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-518">The following example shows how to group the data by using two properties, and how to sort the grouped data by using one of those properties.</span></span> <span data-ttu-id="9e4a9-519">という名前のテーブル`Products`のデータは、とと`Discontinued`いう`CategoryID`名前のプロパティを使用してグループ化されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-519">The data from a table named `Products` is grouped by using properties named `CategoryID` and `Discontinued`.</span></span> <span data-ttu-id="9e4a9-520">グループ化されたデータは`CategoryID` 、プロパティによって並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-520">The grouped data is sorted by the `CategoryID` property.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 <span data-ttu-id="9e4a9-521">次の例は、プロパティを使用してデータをグループ化する方法と、集計関数の結果に基づいてデータを並べ替える方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-521">The following example shows how to group the data by using a property, and how to sort it based on the results of an aggregation function.</span></span> <span data-ttu-id="9e4a9-522">`Products`テーブルのデータは、 `CategoryID`プロパティを使用してグループ化されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-522">The data from the `Products` table is grouped by using the `CategoryID` property.</span></span> <span data-ttu-id="9e4a9-523">各グループ内の`UnitPrice`プロパティの平均値に基づいて並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-523">It is sorted based on the average of the `UnitPrice` property within each group.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-524">Order Groups By 句の作成に使用されるパラメーターのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-524">Gets the collection of parameters that are used to create the Order Groups By clause.</span></span></summary>
        <value><span data-ttu-id="9e4a9-525">Order Groups By 句の作成に使用されるパラメーター。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-525">The parameters that are used to create the Order Groups By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-526">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>コレクションのパラメーターを使用して、実行時に order Groups by 句を作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-526">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection to create the Order Groups By clause at run time.</span></span>  
  
 <span data-ttu-id="9e4a9-527"><xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>コレクションに値を追加するのは、Order Groups by 句で実行時に値を設定する必要がある場合のみです。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-527">You add values to the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection only when you must set values at run time in the Order Groups By clause.</span></span> <span data-ttu-id="9e4a9-528"><xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>プロパティを使用して、データの並べ替えに使用するフィールドを定義できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-528">You can define the fields that are used to order the data by using the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property.</span></span>  
  
 <span data-ttu-id="9e4a9-529"><xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>コレクションでパラメーターを設定し、パラメーターを<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>プロパティのプレースホルダーに一致させることができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-529">You can set parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection and match the parameters to placeholders in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property.</span></span> <span data-ttu-id="9e4a9-530">ただし、この方法を使用する場合、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>コレクション内のパラメーターは列名を表すことはできません。値を表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-530">However, when you use this approach, the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection cannot represent a column name; they must represent values.</span></span> <span data-ttu-id="9e4a9-531">パラメーターを値に設定し、その値をプロパティと比較することができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-531">You can set a parameter to a value and then compare that value to a property.</span></span> <span data-ttu-id="9e4a9-532">たとえば、プロパティの値が、パラメーターによって表される実行時の値よりも小さいかどうかに基づいてデータを並べ替えることができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-532">For example, you can order the data based on whether the values in a property are less than the run-time value represented by the parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="linqDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e4a9-533"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールの現在のビューステートを保存します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-533">Saves the current view state of the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <returns><span data-ttu-id="9e4a9-534"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールについて前回保存した状態を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-534">An object that contains the saved state of the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="9e4a9-535">LinqDataSource Web サーバーコントロールの概要</span><span class="sxs-lookup"><span data-stu-id="9e4a9-535">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="9e4a9-536">ASP.NET データ アクセスの概要</span><span class="sxs-lookup"><span data-stu-id="9e4a9-536">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Select : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-537">取得したデータに含まれるプロパティと計算値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-537">Gets or sets the properties and calculated values that are included in the retrieved data.</span></span></summary>
        <value><span data-ttu-id="9e4a9-538">Select 句の作成に使用される文字列。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-538">A string that is used to create the Select clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-539"><xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティを設定しない場合、コントロールは<xref:System.Web.UI.WebControls.LinqDataSource>データオブジェクトからすべてのプロパティ (データ列) を取得します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-539">If you do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves all the properties (data columns) from the data object.</span></span> <span data-ttu-id="9e4a9-540"><xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティを使用して、オブジェクトからプロパティのサブセットを取得したり、データを取得するときに新しい値を計算したりします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-540">You use the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to retrieve a subset of properties from the object or to calculate new values when the data is being retrieved.</span></span>  
  
 <span data-ttu-id="9e4a9-541">取得するプロパティを指定するには、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティに、返されたデータに含めるプロパティの名前を設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-541">You specify which properties to retrieve by setting the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to the names of the properties that you want to include in the returned data.</span></span>  
  
 <span data-ttu-id="9e4a9-542">データオブジェクトからプロパティのサブセットを取得する場合、コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティで指定したプロパティのみを含むクラスを動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-542">If you retrieve a subset of properties from the data object, the <xref:System.Web.UI.WebControls.LinqDataSource> control dynamically creates a class that contains only the properties that you specify in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="9e4a9-543">データオブジェクトのプロパティではないプロパティを計算する場合は、クラスも動的に作成されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-543">A class is also created dynamically if you calculate properties that are not properties in the data object.</span></span> <span data-ttu-id="9e4a9-544">このような場合、クエリから返されるオブジェクトは、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティで指定されているクラスのインスタンスではありません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-544">In these cases, the object returned from the query is not an instance of the class that is specified in the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property.</span></span> <span data-ttu-id="9e4a9-545">代わりに、 `new` <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティのメソッドを使用して、新しいクラスがクエリから返されることを示す必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-545">Instead, you must use the `new` method in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to indicate that a new class is returned from the query.</span></span> <span data-ttu-id="9e4a9-546">`FirstName`たとえば、 `LastName` これらのプロパティを `new(FirstName, LastName)` 含むオブジェクトからプロパティとプロパティのみを返すには、プロパティをに設定します。 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A></span><span class="sxs-lookup"><span data-stu-id="9e4a9-546">For example, to return only the `FirstName` and `LastName` properties from an object that contains more than these properties, set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to `new(FirstName, LastName)`.</span></span> <span data-ttu-id="9e4a9-547">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、 `new`メソッドで指定した新しいクラスを動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-547">The <xref:System.Web.UI.WebControls.LinqDataSource> control will dynamically create the new class that you specified in the `new` method.</span></span>  
  
 <span data-ttu-id="9e4a9-548">キーワードを使用し`As`て、選択した値に別名を割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-548">You can use the `As` keyword to assign an alias to a selected value.</span></span> <span data-ttu-id="9e4a9-549">エイリアスを割り当てる場合は、 `new`メソッドにエイリアス化されたプロパティを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-549">If you assign an alias, you must include the aliased properties in the `new` method.</span></span> <span data-ttu-id="9e4a9-550">コントロールの<xref:System.Web.UI.WebControls.LinqDataSource>結果にバインドするデータバインドコントロールは、別名によってプロパティを参照する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-550">Any data-bound control that binds to the results from the <xref:System.Web.UI.WebControls.LinqDataSource> control must refer to the property by the alias.</span></span> <span data-ttu-id="9e4a9-551">たとえば、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティをに`new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`設定する`SalesRegion`と、データバインドコントロールはと`RevenueThousands`の2つのプロパティにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-551">For example, if you set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, the data-bound control can access two properties, `SalesRegion` and `RevenueThousands`.</span></span>  
  
 <span data-ttu-id="9e4a9-552">次の表`new`に示す条件<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>に従って、プロパティで関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-552">You use the `new` function in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property according to the conditions listed in the following table.</span></span>  
  
|<span data-ttu-id="9e4a9-553">選択</span><span class="sxs-lookup"><span data-stu-id="9e4a9-553">Select</span></span>|<span data-ttu-id="9e4a9-554">New の使用</span><span class="sxs-lookup"><span data-stu-id="9e4a9-554">Use of new</span></span>|<span data-ttu-id="9e4a9-555">例</span><span class="sxs-lookup"><span data-stu-id="9e4a9-555">Example</span></span>|  
|------------|----------------|-------------|  
|<span data-ttu-id="9e4a9-556">1つのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-556">Single property.</span></span>|<span data-ttu-id="9e4a9-557">`new`必要ありません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-557">`new` not needed.</span></span>|`Select="Category"`|  
|<span data-ttu-id="9e4a9-558">複数のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-558">Multiple properties.</span></span>|<span data-ttu-id="9e4a9-559">`new`不要.</span><span class="sxs-lookup"><span data-stu-id="9e4a9-559">`new` needed.</span></span>|`Select="new(Category, Name)"`|  
|<span data-ttu-id="9e4a9-560">エイリアスを持つ1つまたは複数のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-560">Single or multiple properties that have an alias.</span></span>|<span data-ttu-id="9e4a9-561">`new`不要.</span><span class="sxs-lookup"><span data-stu-id="9e4a9-561">`new` needed.</span></span>|`Select="new(Category As CategoryGroup)"`|  
  
 <span data-ttu-id="9e4a9-562">自動データ変更を有効にし、データオブジェクトのすべてのプロパティを表示しない場合は、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティを設定しないでください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-562">If you want to enable automatic data modifications, but you do not want to display all the properties from the data object, do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="9e4a9-563">代わりに、データバインドコントロールを使用して表示を管理します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-563">Instead, manage the display through the data-bound control.</span></span> <span data-ttu-id="9e4a9-564"><xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>コントロール`false` <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>またはコントロールを使用する場合は、またはプロパティもに設定する必要があります。 <xref:System.Web.UI.WebControls.GridView></span><span class="sxs-lookup"><span data-stu-id="9e4a9-564">When you use the <xref:System.Web.UI.WebControls.DetailsView> control or the <xref:System.Web.UI.WebControls.GridView> control, you must also set the <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> or the <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> property to `false`.</span></span> <span data-ttu-id="9e4a9-565">データバインドコントロールに表示されない値は、ビューステートに格納されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-565">Any values that are not displayed in the data-bound control are stored in view state.</span></span> <span data-ttu-id="9e4a9-566">これらは、データ更新の実行時にデータソースに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-566">They are passed unchanged to the data source when the data update is performed.</span></span>  
  
 <span data-ttu-id="9e4a9-567">クエリでデータをグループ化する場合は、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティに集計メソッドを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-567">When you group data in the query, you can include aggregate methods in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="9e4a9-568">次の集計メソッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-568">You can use the following aggregate methods:</span></span>  
  
-   `Count()`  
  
-   <span data-ttu-id="9e4a9-569">`Average(`*列*`)`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-569">`Average(` *column* `)`</span></span>  
  
-   <span data-ttu-id="9e4a9-570">`Sum(`*列*`)`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-570">`Sum(` *column* `)`</span></span>  
  
-   <span data-ttu-id="9e4a9-571">`Max(`*列*`)`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-571">`Max(` *column* `)`</span></span>  
  
-   <span data-ttu-id="9e4a9-572">`Min(`*列*`)`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-572">`Min(` *column* `)`</span></span>  
  
-   <span data-ttu-id="9e4a9-573">`Where(`*条件*`)`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-573">`Where(` *condition* `)`</span></span>  
  
-   `Any()`  
  
-   <span data-ttu-id="9e4a9-574">`All(`*条件*`)`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-574">`All(` *condition* `)`</span></span>  
  
 <span data-ttu-id="9e4a9-575">詳細については、「 [NIB: Linqdatasource Web サーバーコントロールの概要](https://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136)」および「[方法: Linqdatasource コントロールを使用してデータをグループ化および集計](https://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-575">For more information, see [NIB: LinqDataSource Web Server Control Overview](https://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) and [How to: Group and Aggregate Data Using the LinqDataSource Control](https://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).</span></span>  
  
 <span data-ttu-id="9e4a9-576">データをグループ化する場合は、 `Key` <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティ`It`に、動的に作成されるプロパティであるおよびを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-576">When you group data, you can include `Key` and `It`, which are dynamically created properties, in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="9e4a9-577">`Key`プロパティは、データをグループ化するために使用されたプロパティの値を参照します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-577">The `Key` property refers to the values in the property or properties that were used to group the data.</span></span> <span data-ttu-id="9e4a9-578">たとえば、という名前`Category` `Key`のプロパティでグループ化した場合、プロパティには、プロパティ内`Category`の一意の値がそれぞれ格納されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-578">For example, if you group by a property named `Category`, the `Key` property will contain each unique value in the `Category` property.</span></span> <span data-ttu-id="9e4a9-579">プロパティ`It`は、データグループ内の個々のレコードのコレクションを参照します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-579">The `It` property refers to a collection of individual records in a grouping of data.</span></span> <span data-ttu-id="9e4a9-580">`It`プロパティを反復処理して、グループ化操作で統合された個々のレコードを取得できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-580">You can iterate over the `It` property to retrieve the individual records that have been consolidated in the grouping operation.</span></span> <span data-ttu-id="9e4a9-581">たとえば、という名前`Category` `It`のプロパティでグループ化した場合、プロパティには、 `Category`プロパティで共通の値を共有するすべてのレコードが含まれます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-581">For example, if you group by a property named `Category`, the `It` property contains all the individual records that share a common value in the `Category` property.</span></span>  
  
 <span data-ttu-id="9e4a9-582">データをグループ化`It`するときに<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>キーワードをプロパティに含める場合は、 `It`キーワードにエイリアスを割り当てる必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-582">If you include the `It` keyword in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property when you group data, you must assign an alias to the `It` keyword.</span></span> <span data-ttu-id="9e4a9-583">が<xref:System.Web.UI.WebControls.LinqDataSource>エイリアスを持たない場合`It` 、コントロールは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-583">The <xref:System.Web.UI.WebControls.LinqDataSource> control will throw an exception if `It` does not have an alias.</span></span> <span data-ttu-id="9e4a9-584">`Key`キーワードにエイリアスを割り当てることはできますが、これは必須ではありません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-584">You can assign an alias to the `Key` keyword, but this is not required.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-585">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>プロパティを、データオブジェクトのプロパティのサブセットに設定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-585">The following example shows how to set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to a subset of properties in the data object.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 <span data-ttu-id="9e4a9-586">次の例は、データをグループ化するために使用されたプロパティの値を取得し、グループ化されたレコードの平均を取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-586">The following example shows how to retrieve values in a property that has been used to group data, and to retrieve the average for the grouped records.</span></span> <span data-ttu-id="9e4a9-587">キーワード`Key`には、データをグループ化するために使用されたプロパティが含まれています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-587">The `Key` keyword contains the property that has been used for grouping data.</span></span> <span data-ttu-id="9e4a9-588">この例では`Key` 、に`ProductCategory`プロパティの共有値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-588">In this example, `Key` will contain the shared values from the `ProductCategory` property.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Selected : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-589">データ取得操作が終了したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-589">Occurs when a data retrieval operation has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-590">イベントを<xref:System.Web.UI.WebControls.LinqDataSource.Selected>処理して、データ取得操作から例外をキャッチするか、取得操作が終了した後にデータオブジェクトを確認します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-590">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Selected> event to catch any exceptions from the data retrieval operation or to examine the data object after the retrieval operation has finished.</span></span> <span data-ttu-id="9e4a9-591">オブジェクトは、イベントハンドラーに<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>渡されるオブジェクトから使用できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-591">The object is available from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " Usage="member this.Selecting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-592">データ取得操作の前に発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-592">Occurs before a data-retrieval operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-593">次の<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>タスクを実行するために、イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-593">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event in order to perform the following tasks:</span></span>  
  
-   <span data-ttu-id="9e4a9-594">データ取得用のパラメーターを変更します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-594">Modify parameters for data retrieval.</span></span>  
  
-   <span data-ttu-id="9e4a9-595">プログラムによってクエリを生成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-595">Generate the query programmatically.</span></span>  
  
-   <span data-ttu-id="9e4a9-596">並べ替えまたはページングの値を変更します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-596">Modify the values for sorting or paging.</span></span>  
  
-   <span data-ttu-id="9e4a9-597">カスタムの並べ替えまたはページングを実行します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-597">Perform custom sorting or paging.</span></span>  
  
-   <span data-ttu-id="9e4a9-598">データ取得操作をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-598">Cancel the data-retrieval operation.</span></span>  
  
 <span data-ttu-id="9e4a9-599">このイベントのイベントハンドラーに渡されるオブジェクトには、データ取得操作のためのパラメーターが含まれています。 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs></span><span class="sxs-lookup"><span data-stu-id="9e4a9-599">The <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> object that is passed to event handlers for this event contains the parameters for the data-retrieval operation.</span></span> <span data-ttu-id="9e4a9-600">クエリを実行する前に<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベントハンドラーのパラメーターを変更することも、新しい結果セットを作成して<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>プロパティに割り当てることもできます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-600">You can modify the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event handler before the query executes, or you can create a new result set and assign that to the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property.</span></span>  
  
 <span data-ttu-id="9e4a9-601">このイベントのハンドラーにカスタムの並べ替えまたはページングを実装する機能は、 <xref:System.Web.UI.WebControls.LinqDataSource>にバインドされているコントロールによって制限される場合があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-601">Your ability to implement custom sorting or paging in handlers for this event might be limited by the control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource>.</span></span> <span data-ttu-id="9e4a9-602">たとえば、 <xref:System.Web.UI.WebControls.GridView>コントロールの列ヘッダーがクリックされると、コントロールは自動並べ替えを実行します。これは、イベントハンドラーで設定された順序をオーバーライドする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-602">For example, when the column header of a <xref:System.Web.UI.WebControls.GridView> control is clicked, the control performs automatic sorting which might override whatever order you establish in the event handler.</span></span>  
  
 <span data-ttu-id="9e4a9-603">イベントの<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベントハンドラーで例外がスローされた場合は、そのイベントハンドラーで例外を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-603">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="9e4a9-604">例外は、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>オブジェクトの<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティを使用して、イベントのイベントハンドラーに渡されません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-604">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selected> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="9e4a9-605">プロパティ<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>は、イベントの<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>後にスローされる例外のみを格納します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-605">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-606">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベントのイベントハンドラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-606">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="9e4a9-607">ハンドラーは、Web ページ内の文字列値の配列から値を取得するクエリを作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-607">The handler creates a query that retrieves values from an array of string values in the Web page.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 <span data-ttu-id="9e4a9-608">次の例では、ストアドプロシージャ<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>を表すメソッドから返されたオブジェクトにプロパティを割り当てる方法を示します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-608">The following example shows how to assign the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property to the object that is returned from a method that represents a stored procedure.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-609">データ取得の操作中に使用されるパラメーターのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-609">Gets the collection of parameters that are used during a data-retrieval operation.</span></span></summary>
        <value><span data-ttu-id="9e4a9-610">Select 句の作成に使用されるパラメーター。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-610">The parameters that are used to create the Select clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-611">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>コレクションのパラメーターを使用して、実行時に Select 句を作成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-611">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection to create the Select clause at run time.</span></span> <span data-ttu-id="9e4a9-612">Select 句で実行時<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>の値を使用する場合は、コレクションにパラメーターを追加します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-612">You add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection when you want to use run-time values in the Select clause.</span></span> <span data-ttu-id="9e4a9-613">たとえば、ユーザーのプロファイルのプロパティを表すパラメーター <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>をコレクションに追加できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-613">For example, you can add a parameter to the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection to represent a property in the user's profile.</span></span> <span data-ttu-id="9e4a9-614">その後、そのプロパティとデータソースからの値を使用して、新しい値を計算できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-614">You can then use that property and a value from the data source to calculate a new value.</span></span>  
  
 <span data-ttu-id="9e4a9-615">Select 句で実行時に値を設定する必要がない場合は、 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>コレクションを使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-615">If you do not have to set a value at run time in the Select clause, you do not have to use the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection.</span></span> <span data-ttu-id="9e4a9-616">プロパティで<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>取得するプロパティを定義できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-616">You can define the properties to retrieve in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="9e4a9-617">たとえば、データベーステーブルから値`FirstName`と`LastName`値を取得するには、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>パラメーターを指定せずに "FirstName, LastName" に設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-617">For example, to return the `FirstName` and `LastName` values from a database table, set <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> to "FirstName, LastName" without any parameters.</span></span>  
  
 <span data-ttu-id="9e4a9-618"><xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>コレクション内の値を設定するには、名前付きパラメーター <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>のプロパティにプレースホルダーを追加します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-618">To set values in the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection, you add a placeholder in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property for the named parameter.</span></span> <span data-ttu-id="9e4a9-619">Select 句で、各パラメーター名の先頭に @ 記号を付けます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-619">In the Select clause, preface each parameter name with the @ symbol.</span></span>  
  
 <span data-ttu-id="9e4a9-620">コレクション内のパラメーターを使用し<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>てプロパティ名を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-620">You cannot use a parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection to represent a property name.</span></span> <span data-ttu-id="9e4a9-621">プロパティをプロパティの<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>名前に動的に設定するには、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベントのイベントハンドラーを作成し、必要<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>に応じてプロパティをカスタマイズします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-621">To dynamically set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to the name of a property, create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event and customize the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property as needed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-622">次の例は、ユーザーが指定した値を使用して、返されたデータの値を計算する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-622">The following example shows how to use a user-supplied value to calculate a value in the returned data.</span></span> <span data-ttu-id="9e4a9-623">ユーザーは、製造日の数を表す値をテキストボックスに入力できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-623">The user can enter a value in the text box that represents the number of manufacturing days.</span></span> <span data-ttu-id="9e4a9-624">この値は、製品を製造する日数を表すデータベースの値で除算されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-624">That value is divided by a value from a database that represents the number of days to manufacture a product.</span></span> <span data-ttu-id="9e4a9-625">返される値は、指定された日数の間に製造できる製品の数を示します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-625">The returned value indicates how many products can be manufactured during the specified number of days.</span></span> <span data-ttu-id="9e4a9-626">ユーザーの入力は、 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>コレクションを通じて Select コマンドに含まれます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-626">The user's input is included in the Select command through the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreOriginalValuesInViewState : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-627">データ ソースから取得するデータをビューステートに保存して、そのデータが更新または削除される前に別のプロセスによって変更されていないことを確認する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-627">Gets or sets a value that indicates whether the data from the data source should be stored in view state to make sure that the data has not been changed by another process before it is updated or deleted.</span></span></summary>
        <value><span data-ttu-id="9e4a9-628">値をビューステートに保存する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-628"><see langword="true" /> if the values will be stored in view state; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9e4a9-629">既定値は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-629">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-630">既定では、更新操作および削除操作が有効になっ<xref:System.Web.UI.WebControls.LinqDataSource>ていると、コントロールは、すべてのレコードの元の値をビューステートに格納します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-630">By default, when update and delete operations have been enabled, the <xref:System.Web.UI.WebControls.LinqDataSource> control stores the original values for all the records in view state.</span></span> <span data-ttu-id="9e4a9-631">この<xref:System.Web.UI.WebControls.LinqDataSource>コントロールには、すべての主キーと、で`UpdateCheck.Never`マークされて`Column`いないすべてのプロパティの値が、属性で格納されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-631">The <xref:System.Web.UI.WebControls.LinqDataSource> control stores values for all primary keys and all properties not marked with `UpdateCheck.Never` in the `Column` attribute.</span></span> <span data-ttu-id="9e4a9-632">属性のプロパティ`UpdateCheck`は、 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]で設定します。 `Column`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-632">You set the `UpdateCheck` property of the `Column` attribute in the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].</span></span>  
  
 <span data-ttu-id="9e4a9-633">データを更新または削除する前 LINQ to SQL に、データソースの現在の値に対してビューステートの値をチェックします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-633">Before LINQ to SQL updates or deletes data, it checks the values in view state against the current values in the data source.</span></span> <span data-ttu-id="9e4a9-634">値が一致しない場合、データソースレコードは変更されています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-634">If the values do not match, the data source record has changed.</span></span> <span data-ttu-id="9e4a9-635">この場合、LINQ to SQL は例外をスローし、更新または削除操作は続行されません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-635">In that case, LINQ to SQL throws an exception and does not continue with the update or delete operation.</span></span> <span data-ttu-id="9e4a9-636">LINQ to SQL の詳細については、「 [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-636">For more information about LINQ to SQL, see [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).</span></span>  
  
 <span data-ttu-id="9e4a9-637">元の値をビューステートに格納すると、ページサイズが不必要に大きくなり、機密データが悪意のあるユーザーに公開される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-637">Storing the original values in view state can cause the page size to become unnecessarily large and can expose sensitive data to a malicious user.</span></span> <span data-ttu-id="9e4a9-638">プロパティをに設定する<xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> `false`ことにより、ビューステートに値を格納できないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-638">You can disable storing values in view state by setting the <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> property to `false`.</span></span> <span data-ttu-id="9e4a9-639">これを行う場合は、データが変更されていないことを確認する独自の方法を用意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-639">If you do this, you must provide your own way to make sure that the data has not changed.</span></span> <span data-ttu-id="9e4a9-640"><xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A>プロパティをに`false`設定すると、元の値はデータバインドコントロールのビューステートに保存されません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-640">If you set the <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> property to `false`, the original values are not persisted in view state for the data-bound control.</span></span> <span data-ttu-id="9e4a9-641">この場合、LINQ to SQL は、データの整合性を検証できません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-641">In that case, LINQ to SQL cannot verify the integrity of the data.</span></span> <span data-ttu-id="9e4a9-642">LINQ to SQL は、データソース内のデータが実際に変更されていない場合でもデータの競合を示す例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-642">LINQ to SQL will throw an exception that indicates a data conflict even if the data in the data source has not actually changed.</span></span>  
  
 <span data-ttu-id="9e4a9-643">更新中に自動的に更新されるタイムスタンプフィールドが基になるデータソースに含まれている場合は、その値のみをビューステートに格納できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-643">If the underlying data source contains a timestamp field that is automatically updated during an update, you can store only that value in view state.</span></span> <span data-ttu-id="9e4a9-644">その場合、エンティティクラスの timestamp プロパティがに`IsVersion=true`設定され、すべてのプロパティがに`UpdateCheck.Never`設定されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-644">In that case, the timestamp property in the entity class is set to `IsVersion=true` and all the properties are set to `UpdateCheck.Never`.</span></span> <span data-ttu-id="9e4a9-645">タイムスタンプフィールドは、そのレコード内のデータが変更されるたびにデータベースによって自動的に更新されるため、データが変更された場合、LINQ to SQL によってその値が決定されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-645">Because a timestamp field is automatically updated by the database every time that data in that record changes, LINQ to SQL determines from that value if data has changed.</span></span> <span data-ttu-id="9e4a9-646">これにより、ビューステートのサイズを小さくすることができ、機密データは公開されません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-646">This helps reduce the size of view state, and no sensitive data is exposed.</span></span> <span data-ttu-id="9e4a9-647">LINQ to SQL では、ビューステートのタイムスタンプ値とデータベースのタイムスタンプ値を比較することによって、データの一貫性をチェックします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-647">LINQ to SQL will check for data consistency by comparing the timestamp value in view state with the timestamp value in the database.</span></span> <span data-ttu-id="9e4a9-648">詳細については、「[チュートリアル: LinqDataSource コントロールでタイムスタンプを使用してデータの整合性をチェックする](https://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-648">For more information, see [Walkthrough: Using a Timestamp with the LinqDataSource Control to Check Data Integrity](https://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655"><span data-ttu-id="9e4a9-649">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="9e4a9-649">LINQ to SQL</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Web::DynamicData::IDynamicDataSource::ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-650">このメンバーの詳細については、「<see cref="T:System.Web.DynamicData.IDynamicDataSource" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-650">For a description of this member, see <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</span></span></summary>
        <value><span data-ttu-id="9e4a9-651">クラスに関連付けられている型。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-651">The type that is associated with the class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-652">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-652">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9e4a9-653">これは、<xref:System.Web.UI.WebControls.LinqDataSource> のインスタンスが <xref:System.Web.DynamicData.IDynamicDataSource> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-653">It can be used only when the <xref:System.Web.UI.WebControls.LinqDataSource> instance is cast to an <xref:System.Web.DynamicData.IDynamicDataSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System::Web::DynamicData::IDynamicDataSource::EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-654">このメンバーの詳細については、「<see cref="T:System.Web.DynamicData.IDynamicDataSource" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-654">For a description of this member, see <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</span></span></summary>
        <value><span data-ttu-id="9e4a9-655">エンティティの名前。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-655">The name of the entity.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-656">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-656">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9e4a9-657">これは、<xref:System.Web.UI.WebControls.LinqDataSource> のインスタンスが <xref:System.Web.DynamicData.IDynamicDataSource> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-657">It can be used only when the <xref:System.Web.UI.WebControls.LinqDataSource> instance is cast to an <xref:System.Web.DynamicData.IDynamicDataSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-658">このメンバーの詳細については、「<see cref="T:System.Web.DynamicData.IDynamicDataSource" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-658">For a description of this member, see <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-659">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-659">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9e4a9-660">これは、<xref:System.Web.UI.WebControls.LinqDataSource> のインスタンスが <xref:System.Web.DynamicData.IDynamicDataSource> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-660">It can be used only when the <xref:System.Web.UI.WebControls.LinqDataSource> instance is cast to an <xref:System.Web.DynamicData.IDynamicDataSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TableName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-661">データ コンテキスト クラス内でデータ コレクションを表すプロパティまたはフィールドの名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-661">Gets or sets the name of the property or field in the data context class that represents a data collection.</span></span></summary>
        <value><span data-ttu-id="9e4a9-662">データ コレクションを含むプロパティの名前を示す文字列。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-662">A string that contains the name of the property that contains the data collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-663"><xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティに、取得するデータを表すプロパティまたはフィールドの名前を設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-663">Set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the name of the property or field that represents the data that you want to retrieve.</span></span> <span data-ttu-id="9e4a9-664">データベーステーブルに接続する場合、プロパティの名前は通常、テーブルの名前と同じになります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-664">When you are connecting to a database table, the name of the property is usually the same as the name of the table.</span></span> <span data-ttu-id="9e4a9-665">メモリ内データコレクションに接続する場合は、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティを、データコレクションを返すプロパティまたはフィールドの名前に設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-665">When you are connecting to an in-memory data collection, set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the name of the property or field that returns the data collection.</span></span>  
  
 <span data-ttu-id="9e4a9-666">取得操作の<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティには、任意の型を返すプロパティを割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-666">You can assign a property that returns any type to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property for retrieval operations.</span></span> <span data-ttu-id="9e4a9-667">プロパティによって表されるオブジェクトが<xref:System.Collections.IEnumerable> <xref:System.Web.UI.WebControls.LinqDataSource>を実装していない場合、コントロールはオブジェクトの<xref:System.Collections.IEnumerable>インスタンスにオブジェクトを自動的にラップします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-667">If the object that is represented by the property does not implement <xref:System.Collections.IEnumerable>, the <xref:System.Web.UI.WebControls.LinqDataSource> control will automatically wrap the object in an instance of an <xref:System.Collections.IEnumerable> object.</span></span>  
  
 <span data-ttu-id="9e4a9-668">更新、挿入、または削除の自動操作を有効にするには<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 、プロパティに割り当てられているクラスがから<xref:System.Data.Linq.DataContext>派生し、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティに割り当てら<xref:System.Data.Linq.Table%601>れたプロパティがから派生している必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-668">To enable automatic update, insert, or delete operations, the class that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property must derive from <xref:System.Data.Linq.DataContext> and the property that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property must derive from <xref:System.Data.Linq.Table%601>.</span></span>  
  
 <span data-ttu-id="9e4a9-669">クラスのインスタンスからデータを選択する方法の詳細については、 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-669">For information about how to select data from an instance of a class, see the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-670">次の例では<xref:System.Web.UI.WebControls.LinqDataSource> 、2つのコントロールを示します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-670">The following example shows two <xref:System.Web.UI.WebControls.LinqDataSource> controls.</span></span> <span data-ttu-id="9e4a9-671">1つ<xref:System.Web.UI.WebControls.LinqDataSource>のコントロールで<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>は、プロパティはクラスのプロパティに設定されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-671">In one <xref:System.Web.UI.WebControls.LinqDataSource> control, the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property is set to a property in a class.</span></span> <span data-ttu-id="9e4a9-672">このプロパティは、文字列の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-672">That property returns an array of strings.</span></span> <span data-ttu-id="9e4a9-673">もう一方<xref:System.Web.UI.WebControls.LinqDataSource>のコントロール<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>では、プロパティはデータベーステーブルを表すプロパティに設定されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-673">In the other <xref:System.Web.UI.WebControls.LinqDataSource> control, the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property is set to a property that represents a database table.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 <span data-ttu-id="9e4a9-674">この例で`ExampleDataContext`は、データベーステーブルを表すという名前のクラスは示されていません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-674">The class named `ExampleDataContext` that represents the database table is not shown in this example.</span></span> <span data-ttu-id="9e4a9-675">この例を使用するには、Example .dbml という名前の LINQ to SQL クラスを追加し、Movie という名前のテーブルをに[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]ドラッグして、このクラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-675">For this example to work, you must create this class by adding a LINQ to SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].</span></span> <span data-ttu-id="9e4a9-676">という名前`ExampleDataContext` `Movies`のプロパティを持つという名前のクラスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-676">A class named `ExampleDataContext` with a property named `Movies` is generated.</span></span>  
  
 <span data-ttu-id="9e4a9-677">次の例は、 `MovieLibrary` <xref:System.Web.UI.WebControls.LinqDataSource>コントロールで参照されるという名前のクラスを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-677">The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="linqDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e4a9-678"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールのビューステートの変更を追跡し、変更がコントロールの <see cref="T:System.Web.UI.StateBag" /> オブジェクトに格納されるようにします。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-678">Tracks view state changes to the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control so that the changes can be stored in the <see cref="T:System.Web.UI.StateBag" /> object for the control.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="9e4a9-679">LinqDataSource Web サーバーコントロールの概要</span><span class="sxs-lookup"><span data-stu-id="9e4a9-679">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="9e4a9-680">ASP.NET データ アクセスの概要</span><span class="sxs-lookup"><span data-stu-id="9e4a9-680">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Update (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="9e4a9-681">更新するレコードの行のキー値。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-681">The row key values for the records to be updated.</span></span></param>
        <param name="values"><span data-ttu-id="9e4a9-682">データ ソース内で更新する行の値。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-682">The row values to be updated in the data source.</span></span></param>
        <param name="oldValues"><span data-ttu-id="9e4a9-683">データの競合を検出するために評価される行の値。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-683">The row values that are evaluated to detect data conflicts.</span></span></param>
        <summary><span data-ttu-id="9e4a9-684">更新の操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-684">Performs an update operation.</span></span></summary>
        <returns><span data-ttu-id="9e4a9-685">更新操作によって影響を受けたレコードの数。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-685">The number of records affected by the update operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-686">通常、コードから<xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>メソッドを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-686">Typically, you do not have to call the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method from your code.</span></span> <span data-ttu-id="9e4a9-687">ユーザーがレコードを更新するアクションを実行<xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>すると、データバインドコントロールは自動的にメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-687">The data-bound control will automatically call the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method when the user takes action to update a record.</span></span> <span data-ttu-id="9e4a9-688">データを更新する<xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>ための独自のプロセスを作成する場合は、明示的にメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-688">You explicitly call the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method when you want to create your own process for updating data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-689">次の例は、ユーザーがボタンをクリックした後に、プログラムによってデータソース内のレコードを更新する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-689">The following example shows how to programmatically update a record in the data source after the user clicks a button.</span></span> <span data-ttu-id="9e4a9-690">このコードは、 <xref:System.Collections.Specialized.ListDictionary>キー値<xref:System.Collections.Specialized.ListDictionary>を含むオブジェクト、 <xref:System.Collections.Specialized.ListDictionary>元の値を含むオブジェクト、および<xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>メソッドに新しい値を含むオブジェクトを渡します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-690">The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains the key value, a <xref:System.Collections.Specialized.ListDictionary> object that contains the original values, and a <xref:System.Collections.Specialized.ListDictionary> object that contains the new values to the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 <span data-ttu-id="9e4a9-691">次の例は、前の例のマークアップを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-691">The following example shows the markup for the previous example.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Updated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-692">更新操作が終了したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-692">Occurs when an update operation has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-693">更新操作<xref:System.Web.UI.WebControls.LinqDataSource.Updated>から例外をキャッチしたり、更新操作の完了後に出力パラメーターの値を確認したりするために、イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-693">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Updated> event to catch any exceptions from the update operation or to examine the values of output parameters after the update operation has finished.</span></span> <span data-ttu-id="9e4a9-694">出力パラメーターは、イベントハンドラーに<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>渡されるオブジェクトから使用できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-694">The output parameters are available from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-695">このコレクションは、<see cref="T:System.Web.UI.WebControls.LinqDataSource" /> クラスでは使用されません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-695">This collection is not used by the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> class.</span></span></summary>
        <value><span data-ttu-id="9e4a9-696">パラメーターのコレクション。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-696">A collection of parameters.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " Usage="member this.Updating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-697">更新操作の前に発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-697">Occurs before an update operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-698">更新するオブジェクトの検証、データクラスからのデータの検証エラーの確認、更新操作の前の値の変更、または更新操作の取り消しを行うために、イベントを処理します。 <xref:System.Web.UI.WebControls.LinqDataSource.Updating></span><span class="sxs-lookup"><span data-stu-id="9e4a9-698">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event to validate the object to be updated, to examine data validation errors from the data class, to change a value before the update operation, or to cancel the update operation.</span></span> <span data-ttu-id="9e4a9-699">イベントハンドラーに渡されるオブジェクトには、元のオブジェクトと更新されたオブジェクトの両方が含まれています。 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs></span><span class="sxs-lookup"><span data-stu-id="9e4a9-699">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object that is passed to event handlers contains both the original object and the updated object.</span></span>  
  
 <span data-ttu-id="9e4a9-700">更新操作中に検証エラーが発生した場合<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 、オブジェクトには、データクラスによってスローされた検証例外が含まれます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-700">If a validation error occurs during the update operation, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains the validation exceptions that are thrown by the data class.</span></span> <span data-ttu-id="9e4a9-701">更新する値がデータクラスのプロパティの型と一致しない場合、またはカスタム検証チェックに合格しなかった場合は、検証エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-701">A validation error occurs if a value to be updated does not match the type of the property in the data class, or if it does not pass a custom validation check.</span></span> <span data-ttu-id="9e4a9-702"><xref:System.Web.UI.WebControls.LinqDataSource.Updating>イベントのイベントハンドラーでは、検証例外を取得して適切なアクションを実行できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-702">In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you can retrieve the validation exceptions and take appropriate action.</span></span>  
  
 <span data-ttu-id="9e4a9-703">イベントの<xref:System.Web.UI.WebControls.LinqDataSource.Updating>イベントハンドラーで例外がスローされた場合は、そのイベントハンドラーで例外を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-703">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="9e4a9-704">例外は、 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>オブジェクトの<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティを使用して、イベントのイベントハンドラーに渡されません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-704">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updated> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="9e4a9-705">プロパティ<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>は、イベントの<xref:System.Web.UI.WebControls.LinqDataSource.Updating>後にスローされる例外のみを格納します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-705">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-706">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource.Updating>イベントのイベントハンドラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-706">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="9e4a9-707">このコードでは、プロパティ<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>とプロパティを比較して、値が変更されたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-707">The code compares properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to see whether a value has changed.</span></span> <span data-ttu-id="9e4a9-708">値が変更された場合、 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>プロパティの値はに`true`設定されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-708">If the value has changed, a value of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 <span data-ttu-id="9e4a9-709">次の例は、検証例外を取得<xref:System.Web.UI.WebControls.LinqDataSource.Updating>するイベントのイベントハンドラーを示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-709">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event that retrieves validation exceptions.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 <span data-ttu-id="9e4a9-710">前の例では、検証例外を取得します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-710">The previous example retrieves validation exceptions.</span></span> <span data-ttu-id="9e4a9-711">値がプロパティの型と一致しない場合、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-711">An exception might be thrown if a value does not match the type of the property.</span></span> <span data-ttu-id="9e4a9-712">また、次の例に示すように、カスタマイズされたチェックからもスローされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-712">It might also be thrown from a customized check such as the one in the following example.</span></span> <span data-ttu-id="9e4a9-713">メソッドは、 `Age`プロパティの数値が負でないことを確認します。 `OnAgeChanging`</span><span class="sxs-lookup"><span data-stu-id="9e4a9-713">The `OnAgeChanging` method checks that the number for the `Age` property is not negative.</span></span>  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Where : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-714">取得されるデータにレコードを含めるかどうかを決める条件を示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-714">Gets or sets a value that specifies what conditions must be true for a record to be included in the retrieved data.</span></span></summary>
        <value><span data-ttu-id="9e4a9-715">Where 句の作成に使用される文字列。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-715">A string that is used to create the Where clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-716">クエリから返さ<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>れるレコードの条件を指定するには、プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-716">You use the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to specify the conditions for the record to be returned from a query.</span></span> <span data-ttu-id="9e4a9-717"><xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティの構文は、のC#LINQ の Where 句の構文と同じです。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-717">The syntax for the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is the same as the syntax for a LINQ Where clause in C#.</span></span>  
  
 <span data-ttu-id="9e4a9-718">結果がブール値になる式を指定し、式が特定の行に`true`対してと評価された場合は、その行が結果セットに含まれます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-718">You specify an expression that results in a Boolean value, and if the expression evaluates to `true` for a given row, the row is included in the result set.</span></span> <span data-ttu-id="9e4a9-719">式は、次の例に示すように、と比較する列名、比較演算子、および値で構成されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-719">Expressions are composed of column names, comparison operators, and values to compare to, as shown in the following example:</span></span>  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 <span data-ttu-id="9e4a9-720">論理`AND` or `OR`演算子によってリンクされた複数の式を指定するには`||` 、次の例に示すように、論理 AND 演算子としてを使用し、論理 or 演算子としてを使用`&&`します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-720">To specify multiple expressions linked by logical `AND` or `OR` operators, you use `&&` as a logical AND operator and `||` as a logical OR operator, as shown in the following example:</span></span>  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 <span data-ttu-id="9e4a9-721">リテラル文字列値に対してプロパティをテストする場合は、リテラル文字列値を二重引用符で囲む必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-721">If you want to test a property against a literal string value, the literal string value must be enclosed in double quotation marks.</span></span> <span data-ttu-id="9e4a9-722">マークアップでこれを行うには<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 、次の例に示すように、句の値を単一引用符で囲みます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-722">To do this in markup, enclose the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> clause value in single quotation marks, as shown in the following example:</span></span>  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 <span data-ttu-id="9e4a9-723">コード内のリテラル文字列値に対してテストするには、次の例に示すように、二重引用符を挿入するために使用している言語に適したエスケープ文字を使用します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-723">To test against a literal string value in code, use escape characters that are appropriate to the language you are using in order to insert double quotation marks, as shown in the following example:</span></span>  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 <span data-ttu-id="9e4a9-724">文字列が別の文字列より大きいか小さいかをテストする場合は、列名と文字列値の間<xref:System.String>でまたは`>`演算子`<`を使用する代わりに、クラスのメソッドを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-724">If you want to test whether a string is greater than or less than another string, you must use methods of the <xref:System.String> class instead of using `<` or `>` operators between the column name and the string value.</span></span> <span data-ttu-id="9e4a9-725">次の例では、カテゴリの値が、より小さい、以下、より大きい、または "スポーツ" 以上の行を選択する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-725">The following examples show how to select rows that have Category values that are less than, less than or equal to, greater than, or greater than or equal to "Sports":</span></span>  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 <span data-ttu-id="9e4a9-726"><xref:System.String>クラスの他のメソッド ( <xref:System.String.StartsWith%2A>、 <xref:System.String.EndsWith%2A> <xref:System.String.Contains%2A>、など) を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-726">You can also use other methods of the <xref:System.String> class, such as <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.Contains%2A>.</span></span> <span data-ttu-id="9e4a9-727">文字列を比較する方法の詳細については、「[文字列の比較](~/docs/standard/base-types/comparing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-727">For more information about how to compare strings, see [Comparing Strings](~/docs/standard/base-types/comparing.md).</span></span> <span data-ttu-id="9e4a9-728">Where 句の構文の詳細については、「 [ C#演算子](https://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43)と[where 句](~/docs/csharp/language-reference/keywords/where-clause.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-728">For more information about Where clause syntax, see [C# Operators](https://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43) and [where clause](~/docs/csharp/language-reference/keywords/where-clause.md).</span></span>  
  
 <span data-ttu-id="9e4a9-729">Web ページの作成時に定義した静的な値に基づいてフィルター処理するだけでなく、実行時に評価される動的な値に基づいてフィルター処理を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-729">In addition to filtering based on static values that you define when you create the Web page, you can filter based on dynamic values that are evaluated at run time.</span></span> <span data-ttu-id="9e4a9-730">その場合は、値のプレースホルダーとして機能<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>する名前付きパラメーターをプロパティに追加します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-730">In that case, you include a named parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property that acts as a placeholder for the value.</span></span> <span data-ttu-id="9e4a9-731">次に、一致する名前を持つパラメーターを<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクションに追加します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-731">You then add a parameter that has the matching name to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span>  
  
 <span data-ttu-id="9e4a9-732">または、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>プロパティをに`true`設定し、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクション内のパラメーターを定義することもできます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-732">Alternatively, you can set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` and define the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="9e4a9-733">プロパティが`true`の場合、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティに名前付きパラメーターを含める必要はありません。 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A></span><span class="sxs-lookup"><span data-stu-id="9e4a9-733">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, you do not have to include the named parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property.</span></span> <span data-ttu-id="9e4a9-734">代わりに、コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>プロパティのパラメーターから where 句を自動的に生成します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-734">Instead, the <xref:System.Web.UI.WebControls.LinqDataSource> control automatically generates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> property.</span></span>  
  
 <span data-ttu-id="9e4a9-735">データをフィルター処理する方法の詳細については、「[チュートリアル: LinqDataSource コントロールと GridView コントロールを使用したデータのサブセットの選択とフィルター処理](https://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-735">For more information about how to filter data, see [Walkthrough: Selecting and Filtering a Subset of Data with the LinqDataSource and GridView Controls](https://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-736">次の例は、静的な条件に基づいてクエリから返されるデータをフィルター処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-736">The following example shows how to filter the data returned from a query based on a static condition.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 <span data-ttu-id="9e4a9-737">次の例は、実行時にユーザーが指定した値に基づいてデータをフィルター処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-737">The following example shows how to filter the data based on a value that is provided by the user at run time.</span></span> <span data-ttu-id="9e4a9-738">この例<xref:System.Web.UI.WebControls.DropDownList>では、コントロール<xref:System.Web.UI.WebControls.GridView>とコントロールがページに表示されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-738">In this example a <xref:System.Web.UI.WebControls.DropDownList> control and a <xref:System.Web.UI.WebControls.GridView> control are displayed on the page.</span></span> <span data-ttu-id="9e4a9-739">ユーザーが<xref:System.Web.UI.WebControls.DropDownList>コントロール<xref:System.Web.UI.WebControls.LinqDataSource>内のいずれかの値を選択すると、選択した`Products`値と同じ値を`UserPrice`持つ行のみがテーブルから選択されます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-739">When the user selects one of the values in the <xref:System.Web.UI.WebControls.DropDownList> control, the <xref:System.Web.UI.WebControls.LinqDataSource> control selects from the `Products` table only rows that have `UserPrice` values equal to the selected value.</span></span> <span data-ttu-id="9e4a9-740">コントロール<xref:System.Web.UI.WebControls.GridView>は、フィルター処理されたデータを表示します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-740">The <xref:System.Web.UI.WebControls.GridView> control then displays the filtered data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e4a9-741">Where 句の作成に使用されるパラメーターのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-741">Gets the collection of parameters that is used to create the Where clause.</span></span></summary>
        <value><span data-ttu-id="9e4a9-742">Where 句を作成するために使用される、<see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" /> プロパティのパラメーターのコレクション。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-742">A collection of the parameters that are used to create the Where clause in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e4a9-743">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、実行時に<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> where 句を作成するために、コレクション内のパラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-743">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection to create the Where clause at run time.</span></span> <span data-ttu-id="9e4a9-744">Where 句で1つ<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>以上の条件をプログラムによって設定する場合は、コレクションにパラメーターを追加します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-744">You add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection when you want to programmatically set one or more of the conditions in the Where clause.</span></span> <span data-ttu-id="9e4a9-745">たとえば、データベーステーブルで、姓が<xref:System.Web.UI.WebControls.TextBox>コントロールの値と同じレコードがあるかどうかを検索できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-745">For example, you might search a database table for records with a last name equal to the value of a <xref:System.Web.UI.WebControls.TextBox> control.</span></span> <span data-ttu-id="9e4a9-746">その場合は、テキストボックスの値の<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクションにパラメーターを追加します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-746">In that case, you add a parameter to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection for the text box value.</span></span>  
  
 <span data-ttu-id="9e4a9-747">実行時に Where 句で値を設定する必要がない場合は、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクションを使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-747">If you do not have to set a value at run time in the Where clause, you do not have to use the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="9e4a9-748">取得するフィールドは、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティで定義できます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-748">You can define the fields to retrieve in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property.</span></span> <span data-ttu-id="9e4a9-749">たとえば、マークアップで "Adams" に`LastName`等しいデータベーステーブルから値を返すには、パラメーターを指定せずに<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>プロパティをに`'LastName = "Adams"'`設定します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-749">For example, to return values from a database table where `LastName` equals "Adams" in markup, set the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to `'LastName = "Adams"'` without any parameters.</span></span>  
  
 <span data-ttu-id="9e4a9-750"><xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクション内の値を設定するには、各パラメーターに名前を割り当ててから、そのパラメーター <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>のプロパティにプレースホルダーを追加します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-750">To set values in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection, you assign a name to each parameter and then add a placeholder in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property for that parameter.</span></span> <span data-ttu-id="9e4a9-751">Where 句で、各パラメーター名の先頭に @ 記号を付けます。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-751">In the Where clause, preface each parameter name with the @ symbol.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e4a9-752">次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>コレクションを使用して Where 句を動的に作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-752">The following example shows how to use the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection to dynamically create the Where clause.</span></span> <span data-ttu-id="9e4a9-753">コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、ユーザーが<xref:System.Web.UI.WebControls.DropDownList>コントロールで選択した値`Price`より大きい列の値を持つすべてのレコードを返します。</span><span class="sxs-lookup"><span data-stu-id="9e4a9-753">The <xref:System.Web.UI.WebControls.LinqDataSource> control returns all the records with a value in the `Price` column that is greater than the value selected by the user in a <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
