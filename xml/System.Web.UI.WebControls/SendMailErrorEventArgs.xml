<Type Name="SendMailErrorEventArgs" FullName="System.Web.UI.WebControls.SendMailErrorEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="71540fca903b9568b09aa47c0ad13790c2047d5e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30599116" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SendMailErrorEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SendMailErrorEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SendMailErrorEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SendMailErrorEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendMailErrorEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Web.UI.WebControls.ChangePassword" />、<see cref="T:System.Web.UI.WebControls.CreateUserWizard" />、<see cref="T:System.Web.UI.WebControls.PasswordRecovery" /> など各コントロールの <see langword="SendMailError" /> イベントのデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs>オブジェクトにはによって電子メール メッセージを送信できない場合は、SMTP メール プロバイダーから発生するエラー メッセージが含まれています、<xref:System.Web.UI.WebControls.ChangePassword>コントロール、または<xref:System.Web.UI.WebControls.CreateUserWizard>コントロール。 このような場合は、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs>にオブジェクトが送信される、<xref:System.Web.UI.WebControls.SendMailErrorEventHandler>です。  
  
 作成、<xref:System.Web.UI.WebControls.SendMailErrorEventHandler>イベントを処理するデリゲート。 例外が発生した場合でも実行を継続する Web アプリケーションをイベントを処理できます。 これは、電子メール メッセージを送信する重要ではない場合に便利です。 たとえば、ユーザーが複数ステップのウィザードを実行するときに、例外が発生した場合、エラー ログに記録、ユーザーに情報メッセージを表示、およびユーザーが、ウィザードを完了できるようにすると便利なができます。  
  
 確認、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A>プロパティを実際の例外の原因を特定します。 例外の最も一般的な理由で構成エラーが発生、 [ &lt;smtp&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md)のマシン構成ファイル。 ようなエラーが、通常は開発中に発見し、アプリケーションのデバッグ、メール サーバーが失敗するが予期せず、運用環境で、アプリケーション全体のような状況で失敗にするかどうかを決定する必要があります。 それ以外の場合は、イベントを処理により、アプリケーションは、続行します。  
  
 設定する必要があります、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A>プロパティを`true`通知処理です。 それ以外の場合、例外が表示されたこと、例外が再スローされると、元のコール スタックとエラー メッセージが含まれます。  
  
 イベント ハンドラーを作成しない場合、<xref:System.Web.UI.WebControls.ChangePassword.SendMailError>イベント、または元のまま残りますイベント ハンドラーを作成する場合、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A>プロパティに設定`false`Web アプリケーションは、電子メール メッセージを送信するときにエラーが発生した場合に実行を停止し、ASP.NET は、エラー メッセージが表示されます。  
  
 <xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A>メソッドでは、派生クラスによって実行されていたこのではなく、イベントを処理することもできます、<xref:System.Web.UI.WebControls.SendMailErrorEventHandler>です。 これから派生したクラスでイベントを処理するための手法をお勧め<xref:System.Web.UI.WebControls.ChangePassword>または<xref:System.Web.UI.WebControls.CreateUserWizard>です。  
  
 イベント処理の詳細については、次を参照してください。[サーバーで ASP.NET Web フォーム ページのイベントの処理](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9)です。  
  
   
  
## Examples  
 次のコード例を使用する ASP.NET ページを示しています、 <xref:System.Web.UI.WebControls.ChangePassword> Web コントロール、およびイベント ハンドラーが含まれています、 <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> SendMailError をという名前のイベントです。 このコード例では、ASP.NET メンバーシップとフォーム認証、および、名とパスワードがわかっているユーザーが作成されたを使用する ASP.NET Web サイトが構成されていると仮定します。 詳細については、次を参照してください。[する方法: 単純なフォーム認証を実装する](http://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e)です。  
  
 パスワードの変更が成功すると、コード、`SendingMail`イベント ハンドラーは、変更の確認をユーザーに電子メール メッセージを送信しようとしています。 SMTP は、このコード例を実行するために、サーバーで既に構成する必要があります。 SMTP サーバーを構成する方法については、次を参照してください。 [NIB: 方法: インストールと構成内の SMTP 仮想サーバー IIS 6.0](http://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8)です。 この例の目的で、必要はありません。 SMTP サーバーを構成するには電子メール メッセージを送信するエラーをテストする例が構築されます。  
  
 メール サーバーが正しく構成されていない場合またはその他のエラーが発生した電子メール メッセージを送信することはできません、`SendMailError`関数が呼び出されます。 メッセージがユーザーに表示されます。 さらに、イベントはイベント ソース MySamplesSite を既にという名前が存在することを想定して Windows アプリケーション イベント ログに記録されます。 指定したイベント ソースを作成するのには、次のコード例を参照してください。 イベント ソースの作成の詳細については、次を参照してください。[サーバーで ASP.NET Web フォーム ページのイベントの処理](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9)です。 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A>のプロパティ、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs>にオブジェクトが設定されている`true`エラーが処理されていることを示すためにします。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 プログラムによって、アプリケーション ログに MySamplesSite をという名前のイベント ソースを追加する必要がある場合は、次のコード例を使用します。 このイベント ソースは、最初のコード例を正しく動作するために存在する必要があります。 次のコード例では、管理者特権が必要です。  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>オーバーライドする場合<see cref="M:System.Web.UI.WebControls.ChangePassword.OnSendMailError(System.Web.UI.WebControls.SendMailErrorEventArgs)" />派生クラスでは、呼び出しに必ず、<see cref="M:System.Web.UI.WebControls.ChangePassword.OnSendMailError(System.Web.UI.WebControls.SendMailErrorEventArgs)" />登録されているデリゲートがイベントを受け取るを有効にする基本クラスのメソッドです。</para>
    </block>
    <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
    <altmember cref="T:System.Net.Mail.MailMessage" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SendMailErrorEventArgs (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SendMailErrorEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SendMailErrorEventArgs(Exception ^ e);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">例外を格納した <see cref="T:System.Exception" /> オブジェクト。</param>
        <summary>
          <see cref="T:System.Web.UI.WebControls.SendMailErrorEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); void set(Exception ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>電子メール メッセージを送信できなかったときに、SMTP メール サービスによってスローされる例外を返します。</summary>
        <value>例外を格納した <see cref="T:System.Exception" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A>プロパティによって電子メール メッセージを送信できない場合は、SMTP メール プロバイダーによってスローされる例外を格納する、<xref:System.Web.UI.WebControls.ChangePassword>コントロールまたは<xref:System.Web.UI.WebControls.CreateUserWizard>です。 この例外の最も一般的な理由で構成エラーが発生、 [ &lt;smtp&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md)マシン構成ファイルの次の例外メッセージを生成します。 `The transport failed to connect to the server.`  
  
 ある場合、エラー、電子メール メッセージを使用してファイルを埋め込む場合に、例外がスローされません<xref:System.Web.UI.WebControls.MailDefinition.EmbeddedObjects%2A>です。 代わりに、メール メッセージを表示すると、埋め込まれたファイルを破損が表示されます。  
  
 設定する必要があります、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A>として渡されたオブジェクト、`e`のパラメーター<xref:System.Web.UI.WebControls.SendMailErrorEventArgs>を`true`通知処理です。 それ以外の場合、例外が表示されたこと、例外が再スローされると、元のコール スタックとエラー メッセージが含まれています。  
  
   
  
## Examples  
 次のコード例を使用する ASP.NET ページを示しています、 <xref:System.Web.UI.WebControls.ChangePassword> Web コントロール、およびイベント ハンドラーが含まれています、<xref:System.Web.UI.WebControls.ChangePassword.SendMailError>という名前のイベント`SendMailError`です。 このコード例では、ASP.NET メンバーシップとフォーム認証、および、名とパスワードがわかっているユーザーが作成されたを使用する ASP.NET Web サイトが構成されていると仮定します。 詳細については、次を参照してください。[する方法: 単純なフォーム認証を実装する](http://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e)です。  
  
 パスワードの変更が成功すると、コード、`SendingMail`イベント ハンドラーは、変更の確認をユーザーに電子メール メッセージを送信しようとしています。 SMTP は、このコード例を実行するために、サーバーで既に構成する必要があります。 SMTP サーバーを構成する方法については、次を参照してください。 [NIB: 方法: インストールと構成内の SMTP 仮想サーバー IIS 6.0](http://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8)です。 この例の目的で、必要はありません。 SMTP サーバーを構成するには電子メール メッセージを送信するエラーをテストする例が構築されます。  
  
 メール サーバーが正しく構成されていない場合またはその他のエラーが発生した電子メール メッセージを送信することはできません、`SendMailError`関数が呼び出されます。 メッセージがユーザーに表示されます。 さらに、イベントはイベント ソース MySamplesSite を既にという名前が存在することを想定して Windows アプリケーション イベント ログに記録されます。 指定したイベント ソースを作成するのには、次のコード例を参照してください。 イベント ソースの作成の詳細については、次を参照してください。[サーバーで ASP.NET Web フォーム ページのイベントの処理](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9)です。 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A>のプロパティ、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs>にオブジェクトが設定されている`true`エラーが処理されていることを示すためにします。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 プログラムによって、アプリケーション ログに MySamplesSite をという名前のイベント ソースを追加する必要がある場合は、次のコード例を使用します。 このイベント ソースは、最初のコード例を正しく動作するために存在する必要があります。 次のコード例では、管理者特権が必要です。  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" /> プロパティに格納されている SMTP 例外が処理されたかどうかを示します。</summary>
        <value>
          <see langword="true" /> の場合、その例外は <see cref="T:System.Web.UI.WebControls.SendMailErrorEventHandler" /> デリゲートによって処理されています。 <see langword="false" /> の場合、元のコール スタックとエラー メッセージを含んだ例外が再度スローされます。  
  
 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A>プロパティ示す場合は、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A>が処理されました。 電子メール メッセージを送信できない場合、SMTP メール プロバイダーによって例外がスローされます、<xref:System.Web.UI.WebControls.ChangePassword>コントロールまたは<xref:System.Web.UI.WebControls.CreateUserWizard>です。 例外の最も一般的な理由で構成エラーが発生、 [ &lt;smtp&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md)のマシン構成ファイル。 ようなエラーが、通常は開発中に発見し、アプリケーションのデバッグ、メール サーバーが失敗するが予期せず、運用環境で、アプリケーション全体のような状況で失敗にするかどうかを決定する必要があります。 それ以外の場合は、イベントを処理により、アプリケーションは、続行します。  
  
 イベント ハンドラーを作成しない場合、<xref:System.Web.UI.WebControls.ChangePassword.SendMailError>イベント、または元のまま残りますイベント ハンドラーを作成する場合、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A>プロパティに設定`false`Web アプリケーションは、電子メール メッセージを送信するときにエラーが発生した場合に実行を停止し、ASP.NET は、エラー メッセージが表示されます。 例外が発生した場合でも実行を継続する Web アプリケーションをイベントを処理できます。 これは、電子メール メッセージを送信する重要ではない場合に便利です。 たとえば、ユーザーが複数ステップのウィザードを実行するときに、例外が発生した場合、エラー ログに記録、ユーザーに情報メッセージを表示、およびユーザーが、ウィザードを完了できるようにすると便利なができます。  
  
   
  
## Examples  
 次のコード例を使用する ASP.NET ページを示しています、 <xref:System.Web.UI.WebControls.ChangePassword> Web コントロール、およびイベント ハンドラーが含まれています、<xref:System.Web.UI.WebControls.ChangePassword.SendMailError>という名前のイベント`SendMailError`です。 このコード例では、ASP.NET メンバーシップとフォーム認証、および、名とパスワードがわかっているユーザーが作成されたを使用する ASP.NET Web サイトが構成されていると仮定します。 詳細については、次を参照してください。[する方法: 単純なフォーム認証を実装する](http://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e)です。  
  
 パスワードの変更が成功すると、コード、`SendingMail`イベント ハンドラーは、変更の確認をユーザーに電子メール メッセージを送信しようとしています。 SMTP は、このコード例を実行するために、サーバーで既に構成する必要があります。 SMTP サーバーを構成する方法については、次を参照してください。 [NIB: 方法: インストールと構成内の SMTP 仮想サーバー IIS 6.0](http://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8)です。 この例の目的で、必要はありません。 SMTP サーバーを構成するには電子メール メッセージを送信するエラーをテストする例が構築されます。  
  
 メール サーバーが正しく構成されていない場合またはその他のエラーが発生した電子メール メッセージを送信することはできません、`SendMailError`関数が呼び出されます。 メッセージがユーザーに表示されます。 さらに、イベントはイベント ソース MySamplesSite を既にという名前が存在することを想定して Windows アプリケーション イベント ログに記録されます。 指定したイベント ソースを作成するのには、次のコード例を参照してください。 イベント ソースの作成の詳細については、次を参照してください。[サーバーで ASP.NET Web フォーム ページのイベントの処理](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9)です。 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A>のプロパティ、<xref:System.Web.UI.WebControls.SendMailErrorEventArgs>にオブジェクトが設定されている`true`エラーが処理されていることを示すためにします。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 プログラムによって、アプリケーション ログに MySamplesSite をという名前のイベント ソースを追加する必要がある場合は、次のコード例を使用します。 このイベント ソースは、最初のコード例を正しく動作するために存在する必要があります。 次のコード例では、管理者特権が必要です。  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
      </Docs>
    </Member>
  </Members>
</Type>