<Type Name="SqlDataSourceView" FullName="System.Web.UI.WebControls.SqlDataSourceView">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="56793326c9289dc8571df36d7fa8e9d17af807b3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30600726" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SqlDataSourceView : System.Web.UI.DataSourceView, System.Web.UI.IStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlDataSourceView extends System.Web.UI.DataSourceView implements class System.Web.UI.IStateManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SqlDataSourceView" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlDataSourceView&#xA;Inherits DataSourceView&#xA;Implements IStateManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlDataSourceView : System::Web::UI::DataSourceView, System::Web::UI::IStateManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceView</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IStateManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールをサポートし、リレーショナル データベースに対して SQL データ操作を実行するためのデータ バインド コントロールのインターフェイスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>クラスは、主に、データ バインド コントロール、およびページ コードでプログラミング可能なオブジェクトとしてではなく使用されます。  
  
 ASP.NET データ ソース コントロールには、データ ソース ビュー オブジェクトによって表されるデータの 1 つまたは複数のリストが含まれています。 <xref:System.Web.UI.WebControls.SqlDataSourceView>クラスを拡張、<xref:System.Web.UI.DataSourceView>クラスの機能を定義、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールを関連付けられているし、データ ソース コントロールの基本的なデータの機能を実装します。 <xref:System.Web.UI.WebControls.SqlDataSourceView>クラス、データの機能を実装、<xref:System.Web.UI.WebControls.SqlDataSource>を制御するなど、 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>、 <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>、 <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>、および<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>操作、並べ替え、フィルター処理、および状態で保持されている設定を管理します。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>によってページの開発者にオブジェクトが直接公開されません、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール、そのプロパティの多くは、します。 データ ソース ビューを実行する最も基本的な操作は、基になるデータベースを使用して、データの取得、<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>を取得するメソッド、<xref:System.Collections.IEnumerable>データ項目のコレクション。 <xref:System.Web.UI.WebControls.SqlDataSourceView>クラスは、SQL クエリを使用してリレーショナル データベースからデータを取得します。 SQL クエリはパラメーター化して、柔軟性とセキュリティを向上できます。 次のデータ取得方法、プロパティ、およびイベントは、によって実装される、<xref:System.Web.UI.WebControls.SqlDataSourceView>によって直接公開されると、<xref:System.Web.UI.WebControls.SqlDataSource>ページの開発者を他の呼び出し元の制御。  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティ  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> プロパティ  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Selecting>イベント  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Selected>イベント  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView> SQL コマンドを使用してリレーショナル データベースのデータの更新をサポートしています。 SQL コマンドは、柔軟性とセキュリティのパラメーター化することができます。 などのデータ バインド コントロール、<xref:System.Web.UI.WebControls.GridView>と<xref:System.Web.UI.WebControls.DetailsView>を使用して自動的に更新プログラムを実行するように構成できます、<xref:System.Web.UI.WebControls.SqlDataSourceView>となる一方で他のコントロールのことはできません。 次の更新メソッド、プロパティ、およびイベントは、によって実装される、<xref:System.Web.UI.WebControls.SqlDataSourceView>によって直接公開されると、<xref:System.Web.UI.WebControls.SqlDataSource>ページの開発者を他の呼び出し元の制御。  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティ  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> プロパティ  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Updating>イベント  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Updated>イベント  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>をリレーショナル データベースに新しい行のデータの挿入をサポートしています。 SQL コマンドで指定されている、<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>柔軟性とセキュリティのプロパティをパラメーター化することができます。 などのデータ バインド コントロール、<xref:System.Web.UI.WebControls.GridView>と<xref:System.Web.UI.WebControls.DetailsView>、挿入を使用して自動的に実行するように構成することができます、<xref:System.Web.UI.WebControls.SqlDataSourceView>に他のコントロールは、します。 次は、メソッド、プロパティを挿入し、イベントして実装されます、<xref:System.Web.UI.WebControls.SqlDataSourceView>によって直接公開されると、<xref:System.Web.UI.WebControls.SqlDataSource>ページ作成者および他の呼び出し元に制御します。  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> プロパティ  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> プロパティ  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Inserting>イベント  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Inserted>イベント  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトを使用して、リレーショナル データベースからデータの削除をサポートしています。 指定されているが、SQL と同様に他のコマンドでは、コマンド、<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>柔軟性とセキュリティのプロパティをパラメーター化することができます。 などのデータ バインド コントロール、<xref:System.Web.UI.WebControls.GridView>と<xref:System.Web.UI.WebControls.DetailsView>、使用して自動的に削除を実行するように構成できる、<xref:System.Web.UI.WebControls.SqlDataSourceView>に他のコントロールは、します。 次は、メソッド、プロパティを削除し、イベントして実装されます、<xref:System.Web.UI.WebControls.SqlDataSourceView>によって直接公開されると、<xref:System.Web.UI.WebControls.SqlDataSource>ページ作成者および他の呼び出し元に制御します。  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> プロパティ  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> プロパティ  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Deleting>イベント  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Deleted>イベント  
  
 データの取得は、データの取得中にデータをフィルター処理に使用される句は、動的とより強力です。 つまり、句が行われていない、柔軟で強力な SQL クエリで WHERE 句内の値が変更できますが、Web フォーム ページ上のコントロールに表示される値などの値にバインドされて静的 SQL クエリ。 SQL の再構築ではなくクエリを実行し、設定、<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>使用するすべてのページ読み込みのプロパティを<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>と<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>データの取得を動的にフィルターを適用するプロパティです。 これらのプロパティは、によって実装される、<xref:System.Web.UI.WebControls.SqlDataSourceView>によって直接公開されると、<xref:System.Web.UI.WebControls.SqlDataSource>データ バインド コントロールを他の呼び出し元の制御します。  
  
 取得することで、データを並べ替えることができます、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール、ORDER BY 句、これにより、データを取得するときの順序を実行するデータベースを追加するかが取得された後は、メモリ内のデータを順序付けします。 並べ替え式を指定することができます、<xref:System.Web.UI.WebControls.SqlDataSourceView>を設定して、<xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>のプロパティ、<xref:System.Web.UI.DataSourceSelectArguments>に渡されるオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>メソッドです。 構文、<xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>の構文と同じプロパティが、<xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType>プロパティです。 データを取得するストアド プロシージャを使用する場合も行えます、<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>具体的には、ストアド プロシージャの呼び出しの結果の並べ替えに使用されるパラメーターを指定するプロパティです。  
  
 複数のユーザーは、同時にデータベースを変更したり、ときに同時実行の競合が発生する可能性があります。 <xref:System.Web.UI.WebControls.SqlDataSource>コントロールがコントロールで、同時性、<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection?displayProperty=nameWithType>プロパティです。 この機能は、<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection?displayProperty=nameWithType>プロパティです。  
  
 他の多くの Web サーバー コントロールと同様に、<xref:System.Web.UI.WebControls.SqlDataSourceView>を実装する、<xref:System.Web.UI.IStateManager>インターフェイスと使用法は、ページ要求間での状態を追跡するために状態を表示します。 実装、<xref:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState%2A>およびプロパティと<xref:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState%2A>、<xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A>と<xref:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState%2A>コントロールのビュー状態の追跡を有効にするメソッドが用意されています。 詳細については、次を参照してください。 [ASP.NET 状態管理の概要](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce)です。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.SqlDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceView" />
    <altmember cref="T:System.Web.UI.WebControls.AccessDataSourceView" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSourceView (System.Web.UI.WebControls.SqlDataSource owner, string name, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.SqlDataSource owner, string name, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.#ctor(System.Web.UI.WebControls.SqlDataSource,System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As SqlDataSource, name As String, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSourceView(System::Web::UI::WebControls::SqlDataSource ^ owner, System::String ^ name, System::Web::HttpContext ^ context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.WebControls.SqlDataSource" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="owner">
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> に関連付けられているデータ ソース コントロール。</param>
        <param name="name">データ ソース ビューを所有するデータ ソース コントロールのスコープ内の、そのデータ ソース ビューの固有の名前。</param>
        <param name="context">現在の <see cref="T:System.Web.HttpContext" /> です。</param>
        <summary>指定した <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> コントロールを現在のビューの所有者として設定して、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.%23ctor%2A>コンス トラクターを呼び出す、<xref:System.Web.UI.WebControls.SqlDataSource.GetView%2A>を指定したデータ ソース ビューの新しいインスタンスを返すメソッドを`name`パラメーター。 <xref:System.Web.UI.WebControls.SqlDataSource>コントロールが 1 つのみ関連付けられる<xref:System.Web.UI.WebControls.SqlDataSourceView>、表示する、任意の時点であり、常にオブジェクト名`Table`によってこの名前付けの制限が課されるが、 <xref:System.Web.UI.WebControls.SqlDataSource> 、制御、<xref:System.Web.UI.WebControls.SqlDataSourceView>です。 オーバーライドすることができます、<xref:System.Web.UI.WebControls.SqlDataSource.GetView%2A>別の名前付け規則にビューをサポートするメソッド。  
  
 <xref:System.Web.HttpContext>によって渡されるオブジェクト、`context`パラメーターがなどのオブジェクトにアクセスするパラメーター、データ ソース ビューで使用されて、<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>と<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A>プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="CancelSelectOnNullParameter">
      <MemberSignature Language="C#" Value="public bool CancelSelectOnNullParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelSelectOnNullParameter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CancelSelectOnNullParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CancelSelectOnNullParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancelSelectOnNullParameter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> コレクションに格納されているパラメーターが <see langword="null" /> と評価されたときに、データ取得操作をキャンセルするかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> コレクションに格納されているパラメーターが <see langword="true" /> と評価されたときに、データ取得操作をキャンセルする場合は <see langword="null" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A>プロパティは viewstate に格納されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter" />
      </Docs>
    </Member>
    <Member MemberName="CanDelete">
      <MemberSignature Language="C#" Value="public override bool CanDelete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanDelete" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanDelete { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> コントロールに関連付けられている <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> オブジェクトで削除操作がサポートされているかどうかを示す値を取得します。</summary>
        <value>
          操作がサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanDelete%2A>プロパティから返される`true`場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>プロパティを設定します。 すべてのデータ プロパティが設定されていないか、正しく設定されていない場合は削除操作が失敗します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CanInsert">
      <MemberSignature Language="C#" Value="public override bool CanInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanInsert" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanInsert { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> コントロールに関連付けられている <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> オブジェクトで挿入操作がサポートされているかどうかを示す値を取得します。</summary>
        <value>
          操作がサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanInsert%2A>プロパティから返される`true`場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>プロパティを設定します。 すべてのデータ プロパティが設定されていないか、正しく設定されていない場合は、挿入操作が失敗します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CanPage">
      <MemberSignature Language="C#" Value="public override bool CanPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanPage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanPage { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> コントロールに関連付けられている <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> オブジェクトで取得データのページングがサポートされているかどうかを示す値を取得します。</summary>
        <value>
          常に <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトはページングをサポートしていません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.StartRowIndex" />
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.MaximumRows" />
      </Docs>
    </Member>
    <Member MemberName="CanRetrieveTotalRowCount">
      <MemberSignature Language="C#" Value="public override bool CanRetrieveTotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRetrieveTotalRowCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRetrieveTotalRowCount As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRetrieveTotalRowCount { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> コントロールに関連付けられた <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> オブジェクトで、一連のデータに加えて行の合計数を取得する操作がサポートされているかどうかを示す値を取得します。</summary>
        <value>
          常に <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトが行数の取得をサポートしていません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount" />
      </Docs>
    </Member>
    <Member MemberName="CanSort">
      <MemberSignature Language="C#" Value="public override bool CanSort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanSort" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSort { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> コントロールに関連付けられている <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> オブジェクトで取得データの並べ替え済みのビューがサポートされているかどうかを示す値を取得します。</summary>
        <value>
          並べ替えがサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanSort%2A>プロパティから返される`true`場合は、現在<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>プロパティに設定、<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>値と<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>プロパティを設定します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.SortExpression" />
      </Docs>
    </Member>
    <Member MemberName="CanUpdate">
      <MemberSignature Language="C#" Value="public override bool CanUpdate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanUpdate { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> コントロールに関連付けられている <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> オブジェクトで更新操作がサポートされているかどうかを示す値を取得します。</summary>
        <value>
          操作がサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate%2A>プロパティから返される`true`場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>プロパティを設定します。 すべてのデータ プロパティが設定されていないか、正しく設定されていない場合は削除操作が失敗します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータベース内の行のデータが操作中に変更される場合に、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールで更新と削除を実行する方法を示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.ConflictOptions" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>プロパティに古い値と新しい値のパラメーターを適用するかどうかを決定する、`Update`メソッドです。 コマンドである場合などで指定された、<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>プロパティから返される、 <xref:System.Data.DataSet> 、列を持つオブジェクト`Name`と`Number`、および<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>プロパティに設定されている、 <xref:System.Web.UI.ConflictOptions.OverwriteChanges> 、パラメーターが作成された値の`Name`と`Number`更新操作のです。 場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>プロパティに設定されている、 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 、パラメーターが作成された値の`Name`、 `Number`、 `original_Name`、および`original_Number`です。 (元の値のパラメーターの正確な名前が異なります、 <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>)。次に、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトかどうかをメソッドをで指定された、<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>プロパティが一致するパラメーターです。  
  
 同時実行制御は、データ ストア データを読み取るし、複数のクライアントがアクセスして、同じデータを操作するときに、ストアで変更する方法を制御するための手法です。 たとえば、1 つのクライアントは、データを読み取り、別のクライアントが、同じデータを読み取り、別のユーザーに提示中に、ユーザーに提示します。 両方のユーザーは、データ更新、データ ストレージに送信すると、予期しない結果が発生する、両方のクライアントは、同じデータの異なる値を更新するためです。 これは、競合と見なされます。 設定して、<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>プロパティを<xref:System.Web.UI.ConflictOptions.CompareAllValues>値、更新操作し、比較、古い値と新しい値を元のデータ ソースの競合を検出し、必要に応じてそれらを処理します。  
  
 値、<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>プロパティは viewstate に格納されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">選択した値が <see cref="T:System.Web.UI.ConflictOptions" /> 値の 1 つではありません。</exception>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">
          <see cref="T:System.Collections.IDictionary" /> 操作で削除するオブジェクトまたは行のキー値の <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />。</param>
        <param name="oldValues">
          <see cref="T:System.Collections.IDictionary" /> プロパティが <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 値に設定されている場合にだけ評価される行の値を格納している <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" />。</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> SQL 文字列、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" /> コレクションで指定した任意のパラメーター、および指定した <paramref name="keys" /> コレクションと <paramref name="oldValues" /> コレクション内の値を使用して、削除操作を実行します。</summary>
        <returns>基になるデータベースから削除された行数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>メソッドの呼び出し、<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete%2A>渡して、メソッド、`keys`と`oldValues`パラメーター。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が、基になるデータ ソースとの接続を確立できません。  
  
 \- または  
  
 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> プロパティが <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 値に設定され、<paramref name="oldValues" /> パラメーターが渡されていません。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanDelete" /> プロパティが <see langword="false" /> です。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public string DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータベースからデータを削除するために <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> が使用する SQL 文字列を取得または設定します。</summary>
        <value>データを削除するために <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> が使用する SQL 文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データベース製品ごとに使用する SQL が異なるため、SQL 文字列の構文は、現在使用している ADO.NET プロバイダーによって決まります。これは、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティから識別できます。  
  
 SQL 文字列がパラメーター化されたクエリまたはコメントである場合は、パラメーターのプレースホルダーも現在使用している ADO.NET プロバイダーによって決まります。 たとえば、プロバイダーは、<xref:System.Data.SqlClient?displayProperty=nameWithType>の既定のプロバイダーは、<xref:System.Web.UI.WebControls.SqlDataSource>クラス、パラメーターのプレース ホルダーは`'@parameterName'`します。 ただし、プロバイダーに設定されている場合、<xref:System.Data.Odbc?displayProperty=nameWithType>または<xref:System.Data.OleDb?displayProperty=nameWithType>、パラメーターのプレース ホルダーは`'?'`します。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>基になるデータベースには、ストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます。  
  
 値、<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>プロパティは viewstate に格納されます。  
  
   
  
## Examples  
 次のコード例は、設定する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>テキストを Northwind データベースの Orders テーブルからの注文を削除します。 データは Orders テーブルから取得されに表示される、<xref:System.Web.UI.WebControls.GridView>コントロール。 <xref:System.Web.UI.WebControls.GridView>レンダリング、**削除**ボタンを自動的にときに、<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>プロパティに設定されている`true`を自動的に入力し、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>コレクションと呼び出し、<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>メソッドと、**削除**ボタンをクリックします。 最後に、ため、この例では、データを削除、イベント ハンドラーを追加、削除操作の前に、ディスクにデータベースをバックアップしようとするが実行されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType DeleteCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> プロパティのテキストが SQL ステートメントまたは格納されたプロシージャの名前のいずれであるかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A>プロパティは viewstate に格納されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">選択した値が <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値の 1 つではありません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Deleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>削除操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.SqlDataSourceView.Deleted>削除操作が完了した後の値を確認するイベントを出力パラメーターです。 出力パラメーターは、<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> プロパティによって使用されるパラメーターを格納するパラメーター コレクションを取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> プロパティによって使用されるパラメーターを格納している <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>プロパティには、パラメーター化 SQL クエリが含まれています、<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>コレクションには、いずれかが含まれます<xref:System.Web.UI.WebControls.Parameter>SQL 文字列のパラメーターのプレース ホルダーに対応するオブジェクト。  
  
 パラメーター名の影響を受ける、<xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>プロパティです。 具体的には、名前は、主キーを識別する場合など、キー指定されたを使用して、`DataKeyNames`プロパティ、または削除、データ バインド コントロールのシナリオを更新し、<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>プロパティがに設定されている、<xref:System.Web.UI.ConflictOptions.CompareAllValues>値と一連の`oldValues`は対応するデータのメソッドに渡されます。 各パラメーターの名前に、書式指定文字列を適用するこの例では、`oldValues`コレクション。  
  
 ADO.NET プロバイダーでは、パラメーターの順序によって、<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>コレクションが重要であります。 <xref:System.Data.OleDb?displayProperty=nameWithType>と<xref:System.Data.Odbc?displayProperty=nameWithType>プロバイダーがパラメーター化 SQL クエリで使用されるパラメーターの順序に従って、コレクション内のパラメーターを関連付けます。 <xref:System.Data.SqlClient?displayProperty=nameWithType>プロバイダーは、既定の ADO.NET プロバイダーは、の<xref:System.Web.UI.WebControls.SqlDataSource>コントロールを SQL クエリにプレース ホルダーで、パラメーターの名前を照合することによって、コレクション内のパラメーターに関連付けます。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)です。  
  
   
  
## Examples  
 次のコード例は、設定する方法を示します、 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> Northwind データベースから注文を削除するテキスト。 最初に、データは Orders テーブルから取得および表示で、<xref:System.Web.UI.WebControls.DropDownList>コントロール。 明示的に宣言する必要があります、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>プロパティと呼び出し、<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>メソッドなど、データ バインド コントロールを使用する場合、 <xref:System.Web.UI.WebControls.DropDownList> (コントロールと異なり、ように、<xref:System.Web.UI.WebControls.GridView>と<xref:System.Web.UI.WebControls.DetailsView>、自動的に設定する、パラメーターと呼び出し、<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>データ ソース コントロールのメソッド)。 この例では、<xref:System.Web.UI.WebControls.Button.OnClick%2A>イベントは、プライベートに委任<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A>を明示的に呼び出すイベント ハンドラー、<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>のメソッド、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Deleting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>削除操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.SqlDataSourceView.Deleting>イベントは、パラメーターの値を検証する、または前に、のパラメーターの値を変更する、アプリケーションに固有の追加の初期化の操作を実行する、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、削除操作を実行します。  
  
 基になるデータ ソースへの接続がまだ開いていないイベント ハンドラー デリゲートが呼び出されるとします。 そのため、キャンセルすることはできません、<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>操作を呼び出すことによって直接、<xref:System.Data.Common.DbCommand.Cancel%2A>メソッドを<xref:System.Data.Common.DbCommand>によって公開されるオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>オブジェクト。 設定して、操作をキャンセルすることができます、ただし、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>に`true`です。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次のコード例は、処理する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource.Deleting>は削除操作を行う前に発生するイベントです。 この例は、Northwind データベースからデータを削除するため、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>削除操作を実行する前に、ディスクにデータベースをバックアップしようとするハンドラーを追加します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteDelete">
      <MemberSignature Language="C#" Value="protected override int ExecuteDelete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteDelete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteDelete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int ExecuteDelete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">
          <see cref="T:System.Collections.IDictionary" /> 操作で削除するオブジェクトまたは行のキー値の <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />。</param>
        <param name="oldValues">
          <see cref="T:System.Collections.IDictionary" /> プロパティが <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 値に設定されている場合にだけ評価される行の値を格納している <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" />。</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> SQL 文字列、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" /> コレクションで指定した任意のパラメーター、および指定した <paramref name="keys" /> コレクションと <paramref name="oldValues" /> コレクション内の値を使用して、削除操作を実行します。</summary>
        <returns>基になるデータベースから削除された行数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>クラスを継承した実装<xref:System.Web.UI.DataSourceView.ExecuteDelete%2A>メソッドは、データベースからデータを削除します。 ページの開発者およびデータ バインド コントロールの作成者が呼び出す必要はありません、<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete%2A>メソッド直接。 代わりに、使用して公開される<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>メソッドです。  
  
 含まれている値、`keys`コレクションが評価されに含まれる任意の値とマージされた、<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>コレクション。 場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>プロパティに設定されている、<xref:System.Web.UI.ConflictOptions.CompareAllValues>に含まれている値、値、`oldValues`コレクションの書式は、<xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>プロパティでありもマージします。  
  
 削除操作を実行すると、前に、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSourceView.Deleting>イベント。 パラメーターの値を確認して、削除する前に処理を実行するこのイベントを処理することができます。  
  
 削除操作を実行する、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトのビルド、<xref:System.Data.Common.DbCommand>オブジェクトを使用して、<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>テキストおよび関連<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>プロパティ、し、実行、<xref:System.Data.Common.DbCommand>基になるデータベースに対してオブジェクト。 削除操作の完了後、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSourceView.Deleted>イベント。 任意の戻り値およびエラー コードを調べ、後処理を実行するこのイベントを処理することができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が、基になるデータ ソースとの接続を確立できません。  
  
 \- または  
  
 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> プロパティが <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 値に設定され、<paramref name="oldValues" /> パラメーターが渡されていません。</exception>
        <exception cref="T:System.Web.HttpException">現在のユーザーには、データベースにアクセスできる正しいアクセス許可がありません。  
  
 \- または  
  
 コントロールのインスタンスは、<see cref="T:System.Web.UI.WebControls.AccessDataSource" /> コントロールであり、<see cref="P:System.Web.UI.WebControls.AccessDataSource.DataFile" /> プロパティに指定されているパスへのアクセスは拒否されます。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanDelete" /> プロパティが <see langword="false" /> です。  
  
 \- または  
  
 <see cref="T:System.Web.UI.WebControls.AccessDataSource" /> コントロールのインスタンスを使用する前に、デザイン時の相対パスがデザイナーによって正しく割り当てられていませんでした。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteInsert">
      <MemberSignature Language="C#" Value="protected override int ExecuteInsert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteInsert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteInsert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int ExecuteInsert(System::Collections::IDictionary ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">データベースへの挿入操作を実行するために、<see cref="T:System.Collections.IDictionary" /> プロパティで使用される値の <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />。 クエリに関連付けられているパラメーターがないか、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> プロパティがパラメーター化された SQL クエリでない場合は、<see langword="null" /> を渡します。</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> SQL 文字列、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" /> コレクションで指定した任意のパラメーター、および指定した <paramref name="values" /> コレクション内の値を使用して、挿入操作を実行します。</summary>
        <returns>基になるデータベースに挿入された行数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>クラスを継承した実装<xref:System.Web.UI.DataSourceView.ExecuteInsert%2A>データベースにデータを挿入するメソッド。 ページの開発者およびデータ バインド コントロールの作成者が呼び出す必要はありません、<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert%2A>メソッド直接。 代わりに、使用して公開される<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>メソッドです。  
  
 挿入操作を実行すると、前に、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSourceView.Inserting>イベント。 パラメーターの値を確認して、挿入する前に処理を実行するこのイベントを処理することができます。  
  
 挿入操作を実行する、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトのビルド、<xref:System.Data.Common.DbCommand>オブジェクトを使用して、<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>テキストと、関連付けられたすべて<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A>プロパティ、し、実行、<xref:System.Data.Common.DbCommand>基になるデータベースに対してオブジェクト。 挿入が完了したら、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSourceView.Inserted>イベント。 任意の戻り値およびエラー コードを調べ、後処理を実行するこのイベントを処理することができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が、基になるデータ ソースとの接続を確立できません。</exception>
        <exception cref="T:System.Web.HttpException">現在のユーザーには、データベースにアクセスできる正しいアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanInsert" /> プロパティが <see langword="false" /> です。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteSelect">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerable ExecuteSelect (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Collections.IEnumerable ExecuteSelect(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ExecuteSelect (arguments As DataSourceSelectArguments) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Collections::IEnumerable ^ ExecuteSelect(System::Web::UI::DataSourceSelectArguments ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">基本的なデータ取得を超えたデータ操作を要求する場合に使用する <see cref="T:System.Web.UI.DataSourceSelectArguments" /> オブジェクト。</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> SQL 文字列、および <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> コレクション内の任意のパラメーターを使用して、基になるデータベースからデータを取得します。</summary>
        <returns>データ行の <see cref="T:System.Collections.IEnumerable" /> リスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>クラスを継承した実装<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>データベースからデータを取得します。 ページの開発者およびデータ バインド コントロールの作成者が呼び出す必要はありません、<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>メソッド直接。 代わりに、使用して公開される<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッドです。  
  
 データの取得が行われる前に、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSourceView.Selecting>イベント。 パラメーターの値を確認して、データが取得される前に処理を実行するこのイベントを処理することができます。  
  
 操作を実行する、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトのビルド、<xref:System.Data.Common.DbCommand>オブジェクトを使用して、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>テキストと、関連付けられたすべて<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>、し、基になるデータベースに対して実行します。 操作の完了後、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSource.Selected>イベント。 戻り値、エラー コードを調べるには、このイベントを処理し、後処理を実行できます。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>メソッドを返します、<xref:System.Data.DataView>オブジェクトの場合、<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>に設定されている<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>、または<xref:System.Data.IDataReader>オブジェクトの場合、<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>に設定されている<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>です。 閉じる、<xref:System.Data.IDataReader>オブジェクト データの読み取りが完了したとき。  
  
 場合、<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>に設定されている<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>キャッシュが有効になっていると、<xref:System.Web.UI.WebControls.SqlDataSourceView>からデータを取得し、データの処理中にキャッシュにデータを保存します。 キャッシュが作成、破棄、または更新の組み合わせで指定されたキャッシュの動作に基づいて、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>と<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>プロパティです。  
  
> [!IMPORTANT]
>  Windows 認証ではクライアントの偽装を使用しているときに、最初のユーザー データにアクセスするときに、データがキャッシュされます。 別のユーザーは、同じデータを要求している場合は、データがキャッシュから取得されます。 データは、データへのユーザーのアクセスを確認するデータベースを別の呼び出しを行っては取得されません。 予定の場合、データにアクセスする複数のユーザー、データベースのセキュリティ構成を検証するデータが取得されるたびにする、キャッシュを使用しません。  
  
 場合、<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>に設定されている<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>と<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>が指定されている、指定されたいずれかと評価される<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>データ取得操作中のデータの一覧にその結果のフィルターが適用されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" /> メソッドに渡される <paramref name="arguments" /> は、データを取得するときに、取得したデータに対するページングまたは並べ替えを有効にするには、データ ソースで追加の作業が必要であることを指定しますが、データ ソース コントロールは、要求された機能をサポートしていません。  
  
 \- または  
  
 キャッシュは有効ですが、データ ソースの <see cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" /> プロパティが <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataSet" /> に設定されていません。  
  
 \- または  
  
 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName" /> プロパティが設定されていますが、<see cref="P:System.Data.SqlClient.SqlCommand.CommandType" /> が <see cref="F:System.Data.CommandType.StoredProcedure" /> に設定されていません。</exception>
        <exception cref="T:System.InvalidOperationException">データ ソースがデータベース接続を作成できません。  
  
 \- または  
  
 キャッシュは有効ですが、内部キャッシュとコマンドの種類が一致していません。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteUpdate">
      <MemberSignature Language="C#" Value="protected override int ExecuteUpdate (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteUpdate(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteUpdate (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int ExecuteUpdate(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">データベース更新操作を実行するために、<see cref="T:System.Collections.IDictionary" /> プロパティで使用する主キーの <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />。 クエリに関連付けられているキーがないか、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> プロパティがパラメーター化された SQL クエリでない場合は、<see langword="null" /> を渡します。</param>
        <param name="values">データベース更新操作を実行するために、<see cref="T:System.Collections.IDictionary" /> プロパティで使用する値の <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />。 クエリに関連付けられているパラメーターがないか、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> がパラメーター化された SQL クエリでない場合は、<see langword="null" /> を渡します。</param>
        <param name="oldValues">データベース内の元の値を表す <see cref="T:System.Collections.IDictionary" />。 クエリに関連付けられているパラメーターがないか、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> プロパティがパラメーター化された SQL クエリでない場合は、<see langword="null" /> を渡します。</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> SQL 文字列、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" /> コレクション内の任意のパラメーター、および指定した <paramref name="keys" />、<paramref name="values" />、<paramref name="oldValues" /> の各コレクション内の値を使用して、更新操作を実行します。</summary>
        <returns>基になるデータベースで更新された行数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>クラスを継承した実装<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate%2A>データベース内のデータを更新する方法です。 ページの開発者およびデータ バインド コントロールの作成者が呼び出す必要はありません、<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate%2A>メソッド直接。 代わりに、使用して公開される<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>メソッドです。  
  
 含まれる値、`keys`と`values`コレクションが評価されに含まれる任意の値とマージされた、<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>コレクション。 場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>プロパティに設定されている<xref:System.Web.UI.ConflictOptions.CompareAllValues>に含まれる値、`oldValues`コレクションの書式は、<xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>ともマージします。  
  
 更新操作を実行すると、前に、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSourceView.Updating>イベント。 パラメーターの値を確認し、更新の前に処理を実行するには、このイベントを処理することができます。  
  
 操作を実行する、<xref:System.Web.UI.WebControls.SqlDataSourceView>ビルド、<xref:System.Data.Common.DbCommand>オブジェクトを使用して、<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>テキストと、関連付けられたすべて<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>プロパティ、し、実行、<xref:System.Data.Common.DbCommand>基になるデータベースに対してオブジェクト。 操作の完了後、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSourceView.Updated>イベント。 任意の戻り値およびエラー コードを調べ、後処理を実行するこのイベントを処理することができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が、基になるデータ ソースとの接続を確立できません。  
  
 \- または  
  
 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> プロパティが <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 値に設定され、<paramref name="oldValues" /> パラメーターが渡されていません。</exception>
        <exception cref="T:System.Web.HttpException">現在のユーザーには、データベースにアクセスできる正しいアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate" /> プロパティが <see langword="false" /> です。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Select" /> メソッドが呼び出されるときに適用されるフィルター式を取得または設定します。</summary>
        <value>
          <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> メソッドを使用してデータを取得するときに適用されるフィルター式を表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用される構文、<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>プロパティは、書式文字列形式の構文。 内のパラメーターを含めることができます、<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>プロパティです。 パラメーターの型が文字列または文字の場合は、パラメーターを単一引用符で囲みます。 パラメーターが数値型の場合、引用符がある場合は、必要ではありません。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>コレクションに含まれているプレース ホルダーに評価されるパラメーターが含まれています、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>プロパティです。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、データのフィルター処理をサポートしている時にのみ`DataSet`モード。  
  
 値、<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>プロパティは viewstate に格納されます。  
  
> [!IMPORTANT]
>  クライアントから受信したフィルターのパラメーター値を検証する必要があります。 ランタイムは、単にフィルター式にパラメーター値を代入しに適用されます、<xref:System.Data.DataView>によって返されるオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。 使用している場合、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>フィルターを使用する前に、パラメーターの値を検証する必要があります、返される項目数を制限するセキュリティ対策としてのプロパティです。  
  
   
  
## Examples  
 次のコード例は、Northwind データベースからデータを取得しを使用してフィルター処理する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>と<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>プロパティです。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールには、いつでもが適用される、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>データを取得するメソッドを実行します。 この例では、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>プロパティに含まれているフィルター パラメーターのプレース ホルダーが含まれています、<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>コレクション。 この例では、フィルター パラメーターは、<xref:System.Web.UI.WebControls.ControlParameter>にバインドされているオブジェクト、<xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A>のプロパティ、<xref:System.Web.UI.WebControls.DropDownList>コントロール。 <xref:System.Web.UI.WebControls.DropDownList>コントロールがその<xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A>プロパティに設定`true`の変化、<xref:System.Web.UI.WebControls.DropDownList>の選択は、サーバーにポストする ページと<xref:System.Web.UI.WebControls.GridView>新しいフィルターを使用して、データ ソース コントロールを再バインドするコントロール。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" /> が <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> モードのときに、<see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataReader" /> プロパティが設定されました。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As SqlDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フィルター操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering>イベント フィルターの前にパラメーター値の検証操作を実行、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトは、フィルター操作を実行します。 取り消すことができます、<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>を設定することによって、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs>オブジェクトを`true`です。 場合にのみこのイベントは、<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>プロパティを設定します。  
  
> [!IMPORTANT]
>  クライアントから受信したフィルターのパラメーター値を検証する必要があります。 ランタイムは、単にフィルター式にパラメーター値を代入しに適用されます、<xref:System.Data.DataView>によって返されるオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。 使用している場合、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>フィルターを使用する前に、パラメーターの値を検証する必要があります、返される項目数を制限するセキュリティ対策としてのプロパティです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Filtering" />
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" /> 文字列のパラメーター プレースホルダーに関連付けられたパラメーターのコレクションを取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> プロパティに含まれる任意のパラメーター プレースホルダーに関連付けられたパラメーターのセットを格納している <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内のパラメーター、<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>コレクションがで指定されているすべてのパラメーターで関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>プロパティです。 指定されているパラメーターのプレース ホルダー、<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>が順序で評価され、パラメーター オブジェクトに一致する、<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>コレクションと、<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>メソッドが呼び出されます。  
  
> [!IMPORTANT]
>  クライアントから受信したフィルターのパラメーター値を検証する必要があります。 ランタイムは、単にフィルター式にパラメーター値を代入しに適用されます、<xref:System.Data.DataView>によって返されるオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。 使用している場合、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>フィルターを使用する前に、パラメーターの値を検証する必要があります、返される項目数を制限するセキュリティ対策としてのプロパティです。  
  
   
  
## Examples  
 次のコード例は、Northwind データベースからデータを取得しを使用してフィルター処理する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>と<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>プロパティです。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールには、いつでもが適用される、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>データを取得するメソッドを実行します。 この例では、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>プロパティに含まれているフィルター パラメーターのプレース ホルダーが含まれています、<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>コレクション。 さらに、フィルターのパラメーターは、<xref:System.Web.UI.WebControls.ControlParameter>にバインドされているオブジェクト、<xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A>のプロパティ、<xref:System.Web.UI.WebControls.DropDownList>コントロール。 <xref:System.Web.UI.WebControls.DropDownList>コントロールがその<xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A>プロパティに設定`true`の変化、<xref:System.Web.UI.WebControls.DropDownList>の選択は、サーバーに情報を投稿するページと<xref:System.Web.UI.WebControls.GridView>データ ソース コントロールにバインドするコントロール、新しいフィルターです。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">データベースへの挿入操作の実行に使用する、<see cref="T:System.Collections.IDictionary" /> プロパティのパラメーターの <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />。 クエリに関連付けられているパラメーターがないか、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> がパラメーター化された SQL クエリでない場合は、<see langword="null" /> を渡します。</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> SQL 文字列、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" /> コレクションで指定した任意のパラメーター、および指定した <paramref name="values" /> コレクション内の値を使用して、挿入操作を実行します。</summary>
        <returns>基になるデータベースに挿入された行数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>メソッドの呼び出し、<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert%2A>渡して、メソッド、`values`パラメーター。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が、基になるデータ ソースとの接続を確立できません。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanInsert" /> プロパティが <see langword="false" /> です。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public string InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータベースにデータを挿入するために <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> オブジェクトが使用する SQL 文字列を取得または設定します。</summary>
        <value>データを挿入するために <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> が使用する SQL 文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データベース製品ごとに使用する SQL が異なるため、SQL 文字列の構文は、現在使用している ADO.NET プロバイダーによって決まります。これは、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティから識別できます。 SQL 文字列がパラメーター化されたクエリまたはコメントである場合は、パラメーターのプレースホルダーも現在使用している ADO.NET プロバイダーによって決まります。 たとえば、プロバイダーは、<xref:System.Data.SqlClient?displayProperty=nameWithType>の既定のプロバイダーは、<xref:System.Web.UI.WebControls.SqlDataSource>クラス、パラメーターのプレース ホルダーは`'@parameterName'`します。 ただし、プロバイダーに設定されている場合、<xref:System.Data.Odbc?displayProperty=nameWithType>または<xref:System.Data.OleDb?displayProperty=nameWithType>、パラメーターのプレース ホルダーは`'?'`します。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>プロパティから、データ ソースには、ストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます。  
  
 値、<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>プロパティは viewstate に格納されます。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用してデータベースにデータを挿入する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール。 2 番目のコード例は、Microsoft SQL Server からデータを取得、表示する方法を示します、<xref:System.Web.UI.WebControls.GridView>制御、および使用して、<xref:System.Web.UI.WebControls.DetailsView>コントロールで選択した行の詳細を表示する、<xref:System.Web.UI.WebControls.GridView>と新しいレコードを挿入するためのフォームです。  
  
 次のコード例を使用してデータベースにデータを挿入する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール。 テーブルの現在のデータが表示されます、<xref:System.Web.UI.WebControls.DropDownList>コントロール。 内の値を入力して新しいレコードを追加することができます、<xref:System.Web.UI.WebControls.TextBox>コントロールをクリックして、**挿入**ボタンをクリックします。 ときに、**挿入**ボタンがクリックされると、指定した値がデータベースに挿入され、<xref:System.Web.UI.WebControls.DropDownList>が更新されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 次のコード例は、SQL Server からデータを取得、表示する方法を示します、<xref:System.Web.UI.WebControls.GridView>制御、および使用して、<xref:System.Web.UI.WebControls.DetailsView>コントロールで選択した行の詳細を表示する、<xref:System.Web.UI.WebControls.GridView>と新しいレコードを挿入するためのフォームです。  
  
 最初に、データが内に表示されます、<xref:System.Web.UI.WebControls.GridView>コントロールであり、選択した行の<xref:System.Web.UI.WebControls.GridView>にも表示されます、<xref:System.Web.UI.WebControls.DetailsView>コントロール。 <xref:System.Web.UI.WebControls.GridView>と<xref:System.Web.UI.WebControls.DetailsView>コントロールが別のデータを使用してソース コントロール; に関連付けられている 1 つ、<xref:System.Web.UI.WebControls.DetailsView>が、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>と<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>プロパティで、選択した行のことを確認、<xref:System.Web.UI.WebControls.GridView>は表示されます。  
  
 自動的に生成された をクリックすると**挿入**のボタン、<xref:System.Web.UI.WebControls.DetailsView>コントロール、<xref:System.Web.UI.WebControls.DetailsView>新しいレコードを挿入するために使用する別のユーザー インターフェイスを示しています。 この例では、レコードを挿入するストアド プロシージャを使用し、挿入された行の主キーを返します。 レコードを挿入する場合、<xref:System.Web.UI.WebControls.DetailsView>を自動的に入力、<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>呼び出し、バインドされた列から値を使用して、コレクション、<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>メソッドです。 <xref:System.Web.UI.WebControls.DetailsView>から適切なパラメーターを推論できる<xref:System.Web.UI.WebControls.BoundField>オブジェクトとパラメーターを<xref:System.Web.UI.WebControls.TemplateField>ASP.NET 双方向データ バインディングの構文を使用する場合のオブジェクトします。 この例では、追加のパラメーターが追加された、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>ストアド プロシージャによって返される主キーを処理するイベント ハンドラー。  
  
 最後に、によってデータが挿入された後、 <xref:System.Web.UI.WebControls.DetailsView> 、データベースへの制御、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>を処理するイベント ハンドラーが呼び出されると、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>イベント、挿入された行の主キーの値が表示されたら、および<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>のメソッド<xref:System.Web.UI.WebControls.GridView>データを更新するコントロールを明示的に呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType InsertCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> プロパティのテキストが SQL ステートメントまたは格納されたプロシージャの名前のいずれであるかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値のいずれか 1 つ。 値は、<see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A>プロパティは viewstate に格納されます。  
  
   
  
## Examples  
 次のコード例は、Microsoft SQL Server からデータを取得、表示する方法を示します、<xref:System.Web.UI.WebControls.GridView>制御、および使用して、<xref:System.Web.UI.WebControls.DetailsView>コントロールで選択した行の詳細を表示する、<xref:System.Web.UI.WebControls.GridView>と新しいレコードを挿入するためのフォームです。  
  
 <xref:System.Web.UI.WebControls.GridView>コントロールは、一連のデータを表示し、<xref:System.Web.UI.WebControls.DetailsView>コントロールには、特定の行の詳細が表示されます。 自動的に生成された をクリックすると**挿入**のボタン、<xref:System.Web.UI.WebControls.DetailsView>コントロール、<xref:System.Web.UI.WebControls.DetailsView>新しいレコードを挿入するために使用する別のユーザー インターフェイスを示しています。 この例では、レコードを挿入するストアド プロシージャを使用し、挿入された行の主キーを返します。 ストアド プロシージャの名前を設定、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>プロパティを設定して、ストアド プロシージャとして識別されると、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A>プロパティを<xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure>値。  
  
 最後に、によってデータが挿入された後、 <xref:System.Web.UI.WebControls.DetailsView> 、データベースへの制御、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>を処理するイベント ハンドラーが呼び出されると、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>イベント、挿入された行の主キーの値が表示されたら、および<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>のメソッド<xref:System.Web.UI.WebControls.GridView>データを更新するコントロールを明示的に呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">選択した値が <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値の 1 つではありません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Inserted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>挿入操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.SqlDataSourceView.Inserted>挿入操作が完了した後の値を確認するイベントを出力パラメーターです。 出力パラメーターは、<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次のコード例は、Microsoft SQL Server からデータを取得および表示する方法を示します、<xref:System.Web.UI.WebControls.GridView>コントロール。 また、例では、<xref:System.Web.UI.WebControls.DetailsView>で選択した行の詳細を表示するコントロールを<xref:System.Web.UI.WebControls.GridView>、および新しいレコードを挿入するためのフォームとして。  
  
 最初に、データが内に表示されます、<xref:System.Web.UI.WebControls.GridView>コントロールであり、選択した行の<xref:System.Web.UI.WebControls.GridView>にも表示されます、<xref:System.Web.UI.WebControls.DetailsView>です。 <xref:System.Web.UI.WebControls.GridView>と<xref:System.Web.UI.WebControls.DetailsView>コントロールが別のデータを使用してソース コントロール; に関連付けられている 1 つ、<xref:System.Web.UI.WebControls.DetailsView>が、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>と<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>プロパティで、選択した行のことを確認、<xref:System.Web.UI.WebControls.GridView>は表示されます。  
  
 自動的に生成された をクリックすると**挿入**のボタン、<xref:System.Web.UI.WebControls.DetailsView>コントロール、<xref:System.Web.UI.WebControls.DetailsView>新しいレコードを挿入するために使用する別のユーザー インターフェイスを示しています。 この例では、レコードを挿入するストアド プロシージャを使用し、挿入された行の主キーを返します。 レコードを挿入する場合、<xref:System.Web.UI.WebControls.DetailsView>を自動的に入力、<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>呼び出し、バインドされた列から値を使用して、コレクション、<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>メソッドです。 <xref:System.Web.UI.WebControls.DetailsView>から適切なパラメーターを推論できる<xref:System.Web.UI.WebControls.BoundField>オブジェクトとパラメーターを<xref:System.Web.UI.WebControls.TemplateField>ASP.NET 双方向データ バインディングの構文を使用する場合のオブジェクトします。 この例では、追加のパラメーターが追加された、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>ストアド プロシージャによって返される主キーを処理するイベント ハンドラー。  
  
 最後に、によってデータが挿入された後、 <xref:System.Web.UI.WebControls.DetailsView> 、データベースへの制御、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>を処理するイベント ハンドラーが呼び出されると、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>イベント、挿入された行の主キーの値が表示されたら、および<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>のメソッド<xref:System.Web.UI.WebControls.GridView>データを更新するコントロールを明示的に呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Inserting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>挿入操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.SqlDataSourceView.Inserting>イベントは、パラメーターの値を検証する、または前に、のパラメーターの値を変更する、アプリケーションに固有の追加の初期化の操作を実行する、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、挿入操作を実行します。  
  
 基になるデータ ソースへの接続がまだ開いていないイベント ハンドラー デリゲートが呼び出されるとします。 そのため、呼び出すことによって直接、データベースの操作を取り消すことはできません、<xref:System.Data.Common.DbCommand.Cancel%2A>メソッドを<xref:System.Data.Common.DbCommand>によって公開されるオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>オブジェクト。 ただしを設定して、データベースの操作をキャンセルできます、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>に`true`です。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次のコード例は、Microsoft SQL Server からデータを取得、表示する方法を示します、<xref:System.Web.UI.WebControls.GridView>コントロール。 また、例では、<xref:System.Web.UI.WebControls.DetailsView>で選択した行の詳細を表示するコントロールを<xref:System.Web.UI.WebControls.GridView>、および新しいレコードを挿入するためのフォームとして。  
  
 最初に、データが内に表示されます、<xref:System.Web.UI.WebControls.GridView>コントロールであり、選択した行の<xref:System.Web.UI.WebControls.GridView>にも表示されます、<xref:System.Web.UI.WebControls.DetailsView>コントロール。 <xref:System.Web.UI.WebControls.GridView>と<xref:System.Web.UI.WebControls.DetailsView>コントロールが別のデータを使用してソース コントロール; に関連付けられている 1 つ、<xref:System.Web.UI.WebControls.DetailsView>が、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>と<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>プロパティで、選択した行のことを確認、<xref:System.Web.UI.WebControls.GridView>は表示されます。  
  
 自動的に生成された をクリックすると**挿入**のボタン、<xref:System.Web.UI.WebControls.DetailsView>コントロール、<xref:System.Web.UI.WebControls.DetailsView>新しいレコードを挿入するために使用する別のユーザー インターフェイスを示しています。 この例では、レコードを挿入するストアド プロシージャを使用し、挿入された行の主キーを返します。 レコードを挿入する場合、<xref:System.Web.UI.WebControls.DetailsView>を自動的に入力、<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>呼び出し、バインドされた列から値を使用して、コレクション、<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>メソッドです。 <xref:System.Web.UI.WebControls.DetailsView>から適切なパラメーターを推論できる<xref:System.Web.UI.WebControls.BoundField>オブジェクト、およびパラメーターを<xref:System.Web.UI.WebControls.TemplateField>ASP.NET 双方向データ バインディングの構文を使用する場合のオブジェクトします。 この例では、追加のパラメーターが追加された、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>ストアド プロシージャによって返される主キーを処理するイベント ハンドラー。  
  
 最後に、によってデータが挿入された後、 <xref:System.Web.UI.WebControls.DetailsView> 、データベースへの制御、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>を処理するイベント ハンドラーが呼び出されると、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>イベント、挿入された行の主キーの値が表示されたら、および<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>のメソッド<xref:System.Web.UI.WebControls.GridView>データを更新するコントロールを明示的に呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> プロパティによって使用されるパラメーターを格納するパラメーター コレクションを取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> プロパティによって使用されるパラメーターを格納している <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>プロパティには、パラメーター化 SQL クエリが含まれています、<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A>コレクションには、いずれかが含まれます<xref:System.Web.UI.WebControls.Parameter>SQL 文字列のパラメーターのプレース ホルダーに対応するオブジェクト。  
  
 ADO.NET プロバイダーでは、パラメーターの順序によって、<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A>コレクションが重要であります。 <xref:System.Data.OleDb?displayProperty=nameWithType>と<xref:System.Data.Odbc?displayProperty=nameWithType>プロバイダーがパラメーター化 SQL クエリでパラメーターが表示される順序に従って、コレクション内のパラメーターを関連付けます。 <xref:System.Data.SqlClient?displayProperty=nameWithType>プロバイダーは、既定の ADO.NET プロバイダーは、の<xref:System.Web.UI.WebControls.SqlDataSource>コントロールを SQL クエリ内のプレース ホルダーの別名を持つパラメーターの名前を照合することによって、コレクション内のパラメーターに関連付けます。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)です。  
  
   
  
## Examples  
 次のコード例を使用してデータベースにデータを挿入する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールと、単純な Web フォーム ページ。 テーブルの現在のデータが表示されます、<xref:System.Web.UI.WebControls.DropDownList>コントロール。 内の値を入力して新しいレコードを追加することができます、<xref:System.Web.UI.WebControls.TextBox>コントロールをクリックして、**挿入**ボタンをクリックします。 ときに、**挿入**ボタンがクリックされると、指定した値がデータベースに挿入され、<xref:System.Web.UI.WebControls.DropDownList>が更新されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
      </Docs>
    </Member>
    <Member MemberName="IsTrackingViewState">
      <MemberSignature Language="C#" Value="protected bool IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsTrackingViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsTrackingViewState { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> オブジェクトがビューステートへの変更を保存しているかどうかを示す値を取得します。</summary>
        <value>
          データ ソース ビューがその状態を保存するようにマークされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected virtual void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void LoadViewState(System::Object ^ savedState);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">復元する <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> の状態を表すオブジェクト。</param>
        <summary>データ ソース ビューの、以前保存したビューステートを復元します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、主に使用、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]インフラストラクチャ コードから直接使用するものではありません。  ただし、コントロールの開発者は、カスタム サーバー コントロールがそのビューステートを復元する方法を指定するには、このメソッドをオーバーライドすることができます。 詳細については、次を参照してください。 [ASP.NET 状態管理の概要](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState%2A>メソッドのビュー ステート情報の復元、<xref:System.Web.UI.WebControls.SqlDataSourceView>によって保存された前回のページ要求からのオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A>メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" /> メソッドまたは <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" /> メソッドに渡される任意のパラメーター名に適用される書式指定文字列を取得または設定します。</summary>
        <value>
          <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" /> メソッドまたは <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" /> メソッドに渡される任意の <paramref name="oldValues" /> パラメーターの名前に適用される書式指定文字列を表す文字列。 既定値は "{0}" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>によって識別されるものなど書式指定文字列が主キーのみに適用される、`DataKeyNames`プロパティ、または削除、データ バインド コントロールの更新シナリオと場所、<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>プロパティに設定されている、<xref:System.Web.UI.ConflictOptions.CompareAllValues>値と一連の`oldValues`は対応するデータのメソッドに渡されます。 各パラメーターの名前に、書式指定文字列を適用するこの例では、`oldValues`コレクション。 詳細については、「<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString?displayProperty=nameWithType>」を参照してください。  
  
 値、<xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>プロパティは viewstate に格納されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="OnDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDeleted (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeleted(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeleted (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeleted(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleted" /> コントロールが削除操作を完了した後に、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />を呼び出して派生クラスでメソッドが必ず、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />デリゲートを登録するための基本クラスのメソッドは、イベントを受信します。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnDeleting (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeleting(class System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeleting (e As SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeleting(System::Web::UI::WebControls::SqlDataSourceCommandEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleting" /> コントロールが削除操作を試行する前に、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## Examples  
 次のコード例は、処理する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource.Deleting>する前に発生するイベント、<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>操作が発生します。 この例は、Northwind データベースからデータを削除するため、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>削除が行われる前に、ディスクにデータベースをバックアップしようとするハンドラーを追加します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />を呼び出して派生クラスでメソッドが必ず、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />デリゲートを登録するための基本クラスのメソッドは、イベントを受信します。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFiltering">
      <MemberSignature Language="C#" Value="protected virtual void OnFiltering (System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFiltering(class System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFiltering (e As SqlDataSourceFilteringEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFiltering(System::Web::UI::WebControls::SqlDataSourceFilteringEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs" />。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Filtering" /> コントロールが選択操作の結果をフィルター処理する前に、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)" />を呼び出して派生クラスでメソッドが必ず、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)" />デリゲートを登録するための基本クラスのメソッドは、イベントを受信します。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnInserted">
      <MemberSignature Language="C#" Value="protected virtual void OnInserted (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInserted(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInserted (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInserted(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserted" /> コントロールが挿入操作を完了した後に、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## Examples  
 次のコード例は、Microsoft SQL Server からデータを取得、表示する方法を示します、<xref:System.Web.UI.WebControls.GridView>制御、および使用して、<xref:System.Web.UI.WebControls.DetailsView>コントロールで選択した行の詳細を表示する、<xref:System.Web.UI.WebControls.GridView>と新しいレコードを挿入するためのフォームです。  
  
 最初に、データが内に表示されます、<xref:System.Web.UI.WebControls.GridView>コントロールであり、選択した行の<xref:System.Web.UI.WebControls.GridView>にも表示されます、<xref:System.Web.UI.WebControls.DetailsView>コントロール。 <xref:System.Web.UI.WebControls.GridView>と<xref:System.Web.UI.WebControls.DetailsView>コントロールが別のデータを使用してソース コントロール; に関連付けられている 1 つ、<xref:System.Web.UI.WebControls.DetailsView>が、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>と<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>プロパティで、選択した行のことを確認、<xref:System.Web.UI.WebControls.GridView>は表示されます。  
  
 自動的に生成された をクリックすると**挿入**のボタン、<xref:System.Web.UI.WebControls.DetailsView>コントロール、<xref:System.Web.UI.WebControls.DetailsView>新しいレコードを挿入するために使用する別のユーザー インターフェイスを示しています。 この例では、レコードを挿入するストアド プロシージャを使用し、挿入された行の主キーを返します。 レコードを挿入する場合、<xref:System.Web.UI.WebControls.DetailsView>を自動的に入力、<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>呼び出し、バインドされた列から値を使用して、コレクション、<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>メソッドです。 <xref:System.Web.UI.WebControls.DetailsView>から適切なパラメーターを推論できる<xref:System.Web.UI.WebControls.BoundField>オブジェクトとパラメーターを<xref:System.Web.UI.WebControls.TemplateField>ASP.NET 双方向データ バインディングの構文を使用する場合のオブジェクトします。 この例では、追加のパラメーターが追加された、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>ストアド プロシージャによって返される主キーを処理するイベント ハンドラー。  
  
 最後に、によってデータが挿入された後、 <xref:System.Web.UI.WebControls.DetailsView> 、データベースへの制御、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>を処理するイベント ハンドラーが呼び出されると、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>イベント、挿入された行の主キーの値が表示されたら、および<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>のメソッド<xref:System.Web.UI.WebControls.GridView>データを更新するコントロールを明示的に呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />を呼び出して派生クラスでメソッドが必ず、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />デリゲートを登録するための基本クラスのメソッドは、イベントを受信します。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnInserting">
      <MemberSignature Language="C#" Value="protected virtual void OnInserting (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInserting(class System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInserting (e As SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInserting(System::Web::UI::WebControls::SqlDataSourceCommandEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserting" /> コントロールが挿入操作を試行する前に、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## Examples  
 次のコード例は、Microsoft SQL Server からデータを取得、表示する方法を示します、<xref:System.Web.UI.WebControls.GridView>制御、および使用して、<xref:System.Web.UI.WebControls.DetailsView>コントロールで選択した行の詳細を表示する、<xref:System.Web.UI.WebControls.GridView>と新しいレコードを挿入するためのフォームです。  
  
 最初に、データが内に表示されます、<xref:System.Web.UI.WebControls.GridView>コントロールであり、選択した行の<xref:System.Web.UI.WebControls.GridView>にも表示されます、<xref:System.Web.UI.WebControls.DetailsView>コントロール。 <xref:System.Web.UI.WebControls.GridView>と<xref:System.Web.UI.WebControls.DetailsView>コントロールが別のデータを使用してソース コントロール; に関連付けられている 1 つ、<xref:System.Web.UI.WebControls.DetailsView>が、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>と<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>プロパティで、選択した行のことを確認、<xref:System.Web.UI.WebControls.GridView>は表示されます。  
  
 自動的に生成された をクリックすると**挿入**のボタン、<xref:System.Web.UI.WebControls.DetailsView>コントロール、<xref:System.Web.UI.WebControls.DetailsView>新しいレコードを挿入するために使用する別のユーザー インターフェイスを示しています。 この例では、レコードを挿入するストアド プロシージャを使用し、挿入された行の主キーを返します。 レコードを挿入する場合、<xref:System.Web.UI.WebControls.DetailsView>を自動的に入力、<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>呼び出し、バインドされた列から値を使用して、コレクション、<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>メソッドです。 <xref:System.Web.UI.WebControls.DetailsView>から適切なパラメーターを推論できる<xref:System.Web.UI.WebControls.BoundField>オブジェクトとパラメーターを<xref:System.Web.UI.WebControls.TemplateField>ASP.NET 双方向データ バインディングの構文を使用する場合のオブジェクトします。 この例では、追加のパラメーターが追加された、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>ストアド プロシージャによって返される主キーを処理するイベント ハンドラー。  
  
 最後に、によってデータが挿入された後、 <xref:System.Web.UI.WebControls.DetailsView> 、データベースへの制御、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>を処理するイベント ハンドラーが呼び出されると、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>イベント、挿入された行の主キーの値が表示されたら、および<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>のメソッド<xref:System.Web.UI.WebControls.GridView>データを更新するコントロールを明示的に呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />を呼び出して派生クラスでメソッドが必ず、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />デリゲートを登録するための基本クラスのメソッドは、イベントを受信します。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelected">
      <MemberSignature Language="C#" Value="protected virtual void OnSelected (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelected(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelected (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelected(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selected" /> コントロールがデータ取得操作を完了した後に、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />を呼び出して派生クラスでメソッドが必ず、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />デリゲートを登録するための基本クラスのメソッドは、イベントを受信します。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelecting">
      <MemberSignature Language="C#" Value="protected virtual void OnSelecting (System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelecting(class System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelecting (e As SqlDataSourceSelectingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelecting(System::Web::UI::WebControls::SqlDataSourceSelectingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs" />。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selecting" /> コントロールがデータ取得操作を試行する前に、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />を呼び出して派生クラスでメソッドが必ず、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />デリゲートを登録するための基本クラスのメソッドは、イベントを受信します。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdated (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdated(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUpdated (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUpdated(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updated" /> コントロールが更新操作を完了した後に、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## Examples  
 次のコード例を表示し、ODBC データベースから取得されたデータを更新する方法を示しています、<xref:System.Web.UI.WebControls.GridView>コントロール。 レコードは正常に更新した後、<xref:System.Web.UI.WebControls.SqlDataSource.Updated>する処理後の手順を実行するには、電子メール メッセージの通知の送信先にイベント ハンドラーでイベントが処理されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />を呼び出して派生クラスでメソッドが必ず、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />デリゲートを登録するための基本クラスのメソッドは、イベントを受信します。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdating (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdating(class System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUpdating (e As SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUpdating(System::Web::UI::WebControls::SqlDataSourceCommandEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updating" /> コントロールが更新操作を試行する前に、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## Examples  
 次のコード例では、Microsoft SQL Server データベースから取得されるデータを表示する方法を示します、<xref:System.Web.UI.WebControls.DropDownList>コントロールし、レコードを使用して、更新、<xref:System.Web.UI.WebControls.TextBox>コントロール。 使用する方法の例を示しています、<xref:System.Data.Common.DbTransaction>を使用する場合は、トランザクション コンテキストを追加するオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールにデータを更新します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />派生クラスでは、呼び出しに必ず、<see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />デリゲートを登録するための基本クラスのメソッドは、イベントを受信します。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ParameterPrefix">
      <MemberSignature Language="C#" Value="protected virtual string ParameterPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ParameterPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::String ^ ParameterPrefix { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パラメーター化された SQL クエリ内のパラメーター プレースホルダーのプレフィックスとして使用される文字列を取得します。</summary>
        <value>"@" 文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL クエリとコマンド パラメーター化できる、実行時に、クエリにバインドされている値のプレース ホルダーを格納したものにします。 設定されている ADO.NET プロバイダーによって、<xref:System.Web.UI.WebControls.SqlDataSource>によって識別される、コントロール、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>プロパティ、パラメーターによって評価されますのエイリアスまたはそれらの順序によって、<xref:System.Web.UI.WebControls.ParameterCollection>オブジェクト。  
  
 場合、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>が設定されていないかに設定されている、 <xref:System.Data.SqlClient?displayProperty=nameWithType>、エイリアスでパラメーターが評価されると、<xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>にパラメーター プレフィックスを追加するプロパティを使用、<xref:System.Web.UI.WebControls.Parameter.Name%2A>の各プロパティ<xref:System.Web.UI.WebControls.Parameter>内のオブジェクト、<xref:System.Web.UI.WebControls.ParameterCollection>データの取得やデータ操作の操作中にします。 場合、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>プロパティに設定されている、<xref:System.Data.OleDb?displayProperty=nameWithType>または<xref:System.Data.Odbc?displayProperty=nameWithType>、順序によって、パラメーターが評価され、<xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>と<xref:System.Web.UI.WebControls.Parameter.Name%2A>プロパティは無視されます。  
  
 拡張する場合、<xref:System.Web.UI.WebControls.SqlDataSourceView>クラスをオーバーライドできます、<xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>以外の値のプレフィックスを指定するプロパティ、`"@"`文字列、必要な場合です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseUnsupportedCapabilityError">
      <MemberSignature Language="C#" Value="protected internal override void RaiseUnsupportedCapabilityError (System.Web.UI.DataSourceCapabilities capability);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RaiseUnsupportedCapabilityError(valuetype System.Web.UI.DataSourceCapabilities capability) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError(System.Web.UI.DataSourceCapabilities)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RaiseUnsupportedCapabilityError (capability As DataSourceCapabilities)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RaiseUnsupportedCapabilityError(System::Web::UI::DataSourceCapabilities capability);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capability" Type="System.Web.UI.DataSourceCapabilities" />
      </Parameters>
      <Docs>
        <param name="capability">ビューでサポートされている機能と比較される、<see cref="T:System.Web.UI.DataSourceCapabilities" /> のいずれかの値。</param>
        <summary>
          <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" /> 操作に要求される機能と、ビューでサポートされ、<see cref="M:System.Web.UI.DataSourceSelectArguments.RaiseUnsupportedCapabilitiesError(System.Web.UI.DataSourceView)" /> メソッドによって呼び出される機能を比較します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError%2A>メソッドは、データ ソース ビューを個々 のデータ バインドされたコントロールによって要求されている機能によって表される調べる使用、<xref:System.Web.UI.DataSourceSelectArguments>に渡されるオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>メソッド、およびそれらのデータ ソース ビューでサポートされている機能を提供する機能を比較します。 によって表されている機能のため、<xref:System.Web.UI.DataSourceSelectArguments>オブジェクトし、データ ソース ビューでサポートされていない、<xref:System.NotSupportedException>例外が発生します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">データ ソース内で、選択した <paramref name="capability" /> が有効ではありません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanSort" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanPage" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected virtual object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ SaveViewState();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ページがサーバーにポスト バックされた時間以降に発生した、<see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> コントロールのビューステートへの変更を保存します。</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> ビューステートへの変更を格納するオブジェクト。このオブジェクトに関連付けられたビューステートがない場合は、<see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A>メソッドは、主にコントロールの開発者によって使用されます。  
  
 ビュー ステートが、サーバー コントロールのプロパティの値の累積します。 これらの値は、<xref:System.Web.UI.Control.ViewState%2A>インスタンスであるサーバー コントロールのプロパティの<xref:System.Web.UI.StateBag>クラス。 <xref:System.Web.UI.Control.ViewState%2A>保存状態のサーバー コントロールのライフ サイクルの段階後に、サーバー コントロールは、文字列オブジェクトに永続化し、の値します。  
  
 HTML に格納されている変数として、保存状態の段階のサーバー コントロールのライフ サイクルの後に永続化された文字列オブジェクトがクライアントに返されるビューステートを保存すると、`Hidden`要素。 カスタム サーバー コントロールを作成するときに、オーバーライドすることで効率を向上できます、<xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A>メソッドと変更、`ViewState`サーバー コントロールのプロパティです。 詳細については、次を参照してください。 [ASP.NET 状態管理の概要](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce)です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (arguments As DataSourceSelectArguments) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select(System::Web::UI::DataSourceSelectArguments ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">基本的なデータ取得を超えたデータ操作を要求する場合に使用する <see cref="T:System.Web.UI.DataSourceSelectArguments" />。</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> SQL 文字列、および <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> コレクション内の任意のパラメーターを使用して、基になるデータベースからデータを取得します。</summary>
        <returns>データ行の <see cref="T:System.Collections.IEnumerable" /> リスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>メソッドの呼び出し、<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>渡して、メソッド、`selectArgs`パラメーター。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>メソッドを返します。、<xref:System.Data.DataView>オブジェクトの場合、<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>プロパティがに設定されている、<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>または値を返します、<xref:System.Data.IDataReader>オブジェクトの場合、<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>プロパティがに設定されている、<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>値。 閉じる、<xref:System.Data.IDataReader>オブジェクト データの読み取りが完了したとき。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" /> メソッドに渡される <paramref name="selectArgs" /> は、データを取得するときに、取得したデータに対するページングまたは並べ替えを有効にするには、データ ソースで追加の作業が必要であることを指定しますが、データ ソース コントロールは、要求された機能をサポートしていません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が、基になるデータ ソースとの接続を確立できません。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public string SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータベースからデータを取得するために <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> オブジェクトが使用する SQL 文字列を取得または設定します。</summary>
        <value>データを取得するために <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> が使用する SQL 文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データベース製品ごとに使用する SQL が異なるため、SQL 文字列の構文は、現在使用している ADO.NET プロバイダーによって決まります。これは、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティから識別できます。 SQL 文字列がパラメーター化されたクエリまたはコメントである場合は、パラメーターのプレースホルダーも現在使用している ADO.NET プロバイダーによって決まります。 たとえば、プロバイダーは、<xref:System.Data.SqlClient?displayProperty=nameWithType>の既定のプロバイダーは、<xref:System.Web.UI.WebControls.SqlDataSource>クラス、パラメーターのプレース ホルダーは`'@parameterName'`します。 ただし、プロバイダーに設定されている場合、<xref:System.Data.Odbc?displayProperty=nameWithType>または<xref:System.Data.OleDb?displayProperty=nameWithType>、パラメーターのプレース ホルダーは`'?'`します。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>プロパティから、データ ソースには、ストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます。  
  
> [!IMPORTANT]
>  SQL ステートメントよりも、ストアド プロシージャを使用する方が安全です、<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>プロパティです。  
  
 値、<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>プロパティは viewstate に格納されます。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例は、設定する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>を Microsoft SQL Server データベースからデータを取得して表示で基本的な SQL クエリ テキスト、<xref:System.Web.UI.WebControls.DropDownList>コントロール。 2 番目のコード例は、設定する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>テキストを SQL Server データベースからデータを取得して表示でストアド プロシージャの名前を<xref:System.Web.UI.WebControls.DropDownList>です。  
  
 次のコード例は、設定する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>テキストを SQL Server データベースからデータを取得して表示で基本的な SQL クエリを<xref:System.Web.UI.WebControls.DropDownList>コントロール。 <xref:System.Web.UI.WebControls.Button>と<xref:System.Web.UI.WebControls.TextBox>で選択したユーザーのアドレスを更新する、シンプルなインターフェイスとしてコントロールが用意されて、<xref:System.Web.UI.WebControls.DropDownList>です。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 次のコード例は、設定する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>テキストを SQL Server データベースからデータを取得して表示でストアド プロシージャの名前を<xref:System.Web.UI.WebControls.DropDownList>コントロール。 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>プロパティから、データ ソースには、ストアド プロシージャがサポートされている場合、SQL クエリまたはストアド プロシージャの名前を指定できます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType SelectCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> プロパティのテキストが SQL クエリまたは格納されたプロシージャの名前のいずれであるかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A>プロパティは viewstate に格納されます。  
  
   
  
## Examples  
 次のコード例は、設定する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>ストアド プロシージャの名前にテキストと<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A>プロパティを<xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure>値を Microsoft SQL Server データベースからデータを取得し、表示、<xref:System.Web.UI.WebControls.DropDownList>です。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">選択した値が <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値の 1 つではありません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Selected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ取得操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.SqlDataSourceView.Selected>データ取得操作が完了した後の値を確認するイベントを出力パラメーターです。 出力パラメーターは、<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As SqlDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ取得操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.SqlDataSourceView.Selecting>イベントは、パラメーターの値を検証する、または前に、のパラメーターの値を変更する、アプリケーションに固有の追加の初期化の操作を実行する、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールはデータの取得操作を実行します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Select" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> プロパティによって使用されるパラメーターを格納するパラメーター コレクションを取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> プロパティによって使用されるパラメーターを格納している <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>プロパティには、パラメーター化 SQL クエリが含まれています、<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A>コレクションには、いずれかが含まれます<xref:System.Web.UI.WebControls.Parameter>SQL 文字列のパラメーターのプレース ホルダーに対応するオブジェクト。  
  
 ADO.NET プロバイダーでは、パラメーターの順序によって、<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A>コレクションが重要であります。 <xref:System.Data.OleDb?displayProperty=nameWithType>と<xref:System.Data.Odbc?displayProperty=nameWithType>プロバイダーがパラメーター化 SQL クエリでパラメーターが表示される順序に従って、コレクション内のパラメーターを関連付けます。 <xref:System.Data.SqlClient?displayProperty=nameWithType>プロバイダーは、既定の ADO.NET プロバイダーは、の<xref:System.Web.UI.WebControls.SqlDataSource>コントロールを SQL クエリ内のプレース ホルダーの別名を持つパラメーターの名前を照合することによって、コレクション内のパラメーターに関連付けます。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)です。  
  
   
  
## Examples  
 次のコード例を設定して、Microsoft SQL Server で Northwind データベースからデータを取得する方法を示しています、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> SQL クエリのプロパティです。 SQL クエリがパラメーター化と内のプレース ホルダー、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>プロパティが照合する、<xref:System.Web.UI.WebControls.ControlParameter>に追加されるオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>コレクション。 この方法で、<xref:System.Web.UI.WebControls.DropDownList>先のコントロール、<xref:System.Web.UI.WebControls.ControlParameter>バインド、動作にどのようなフィルターが表示されるとおり、<xref:System.Web.UI.WebControls.ListBox>コントロール。  
  
> [!NOTE]
>  パラメーターが使用する、WHERE 句で使用されるため、<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>このコード例では、機能的には両方を使用して、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>と<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>プロパティです。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/CS/sql2cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/VB/sql2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ストアド プロシージャを使用してデータ取得を実行する際、取得したデータの並べ替えに使用するストアド プロシージャ パラメーターの名前を取得または設定します。</summary>
        <value>ストアド プロシージャを使用してデータ取得を実行する際、取得したデータの並べ替えに使用するストアド プロシージャ パラメーターの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>プロパティが評価されるだけで、SQL コマンドに含まれる、<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>プロパティは、ストアド プロシージャの名前。 この例では場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>プロパティが設定されて、ストアド プロシージャの結果の並べ替えに使用されるパラメーターの名前が含まれています。  
  
 場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>プロパティが設定されて、前に付加、<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>プロパティです。  
  
 値、<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>プロパティは viewstate に格納されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.IsTrackingViewState">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IStateManager.IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsTrackingViewState As Boolean Implements IStateManager.IsTrackingViewState" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Web.UI.IStateManager.IsTrackingViewState { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.Web.UI.IStateManager.IsTrackingViewState" />」をご覧ください。</summary>
        <value>
          データ ソース ビューがその状態を保存するようにマークされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Web.UI.WebControls.SqlDataSourceView>にインスタンスをキャスト、<xref:System.Web.UI.IStateManager>インターフェイスです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.IStateManager.IsTrackingViewState" />
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.LoadViewState">
      <MemberSignature Language="C#" Value="void IStateManager.LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub LoadViewState (savedState As Object) Implements IStateManager.LoadViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.LoadViewState(System::Object ^ savedState) = System::Web::UI::IStateManager::LoadViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">復元する <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> の状態を表すオブジェクト。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Web.UI.IStateManager.LoadViewState(System.Object)" />」をご覧ください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Web.UI.WebControls.SqlDataSourceView>にインスタンスをキャスト、<xref:System.Web.UI.IStateManager>インターフェイスです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.SaveViewState">
      <MemberSignature Language="C#" Value="object IStateManager.SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Web.UI.IStateManager.SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Function SaveViewState () As Object Implements IStateManager.SaveViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Web.UI.IStateManager.SaveViewState() = System::Web::UI::IStateManager::SaveViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Web.UI.IStateManager.SaveViewState" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> ビューステートへの変更を格納するオブジェクト。このオブジェクトに関連付けられたビューステートがない場合は、<see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Web.UI.WebControls.SqlDataSourceView>にインスタンスをキャスト、<xref:System.Web.UI.IStateManager>インターフェイスです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.TrackViewState">
      <MemberSignature Language="C#" Value="void IStateManager.TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Sub TrackViewState () Implements IStateManager.TrackViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.TrackViewState() = System::Web::UI::IStateManager::TrackViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Web.UI.IStateManager.TrackViewState" />」をご覧ください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Web.UI.WebControls.SqlDataSourceView>にインスタンスをキャスト、<xref:System.Web.UI.IStateManager>インターフェイスです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected virtual void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TrackViewState();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> オブジェクトがそのビューステートの変更を追跡するようにします。それにより、変更をコントロールの <see cref="T:System.Web.UI.StateBag" /> オブジェクトに格納して、同じページに対する複数の要求にわたって永続化できます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">データベース更新操作を実行するために、<see cref="T:System.Collections.IDictionary" /> プロパティで使用する主キーの <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />。 クエリに関連付けられているキーがないか、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> がパラメーター化された SQL クエリでない場合は、<see langword="null" /> を渡します。</param>
        <param name="values">データベース更新操作を実行するために、<see cref="T:System.Collections.IDictionary" /> プロパティで使用する値の <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />。 クエリに関連付けられているパラメーターがないか、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> がパラメーター化された SQL クエリでない場合は、<see langword="null" /> を渡します。</param>
        <param name="oldValues">データベース内の元の値を表す <see cref="T:System.Collections.IDictionary" />。 クエリに関連付けられているパラメーターがないか、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> がパラメーター化された SQL クエリでない場合は、<see langword="null" /> を渡します。</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> SQL 文字列、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" /> コレクション内の任意のパラメーター、および指定した <paramref name="keys" />、<paramref name="values" />、<paramref name="oldValues" /> の各コレクション内の値を使用して、更新操作を実行します。</summary>
        <returns>基になるデータベースで更新された行数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>メソッドの呼び出し、<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate%2A>渡して、メソッド、 `keys`、 `values`、および`oldValues`パラメーター。 詳細については、「<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.SqlDataSource>内のデータを表示するコントロールを<xref:System.Web.UI.WebControls.DropDownList>制御および更新データときに、**送信**ボタンをクリックします。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>プロパティはパラメーター化された SQL ステートメントと 2 つ<xref:System.Web.UI.WebControls.ControlParameter>パラメーターに追加されます、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>コレクション。 ときに、**送信**ボタンをクリックして、<xref:System.Web.UI.WebControls.Button.OnClick%2A>を呼び出すイベントが処理される、<xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>メソッドに明示的にします。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が、基になるデータ ソースとの接続を確立できません。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate" /> プロパティが <see langword="false" /> です。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public string UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータベース内のデータを更新するために <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> オブジェクトが使用する SQL 文字列を取得または設定します。</summary>
        <value>データを更新するために <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> が使用する SQL 文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データベース製品ごとに使用する SQL が異なるため、SQL 文字列の構文は、現在使用している ADO.NET プロバイダーによって決まります。これは、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティから識別できます。 SQL 文字列がパラメーター化されたクエリまたはコメントである場合は、パラメーターのプレースホルダーも現在使用している ADO.NET プロバイダーによって決まります。 たとえば、プロバイダーは、<xref:System.Data.SqlClient?displayProperty=nameWithType>の既定のプロバイダーは、<xref:System.Web.UI.WebControls.SqlDataSource>クラス、パラメーターのプレース ホルダーは`'@parameterName'`します。 ただし、プロバイダーに設定されている場合、<xref:System.Data.Odbc?displayProperty=nameWithType>または<xref:System.Data.OleDb?displayProperty=nameWithType>、パラメーターのプレース ホルダーは`'?'`します。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>プロパティから、データ ソースには、ストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます。  
  
 値、<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>プロパティは viewstate に格納されます。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例は、設定する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSource>制御および更新のデータを使用して Microsoft SQL Server データベース、<xref:System.Web.UI.WebControls.GridView>コントロール。 2 番目のコード例は、ODBC を使用してデータベースのデータを更新する方法を示します、<xref:System.Web.UI.WebControls.GridView>コントロール。  
  
 次のコード例は、設定する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSource>制御および更新のデータを使用して SQL Server データベース、<xref:System.Web.UI.WebControls.GridView>コントロール。 <xref:System.Web.UI.WebControls.GridView>コントロールを自動的に入力、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>からパラメーターを推論するとき、コレクション、<xref:System.Web.UI.WebControls.BoundField>オブジェクト、および呼び出し、<xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>メソッドと、**更新**編集可能な上のリンク<xref:System.Web.UI.WebControls.GridView>コントロールを選択します。 この例では、後の後処理も含まれます: レコードが更新されると、電子メール メッセージの通知が送信されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/CS/sql7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/VB/sql7vb.aspx#1)]  
  
 コードと同じように上記のコード例は、次のコード例は、ODBC を使用してデータベースのデータを更新する方法を示します、<xref:System.Web.UI.WebControls.GridView>コントロール。 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> For ODBC、ADO.NET プロバイダーに設定されて、 <xref:System.Data.Odbc?displayProperty=nameWithType>、および<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>プロパティが ODBC データ ソース名 (DSN) の名前に設定します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType UpdateCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> プロパティのテキストが SQL ステートメントまたは格納されたプロシージャの名前のいずれであるかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A>プロパティは viewstate に格納されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">選択した値が <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値の 1 つではありません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Updated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.SqlDataSourceView.Updated>更新操作が完了した後の値を確認するイベントを出力パラメーターです。 出力パラメーターは、<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次のコード例を表示し、ODBC データベースから取得されるデータを更新する方法を示しています、<xref:System.Web.UI.WebControls.GridView>コントロール。 レコードは正常に更新した後、<xref:System.Web.UI.WebControls.SqlDataSource.Updated>する処理後の手順を実行するには、電子メール メッセージの通知の送信先にイベント ハンドラーでイベントが処理されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> プロパティによって使用されるパラメーターを格納するパラメーター コレクションを取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> プロパティによって使用されるパラメーターを格納している <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>プロパティには、パラメーター化 SQL クエリが含まれています、<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>コレクションには、いずれかが含まれます<xref:System.Web.UI.WebControls.Parameter>SQL 文字列内にあるパラメーターのプレース ホルダーに対応するオブジェクト。  
  
 パラメーター名の影響を受ける、<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>プロパティです。 具体的には、名前は、主キーを識別する場合など、キー指定されたを使用して、`DataKeyNames`プロパティ、またはで削除と更新シナリオ場所、<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>プロパティがに設定されている、<xref:System.Web.UI.ConflictOptions.CompareAllValues>値、および一連の`oldValues`は対応するデータのメソッドに渡されます。 各パラメーターの名前に、書式指定文字列を適用するこの例では、`oldValues`コレクション。  
  
 ADO.NET プロバイダーでは、パラメーターの順序によって、<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>コレクションが重要であります。 <xref:System.Data.OleDb?displayProperty=nameWithType>と<xref:System.Data.Odbc?displayProperty=nameWithType>プロバイダーがパラメーター化 SQL クエリでパラメーターが表示される順序に従って、コレクション内のパラメーターを関連付けます。 <xref:System.Data.SqlClient?displayProperty=nameWithType>プロバイダーは、既定の ADO.NET プロバイダーは、の<xref:System.Web.UI.WebControls.SqlDataSource>コントロールを SQL クエリ内のプレース ホルダーの別名を持つパラメーターの名前を照合することによって、コレクション内のパラメーターに関連付けます。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)です。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.SqlDataSource>内のデータを表示するコントロールを<xref:System.Web.UI.WebControls.DropDownList>制御および更新データときに、**送信**ボタンをクリックします。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>プロパティはパラメーター化された SQL ステートメントと 2 つ<xref:System.Web.UI.WebControls.ControlParameter>パラメーターに追加されます、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>コレクション。 ときに、**送信**ボタンをクリックして、<xref:System.Web.UI.WebControls.Button.OnClick%2A>を呼び出すイベントが処理される、<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>メソッドに明示的にします。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Updating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.SqlDataSourceView.Updating>イベントは、パラメーターの値を検証する、または前に、のパラメーターの値を変更する、アプリケーションに固有の追加の初期化の操作を実行する、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、更新操作を実行します。  
  
 基になるデータ ソースへの接続がまだ開いていないイベント ハンドラー デリゲートが呼び出されるとします。 そのため、操作を呼び出すことによって直接取り消すことはできません、<xref:System.Data.Common.DbCommand.Cancel%2A>メソッドを<xref:System.Data.Common.DbCommand>によって公開されるオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>オブジェクト。 ただしを設定して、データベースの操作をキャンセルできます、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>に`true`です。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次のコード例では、Microsoft SQL Server データベースから取得されるデータを表示する方法を示します、<xref:System.Web.UI.WebControls.DropDownList>コントロールし、レコードを使用して、更新、<xref:System.Web.UI.WebControls.TextBox>コントロール。 使用する方法の例を示しています、<xref:System.Data.Common.DbTransaction>を使用する場合は、トランザクション コンテキストを追加するオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールにデータを更新します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
  </Members>
</Type>