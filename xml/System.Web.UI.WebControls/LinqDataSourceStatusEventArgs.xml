<Type Name="LinqDataSourceStatusEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1eaa7efb46dc1e004579fef514fcd8db71c9ed26" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70447388" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceStatusEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceStatusEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceStatusEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Selected" />、および <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updated" /> の各イベントにデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラスを使用すると、 <xref:System.Web.UI.WebControls.LinqDataSource>コントロールによって実行されたデータ操作の結果を調べることができます。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>オブジェクトは <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> 、コントロール <xref:System.Web.UI.WebControls.LinqDataSource> の、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>、 、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 、および <xref:System.Web.UI.WebControls.LinqDataSource.Updated> の各イベントのイベントハンドラーに渡されます。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>  
  
 データ操作が正常に完了した場合、結果のデータオブジェクトは<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティ<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>に格納され`null`、プロパティはになります。 データ操作が失敗した場合、データ操作中に発生した例外は<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティ<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>に格納され、 `null`プロパティはになります。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティで表される例外を処理した場合は、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>プロパティを`true`に設定して、例外がスローされないようにします。  
  
 クエリから返されるデータレコードの合計数を取得するには<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 、プロパティを使用します。  
  
   
  
## Examples  
 次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>イベントのイベントハンドラーを示しています。 イベントハンドラーでは、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティが`null`の場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティのオブジェクトから製品 ID が取得されます。 製品 ID はテーブルの主キーであり、データベースによって設定されます。そのため、挿入操作が完了するまで、値は認識されません。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティが `null` と等しくない場合、例外メッセージがログに記録されます。 次<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>に、プロパティがに`true`設定されます。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : Exception -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">データ操作中に発生したエラー。</param>
        <summary>データ操作の結果として発生した例外を使用して、<see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、データ操作中に例外がスローされた場合に使用されます。 プロパティは自動的にに`null`設定されます。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : obj -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs result" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="result">データ操作の結果のデータが格納されたオブジェクト。</param>
        <summary>データ操作の結果のデータが格納されたオブジェクトを使用して、<see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、データ操作がエラーなしで終了したときに使用されます。 パラメーター `result`には、データ操作の結果を表すオブジェクトが格納されます。 プロパティは自動的にに`null`設定されます。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result, int totalRowCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result, int32 totalRowCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object, totalRowCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result, int totalRowCount);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : obj * int -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs (result, totalRowCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
        <Parameter Name="totalRowCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="result">データ操作の結果のデータが格納されたオブジェクト。</param>
        <param name="totalRowCount">データ取得操作で返された行数。</param>
        <summary>データ操作の結果のデータが格納されたオブジェクトと返された行数で、<see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ操作時にスローされた例外を取得します。</summary>
        <value>エラーが発生した場合は、例外を表す <see cref="T:System.Exception" /> オブジェクト。それ以外の場合は、<see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データ操作中に例外が発生した場合、例外は<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティに格納されます。 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> 、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> 、  、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 、  <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>の各イベントのイベントハンドラーを作成し、プロパティを使用して例外を取得することができます (存在する場合)。 <xref:System.Web.UI.WebControls.LinqDataSource.Updated>  <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>  
  
   
  
## Examples  
 次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>イベントのイベントハンドラーを示しています。 イベントハンドラーでは、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティが`null`の場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティのオブジェクトから製品 ID が取得されます。 製品 ID はテーブルの主キーであり、データベースによって設定されます。そのため、挿入操作が完了するまで、値は認識されません。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティが `null` と等しくない場合、例外メッセージがログに記録されます。 次<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>に、プロパティがに`true`設定されます。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>例外が既に処理済みで、再度スローする必要がないかどうかを示す値を取得または設定します。</summary>
        <value>例外が処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> 、、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 、、および <xref:System.Web.UI.WebControls.LinqDataSource.Updated> の各イベントのイベントハンドラーを作成して、それらの操作中に発生した例外を調べることができます。 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 例外を処理し、再度スローしないようにする場合は、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>プロパティをに`true`設定します。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>プロパティをに`true`設定しなかった場合、例外は呼び出し履歴の次のイベントハンドラーに反映されます。  
  
   
  
## Examples  
 次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>イベントのイベントハンドラーを示しています。 イベントハンドラーでは、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティが`null`の場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティのオブジェクトから製品 ID が取得されます。 製品 ID はテーブルの主キーであり、データベースによって設定されます。そのため、挿入操作が完了するまで、値は認識されません。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティが `null` と等しくない場合、例外メッセージがログに記録されます。 次<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>に、プロパティがに`true`設定されます。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : obj" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ操作の結果を表すオブジェクトを取得します。</summary>
        <value>データ操作で得たデータが格納されたオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データ操作から<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>返された値を調べるには、プロパティを使用します。 出力パラメーターは、データ操作から取得することも、クエリから返される値を変更することもできます。  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティに格納されているデータは、実行されたデータ操作の種類によって異なります。 データを削除すると、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティ<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>には、データソースから削除された元の値と共に、プロパティで指定された型のオブジェクトが格納されます。 データを<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>挿入または更新する場合、プロパティ<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>には、プロパティで指定された型のオブジェクトと、データソースに保存された新しい値が格納されます。 データを選択すると、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティにクエリの結果が格納されます。  
  
 Select クエリでデータをグループ化するか、プロパティに<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>指定されている型からプロパティのサブセットを選択する場合<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 、プロパティには動的に作成された型のオブジェクトが格納されます。 それ以外の<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>場合、プロパティ<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>には、プロパティで指定された型のオブジェクトが格納されます。  
  
   
  
## Examples  
 次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>イベントのイベントハンドラーを示しています。 イベントハンドラーでは、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティが`null`の場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティのオブジェクトから製品 ID が取得されます。 製品 ID はテーブルの主キーであり、データベースによって設定されます。そのため、挿入操作が完了するまで、値は認識されません。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティが `null` と等しくない場合、例外メッセージがログに記録されます。 次<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>に、プロパティがに`true`設定されます。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalRowCount">
      <MemberSignature Language="C#" Value="public int TotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TotalRowCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalRowCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TotalRowCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalRowCount : int" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ取得操作で得られたデータ セットに含まれる行の総数を取得します。</summary>
        <value>データ取得操作で得られたデータ セットに含まれる行の総数。データ変更操作中に <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> オブジェクトが作成された場合は -1。<see cref="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" /> を <see langword="true" /> に設定し、<see cref="P:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount" /> を <see langword="false" /> に設定することによってカスタマイズ ページングを有効にした場合は -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データ取得操作<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>中にデータセット内のレコードの数を取得するには、プロパティを使用します。 通常、データのページを表示し、レコードの合計数を表示する場合は、このプロパティを取得します。  
  
 データがページングされている場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>プロパティの値は、クエリによって返される実際の行数とは異なる場合があります。 これは、クエリから返されるのは、そのデータのページに必要な行の数だけであるためです。  
  
 プロパティ<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>は、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected>イベントのイベントハンドラーでアクセスされた場合にのみ、クエリからのレコードの数を格納します。 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 、 、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> 、または <xref:System.Web.UI.WebControls.LinqDataSource.Updated> イベントのイベントハンドラーからプロパティにアクセスすると、プロパティに-1 が格納されます。 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>プロパティの値は、 <xref:System.Web.UI.WebControls.LinqDataSource>コントロールの<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>プロパティと`AllowPaging` 、データバインドコントロールのプロパティによって異なります。 次の表は、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>プロパティで使用可能な値をまとめたものです。  
  
|LinqDataSource コントロールのオートプロパティプロパティ|データバインドコントロールの AllowPaging プロパティ|TotalRowCount プロパティ|Outcome|  
|-------------------------------------------------|-------------------------------------------------|----------------------------|-------------|  
|`true`|`true`|クエリのレコード数。|データは自動的にページングされます。|  
|`false`|`false`|クエリのレコード数。|データはページングされません。|  
|`true`|`false`|-1|データはページングされません。|  
|`false`|`true`|<xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A> イベント <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> のイベントハンドラーでプロパティに割り当てた値。|ページングをカスタマイズしたときに指定した値に従って、データがページングされます。|  
  
   
  
## Examples  
 次の例は、コントロール<xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.GridView> 、コントロール、および<xref:System.Web.UI.WebControls.Literal>コントロールを含む Web ページを示しています。 コントロール<xref:System.Web.UI.WebControls.LinqDataSource>は、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected>イベントのイベントハンドラーを定義します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx#1)]  
  
 次の例は、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected>イベントのイベントハンドラーのコードを示しています。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>プロパティの値は、 <xref:System.Web.UI.WebControls.Literal>コントロールに割り当てられます。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
