<Type Name="LinqDataSourceStatusEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6f07274e34943a41ae4d77778a2e0f9940fd781b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37592542" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceStatusEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceStatusEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceStatusEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Selected" />、および <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updated" /> の各イベントにデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>クラスで実行されているデータ操作の結果を確認することができます、<xref:System.Web.UI.WebControls.LinqDataSource>コントロール。 A<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>オブジェクトのイベント ハンドラーに渡す、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected>、および<xref:System.Web.UI.WebControls.LinqDataSource.Updated>のイベント、<xref:System.Web.UI.WebControls.LinqDataSource>コントロール。  
  
 かどうか、データ操作が正常に完了、結果のデータ オブジェクトに格納されます、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティおよび<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティは`null`します。 データ操作中に発生した例外が格納されているデータの操作に失敗した場合、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティおよび<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティは`null`します。 によって表される例外を処理する場合、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティ、設定、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>プロパティを`true`例外はスローされないようにします。  
  
 使用してクエリから返されるデータ レコードの合計数を取得する、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>プロパティ。  
  
   
  
## Examples  
 次の例は、イベント ハンドラーを<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>イベント。 イベント ハンドラーの場合、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティは`null`、製品内のオブジェクトから ID を取得、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティ。 製品 ID で、テーブルの主キー、データベースが設定されて、そのため、値が不明、挿入操作が完了するまでです。 場合に例外メッセージがログ記録、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティが等しくない`null`します。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>プロパティに設定し、`true`します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : Exception -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">データ操作中に発生したエラー。</param>
        <summary>データ操作の結果として発生した例外を使用して、<see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターは、データ操作中に例外がスローされたときに使用されます。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティが自動的に設定`null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : obj -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs result" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="result">データ操作の結果のデータが格納されたオブジェクト。</param>
        <summary>データ操作の結果のデータが格納されたオブジェクトを使用して、<see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターは、エラーなし、データ操作が完了したときに使用されます。 `result`パラメーターには、データ操作の結果を表すオブジェクトが含まれています。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティが自動的に設定`null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result, int totalRowCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result, int32 totalRowCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object, totalRowCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result, int totalRowCount);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : obj * int -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs (result, totalRowCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
        <Parameter Name="totalRowCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="result">データ操作の結果のデータが格納されたオブジェクト。</param>
        <param name="totalRowCount">データ取得操作で返された行数。</param>
        <summary>データ操作の結果のデータが格納されたオブジェクトと返された行数で、<see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ操作時にスローされた例外を取得します。</summary>
        <value>エラーが発生した場合は、例外を表す <see cref="T:System.Exception" /> オブジェクト。それ以外の場合は、<see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例外が格納されているデータの処理中に例外が発生する場合、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティ。 イベント ハンドラーを作成することができます、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected>、および<xref:System.Web.UI.WebControls.LinqDataSource.Updated>イベントを取得、存在する場合は、例外を通じて、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティ。  
  
   
  
## Examples  
 次の例は、イベント ハンドラーを<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>イベント。 イベント ハンドラーの場合、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティは`null`、製品内のオブジェクトから ID を取得、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティ。 製品 ID は、テーブルの主キーし、データベースによって設定されるため、挿入操作が完了するまで、値が不明です。 場合に例外メッセージがログ記録、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティが等しくない`null`します。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>プロパティに設定し、`true`します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>例外が既に処理済みで、再度スローする必要がないかどうかを示す値を取得または設定します。</summary>
        <value>例外が処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベント ハンドラーを作成することができます、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected>、および<xref:System.Web.UI.WebControls.LinqDataSource.Updated>イベントをそれらの操作中に発生したすべての例外を確認します。 例外を処理しを再度スローするように、設定、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>プロパティを`true`します。 設定しない場合、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>プロパティを`true`例外が呼び出し履歴内の次のイベント ハンドラーに伝達されます。  
  
   
  
## Examples  
 次の例は、イベント ハンドラーを<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>イベント。 イベント ハンドラーの場合、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティは`null`、製品内のオブジェクトから ID を取得、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティ。 製品 ID で、テーブルの主キー、データベースが設定されて、そのため、値が不明、挿入操作が完了するまでです。 場合に例外メッセージがログ記録、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティが等しくない`null`します。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>プロパティに設定し、`true`します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : obj" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ操作の結果を表すオブジェクトを取得します。</summary>
        <value>データ操作で得たデータが格納されたオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>データ操作の値を確認するプロパティが返されます。 データ操作の出力パラメーターを取得したり、クエリから返される値を変更することができます。  
  
 格納されたデータ、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティは、行われたデータ操作の種類によって異なります。 データを削除すると、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティにはで指定された型のオブジェクトが含まれています、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティ、データ ソースから削除された元の値。 挿入またはデータを更新するとき、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティにはで指定された型のオブジェクトが含まれています、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティ、データ ソースに保存された新しい値を使用します。 データを選択すると、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティには、クエリの結果が含まれています。  
  
 データをグループ化またはで指定された型からプロパティのサブセットを選択すると、select クエリが含まれている場合、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティ、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティに動的に作成された型のオブジェクトが含まれています。 それ以外の場合、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティにはで指定された型のオブジェクトが含まれています、<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>プロパティ。  
  
   
  
## Examples  
 次の例は、イベント ハンドラーを<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>イベント。 イベント ハンドラーの場合、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティは`null`、製品内のオブジェクトから ID を取得、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>プロパティ。 製品 ID で、テーブルの主キー、データベースが設定されて、そのため、値が不明、挿入操作が完了するまでです。 場合に例外メッセージがログ記録、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>プロパティが等しくない`null`します。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>プロパティに設定し、`true`します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalRowCount">
      <MemberSignature Language="C#" Value="public int TotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TotalRowCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalRowCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TotalRowCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalRowCount : int" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ取得操作で得られたデータ セットに含まれる行の総数を取得します。</summary>
        <value>データ取得操作で得られたデータ セットに含まれる行の総数。データ変更操作中に <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> オブジェクトが作成された場合は -1。<see cref="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" /> を <see langword="true" /> に設定し、<see cref="P:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount" /> を <see langword="false" /> に設定することによってカスタマイズ ページングを有効にした場合は -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>データ取得操作中に、データ セット内のレコードの数を取得するプロパティ。 通常、データのページを表示すると、レコードの総数を表示するには、このプロパティを取得します。  
  
 データがページングされている場合、値、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>プロパティは、クエリによって返される行の実際の数と異なる可能性があります。 これは、クエリは、そのページのデータのために必要な行の数のみを返すためにです。  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>のイベント ハンドラーでアクセスされた場合にのみ、プロパティは、クエリからのレコードの数を格納、<xref:System.Web.UI.WebControls.LinqDataSource.Selected>イベント。 プロパティがイベント ハンドラーからアクセスされるとき、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>、または<xref:System.Web.UI.WebControls.LinqDataSource.Updated>、イベント、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>プロパティには、-1 が含まれています。  
  
 値、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>プロパティによって異なります、<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>のプロパティ、<xref:System.Web.UI.WebControls.LinqDataSource>コントロール、および、`AllowPaging`データ バインド コントロールのプロパティ。 次の表に、可能な値、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>プロパティ。  
  
|LinqDataSource コントロールの AutoPage プロパティ|データ バインド コントロールの AllowPaging プロパティ|TotalRowCount プロパティ|Outcome|  
|-------------------------------------------------|-------------------------------------------------|----------------------------|-------------|  
|`true`|`true`|クエリのレコードの数。|データは自動的にページングされます。|  
|`false`|`false`|クエリのレコードの数。|データはページングされません。|  
|`true`|`false`|-1|データはページングされません。|  
|`false`|`true`|割り当てられた値、<xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A>プロパティのイベント ハンドラーで、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>イベント。|データは、ページングをカスタマイズしたときに指定した値に従ってページします。|  
  
   
  
## Examples  
 次の例では、Web ページを<xref:System.Web.UI.WebControls.LinqDataSource>コントロール、<xref:System.Web.UI.WebControls.GridView>コントロール、および<xref:System.Web.UI.WebControls.Literal>コントロール。 <xref:System.Web.UI.WebControls.LinqDataSource>コントロールのイベント ハンドラーを定義する、<xref:System.Web.UI.WebControls.LinqDataSource.Selected>イベント。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx#1)]  
  
 次の例では、イベントのイベント ハンドラーのコードを示しています、<xref:System.Web.UI.WebControls.LinqDataSource.Selected>イベント。 値、<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>に割り当てられているプロパティ、<xref:System.Web.UI.WebControls.Literal>コントロール。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>