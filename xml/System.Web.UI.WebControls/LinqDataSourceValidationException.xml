<Type Name="LinqDataSourceValidationException" FullName="System.Web.UI.WebControls.LinqDataSourceValidationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a875dd2a47120208cb4c21ab00fdb819885c7c1e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39938338" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceValidationException : Exception, System.Web.DynamicData.IDynamicValidatorException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit LinqDataSourceValidationException extends System.Exception implements class System.Runtime.Serialization.ISerializable, class System.Web.DynamicData.IDynamicValidatorException" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceValidationException" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceValidationException&#xA;Inherits Exception&#xA;Implements IDynamicValidatorException" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceValidationException : Exception, System::Web::DynamicData::IDynamicValidatorException" />
  <TypeSignature Language="F#" Value="type LinqDataSourceValidationException = class&#xA;    inherit Exception&#xA;    interface IDynamicValidatorException&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicValidatorException</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="6ab16-101">
        <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールによって値が挿入、更新、または削除される前に、新しい値または変更された値の検証中に発生した例外を表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6ab16-101">Describes an exception that occurred during validation of new or modified values before values are inserted, updated, or deleted by a <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab16-102"><xref:System.Web.UI.WebControls.LinqDataSourceValidationException>クラスには、型変換とプロパティ set アクセス操作子の例外が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ab16-102">The <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class contains type conversion and property setter exceptions.</span></span> <span data-ttu-id="6ab16-103">含まれるすべての検証中にスローされる例外は、<xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="6ab16-103">All of the exceptions that are thrown during validation are contained in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection.</span></span> <span data-ttu-id="6ab16-104">反復処理する各検証例外を取得することができます、<xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="6ab16-104">You can retrieve each validation exception by iterating through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection.</span></span>  
  
 <span data-ttu-id="6ab16-105">通常は例外を処理する、 <xref:System.Web.UI.WebControls.LinqDataSource.Updating>、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>、および<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>イベント。</span><span class="sxs-lookup"><span data-stu-id="6ab16-105">You typically handle exceptions in the <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, and <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> events.</span></span> <span data-ttu-id="6ab16-106">検証例外がスローされた場合、`Exception`のプロパティ、 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>、 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>、または<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>オブジェクトが含まれています、<xref:System.Web.UI.WebControls.LinqDataSourceValidationException>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ab16-106">If a validation exception is thrown, the `Exception` property of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>, <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>, or <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains a <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> object.</span></span> <span data-ttu-id="6ab16-107">例外がスローされない場合、`Exception`プロパティを含む`null`します。</span><span class="sxs-lookup"><span data-stu-id="6ab16-107">If no exception is thrown, the `Exception` property contains `null`.</span></span>  
  
 <span data-ttu-id="6ab16-108">検証例外を処理するためのハンドラーを作成、 <xref:System.Web.UI.WebControls.LinqDataSource.Updating>、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>、または<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>イベント。</span><span class="sxs-lookup"><span data-stu-id="6ab16-108">To handle validation exceptions, create a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, or <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event.</span></span> <span data-ttu-id="6ab16-109">イベント ハンドラーで確認するかどうか、`Exception`以外のイベント引数クラスのプロパティに値が含まれています`null`します。</span><span class="sxs-lookup"><span data-stu-id="6ab16-109">In the event handler, check whether the `Exception` property of the event argument class contains a value other than `null`.</span></span> <span data-ttu-id="6ab16-110">場合、`Exception`プロパティが null でないと、1 つまたは複数の検証例外がスローされた、内の各検証例外を取得することができます、<xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="6ab16-110">If the `Exception` property is not null, one or more validation exceptions were thrown and you can retrieve each validation exception in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property.</span></span>  
  
 <span data-ttu-id="6ab16-111">検証の例外は、値がプロパティの型と一致しない場合に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="6ab16-111">A validation exception can occur if a value does not match the type of the property.</span></span> <span data-ttu-id="6ab16-112">たとえば、数字以外の文字を使用して整数のプロパティを更新しようとして検証例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="6ab16-112">For example, trying to update an integer property by using non-numeric characters causes a validation exception.</span></span> <span data-ttu-id="6ab16-113">LINQ to SQL クラスは、プロパティが、予想される範囲またはパターン内の値が含まれているかどうかを確認するカスタマイズされた検証条件を含めることもできます。</span><span class="sxs-lookup"><span data-stu-id="6ab16-113">A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ab16-114">次の例は、イベント ハンドラーを<xref:System.Web.UI.WebControls.LinqDataSource.Updating>イベント。</span><span class="sxs-lookup"><span data-stu-id="6ab16-114">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="6ab16-115">使用して検証例外メッセージが表示されます、<xref:System.Web.UI.WebControls.Label>コントロール。</span><span class="sxs-lookup"><span data-stu-id="6ab16-115">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6ab16-116">
            <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-116">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceValidationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6ab16-117">エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-117">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with a system-supplied message that describes the error.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab16-118">エラーを説明するシステム提供のメッセージでは、現在のシステム カルチャが考慮されます。</span><span class="sxs-lookup"><span data-stu-id="6ab16-118">The system-supplied message that describes the error takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="6ab16-119"><xref:System.Web.UI.WebControls.LinqDataSourceValidationException> クラスのインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="6ab16-119">The following table shows the initial property values for an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.</span></span>  
  
|<span data-ttu-id="6ab16-120">プロパティ</span><span class="sxs-lookup"><span data-stu-id="6ab16-120">Property</span></span>|<span data-ttu-id="6ab16-121">[値]</span><span class="sxs-lookup"><span data-stu-id="6ab16-121">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="6ab16-122">`null`。</span><span class="sxs-lookup"><span data-stu-id="6ab16-122">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="6ab16-123">システム提供のローカライズされた説明。</span><span class="sxs-lookup"><span data-stu-id="6ab16-123">A system-supplied localized description.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceValidationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceValidationException : string -&gt; System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="new System.Web.UI.WebControls.LinqDataSourceValidationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="6ab16-124">エラーを説明するメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-124">The message that describes the error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ab16-125">エラーを説明する指定したメッセージを使用して、<see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-125">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with a specified message that describes the error.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab16-126"><xref:System.Web.UI.WebControls.LinqDataSourceValidationException> クラスのインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="6ab16-126">The following table shows the initial property values for an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.</span></span>  
  
|<span data-ttu-id="6ab16-127">プロパティ</span><span class="sxs-lookup"><span data-stu-id="6ab16-127">Property</span></span>|<span data-ttu-id="6ab16-128">[値]</span><span class="sxs-lookup"><span data-stu-id="6ab16-128">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="6ab16-129">`null`。</span><span class="sxs-lookup"><span data-stu-id="6ab16-129">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="6ab16-130">`message` に指定されたエラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="6ab16-130">The error message string specified in `message`.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LinqDataSourceValidationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; LinqDataSourceValidationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceValidationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="new System.Web.UI.WebControls.LinqDataSourceValidationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="6ab16-131">シリアル化されたオブジェクト データを保持するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-131">The object that holds the serialized object data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="6ab16-132">シリアル化元またはシリアル化先に関するコンテキスト情報。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-132">Context information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ab16-133">シリアル化したデータを使用して、<see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-133">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with serialized data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab16-134">このコンス トラクターは、ストリームを介して送信される例外オブジェクトを再構成するには、逆シリアル化中に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6ab16-134">This constructor is called during deserialization to reconstitute the exception object that is transmitted over a stream.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException (string message, System.Collections.Generic.IDictionary&lt;string,Exception&gt; innerExceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Collections.Generic.IDictionary`2&lt;string, class System.Exception&gt; innerExceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Exception})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerExceptions As IDictionary(Of String, Exception))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceValidationException(System::String ^ message, System::Collections::Generic::IDictionary&lt;System::String ^, Exception ^&gt; ^ innerExceptions);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceValidationException : string * System.Collections.Generic.IDictionary&lt;string, Exception&gt; -&gt; System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="new System.Web.UI.WebControls.LinqDataSourceValidationException (message, innerExceptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerExceptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Exception&gt;" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="6ab16-135">エラーを説明するメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-135">The message that describes the error.</span>
          </span>
        </param>
        <param name="innerExceptions">
          <span data-ttu-id="6ab16-136">検証例外のコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-136">The collection of validation exceptions.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ab16-137">エラーを説明する指定のメッセージおよび内部例外への参照のコレクションを使用して、<see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-137">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with a specified message that describes the error, and a collection of references to inner exceptions.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceValidationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceValidationException : string * Exception -&gt; System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="new System.Web.UI.WebControls.LinqDataSourceValidationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="6ab16-138">エラーを説明するメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-138">The message that describes the error.</span>
          </span>
        </param>
        <param name="innerException">
          <span data-ttu-id="6ab16-139">現在の例外の原因となった例外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-139">The exception that is the cause of the current exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ab16-140">指定したエラー メッセージおよび内部例外への参照を使用して、<see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-140">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with a specified error message and a reference to the inner exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab16-141">通常は使用しませんこのコンス トラクターに検証例外が格納されているため、<xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>プロパティ、しない、<xref:System.Exception.InnerException%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="6ab16-141">You typically will not use this constructor because validation exceptions are stored in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property, not the <xref:System.Exception.InnerException%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="linqDataSourceValidationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="6ab16-142">スローされる例外のシリアル化されたオブジェクト データを保持するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-142">The object that holds the serialized object data for the exception that is being thrown.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="6ab16-143">シリアル化元またはシリアル化先に関するコンテキスト情報。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-143">Context information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ab16-144">例外に関する情報を取得して、<see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-144">Gets information about the exception and adds it to the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab16-145"><xref:System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData%2A>メソッド例外に関する情報を追加する、<xref:System.Runtime.Serialization.SerializationInfo>シリアル化の対象にするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ab16-145">The <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData%2A> method adds information about the exception to the <xref:System.Runtime.Serialization.SerializationInfo> object that is targeted for serialization.</span></span> <span data-ttu-id="6ab16-146">逆シリアル化中に例外が再構成されます、<xref:System.Runtime.Serialization.SerializationInfo>ストリームで送信されました。</span><span class="sxs-lookup"><span data-stu-id="6ab16-146">During deserialization, the exception is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> that is transmitted over the stream.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerExceptions">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,Exception&gt; InnerExceptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, class System.Exception&gt; InnerExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InnerExceptions As IDictionary(Of String, Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, Exception ^&gt; ^ InnerExceptions { System::Collections::Generic::IDictionary&lt;System::String ^, Exception ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InnerExceptions : System.Collections.Generic.IDictionary&lt;string, Exception&gt;" Usage="System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicValidatorException.InnerExceptions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Exception&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ab16-147">新しいデータまたは変更されたデータの検証時に発生した 1 つ以上の例外を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-147">Gets one or more exceptions that occurred when new or modified data was being validated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6ab16-148">例外が格納されているコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ab16-148">A collection that contains the exceptions.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ab16-149"><xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>コレクションには、更新の前にデータの検証中にスローされたすべての検証例外が含まれています、挿入、または削除操作です。</span><span class="sxs-lookup"><span data-stu-id="6ab16-149">The <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection contains all the validation exceptions that were thrown during data validation before an update, insert, or delete operation.</span></span> <span data-ttu-id="6ab16-150">検証の例外は、値がプロパティの型と一致しない場合に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="6ab16-150">A validation exception can occur if a value does not match the type of the property.</span></span> <span data-ttu-id="6ab16-151">たとえば、数値以外の文字を使用して整数のプロパティを更新しようとすると、検証例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6ab16-151">For example, if you try to update an integer property by using non-numeric characters, a validation exception is thrown.</span></span> <span data-ttu-id="6ab16-152">LINQ to SQL クラスは、プロパティが、予想される範囲またはパターン内の値が含まれているかどうかを確認するカスタマイズされた検証条件を含めることもできます。</span><span class="sxs-lookup"><span data-stu-id="6ab16-152">A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ab16-153">次の例は、イベント ハンドラーを<xref:System.Web.UI.WebControls.LinqDataSource.Updating>イベント。</span><span class="sxs-lookup"><span data-stu-id="6ab16-153">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="6ab16-154">使用して検証例外メッセージが表示されます、<xref:System.Web.UI.WebControls.Label>コントロール。</span><span class="sxs-lookup"><span data-stu-id="6ab16-154">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
                In e.Exception.InnerExceptions  
          Label1.Text &= innerException.Key & ": " & _   
                  innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)   
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
            e.Exception.InnerExceptions)  
        {  
            Label1.Text += innerException.Key + ": " +   
                innerException.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>