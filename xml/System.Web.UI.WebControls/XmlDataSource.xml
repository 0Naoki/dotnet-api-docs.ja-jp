<Type Name="XmlDataSource" FullName="System.Web.UI.WebControls.XmlDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="86b729c8a5965965316ecf6ffead7f52ce244e6d" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51882179" /></Metadata><TypeSignature Language="C#" Value="public class XmlDataSource : System.Web.UI.HierarchicalDataSourceControl, System.ComponentModel.IListSource, System.Web.UI.IDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDataSource extends System.Web.UI.HierarchicalDataSourceControl implements class System.ComponentModel.IListSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.XmlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDataSource&#xA;Inherits HierarchicalDataSourceControl&#xA;Implements IDataSource, IListSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDataSource : System::Web::UI::HierarchicalDataSourceControl, System::ComponentModel::IListSource, System::Web::UI::IDataSource" />
  <TypeSignature Language="F#" Value="type XmlDataSource = class&#xA;    inherit HierarchicalDataSourceControl&#xA;    interface IDataSource&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HierarchicalDataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultEvent("Transforming")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultProperty("DataFile")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データ バインドされたコントロールへの XML データ ソースを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このトピックの内容:  
  
-   [はじめに](#introduction)  
  
-   [XML データのソース](#source_of_xml_data)  
  
-   [XML データの更新](#updating_xml_data)  
  
-   [XSL 変換を指定します。](#specifying_an_xsl_transformation)  
  
-   [XPath 式を使用してフィルター処理](#filtering_using_an_xpath_expression)  
  
-   [キャッシュ](#caching)  
  
-   [その他の機能](#additional_features)  
  
-   [データ ビュー オブジェクト](#data_view_object)  
  
-   [宣言構文](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>はじめに  
 <xref:System.Web.UI.WebControls.XmlDataSource>コントロールは、XML データをデータ バインド コントロールを表示するデータ ソース コントロール。 <xref:System.Web.UI.WebControls.XmlDataSource>階層と表形式の両方のデータを表示するデータ バインド コントロールでコントロールを使用できます。 <xref:System.Web.UI.WebControls.XmlDataSource>コントロールは通常読み取り専用のシナリオでの階層の XML データの表示に使用します。 <xref:System.Web.UI.WebControls.XmlDataSource>コントロールを拡張、<xref:System.Web.UI.HierarchicalDataSourceControl>クラス、その階層データで動作します。 <xref:System.Web.UI.WebControls.XmlDataSource>も実装を制御、<xref:System.Web.UI.IDataSource>インターフェイスし、連携が表形式、またはリスト スタイル、データ。  
  
> [!NOTE]
>  セキュリティのための<xref:System.Web.UI.WebControls.XmlDataSource>コントロールのプロパティは、ビュー ステートに格納されます。 技術的には、クライアント上のビュー ステートの内容をデコードできるため、データ構造体、またはその内容に関する機密情報を格納するさらされる可能性がする情報の漏えいの脅威にします。 などの情報を格納する必要がある場合<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティ ビューに状態を設定して、コンテンツを保護する暗号化を有効にすることができます<xref:System.Web.UI.Page.ViewStateEncryptionMode%2A>上、`@ Page`ディレクティブ。  
  
 開発者の使用ページ、<xref:System.Web.UI.WebControls.XmlDataSource>データ バインド コントロールを使用して XML データを表示するコントロール。  
  
<a name="source_of_xml_data"></a>   
## <a name="sources-of-xml-data"></a>XML データのソース  
 <xref:System.Web.UI.WebControls.XmlDataSource>通常によって指定される XML ファイルから XML データを読み込み、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>プロパティ。 文字列の形式を使用してデータ ソース コントロールによって直接 XML データを格納することも、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティ。 データ バインド コントロールによって表示されるようにする、XML データを変換するには、変換の拡張可能なスタイル シート言語 (XSL) のスタイル シートを行うことができます。 によって示されるように、XML データではファイルからスタイル シートを読み込む通常、<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>プロパティが格納こともできますが文字列の形式を使用して直接、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>プロパティ。  
  
<a name="updating_xml_data"></a>   
## <a name="updating-xml-data"></a>XML データの更新  
 <xref:System.Web.UI.WebControls.XmlDataSource>コントロールはでよく使用読み取り専用のデータのシナリオ、データ バインド コントロールが XML データが表示されます。 ただし、使用することできますも、 <xref:System.Web.UI.WebControls.XmlDataSource> XML データを編集するコントロール。 XML データを編集するには、呼び出し、<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>を取得するメソッド、 <xref:System.Xml.XmlDataDocument> XML データのインメモリ表現であるオブジェクト。 によって公開されるオブジェクト モデルを使用することができます、<xref:System.Xml.XmlDataDocument>と<xref:System.Xml.XmlNode>オブジェクトが含まれていますが、またはドキュメント内のデータを操作する XPath フィルター式を使用します。 XML データのメモリ内表現に変更を行った場合に呼び出すことによってディスクに保存できる、<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>メソッド。  
  
 編集機能をいくつかの制限がある、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール。  
  
-   示される XML ファイルから XML データを読み込む必要がある、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>からインラインで指定された XML ではなく、プロパティ、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティ。  
  
-   XSLT 変換を指定しない、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>または<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>プロパティ。  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>メソッドは別の要求で、保存操作の同時実行扱えません。 1 つ以上のユーザーを XML ファイルを編集してかどうか、 <xref:System.Web.UI.WebControls.XmlDataSource>、すべてのユーザーは、同じデータで動作している保証はありません。 ことも、<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>これら同じ同時実行の問題が原因で失敗する操作。  
  
<a name="specifying_an_xsl_transformation"></a>   
## <a name="specifying-an-xsl-transformation"></a>XSL 変換を指定します。  
 XML データで実行される一般的な操作に変換されて 1 つの XML データ セットから別です。 <xref:System.Web.UI.WebControls.XmlDataSource>コントロールを使用した XML 変換をサポートする、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>と<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>プロパティで、データ バインド コントロールに渡される前に、XML データに適用する XSL スタイル シートを指定するには、および<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>プロパティで、することができます変換中に、XSL スタイル シートで使用される動的の XSLT スタイル シート引数を指定します。 XPath 式を使用してフィルターを指定する場合、<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティが適用される変換が行われた後です。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.XmlDataSource>クラスを使用して、非推奨<xref:System.Xml.Xsl.XslTransform>XSL 変換を実行するクラス。 以降後で導入されたスタイル シートの機能を使用する場合、<xref:System.Xml.Xsl.XslTransform>クラスの非推奨とされたを使用して手動で変換を適用、<xref:System.Xml.Xsl.XslCompiledTransform>クラス。  
  
<a name="filtering_using_an_xpath_expression"></a>   
## <a name="filtering-using-an-xpath-expression"></a>XPath 式を使用してフィルター処理  
 既定で、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールで識別される XML ファイル内のすべての XML データの読み込み、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>プロパティまたはで見つかったインライン、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティが、XPath 式を使用してデータをフィルター処理できます。 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティは、XML データが読み込まれ、変換後に適用される XPath 構文フィルターをサポートしています。  
  
<a name="caching"></a>   
## <a name="caching"></a>キャッシュ  
 パフォーマンスのために、キャッシュが有効になっている、<xref:System.Web.UI.WebControls.XmlDataSource>既定で制御します。 ページが要求されるたびに、サーバー上の XML ファイルの読み取りを開き、アプリケーションのパフォーマンスが低下することができます。 サーバーは Web サーバー上のメモリと引き換えに処理負荷を軽減するキャッシュによってほとんどの場合は、適切なトレードオフです。 <xref:System.Web.UI.WebControls.XmlDataSource>データを自動的にキャッシュときに、<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>プロパティに設定されて`true`、および<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>プロパティは、キャッシュを無効にする前に、キャッシュがデータを保存する秒数を設定します。 使用することができます、<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>をさらに、データ ソース コントロールのキャッシュ動作を微調整します。  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>その他の機能  
 次の表に、追加の機能でサポートされている、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール。  
  
|機能|説明|  
|----------------|-----------------|  
|並べ替え|サポートされていません、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール。|  
|フィルター処理|<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>適切な XPath 式を使用して XML データをフィルター処理プロパティを使用できます。|  
|ページング|サポートされていません、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール。|  
|Updating|操作でサポートされている、<xref:System.Xml.XmlDataDocument>直接呼び出して、<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>メソッド。|  
|削除中|操作でサポートされている、<xref:System.Xml.XmlDataDocument>直接呼び出して、<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>メソッド。|  
|挿入|操作でサポートされている、<xref:System.Xml.XmlDataDocument>直接呼び出して、<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>メソッド。|  
|キャッシュ|既定で有効になっている、<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>プロパティが 0 (無制限) に設定し、<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>プロパティに設定<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>。|  
  
<a name="data_view_object"></a>   
## <a name="data-view-object"></a>データ ビュー オブジェクト  
 <xref:System.Web.UI.WebControls.XmlDataSource>コントロールは、階層データを表示するデータ バインド コントロールと表形式のデータを表示するコントロールをサポートしている、データ ソース コントロールが基になる XML データに対して複数の種類のデータ ソース ビュー オブジェクトをサポートしています。 <xref:System.Web.UI.WebControls.XmlDataSource>コントロールの名前を持つ単一の取得<xref:System.Web.UI.WebControls.XmlDataSourceView>オブジェクトが表形式のデータを表示するデータ バインド コントロールを使用するとします。 <xref:System.Web.UI.IDataSource.GetViewNames%2A>メソッドは、この単一の名前付きビューを識別します。 階層データを表示するデータ バインド コントロールを使用すると、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールが取得、<xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView>に渡された任意階層の一意のパス、<xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A>メソッド。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>宣言構文  
  
```  
<asp:XmlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    DataFile="string"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnTransforming="Transforming event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    TransformArgumentList="string"  
    TransformFile="string"  
    Visible="True|False"  
    XPath="string"  
>  
    <Data>string</Data>  
    <Transform>string</Transform>  
</asp:XmlDataSource>  
```  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールを<xref:System.Web.UI.WebControls.TreeView>サンプル XML ファイルから XML データを表示します。 2 番目の例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール、テンプレートに<xref:System.Web.UI.WebControls.Repeater>XML データを表示します。  
  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールを<xref:System.Web.UI.WebControls.TreeView>XML データを表示します。 <xref:System.Web.UI.WebControls.XmlDataSource>で識別される XML ファイルから XML データを読み込み、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>プロパティ。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 コード例では、XML ファイルには、次のデータがあります。  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール、テンプレートに<xref:System.Web.UI.WebControls.Repeater>XML データを表示します。 <xref:System.Web.UI.WebControls.Repeater>ドキュメントの XML 内のデータにバインドする XPath データ バインディング式のアイテム コントロールは、<xref:System.Web.UI.WebControls.XmlDataSource>を表します。 詳細については`XPath`と`XPathSelect`データ バインディング構文を参照してください、<xref:System.Web.UI.XPathBinder>クラス。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/CS/xmlds14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/VB/xmlds14vb.aspx#1)]  
  
 コード例では、XML ファイルには、次のデータがあります。  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>John</firstn>  
         <lastn>Smith</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> クラスの新しいインスタンスを作成します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース コントロールが取得したデータをキャッシュする時間 (秒単位) を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> がデータ取得操作の結果をキャッシュする秒数。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource>コントロールは、次を適用するときに自動的にデータをキャッシュします。  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> プロパティが `true` に設定されている。  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>プロパティが、キャッシュは、キャッシュを無効にする前にデータを格納する時間を秒数を示す 0 より大きい値に設定します。  
  
 何らかの変更、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティまたは XML データを含むファイルの内容と、キャッシュが無効になります。  
  
 既定で、<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>プロパティは、無期限のキャッシュを示す、0 に設定されに依存している XML ファイルが変更されるまで、データ ソースからデータをキャッシュします。  
  
 実行時間の組み合わせによって、キャッシュの動作が適用されます、<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設定します。 場合<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>に設定されている<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールの最初のデータ取得操作にデータをキャッシュ、それで指定された時間にわたってメモリに保持<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>と後、時間の有効期限が切れて無効になります。 キャッシュは、次の操作時に更新されます。 場合<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>に設定されている<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>、データ ソース コントロールは最初のデータ取得操作でデータをキャッシュしますが、後続の各操作時にキャッシュを保持する時間枠をリセットします。 アクティビティがない期間に等しい場合、キャッシュの有効期限のみ、<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>最後のデータの取得以降。  
  
   
  
## Examples  
 次のコード例に示しますを使用する場合にキャッシュを有効にする方法、 <xref:System.Web.UI.WebControls.XmlDataSource> XML ファイルに含まれるデータを表示するコントロール。 キャッシュが有効になっているときに、<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>プロパティに設定されて`true`、<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>データ ソース コントロールによって、データをキャッシュする秒数に設定されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 コード例では、XML ファイルには、次のデータがあります。  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キャッシュの存続期間と組み合わされた、データ ソース コントロールが使用するキャッシュの動作を記述するキャッシュの有効期限のポリシーを取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 値のいずれか 1 つ。 既定では、キャッシュの有効期限のポリシーが <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" /> に設定されています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 キャッシュの動作については、規定の組み合わせ、<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>と<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設定します。 場合、<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>に設定されている<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>、<xref:System.Web.UI.WebControls.XmlDataSource>最初のデータ取得操作にデータをキャッシュ、それで指定された時間にわたってメモリに保持<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>と後、時間の有効期限が切れて無効になります。 キャッシュは、次の操作時に更新されます。 場合、<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>に設定されている<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>、データ ソース コントロールは最初のデータ取得操作でデータをキャッシュしますが、後続の各操作時にキャッシュを保持する時間枠をリセットします。 アクティビティがない期間に等しい場合にのみ、キャッシュの有効期限、<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>最後のデータの取得以降。  
  
   
  
## Examples  
 次のコード例に示しますを使用する場合にキャッシュを有効にする方法、 <xref:System.Web.UI.WebControls.XmlDataSource> XML ファイルに含まれるデータを表示するコントロール。 キャッシュが有効になっているときに、<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>プロパティに設定されて`true`、<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>データ ソース コントロールによって、データをキャッシュする秒数に設定されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 コード例では、XML ファイルには、次のデータがあります。  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyContext">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyContext As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyContext { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyContext : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ビューステートからデータ ソース コントロールのキャッシュ キーの値を取得または設定するか、キャッシュ キーをビューステートに追加します。</summary>
        <value>キャッシュ キーの値。キャッシュ キーがビューステートに存在しない場合は、空の文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext%2A>プロパティでは、手動でのキャッシュ キーを作成することができます、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール。 これは、機能は、データを含むファイルを指定する代わりに、コントロールを XML または XSLT のデータを格納しているオブジェクトを割り当てている場合にのみ必要です。 コントロールにデータを代入するときに、データはキャッシュ キーの生成に使用されません。 代わりに、データ オブジェクトを更新する場合、手動で一意のキャッシュ キーを生成する必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース コントロールによって作成されたすべてのデータ キャッシュ オブジェクトにリンクされる、ユーザー定義のキー依存関係を取得または設定します。 すべてのキャッシュ オブジェクトは、キーの有効期限が切れると、明示的に期限切れになります。</summary>
        <value><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> コントロールによって作成されたすべてのキャッシュ オブジェクトを識別するキー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource>コントロールがデータ キャッシュをサポートします。 データがキャッシュされるときに、<xref:System.Web.UI.WebControls.XmlDataSource>基になるデータ ファイルではなく、キャッシュからデータを取得します。 キャッシュの期限が切れると、基になるファイルからデータを取得し、データを再キャッシュします。  
  
 設定することができます、<xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>によって作成されたすべてのキャッシュ エントリ間の依存関係を作成するプロパティ、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールとキー。 プログラムで、キーの期限切れで、いつでもすべてのキャッシュ エントリを無効にできます。  
  
 作成するためのプロパティのため、 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>、可能性が複数<xref:System.Web.UI.WebControls.XmlDataSource>コントロールでは、同じ XML ファイルから同じデータの読み込みとファイルの変換し、が同じであるが、同じキャッシュで使用できる<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>と<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>を設定します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual string Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Data { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Data : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース コントロールのバインド先の XML データのブロックを取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> コントロールのバインド先のインライン XML データの文字列。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 宣言型のシナリオで、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティが複数行の内部プロパティとして指定されて、<xref:System.Web.UI.WebControls.XmlDataSource>オブジェクト。 内部プロパティは、何らかの方法で XML データの形式し、引用符文字の埋め込みなどの文字の埋め込みに関する問題を無視することができるため、XML のデータとの互換性。  
  
 どちらの場合、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>と<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティが設定されて、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>プロパティが優先されで指定された XML データではなく XML ファイル内のデータが使用される、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティ。  
  
 値を変更する場合、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティ、<xref:System.Web.UI.IDataSource.DataSourceChanged>イベントが発生します。 値を変更すると、キャッシュが有効になっている<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>キャッシュが無効になります。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>に含まれるインライン XML データを表示するコントロールを<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティを<xref:System.Web.UI.WebControls.TreeView>コントロール。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/CS/xmlds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/VB/xmlds10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ドキュメントが読み込まれています。</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="DataFile">
      <MemberSignature Language="C#" Value="public virtual string DataFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースのバインド先 XML ファイルの名前を指定します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> コントロールが表すデータを格納している XML ファイルの絶対物理パスまたは相対パス。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 どちらの場合、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>と<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティが設定されて、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>プロパティが優先されで指定された XML データではなく XML ファイル内のデータが使用される、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティ。  
  
 値を変更する場合、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>プロパティ、<xref:System.Web.UI.IDataSource.DataSourceChanged>イベントが発生します。 値を変更すると、キャッシュが有効になっている<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>キャッシュが無効になります。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>を持つファイルに含まれる XML データを表示するコントロールを<xref:System.Web.UI.WebControls.TreeView>コントロール。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 コード例では、XML ファイルには、次のデータがあります。  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ドキュメントが読み込まれています。</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> コントロールでデータ キャッシュが有効かどうかを示す値を取得または設定します。</summary>
        <value>データ ソース コントロールでデータ キャッシュが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource>コントロール データを自動的にキャッシュするときに、<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>プロパティに設定されて`true`します。 既定で、<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>プロパティは、無期限のキャッシュを示す、0 に設定されに依存している XML ファイルが変更されるまで、データ ソースからデータをキャッシュします。 設定した場合、<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>プロパティを 0 より大きい値は、キャッシュで、新しいものを取得する前に多くの秒のデータが格納されます。  
  
 場合、<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>プロパティに設定されて`true`と<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>プロパティが設定されて、キャッシュ エントリは自動的に無効と変換の引数リストで、パラメーターを変更します。 その場合を設定してキャッシュを無効にするコードを記述する必要があります、<xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>プロパティ。  
  
   
  
## Examples  
 次のコード例に示しますを使用する場合にキャッシュを有効にする方法、 <xref:System.Web.UI.WebControls.XmlDataSource> XML ファイルに含まれるデータを表示するコントロール。 キャッシュが有効になっているときに、<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>プロパティに設定されて`true`、<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>データ ソース コントロールによって、データをキャッシュする秒数に設定されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 コード例では、XML ファイルには、次のデータがあります。  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetHierarchicalView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.HierarchicalDataSourceView GetHierarchicalView(string viewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetHierarchicalView (viewPath As String) As HierarchicalDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::HierarchicalDataSourceView ^ GetHierarchicalView(System::String ^ viewPath);" />
      <MemberSignature Language="F#" Value="override this.GetHierarchicalView : string -&gt; System.Web.UI.HierarchicalDataSourceView" Usage="xmlDataSource.GetHierarchicalView viewPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HierarchicalDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewPath">現在の階層ビューを作成するためのノードを識別する XPath 式。</param>
        <summary><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> コントロールのデータ ソース ビュー オブジェクトを取得します。 <paramref name="viewPath" /> パラメーターは Xpath 式である場合もあります。</summary>
        <returns><paramref name="viewPath" /> で識別されたデータ ノードで始まるデータの単一ビューを表す <see cref="T:System.Web.UI.WebControls.XmlHierarchicalDataSourceView" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出すことができます、<xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A>を取得するメソッド、<xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール。 指定した場合`viewPath`値、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールがデータ ソース ビュー オブジェクトで識別されるノードのビューを表すを返します`viewPath`、すべての子ノードと共にします。 設定した場合`viewPath`に<xref:System.String.Empty?displayProperty=nameWithType>、<xref:System.Web.UI.WebControls.XmlDataSource>チェックを制御、<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティをデータ ソース ビューを構築するためのルート ノードを確認します。 場合、<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティが設定されて、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールが、同じデータ ソース ビューを返すために使用方法、`viewPath`式を使用します。 場合、<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティが設定されていない、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールは、XML データのすべてのデータ ノードのビューを返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlDocument">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument GetXmlDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlDocument GetXmlDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlDocument () As XmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlDocument ^ GetXmlDocument();" />
      <MemberSignature Language="F#" Value="member this.GetXmlDocument : unit -&gt; System.Xml.XmlDocument" Usage="xmlDataSource.GetXmlDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>XML データを、基になるデータ ストレージから直接メモリに読み込むか、キャッシュからメモリに読み込むことにより、それを <see cref="T:System.Xml.XmlDataDocument" /> オブジェクトの形式で返します。</summary>
        <returns><see cref="T:System.Xml.XmlDataDocument" /> プロパティで指定された XML、または、<see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> プロパティで指定されたファイル内の XML を表す <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> オブジェクト。変換および <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" /> クエリはすべて適用された状態で返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>基になる XML データのメモリ内表現に直接アクセスするためのメソッド。  
  
 返されたを操作する<xref:System.Xml.XmlDataDocument>オブジェクトを呼び出して<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>によって指定された XML ファイルへの変更を保持する、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>プロパティ。 前に、いくつかの要件を満たす必要がある、<xref:System.Xml.XmlDataDocument>オブジェクトが正常に保存することができます。 詳細については、<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> メソッドを参照してください。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初の例では、使用する方法、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールを<xref:System.Web.UI.WebControls.TreeView>コントロールを表示し、XML ファイルに含まれている XML データを編集します。 2 番目の例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール、テンプレートに<xref:System.Web.UI.WebControls.Repeater>コントロールを表示し、XML ファイルに含まれている XML データを編集します。  
  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールを<xref:System.Web.UI.WebControls.TreeView>コントロールを表示し、XML ファイルに含まれている XML データを編集します。 メモリを使用して、データを操作して、<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>メソッドを選択するたびに、<xref:System.Web.UI.WebControls.TreeView>ノード、および XML ファイルに保存しています。 最後に、<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>で呼び出される、<xref:System.Web.UI.WebControls.TreeView>コントロールを表示するデータを更新します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール、テンプレートに<xref:System.Web.UI.WebControls.Repeater>コントロールを表示し、XML ファイルに含まれている XML データを編集します。 メモリを使用して、前の例で、データが操作される、<xref:System.Xml.XmlDataDocument>によって取得された、<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>メソッド。 最後に、<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>で呼び出される、<xref:System.Web.UI.WebControls.TreeView>コントロールを表示するデータを更新します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 コード例では、XML ファイルには、次のデータがあります。  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> プロパティに対して URL が指定されていますが、<see cref="T:System.Web.UI.WebControls.XmlDataSource" /> コントロールに、その Web リソースに対する適切なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> プロパティに対して、HTTP ベースではない URL が指定されています。  
  
\- または 
<see cref="T:System.Web.UI.WebControls.XmlDataSource" /> コントロールを使用する前に、デザイン時の相対パスがデザイナーによって正しく割り当てられていませんでした。  
  
\- または 
キャッシュとクライアント偽装の両方が有効になっています。 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> コントロールは、クライアント偽装が有効になっているときはキャッシュをサポートしません。</exception>
        <exception cref="T:System.Web.HttpException"><see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> プロパティで指定されたパスへのアクセスが拒否されました。</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.Save" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      </Docs>
    </Member>
    <Member MemberName="OnTransforming">
      <MemberSignature Language="C#" Value="protected virtual void OnTransforming (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTransforming(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTransforming (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTransforming(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTransforming : EventArgs -&gt; unit&#xA;override this.OnTransforming : EventArgs -&gt; unit" Usage="xmlDataSource.OnTransforming e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" /> コントロールが XML データに対して XSLT 変換を実行する前に <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールを<xref:System.Web.UI.WebControls.TreeView>変換された XML データを表示するコントロール。 によって示されるスタイル シートを使用して、XML 変換が実行される、<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>プロパティ。 さらに、スタイル シートで使用でデータ ソース コントロールに渡される引数を変換、<xref:System.Xml.Xsl.XsltArgumentList>実行時のオブジェクト。 コード例を渡す方法を示します、<xref:System.Xml.Xsl.XsltArgumentList>オブジェクトを処理することにより、データ ソース コントロールに、<xref:System.Web.UI.WebControls.XmlDataSource.Transforming>メソッドの名前で識別されるカスタム イベント ハンドラーを持つイベントを設定、<xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A>メソッド。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 コード例では、XML ファイルには、次のデータがあります。  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 XML 変換を実行するには、次のスタイル シートを使用します。  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>オーバーライドするときに<see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />、派生クラスを呼び出すことを確認する、<see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />デリゲートを登録するための基本クラスのメソッドは、イベントを受信します。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.Save" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; unit" Usage="xmlDataSource.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> プロパティが設定されている場合に、<see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> コントロールが現在メモリ内に保持している XML データをディスクに保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中に、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールが読み取り専用のデータ バインディング シナリオで通常使用される、使用することができます、<xref:System.Web.UI.WebControls.XmlDataSource>を基になる XML データ ファイル内の XML データを編集するコントロール。 これらのシナリオでは、XML データがによって XML ファイルから読み込まれる、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール。 変更する、<xref:System.Xml.XmlDataDocument>メモリを使用して、<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>メソッド、および呼び出すことによって XML データ ファイルに保存して、<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>メソッド。 この編集可能な XML シナリオは、次の条件が満たされたときにできます。  
  
-   指定された XML ファイルから XML データが読み込まれた、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>プロパティで指定されたインライン XML データからではなく、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティ。  
  
-   XSLT 変換が指定されていない、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>または<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>プロパティ。  
  
 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>メソッドは別の要求で、保存操作の同時実行扱えません。 1 つ以上のユーザーを XML ファイルを編集してかどうか、<xref:System.Web.UI.WebControls.XmlDataSource>制御は、すべてのユーザーは、同じデータで動作しているという保証はありません。 ことも、<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>これら同じ同時実行の問題が原因で失敗する操作。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールを<xref:System.Web.UI.WebControls.TreeView>コントロールを表示し、XML ファイルに含まれている XML データを編集します。 2 番目のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール、テンプレートに<xref:System.Web.UI.WebControls.Repeater>コントロールを表示し、XML ファイルに含まれている XML データを編集します。  
  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールを<xref:System.Web.UI.WebControls.TreeView>コントロールを表示し、XML ファイルに含まれている XML データを編集します。 メモリを使用して、データを操作して、<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>メソッドを選択するたびに、<xref:System.Web.UI.WebControls.TreeView>ノード、および XML ファイルに保存しています。 最後に、<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>で呼び出される、<xref:System.Web.UI.WebControls.TreeView>コントロールを表示するデータを更新します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール、テンプレートに<xref:System.Web.UI.WebControls.Repeater>コントロールを表示し、XML ファイルに含まれている XML データを編集します。 メモリを使用して、前の例で、データが操作される、<xref:System.Xml.XmlDataDocument>によって取得されるオブジェクト、<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>メソッド。 最後に、<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>で呼び出される、<xref:System.Web.UI.WebControls.TreeView>コントロールを表示するデータを更新します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 コード例では、XML ファイルには、次のデータがあります。  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XML データが、<see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> プロパティではなく、<see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> プロパティを使って読み込まれています。  
  
\- または 
<see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> プロパティに対して URL が指定されていますが、<see cref="T:System.Web.UI.WebControls.XmlDataSource" /> コントロールに、その Web リソースに対する適切なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> プロパティに対して、HTTP ベースではない URL が指定されています。  
  
\- または 
<see cref="T:System.Web.UI.WebControls.XmlDataSource" /> コントロールを使用する前に、デザイン時の相対パスがデザイナーによって正しく割り当てられていませんでした。</exception>
        <exception cref="T:System.Web.HttpException"><see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> プロパティで指定されたパスへのアクセスが拒否されました。</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />」をご覧ください。</summary>
        <value>コレクションが <see cref="T:System.Collections.IList" /> オブジェクトのコレクションである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 使用できる場合にのみ、<xref:System.Web.UI.WebControls.XmlDataSource>インスタンスにキャスト、<xref:System.ComponentModel.IListSource>インターフェイス。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IListSource.GetList" />」をご覧ください。</summary>
        <returns>データ ソースにバインドできる <see cref="T:System.Collections.IList" /> を実装するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 使用できる場合にのみ、<xref:System.Web.UI.WebControls.XmlDataSource>インスタンスにキャスト、<xref:System.ComponentModel.IListSource>インターフェイス。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.DataSourceChanged">
      <MemberSignature Language="C#" Value="event EventHandler System.Web.UI.IDataSource.DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler System.Web.UI.IDataSource.DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Custom Event DataSourceChanged As EventHandler Implements System.Web.UI.IDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.IDataSource.DataSourceChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="E:System.Web.UI.IDataSource.DataSourceChanged" />」をご覧ください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 使用できる場合にのみ、<xref:System.Web.UI.WebControls.XmlDataSource>インスタンスにキャスト、<xref:System.Web.UI.IDataSource>インターフェイス。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetView">
      <MemberSignature Language="C#" Value="System.Web.UI.DataSourceView IDataSource.GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.DataSourceView System.Web.UI.IDataSource.GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetView (viewName As String) As DataSourceView Implements IDataSource.GetView" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Web::UI::DataSourceView ^ System.Web.UI.IDataSource.GetView(System::String ^ viewName) = System::Web::UI::IDataSource::GetView;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">取得するビューの名前。 <see cref="F:System.String.Empty" /> を指定した場合、<see cref="T:System.Web.UI.WebControls.XmlDataSource" /> コントロールの既定のビューが取得されます。</param>
        <summary>データ ソース コントロールに関連付けられた名前付きデータ ソース ビューを取得します。</summary>
        <returns><see cref="T:System.Web.UI.WebControls.XmlDataSourceView" /> コントロールに関連付けられている名前付きの <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> オブジェクトを返します。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetViewNames">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IDataSource.GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.Web.UI.IDataSource.GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Function GetViewNames () As ICollection Implements IDataSource.GetViewNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.Web.UI.IDataSource.GetViewNames() = System::Web::UI::IDataSource::GetViewNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Web.UI.IDataSource.GetViewNames" />」をご覧ください。</summary>
        <returns><see cref="T:System.Collections.ICollection" /> オブジェクトに関連付けられたビュー オブジェクトのリストを表す名前を格納する <see cref="T:System.Web.UI.IDataSource" /> を実装するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 使用できる場合にのみ、<xref:System.Web.UI.WebControls.XmlDataSource>インスタンスにキャスト、<xref:System.Web.UI.IDataSource>インターフェイス。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual string Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Transform" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Transform As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Transform { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> コントロールで管理されている XML データに対して実行される XSLT 変換を定義する拡張スタイルシート言語 (XSL) データのブロックを取得または設定します。</summary>
        <value><see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> プロパティまたは <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> プロパティのデータに対して実行される XML 変換を定義したインライン XSL 文字列。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 宣言型のシナリオで、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>プロパティが複数行の内部プロパティとして指定されて、<xref:System.Web.UI.WebControls.XmlDataSource>オブジェクト。 内部プロパティは、任意の方法でスタイル シートの書式を設定し、引用符文字の埋め込みなどの文字の埋め込みの問題を無視することができるため、XSL スタイル シートのデータと互換性が。  
  
 両方の場合、<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>と<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>プロパティが設定されて、<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>プロパティが優先され、XSL スタイル シート ファイル (.xsl) のデータがで指定されたスタイル シートの要素の代わりに使用される、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>プロパティ。 使用して XPath 式が設定されている場合、<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティ、XML データの変換後に適用されます。  
  
 値を変更する場合、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>プロパティ、<xref:System.Web.UI.IDataSource.DataSourceChanged>イベントが発生します。 値を変更すると、キャッシュが有効になっている<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>キャッシュが無効になります。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.XmlDataSource>クラスを使用して、非推奨<xref:System.Xml.Xsl.XslTransform>XSL 変換を実行するクラス。 以降後で導入されたスタイル シートの機能を使用する場合、<xref:System.Xml.Xsl.XslTransform>クラスの非推奨とされたを使用して手動で変換を適用、<xref:System.Xml.Xsl.XslCompiledTransform>クラス。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール、テンプレートに<xref:System.Web.UI.WebControls.Repeater>変換された XML データを表示するコントロール。 変換を実行するスタイル シートは、インラインで定義されて、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>データ ソース コントロールのプロパティ。  
  
  
  
 コード例では、XML ファイルには、次のデータがあります。  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>Todd</firstn>  
         <lastn>Rowe</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ドキュメントが読み込まれています。</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="TransformArgumentList">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XsltArgumentList TransformArgumentList" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformArgumentList As XsltArgumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Xsl::XsltArgumentList ^ TransformArgumentList { System::Xml::Xsl::XsltArgumentList ^ get(); void set(System::Xml::Xsl::XsltArgumentList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformArgumentList : System.Xml.Xsl.XsltArgumentList with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltArgumentList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XSLT 引数リストを提供します。この引数リストは、XML データに対する変換を実行するために、<see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> プロパティまたは <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> プロパティで定義されたスタイル シートと組み合わせて使用されます。</summary>
        <value><see cref="T:System.Xml.Xsl.XsltArgumentList" /> コントロールが XML データを読み込むときに適用される XSLT パラメーターおよびオブジェクトを保持する <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> オブジェクト。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定、<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>プロパティと、<xref:System.Web.UI.WebControls.XmlDataSource.Transforming>イベントは、XML データに適用される XSLT 変換時に XSLT パラメーターを使用できるようにします。  
  
 場合、<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>プロパティに設定されて`true`と<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>プロパティが設定されて、キャッシュ エントリは自動的に無効と変換の引数リストで、パラメーターを変更します。 その場合を設定してキャッシュを無効にするコードを記述する必要があります、<xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>プロパティ。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>で、<xref:System.Web.UI.WebControls.TreeView>変換された XML データを表示するコントロール。 によって示されるスタイル シートを使用して、XML 変換が実行される、<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>プロパティ。 さらに、スタイル シートで使用でデータ ソース コントロールに渡される引数を変換、<xref:System.Xml.Xsl.XsltArgumentList>実行時にオブジェクト。 コード例を渡す方法を示します、<xref:System.Xml.Xsl.XsltArgumentList>処理によってデータ ソース コントロールに、<xref:System.Web.UI.WebControls.XmlDataSource.Transforming>イベントのカスタム イベント ハンドラーを使用します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 コード例では、XML ファイルには、次のデータがあります。  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 XML データの変換は、次のスタイル シートで実行されます。  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="TransformFile">
      <MemberSignature Language="C#" Value="public virtual string TransformFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransformFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TransformFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> コントロールで管理されている XML データに対して実行される XSLT 変換を定義する拡張スタイルシート言語 (XSL) ファイル (.xsl) のファイル名を指定します。</summary>
        <value><see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> プロパティまたは <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> プロパティのデータに対して実行される XML 変換を定義した XSL スタイル シート ファイルの絶対物理パスまたは相対パス。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 両方の場合、<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>と<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>プロパティが設定されて、<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>プロパティが優先され、XSL スタイル シート ファイル (.xsl) のデータがで指定されたスタイル シートの要素の代わりに使用される、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>プロパティ。 使用して XPath 式が設定されている場合、<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティ、XML データの変換後に適用されます。  
  
 値を変更する場合、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>プロパティ、<xref:System.Web.UI.IDataSource.DataSourceChanged>イベントが発生します。 値を変更すると、キャッシュが有効になっている<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>キャッシュが無効になります。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.XmlDataSource>クラスを使用して、非推奨<xref:System.Xml.Xsl.XslTransform>XSL 変換を実行するクラス。 以降後で導入されたスタイル シートの機能を使用する場合、<xref:System.Xml.Xsl.XslTransform>クラスの非推奨とされたを使用して手動で変換を適用、<xref:System.Xml.Xsl.XslCompiledTransform>クラス。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールと<xref:System.Web.UI.WebControls.TreeView>を表示するコントロールが Web フォーム上の XML データを変換します。 によって示されるスタイル シートを使用して、変換が行われる、<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>プロパティ。 スタイル シートを使用するための変換の引数を指定できます必要に応じて、<xref:System.Xml.Xsl.XsltArgumentList>します。 詳細については、<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> プロパティを参照してください。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/CS/xmlds5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/VB/xmlds5vb.aspx#1)]  
  
 コード例では、XML ファイルには、次のデータがあります。  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 XML 変換を実行する XSL スタイル シートでは、次の構造があります。  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
     </xsl:attribute>  
     <xsl:attribute name="price">  
       <xsl:value-of select="price"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ドキュメントが読み込まれています。</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="Transforming">
      <MemberSignature Language="C#" Value="public event EventHandler Transforming;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Transforming" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Transforming As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Transforming;" />
      <MemberSignature Language="F#" Value="member this.Transforming : EventHandler " Usage="member this.Transforming : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> プロパティで定義されたスタイル シート、または <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> プロパティで指定されたスタイル シートが XML データに適用される前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.XmlDataSource.Transforming>を設定するイベント、<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>プロパティを<xref:System.Xml.Xsl.XsltArgumentList>オブジェクトの前に、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールは、XML 変換を実行します。  
  
 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールを<xref:System.Web.UI.WebControls.TreeView>変換された XML データを表示するコントロール。 によって示されるスタイル シートを使用して、XML 変換が実行される、<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>プロパティ。 さらに、スタイル シートで使用でデータ ソース コントロールに渡される引数を変換、<xref:System.Xml.Xsl.XsltArgumentList>実行時にします。 コード例を渡す方法を示します、<xref:System.Xml.Xsl.XsltArgumentList>オブジェクトを処理することにより、データ ソース コントロールに、<xref:System.Web.UI.WebControls.XmlDataSource.Transforming>イベントのカスタム イベント ハンドラーを使用します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 コード例では、XML ファイルには、次のデータがあります。  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 XML データの変換は、次のスタイル シートを使用して実行されます。  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public virtual string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> プロパティに格納された XML データ、または、<see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> プロパティで指定された XML ファイル内の XML データに対して適用する XPath 式を指定します。</summary>
        <value><see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> プロパティに格納されたデータ、または、<see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> プロパティで指定された XML ファイル内のデータをフィルター処理するための XPath 式を表す文字列。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XPath データ バインディング式の詳細については、次を参照してください。 [XmlDataSource コントロールに表形式のコントロールをバインド](https://msdn.microsoft.com/library/d6bf202f-6454-45fd-9424-e17f6c7eafe8)します。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール、テンプレートに<xref:System.Web.UI.WebControls.Repeater>XPath 式を使用してフィルター選択されている XML データを表示します。 XML データをフィルター処理では、この例では、XPath 構文が使用されるときに、<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>データ ソース コントロールのプロパティが設定され、要素のバインドも行います、 <xref:System.Web.UI.WebControls.Repeater> XML データをコントロール テンプレート。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/CS/xmlds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/VB/xmlds8vb.aspx#1)]  
  
 コード例では、XML ファイルには、次のデータがあります。  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ドキュメントが読み込まれています。</exception>
      </Docs>
    </Member>
  </Members>
</Type>