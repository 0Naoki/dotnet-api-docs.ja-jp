<Type Name="ObjectDataSource" FullName="System.Web.UI.WebControls.ObjectDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="15236dc6073fb19c95955afb8e0d9d895643e546" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36381749" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectDataSource extends System.Web.UI.DataSourceControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.ObjectDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectDataSource&#xA;Inherits DataSourceControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectDataSource : System::Web::UI::DataSourceControl" />
  <TypeSignature Language="F#" Value="type ObjectDataSource = class&#xA;    inherit DataSourceControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("TypeName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ObjectDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>多階層 Web アプリケーション アーキテクチャで、データ バインド コントロールにデータを提供するビジネス オブジェクトを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このトピックの内容:  
  
-   [はじめに](#introduction)  
  
-   [目的](#purpose)  
  
-   [データの取得](#retrieving_data)  
  
-   [データ操作を実行します。](#performing_data_operations)  
  
-   [データのフィルター処理](#filtering_data)  
  
-   [キャッシュ](#caching)  
  
-   [機能](#features)  
  
-   [データ ビュー](#data_view)  
  
-   [LINQ to SQL を使用します。](#using_linq_to_sql)  
  
-   [宣言型の構文](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>はじめに  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールを作成するクラスと連携します。 取得し、データを更新するメソッドを作成して、これらのメソッドの名前を指定する、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールをマークアップします。 レンダリングまたはポストバックの処理中に、<xref:System.Web.UI.WebControls.ObjectDataSource>指定したメソッドを呼び出します。  
  
 ビジュアル表示はありません、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 その結果、<xref:System.Web.UI.WebControls.ObjectDataSource>など visual 機能をサポートしない、<xref:System.Web.UI.DataSourceControl.EnableTheming%2A>または<xref:System.Web.UI.DataSourceControl.SkinID%2A>プロパティです。  
  
<a name="purpose"></a>   
## <a name="purpose"></a>目的  
 非常に一般的なアプリケーションのデザイン方法は、ビジネス ロジックからプレゼンテーション層を分離して、ビジネス オブジェクトにビジネス ロジックをカプセル化するにです。 これらのビジネス オブジェクトは、プレゼンテーション層と 3 層アプリケーションのアーキテクチャでは、その結果、データ層の間で区別する層を形成します。 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールにより、開発者は、3 層アプリケーションのアーキテクチャを維持しながら ASP.NET データ ソース コントロールを使用します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールでは、リフレクションを使用して、ビジネス オブジェクトのインスタンスを作成し、取得するでメソッドを呼び出す更新、挿入、およびデータを削除します。 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティは、クラスの名前を識別する、<xref:System.Web.UI.WebControls.ObjectDataSource>で動作します。 <xref:System.Web.UI.WebControls.ObjectDataSource>保持しないオブジェクト メモリ内の Web 要求の有効期間にわたって; コントロールを作成し、各メソッド呼び出しのクラスのインスタンスを破棄します。 これは重大な考慮事項を使用するビジネス オブジェクトの多くのリソースが必要ですか作成し、破棄にはコストがそれ以外の場合です。 高価なオブジェクトを使用できない可能性があります、最適な設計の選択肢を使用して、オブジェクトのライフ サイクルを制御することができます、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、および<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント。  
  
> [!NOTE]
>  によって識別されるメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>、および<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティは、インスタンス メソッドを指定できますまたは`static`(`Shared` Visual Basic で) メソッドです。 メソッドは、場合`static`(`Shared` Visual Basic で)、ビジネス オブジェクトのインスタンスは作成されません、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、および<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベントは発生しません。  
  
<a name="retrieving_data"></a>   
## <a name="retrieving-data"></a>データの取得  
 ビジネス オブジェクトからデータを取得するには設定、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ データを取得するメソッドの名前にします。 メソッドが返されない場合、<xref:System.Collections.IEnumerable>または<xref:System.Data.DataSet>オブジェクト、オブジェクトがランタイムによってラップされた、<xref:System.Collections.IEnumerable>コレクション。 メソッド署名しているかどうかのパラメーターを追加できます<xref:System.Web.UI.WebControls.Parameter>オブジェクトを<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>、コレクションで指定されているメソッドに渡す値に関連付けると、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。 順序で、<xref:System.Web.UI.WebControls.ObjectDataSource>パラメーターを使用するコントロールを名前とメソッドのシグネチャのパラメーターの型パラメーターに一致する必要があります。 詳細については、次を参照してください。 [、ObjectDataSource コントロールでのパラメーターの使用](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)です。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロール データを取得するたびに、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドが呼び出されます。 このメソッドで指定されたメソッドへのプログラムによるアクセスを提供する<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。 指定されているメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>にバインドされているコントロールでプロパティが自動的に呼び出されます、<xref:System.Web.UI.WebControls.ObjectDataSource>ときにその`DataBind`メソッドが呼び出されます。 設定した場合、`DataSourceID`データ バインド コントロールのプロパティ、コントロールに自動的にデータにバインド データ ソースから、必要に応じて。 設定、`DataSourceID`プロパティは推奨されるメソッドのバインディング、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールをデータ バインド コントロールです。 また、設定することができます、`DataSource`プロパティ、それをする必要があります明示的に呼び出す、`DataBind`データ バインド コントロールのメソッドです。 呼び出すことができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>プログラムでいつでもデータを取得するメソッド。  
  
 データ ソース コントロールにデータ バインド コントロールのバインドの詳細については、次を参照してください。[データ ソース コントロールを使用してデータをバインド](http://msdn.microsoft.com/library/e41adfff-8fb8-449e-9cd1-9bd49788c5f7)です。  
  
<a name="performing_data_operations"></a>   
## <a name="performing-data-operations"></a>データ操作を実行します。  
 オブジェクトをビジネスの機能によって、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールが連動、更新、挿入、および削除などのデータ操作を実行することができます。 これらのデータ操作を実行するには、適切なメソッド名とを実行する操作に関連するパラメーターを設定します。 たとえば、更新操作では、次のように設定します。、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>必須パラメーターのプロパティを追加および更新プログラムを実行するビジネス オブジェクト メソッドの名前を、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクション。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、データ バインド コントロールに関連付けられて、データ バインドされたコントロールによって、パラメーターが追加されます。 この場合、メソッドのパラメーター名が、データ バインド コントロール内のフィールド名を一致することを確認する必要があります。 更新プログラムが実行されるときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>メソッドが、コードによって明示的にまたは自動的にデータ バインドされたコントロールによって呼び出されます。 同じ一般的なパターンに従うは<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作します。 ビジネス オブジェクトをバッチ処理される代わりに、時に、これらの種類のデータ操作の 1 つのレコードを実行すると想定されます。  
  
<a name="filtering_data"></a>   
## <a name="filtering-data"></a>データのフィルター処理  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールには、によって取得されるデータをフィルター処理、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>としてデータが返される場合は、プロパティ、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>オブジェクト。 設定することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティ形式を使用してフィルター式を文字列構文とパラメーターで指定されている式で値を連結、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>コレクション。  
  
<a name="caching"></a>   
## <a name="caching"></a>キャッシュ  
 <xref:System.Web.UI.WebControls.ObjectDataSource>インスタンスが保持されないで識別されるメソッドの呼び出しの結果をキャッシュに、複数の要求でビジネス オブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。 データはキャッシュされたそれ以降の呼び出し中に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドには、ビジネス オブジェクトを作成して、呼び出しではなく、キャッシュされたデータが返されますその<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>リフレクションを使用します。 オブジェクトを作成して、Web サーバーでメモリを犠牲にして、データ メソッドを呼び出すことを回避できますをキャッシュします。 <xref:System.Web.UI.WebControls.ObjectDataSource>は自動的にデータをキャッシュときに、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティに設定されている`true`、および<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティが、キャッシュが破棄される前に、キャッシュがデータを格納する秒数に設定します。 指定することも、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティと省略可能な<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>プロパティです。 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールでは、すべての種類のデータをキャッシュすることができますが、リソースまたは複数の要求をサービスには共有できない状態を保持するオブジェクトをキャッシュする必要があります (たとえば、開いている<xref:System.Data.SqlClient.SqlDataReader>オブジェクト) であるため、オブジェクトの同じインスタンス複数の要求をサービスに使用されます。  
  
<a name="features"></a>   
## <a name="features"></a>フィーチャー  
 次の表の機能、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
|機能|必要条件|  
|----------------|------------------|  
|選択|設定、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>ビジネスの名前にプロパティがオブジェクトのメソッドがデータを選択してで必要なパラメーターを含める、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>コレクション プログラム、またはデータ バインド コントロールを使用します。|  
|並べ替え|設定、<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>プロパティ内のパラメーターの名前を<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>並べ替えの条件を実行するメソッド。|  
|フィルター処理|設定、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティ フィルター式に、必要に応じて、パラメーターを追加する、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>データにフィルターをコレクションときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドが呼び出されます。 によって指定されたメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティを返す必要があります、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>です。|  
|ページング|データ ソースのページングがサポートされる場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>メソッドにパラメーター取得するレコードの最大数と、取得する最初のレコードのインデックスにはが含まれています。 これらのパラメーターの名前を設定する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>プロパティ、それぞれします。 データ バインド コントロールはそれ自体には、ページングを実行できる可能性がある場合でも、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールでは、ページングによって指定されたメソッドで直接サポートされない、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。 これを行うことができるデータ バインド コントロールの要件は、メソッドがで指定されている、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティを実装するオブジェクトを返す、<xref:System.Collections.ICollection>インターフェイスです。|  
|Updating|設定、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティをビジネスの名前にはオブジェクトのデータを更新するメソッドとで必要なパラメーターを含める、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクション。|  
|削除中|設定、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>ビジネスの名前にプロパティがオブジェクトのメソッドまたは関数、データを削除してで必要なパラメーターを含める、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクション。|  
|挿入|設定、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>ビジネスの名前にプロパティがオブジェクトのメソッドまたは関数、データを挿入してで必要なパラメーターを含める、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>コレクション。|  
|キャッシュ|設定、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティを`true`、および<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティに従って、キャッシュされたデータのキャッシュ動作をします。|  
  
> [!NOTE]
>  使用すると、<xref:System.Web.UI.WebControls.ObjectDataSource>を更新またはデータは、クライアントで入力した文字列を挿入するクラスは自動的に変換されませんクライアントのカルチャの形式からサーバーのカルチャの形式にします。 たとえば、クライアントのカルチャは、日付の書式として DD、構造体、YYYY MM を指定する場合があり、サーバー上の日付の形式は/MM/DD/YYYY をする可能性があります。 その場合は、2009 年 10 月 5 日に入力されます、 <xref:System.Web.UI.WebControls.TextBox> 2009 年 5 月 10 日として制御しますが、2009 年 5 月 10 日として解釈できます。 2009 年 10 月 15 日では、2009 年 15 月 10 日ように入力し、無効な日付として拒否されるようにします。  
  
<a name="data_view"></a>   
## <a name="data-view"></a>データ ビュー  
 すべてのデータ ソース コントロールと同様、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールがデータ ソース ビュー クラスを使用すると、関連付けられています。 中に、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールがページの開発者が、データを操作に使用するインターフェイス、<xref:System.Web.UI.WebControls.ObjectDataSourceView>クラスは、データ バインド コントロールを使用するインターフェイスです。 さらに、<xref:System.Web.UI.WebControls.ObjectDataSourceView>クラスは、データ ソース コントロールの機能について説明し、実際の作業を実行します。 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールに関連付けられている 1 つだけ<xref:System.Web.UI.WebControls.ObjectDataSourceView>、という名前が常と`DefaultView`です。 中に、<xref:System.Web.UI.WebControls.ObjectDataSourceView>によってオブジェクトが公開されている、<xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A>メソッド、プロパティとメソッドの多くがラップされ、によって直接公開される、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 バック グラウンドで、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトは取得、挿入、更新、削除、フィルター処理、およびデータの並べ替えを含む、すべてのデータ操作を実行します。 詳細については、「<xref:System.Web.UI.WebControls.ObjectDataSourceView>」を参照してください。  
  
<a name="using_linq_to_sql"></a>   
## <a name="using-linq-to-sql"></a>LINQ to SQL を使用します。  
 使用することができます、 <xref:System.Web.UI.WebControls.ObjectDataSource> LINQ to SQL クラスを持つコントロール。 設定するためには、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティをデータ コンテキスト クラスの名前にします。 設定することも、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>、および<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>データ コンテキスト クラス内の対応する操作を実行するメソッドをメソッドです。 イベント ハンドラーを作成する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>データ コンテキスト クラスの破棄をキャンセルするためにイベント。 この手順が必要な LINQ to SQL は、遅延実行をサポートしているため、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、Select 操作の後にデータ コンテキストを破棄しようとしています。 LINQ to SQL クラスを作成する方法の詳細については、次を参照してください。[する方法: LINQ to Web プロジェクトでの SQL クラスを作成](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)です。 データ コンテキスト クラスの破棄をキャンセルする方法の例は、次を参照してください。、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント。  
  
## <a name="using-the-entity-framework"></a>Entity Framework を使用  
 使用することも、 <xref:System.Web.UI.WebControls.ObjectDataSource> Entity Framework でのコントロールです。 詳細については、次を参照してください。 [Entity Framework と、ObjectDataSource コントロールを使用して](http://go.microsoft.com/fwlink/?LinkId=209117)です。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>宣言型の構文  
  
```  
<asp:ObjectDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    ConflictDetection="OverwriteChanges|CompareAllValues"  
    ConvertNullToDBNull="True|False"  
    DataObjectTypeName="string"  
    DeleteMethod="string"  
    EnableCaching="True|False"  
    EnablePaging="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    FilterExpression="string"  
    ID="string"  
    InsertMethod="string"  
    MaximumRowsParameterName="string"  
    OldValuesParameterFormatString="string"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnFiltering="Filtering event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnObjectCreated="ObjectCreated event handler"  
    OnObjectCreating="ObjectCreating event handler"  
    OnObjectDisposing="ObjectDisposing event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    runat="server"  
    SelectCountMethod="string"  
    SelectMethod="string"  
    SkinID="string"  
    SortParameterName="string"  
    SqlCacheDependency="string"  
    StartRowIndexParameterName="string"  
    TypeName="string"  
    UpdateMethod="string"  
    Visible="True|False"  
>  
        <DeleteParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </DeleteParameters>  
        <FilterParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </FilterParameters>  
        <InsertParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </InsertParameters>  
        <SelectParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </SelectParameters>  
        <UpdateParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </UpdateParameters>  
</asp:ObjectDataSource>  
```  
  
   
  
## Examples  
 Visual Studio の Web サイト プロジェクトとソース コードは、このトピックで使用可能な:[ダウンロード](http://code.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=aspnetmsdnexamples&DownloadId=14838)です。  
  
 このセクションの内容を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> .aspx 内のマークアップでページとその表示と連携するビジネス オブジェクト。 この例は、.aspx ページです。 含まれている、<xref:System.Web.UI.WebControls.GridView>コントロールにバインドされている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールのマークアップは、ビジネス オブジェクトの名前とデータを取得するために呼び出すビジネス オブジェクト メソッドの名前を指定します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 次の例は、ビジネス オブジェクトを<xref:System.Web.UI.WebControls.ObjectDataSource>.aspx ページにコントロールを使用します。 (他の多くの<xref:System.Web.UI.WebControls.ObjectDataSource>のコード例もこのビジネス オブジェクトを使用します)。この例は、次の 2 つの基本クラスで構成されます。  
  
-   `EmployeeLogic`クラスは、ビジネス ロジックで、クラスを<xref:System.Web.UI.WebControls.ObjectDataSource>を使用します。  
  
-   `NorthwindEmployee`クラスによって返されるデータ オブジェクトを定義、`GetAllEmployees`のメソッド、`EmployeeLogic`クラスです。  
  
 追加の`NorthwindDataException`便宜クラスを提供します。  
  
 この例のクラスのセットは、Microsoft SQL Server と Microsoft Access で使用可能である Northwind Traders データベースで動作します。 稼働させるためには、コンパイルして、提供されている .aspx ページの例でこれらのクラスを使用する必要があります。 Northwind traders というデータベースをインストールする方法については、次を参照してください。[する方法: サンプル データベースをインストール](http://msdn.microsoft.com/library/ed1291f6-604c-4972-ae22-0345c6dea12e)です。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.IDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
    <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource (string typeName, string selectMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, string selectMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String, selectMethod As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSource(System::String ^ typeName, System::String ^ selectMethod);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.ObjectDataSource : string * string -&gt; System.Web.UI.WebControls.ObjectDataSource" Usage="new System.Web.UI.WebControls.ObjectDataSource (typeName, selectMethod)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="selectMethod" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> が使用するクラスの名前。</param>
        <param name="selectMethod">
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> がデータを取得するために呼び出すメソッドまたは関数の名前。</param>
        <summary>型名とデータ取得メソッド名を指定して、<see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、 `typeName` Bin または App_Code ディレクトリに配置されているコードの部分修飾型またはアセンブリをグローバル アセンブリ キャッシュに登録されているコードの完全修飾型名パラメーターを指定できます。 グローバル アセンブリ キャッシュを使用する場合への適切な参照を追加する必要があります、`assemblies`は Machine.config または Web.config 構成ファイルのセクションです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> プロパティによって取得したデータを、データ ソース コントロールがキャッシュする時間 (秒単位) を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> が <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> プロパティの呼び出しの結果をキャッシュする秒数。 既定値は 0 です。 この値を負にすることはできません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールはデータのキャッシュをサポートします。 データをキャッシュするために呼び出す、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド、ビジネスではなく、キャッシュから、データを取得するオブジェクトを<xref:System.Web.UI.WebControls.ObjectDataSource>で動作します。 キャッシュが期限切れになったときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドがビジネス オブジェクトからデータを取得し、再度データをキャッシュします。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールが自動的にデータをキャッシュ時に、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティに設定されている`true`と<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティが、キャッシュが、キャッシュ エントリの前にデータを格納する秒数を示す、0 より大きい値に設定破棄されます。 0 の値では、無限の深さのキャッシュを示します。  
  
 実行時間の組み合わせで、キャッシュを調節し、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>設定します。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティに設定されている、<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>値、<xref:System.Web.UI.WebControls.ObjectDataSource>最初の呼び出しにデータをキャッシュ、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド、多くても、時間の間で指定されているメモリ内に保持し、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティです。 データは、メモリが必要な場合、継続時間の前にリリースされる可能性があります。 キャッシュは、次の呼び出し中に更新し、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティに設定されている<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>値、データ ソース コントロールが最初の呼び出しにデータをキャッシュする、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドが各後続の呼び出しで、キャッシュを保持する時間枠をリセット、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。 相当する時間のアクティビティがない場合、キャッシュが期限切れ、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティに最後に呼び出した後、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を示す方法、<xref:System.Web.UI.WebControls.ObjectDataSource>オブジェクトはキャッシュをサポートします。 2 番目のコード例を返すラッパー メソッドを実装する方法を示します、<xref:System.Data.DataSet>でキャッシュを有効にするオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource>オブジェクト。  
  
 次のコード例を示す方法、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールはキャッシュをサポートします。 キャッシュを有効にするには、によって識別されるデータを取得するメソッドを実装する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>としてデータを返す、プロパティ、<xref:System.Data.DataSet>オブジェクト。 この例では、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティに設定されている`true`、および<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティが設定されます。 <xref:System.Web.UI.WebControls.ObjectDataSource>によって返されるデータをキャッシュ、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 30 秒のプロパティです。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]  
  
 次のコード例を返すラッパー メソッドを実装する方法を示します、<xref:System.Data.DataSet>でキャッシュを有効にするオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 基本実装で、`EmployeeLogic`クラス、`GetAllEmployees`メソッドを返します、<xref:System.Collections.ArrayList>オブジェクト。 使用するには、完全にオブジェクトのリファクタリングではなく、<xref:System.Web.UI.WebControls.ObjectDataSource>ラッパー メソッドの名前付き Web フォーム ページに`GetAllEmployeesAsDataSet`のセットを返す追加`NorthwindEmployee`データとして、<xref:System.Data.DataSet>です。  
  
 このコード例に示されている例の一部である、<xref:System.Web.UI.WebControls.ObjectDataSource>クラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>存続期間と組み合わせた場合の、データ ソース コントロールが使用するキャッシュの動作を記述するキャッシュの有効期限の動作を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールはデータのキャッシュをサポートします。 データをキャッシュするために呼び出す、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド、ビジネスではなく、キャッシュから、データを取得するオブジェクトを<xref:System.Web.UI.WebControls.ObjectDataSource>で動作します。 キャッシュが期限切れになったときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドがビジネス オブジェクトからデータを取得し、再度データをキャッシュします。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールが自動的にデータをキャッシュ時に、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティに設定されている`true`と<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティが、キャッシュが、キャッシュ エントリの前にデータを格納する秒数を示す、0 より大きい値に設定破棄されます。 0 の値では、無限の深さキャッシュ期間を示します。  
  
 実行時間の組み合わせで、キャッシュを調節し、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>設定します。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティに設定されている、<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>値、<xref:System.Web.UI.WebControls.ObjectDataSource>最初の呼び出しにデータをキャッシュ、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド、多くても、時間の間で指定されているメモリ内に保持し、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティです。 データは、メモリが必要な場合、継続時間の前にリリースされる可能性があります。 キャッシュは、次の呼び出し中に更新し、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティに設定されている、<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>値、データ ソース コントロールが最初の呼び出しにデータをキャッシュする、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドが、後続の呼び出しごとにキャッシュを保持する時間枠をリセット、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。 相当する時間のアクティビティがない場合、キャッシュが期限切れ、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティに最後に呼び出した後、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を示す方法、<xref:System.Web.UI.WebControls.ObjectDataSource>オブジェクトがフィルター処理とキャッシュをサポートします。 2 番目のコード例を返すラッパー メソッドを実装する方法を示します、<xref:System.Data.DataSet>キャッシュとフィルター処理を有効にするオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource>オブジェクト。  
  
 次のコード例を示す方法、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、フィルター処理とキャッシュをサポートします。 フィルター処理とキャッシュを有効にするには、によって識別されるデータを取得するメソッドを実装する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>としてデータを返す、プロパティ、<xref:System.Data.DataSet>オブジェクト。 この例ではキャッシュが有効になっているため、`EmployeeLogic`オブジェクトとしてデータが返されます、 <xref:System.Data.DataSet>、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティに設定されている`true`、および<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティが設定されます。 <xref:System.Web.UI.WebControls.ObjectDataSource>によって返されるデータをキャッシュ、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 30 秒のプロパティです。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]  
  
 次のコード例を返すラッパー メソッドを実装する方法を示します、<xref:System.Data.DataSet>キャッシュとフィルター処理を有効にするオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 基本実装で、`EmployeeLogic`クラス、`GetAllEmployees`メソッドを返します、<xref:System.Collections.ArrayList>です。 使用するには、完全にオブジェクトのリファクタリングではなく、<xref:System.Web.UI.WebControls.ObjectDataSource>ラッパー メソッドの名前付き Web フォーム ページに`GetAllEmployeesAsDataSet`のセットを返す追加`NorthwindEmployee`データとして、<xref:System.Data.DataSet>です。 このコード例に示されている例の一部である、<xref:System.Web.UI.WebControls.ObjectDataSource>クラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース コントロールによって作成されたすべてのデータ キャッシュ オブジェクトにリンクされる、ユーザー定義のキー依存関係を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> によって作成されたすべてのキャッシュ オブジェクトを識別するキー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>プロパティは、他の任意の文字列値に設定することができます。  
  
 キーの有効期限が切れると、すべてのキャッシュ オブジェクトが明示的に期限切れになります。 これにより、によって作成されたキャッシュ エントリを無効にするため、<xref:System.Web.UI.WebControls.ObjectDataSource>プログラムで独自のページからコードします。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールはデータのキャッシュをサポートします。 データをキャッシュするために呼び出す、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド、ビジネスではなく、キャッシュから、データを取得するオブジェクトを<xref:System.Web.UI.WebControls.ObjectDataSource>で動作します。 キャッシュが期限切れになったときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドがビジネス オブジェクトからデータを取得し、再度データをキャッシュします。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールが自動的にデータをキャッシュ時に、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティに設定されている`true`と<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティが、キャッシュが、キャッシュ エントリの前にデータを格納する秒数を示す、0 より大きい値に設定破棄されます。 0 の値では、無限の深さのキャッシュを示します。  
  
 設定することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>によって作成されるすべてのキャッシュ エントリ間の依存関係を作成するプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>制御とキー。 できます期限切れにするすべてのキャッシュ エントリ プログラムでいつでも、キーを期限切れにします。 使用してキーの有効期限、 <xref:System.Web.Caching.Cache.Remove%2A?displayProperty=nameWithType> 、現在のメソッド<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>パラメーターと値。  
  
 組み合わせごとに一意のキャッシュ エントリが作成された、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>、および<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>プロパティです。 複数<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールで使用できる、同じキャッシュ エントリのシナリオで同じ型、メソッド、およびパラメーターを使用してデータを読み込みます。  
  
   
  
## Examples  
 次の 3 つの例では、Web ページ、分離コード ページ クラス、および Northwind データベース内の従業員テーブルからレコードを取得するデータ アクセス クラスを表示します。  
  
 最初の例では、2 つを含む Web ページ<xref:System.Web.UI.WebControls.ObjectDataSource>、コントロール、<xref:System.Web.UI.WebControls.DropDownList>コントロール、および<xref:System.Web.UI.WebControls.DetailsView>コントロール。 最初の<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールと<xref:System.Web.UI.WebControls.DropDownList>取得して、データベースから従業員の名前を表示するコントロールを使用します。 2 番目<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールと<xref:System.Web.UI.WebControls.DetailsView>を取得し、ユーザーが選択されている従業員のレコードを表示するコントロールを使用します。  
  
 キャッシュが有効になっている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 したがって、各レコードは、データベースから 1 つだけの時間を取得します。 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>プロパティが"EmployeeDetails"に設定されているが、任意の文字列値がキーとして使用できます。 Web ページにも含まれています、<xref:System.Web.UI.WebControls.Button>キャッシュされたデータを期限切れにユーザーがクリックするコントロール。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]  
  
 2 番目の例では、ハンドラーを<xref:System.Web.UI.Control.Load>イベントとのハンドラーを<xref:System.Web.UI.WebControls.Button.Click>のイベント、<xref:System.Web.UI.WebControls.Button>コントロール。 <xref:System.Web.UI.Control.Load>イベント ハンドラーがキーのセット含むキャッシュ項目を作成、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>値。 <xref:System.Web.UI.WebControls.Button.Click>イベント ハンドラーと等しいキーを持つキャッシュ アイテムを削除、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>値。 キャッシュ項目が削除されると、キーに依存しているすべてのキャッシュされたデータが期限切れです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]  
  
 3 番目の例では、Northwind データベースが対話するデータ アクセス クラスを示します。 クラスでは、LINQ を使用して、Employees テーブルをクエリします。 例では、LINQ to SQL クラスを表す Northwind データベースと従業員テーブルが必要です。 詳細については、次を参照してください。[する方法: LINQ to Web プロジェクトでの SQL クラスを作成](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)です。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberSignature Language="F#" Value="member this.ConflictDetection : System.Web.UI.ConflictOptions with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="Update" /> メソッドに新しい値だけを渡すか、<see langword="Update" /> メソッドに新旧両方の値を渡すかを決定する値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.ConflictOptions" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、新旧の値のパラメーターが指定されたメソッドに適用されるかどうかを決定、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティです。 メソッドである場合などで指定された、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティから返される、<xref:System.Data.DataTable>列を持つコントロール`Name`と`Number`、および<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>プロパティに設定されている、<xref:System.Web.UI.ConflictOptions.OverwriteChanges>フィールド、パラメーターがの作成`Name`と`Number`の`Update`メソッドです。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>プロパティに設定されている、 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 、パラメーターが作成された値の`Name`、 `Number`、 `original_Name`、および`original_Number`です。 (元の値のパラメーターの正確な名前が異なります、<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>プロパティです)。<xref:System.Web.UI.WebControls.ObjectDataSource>を判断するかどうか、メソッドをで指定された、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティが一致するパラメーターです。  
  
 同時実行制御は、データを読み取るし、複数のクライアントがアクセスして、同じデータを操作するときに、ストアで変更する方法を制御するデータ ストアを使用する手法です。 たとえば、1 つのクライアントは、データを読み取り、別のクライアントが同じデータを読み取り、別のユーザーに提示中に、ユーザーに提示します。 両方のユーザーは、データ更新、データ ストレージに送信すると、予期しない結果が発生する可能性、両方のクライアントは、同じデータの異なる値を指定する場合があります。 これは、競合と見なされます。 設定して、<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>プロパティを<xref:System.Web.UI.ConflictOptions.CompareAllValues>値、`Update`メソッドの競合を検出し、必要に応じてそれらの処理を元のデータ ソースの新旧の値を比較し、します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
      </Docs>
    </Member>
    <Member MemberName="ConvertNullToDBNull">
      <MemberSignature Language="C#" Value="public bool ConvertNullToDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertNullToDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertNullToDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertNullToDBNull { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ConvertNullToDBNull : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新、挿入、削除の各操作に渡される <see cref="T:System.Web.UI.WebControls.Parameter" /> 値を、<see cref="F:System.DBNull.Value" /> コントロールで <see langword="null" /> から <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 値に自動的に変換するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.Parameter" /> コントロールに渡される <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトのすべての <see langword="true" /> 値を <see cref="F:System.DBNull.Value" /> 値に自動的に変換する場合は <see langword="null" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換せず`null`を<xref:System.DBNull.Value>値、エラー実行時に発生します。 使用して、<xref:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull%2A>かを示すプロパティかどうか<xref:System.Web.UI.WebControls.Parameter>update、insert、または削除操作に渡される値は自動的にから変換`null`を<xref:System.DBNull.Value>値に、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DBNull.Value" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="DataObjectTypeName">
      <MemberSignature Language="C#" Value="public string DataObjectTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataObjectTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataObjectTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataObjectTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataObjectTypeName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールが、データ バインド コントロールから個々の値を渡す代わりに、データの更新、挿入、削除の各操作のパラメーターに使用するクラスの名前を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> が <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />、<see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />、<see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> の各操作のパラメーターとして使用できるオブジェクトの型を識別する、部分修飾クラス名または完全修飾クラス名。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 渡されるいくつかのパラメーターを指定する代わりに、 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>、および<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>メソッド、いくつかのデータ フィールドの値を集計する 1 つのオブジェクトを作成することができます。 このオブジェクトは、いくつかのパラメーターではなく、メソッドに渡されます。  
  
 既定の動作、<xref:System.Web.UI.WebControls.ObjectDataSource>データ バインド コントロールにバインドされたコントロールがデータ バインド コントロールが作成される、<xref:System.Web.UI.WebControls.Parameter>データ ソース内の各パラメーターのオブジェクト。 ビジネス オブジェクトでは、多くのフィールドを持っている場合、その結果、メソッドは多数のフィールドもあります。 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティでは、各データ フィールドのプロパティを持つ型を指定することができます。 次に、メソッドには、いくつかのパラメーターを渡すことではなく、ランタイムは 1 つのオブジェクトを作成し、そのすべてのプロパティを設定します。 このオブジェクトは、メソッドの呼び出しのパラメーター コレクションに追加されます。  
  
 指定されている型、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティは、パラメーターを持たない既定コンス トラクターを持つ必要がありますので、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、型のインスタンスを作成できます。 型には、設定可能なプロパティを許可する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource>オブジェクト、データ バインド コントロールから渡される値に設定を制御します。 プロパティの名前、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールがデータ バインドされたコントロールによって渡される値のパラメーターの名前と正確に一致するが必要です。  
  
 ときに、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティが設定され、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、データ バインド コントロールで指定されているメソッドに関連付けられて、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>それぞれのプロパティが、で指定されている型の1つのパラメーターを持つ必要があります<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティです。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>プロパティに設定されている、<xref:System.Web.UI.ConflictOptions.OverwriteChanges>値で指定されているメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティで指定されている型の 1 つのパラメーターには、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティです。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>プロパティに設定されている、<xref:System.Web.UI.ConflictOptions.CompareAllValues>値で指定されているメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティで指定されている型の 2 つのパラメーターを持つ必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティです。 最初のパラメーターには、元の値が含まれています。2 番目のパラメーターには、新しい値が含まれています。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>と関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
   
  
## Examples  
 セクションには、2 つのコード例が含まれています。 最初のコード例は、すべてのパラメーター値を 1 つのオブジェクトに結合する型を実装する方法を示しますを使用して、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティです。 2 つ目のコード例では、最初のコード例で使用される 2 つのクラスを使用する Web ページを示します。  
  
 次のコード例は、すべてのパラメーター値を 1 つのオブジェクトに結合する型を実装する方法を示しますを使用して、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティです。 Select メソッド、`AggregateData`クラスを返します、<xref:System.Data.DataTable>という 2 つの列を持つオブジェクト`Name`と`Number`です。 同様に、`NewData`クラスは 2 つの読み取り/書き込みプロパティを定義`Name`と`Number`です。 `Insert`のメソッド、`AggregateData`クラス型の 1 つのパラメーターには、`NewData`です。 `TypeName`のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>に設定されている`AggregateData`と<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティに設定されている`NewData`です。  
  
 [!code-csharp[ObjectDataSourceDataObjectTypeName#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateData.cs#2)]
 [!code-vb[ObjectDataSourceDataObjectTypeName#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateData.vb#2)]  
  
 次のコード例では、前のコード例で使用される 2 つのクラスを使用する Web ページを示します。  
  
 [!code-aspx-csharp[ObjectDataSourceDataObjectTypeName#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateDataPageCS.aspx#1)]
 [!code-aspx-vb[ObjectDataSourceDataObjectTypeName#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateDataPageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete();" />
      <MemberSignature Language="F#" Value="member this.Delete : unit -&gt; int" Usage="objectDataSource.Delete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> コレクション内のパラメーターを持つ <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" /> プロパティで識別されるメソッドを呼び出して削除操作を実行します。</summary>
        <returns>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows" /> イベントで <see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" /> の <see cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" /> プロパティを設定する場合は、基になるデータ ストレージから削除する行数を表す値。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>操作を実行する、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>イベント。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>イベント パラメーターの値を確認する前に処理を実行して、<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>操作します。 削除操作を実行する、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトによって識別されるオブジェクトのインスタンスを作成するリフレクションを使用して、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティです。 によって識別されるメソッドを呼び出して、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティ、関連付けられているいずれかを使用して<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>プロパティです。 よると、パラメーターの名前が作成された場合は、関連付けられたデータ バインド コントロールから削除パラメーターを取得、<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>プロパティです。 後に、<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>操作が完了すると、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>イベント。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>イベントを戻り値、出力パラメーターと、例外を調べると、後続の処理を実行します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>メソッドからデリゲートを<xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A>のメソッド、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
## <a name="data-bound-controls"></a>データ バインド コントロール  
 ときに、<xref:System.Web.UI.WebControls.ObjectDataSource>など、データ バインド コントロールにコントロールが関連付けられている、<xref:System.Web.UI.WebControls.GridView>コントロール必要はありませんを呼び出して、<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>ページ コードからメソッドです。 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>代わりにメソッドが、データ バインド コントロールが直接呼び出されます。  
  
 パラメーターの結合、オブジェクトの有効期間、およびメソッドの解決に関する詳細については、次を参照してください。<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Deleted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>戻り値または出力パラメーターの値を確認する場合、または後に例外がスローされたかどうかを決定するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>操作が完了します。 戻り値、出力パラメーター、および例外処理のプロパティから使用できますが、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト。  
  
 使用することができます、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>から削除された行の数を取得するオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>メソッドです。 これを行うには、設定、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>プロパティです。 指定されたメソッドから削除された行の数を返す場合は、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティ値から使用可能な<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>オブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つオブジェクトと<xref:System.Web.UI.WebControls.GridView>データを削除するコントロール。 2 つ目のコード例で示す、`EmployeeLogic`最初のコード例で使用されるクラスです。  
  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つコントロールと<xref:System.Web.UI.WebControls.GridView>データを削除するコントロール。 最初に、<xref:System.Web.UI.WebControls.GridView>で指定されているメソッドを使用して、すべての従業員のコントロールを表示、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>からデータを取得するプロパティを`EmployeeLogic`オブジェクト。 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>プロパティに設定されている`true`、<xref:System.Web.UI.WebControls.GridView>コントロールが自動的に表示、**削除**ボタンをクリックします。  
  
 クリックした場合、**削除**で指定されているメソッドを使用して、ボタン、削除操作が実行される、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティおよび任意のパラメーターで指定されている、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクション。 このコード例ではいくつか前処理および後処理手順も実行されます。 `NorthwindEmployeeDeleting`を処理するデリゲートが呼び出されます、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>イベント、操作を実行する前に、`NorthwindEmployeeDeleted`を処理するデリゲートが呼び出されて、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>例外処理を実行する操作が完了した後のイベント。 このコード例では場合、`NorthwindDataException`がスローされると、によって処理される、`NorthwindEmployeeDeleted`メソッドです。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 次のコード例は、`EmployeeLogic`前のコード例で使用されるクラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteMethod">
      <MemberSignature Language="C#" Value="public string DeleteMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールがデータを削除するために呼び出すメソッドまたは関数の名前を取得または設定します。</summary>
        <value>データを削除するために <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> が使用するメソッドまたは関数の名前を表す文字列。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ビジネス オブジェクトは、バッチ内ではなく、一度に 1 レコードずつデータを削除すると見なされます。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 パラメーター名が構成されていることを確認してください、<xref:System.Web.UI.WebControls.ObjectDataSource>内の制御、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクション select メソッドによって返される列名に一致します。  
  
## <a name="object-lifetime"></a>オブジェクトの有効期間  
 によって識別されるメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティは、インスタンス メソッドを使用できますか、 `static` (`Shared` Visual Basic で) メソッドです。 ビジネス オブジェクトが作成され、破棄されるたびにインスタンス メソッドである場合、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティが呼び出されます。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>と<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>する前に、ビジネス オブジェクトを使用するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティが呼び出されます。 処理することも、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>後に発生するイベントを<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティが呼び出されます。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable> 、インターフェイス、<xref:System.IDisposable.Dispose%2A>オブジェクトが破棄される前に、メソッドが呼び出されます。 メソッドの場合、 `static` (`Shared` Visual Basic で)、メソッドがビジネス オブジェクトは作成されず、処理することはできません、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、および<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント。  
  
## <a name="parameter-merging"></a>パラメーターのマージ  
 パラメーターに追加されます、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 3 つのソースからのコレクション。  
  
-   データ バインド コントロールから、実行時にします。  
  
-   `DeleteParameters`要素を宣言します。  
  
-   `Deleting`メソッドを宣言します。  
  
 データ バインド コントロールから生成されるすべてのパラメーターを追加する最初に、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクション。 たとえば場合、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールにバインドする、<xref:System.Web.UI.WebControls.GridView>列を持つコントロールを`Name`と`Number`、パラメーターを`Name`と`Number`コレクションに追加されます。 パラメーターの正確な名前が異なります、<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>プロパティです。 これらのパラメーターのデータ型は`string`します。 次に記載されているパラメーター、`DeleteParameters`要素が追加されます。 場合のパラメーター、`DeleteParameters`になっているパラメーターと同じ名前で要素が見つかる、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>で指定されているパラメーターと一致する、既存のパラメーターのコレクションが変更された、`DeleteParameters`要素。 通常、パラメーターのデータの種類の変更に使用されます。 最後に、プログラムで追加および削除できます内のパラメーター、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>イベントが発生する前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>メソッドを実行します。 メソッドは、パラメーターは、マージ後に解決されます。 メソッドの解決は、次のセクションで説明しています。  
  
## <a name="method-resolution"></a>メソッドの解決  
 ときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>メソッドは、宣言的に作成されたパラメーターのデータ バインド コントロールからのデータ フィールド、`DeleteParameters`要素、およびパラメーターで追加された、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>イベント ハンドラーがすべてマージします。 (詳細については、前のセクションを参照してください)。<xref:System.Web.UI.WebControls.ObjectDataSource>に呼び出すメソッドを検索するオブジェクトを試みます。 指定されている名前を持つ 1 つまたは複数のメソッドの最初に、検索、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティです。 一致するものが見つからない場合、<xref:System.InvalidOperationException>例外がスローされます。 一致が見つかった場合、一致するパラメーター名が検索されます。 たとえば、によって指定される型、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティという 2 つのメソッドは、`DeleteARecord`です。 1 つ`DeleteARecord`1 つのパラメーターを持つ`ID`、および、その他の`DeleteARecord`2 つのパラメーターを持ち`Name`と`Number`です。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクションという名前の 1 つだけのパラメーターには、 `ID`、`DeleteARecord`メソッドだけを`ID`パラメーターと呼びます。 パラメーターの型は、メソッドを解決するのにはチェックされません。 パラメーターの順序は重要ではありません。  
  
 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティを設定すると、メソッドが別の方法で解決します。 <xref:System.Web.UI.WebControls.ObjectDataSource>で指定されている名前を持つメソッドを検索、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>を型の 1 つのパラメーターを受け取るプロパティがで指定された、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティです。 この場合、パラメーターの名前は関係ありません。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つオブジェクトと<xref:System.Web.UI.WebControls.GridView>データを削除するコントロール。 2 つ目のコード例で示す、`EmployeeLogic`最初のコード例で使用されるクラスです。  
  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つコントロールと<xref:System.Web.UI.WebControls.GridView>データを削除するコントロール。 最初に、<xref:System.Web.UI.WebControls.GridView>で指定されているメソッドを使用して、すべての従業員のコントロールを表示、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>からデータを取得するプロパティを`EmployeeLogic`オブジェクト。 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>プロパティに設定されている`true`、<xref:System.Web.UI.WebControls.GridView>コントロールが自動的に表示、**削除**ボタンをクリックします。  
  
 クリックした場合、**削除**で指定されているメソッドを使用して、ボタン、削除操作が実行される、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティおよび任意のパラメーターで指定されている、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクション。 このコード例ではいくつか前処理および後処理手順も実行されます。 `NorthwindEmployeeDeleting`を処理するデリゲートが呼び出されて、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 、操作を実行すると前に、のイベントと`NorthwindEmployeeDeleted`を処理するデリゲートが呼び出されて、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>例外処理を実行する操作が完了した後にイベント。 この例では場合、`NorthwindDataException`がスローされると、によって処理される、`NorthwindDataException`を委任します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 次のコード例は、`EmployeeLogic`前のコード例で使用されるクラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> メソッドによって使用されるパラメーターを格納するパラメーター コレクションを取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> メソッドによって使用されるパラメーターを格納している <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名前と型のパラメーターに含まれている、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクションは、名前とパラメーターの型と一致する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>メソッド シグネチャ。 パラメーター名が影響を受けました、<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>プロパティであり、大文字小文字を区別します。 コレクション内のパラメーターは、データ バインド コントロール、宣言によって、指定されたパラメーターおよびプログラムによって追加されたパラメーターに含まれるデータによって異なります。 詳細についてを参照してください「パラメーターをマージ」<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>と[、ObjectDataSource コントロールでのパラメーターの使用](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)です。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>プロパティの取得、<xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A>プロパティに含まれています、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 パラメーターの結合、オブジェクトの有効期間、およびメソッドの解決に関する詳細については、次を参照してください。<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>です。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つオブジェクトと<xref:System.Web.UI.WebControls.GridView>データを削除するコントロール。 2 つ目のコード例で示す、`EmployeeLogic`最初のコード例で使用されるクラスです。  
  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つコントロールと<xref:System.Web.UI.WebControls.GridView>データを削除するコントロール。 最初に、<xref:System.Web.UI.WebControls.GridView>で指定されているメソッドを使用して、すべての従業員のコントロールを表示、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>からデータを取得するプロパティを`EmployeeLogic`オブジェクト。 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>プロパティに設定されている`true`、<xref:System.Web.UI.WebControls.GridView>コントロールが自動的に表示、**削除**ボタンをクリックします。  
  
 クリックした場合、**削除** ボタン、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>イベントは、2 つのパラメーターと共に呼び出されました。 1 つのパラメーター、`EmpID`から、<xref:System.Web.UI.WebControls.DataGrid>制御、およびに基づく、<xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A>プロパティです。 その他のパラメーターは、宣言型<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>プロパティです。 `EmployeeLogic`クラスのオーバー ロード、`DeleteEmployee`メソッドです。 1 つのオーバー ロードは、`NorthwindEmployee`パラメーター、およびその他の受け取り、<xref:System.Int32>という名前のパラメーター`anID`です。 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>イベント、内のエントリ、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>という 1 つだけのパラメーターを指定するプロパティが調整`anID`から値を持つ`original_EmpID`します。 イベント ハンドラー存在する場合、一致する`DeleteEmployee`メソッドが呼び出されます。  
  
 次のコード例は、表示する Web ページを示します、<xref:System.Web.UI.WebControls.DataGrid>コントロールとハンドル、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>イベント。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/objds11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/objds11vb.aspx#1)]  
  
 次のコード例は、`EmployeeLogic`前のコード例で使用されるクラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_11#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/northwindemployee11.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/northwindemployee11.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Deleting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 、パラメーターの値を検証する、または前に、のパラメーターの値を変更する、アプリケーションに固有である追加の初期化を実行するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、削除操作を実行します。 パラメーターとして使用できる、<xref:System.Collections.IDictionary>によってアクセスされるコレクション、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>によって公開される、プロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>オブジェクト。  
  
 設定して、削除操作を取り消すことができます、<xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>に`true`です。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つオブジェクトと<xref:System.Web.UI.WebControls.GridView>データを削除するコントロール。 2 つ目のコード例で示す、`EmployeeLogic`最初のコード例で使用されるクラスです。  
  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つコントロールと<xref:System.Web.UI.WebControls.GridView>データを削除するコントロール。 最初に、<xref:System.Web.UI.WebControls.GridView>で指定されているメソッドを使用して、すべての従業員のコントロールを表示、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>からデータを取得するプロパティを`EmployeeLogic`オブジェクト。 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>プロパティに設定されている`true`、<xref:System.Web.UI.WebControls.GridView>コントロールが自動的に表示、**削除**ボタンをクリックします。  
  
 クリックした場合、**削除**で指定されているメソッドを使用して、ボタン、削除操作が実行される、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティおよび任意のパラメーターで指定されている、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクション。 このコード例ではいくつか前処理および後処理手順も実行されます。 `NorthwindEmployeeDeleting`を処理するデリゲートが呼び出されて、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 、操作を実行すると前に、のイベントと`NorthwindEmployeeDeleted`を処理するデリゲートが呼び出されて、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>例外処理を実行する操作が完了した後にイベント。 このコード例では場合、`NorthwindDataException`がスローされると、によって処理される、`NorthwindEmployeeDeleted`メソッドです。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 次のコード例は、`EmployeeLogic`前のコード例で使用されるクラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールでデータ キャッシュが有効かどうかを示す値を取得または設定します。</summary>
        <value>データ ソース コントロールでデータ キャッシュが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールはデータのキャッシュをサポートします。 データをキャッシュするために呼び出す、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドは、キャッシュからデータを取得ではなく、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトのインスタンスを作成し、そのデータ メソッドを呼び出すことです。 キャッシュが期限切れになったときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドがビジネス オブジェクトからデータを取得し、再度データをキャッシュします。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールが自動的にデータをキャッシュ時に、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティに設定されている`true`と<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティが、キャッシュが、キャッシュ エントリの前にデータを格納する秒数を示す、0 より大きい値に設定破棄されます。 0 の値では、無限の深さのキャッシュを示します。  
  
   
  
## Examples  
 次の 3 つの例では、Web ページ、分離コード ページ クラス、および Northwind データベース内の従業員テーブルからレコードを取得するデータ アクセス クラスを表示します。  
  
 最初の例では、2 つを含む Web ページ<xref:System.Web.UI.WebControls.ObjectDataSource>、コントロール、<xref:System.Web.UI.WebControls.DropDownList>コントロール、および<xref:System.Web.UI.WebControls.DetailsView>コントロール。 最初の<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールと<xref:System.Web.UI.WebControls.DropDownList>取得して、データベースから従業員の名前を表示するコントロールを使用します。 2 番目<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールと<xref:System.Web.UI.WebControls.DetailsView>を取得し、ユーザーが選択されている従業員のレコードを表示するコントロールを使用します。  
  
 キャッシュが有効になっている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 したがって、各レコードは、データベースから 1 つだけの時間を取得します。 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>プロパティが"EmployeeDetails"に設定されているが、任意の文字列値がキーとして使用できます。 Web ページにも含まれています、<xref:System.Web.UI.WebControls.Button>キャッシュされたデータを期限切れにユーザーがクリックするコントロール。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]  
  
 2 番目の例では、ハンドラーを<xref:System.Web.UI.Control.Load>イベントとのハンドラーを<xref:System.Web.UI.WebControls.Button.Click>のイベント、<xref:System.Web.UI.WebControls.Button>コントロール。 <xref:System.Web.UI.Control.Load>イベント ハンドラーがキーのセット含むキャッシュ項目を作成、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>値。 <xref:System.Web.UI.WebControls.Button.Click>イベント ハンドラーと等しいキーを持つキャッシュ アイテムを削除、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>値。 キャッシュ項目が削除されると、キーに依存しているすべてのキャッシュされたデータが期限切れです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]  
  
 3 番目の例では、Northwind データベースが対話するデータ アクセス クラスを示します。 クラスでは、LINQ を使用して、Employees テーブルをクエリします。 例では、LINQ to SQL クラスを表す Northwind データベースと従業員テーブルが必要です。 詳細については、次を参照してください。[する方法: LINQ to Web プロジェクトでの SQL クラスを作成](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)です。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" /> プロパティで指定されたメソッドが <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> を返すと、<see cref="T:System.Data.Common.DbDataReader" /> プロパティが <see langword="true" /> に設定されます。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="EnablePaging">
      <MemberSignature Language="C#" Value="public bool EnablePaging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePaging" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePaging As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePaging { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnablePaging : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース コントロールが取得したデータ セットを使用するページングをサポートしているかどうかを示す値を取得または設定します。</summary>
        <value>データ ソース コントロールが取得したデータを使用するページングをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によってページング、<xref:System.Web.UI.WebControls.ObjectDataSource>設定によってコントロールが処理される、 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>、および<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>と適切なパラメーターを使用して、ビジネス オブジェクトの選択メソッドを定義します。 ときに、<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>プロパティに設定されている`true`、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>コレクションには、最初の行が要求されると要求された行の数の 2 つのパラメーターが含まれます。 これら 2 つのパラメーターがによって定義された名前は、<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>プロパティです。 `Select`メソッドは、要求された行数、指定したインデックスを開始位置を返す必要があります。 ページ サイズによっては、データが均等に分割されない可能性があります、ため、最後のページより少ない行が含まれます。 したがって、要求された行の数が返される行の実際には最大数です。  
  
 関連付けられたデータ バインド コントロールでページングが有効の場合、データ バインド コントロールを呼び出す、`Select`開始インデックスと必要とされる行の数を持つメソッドです。 また場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>プロパティが設定されて、データ バインド コントロールのページャー コントロールを表示する前にメソッドを呼び出します。 たとえば場合、<xref:System.Web.UI.WebControls.GridView>コントロールがページ サイズは 5 とで指定されているメソッドで有効になっているページング、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>プロパティは、20 を返します、ページャーで 4 つのページが表示されます。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクト。  
  
   
  
## Examples  
 次の 3 つの例では、Web ページ、分離コード ページ クラス、およびレコードの数がページに表示されるを取得するユーザーを有効にするデータ アクセス クラスを表示します。  
  
 Web ページが含まれています、<xref:System.Web.UI.WebControls.ObjectDataSource>いるコントロール<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>プロパティに設定されている`true`です。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>プロパティがクエリ内のレコードの合計数を返すメソッドの名前に設定します。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>プロパティおよび<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>プロパティは、Select メソッドで使用されるパラメーターの名前に設定されます。 ページにも含まれています、<xref:System.Web.UI.WebControls.DropDownList>コントロール。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 2 番目の例では、ハンドラーを<xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType>のイベント、<xref:System.Web.UI.WebControls.DropDownList>コントロール。 ハンドラーのセット内のコード、<xref:System.Web.UI.WebControls.GridView.PageSize%2A>プロパティをユーザーの選択します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 3 番目の例では、Customers テーブルからデータを取得するデータ アクセス クラスを示します。 という名前のメソッドが含まれている`GetSubsetOfEmployees`に割り当てられる、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 この例は、という名前のメソッドも含まれています。 `GetEmployeeCount`、に割り当てられる、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 クラスでは、LINQ を使用して、Customers テーブルのクエリを実行します。 例では、LINQ to SQL クラスを Northwind データベースと Customers テーブルを表す必要があります。 詳細については、次を参照してください。[する方法: LINQ to Web プロジェクトでの SQL クラスを作成](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)です。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterExpression : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> プロパティで指定されたメソッドの呼び出し時に適用されるフィルター式を取得または設定します。</summary>
        <value>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> プロパティで識別されるメソッドまたは関数を使用してデータを取得するときに適用されるフィルター式を表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、データのフィルター処理をサポートしている場合にのみ、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドを返します、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>オブジェクト。  
  
 使用される構文、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティは、書式指定文字列スタイル式。 フィルター式の構文は同じ構文で受け入れを<xref:System.Data.DataColumn.Expression%2A>プロパティです。 パラメーターを追加する場合、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>コレクション、書式文字列のプレース ホルダーを含めることもできます。 たとえば、含める`"{0}"`パラメーター値の代わりに式でします。 内のパラメーターのインデックスに従ってプレースは、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>コレクション。  
  
 内のパラメーターを含めることができます、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティです。 パラメーターの型が文字列型または char 型の場合は、パラメーターを単一引用符で囲みます。 パラメーターが数値型の場合、引用符は必要ありません。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>コレクションに含まれているプレース ホルダーに評価されるパラメーターが含まれています、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティです。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
> [!NOTE]
>  クライアントから受信したフィルターのパラメーター値を検証する必要があります。 ランタイムは、単にフィルター式にパラメーター値を代入しに適用されます、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>によって返されるオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。 使用している場合、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>フィルターを使用する前に、パラメーターの値を検証する必要があります、返される項目数を制限するセキュリティ対策としてのプロパティです。  
  
   
  
## Examples  
 次のコード例を使用してフィルター選択されたデータを表示する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>中間層ビジネス オブジェクトからデータを取得するコントロールと<xref:System.Web.UI.WebControls.GridView>結果を表示するコントロール。 <xref:System.Web.UI.WebControls.ObjectDataSource>としてこのデータを取得するメソッドを取得する場合にのみ、コントロールがデータをフィルター処理できる、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>オブジェクト。 このため、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティとしてデータを取得するビジネス オブジェクト メソッドを識別する、<xref:System.Data.DataSet>です。  
  
 コード例は、<xref:System.Web.UI.WebControls.TextBox>コントロール、<xref:System.Web.UI.WebControls.GridView>コントロール、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール、および**送信**ボタンをクリックします。 既定では、 <xref:System.Web.UI.WebControls.TextBox> Northwind traders 社の従業員のいずれかの名前が格納されます。 <xref:System.Web.UI.WebControls.GridView>で名前によって識別される従業員に関する情報を表示、<xref:System.Web.UI.WebControls.TextBox>です。 他の従業員のデータを取得するには、従業員の完全名を入力、 <xref:System.Web.UI.WebControls.TextBox>、をクリックし、**送信**ボタンをクリックします。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティで指定されているメソッドによって取得されるデータをフィルター処理に使用される式を指定する、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。 含まれているパラメーターに評価されるパラメーターのプレース ホルダーを使用して、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>コレクション。 この例では、パラメーターの型がスペースを含めることができる文字列型であるために、パラメーターのプレース ホルダーは単一引用符で制限されます。 パラメーターの型が数値または日付型の場合は、引用符は必要ありません。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 次のコード例では、前のコード例を使用する中間層ビジネス オブジェクトの例を示します。 このコード例は、2 つの基本クラスで構成されます。  
  
-   `EmployeeLogic`クラスは、ビジネス ロジックをカプセル化するクラスです。  
  
-   `NorthwindEmployee`を読み込んで、データ層からデータを永続化に必要な基本的な機能のみを含むモデル クラスであるクラスです。  
  
 簡略化のため、`EmployeeLogic`クラスは、データ層からデータを取得するのではなく、データの静的セットを作成します。 サンプルは、フィルター処理を示すために、Northwind traders 社の従業員の完全名を指定することに依存するためにもこの例では便利です。 稼働させるためには、コンパイルして、Web フォームのコード例が提供すると、これらのクラスを使用する必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> プロパティが設定されていますが、<see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> メソッドが <see cref="T:System.Data.DataSet" /> または <see cref="T:System.Data.DataTable" /> を返しません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As ObjectDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberSignature Language="F#" Value="member this.Filtering : System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler " Usage="member this.Filtering : System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フィルター操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.ObjectDataSource.Filtering>イベント フィルターの前にパラメーター値の検証操作を実行、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、フィルター操作を実行します。 設定して、選択した操作を取り消すことができます、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs>に`true`です。 場合にのみこのイベントは、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティを設定します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Filtering?displayProperty=nameWithType>イベントを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=nameWithType>のイベント、<xref:System.Web.UI.WebControls.ObjectDataSourceView>と関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
> [!IMPORTANT]
>  クライアントから受信したフィルターのパラメーター値を検証する必要があります。 ランタイムは、単にフィルター式にパラメーター値を代入しに適用されます、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>によって返されるオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。 使用している場合、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>フィルターを使用する前に、パラメーターの値を検証する必要があります、返される項目数を制限するセキュリティ対策としてのプロパティです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 文字列のパラメーター プレースホルダーに関連付けられたパラメーターのコレクションを取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> プロパティに含まれる任意のパラメーター プレースホルダーに関連付けられたパラメーターのセットを格納している <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、データのフィルター処理をサポートしている場合にのみ、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドを返します、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>オブジェクト。  
  
 使用される構文、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>形式の文字列形式の式です。 フィルター式の構文は同じ構文で受け入れを<xref:System.Data.DataColumn.Expression%2A>プロパティです。 パラメーターを追加する場合、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>コレクション、書式文字列のプレース ホルダーを含めることもできます。 たとえば、含める`"{0}"`パラメーター値の代わりに式でします。 内のパラメーターのインデックスに従ってプレースは、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>コレクション。  
  
 内のパラメーターを含めることができます、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティです。 パラメーターが文字列型または char 型の場合は、パラメーターを単一引用符で囲みます。 パラメーターが数値型の場合、引用符は必要ありません。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>プロパティの取得、<xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A>プロパティに含まれています、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用してフィルター選択されたデータを表示する方法を示します、<xref:System.Web.UI.WebControls.ObjectDataSource>中間層ビジネス オブジェクトからデータを取得するオブジェクトと<xref:System.Web.UI.WebControls.GridView>結果を表示するコントロール。 2 番目のコード例では、最初のコード例で使用される中間層ビジネス オブジェクトの例を示します。  
  
 次のコード例を使用してフィルター選択されたデータを表示する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>中間層ビジネス オブジェクトからデータを取得するコントロールと<xref:System.Web.UI.WebControls.GridView>結果を表示するコントロール。 <xref:System.Web.UI.WebControls.ObjectDataSource>としてこのデータを取得するメソッドを取得する場合にのみ、コントロールがデータをフィルター処理できる、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>オブジェクト。 このため、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティとしてデータを取得するビジネス オブジェクト メソッドを識別する、<xref:System.Data.DataSet>です。  
  
 コード例は、<xref:System.Web.UI.WebControls.TextBox>コントロール、<xref:System.Web.UI.WebControls.GridView>コントロール、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール、および**送信**ボタンをクリックします。 既定では、 <xref:System.Web.UI.WebControls.TextBox> Northwind traders 社の従業員のいずれかの名前が格納されます。 <xref:System.Web.UI.WebControls.GridView>で名前によって識別される従業員に関する情報を表示、<xref:System.Web.UI.WebControls.TextBox>です。 他の従業員のデータを取得する、 <xref:System.Web.UI.WebControls.TextBox>、従業員の完全な名前を入力し、クリックして、**送信**ボタンをクリックします。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティで取得されるデータをフィルター処理に使用される式を指定する、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。 含まれているパラメーターに評価されるパラメーターのプレース ホルダーを使用して、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>コレクション。 この例では、パラメーターの型がスペースを含めることができる文字列型であるために、パラメーターのプレース ホルダーは単一引用符で制限されます。 パラメーターの型が数値または日付型の場合は、引用符は必要ありません。 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>コレクションには、1 つのパラメーターが含まれています、<xref:System.Web.UI.WebControls.FormParameter>にバインドされているオブジェクト、<xref:System.Web.UI.WebControls.TextBox>コントロール。  
  
> [!IMPORTANT]
>  クライアントから受信したフィルターのパラメーター値を検証する必要があります。 ランタイムは、単にフィルター式にパラメーター値を代入しに適用されます、<xref:System.Data.DataView>によって返されるオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。 使用している場合、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>フィルターを使用する前に、パラメーターの値を検証する必要があります、返される項目数を制限するセキュリティ対策としてのプロパティです。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 次のコード例では、前のコード例を使用する中間層ビジネス オブジェクトの例を示します。 このコード例は、2 つの基本クラスで構成されます。  
  
-   `EmployeeLogic`クラスは、ビジネス ロジックをカプセル化するクラスです。  
  
-   `NorthwindEmployee`を読み込んで、データ層からデータを永続化に必要な基本的な機能のみを含むモデル クラスであるクラスです。  
  
 簡略化のため、`EmployeeLogic`クラスは、データ層からデータを取得するのではなく、データの静的セットを作成します。 サンプルは、フィルター処理を示すために、Northwind traders 社の従業員の完全名を指定することに依存するためにもこの例では便利です。 稼働させるためには、コンパイルして、Web フォームのコード例が提供すると、これらのクラスを使用する必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> プロパティを設定していますが、<see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> メソッドが <see cref="T:System.Data.DataSet" /> または <see cref="T:System.Data.DataTable" /> を返しません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="objectDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">取得するビューの名前。 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> がサポートするビューは 1 つだけであるため、<c>viewName</c> は無視されます。</param>
        <summary>データ ソース コントロールに関連付けられた名前付きデータ ソース ビューを取得します。</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> に関連付けられた <see langword="DefaultView" /> という名前の <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、1 つだけのデータ ソース ビューをサポートしています。 すべてのデータ ソース ビュー オブジェクトと同様、<xref:System.Web.UI.WebControls.ObjectDataSourceView>関連付けられているデータ ソース コントロールの機能を定義は、基になるデータ ストレージからデータを取得する必要はし、並べ替えなどの操作を実行するすべての作業を実行します挿入、削除、および更新します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A>ページ コードではなく、データ バインド コントロールによって呼び出されるメソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定された <paramref name="viewName" /> が <see langword="null" /> であるか、<see langword="DefaultView" /> 以外の値です。</exception>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="objectDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトに関連付けられたビュー オブジェクトのリストを表す名前のコレクションを取得します。</summary>
        <returns>
          <see cref="T:System.Collections.ICollection" /> に関連付けられたビューの名前が格納されている <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、という名前の 1 つのビューをサポートしている`DefaultView`、その基になるデータ。 <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A>メソッドは、この 1 つのビューの名前の 1 つの要素のコレクションを返します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A>ページ コードではなく、データ バインド コントロールによって呼び出されるメソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert();" />
      <MemberSignature Language="F#" Value="member this.Insert : unit -&gt; int" Usage="objectDataSource.Insert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> プロパティと <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" /> コレクション内のパラメーターで識別されるメソッドを呼び出して挿入操作を実行します。</summary>
        <returns>基になるデータ ストレージに挿入する行数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作を実行する、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>イベント。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>イベント パラメーターの値を確認する前に処理を実行して、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作します。 挿入操作を実行する、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトによって識別されるオブジェクトのインスタンスを作成するリフレクションを使用して、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティです。 によって識別されるメソッドを呼び出して、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティ、関連付けられているいずれかを使用して<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>プロパティです。 後に、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作が完了すると、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>イベント。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>イベントを戻り値、出力パラメーターと、例外を調べると、後続の処理を実行します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>メソッドからデリゲートを<xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A>のメソッド、<xref:System.Web.UI.WebControls.ObjectDataSourceView>と関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 パラメーターの結合、オブジェクトの有効期間、およびメソッドの解決に関する詳細については、次を参照してください。<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>です。  
  
## <a name="data-bound-controls"></a>データ バインド コントロール  
 ときに、<xref:System.Web.UI.WebControls.ObjectDataSource>など、データ バインド コントロールにオブジェクトが関連付けられている、<xref:System.Web.UI.WebControls.GridView>コントロール必要はありませんを呼び出して、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>ページ コードからメソッドです。 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>代わりにメソッドが、データ バインド コントロールが直接呼び出されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Inserted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" /> 操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>戻り値または出力パラメーターの値を確認する場合、または後に例外がスローされたかどうかを決定するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作が完了します。 戻り値、出力パラメーター、および例外処理のプロパティから使用できますが、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Inserting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" /> 操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 、パラメーターの値を検証する、または前に、のパラメーターの値を変更する、アプリケーションに固有である追加の初期化を実行するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、挿入操作を実行します。 パラメーターとして使用できる、<xref:System.Collections.IDictionary>によってアクセスされるコレクション、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>によって公開される、プロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>オブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つオブジェクトと<xref:System.Web.UI.WebControls.DetailsView>データを挿入するコントロール。 2 番目のコード例では、最初のコード例で使用される中間層ビジネス オブジェクトの例を示します。  
  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つコントロールと<xref:System.Web.UI.WebControls.DetailsView>データを挿入するコントロール。 最初に、<xref:System.Web.UI.WebControls.DetailsView>新しい表示`NorthwindEmployee`レコードを自動的に生成されたと共に**挿入**ボタンをクリックします。 フィールドにデータを入力した後、<xref:System.Web.UI.WebControls.DetailsView>コントロール をクリックして、**挿入**ボタンをクリックします。 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティを識別するメソッドは、挿入操作を実行します。  
  
 この例では、`UpdateEmployeeInfo`の挿入を実行するメソッドが使用されます。 ただし、必要な、`NorthwindEmployee`データを挿入するパラメーターです。 コレクションではこのため、文字列の<xref:System.Web.UI.WebControls.DetailsView>コントロール パスに自動的には不十分です。 `NorthwindEmployeeInserting`デリゲートは、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler>を処理するオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>イベントの前に、入力パラメーターを操作することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作が実行されます。 `UpdateEmployeeInfo`メソッドが必要です、`NorthwindEmployee`をパラメーターとしてオブジェクトのいずれかの文字列のコレクションを使用して作成されに追加、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>パラメーター名を使用してコレクション (`ne`) をメソッドが必要です。 型およびで利用するために設計されていないメソッドを持つデータ ソースとして既存の中間層オブジェクトを使用する場合は、上記のような手順を実行する可能性があります、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 ときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作を実行すると、メソッドによって識別される、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティが呼び出されます。 場合、`Insert`オブジェクトのメソッドがメソッド シグネチャのパラメーターが含まれていますが、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>コレクションは、メソッド シグネチャのパラメーターと一致する名前を持つパラメーターを含める必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>メソッドが正常に完了します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]  
  
 次のコード例では、前のコード例を使用する中間層ビジネス オブジェクトの例を示します。 このコード例は、2 つの基本クラスで構成されます。  
  
-   `EmployeeLogic`クラスは、ビジネス ロジックをカプセル化するステートレスなクラスです。  
  
-   `NorthwindEmployee`を読み込んで、データ層からデータを永続化に必要な基本的な機能のみを含むモデル クラスであるクラスです。  
  
 追加の`NorthwindDataException`便宜クラスを提供します。 稼働させるためには、コンパイルして、これらのクラスを使用する必要があります。 `UpdateEmployeeInfo`メソッドは完全に実装されていませんはないデータを挿入する、Northwind traders というデータベースにこの例を試す場合にようにします。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertMethod">
      <MemberSignature Language="C#" Value="public string InsertMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールがデータを挿入するために呼び出すメソッドまたは関数の名前を取得または設定します。</summary>
        <value>データを挿入するために <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> が使用するメソッドまたは関数の名前を表す文字列。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ビジネス オブジェクトは、バッチ内ではなく、一度に 1 レコードずつデータを挿入すると見なされます。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>オブジェクト。  
  
## <a name="object-lifetime"></a>オブジェクトの有効期間  
 によって識別されるメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティは、インスタンス メソッドを使用できますか、 `static` (`Shared` Visual Basic で) メソッドです。 インスタンス メソッドである場合、ビジネス オブジェクトは作成され破棄たびに指定されたメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティが呼び出されます。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>と<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>する前に、ビジネス オブジェクトを使用するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティが呼び出されます。 処理することも、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>で指定されているメソッドの後に発生するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティが呼び出されます。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable> 、インターフェイス、<xref:System.IDisposable.Dispose%2A>オブジェクトが破棄される前に、メソッドが呼び出されます。 メソッドの場合`static`(`Shared` Visual Basic で)、ビジネス オブジェクトが作成されないこと、および処理することはできません、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、および<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント。  
  
## <a name="parameter-merging"></a>パラメーターのマージ  
 パラメーターに追加されます、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 3 つのソースからのコレクション。  
  
-   データ バインド コントロールから、実行時にします。  
  
-   `InsertParameters`要素を宣言します。  
  
-   `Inserting`メソッド、プログラムでします。  
  
 データ バインド コントロールから生成されるすべてのパラメーターを追加する最初に、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>コレクション。 たとえば場合、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールにバインドする、<xref:System.Web.UI.WebControls.GridView>列を持つコントロールを`Name`と`Number`、パラメーターの`Name`と`Number`コレクションに追加されます。 これらのパラメーターのデータ型は`string`します。 次に記載されているパラメーター、`InsertParameters`要素が追加されます。 場合のパラメーター、`InsertParameters`になっているパラメーターと同じ名前で要素が見つかる、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>で指定されているパラメーターと一致する、既存のパラメーターのコレクションが変更された、`InsertParameters`要素。 通常、パラメーターのデータの種類の変更に使用されます。 最後に、プログラムで追加および削除できます内のパラメーター、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>イベントが発生する前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>メソッドを実行します。 メソッドは、パラメーターは、マージ後に解決されます。 メソッドの解決は、次のセクションで説明しています。  
  
> [!IMPORTANT]
>  クライアントから受信したパラメーター値を検証する必要があります。 ランタイムは、パラメーターの値に、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティです。  
  
## <a name="method-resolution"></a>メソッドの解決  
 ときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>メソッドは、宣言的に作成されたパラメーターのデータ バインド コントロールからのデータ フィールド、`InsertParameters`要素、およびパラメーターで追加された、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>イベント ハンドラーがすべてマージします。 (詳細については、前のセクションを参照してください)。<xref:System.Web.UI.WebControls.ObjectDataSource>に呼び出すメソッドを検索するオブジェクトを試みます。 指定されている名前を持つ 1 つまたは複数のメソッドの最初に、検索、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティです。 一致するものが見つからない場合、<xref:System.InvalidOperationException>例外がスローされます。 一致が見つかった場合、一致するパラメーター名が検索されます。 たとえば、によって指定される型、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティという 2 つのメソッドは、`InsertARecord`です。 1 つ`InsertARecord`1 つのパラメーターを持つ`ID`、および、その他の`InsertARecord`2 つのパラメーターを持ち`Name`と`Number`です。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>コレクションという名前の 1 つだけのパラメーターには、 `ID`、`InsertARecord`メソッドだけを`ID`パラメーターと呼びます。 パラメーターの型は、メソッドを解決するのにはチェックされません。 パラメーターの順序は重要ではありません。  
  
 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティを設定すると、メソッドが別の方法で解決します。 <xref:System.Web.UI.WebControls.ObjectDataSource>で指定されている名前を持つメソッドを検索、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>を型の 1 つのパラメーターを受け取るプロパティがで指定された、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティです。 この場合、パラメーターの名前は関係ありません。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つオブジェクトと<xref:System.Web.UI.WebControls.DetailsView>データを挿入するコントロール。 2 番目のコード例では、最初のコード例で使用される中間層ビジネス オブジェクトの例を示します。  
  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つコントロールと<xref:System.Web.UI.WebControls.DetailsView>データを挿入するコントロール。 最初に、<xref:System.Web.UI.WebControls.DetailsView>新しい表示`NorthwindEmployee`レコードを自動的に生成されたと共に**挿入**ボタンをクリックします。 フィールドにデータを入力した後、<xref:System.Web.UI.WebControls.DetailsView>コントロール をクリックして、**挿入**ボタンをクリックします。 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティを識別するメソッドは、挿入操作を実行します。  
  
 この例では、`UpdateEmployeeInfo`の挿入を実行するメソッドが使用されます。 ただし、必要な、`NorthwindEmployee`データを挿入するパラメーターです。 コレクションではこのため、文字列の<xref:System.Web.UI.WebControls.DetailsView>コントロール パスに自動的には不十分です。 `NorthwindEmployeeInserting`デリゲートは、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler>を処理するオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>イベントの前に、入力パラメーターを操作することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作が実行されます。 `UpdateEmployeeInfo`メソッドが必要です、`NorthwindEmployee`をパラメーターとしてオブジェクトのいずれかの文字列のコレクションを使用して作成されに追加、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>パラメーター名を使用してコレクション (`ne`) をメソッドが必要です。 型およびで利用するために設計されていないメソッドを持つデータ ソースとして既存の中間層オブジェクトを使用する場合は、上記のような手順を実行する可能性があります、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 ときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作を実行すると、メソッドによって識別される、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティが呼び出されます。 場合、`Insert`オブジェクトのメソッドがメソッド シグネチャのパラメーターが含まれていますが、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>コレクションは、メソッド シグネチャのパラメーターと一致する名前を持つパラメーターを含める必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>メソッドが正常に完了します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]  
  
 次のコード例では、前のコード例を使用する中間層ビジネス オブジェクトの例を示します。 このコード例は、2 つの基本クラスで構成されます。  
  
-   `EmployeeLogic`クラスは、ビジネス ロジックをカプセル化するステートレスなクラスです。  
  
-   `NorthwindEmployee`を読み込んで、データ層からデータを永続化に必要な基本的な機能のみを含むモデル クラスであるクラスです。  
  
 追加の`NorthwindDataException`便宜クラスを提供します。 稼働させるためには、コンパイルして、これらのクラスを使用する必要があります。 `UpdateEmployeeInfo`メソッドは完全に実装されていませんはないデータを挿入する、Northwind traders というデータベースにこの例を試す場合にようにします。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> プロパティによって使用されるパラメーターを格納するパラメーター コレクションを取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> プロパティで識別されたメソッドによって使用されるパラメーターを格納している <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名前と型のパラメーターに含まれている、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>コレクションは、名前とされているパラメーターの型と一致する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティの署名。 パラメーター名は大文字小文字を区別します。 など、パラメーターを提供するデータ バインド コントロールを使用する場合、<xref:System.Web.UI.WebControls.GridView>と<xref:System.Web.UI.WebControls.DetailsView>、コントロール、<xref:System.Web.UI.WebControls.ObjectDataSource>制御されているパラメーターを使用して、コレクションで明示的に指定されているすべてのパラメーターを自動的にマージします。データ バインドされたコントロールによって提供されます。 データ バインド コントロールが常に、パラメーターとしてを指定するためには、このことは重要<xref:System.String>型、およびメソッドのシグネチャに数値または日付型の場合は、する必要があります明示的に含まれる内のパラメーター、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>を正しい型のコレクション。 それ以外の場合、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールはコレクション内のパラメーターで定義されている型に従ったパラメーターをキャストしようとしています。 詳細については、次を参照してください。 [、ObjectDataSource コントロールでのパラメーターの使用](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)です。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>プロパティの取得、<xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A>プロパティに含まれています、<xref:System.Web.UI.WebControls.ObjectDataSourceView>と関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 パラメーターの結合、オブジェクトの有効期間、およびメソッドの解決に関する詳細については、次を参照してください。<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>です。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つオブジェクトと<xref:System.Web.UI.WebControls.DetailsView>データを挿入するコントロール。 2 番目のコード例の実装例を提供する、`Insert`最初のコード例で使用されるメソッド。  
  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つコントロールと<xref:System.Web.UI.WebControls.DetailsView>データを挿入するコントロール。 最初に、 <xref:System.Web.UI.WebControls.DetailsView> 、新しいデータを入力するテキスト ボックスを表示`NorthwindEmployee`レコードを自動的に生成されたと共に**挿入**ボタンをクリックします。 フィールドにデータを入力した後、<xref:System.Web.UI.WebControls.DetailsView>コントロール をクリックして、**挿入**ボタンをクリックします。 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティを識別するメソッドは、挿入操作を実行します。  
  
 クリックした場合、**挿入**で指定されているメソッドを使用して、ボタン、操作が実行される、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティおよび任意のパラメーターで指定されている、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>コレクション。 このコード例では、1 つのパラメーターがで指定された、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>上司の ID に対応するコレクション ID を表示する場合でもこれは、<xref:System.Web.UI.WebControls.GridView.Rows%2A>のコレクション、<xref:System.Web.UI.WebControls.DetailsView>として制御、<xref:System.Web.UI.WebControls.BoundField>オブジェクトを文字列として渡される、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 明示的に追加することによって、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>使用して、コレクション、<xref:System.Web.UI.WebControls.Parameter.Type%2A>プロパティに設定、<xref:System.TypeCode.Int32>値を渡すことによって適切、<xref:System.Web.UI.WebControls.ObjectDataSource>としてメソッドに、<xref:System.Int32>文字列ではなく、します。  
  
 ときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作を実行すると、メソッドによって識別される、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティが呼び出されます。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>オブジェクトのメソッドがメソッド シグネチャのパラメーターが含まれていますが、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>コレクションは、メソッド シグネチャのパラメーターに一致する名前を持つパラメーターを含める必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>メソッドが正常に完了します。  
  
> [!IMPORTANT]
>  クライアントから受信したパラメーター値を検証する必要があります。 ランタイムは、パラメーターの値に、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティです。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/objds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/objds8vb.aspx#1)]  
  
 次のコード例の実装例を提供する、`Insert`前のコード例を使用するメソッド。 `InsertNewEmployeeWrapper`メソッドが追加、`EmployeeLogic`で提供されている中間層オブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource>をより簡単に操作するオブジェクトを有効にするクラスの概要、<xref:System.Web.UI.WebControls.ObjectDataSource>せず、実際に大幅な書き直しの Web シナリオでのコントロールビジネス ロジック。  
  
 例を実行する必要があります、`NorthwindEmployee`で提供されるクラス、<xref:System.Web.UI.WebControls.ObjectDataSource>クラスの概要です。 この例は、接続する方法のみを示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクト メソッドにパラメーターを使用して、新しいデータベース レコードのデータを取得します。 例が、データベースにレコードを追加できません、`Save`のメソッド、`NorthwindEmployee`クラスには、データベースを更新するコードが含まれていません。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_8#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/northwindemployee8.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/northwindemployee8.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="objectDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">保存したコントロールのビューステートの値を格納しているオブジェクト。</param>
        <summary>以前に保存した <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールのビュー ステートを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、主に、.NET Framework インフラストラクチャによって使用され、コードから直接使用するものではありません。 ただし、コントロールの開発者は、カスタム サーバー コントロールがそのビューステートを復元する方法を指定するには、このメソッドをオーバーライドすることができます。 詳細については、次を参照してください。 [ASP.NET 状態管理の概要](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce)です。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.LoadViewState%2A>メソッドはの以前に保存したビューステートの読み込みに使用、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" />を拡張するときにメソッドが、主にコントロールの開発者によって使用される、<see cref="T:System.Web.UI.WebControls.ObjectDataSource" />コントロール。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MaximumRowsParameterName">
      <MemberSignature Language="C#" Value="public string MaximumRowsParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MaximumRowsParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumRowsParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MaximumRowsParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumRowsParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("maximumRows")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース ページングをサポートするために取得するレコード数を示す際に使用する、ビジネス オブジェクトのデータ取得メソッドのパラメーター名を取得または設定します。</summary>
        <value>取得するレコード数を示すために使用する <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> パラメーターの名前。 既定値は<c>"maximumRows"</c>です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>プロパティは、データ ソース ページングをサポートするために使用します。 ページングをサポートする方法について、<xref:System.Web.UI.WebControls.ObjectDataSource>を制御しを参照してください<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>です。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
   
  
## Examples  
 次の 3 つの例では、Web ページ、分離コード ページ クラス、およびレコードの数がページに表示されるを取得するユーザーを有効にするデータ アクセス クラスを表示します。  
  
 Web ページが含まれています、<xref:System.Web.UI.WebControls.ObjectDataSource>いるコントロール<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>プロパティに設定されている`true`です。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>プロパティがクエリ内のレコードの合計数を返すメソッドの名前に設定します。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>プロパティおよび<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>プロパティは、Select メソッドで使用されるパラメーターの名前に設定されます。 ページにも含まれています、<xref:System.Web.UI.WebControls.DropDownList>コントロール。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 2 番目の例では、ハンドラーを<xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType>のイベント、<xref:System.Web.UI.WebControls.DropDownList>コントロール。 ハンドラーのセット内のコード、<xref:System.Web.UI.WebControls.GridView.PageSize%2A>プロパティをユーザーの選択します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 3 番目の例では、Customers テーブルからデータを取得するデータ アクセス クラスを示します。 という名前のメソッドが含まれている`GetSubsetOfEmployees`に割り当てられる、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 この例は、という名前のメソッドも含まれています。 `GetEmployeeCount`、に割り当てられる、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 クラスでは、LINQ を使用して、Customers テーブルのクエリを実行します。 例では、LINQ to SQL クラスを Northwind データベースと Customers テーブルを表す必要があります。 詳細については、次を参照してください。[する方法: LINQ to Web プロジェクトでの SQL クラスを作成](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)です。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="ObjectCreated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectCreated As ObjectDataSourceObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceObjectEventHandler ^ ObjectCreated;" />
      <MemberSignature Language="F#" Value="member this.ObjectCreated : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " Usage="member this.ObjectCreated : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> プロパティで識別されるオブジェクトが作成された後に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>ビジネス オブジェクトで他のメソッドを呼び出すイベントのプロパティを設定またはされる前に、ビジネス オブジェクトに固有の他の初期化を実行、<xref:System.Web.UI.WebControls.ObjectDataSource>オブジェクト メソッドを呼び出して、ビジネス オブジェクト データをデータの操作を実行するには. オブジェクトへの参照がアクセス、<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>によって公開される、プロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>オブジェクト。  
  
 かどうか、データ操作を実行する識別されるメソッドは`static`(`Shared` Visual Basic で)、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>と<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>イベントが発生することはありません。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
      </Docs>
    </Member>
    <Member MemberName="ObjectCreating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectCreating As ObjectDataSourceObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceObjectEventHandler ^ ObjectCreating;" />
      <MemberSignature Language="F#" Value="member this.ObjectCreating : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " Usage="member this.ObjectCreating : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> プロパティで識別されるオブジェクトが作成される前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 かどうか、データ操作を実行する識別されるメソッドは`static`(`Shared` Visual Basic で)、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>と<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>イベントが発生することはありません。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールが自動的にリフレクションを使用してそのインスタンスを作成するビジネス オブジェクトの既定のコンス トラクターを呼び出します。 処理、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>イベントを明示的に別のコンス トラクターを呼び出すし、結果をオブジェクトのインスタンスを設定、 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> 、関連するプロパティ<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>オブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つオブジェクトと<xref:System.Web.UI.WebControls.GridView>情報を表示するコントロール。 2 番目のコード例では、最初のコード例で使用される中間層のビジネス オブジェクトを提供します。  
  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つコントロールと<xref:System.Web.UI.WebControls.GridView>情報を表示するコントロール。 Web ページが実行されるすべてのデータ操作に時間やといったリソース) を作成する非常に負荷が高くビジネス オブジェクトを操作する場合があります。 負荷の高いオブジェクトを使用する方法の 1 つは、1 回、そのインスタンスを作成して、それを作成および操作するたびにデータを破棄する代わりに後続の操作をキャッシュすることです。  
  
> [!NOTE]
>  実稼働アプリケーションでは、複数の要求可能性があります最終的に、同じインスタンスを同時に使用します。 そのため、オブジェクトは、スレッド セーフな方法で実装する必要があります。  
  
 このコード例では、このパターンを示します。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>イベントを最初に、オブジェクトのキャッシュをチェックし、いずれかが既にキャッシュされていない場合にのみ、オブジェクトのインスタンスを作成します。 次に、処理、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベントを破棄するのではなく、将来使用するためのビジネス オブジェクトをキャッシュします。 このコード例では、<xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=nameWithType>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs>にオブジェクトが設定されている`true`を送信するため、<xref:System.Web.UI.WebControls.ObjectDataSource>を呼び出していない<xref:System.IDisposable.Dispose%2A>オブジェクトのメソッドです。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]  
  
 次のコード例では、前のコード例を使用する中間層ビジネス オブジェクトの例を提供します。 コード例は、基本的なビジネス オブジェクトによって定義された、`EmployeeLogic`クラスは、ビジネス ロジックをカプセル化するステートフルなクラスです。 稼働させるためには、このコードをライブラリとしてコンパイルして、ASP.NET ページ (.aspx ファイル) からこれらのクラスを使用する必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnObjectCreating(System.Web.UI.WebControls.ObjectDataSourceEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      </Docs>
    </Member>
    <Member MemberName="ObjectDisposing">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectDisposing As ObjectDataSourceDisposingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceDisposingEventHandler ^ ObjectDisposing;" />
      <MemberSignature Language="F#" Value="member this.ObjectDisposing : System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler " Usage="member this.ObjectDisposing : System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> プロパティで識別されるオブジェクトが破棄される前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベントは、ビジネス オブジェクトのインスタンスが破棄される前に常に発生します。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable> 、インターフェイス、<xref:System.IDisposable.Dispose%2A>このイベントが発生した後にメソッドが呼び出されます。  
  
 処理、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>オブジェクトで他のメソッドを呼び出すイベントのプロパティを設定またはクリーンアップ操作を実行、オブジェクトが破棄される前に、オブジェクトに固有であります。 オブジェクトへの参照がアクセス、<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>によって公開される、プロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>オブジェクト。  
  
 使用すると、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールと LINQ to SQL クラスには、イベントにハンドラー内のデータ コンテキスト クラスの破棄を取り消す必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント。 この手順が必要な LINQ to SQL は、遅延実行をサポートしているため、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、Select 操作の後にデータ コンテキストを破棄しようとしています。  
  
 イベントを処理する方法の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つオブジェクトと<xref:System.Web.UI.WebControls.GridView>情報を表示するコントロール。 2 番目のコード例では、最初のコード例で使用される中間層のビジネス オブジェクトを提供します。  
  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトを持つコントロールと<xref:System.Web.UI.WebControls.GridView>情報を表示するコントロール。 Web ページが実行されるすべてのデータ操作に時間やといったリソース) を作成する非常に負荷が高くビジネス オブジェクトを操作する場合があります。 負荷の高いオブジェクトを使用する方法の 1 つは、1 回、そのインスタンスを作成して、それを作成および操作するたびにデータを破棄する代わりに後続の操作をキャッシュすることです。 この例では、このパターンを示します。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>イベントを最初に、オブジェクトのキャッシュをチェックし、いずれかが既にキャッシュされていない場合のみ、そのインスタンスを作成します。 次に、処理、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベントを破棄するのではなく、将来使用するためのビジネス オブジェクトをキャッシュします。 このコード例では、<xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=nameWithType>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs>にオブジェクトが設定されている`true`を送信するため、<xref:System.Web.UI.WebControls.ObjectDataSource>を呼び出していない、<xref:System.IDisposable.Dispose%2A>オブジェクトのメソッドです。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]  
  
 次のコード例では、前のコード例を使用する中間層ビジネス オブジェクトの例を提供します。 コード例は、基本的なビジネス オブジェクトによって定義された、`EmployeeLogic`クラスは、ビジネス ロジックをカプセル化するステートフルなクラスです。 稼働させるためには、このコードをライブラリとしてコンパイルして、ASP.NET ページ (.aspx ファイル) からこれらのクラスを使用する必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]  
  
 次の例は、処理する方法を示しています、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベントを使用する場合、 <xref:System.Web.UI.WebControls.ObjectDataSource> LINQ to SQL クラスを持つコントロール。  
  
```vb  
Public Sub ExampleObjectDisposing(ByVal sender As Object, _   
        ByVal e As ObjectDataSourceDisposingEventArgs)  
    e.Cancel = True  
End Sub  
```  
  
```csharp  
public void ExampleObjectDisposing(object sender,   
        ObjectDataSourceDisposingEventArgs e)  
{  
    e.Cancel = true;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OldValuesParameterFormatString : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="Delete" /> メソッドまたは <see langword="Update" /> メソッドに渡される元の値のパラメーター名に適用される書式指定文字列を取得または設定します。</summary>
        <value>
          <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> メソッドまたは <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> メソッドに渡される <paramref name="oldValues" /> パラメーターまたは key パラメーターの名前に適用される書式指定文字列を表す文字列。 既定値は<c>"{0}"</c>フィールド名は、パラメーター名を意味します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>で識別されるものなどの主キーのみをプロパティが適用される、`DataKeyNames`プロパティ、または削除、データ バインド コントロールの更新シナリオと場所、<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>プロパティに設定されている、 <xref:System.Web.UI.ConflictOptions.CompareAllValues>値、および元の値のセットは、対応するデータのメソッドに渡されます。  
  
 変更する可能性があります、2 つの一般的なシナリオは、次のとおり、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>プロパティ。  
  
-   古い値と新しい値に更新プログラムを区別するためにプロパティを変更する可能性があります。 ときに、<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>プロパティに設定されている、 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 、パラメーターの値と元の新しい値の両方に追加する、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクション。 書式指定文字列をなしの各データ フィールドの同じ名前の 2 つのパラメーターが作成されます。 元の値パラメーターの名前を変更すると、競合を検出し、キーの値を比較する元のデータ ソースへのデータを比較できます。  
  
-   一部のビジュアル デザイナーでは、元の値とキーの特定の名前付けスキームを実装します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="objectDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Web.UI.Page.LoadComplete" /> コントロールを格納するページに <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> イベント ハンドラーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.OnInit%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合、<see cref="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" />を呼び出して派生クラスでメソッドが必ず、<see cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />デリゲートを登録するための基本クラスのメソッドは、イベントを受信します。</para>
        </block>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ParsingCulture">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ParsingCulture ParsingCulture" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ParsingCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ParsingCulture As ParsingCulture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParsingCulture ParsingCulture { System::Web::UI::WebControls::ParsingCulture get(); void set(System::Web::UI::WebControls::ParsingCulture value); };" />
      <MemberSignature Language="F#" Value="member this.ParsingCulture : System.Web.UI.WebControls.ParsingCulture with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ParsingCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParsingCulture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" /> で示される型のオブジェクトを構築するために文字列値を実際のプロパティ型に変換するときに使用するカルチャ情報を示す値を取得または設定します。</summary>
        <value>カルチャ情報。 既定値は <see cref="F:System.Web.UI.WebControls.ParsingCulture.Invariant" /> です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="objectDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールの状態を保存します。</summary>
        <returns>サーバー コントロールの現在のビューステートを返します。コントロールに関連付けられているビューステートがない場合は <see langword="null" /> を返します。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Function Select () As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; System.Collections.IEnumerable" Usage="objectDataSource.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> コレクション内のパラメーターを持つ <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" /> プロパティで識別されるメソッドを呼び出して、基になるデータ ストレージからデータを取得します。</summary>
        <returns>データ行の <see cref="T:System.Collections.IEnumerable" /> リスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定されたメソッドがメソッド シグネチャを持つ可能性がありますが、返す必要がありますか、または次の表に示す種類のいずれかから派生する、<xref:System.Web.UI.WebControls.ObjectDataSource>それを呼び出すことが正常に制御します。  
  
|戻り値の型|アクション|  
|-----------------|------------|  
|<xref:System.Collections.IEnumerable>|<xref:System.Collections.IEnumerable>によって返される、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。|  
|<xref:System.Data.DataTable>|A<xref:System.Data.DataView>を使用して作成された、<xref:System.Data.DataTable>によって返されると、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。|  
|<xref:System.Data.DataView>|<xref:System.Data.DataView>によって返される、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。|  
|<xref:System.Data.DataSet>|最初の<xref:System.Data.DataTable>の<xref:System.Data.DataSet>の抽出元と<xref:System.Data.DataView>が作成され、によって返される、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。|  
|<xref:System.Object>|オブジェクトは、1 つの要素にラップされて<xref:System.Collections.IEnumerable>コレクションから返されると、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。|  
  
 によって識別されるメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティは、インスタンス メソッドを使用できますか、 `static` (`Shared` Visual Basic で) メソッドです。 インスタンス メソッドである場合、ビジネス オブジェクトは作成され破棄たびに、メソッドで指定されている、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティが呼び出されると、同じインスタンスがで指定されているメソッドの呼び出しに使用する点を除いて、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティおよび指定されているメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>プロパティです。 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドを返します、<xref:System.Collections.IEnumerable>インターフェイスです。 ただし、キャッシュおよびフィルター処理シナリオには、戻り値があります、<xref:System.Data.DataSet>オブジェクト。 中に、<xref:System.Data.DataSet>クラスを実装しません、 <xref:System.Collections.IEnumerable> 、インターフェイス、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールが自動的に既定値を抽出<xref:System.Data.DataView>コントロールを実装する、<xref:System.Collections.IEnumerable>です。  
  
 前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>操作を実行する、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベント。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベント パラメーターの値を確認する前に処理を実行して、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>操作します。 データの取得操作を実行する、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトによって識別されるオブジェクトのインスタンスを作成するリフレクションを使用して、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティです。 によって識別されるメソッドを呼び出して、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ、関連付けられているいずれかを使用して<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>プロパティです。 後に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>操作が完了すると、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>イベント。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>イベントを戻り値、出力パラメーターと、例外を調べると、後続の処理を実行します。  
  
 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティから返される、 <xref:System.Data.DataSet>、 <xref:System.Data.DataTable>、または<xref:System.Data.DataView>オブジェクトとキャッシュ機能が有効になっている、<xref:System.Web.UI.WebControls.ObjectDataSource>からデータを取得し、中にキャッシュにデータを保存、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>操作します。 キャッシュが作成、破棄、または更新の組み合わせで指定されているキャッシュの動作に基づいて、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティです。  
  
 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティから返される、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>オブジェクト、および<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティが指定されて、指定されたいずれかと評価される<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>プロパティとその結果のフィルターの適用中にデータの一覧に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>操作します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドからデリゲートを<xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>のメソッド、<xref:System.Web.UI.WebControls.ObjectDataSourceView>と関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 パラメーターの結合、オブジェクトの有効期間、およびメソッドの解決に関する詳細については、次を参照してください。<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>です。  
  
## <a name="data-bound-controls"></a>データ バインド コントロール  
 ときに、<xref:System.Web.UI.WebControls.ObjectDataSource>など、データ バインド コントロールにコントロールが関連付けられている、<xref:System.Web.UI.WebControls.GridView>コントロール必要はありませんを呼び出して、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>ページ コードからメソッドです。 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>代わりにメソッドが、データ バインド コントロールが直接呼び出されます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Web.UI.WebControls.ObjectDataSource>」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCountMethod">
      <MemberSignature Language="C#" Value="public string SelectCountMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCountMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCountMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCountMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCountMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行数を取得するために <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールが呼び出すメソッドまたは関数の名前を取得または設定します。</summary>
        <value>行数を取得するために <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> が使用するメソッドまたは関数の名前を表す文字列。 このメソッドは、整数 (<see cref="T:System.Int32" />) を返す必要があります。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>プロパティは、データ ソース ページングをサポートするために、行の合計数を取得するために使用するビジネス オブジェクトのメソッドを識別します。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>場合にのみ、プロパティが評価される、<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>プロパティに設定されている`true`です。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 ページングをサポートする方法について、<xref:System.Web.UI.WebControls.ObjectDataSource>を制御しを参照してください<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>です。  
  
   
  
## Examples  
 次の 3 つの例では、Web ページ、分離コード ページ クラス、およびレコードの数がページに表示されるを取得するユーザーを有効にするデータ アクセス クラスを表示します。  
  
 Web ページが含まれています、<xref:System.Web.UI.WebControls.ObjectDataSource>いるコントロール<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>プロパティに設定されている`true`です。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>プロパティがクエリ内のレコードの合計数を返すメソッドの名前に設定します。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>プロパティおよび<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>プロパティは、Select メソッドで使用されるパラメーターの名前に設定されます。 ページにも含まれています、<xref:System.Web.UI.WebControls.DropDownList>コントロール。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 2 番目の例では、ハンドラーを<xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType>のイベント、<xref:System.Web.UI.WebControls.DropDownList>コントロール。 ハンドラーのセット内のコード、<xref:System.Web.UI.WebControls.GridView.PageSize%2A>プロパティをユーザーの選択します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 3 番目の例では、Customers テーブルからデータを取得するデータ アクセス クラスを示します。 という名前のメソッドが含まれている`GetSubsetOfEmployees`に割り当てられる、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 この例は、という名前のメソッドも含まれています。 `GetEmployeeCount`、に割り当てられる、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 クラスでは、LINQ を使用して、Customers テーブルのクエリを実行します。 例では、LINQ to SQL クラスを Northwind データベースと Customers テーブルを表す必要があります。 詳細については、次を参照してください。[する方法: LINQ to Web プロジェクトでの SQL クラスを作成](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)です。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanRetrieveTotalRowCount" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Selected : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>戻り値または出力パラメーターの値を確認する場合、または後に例外がスローされたかどうかを決定するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>操作が完了します。 戻り値、出力パラメーター、および例外処理のプロパティから使用できますが、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次の 3 つの例では、Web ページ、分離コード ページ クラス、およびデータ アクセス クラスを取得し、Northwind データベースの Employees テーブルのレコードを更新するユーザーを有効にすることを示します。  
  
 最初の例では、2 つを含む Web ページ<xref:System.Web.UI.WebControls.ObjectDataSource>、コントロール、<xref:System.Web.UI.WebControls.DropDownList>コントロール、および<xref:System.Web.UI.WebControls.DetailsView>コントロール。 最初の<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールと<xref:System.Web.UI.WebControls.DropDownList>取得して、データベースから従業員の名前を表示するコントロールを使用します。 2 番目<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールと<xref:System.Web.UI.WebControls.DetailsView>コントロールは、取得、表示、およびユーザーが選択されている従業員レコードからデータを変更するために使用します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 2 番目の例のハンドラーを示しています、<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>と<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベント。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected>イベント ハンドラーは Employee テーブルから取得されたデータを格納しているオブジェクトをシリアル化します。 シリアル化されたオブジェクトは、ビュー ステートに格納されます。 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベント ハンドラーが更新されるデータのレコードの元のデータを格納しているビュー ステート内のオブジェクトを逆シリアル化します。 元のデータを格納しているオブジェクトは、Update メソッドにパラメーターとして渡されます。 別のプロセスによってデータが変更されたかどうかを確認するために使用できるように、元のデータをデータベースに渡す必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 3 番目の例では、Northwind データベースが対話するデータ アクセス クラスを示します。 クラスでは、LINQ を使用してクエリを実行し、従業員テーブルを更新します。 例では、LINQ to SQL クラスを表す Northwind データベースと従業員テーブルが必要です。 詳細については、次を参照してください。[する方法: LINQ to Web プロジェクトでの SQL クラスを作成](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)です。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As ObjectDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler " Usage="member this.Selecting : System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 、パラメーターの値を検証する、または前に、のパラメーターの値を変更する、アプリケーションに固有である追加の初期化を実行するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールはデータの取得操作を実行します。 パラメーターとして使用できる、<xref:System.Collections.IDictionary>によってアクセスされるコレクション、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>によって公開される、プロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>オブジェクト。  
  
 このイベントは 1 回の呼び出しに対して 2 回発行されることができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>プロパティを設定します。 <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs>オブジェクトはデータを取得または数を取得する選択が呼び出されたかどうかを決定するために使用します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public string SelectMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データを取得するために <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールが呼び出すメソッドまたは関数の名前を取得または設定します。</summary>
        <value>データを取得するために <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> が使用するメソッドまたは関数の名前を表す文字列。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定したメソッドは、任意のメソッド シグネチャを持つことができますが、次の表に示すように型のいずれかを返す必要が、<xref:System.Web.UI.WebControls.ObjectDataSource>それを呼び出すことが正常に制御します。  
  
|戻り値の型|アクション|  
|-----------------|------------|  
|<xref:System.Collections.IEnumerable>|<xref:System.Collections.IEnumerable>によって返される、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。|  
|<xref:System.Data.DataTable>|A<xref:System.Data.DataView>を使用して作成されて、<xref:System.Data.DataTable>によって返されると、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。|  
|<xref:System.Data.DataView>|A<xref:System.Data.DataView>によって返される、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。|  
|<xref:System.Data.DataSet>|最初の<xref:System.Data.DataTable>の<xref:System.Data.DataSet>の抽出元と<xref:System.Data.DataView>が作成され、によって返される、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。|  
|<xref:System.Object>|オブジェクトは、1 つの要素にラップされて<xref:System.Collections.IEnumerable>コレクションから返されると、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドです。|  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 使用すると、<xref:System.Web.UI.WebControls.ObjectDataSource>クラスを削除するか、データを更新するのパラメーター名が構成されていることを確認してください、<xref:System.Web.UI.WebControls.ObjectDataSource>内の制御、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクションまたは<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクション select メソッドによって返される列名に一致.  
  
## <a name="object-lifetime"></a>オブジェクトの有効期間  
 によって識別されるメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティは、インスタンス メソッドを使用できますか、 `static` (`Shared` Visual Basic で) メソッドです。 インスタンス メソッドである場合、ビジネス オブジェクトは作成され破棄たびに、メソッドで指定されている、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティが呼び出されます。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>と<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>で指定されているメソッドの前に、ビジネス オブジェクトを使用するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティが呼び出されます。 処理することも、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>で指定されているメソッドの後に発生するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティが呼び出されます。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable> 、インターフェイス、<xref:System.IDisposable.Dispose%2A>オブジェクトが破棄される前に、メソッドが呼び出されます。 メソッドの場合`static`(`Shared` Visual Basic で)、ビジネス オブジェクトが作成されないこと、および処理することはできません、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、および<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント。  
  
## <a name="parameter-merging"></a>パラメーターのマージ  
 パラメーターに追加されます、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>それらのソースからのコレクション。  
  
-   宣言から、`SelectParameters`要素。  
  
-   プログラムによって、`Selecting`メソッドです。  
  
 最初に、パラメーターが表示されている、`SelectParameters`要素が追加されます。 次に、パラメーターがプログラムで追加または削除で、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベントが発生する前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドを実行します。 メソッドは、パラメーターは、マージ後に解決されます。 メソッドの解決は、次のセクションで説明しています。  
  
> [!IMPORTANT]
>  クライアントから受信したパラメーター値を検証する必要があります。 ランタイムは、パラメーターの値に、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。  
  
## <a name="method-resolution"></a>メソッドの解決  
 ときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドは、宣言的に作成されたパラメーターのデータ バインド コントロールからのデータ フィールド、`SelectParameters`要素、およびパラメーターで追加された、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベント ハンドラーがすべてマージします。 (詳細については、前のセクションを参照してください)。<xref:System.Web.UI.WebControls.ObjectDataSource>に呼び出すメソッドを検索しようを制御します。 指定されている名前を持つ 1 つまたは複数のメソッドの最初に、検索、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。 一致するものが見つからない場合、<xref:System.InvalidOperationException>例外がスローされます。 一致が見つかった場合、一致するパラメーター名が検索されます。 たとえば、によって指定される型、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティという 2 つのメソッドは、`SelectARecord`です。 1 つ`SelectARecord`1 つのパラメーターを持つ`ID`、および、その他の`SelectARecord`2 つのパラメーターを持ち`Name`と`Number`です。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>コレクションという名前の 1 つだけのパラメーターには、 `ID`、`SelectARecord`メソッドだけを`ID`パラメーターと呼びます。 パラメーターの型は、メソッドを解決するのにはチェックされません。 パラメーターの順序は重要ではありません。  
  
 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティを設定すると、メソッドが別の方法で解決します。 <xref:System.Web.UI.WebControls.ObjectDataSource>で指定されている名前を持つメソッドを検索、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>を型の 1 つのパラメーターを受け取るプロパティがで指定された、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティです。 この場合、パラメーターの名前は関係ありません。  
  
   
  
## Examples  
 次のコード例でどのように、<xref:System.Web.UI.WebControls.GridView>コントロールが使用してデータを表示することができます、 <xref:System.Web.UI.WebControls.ObjectDataSource> Web フォーム ページ上のコントロールです。 <xref:System.Web.UI.WebControls.ObjectDataSource>で部分的または完全修飾クラス名を識別、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティおよびメソッドを使用してデータを取得するために呼び出される、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。 実行時に、オブジェクトが作成され、リフレクションを使用して、メソッドが呼び出されます。 <xref:System.Web.UI.WebControls.GridView>でコントロールが列挙し、<xref:System.Collections.IEnumerable>で指定されているメソッドによって返されるコレクション、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ、およびデータが表示されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> プロパティで指定されたメソッドにより使用されるパラメーターのコレクションを取得します。</summary>
        <value>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> プロパティで指定されたメソッドにより使用されるパラメーターのコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>プロパティを取得、<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 パラメーターを追加する、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>コレクションを使用して宣言によって、`SelectParameters`要素のハンドラーは、プログラムで、または、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベント。 実行時にパラメーターが表示されている、`SelectParameters`要素が最初のコレクションに追加されます。 コレクション内のパラメーターの追加またはのハンドラーで削除し、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベント。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベントが発生する前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドを実行します。  
  
 前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドが実行の名前とに含まれているパラメーターの型、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>コレクションで指定されているメソッドのシグネチャに一致する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。 たとえば、という名前の選択メソッド`GetEmployeesByStateAndAge`受け取り、`string`およびパラメーターとして整数、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>コレクションは、2 つのパラメーターを含める必要があります。 最初のパラメーターを文字列に解決する必要があり、2 番目のパラメーターが整数値に解決する必要があります。 内のマークアップの両方のパラメーターを指定することができます、`SelectParameters`要素。 または、可能性があるに追加できる、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>マークアップでは、イベント ハンドラー、または 1 つのパラメーターを追加することができ、もう 1 つをプログラミングで追加することができます。  
  
 詳細については、次を参照してください。 [、ObjectDataSource コントロールでのパラメーターの使用](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)と<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod>プロパティです。  
  
> [!IMPORTANT]
>  コードで、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベント ハンドラーまたはで指定されているメソッドで、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ、クライアントから受信されるパラメーター値を検証することを確認してください。  
  
   
  
## Examples  
 次のコード例は、1 つのデータを使用してレコードを取得する方法を示します、<xref:System.Web.UI.WebControls.ObjectDataSource>を制御し、表示、<xref:System.Web.UI.WebControls.DetailsView>コントロール。 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、呼び出すことによって、特定の従業員のレコードを取得、`GetEmployee`のメソッド、`EmployeeLogic`クラスです。 `GetEmployee`メソッドには、従業員 ID パラメーターが必要です。 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロール、`QueryStringParameter`を作成するマークアップ内の要素、 <xref:System.Web.UI.WebControls.QueryStringParameter> URL から指定したクエリ文字列パラメーターの値を取得してに渡すことができるオブジェクトを`GetEmployee`メソッドです。  
  
 コントロールのプロパティをフォーム フィールド、cookie、ASP.NET プロファイル データ、またはセッション状態など、他のソースから値を取得するその他のパラメーター クラスを使用できます。 Select メソッドへのハードコーディングされた値を渡すためにマークアップで定義されているパラメーター オブジェクトを使用することもできます。 詳細については、使用可能なパラメーター クラスは、次を参照してください。[フィルターのデータ ソース コントロールを持つパラメーターの使用](http://msdn.microsoft.com/library/88622d04-2989-484e-93fe-594cd98dcf5f)です。  
  
 この例を実行するには次のとおり、  
  
-   Web サイトを名前付き接続文字列を持つ`NorthwindConnection`Northwind traders というデータベースに接続します。 詳細については、次を参照してください。、<xref:System.Web.UI.WebControls.ObjectDataSource>クラスの概要です。  
  
-   `EmployeeLogic`クラスのコード例は、のいずれかとして表示される、<xref:System.Web.UI.WebControls.ObjectDataSource>クラスの概要です。 クラス ファイルは、App_Code フォルダーに存在する必要があります。  
  
-   サンプル コードは、.aspx ページとして実行することができます。 クエリ文字列パラメーターがない場合、ページを要求すると、エラー メッセージが表示されます。 クエリ文字列を使用して、ページを要求した場合は`?empid=1`.aspx ファイルの名前後、は、要求された従業員の詳細が表示されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/CS/objds3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/VB/objds3vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SortParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースの並べ替えをサポートするために、<see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> パラメーターで並べ替え式を指定する際に使用したビジネス オブジェクトの名前を取得また設定します。</summary>
        <value>データの並べ替えに使用するパラメーターを示すために使用するメソッド パラメーターの名前。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>プロパティは、データ ソースの並べ替えをサポートするために使用します。 ときに、<xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>プロパティが設定されて、<xref:System.Web.UI.DataSourceSelectArguments>オブジェクトおよびに渡される、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>値、パラメーターの名前を識別、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>これに基づいてデータが並べ替えられてビジネス オブジェクトのメソッドです。  
  
 場合、<xref:System.Web.UI.WebControls.ObjectDataSource>をコンマ区切りのフィールド値の形式が続くこのパラメーターが渡される値のデータ バインド コントロールに関連付けられている`"ASC"`または`"DESC"`です。 たとえばに昇順の並べ替え順序の値`Name`なります`"Name ASC"`です。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例では、並べ替えをサポートする型を実装する方法を示します。 2 番目のコード例では、並べ替え式を実装する方法を示します。  
  
 次のコード例では、並べ替えをサポートする型を実装する方法を示します。 `SelectMethod`の`SortingData`クラスには、パラメーター、`sortExpression`です。 渡される文字列`SelectMethod`の使用、<xref:System.Data.DataView.Sort%2A>のプロパティ、<xref:System.Data.DataView>によって返されるオブジェクト`SelectMethod`です。  
  
 [!code-csharp[ObjectDataSourceSorting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingData.cs#1)]
 [!code-vb[ObjectDataSourceSorting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingData.vb#1)]  
  
 次のコード例では、並べ替え式を実装する方法を示します。 Web ページのコードがのインスタンスを作成、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティに設定されている`SortingData`と<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>プロパティに設定されている`sortExpression`です。 <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A>のプロパティ、<xref:System.Web.UI.WebControls.GridView>コントロールに設定されている`true`です。 ユーザーがクリックしたとき、**並べ替え**ボタン、フィールド名、`Name`または`Number`に渡される`SelectMethod`並べ替えパラメーターにします。  
  
 [!code-aspx-csharp[ObjectDataSourceSorting#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingDataExample.aspx#2)]
 [!code-aspx-vb[ObjectDataSourceSorting#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingDataExampleVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanSort" />
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SqlCacheDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SqlCacheDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SqlCacheDependency : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Microsoft SQL Server キャッシュの依存関係で使用するデータベースとテーブルを示す、セミコロンで区切られた文字列を取得または設定します。</summary>
        <value>SQL Server キャッシュの依存関係で使用するデータベースとテーブルを示す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、基になっているオプションの有効期限ポリシーをサポートしている、 <xref:System.Web.Caching.SqlCacheDependency> (データベース サーバーのサービスを構成する必要があります)、データ キャッシュのオブジェクト。  
  
 SQL Server は、キャッシュの無効化の 2 つのメカニズムをサポートしています。 ポーリングと通知します。 各メカニズムがのさまざまな構文、<xref:System.Web.Caching.SqlCacheDependency>オブジェクト。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>ポーリングしかサポートしていません。 <xref:System.Web.Caching.SqlCacheDependency>文字列は、作成に使用される、<xref:System.Data.SqlClient.SqlDependency>に渡されるオブジェクト、<xref:System.Data.Common.DbCommand>コンス トラクターの前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドを実行します。 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>データベースと同じ形式で使用されるに従ってテーブルを識別する文字列、`@ Page`ディレクティブについては、ここで、文字列の最初の部分は、SQL Server データベースへの接続文字列とそれに続くコロン区切り記号、および最後に、名前データベース テーブルの (たとえば、 `"connectionstring1:table1"`)。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>プロパティが 1 つ以上のテーブルに依存、接続文字列とテーブル名のペアをセミコロンで区切られます (たとえば、 `"connectionstring1:table1";connectionstring2:table2"`)。  
  
 通知をサポートするための実装でキャッシュ ロジックを記述する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティの構造を処理し、<xref:System.Web.Caching.SqlCacheDependency>コード内のオブジェクト。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例は、SQL Server のキャッシュの依存関係を作成し、設定する方法を示します、<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>オブジェクト。 2 番目のコード例を返すラッパー メソッドを実装する方法を示します、<xref:System.Data.DataSet>キャッシュとフィルター処理を有効にするオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource>オブジェクト。  
  
 次のコード例は、SQL Server のキャッシュの依存関係を作成し、設定する方法を示します、<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 この例では、データベースは 120 秒ごとにポーリングされます。 中に、Northwind traders 社の従業員のデータ テーブルが変更された場合は時間、によってキャッシュされているすべてのデータ、<xref:System.Web.UI.WebControls.ObjectDataSource>して表示して、制御、<xref:System.Web.UI.WebControls.GridView>コントロールが期限切れになり、ページの次の要求で新しいデータのセットを取得します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/CS/objds7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/VB/objds7vb.aspx#1)]  
  
 次のコード例を返すラッパー メソッドを実装する方法を示します、<xref:System.Data.DataSet>キャッシュとフィルター処理を有効にするオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 基本実装で、`EmployeeLogic`クラス、`GetAllEmployees`メソッドを返します、<xref:System.Collections.ArrayList>オブジェクト。 使用するには、完全にオブジェクトのリファクタリングではなく、<xref:System.Web.UI.WebControls.ObjectDataSource>ラッパー メソッドの名前付き Web フォーム ページに`GetAllEmployeesAsDataSet`のセットを返す追加`NorthwindEmployee`データとして、<xref:System.Data.DataSet>です。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="StartRowIndexParameterName">
      <MemberSignature Language="C#" Value="public string StartRowIndexParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StartRowIndexParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property StartRowIndexParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StartRowIndexParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StartRowIndexParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("startRowIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース ページングをサポートするために取得する最初のレコードの識別子の値を示す際に使用する、データ取得メソッドのパラメーター名を取得または設定します。</summary>
        <value>取得する最初のレコードを示すために使用するビジネス オブジェクト メソッドのパラメーターの名前。 このパラメーターは、整数値を返す必要があります。 既定値は<c>"startRowIndex"</c>です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>プロパティは、データ ソース ページングをサポートするために使用します。 ページングをサポートする方法について、<xref:System.Web.UI.WebControls.ObjectDataSource>を制御しを参照してください<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>です。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
   
  
## Examples  
 次の 3 つの例では、Web ページ、分離コード ページ クラス、およびレコードの数がページに表示されるを取得するユーザーを有効にするデータ アクセス クラスを表示します。  
  
 Web ページが含まれています、<xref:System.Web.UI.WebControls.ObjectDataSource>いるコントロール<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>プロパティに設定されている`true`です。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>プロパティがクエリ内のレコードの合計数を返すメソッドの名前に設定します。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>プロパティおよび<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>プロパティは、Select メソッドで使用されるパラメーターの名前に設定されます。 ページにも含まれています、<xref:System.Web.UI.WebControls.DropDownList>コントロール。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 2 番目の例では、ハンドラーを<xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType>のイベント、<xref:System.Web.UI.WebControls.DropDownList>コントロール。 ハンドラーのセット内のコード、<xref:System.Web.UI.WebControls.GridView.PageSize%2A>プロパティをユーザーの選択します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 3 番目の例では、Customers テーブルからデータを取得するデータ アクセス クラスを示します。 という名前のメソッドが含まれている`GetSubsetOfEmployees`に割り当てられる、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 この例は、という名前のメソッドも含まれています。 `GetEmployeeCount`、に割り当てられる、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 クラスでは、LINQ を使用して、Customers テーブルのクエリを実行します。 例では、LINQ to SQL クラスを Northwind データベースと Customers テーブルを表す必要があります。 詳細については、次を参照してください。[する方法: LINQ to Web プロジェクトでの SQL クラスを作成](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)です。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="objectDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールのビューステートの変更を追跡し、<see cref="T:System.Web.UI.StateBag" /> オブジェクトに格納できるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.TrackViewState%2A>オブジェクトのビュー状態の一部としてコントロールに対する変更の追跡と保存を開始する開始位置をマークするメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトが表すクラスの名前を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> が表すオブジェクトの型を識別する部分修飾クラス名または完全修飾クラス名。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクトのインスタンスを作成、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールのバインド先、コントロールでは、リフレクションを使用して、実行時に、型名によって識別される型を読み込めません。 そのための値、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティには、Bin または App_Code ディレクトリに配置されているコードの部分修飾型またはアセンブリをグローバル アセンブリ キャッシュに登録されているコードの完全修飾型名を指定できます。 グローバル アセンブリ キャッシュを使用する場合への適切な参照を追加する必要があります、`assemblies`は Machine.config または Web.config ファイルのセクションです。  
  
 型を処理する場合を除き、既定のコンス トラクターを含んでいなければなりません、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>そのインスタンスを作成するイベントです。 呼び出しごとに、型のインスタンスが作成された、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>、および<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>メソッド、型のメソッドは、メンバー メソッドの場合。 メソッドは、インスタンスは作成されません`static`(`Shared` Visual Basic で)。 型を実装する場合、 <xref:System.IDisposable> 、インターフェイス、<xref:System.IDisposable.Dispose%2A>オブジェクトが破棄される前に、メソッドが呼び出されます。  
  
   
  
## Examples  
 次のコード例でどのように、<xref:System.Web.UI.WebControls.GridView>コントロールを使用してデータを表示することができます、 <xref:System.Web.UI.WebControls.ObjectDataSource> Web フォーム ページ上のコントロールです。 <xref:System.Web.UI.WebControls.ObjectDataSource>で部分的または完全修飾クラス名を識別、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティおよびメソッドを使用してデータを取得するために呼び出される、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。 実行時に、オブジェクトが作成され、リフレクションを使用して、メソッドが呼び出されます。 <xref:System.Web.UI.WebControls.GridView>でコントロールが列挙し、<xref:System.Collections.IEnumerable>によって返されるコレクション、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ、およびデータが表示されます。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 次の例は、クラスを<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティ値を示します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      <MemberSignature Language="VB.NET" Value="Public Function Update () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update();" />
      <MemberSignature Language="F#" Value="member this.Update : unit -&gt; int" Usage="objectDataSource.Update " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> プロパティと <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" /> コレクション内のパラメーターで識別されるメソッドを呼び出して更新操作を実行します。</summary>
        <returns>基になるデータ ストレージで更新された行数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ビジネス オブジェクトは、バッチ内ではなく、一度に 1 レコードずつデータを更新すると見なされます。  
  
 前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>操作を実行する、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベント。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベント パラメーターの値を確認する前に処理を実行して、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>操作します。 更新操作を実行する、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトによって識別されるオブジェクトのインスタンスを作成するリフレクションを使用して、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティです。 によって識別されるメソッドを呼び出して、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティ、関連付けられているいずれかを使用して<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>プロパティです。 後に、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>操作が完了すると、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>イベント。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>イベントを戻り値、出力パラメーターと、例外を調べると、後続の処理を実行します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>メソッドからデリゲートを<xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>のメソッド、<xref:System.Web.UI.WebControls.ObjectDataSourceView>と関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 パラメーターの結合、オブジェクトの有効期間、およびメソッドの解決に関する詳細については、次を参照してください。<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>です。  
  
> [!IMPORTANT]
>  クライアントから受信したパラメーター値を検証する必要があります。 ランタイムは、パラメーターの値に、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティです。  
  
## <a name="data-bound-controls"></a>データ バインド コントロール  
 ときに、<xref:System.Web.UI.WebControls.ObjectDataSource>など、データ バインド コントロールにコントロールが関連付けられている、<xref:System.Web.UI.WebControls.GridView>コントロール必要はありませんを呼び出して、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>ページ コードからメソッドです。 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>代わりにメソッドが、データ バインド コントロールが直接呼び出されます。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.DropDownList>コントロール、<xref:System.Web.UI.WebControls.TextBox>コントロール、およびいくつか<xref:System.Web.UI.WebControls.ObjectDataSource>データを更新するオブジェクト。 2 つ目のコード例で示す、`EmployeeLogic`最初のコード例で使用されるクラスです。  
  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.DropDownList>コントロール、<xref:System.Web.UI.WebControls.TextBox>コントロール、およびいくつか<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール データを更新します。 <xref:System.Web.UI.WebControls.DropDownList> 、Northwind の従業員の名前を表示中に、<xref:System.Web.UI.WebControls.TextBox>コントロールを使用して入力し、アドレス情報を更新します。 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクションが含まれています、<xref:System.Web.UI.WebControls.ControlParameter>の選択した値にバインドされているオブジェクト、 <xref:System.Web.UI.WebControls.DropDownList>、発生するボタン、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>従業員が選択された後にのみ操作が有効にします。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]  
  
 次のコード例は、`EmployeeLogic`前のコード例で使用されるクラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Updated : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>戻り値または出力パラメーターの値を確認する場合、または後に例外がスローされたかどうかを決定するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>操作が完了します。 戻り値、出力パラメーター、および例外処理のプロパティから使用できますが、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateMethod">
      <MemberSignature Language="C#" Value="public string UpdateMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールがデータを更新するために呼び出すメソッドまたは関数の名前を取得または設定します。</summary>
        <value>データを更新するために <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> が使用するメソッドまたは関数の名前を表す文字列。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールでは、メソッドによって識別される、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティはバッチではなく、一度に 1 つの更新プログラムを実行します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 パラメーター名が構成されていることを確認してください、<xref:System.Web.UI.WebControls.ObjectDataSource>内の制御、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクション select メソッドによって返される列名に一致します。  
  
## <a name="object-lifetime"></a>オブジェクトの有効期間  
 によって識別されるメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティは、インスタンス メソッドを使用できますか、 `static` (`Shared` Visual Basic で) メソッドです。 インスタンス メソッドである場合、ビジネス オブジェクトは作成され破棄たびに、メソッドで指定されている、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティが呼び出されます。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>と<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>で指定されているメソッドの前に、ビジネス オブジェクトを使用するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティが呼び出されます。 処理することも、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>で指定されているメソッドの後に発生するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティが呼び出されます。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable> 、インターフェイス、<xref:System.IDisposable.Dispose%2A>オブジェクトが破棄される前に、メソッドが呼び出されます。 メソッドの場合`static`(`Shared` Visual Basic で)、ビジネス オブジェクトが作成されないこと、および処理することはできません、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、および<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント。  
  
## <a name="parameter-merging"></a>パラメーターのマージ  
 パラメーターに追加されます、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 3 つのソースからのコレクション。  
  
-   データ バインド コントロールから、実行時にします。  
  
-   `UpdateParameters`要素を宣言します。  
  
-   <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベント ハンドラーでは、プログラムでします。  
  
 データ バインド コントロールから生成されるすべてのパラメーターを追加する最初に、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクション。 たとえば場合、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールにバインドする、<xref:System.Web.UI.WebControls.GridView>列を持つコントロールを`Name`と`Number`、パラメーターの`Name`と`Number`コレクションに追加されます。 パラメーターの正確な名前が異なります、<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>プロパティです。 これらのパラメーターのデータ型は`string`します。 次に記載されているパラメーター、`UpdateParameters`要素が追加されます。 場合のパラメーター、`UpdateParameters`になっているパラメーターと同じ名前で要素が見つかる、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>で指定されているパラメーターと一致する、既存のパラメーターのコレクションが変更された、`UpdateParameters`要素。 通常、パラメーターのデータの種類の変更に使用されます。 最後に、プログラムで追加および削除できます内のパラメーター、<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベントが発生する前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>メソッドを実行します。 メソッドは、パラメーターは、マージ後に解決されます。 メソッドの解決は、次のセクションで説明しています。  
  
> [!IMPORTANT]
>  クライアントから受信したパラメーター値を検証する必要があります。 ランタイムは、パラメーターの値に、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティです。  
  
## <a name="method-resolution"></a>メソッドの解決  
 ときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>メソッドは、宣言的に作成されたパラメーターのデータ バインド コントロールからのデータ フィールド、`UpdateParameters`要素、およびパラメーターで追加された、<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベント ハンドラーがすべてマージします。 (詳細については、前のセクションを参照してください)。<xref:System.Web.UI.WebControls.ObjectDataSource>に呼び出すメソッドを検索しようを制御します。 指定されている名前を持つ 1 つまたは複数のメソッドの最初に、検索、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティです。 一致するものが見つからない場合、<xref:System.InvalidOperationException>例外がスローされます。 一致が見つかった場合、一致するパラメーター名が検索されます。 たとえば、によって指定される型、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティという 2 つのメソッドは、`UpdateARecord`です。 1 つ`UpdateARecord`1 つのパラメーターを持つ`ID`、および、その他の`UpdateARecord`2 つのパラメーターを持ち`Name`と`Number`です。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクションという名前の 1 つだけのパラメーターには、 `ID`、`UpdateARecord`メソッドだけを`ID`パラメーターと呼びます。 パラメーターの型は、メソッドを解決するのにはチェックされません。 パラメーターの順序は重要ではありません。  
  
 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティを設定すると、メソッドが別の方法で解決します。 <xref:System.Web.UI.WebControls.ObjectDataSource>で指定されている名前を持つメソッドを検索、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>を型の 1 つのパラメーターを受け取るプロパティがで指定された、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティです。 この場合、パラメーターの名前は関係ありません。  
  
   
  
## Examples  
 次の 3 つの例では、Web ページ、分離コード ページ クラス、およびデータ アクセス クラスを取得し、Northwind データベースの Employees テーブルのレコードを更新するユーザーを有効にすることを示します。  
  
 最初の例では、2 つを含む Web ページ<xref:System.Web.UI.WebControls.ObjectDataSource>、コントロール、<xref:System.Web.UI.WebControls.DropDownList>コントロール、および<xref:System.Web.UI.WebControls.DetailsView>コントロール。 最初の<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールと<xref:System.Web.UI.WebControls.DropDownList>取得して、データベースから従業員の名前を表示するコントロールを使用します。 2 番目<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールと<xref:System.Web.UI.WebControls.DetailsView>コントロールは、取得、表示、およびユーザーが選択されている従業員レコードからデータを変更するために使用します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 2 番目の例のハンドラーを示しています、<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>と<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベント。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected>イベント ハンドラーは Employee テーブルから取得されたデータを格納しているオブジェクトをシリアル化します。 シリアル化されたオブジェクトは、ビュー ステートに格納されます。 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベント ハンドラーが更新されるデータのレコードの元のデータを格納しているビュー ステート内のオブジェクトを逆シリアル化します。 元のデータを格納しているオブジェクトは、Update メソッドにパラメーターとして渡されます。 別のプロセスによってデータが変更されたかどうかを確認するために使用できるように、元のデータをデータベースに渡す必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 3 番目の例では、Northwind データベースが対話するデータ アクセス クラスを示します。 クラスでは、LINQ を使用してクエリを実行し、従業員テーブルを更新します。 例では、LINQ to SQL クラスを表す Northwind データベースと従業員テーブルが必要です。 詳細については、次を参照してください。[する方法: LINQ to Web プロジェクトでの SQL クラスを作成](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)です。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> プロパティで指定されたメソッドによって使用されるパラメーターを格納するパラメーター コレクションを取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> プロパティで指定されたメソッドによって使用されるパラメーターを格納している <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名前と型のパラメーターに含まれている、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクションは、名前とパラメーターの型と一致する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>メソッド シグネチャ。 パラメーター名が影響を受けました、<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>プロパティであり、大文字小文字を区別します。 コレクション内のパラメーターは、データ バインド コントロール、宣言によって、指定されたパラメーターおよびプログラムによって追加されたパラメーターのデータによって異なります。 詳細については、セクションを参照して、「パラメーターをマージ」<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>と[、ObjectDataSource コントロールでのパラメーターの使用](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)です。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>プロパティの取得、<xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A>プロパティに含まれています、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
 パラメーターの結合、オブジェクトの有効期間、およびメソッドの解決に関する詳細については、次を参照してください。<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>です。  
  
> [!IMPORTANT]
>  クライアントから受信したパラメーター値を検証する必要があります。 ランタイムは、パラメーターの値に、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティです。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.DropDownList>コントロール、<xref:System.Web.UI.WebControls.TextBox>コントロール、およびいくつか<xref:System.Web.UI.WebControls.ObjectDataSource>データを更新するオブジェクト。 2 つ目のコード例で示す、`EmployeeLogic`最初のコード例で使用されるクラスです。  
  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.WebControls.DropDownList>コントロール、<xref:System.Web.UI.WebControls.TextBox>コントロール、およびいくつか<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール データを更新します。 <xref:System.Web.UI.WebControls.DropDownList> 、Northwind の従業員の名前を表示中に、<xref:System.Web.UI.WebControls.TextBox>コントロールを使用して入力し、アドレス情報を更新します。 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクションが含まれています、<xref:System.Web.UI.WebControls.ControlParameter>の選択した値にバインドされている、 <xref:System.Web.UI.WebControls.DropDownList>、発生するボタン、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>従業員が選択された後にのみ操作が有効にします。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]  
  
 次のコード例は、`EmployeeLogic`前のコード例で使用されるクラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Updating : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 、パラメーターの値を検証する、または前に、のパラメーターの値を変更する、アプリケーションに固有である追加の初期化を実行するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、更新操作を実行します。 パラメーターとして使用できる、<xref:System.Collections.IDictionary>によってアクセスされるコレクション、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>によって公開される、プロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>オブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次の 3 つの例では、Web ページ、分離コード ページ クラス、およびデータ アクセス クラスを取得し、Northwind データベースの Employees テーブルのレコードを更新するユーザーを有効にすることを示します。  
  
 最初の例では、2 つを含む Web ページ<xref:System.Web.UI.WebControls.ObjectDataSource>、コントロール、<xref:System.Web.UI.WebControls.DropDownList>コントロール、および<xref:System.Web.UI.WebControls.DetailsView>コントロール。 最初の<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールと<xref:System.Web.UI.WebControls.DropDownList>取得して、データベースから従業員の名前を表示するコントロールを使用します。 2 番目<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールと<xref:System.Web.UI.WebControls.DetailsView>コントロールは、取得、表示、およびユーザーが選択されている従業員レコードからデータを変更するために使用します。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 2 番目の例のハンドラーを示しています、<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>と<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベント。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected>イベント ハンドラーは Employee テーブルから取得されたデータを格納しているオブジェクトをシリアル化します。 シリアル化されたオブジェクトは、ビュー ステートに格納されます。 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベント ハンドラーが更新されるデータのレコードの元のデータを格納しているビュー ステート内のオブジェクトを逆シリアル化します。 元のデータを格納しているオブジェクトは、Update メソッドにパラメーターとして渡されます。 別のプロセスによってデータが変更されたかどうかを確認するために使用できるように、元のデータをデータベースに渡す必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 3 番目の例では、Northwind データベースが対話するデータ アクセス クラスを示します。 クラスでは、LINQ を使用してクエリを実行し、従業員テーブルを更新します。 例では、LINQ to SQL クラスを表す Northwind データベースと従業員テーブルが必要です。 詳細については、次を参照してください。[する方法: LINQ to Web プロジェクトでの SQL クラスを作成](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)です。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
  </Members>
</Type>