<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aa8f739063475b844ca1c37c795d7728c6ae75a7" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53390054" /></Metadata><TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChangeMonitor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeMonitor abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type ChangeMonitor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="8ddad-101">キャッシュ アイテムが依存するデータの状態の変化を監視する、派生したカスタム型の基本クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-101">Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ddad-102"><xref:System.Runtime.Caching.ChangeMonitor>クラスは、特定のキャッシュの実装のために特化したモニターの派生クラスの基底クラスとして使用します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-102">The <xref:System.Runtime.Caching.ChangeMonitor> class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</span></span> <span data-ttu-id="8ddad-103">A<xref:System.Runtime.Caching.ChangeMonitor>インスタンスはキャッシュ アイテムが依存するデータの状態の変化を監視します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-103">A <xref:System.Runtime.Caching.ChangeMonitor> instance monitors changes in the state of data which a cache item depends on.</span></span> <span data-ttu-id="8ddad-104">たとえば、アイテムには、内容がキャッシュされているファイルやデータ エンティティができます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-104">For example, the item can be a file or data entity whose contents are cached.</span></span> <span data-ttu-id="8ddad-105">ファイルまたはデータのエンティティが更新された場合も、関連付けられているキャッシュ エントリを変更する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-105">If the file or data entity is updated, the associated cache entry must be changed also.</span></span> <span data-ttu-id="8ddad-106">監視できる共通の項目には、データ エンティティ (データベース フィールド、値、行、またはテーブル) など、別のキャッシュ エントリとファイルおよびファイル属性が含まれます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-106">Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</span></span>  
  
 <span data-ttu-id="8ddad-107">依存関係の変更は、依存関係の状態の変更です。</span><span class="sxs-lookup"><span data-stu-id="8ddad-107">A dependency change is a change in the state of a dependency.</span></span> <span data-ttu-id="8ddad-108">一般的なキャッシュの実装で後に、<xref:System.Runtime.Caching.ChangeMonitor>インスタンス キャッシュ依存関係が変更されたことを通知する、キャッシュが挿入されたキャッシュ エントリを無効化など、必要なアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-108">In a typical cache implementation, after a <xref:System.Runtime.Caching.ChangeMonitor> instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</span></span>  
  
 <span data-ttu-id="8ddad-109">派生<xref:System.Runtime.Caching.ChangeMonitor>固有のさまざまなデータ ストアの依存関係の変更を監視するクラスをカスタマイズできます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-109">Derived <xref:System.Runtime.Caching.ChangeMonitor> classes can be customized to monitor dependency changes for specific different data stores.</span></span> <span data-ttu-id="8ddad-110">たとえば、ファイル システム、物理メモリ、またはデータベースのキャッシュ実装があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-110">For example, there are cache implementations for a file system, physical memory, or a database.</span></span> <span data-ttu-id="8ddad-111"><xref:System.Runtime.Caching.ChangeMonitor>クラスは、アラートの変更が発生したキャッシュ調べ、キャッシュの外部で発生する変更。</span><span class="sxs-lookup"><span data-stu-id="8ddad-111">The <xref:System.Runtime.Caching.ChangeMonitor> class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</span></span>  
  
 <span data-ttu-id="8ddad-112">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]から派生する次のクラスが含まれます<xref:System.Runtime.Caching.ChangeMonitor>クラス。</span><span class="sxs-lookup"><span data-stu-id="8ddad-112">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] includes the following classes that derive from <xref:System.Runtime.Caching.ChangeMonitor> class:</span></span>  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 <span data-ttu-id="8ddad-113">これらの各クラスは、さまざまな種類の依存関係と連携します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-113">Each of these classes works with different types of dependencies.</span></span> <span data-ttu-id="8ddad-114">たとえば、派生<xref:System.Runtime.Caching.FileChangeMonitor>クラスは、キャッシュ項目が依存しているファイル システム データ (ファイルとフォルダー) のキャッシュへの変更を監視します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-114">For example, the derived <xref:System.Runtime.Caching.FileChangeMonitor> class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="8ddad-115">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="8ddad-115">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="8ddad-116">カスタムを作成する場合は、キャッシュの実装や派生の変更モニターの種類、特定のガイドラインに従う必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-116">If you create a custom cache implementation or a derived change monitor type, you must follow certain guidelines.</span></span> <span data-ttu-id="8ddad-117">次の一覧は、次のガイドラインをまとめたものです。</span><span class="sxs-lookup"><span data-stu-id="8ddad-117">The following list summarizes these guidelines.</span></span> <span data-ttu-id="8ddad-118">詳細については、個々 のメソッドまたはプロパティのドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ddad-118">For more information, see the documentation for individual methods or properties.</span></span>  
  
<span data-ttu-id="8ddad-119">派生クラスのコンス トラクターを設定する必要があります、<see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />プロパティの監視を開始し、呼び出す<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッド、メソッドが戻る前にします。</span><span class="sxs-lookup"><span data-stu-id="8ddad-119">-   The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the method returns.</span></span> <span data-ttu-id="8ddad-120">コンス トラクターを呼び出すことができますのみコンス トラクターは、構築中にエラーが発生し、リソースを破棄する必要がある場合、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />オーバー ロードの後に、<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />ため、メソッドが呼び出された、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />オーバー ロードがスローされます、 <see cref="T:System.InvalidOperationException" />初期化が完了していない場合は例外です。</span><span class="sxs-lookup"><span data-stu-id="8ddad-120">If a constructor encounters an error during constructions and must have to dispose of resources, the constructor can only call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called because the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload will throw an <see cref="T:System.InvalidOperationException" /> exception if initialization is not completed.</span></span>  
  
<span data-ttu-id="8ddad-121">-初期化する前に監視されているデータが完了に変更が発生した場合は、コンス トラクターを呼び出す必要があります、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドを呼び出す前に、<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッド。</span><span class="sxs-lookup"><span data-stu-id="8ddad-121">-   If changes occur in the data that is being monitored before initialization is complete, the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.</span></span>  
  
<span data-ttu-id="8ddad-122">-後派生<see cref="T:System.Runtime.Caching.ChangeMonitor" />型がインスタンス化される、カスタムにモニターを挿入する必要があります<see cref="T:System.Runtime.Caching.ObjectCache" />実装します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-122">-   After a derived <see cref="T:System.Runtime.Caching.ChangeMonitor" /> type is instantiated, you must insert the monitor into a custom <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation.</span></span> <span data-ttu-id="8ddad-123">変更の監視を使用して完了した場合、または、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッド。</span><span class="sxs-lookup"><span data-stu-id="8ddad-123">Or if you are finished using the change monitor, call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.</span></span>  
  
<span data-ttu-id="8ddad-124">-後、<see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスが挿入、 <see cref="T:System.Runtime.Caching.ObjectCache" /> 、実装、<see cref="T:System.Runtime.Caching.ObjectCache" />インスタンスは、変更の監視が破棄されたことが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ddad-124">-   After a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance is inserted into a <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation, the <see cref="T:System.Runtime.Caching.ObjectCache" /> instance require that the change monitor is disposed.</span></span> <span data-ttu-id="8ddad-125">カーソルが無効であり、例外が発生した場合でも、<see cref="T:System.Runtime.Caching.ObjectCache" />実装を呼び出す必要があります、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="8ddad-125">Even if the insertion is invalid and causes an exception, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.</span></span>  
  
<span data-ttu-id="8ddad-126">-派生変更監視機能が、キャッシュに挿入された後、<see cref="T:System.Runtime.Caching.ObjectCache" />実装を呼び出す必要があります<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />を渡すことによって、<see cref="T:System.Runtime.Caching.OnChangedCallback" />オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ddad-126">-   After a derived change monitor is inserted into a cache, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, by passing a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object.</span></span> <span data-ttu-id="8ddad-127"><see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />メソッドは、1 回だけ呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-127">The <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method can be called only one time.</span></span> <span data-ttu-id="8ddad-128">依存関係の変更が既に発生している場合、<see cref="T:System.Runtime.Caching.OnChangedCallback" />インスタンスがすぐに呼び出されるときに<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-128">If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called.</span></span> <span data-ttu-id="8ddad-129">それ以外の場合、<see cref="T:System.Runtime.Caching.OnChangedCallback" />インスタンスは 1 回だけ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-129">Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called only one time.</span></span> <span data-ttu-id="8ddad-130">この 1 回の呼び出しが発生したかときに、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />ため、メソッドが呼び出された、<see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスには、変更が検出されたとき、または、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />でメソッドが呼び出さ、 <see cref="T:System.Runtime.Caching.ChangeMonitor" />、か早い方。</span><span class="sxs-lookup"><span data-stu-id="8ddad-130">This one time call occurs either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called because the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance detected a change, or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called on the <see cref="T:System.Runtime.Caching.ChangeMonitor" />, whichever occurs first.</span></span>  
  
<span data-ttu-id="8ddad-131">-<see cref="T:System.Runtime.Caching.OnChangedCallback" />インスタンスによって提供される、<see cref="T:System.Runtime.Caching.ObjectCache" />実装が関連付けられているキャッシュ エントリの削除し、を使用して、理由を指定する必要があります、<see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" />列挙体。</span><span class="sxs-lookup"><span data-stu-id="8ddad-131">-   The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance that is provided by an <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation should remove the associated cache entry and specify a reason by using the <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> enumeration.</span></span>  
  
<span data-ttu-id="8ddad-132">は、<see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスで呼び出すことができます、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッド キャッシュ実装が呼び出される前にいずれか<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />メソッド以降。</span><span class="sxs-lookup"><span data-stu-id="8ddad-132">-   A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method either before a cache implementation has called <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or after.</span></span> <span data-ttu-id="8ddad-133">場合、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドは、前に呼び出されます<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />が呼び出され、基本<see cref="T:System.Runtime.Caching.ChangeMonitor" />実装は、この問題が発生しているキャッシュへの通知し、に渡されるコールバックをトリガーする<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />とすぐに<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-133">If the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called before <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called, the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> implementation will notify the cache that this has occurred and will trigger the callback to be passed to <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is invoked.</span></span> <span data-ttu-id="8ddad-134">渡される任意の状態データ、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドは変更の監視によって保存され、その後に渡される、<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />メソッドと、<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-134">Any state data that is passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is saved by the change monitor and subsequently passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method when the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method is invoked.</span></span>  
  
<span data-ttu-id="8ddad-135">の変更監視を実装する必要があります、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />メソッド。</span><span class="sxs-lookup"><span data-stu-id="8ddad-135">-   A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method.</span></span> <span data-ttu-id="8ddad-136">詳細については、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> メソッドのドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ddad-136">For more information, see the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method documentation.</span></span>  
  
<span data-ttu-id="8ddad-137">-<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />を破棄するメソッドのオーバー ロードを呼び出す必要があります、<see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンス。</span><span class="sxs-lookup"><span data-stu-id="8ddad-137">-   The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload must be called to dispose of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span></span> <span data-ttu-id="8ddad-138">Dispose を呼び出す場合の規則は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="8ddad-138">The rules for calling Dispose are as follows:</span></span> 
<span data-ttu-id="8ddad-139">破棄する呼び出し元の責任は、キャッシュに項目が前に、<see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンス。</span><span class="sxs-lookup"><span data-stu-id="8ddad-139">-   Before an item is inserted into the cache, it is the responsibility of caller to dispose of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span></span>  
  
<span data-ttu-id="8ddad-140">のキャッシュ項目 1 回、<see cref="T:System.Runtime.Caching.ChangeMonitor" />それに関連付けられているインスタンスがキャッシュに渡される、キャッシュの実装側ように注意してください、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />挿入が失敗した場合でも、メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-140">-   Once cache item and the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances that are associated with it are passed to a cache, the cache implementer must make sure that the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, even if the insert fails.</span></span>  
  
<span data-ttu-id="8ddad-141">-後の項目とそれに関連付けられた<see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスがキャッシュに渡される、ため、呼び出し元が、依存関係を破棄する必要があるときに、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドが呼び出されると、呼び出しが、依存関係が変更されたかのように扱われます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-141">-   After an item and its associated <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances are passed to a cache, the caller must not dispose the dependency because when the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, the call is treated as if the dependency has changed.</span></span> <span data-ttu-id="8ddad-142">結果として、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドが自動的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-142">As a result, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is automatically invoked.</span></span>  
  
<span data-ttu-id="8ddad-143">-これらの規則を考慮に入れて、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドは、次の方法のいずれかで呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-143">-   Taking these rules into consideration, the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method must be called in one of the following ways:</span></span> 
<span data-ttu-id="8ddad-144">-ユーザーが呼び出す必要があります、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />変更監視派生インスタンスをキャッシュに挿入する場合のメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="8ddad-144">-   Users must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload if they decide not to insert the derived change-monitor instance into a cache.</span></span>  
  
<span data-ttu-id="8ddad-145">のキャッシュ実装は呼び出し元場合、実装は、変更監視インスタンスをオブジェクト キャッシュに挿入しようとしていますが、挿入が失敗した、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="8ddad-145">-   If the implementation tries to insert the change-monitor instance into an object cache but the insertion fails, the cache implementation is responsible for calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.</span></span> <span data-ttu-id="8ddad-146">挿入の試行では、例外が発生、関連付けられている依存関係のキャッシュの実装を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-146">When the insertion attempt causes an exception, the cache implementation must dispose of any associated dependencies.</span></span>  
  
<span data-ttu-id="8ddad-147">場合は、キャッシュ エントリを削除すると、キャッシュの実装が依存関係の dispose もする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-147">-   If the cache entry is removed, the cache implementation must also dispose of the dependency.</span></span>  
  
<span data-ttu-id="8ddad-148">-内部実装の<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドが自動的に呼び出し、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />後に、コールバックを呼び出すことがを介して登録された<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />。</span><span class="sxs-lookup"><span data-stu-id="8ddad-148">-   The internal implementation of the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method automatically calls the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method after it calls a callback that is registered through <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="8ddad-149">この自動呼び出しイベントの発生時に、dispose メソッドには、場合にのみ発生の初期化、<see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスが以前に完了しました。</span><span class="sxs-lookup"><span data-stu-id="8ddad-149">This automatic call to the dispose method during the event firing only occurs if the initialization of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance was previously completed.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="8ddad-150">派生の変更モニターのコンス トラクターを呼び出すと、<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />変更モニターの状態が既に変更されている場合、メソッド (コンス トラクターがまだアクティブなときに変更を既に監視されている状態)、<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッドには変更の監視を自動的に破棄します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-150">When a derived change monitor's constructor calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method, if the state of the change monitor has already changed (that is, the state that is monitored already changed when the constructor was still active) then the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method will automatically dispose of the change monitor.</span></span>  
  
<span data-ttu-id="8ddad-151">-<see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />プロパティに設定されて<see langword="true" />後、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドかどうかに関係なく、変更監視派生インスタンスによって呼び出されます、<see cref="T:System.Runtime.Caching.OnChangedCallback" />への呼び出しによってオブジェクトが設定されている、<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />メソッドかどうか。</span><span class="sxs-lookup"><span data-stu-id="8ddad-151">-   The <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> property is set to <see langword="true" /> after the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called by the derived change-monitor instance, regardless of whether a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object has been set by a call to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or not.</span></span></para></block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
    <related type="Article" href="https://msdn.microsoft.com/library/ac11c8ea-df5d-4de8-b315-9ccf1048b0ce"><span data-ttu-id="8ddad-152">ASP.NET のキャッシュ</span><span class="sxs-lookup"><span data-stu-id="8ddad-152">ASP.NET Caching</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChangeMonitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ddad-153"><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-153">Initializes a new instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span></span> <span data-ttu-id="8ddad-154">このコンストラクターは、派生クラスのコンストラクターから呼び出されて基本クラスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-154">This constructor is called from constructors in derived classes to initialize the base class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ddad-155"><xref:System.Runtime.Caching.ChangeMonitor>クラスに既定のコンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="8ddad-155">The <xref:System.Runtime.Caching.ChangeMonitor> class has a default constructor.</span></span> <span data-ttu-id="8ddad-156">ただし、クラスから継承した基本<xref:System.Runtime.Caching.ChangeMonitor>クラスおよびカスタム変更監視の定義の動作は、コンス トラクターで初期化を実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-156">However, classes that inherit from the base <xref:System.Runtime.Caching.ChangeMonitor> class and define custom change-monitoring behavior must perform initialization in the constructor.</span></span> <span data-ttu-id="8ddad-157">詳細については、継承クラスのセクションのノートを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ddad-157">For more information, see the Notes for Inheritors section.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="8ddad-158">派生クラスのコンス トラクターを設定する必要があります、<see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />プロパティの監視を開始し、呼び出し、<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />クラスを返す前にします。</span><span class="sxs-lookup"><span data-stu-id="8ddad-158">The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> class before it returns.</span></span> <span data-ttu-id="8ddad-159">初期化の前に、依存関係の変更が完了 (たとえば、キャッシュに依存するキャッシュ キーが見つからない場合など) の場合は、コンス トラクターを呼び出す必要があります、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドを呼び出す前に、<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッド。</span><span class="sxs-lookup"><span data-stu-id="8ddad-159">If a dependency changes before initialization is complete (for example, if a dependent cache key is not found in the cache), the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before it calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.</span></span> <span data-ttu-id="8ddad-160">この場合、コンス トラクターを呼び出すことができます、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドにした場合のみ、<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッドが呼び出されるため、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />初期化が完了していない場合、メソッドが例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8ddad-160">In this case, constructor can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ddad-161"><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-161">Releases all resources used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ddad-162"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドを使用して、リリース、<xref:System.Runtime.Caching.ChangeMonitor>インスタンスと関連するリソース。</span><span class="sxs-lookup"><span data-stu-id="8ddad-162">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is used to release the <xref:System.Runtime.Caching.ChangeMonitor> instance and related resources.</span></span> <span data-ttu-id="8ddad-163">パブリック<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>変更監視派生クラス (初期化) などのキーのライフ サイクル イベントと破棄の処理を調整し、解放するメソッドが呼び出される、<xref:System.Runtime.Caching.ChangeMonitor>インスタンス、インスタンスがガベージ コレクトできるようにします。</span><span class="sxs-lookup"><span data-stu-id="8ddad-163">The public <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is invoked to coordinate the disposal process with key life-cycle events of derived change-monitor classes (such as initialization), and to release the <xref:System.Runtime.Caching.ChangeMonitor> instance so that the instance can be garbage collected.</span></span> <span data-ttu-id="8ddad-164"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドがマネージ コードとアンマネージ リソースを破棄する変更監視派生クラスによって実装されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-164">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is implemented by derived change-monitor classes to dispose of their managed and unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="changeMonitor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ddad-165"><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-165">Releases all resources that are used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ddad-166"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドを呼び出す、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>の派生クラスの 1 つだけの時間、初めて呼び出されたメソッド。</span><span class="sxs-lookup"><span data-stu-id="8ddad-166">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method invokes the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method of derived classes only one time, the first time it is called.</span></span> <span data-ttu-id="8ddad-167">後続の呼び出し、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドは影響ありません。</span><span class="sxs-lookup"><span data-stu-id="8ddad-167">Subsequent calls to the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method have no effect.</span></span> <span data-ttu-id="8ddad-168">メソッドが呼び出された後、<xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>プロパティに設定されて`true`します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-168">After the method has been called, the <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="8ddad-169"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>を破棄するオーバー ロードを呼び出す必要があります、<xref:System.Runtime.Caching.ChangeMonitor>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="8ddad-169">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload must be called to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="8ddad-170">次に、dispose メソッドを呼び出す場合の規則を示します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-170">The following are the rules for calling the dispose method:</span></span>  
  
-   <span data-ttu-id="8ddad-171">キャッシュに項目が、前に、呼び出し元の責任を破棄することが、<xref:System.Runtime.Caching.ChangeMonitor>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="8ddad-171">Before an item is inserted into the cache, it is the caller's responsibility to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
-   <span data-ttu-id="8ddad-172">キャッシュ項目を 1 回、<xref:System.Runtime.Caching.ChangeMonitor>それに関連付けられているインスタンスは、キャッシュ、ように注意してください、キャッシュ実装者に渡される<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>と呼ばれる場合は、挿入が失敗した場合でもです。</span><span class="sxs-lookup"><span data-stu-id="8ddad-172">Once cache item and the <xref:System.Runtime.Caching.ChangeMonitor> instances that are associated with it are passed to a cache, the cache implementer that must make sure that <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> is called, even if the insert fails.</span></span>  
  
-   <span data-ttu-id="8ddad-173">項目とそれに関連付けられた後<xref:System.Runtime.Caching.ChangeMonitor>インスタンスがキャッシュに渡される、ため、呼び出し元が、依存関係を破棄する必要があるときに、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドが呼び出されると、呼び出しが、依存関係が変更されたかのように扱われます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-173">After an item and its associated <xref:System.Runtime.Caching.ChangeMonitor> instances are passed to a cache, the caller must not dispose the dependency because when the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is called, the call is treated as if the dependency has changed.</span></span> <span data-ttu-id="8ddad-174">結果として、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドが自動的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-174">As a result, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is automatically invoked.</span></span>  
  
-   <span data-ttu-id="8ddad-175">これらの規則を考慮に入れて、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドは、次の方法のいずれかで呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-175">Taking these rules into consideration, the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method must be called in one of the following ways:</span></span>  
  
    -   <span data-ttu-id="8ddad-176">ユーザーが呼び出す必要があります、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>変更監視派生インスタンスをキャッシュに挿入する場合のメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="8ddad-176">Users must call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method overload if they decide not to insert the derived change-monitor instance into a cache.</span></span>  
  
    -   <span data-ttu-id="8ddad-177">キャッシュ実装は通話、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>オーバー ロードの実装は、変更監視インスタンスをオブジェクト キャッシュに挿入しようとしていますが、挿入が失敗した場合。</span><span class="sxs-lookup"><span data-stu-id="8ddad-177">The cache implementation is responsible for calling the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</span></span> <span data-ttu-id="8ddad-178">挿入の試行では、例外が発生、キャッシュの実装は、関連付けられている依存関係を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-178">When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</span></span>  
  
    -   <span data-ttu-id="8ddad-179">キャッシュ エントリが削除された場合、キャッシュ実装では、依存関係は破棄もする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-179">If the cache entry is removed, the cache implementation must also dispose the dependency.</span></span>  
  
 <span data-ttu-id="8ddad-180">内部実装、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドが自動的に呼び出し、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>後に、コールバックを呼び出すことがを介して登録された、<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8ddad-180">The internal implementation of the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method after it calls a callback that is registered through the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ddad-181">この自動 dispose イベントの発生時に、場合にのみ発生の初期化、<xref:System.Runtime.Caching.ChangeMonitor>インスタンスは以前に完了しました。</span><span class="sxs-lookup"><span data-stu-id="8ddad-181">This automatic dispose during the event firing only occurs if the initialization of the <xref:System.Runtime.Caching.ChangeMonitor> instance previously completed.</span></span>  
  
 <span data-ttu-id="8ddad-182">派生の変更モニターのコンス トラクターを呼び出すと、<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>メソッドの変更モニターの状態が既に変更されている場合 (つまり、監視されている状態が既に変更されたコンス トラクターがまだアクティブの場合)、<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>メソッドは変更監視が自動的に破棄します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-182">When a derived change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method will automatically dispose the change monitor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ddad-183">ユーザーは呼び出さないでください、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8ddad-183">Users should not call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="8ddad-184">ただし、メソッドの呼び出しからユーザーを防ぐことはできません。</span><span class="sxs-lookup"><span data-stu-id="8ddad-184">However, you cannot prevent users from calling the method.</span></span> <span data-ttu-id="8ddad-185">そのため、その場合、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-185">Therefore, if they do, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked.</span></span> <span data-ttu-id="8ddad-186">その場合は、キャッシュ エントリは、依存関係が変更されたかのように通知されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-186">In that case, the cache entry is notified as if the dependency has changed.</span></span>  
  
 <span data-ttu-id="8ddad-187">派生クラスのオーバーライドを防ぐために<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッド、メソッドは明示的なインターフェイスの実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8ddad-187">To prevent derived classes from overriding <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method, the method is not an explicit interface implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ddad-188"><see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> メソッドを呼び出した変更監視派生クラスで初期化が完了していません。</span><span class="sxs-lookup"><span data-stu-id="8ddad-188">Initialization is not complete in the derived change-monitor class that called the base <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.</span></span></exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit" Usage="changeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="8ddad-189">マネージド リソース、アンマネージド リソース、および <see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンスへのすべての参照を解放する場合は <see langword="true" />。アンマネージド リソースのみを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ddad-189"><see langword="true" /> to release managed and unmanaged resources and any references to a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance; <see langword="false" /> to release only unmanaged resources.</span></span> <span data-ttu-id="8ddad-190"><see langword="false" />を渡すと、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> メソッドが <see langword="finalizer" /> スレッドによって呼び出されますが、すべての外部マネージド参照は既にガベージ コレクトされているため、有効ではなくなっている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-190">When <see langword="false" /> is passed, the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method is called by a <see langword="finalizer" /> thread and any external managed references are likely no longer valid because they have already been garbage collected.</span></span></param>
        <summary><span data-ttu-id="8ddad-191">すべてのマネージド リソースおよびアンマネージド リソースと、<see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンスへのすべての参照を解放します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-191">Releases all managed and unmanaged resources and any references to the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span></span> <span data-ttu-id="8ddad-192">このオーバーロードは、変更監視クラスの派生クラスで実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-192">This overload must be implemented by derived change-monitor classes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ddad-193">ときに、値の`disposing`値は`true`、すべてのマネージ コードとアンマネージ リソースを破棄し、変更監視派生インスタンスがガベージ コレクトできるように、このオブジェクトへの参照は解放されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-193">When the value of `disposing` value is `true`, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</span></span> <span data-ttu-id="8ddad-194">保証されますベース<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドは、実装を呼び出します<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッド 1 回だけです。</span><span class="sxs-lookup"><span data-stu-id="8ddad-194">It is guaranteed that the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method will invoke the implemented <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method only one time.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="8ddad-195">変更監視機能を実装する必要があります、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />マネージし、アンマネージ リソースのオーバー ロードすべてを解放するときの値<paramref name="disposing" />は<see langword="true" />します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-195">A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload to release all managed and unmanaged resources when the value of <paramref name="disposing" /> is <see langword="true" />.</span></span> <span data-ttu-id="8ddad-196"><see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />を持つメソッド オーバー ロードを<paramref name="disposing" />@property<see langword="true" />最初に、インスタンスが破棄されるときに 1 つだけの時間を具体的には、呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-196">The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method overload that has a <paramref name="disposing" /> value of <see langword="true" /> is called only one time, namely, when the instance is disposed for the first time.</span></span> <span data-ttu-id="8ddad-197">変更監視機能を呼び出してはならない、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />直接オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="8ddad-197">A change monitor must not call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload directly.</span></span> <span data-ttu-id="8ddad-198">派生変更監視呼び出すパブリック パラメーターのないことができます<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />ベース メソッド<see cref="T:System.Runtime.Caching.ChangeMonitor" />クラス。</span><span class="sxs-lookup"><span data-stu-id="8ddad-198">A derived change monitor can call the public parameter-less <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method on the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span></span>  
  
<span data-ttu-id="8ddad-199">または、変更の監視には、ファイナライザー メソッドを実装できます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-199">Alternatively, a change monitor can implement a finalizer method.</span></span> <span data-ttu-id="8ddad-200">その場合は、ファイナライザーを呼び出すことができます、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />メソッドを渡して、<paramref name="disposing" />の値<see langword="false" />します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-200">In that case, the finalizer can invoke the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method and pass it a <paramref name="disposing" /> value of <see langword="false" />.</span></span> <span data-ttu-id="8ddad-201">ただし、通常必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ddad-201">However, this is usually unnecessary.</span></span> <span data-ttu-id="8ddad-202">依存関係の変更の監視は通常、変更監視インスタンスへの参照を維持するサービスを実行します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-202">Monitoring for dependency changes is typically performed by a service that maintains a reference to the change-monitor instance.</span></span> <span data-ttu-id="8ddad-203">参照により、インスタンスがガベージ コレクトされ、不要なファイナライザー メソッドはそのため。</span><span class="sxs-lookup"><span data-stu-id="8ddad-203">The reference prevents the instance from being garbage collected, and therefore makes a finalizer method unnecessary.</span></span> <span data-ttu-id="8ddad-204">依存関係が変更されたときに、メモリ リークを回避するために、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッド (初期化が完了していない) 場合を除き、変更監視インスタンスを破棄します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-204">To avoid memory leaks, when a dependency changes, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method disposes the change-monitor instance (unless initialization has not finished).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ddad-205"><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスによって監視されている状態が変更されたことを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-205">Gets a value that indicates that the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class has changed.</span></span></summary>
        <value><span data-ttu-id="8ddad-206"><see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンスによって監視されている状態が変更された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ddad-206"><see langword="true" /> if the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance has changed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ddad-207">派生では、このプロパティの値をチェックする<xref:System.Runtime.Caching.ChangeMonitor>クラスに依存関係が変更されたかどうかを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ddad-207">You can check the value of this property in a derived <xref:System.Runtime.Caching.ChangeMonitor> class to see whether a dependency has changed.</span></span>  
  
 <span data-ttu-id="8ddad-208">値に設定されて`true`依存関係の変更が発生します (されているとき、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドが呼び出されます)。</span><span class="sxs-lookup"><span data-stu-id="8ddad-208">The value is set to `true` when a dependency change occurs (that is, when the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called).</span></span> <span data-ttu-id="8ddad-209">後に、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドは、派生クラスの値、<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティになります`true`かどうかに関係なく、<xref:System.Runtime.Caching.OnChangedCallback>への呼び出しによってインスタンスに通知されました、<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8ddad-209">After the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called by the derived class, the value of the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property will be `true`, regardless of whether a <xref:System.Runtime.Caching.OnChangedCallback> instance has been notified by a call to the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ddad-210">呼び出し元を確認できます、<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティを依存関係が変更されたかどうかを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ddad-210">Callers can check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property to see whether a dependency has changed.</span></span> <span data-ttu-id="8ddad-211">ただし、マルチ スレッド環境で、簡素化され、保守しやすくなりますアプローチは確認せず、データをキャッシュ実装を挿入する、<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="8ddad-211">However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property.</span></span> <span data-ttu-id="8ddad-212">キャッシュ実装を確認する必要があります、<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティとする必要がありますいない挿入を実行または関連付けられている 1 つまたは複数の依存関係が既に変更されている場合は、操作を設定します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-212">Cache implementations must check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializationComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializationComplete();" />
      <MemberSignature Language="F#" Value="member this.InitializationComplete : unit -&gt; unit" Usage="changeMonitor.InitializationComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ddad-213">派生クラスのコンストラクターから呼び出され、初期化が完了したことを示します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-213">Called from the constructor of derived classes to indicate that initialization is finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ddad-214">初期化が派生クラスで完了する前に、依存関係が変更された場合、派生クラスのコンス トラクターを呼び出す必要があります、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8ddad-214">If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span>  
  
 <span data-ttu-id="8ddad-215">ときに、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドが呼び出される、<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティが自動的に設定`true`によって変更の監視。</span><span class="sxs-lookup"><span data-stu-id="8ddad-215">When the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked, the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is automatically set to `true` by the change monitor.</span></span> <span data-ttu-id="8ddad-216">その結果、変更監視のコンス トラクターを呼び出すと、<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>メソッド、基底クラスの呼び出しが自動的に、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8ddad-216">As a result, when the change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, the base class will automatically call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="8ddad-217">初期化が完了するの場合、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドは、変更監視派生インスタンスを自動的に破棄します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-217">If initialization is complete, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically disposes the derived change-monitor instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="8ddad-218">派生クラスのコンス トラクターは、ベースを呼び出す必要があります<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッドの前に、コンス トラクターを返します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-218">The constructor of a derived class must call the base <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the constructor returns.</span></span> <span data-ttu-id="8ddad-219">派生クラスのコンス トラクターを呼び出すことができます、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドにした場合のみ<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />が呼び出されるため、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />初期化が完了していない場合、メソッドが例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8ddad-219">The constructor of a derived class can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ddad-220"><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの派生インスタンスが破棄されたことを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-220">Gets a value that indicates that the derived instance of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class is disposed.</span></span></summary>
        <value><span data-ttu-id="8ddad-221">インスタンスが破棄された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ddad-221"><see langword="true" /> if the instance is disposed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ddad-222">設定されて`true`ベース後<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドの呼び出し、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>インスタンスを破棄する派生クラスのメソッド。</span><span class="sxs-lookup"><span data-stu-id="8ddad-222">The property is set to `true` after the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method in a derived class to dispose of the instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyOnChanged(System::Runtime::Caching::OnChangedCallback ^ onChangedCallback);" />
      <MemberSignature Language="F#" Value="member this.NotifyOnChanged : System.Runtime.Caching.OnChangedCallback -&gt; unit" Usage="changeMonitor.NotifyOnChanged onChangedCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback"><span data-ttu-id="8ddad-223">依存関係が変更されたときに呼び出されるメソッドへの参照。</span><span class="sxs-lookup"><span data-stu-id="8ddad-223">A reference to a method that is invoked when a dependency has changed.</span></span></param>
        <summary><span data-ttu-id="8ddad-224">コールバックを登録し、依存関係が変化したときに <see cref="T:System.Runtime.Caching.ObjectCache" /> デリゲートを通して <see cref="T:System.Runtime.Caching.OnChangedCallback" /> インスタンスに通知するために、キャッシュの実装側によって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-224">Called by Cache implementers to register a callback and notify an <see cref="T:System.Runtime.Caching.ObjectCache" /> instance through the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> delegate when a dependency has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ddad-225">キャッシュ実装は、自体を変更監視機能に接続するのにこのメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-225">Cache implementers use this method to wire themselves up to a change monitor.</span></span> <span data-ttu-id="8ddad-226">1 つを関連付けること、またはキャッシュ項目のモニターのしきい値を変更の詳細は、渡す、<xref:System.Runtime.Caching.CacheItemPolicy>キャッシュ項目に設定されている変更モニターのプロパティを持つインスタンス。</span><span class="sxs-lookup"><span data-stu-id="8ddad-226">If you associate one or more change monitors with the cache item, you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance with a populated change monitors property to the cache item.</span></span> <span data-ttu-id="8ddad-227">反復処理する、キャッシュ実装側がサポートしていますがモニターを変更することは、<xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>プロパティとレジスタ、<xref:System.Runtime.Caching.OnChangedCallback>各デリゲートが検出したモニターを変更します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-227">A cache implementer that supports change monitors is responsible for iterating over the <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> property and register the <xref:System.Runtime.Caching.OnChangedCallback> delegates with each change monitor that it finds.</span></span>  
  
 <span data-ttu-id="8ddad-228"><xref:System.Runtime.Caching.OnChangedCallback>デリゲートには、省略可能な状態のパラメーターが含まれています、変更の具体的なモニターの実装は省略可能な状態情報を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-228">Because the <xref:System.Runtime.Caching.OnChangedCallback> delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</span></span> <span data-ttu-id="8ddad-229">キャッシュ実装側は、カスタムの変更の監視は、コールバックの一部として渡される状態の種類の明示的な依存関係を実行できるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-229">The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ddad-230">状態の種類には、基本のキャッシュの拡張性 API の明示的な依存関係の要件はありません。</span><span class="sxs-lookup"><span data-stu-id="8ddad-230">The base cache extensibility API has no requirement for explicit dependency on the type of state.</span></span>  
  
 <span data-ttu-id="8ddad-231">実装、<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドが自動的にモニターの状態が、時に既に変更されたかどうかを決定<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-231">The implementation of the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method automatically determines whether the state of the monitor has already changed at the time <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called.</span></span> <span data-ttu-id="8ddad-232">場合、<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティは`true`、メソッドを自動的に呼び出します、<xref:System.Runtime.Caching.OnChangedCallback>を通じて、登録されたイベント ハンドラー、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8ddad-232">If the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is `true`, then the method automatically calls the <xref:System.Runtime.Caching.OnChangedCallback> event handler, that was registered, through the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span> <span data-ttu-id="8ddad-233">これは、キャッシュ実装は、キャッシュ実装は、監視機能を取得し、まで、その接続自体の時間の変更モニターを作成するときの基になる監視の状態が変化する可能性があるために発生します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-233">This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</span></span> <span data-ttu-id="8ddad-234">かどうかに状態が既に変更し、オブジェクトに渡される、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドは`null`します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-234">If the state has already changed then the object that is passed to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is `null`.</span></span>  
  
 <span data-ttu-id="8ddad-235"><xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドは、1 回だけ呼び出すことができ、後続の呼び出しで例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-235">The <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method can be invoked only one time, and will throw an exception on subsequent calls.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ddad-236">コールバック メソッドが既に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8ddad-236">The callback method has already been invoked.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ddad-237"><paramref name="onChangedCallback" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ddad-237"><paramref name="onChangedCallback" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="8ddad-238">1.呼び出す必要があります、<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />任意の依存関係の変更の通知を受け取るメソッド。</span><span class="sxs-lookup"><span data-stu-id="8ddad-238">1.  You must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method to be notified of any dependency changes.</span></span> <span data-ttu-id="8ddad-239">依存関係の変更が既に発生している場合、<see cref="T:System.Runtime.Caching.OnChangedCallback" />インスタンスときに呼び出される、<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-239">If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called.</span></span> <span data-ttu-id="8ddad-240">それ以外の場合、<see cref="T:System.Runtime.Caching.OnChangedCallback" />インスタンスは 1 回呼び出されるいずれかの場合、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドが呼び出されたとき、または、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドが呼び出されるか早い方です。</span><span class="sxs-lookup"><span data-stu-id="8ddad-240">Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called one time, either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, whichever occurs first.</span></span> <span data-ttu-id="8ddad-241"><see cref="T:System.Runtime.Caching.OnChangedCallback" />キャッシュの実装によって提供されるインスタンスがキャッシュ エントリの削除し、キャッシュ呼び出し元によって要求された場合は、必要な変更またはキャッシュの最初の呼び出し元に戻す、更新イベントを発生させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-241">The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance provided by the cache implementation should remove the cache entry and if it is requested by the cache caller, raise the necessary change or update event back to the original cache caller.</span></span>  
  
<span data-ttu-id="8ddad-242">2.</span><span class="sxs-lookup"><span data-stu-id="8ddad-242">2.</span></span>  <span data-ttu-id="8ddad-243">オブジェクト キャッシュの実装では、依存関係の変更に関連付けられているキャッシュ エントリを削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-243">The object cache implementation must remove the cache entry that is associated with a dependency change.</span></span></para></block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : obj -&gt; unit" Usage="changeMonitor.OnChanged state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="8ddad-244">変更イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="8ddad-244">The data for the change event.</span></span> <span data-ttu-id="8ddad-245">この値は、<see langword="null" /> の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-245">This value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="8ddad-246">依存関係が変更されたときに、イベントを発生させるために派生クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-246">Called by derived classes to raise the event when a dependency changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ddad-247">通常、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>依存関係の変更が発生した場合、メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-247">Typically, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called when dependency changes occur.</span></span> <span data-ttu-id="8ddad-248"><xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>変更監視インスタンスが破棄されるが、コールバックが既に呼び出されていない場合にのみ、破棄が発生するときにもメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-248">The <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</span></span>  
  
 <span data-ttu-id="8ddad-249">場合、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドは、前に呼び出されます、<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドが呼び出されると、状態データへの呼び出しを<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドは、キャッシュの実装で保存されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-249">If the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called before the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called, the state data from the call to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is saved by the cache implementation.</span></span> <span data-ttu-id="8ddad-250">コールバックも、<xref:System.Runtime.Caching.OnChangedCallback>すぐにメソッドが呼び出されたときに、<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-250">Also, the callback to the <xref:System.Runtime.Caching.OnChangedCallback> method is invoked immediately when the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueId : string" Usage="System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ddad-251"><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスのインスタンスを表す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ddad-251">Gets a value that represents the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class instance.</span></span></summary>
        <value><span data-ttu-id="8ddad-252">変更監視インスタンスの識別子。</span><span class="sxs-lookup"><span data-stu-id="8ddad-252">The identifier for a change-monitor instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ddad-253"><xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A>プロパティ値通常から成る名結合すると文字列データの依存関係を一意に識別子によって監視されているデータ、<xref:System.Runtime.Caching.ChangeMonitor>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="8ddad-253">The <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="8ddad-254">値、<xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A>プロパティは文字列です。</span><span class="sxs-lookup"><span data-stu-id="8ddad-254">The value of the <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property is a string.</span></span> <span data-ttu-id="8ddad-255">一意の ID を割り当てる文字列の値が使用される、<xref:System.Runtime.Caching.ChangeMonitor>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="8ddad-255">The value of the string is used to assign the unique ID of the <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="8ddad-256">プロパティをオーバーライドして一意の ID を割り当てるために、プロパティの文字列値のカスタム実装を定義することができます。</span><span class="sxs-lookup"><span data-stu-id="8ddad-256">By overriding the property, you can define a custom implementation for the string value of the property in order to assign it a unique ID.</span></span></para></block>
        <block subset="none" type="overrides"><para><span data-ttu-id="8ddad-257">派生クラスでは、コンス トラクターでプロパティの値を設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ddad-257">In derived classes, you must set the value of the property in the constructor.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>