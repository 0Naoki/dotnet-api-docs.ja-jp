<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7f673552db74d3ed1ff4f6fe8dcc10612167e5c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36542113" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChangeMonitor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeMonitor abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type ChangeMonitor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>キャッシュ アイテムが依存するデータの状態の変化を監視する、派生したカスタム型の基本クラスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor>クラスは、特定のキャッシュの実装のために特化したモニターの派生クラスの基底クラスとして使用します。 A<xref:System.Runtime.Caching.ChangeMonitor>インスタンスはキャッシュ アイテムが依存するデータの状態の変化を監視します。 たとえば、アイテムには、内容がキャッシュされているファイルやデータ エンティティができます。 ファイルまたはデータのエンティティが更新された場合も、関連付けられているキャッシュ エントリを変更する必要があります。 監視できる共通の項目には、データ エンティティ (データベース フィールド、値、行、またはテーブル) など、別のキャッシュ エントリとファイルおよびファイル属性が含まれます。  
  
 依存関係の変更は、依存関係の状態の変更です。 一般的なキャッシュの実装で後に、<xref:System.Runtime.Caching.ChangeMonitor>インスタンス キャッシュ依存関係が変更されたことを通知する、キャッシュが挿入されたキャッシュ エントリを無効化など、必要なアクションを実行します。  
  
 派生<xref:System.Runtime.Caching.ChangeMonitor>固有のさまざまなデータ ストアの依存関係の変更を監視するクラスをカスタマイズできます。 たとえば、ファイル システム、物理メモリ、またはデータベースのキャッシュ実装があります。 <xref:System.Runtime.Caching.ChangeMonitor>クラスは、アラートの変更が発生したキャッシュ調べ、キャッシュの外部で発生する変更。  
  
 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]から派生する次のクラスが含まれます<xref:System.Runtime.Caching.ChangeMonitor>クラス。  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 これらの各クラスは、さまざまな種類の依存関係と連携します。 たとえば、派生<xref:System.Runtime.Caching.FileChangeMonitor>クラスは、キャッシュ項目が依存しているファイル システム データ (ファイルとフォルダー) のキャッシュへの変更を監視します。  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
    <block subset="none" type="overrides">
      <para>カスタムを作成する場合は、キャッシュの実装や派生の変更モニターの種類、特定のガイドラインに従う必要があります。次の一覧は、次のガイドラインをまとめたものです。詳細については、個々 のメソッドまたはプロパティのドキュメントを参照してください。 派生クラスのコンス トラクターを設定する必要があります、<see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />プロパティの監視を開始し、呼び出す<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッド、メソッドが戻る前にします。コンス トラクターを呼び出すことができますのみコンス トラクターは、構築中にエラーが発生し、リソースを破棄する必要がある場合、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />オーバー ロードの後に、<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />ため、メソッドが呼び出された、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />オーバー ロードがスローされます、 <see cref="T:System.InvalidOperationException" />初期化が完了していない場合は例外です。 -初期化する前に監視されているデータが完了に変更が発生した場合は、コンス トラクターを呼び出す必要があります、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドを呼び出す前に、<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッド。 -後派生<see cref="T:System.Runtime.Caching.ChangeMonitor" />型がインスタンス化される、カスタムにモニターを挿入する必要があります<see cref="T:System.Runtime.Caching.ObjectCache" />実装します。変更の監視を使用して完了した場合、または、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッド。 -後、<see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスが挿入、 <see cref="T:System.Runtime.Caching.ObjectCache" /> 、実装、<see cref="T:System.Runtime.Caching.ObjectCache" />インスタンスは、変更の監視が破棄されたことが必要です。カーソルが無効であり、例外が発生した場合でも、<see cref="T:System.Runtime.Caching.ObjectCache" />実装を呼び出す必要があります、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />オーバー ロードします。 -派生変更監視機能が、キャッシュに挿入された後、<see cref="T:System.Runtime.Caching.ObjectCache" />実装を呼び出す必要があります<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />を渡すことによって、<see cref="T:System.Runtime.Caching.OnChangedCallback" />オブジェクト。<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />メソッドは、1 回だけ呼び出すことができます。依存関係の変更が既に発生している場合、<see cref="T:System.Runtime.Caching.OnChangedCallback" />インスタンスがすぐに呼び出されるときに<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />が呼び出されます。それ以外の場合、<see cref="T:System.Runtime.Caching.OnChangedCallback" />インスタンスは 1 回だけ呼び出されます。この 1 回の呼び出しが発生したかときに、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />ため、メソッドが呼び出された、<see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスには、変更が検出されたとき、または、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />でメソッドが呼び出さ、 <see cref="T:System.Runtime.Caching.ChangeMonitor" />、か早い方。 -<see cref="T:System.Runtime.Caching.OnChangedCallback" />インスタンスによって提供される、<see cref="T:System.Runtime.Caching.ObjectCache" />実装が関連付けられているキャッシュ エントリの削除し、を使用して、理由を指定する必要があります、<see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" />列挙体。 は、<see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスで呼び出すことができます、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッド キャッシュ実装が呼び出される前にいずれか<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />メソッド以降。場合、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドは、前に呼び出されます<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />が呼び出され、基本<see cref="T:System.Runtime.Caching.ChangeMonitor" />実装は、この問題が発生しているキャッシュへの通知し、に渡されるコールバックをトリガーする<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />とすぐに<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />が呼び出されます。渡される任意の状態データ、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドは変更の監視によって保存され、その後に渡される、<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />メソッドと、<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />メソッドが呼び出されます。 の変更監視を実装する必要があります、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />メソッド。詳細については、次を参照してください。、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />メソッドのドキュメント。 -<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />を破棄するメソッドのオーバー ロードを呼び出す必要があります、<see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンス。Dispose を呼び出す場合の規則は、次のとおり:-を破棄する呼び出し元の責任は、キャッシュに項目が、前に、<see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンス。 のキャッシュ項目 1 回、<see cref="T:System.Runtime.Caching.ChangeMonitor" />それに関連付けられているインスタンスがキャッシュに渡される、キャッシュ実装する必要があることを確認する<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドが呼び出されると、挿入が失敗した場合でもです。 -後の項目とそれに関連付けられた<see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスがキャッシュに渡される、ため、呼び出し元が、依存関係を破棄する必要があるときに、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドが呼び出されると、呼び出しが、依存関係が変更されたかのように扱われます。結果として、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドが自動的に呼び出されます。 -これらの規則を考慮に入れて、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドは、次の方法のいずれかで呼び出す必要があります:-ユーザーが呼び出す必要があります、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />変更監視派生インスタンスをキャッシュに挿入する場合のメソッドのオーバー ロードします。 のキャッシュ実装は呼び出し元場合、実装は、変更監視インスタンスをオブジェクト キャッシュに挿入しようとしていますが、挿入が失敗した、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />オーバー ロードします。挿入の試行では、例外が発生、関連付けられている依存関係のキャッシュの実装を破棄する必要があります。 場合は、キャッシュ エントリを削除すると、キャッシュの実装が依存関係の dispose もする必要があります。 -内部実装の<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドが自動的に呼び出し、<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />後に、コールバックを呼び出すことがを介して登録された<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />。<block subset="none" type="note"><para> この自動呼び出しイベントの発生時に、dispose メソッドには、場合にのみ発生の初期化、<see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスが以前に完了しました。</para></block>  派生の変更モニターのコンス トラクターを呼び出すと、<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />変更モニターの状態が既に変更されている場合、メソッド (コンス トラクターがまだアクティブなときに変更を既に監視されている状態)、<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッドには変更の監視を自動的に破棄します。 -<see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />プロパティに設定されて<see langword="true" />後、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドかどうかに関係なく、変更監視派生インスタンスによって呼び出されます、<see cref="T:System.Runtime.Caching.OnChangedCallback" />への呼び出しによってオブジェクトが設定されている、<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />メソッドかどうか。</para>
    </block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChangeMonitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの新しいインスタンスを初期化します。 このコンストラクターは、派生クラスのコンストラクターから呼び出されて基本クラスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor>クラスに既定のコンス トラクター。 ただし、クラスから継承した基本<xref:System.Runtime.Caching.ChangeMonitor>クラスおよびカスタム変更監視の定義の動作は、コンス トラクターで初期化を実行する必要があります。 詳細については、継承クラスのセクションのノートを参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生クラスのコンス トラクターを設定する必要があります、<see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />プロパティの監視を開始し、呼び出し、<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />クラスを返す前にします。初期化の前に、依存関係の変更が完了 (たとえば、キャッシュに依存するキャッシュ キーが見つからない場合など) の場合は、コンス トラクターを呼び出す必要があります、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドを呼び出す前に、<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッド。この場合、コンス トラクターを呼び出すことができます、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドにした場合のみ、<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッドが呼び出されるため、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />初期化が完了していない場合、メソッドが例外をスローします。</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドを使用して、リリース、<xref:System.Runtime.Caching.ChangeMonitor>インスタンスと関連するリソース。 パブリック<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>変更監視派生クラス (初期化) などのキーのライフ サイクル イベントと破棄の処理を調整し、解放するメソッドが呼び出される、<xref:System.Runtime.Caching.ChangeMonitor>インスタンス、インスタンスがガベージ コレクトできるようにします。 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドがマネージ コードとアンマネージ リソースを破棄する変更監視派生クラスによって実装されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="changeMonitor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドを呼び出す、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>の派生クラスの 1 つだけの時間、初めて呼び出されたメソッド。 後続の呼び出し、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドは影響ありません。 メソッドが呼び出された後、<xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>プロパティに設定されて`true`します。  
  
 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>を破棄するオーバー ロードを呼び出す必要があります、<xref:System.Runtime.Caching.ChangeMonitor>インスタンス。 次に、dispose メソッドを呼び出す場合の規則を示します。  
  
-   キャッシュに項目が、前に、呼び出し元の責任を破棄することが、<xref:System.Runtime.Caching.ChangeMonitor>インスタンス。  
  
-   キャッシュ項目を 1 回、<xref:System.Runtime.Caching.ChangeMonitor>それに関連付けられているインスタンスは、キャッシュ、ように注意してください、キャッシュ実装者に渡される<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>と呼ばれる場合は、挿入が失敗した場合でもです。  
  
-   項目とそれに関連付けられた後<xref:System.Runtime.Caching.ChangeMonitor>インスタンスがキャッシュに渡される、ため、呼び出し元が、依存関係を破棄する必要があるときに、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドが呼び出されると、呼び出しが、依存関係が変更されたかのように扱われます。 結果として、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドが自動的に呼び出されます。  
  
-   これらの規則を考慮に入れて、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドは、次の方法のいずれかで呼び出す必要があります。  
  
    -   ユーザーが呼び出す必要があります、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>変更監視派生インスタンスをキャッシュに挿入する場合のメソッドのオーバー ロードします。  
  
    -   キャッシュ実装は通話、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>オーバー ロードの実装は、変更監視インスタンスをオブジェクト キャッシュに挿入しようとしていますが、挿入が失敗した場合。 挿入の試行では、例外が発生、キャッシュの実装は、関連付けられている依存関係を破棄する必要があります。  
  
    -   キャッシュ エントリが削除された場合、キャッシュ実装では、依存関係は破棄もする必要があります。  
  
 内部実装、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドが自動的に呼び出し、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>後に、コールバックを呼び出すことがを介して登録された、<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッド。  
  
> [!NOTE]
>  この自動 dispose イベントの発生時に、場合にのみ発生の初期化、<xref:System.Runtime.Caching.ChangeMonitor>インスタンスは以前に完了しました。  
  
 派生の変更モニターのコンス トラクターを呼び出すと、<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>メソッドの変更モニターの状態が既に変更されている場合 (つまり、監視されている状態が既に変更されたコンス トラクターがまだアクティブの場合)、<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>メソッドは変更監視が自動的に破棄します。  
  
> [!NOTE]
>  ユーザーは呼び出さないでください、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッド。 ただし、メソッドの呼び出しからユーザーを防ぐことはできません。 そのため、その場合、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドが呼び出されます。 その場合は、キャッシュ エントリは、依存関係が変更されたかのように通知されます。  
  
 派生クラスのオーバーライドを防ぐために<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッド、メソッドは明示的なインターフェイスの実装ではありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> メソッドを呼び出した変更監視派生クラスで初期化が完了していません。</exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit" Usage="changeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソース、アンマネージド リソース、および <see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンスへのすべての参照を解放する場合は <see langword="true" />。アンマネージド リソースのみを解放する場合は <see langword="false" />。 <see langword="false" />を渡すと、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> メソッドが <see langword="finalizer" /> スレッドによって呼び出されますが、すべての外部マネージド参照は既にガベージ コレクトされているため、有効ではなくなっている可能性があります。</param>
        <summary>すべてのマネージド リソースおよびアンマネージド リソースと、<see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンスへのすべての参照を解放します。 このオーバーロードは、変更監視クラスの派生クラスで実装する必要があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、値の`disposing`値は`true`、すべてのマネージ コードとアンマネージ リソースを破棄し、変更監視派生インスタンスがガベージ コレクトできるように、このオブジェクトへの参照は解放されます。 保証されますベース<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドは、実装を呼び出します<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッド 1 回だけです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>変更監視機能を実装する必要があります、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />マネージし、アンマネージ リソースのオーバー ロードすべてを解放するときの値<paramref name="disposing" />は<see langword="true" />します。<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />を持つメソッド オーバー ロードを<paramref name="disposing" />@property<see langword="true" />最初に、インスタンスが破棄されるときに 1 つだけの時間を具体的には、呼び出されます。変更監視機能を呼び出してはならない、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />直接オーバー ロードします。派生変更監視呼び出すパブリック パラメーターのないことができます<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />ベース メソッド<see cref="T:System.Runtime.Caching.ChangeMonitor" />クラス。または、変更の監視には、ファイナライザー メソッドを実装できます。その場合は、ファイナライザーを呼び出すことができます、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />メソッドを渡して、<paramref name="disposing" />の値<see langword="false" />します。ただし、通常必要はありません。依存関係の変更の監視は通常、変更監視インスタンスへの参照を維持するサービスを実行します。参照により、インスタンスがガベージ コレクトされ、不要なファイナライザー メソッドはそのため。依存関係が変更されたときに、メモリ リークを回避するために、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッド (初期化が完了していない) 場合を除き、変更監視インスタンスを破棄します。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスによって監視されている状態が変更されたことを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンスによって監視されている状態が変更された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生では、このプロパティの値をチェックする<xref:System.Runtime.Caching.ChangeMonitor>クラスに依存関係が変更されたかどうかを参照してください。  
  
 値に設定されて`true`依存関係の変更が発生します (されているとき、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドが呼び出されます)。 後に、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドは、派生クラスの値、<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティになります`true`かどうかに関係なく、<xref:System.Runtime.Caching.OnChangedCallback>への呼び出しによってインスタンスに通知されました、<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッド。  
  
> [!NOTE]
>  呼び出し元を確認できます、<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティを依存関係が変更されたかどうかを参照してください。 ただし、マルチ スレッド環境で、簡素化され、保守しやすくなりますアプローチは確認せず、データをキャッシュ実装を挿入する、<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティ。 キャッシュ実装を確認する必要があります、<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティとする必要がありますいない挿入を実行または関連付けられている 1 つまたは複数の依存関係が既に変更されている場合は、操作を設定します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializationComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializationComplete();" />
      <MemberSignature Language="F#" Value="member this.InitializationComplete : unit -&gt; unit" Usage="changeMonitor.InitializationComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスのコンストラクターから呼び出され、初期化が完了したことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初期化が派生クラスで完了する前に、依存関係が変更された場合、派生クラスのコンス トラクターを呼び出す必要があります、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッド。  
  
 ときに、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドが呼び出される、<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティが自動的に設定`true`によって変更の監視。 その結果、変更監視のコンス トラクターを呼び出すと、<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>メソッド、基底クラスの呼び出しが自動的に、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッド。 初期化が完了するの場合、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドは、変更監視派生インスタンスを自動的に破棄します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生クラスのコンス トラクターは、ベースを呼び出す必要があります<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッドの前に、コンス トラクターを返します。派生クラスのコンス トラクターを呼び出すことができます、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドにした場合のみ<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />が呼び出されるため、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />初期化が完了していない場合、メソッドが例外をスローします。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの派生インスタンスが破棄されたことを示す値を取得します。</summary>
        <value>インスタンスが破棄された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定されて`true`ベース後<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドの呼び出し、<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>インスタンスを破棄する派生クラスのメソッド。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyOnChanged(System::Runtime::Caching::OnChangedCallback ^ onChangedCallback);" />
      <MemberSignature Language="F#" Value="member this.NotifyOnChanged : System.Runtime.Caching.OnChangedCallback -&gt; unit" Usage="changeMonitor.NotifyOnChanged onChangedCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback">依存関係が変更されたときに呼び出されるメソッドへの参照。</param>
        <summary>コールバックを登録し、依存関係が変化したときに <see cref="T:System.Runtime.Caching.ObjectCache" /> デリゲートを通して <see cref="T:System.Runtime.Caching.OnChangedCallback" /> インスタンスに通知するために、キャッシュの実装側によって呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 キャッシュ実装は、自体を変更監視機能に接続するのにこのメソッドを使用します。 1 つを関連付けること、またはキャッシュ項目のモニターのしきい値を変更の詳細は、渡す、<xref:System.Runtime.Caching.CacheItemPolicy>キャッシュ項目に設定されている変更モニターのプロパティを持つインスタンス。 反復処理する、キャッシュ実装側がサポートしていますがモニターを変更することは、<xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>プロパティとレジスタ、<xref:System.Runtime.Caching.OnChangedCallback>各デリゲートが検出したモニターを変更します。  
  
 <xref:System.Runtime.Caching.OnChangedCallback>デリゲートには、省略可能な状態のパラメーターが含まれています、変更の具体的なモニターの実装は省略可能な状態情報を渡すことができます。 キャッシュ実装側は、カスタムの変更の監視は、コールバックの一部として渡される状態の種類の明示的な依存関係を実行できるかどうかを判断します。  
  
> [!NOTE]
>  状態の種類には、基本のキャッシュの拡張性 API の明示的な依存関係の要件はありません。  
  
 実装、<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドが自動的にモニターの状態が、時に既に変更されたかどうかを決定<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドが呼び出されます。 場合、<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティは`true`、メソッドを自動的に呼び出します、<xref:System.Runtime.Caching.OnChangedCallback>を通じて、登録されたイベント ハンドラー、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッド。 これは、キャッシュ実装は、キャッシュ実装は、監視機能を取得し、まで、その接続自体の時間の変更モニターを作成するときの基になる監視の状態が変化する可能性があるために発生します。 かどうかに状態が既に変更し、オブジェクトに渡される、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドは`null`します。  
  
 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドは、1 回だけ呼び出すことができ、後続の呼び出しで例外がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">コールバック メソッドが既に呼び出されています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="onChangedCallback" /> は <see langword="null" />です。</exception>
        <block subset="none" type="overrides">
          <para>1.呼び出す必要があります、<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />任意の依存関係の変更の通知を受け取るメソッド。依存関係の変更が既に発生している場合、<see cref="T:System.Runtime.Caching.OnChangedCallback" />インスタンスときに呼び出される、<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />が呼び出されます。それ以外の場合、<see cref="T:System.Runtime.Caching.OnChangedCallback" />インスタンスは 1 回呼び出されるいずれかの場合、<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドが呼び出されたとき、または、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドが呼び出されるか早い方です。<see cref="T:System.Runtime.Caching.OnChangedCallback" />キャッシュの実装によって提供されるインスタンスがキャッシュ エントリの削除し、キャッシュ呼び出し元によって要求された場合は、必要な変更またはキャッシュの最初の呼び出し元に戻す、更新イベントを発生させる必要があります。2.オブジェクト キャッシュの実装では、依存関係の変更に関連付けられているキャッシュ エントリを削除する必要があります。</para>
        </block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : obj -&gt; unit" Usage="changeMonitor.OnChanged state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">変更イベントのデータ。 この値は、<see langword="null" /> の場合もあります。</param>
        <summary>依存関係が変更されたときに、イベントを発生させるために派生クラスによって呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>依存関係の変更が発生した場合、メソッドが呼び出されます。 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>変更監視インスタンスが破棄されるが、コールバックが既に呼び出されていない場合にのみ、破棄が発生するときにもメソッドが呼び出されます。  
  
 場合、<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドは、前に呼び出されます、<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドが呼び出されると、状態データへの呼び出しを<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドは、キャッシュの実装で保存されます。 コールバックも、<xref:System.Runtime.Caching.OnChangedCallback>すぐにメソッドが呼び出されたときに、<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドが呼び出されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueId : string" Usage="System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスのインスタンスを表す値を取得します。</summary>
        <value>変更監視インスタンスの識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A>プロパティ値通常から成る名結合すると文字列データの依存関係を一意に識別子によって監視されているデータ、<xref:System.Runtime.Caching.ChangeMonitor>インスタンス。 値、<xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A>プロパティは文字列です。 一意の ID を割り当てる文字列の値が使用される、<xref:System.Runtime.Caching.ChangeMonitor>インスタンス。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>プロパティをオーバーライドして一意の ID を割り当てるために、プロパティの文字列値のカスタム実装を定義することができます。</para>
        </block>
        <block subset="none" type="overrides">
          <para>派生クラスでは、コンス トラクターでプロパティの値を設定する必要があります。</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>