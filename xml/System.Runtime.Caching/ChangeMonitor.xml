<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed10988d07dceeceb8c3790eaec2ec2b9b04d9fa" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69275582" /></Metadata><TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChangeMonitor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeMonitor abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type ChangeMonitor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="faf59-101">キャッシュ アイテムが依存するデータの状態の変化を監視する、派生したカスタム型の基本クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="faf59-101">Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faf59-102"><xref:System.Runtime.Caching.ChangeMonitor>クラスは、特定のキャッシュ実装に特化した、派生モニタークラスの基本クラスとして使用されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-102">The <xref:System.Runtime.Caching.ChangeMonitor> class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</span></span> <span data-ttu-id="faf59-103">インスタンス<xref:System.Runtime.Caching.ChangeMonitor>は、キャッシュ項目が依存しているデータの状態の変化を監視します。</span><span class="sxs-lookup"><span data-stu-id="faf59-103">A <xref:System.Runtime.Caching.ChangeMonitor> instance monitors changes in the state of data which a cache item depends on.</span></span> <span data-ttu-id="faf59-104">たとえば、アイテムには、内容がキャッシュされているファイルまたはデータエンティティを指定できます。</span><span class="sxs-lookup"><span data-stu-id="faf59-104">For example, the item can be a file or data entity whose contents are cached.</span></span> <span data-ttu-id="faf59-105">ファイルまたはデータエンティティが更新された場合は、関連付けられているキャッシュエントリも変更する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-105">If the file or data entity is updated, the associated cache entry must be changed also.</span></span> <span data-ttu-id="faf59-106">監視できる共通項目には、データエンティティ (データベースフィールド、値、行、テーブルなど)、別のキャッシュエントリ、ファイルとファイル属性などがあります。</span><span class="sxs-lookup"><span data-stu-id="faf59-106">Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</span></span>  
  
 <span data-ttu-id="faf59-107">依存関係の変更は、依存関係の状態の変化です。</span><span class="sxs-lookup"><span data-stu-id="faf59-107">A dependency change is a change in the state of a dependency.</span></span> <span data-ttu-id="faf59-108">一般的なキャッシュ実装では、インスタンス<xref:System.Runtime.Caching.ChangeMonitor>が依存関係が変更されたことをキャッシュに通知した後、キャッシュは、挿入されたキャッシュエントリを無効にするなど、必要なアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="faf59-108">In a typical cache implementation, after a <xref:System.Runtime.Caching.ChangeMonitor> instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</span></span>  
  
 <span data-ttu-id="faf59-109">派生<xref:System.Runtime.Caching.ChangeMonitor>クラスは、特定の異なるデータストアの依存関係の変更を監視するようにカスタマイズできます。</span><span class="sxs-lookup"><span data-stu-id="faf59-109">Derived <xref:System.Runtime.Caching.ChangeMonitor> classes can be customized to monitor dependency changes for specific different data stores.</span></span> <span data-ttu-id="faf59-110">たとえば、ファイルシステム、物理メモリ、またはデータベースに対するキャッシュの実装があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-110">For example, there are cache implementations for a file system, physical memory, or a database.</span></span> <span data-ttu-id="faf59-111">クラス<xref:System.Runtime.Caching.ChangeMonitor>は、キャッシュの外部で発生した変更を調査し、変更が発生したことをキャッシュに通知します。</span><span class="sxs-lookup"><span data-stu-id="faf59-111">The <xref:System.Runtime.Caching.ChangeMonitor> class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</span></span>  
  
 <span data-ttu-id="faf59-112">に[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]は、クラスから<xref:System.Runtime.Caching.ChangeMonitor>派生する次のクラスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="faf59-112">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] includes the following classes that derive from <xref:System.Runtime.Caching.ChangeMonitor> class:</span></span>  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 <span data-ttu-id="faf59-113">これらの各クラスは、さまざまな種類の依存関係で動作します。</span><span class="sxs-lookup"><span data-stu-id="faf59-113">Each of these classes works with different types of dependencies.</span></span> <span data-ttu-id="faf59-114">たとえば、派生<xref:System.Runtime.Caching.FileChangeMonitor>クラスは、キャッシュ項目が依存しているファイルシステムデータ (ファイルおよびフォルダー) のキャッシュへの変更を監視します。</span><span class="sxs-lookup"><span data-stu-id="faf59-114">For example, the derived <xref:System.Runtime.Caching.FileChangeMonitor> class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="faf59-115">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="faf59-115">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="faf59-116">カスタムキャッシュの実装または派生した変更モニターの種類を作成する場合は、特定のガイドラインに従う必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-116">If you create a custom cache implementation or a derived change monitor type, you must follow certain guidelines.</span></span> <span data-ttu-id="faf59-117">次の一覧は、これらのガイドラインをまとめたものです。</span><span class="sxs-lookup"><span data-stu-id="faf59-117">The following list summarizes these guidelines.</span></span> <span data-ttu-id="faf59-118">詳細については、個々のメソッドまたはプロパティのドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="faf59-118">For more information, see the documentation for individual methods or properties.</span></span>  
  
<span data-ttu-id="faf59-119">-派生クラスのコンストラクターは、 <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />プロパティを設定し、監視を開始して、メソッドがを返す前にメソッドを呼び出す<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-119">-   The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the method returns.</span></span> <span data-ttu-id="faf59-120">コンストラクターが構築中にエラーを検出し、リソースを破棄する必要がある<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />場合、コンストラクターは<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッドが呼び出された後にオーバーロードを呼び出すことが<see cref="T:System.InvalidOperationException" />できます。これは、 <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />オーバーロードが初期化が完了していない場合の例外。</span><span class="sxs-lookup"><span data-stu-id="faf59-120">If a constructor encounters an error during constructions and must have to dispose of resources, the constructor can only call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called because the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload will throw an <see cref="T:System.InvalidOperationException" /> exception if initialization is not completed.</span></span>  
  
<span data-ttu-id="faf59-121">-初期化が完了する前に監視されているデータに変更が加えられた場合<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 、コンストラクターはメソッド<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />を呼び出す前にメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-121">-   If changes occur in the data that is being monitored before initialization is complete, the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.</span></span>  
  
<span data-ttu-id="faf59-122">-派生<see cref="T:System.Runtime.Caching.ChangeMonitor" />型がインスタンス化された後、そのモニターをカスタム<see cref="T:System.Runtime.Caching.ObjectCache" />実装に挿入する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-122">-   After a derived <see cref="T:System.Runtime.Caching.ChangeMonitor" /> type is instantiated, you must insert the monitor into a custom <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation.</span></span> <span data-ttu-id="faf59-123">または、変更モニターの使用が完了したら、 <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="faf59-123">Or if you are finished using the change monitor, call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.</span></span>  
  
<span data-ttu-id="faf59-124">- <see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスを<see cref="T:System.Runtime.Caching.ObjectCache" />実装に挿入した後、 <see cref="T:System.Runtime.Caching.ObjectCache" />インスタンスは変更モニターを破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-124">-   After a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance is inserted into a <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation, the <see cref="T:System.Runtime.Caching.ObjectCache" /> instance require that the change monitor is disposed.</span></span> <span data-ttu-id="faf59-125">挿入が無効で例外が発生した場合でも<see cref="T:System.Runtime.Caching.ObjectCache" /> 、実装は<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />オーバーロードを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-125">Even if the insertion is invalid and causes an exception, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.</span></span>  
  
<span data-ttu-id="faf59-126">-派生した変更モニターがキャッシュに挿入された<see cref="T:System.Runtime.Caching.ObjectCache" />後、オブジェクト<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />を<see cref="T:System.Runtime.Caching.OnChangedCallback" />渡すことによって、実装はを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-126">-   After a derived change monitor is inserted into a cache, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, by passing a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object.</span></span> <span data-ttu-id="faf59-127">メソッド<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />を呼び出すことができるのは1回だけです。</span><span class="sxs-lookup"><span data-stu-id="faf59-127">The <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method can be called only one time.</span></span> <span data-ttu-id="faf59-128">依存関係の変更が既に行われ<see cref="T:System.Runtime.Caching.OnChangedCallback" />ている場合、インスタンスは<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> 、が呼び出されるとすぐに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-128">If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called.</span></span> <span data-ttu-id="faf59-129">それ以外の<see cref="T:System.Runtime.Caching.OnChangedCallback" />場合、インスタンスは1回だけ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-129">Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called only one time.</span></span> <span data-ttu-id="faf59-130">この1回限りの呼び出しは、 <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />インスタンスが<see cref="T:System.Runtime.Caching.ChangeMonitor" /> <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />変更を検出したか、またはでメソッドが呼び出さ<see cref="T:System.Runtime.Caching.ChangeMonitor" />れたときに、メソッドが呼び出されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="faf59-130">This one time call occurs either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called because the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance detected a change, or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called on the <see cref="T:System.Runtime.Caching.ChangeMonitor" />, whichever occurs first.</span></span>  
  
<span data-ttu-id="faf59-131">-実装によって提供される<see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> インスタンスは、関連付けられているキャッシュエントリを削除し、列挙体を使用して理由を指定する必要があります。<see cref="T:System.Runtime.Caching.OnChangedCallback" /> <see cref="T:System.Runtime.Caching.ObjectCache" /></span><span class="sxs-lookup"><span data-stu-id="faf59-131">-   The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance that is provided by an <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation should remove the associated cache entry and specify a reason by using the <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> enumeration.</span></span>  
  
<span data-ttu-id="faf59-132">-インスタンス<see cref="T:System.Runtime.Caching.ChangeMonitor" />は、キャッシュ<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />の<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />実装がメソッドを呼び出した前または後に、メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="faf59-132">-   A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method either before a cache implementation has called <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or after.</span></span> <span data-ttu-id="faf59-133"><see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> <see cref="T:System.Runtime.Caching.ChangeMonitor" /> <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />が呼び出される前にメソッドが呼び出されると、基本実装によって、このが発生したことがキャッシュに通知され、が呼び出されるとすぐにコールバックが渡されるようになります。<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /></span><span class="sxs-lookup"><span data-stu-id="faf59-133">If the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called before <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called, the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> implementation will notify the cache that this has occurred and will trigger the callback to be passed to <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is invoked.</span></span> <span data-ttu-id="faf59-134"><see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドに渡された状態データは、変更モニターによって保存され、 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />メソッドが<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />呼び出されたときにメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-134">Any state data that is passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is saved by the change monitor and subsequently passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method when the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method is invoked.</span></span>  
  
<span data-ttu-id="faf59-135">-変更モニターは、 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />メソッドを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-135">-   A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method.</span></span> <span data-ttu-id="faf59-136">詳細については、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> メソッドのドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="faf59-136">For more information, see the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method documentation.</span></span>  
  
<span data-ttu-id="faf59-137">- <see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンス<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />を破棄するには、メソッドのオーバーロードを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-137">-   The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload must be called to dispose of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span></span> <span data-ttu-id="faf59-138">Dispose を呼び出すための規則は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="faf59-138">The rules for calling Dispose are as follows:</span></span> 
<span data-ttu-id="faf59-139">-項目がキャッシュに挿入される前に、 <see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスを破棄するのは呼び出し元の役割です。</span><span class="sxs-lookup"><span data-stu-id="faf59-139">-   Before an item is inserted into the cache, it is the responsibility of caller to dispose of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span></span>  
  
<span data-ttu-id="faf59-140">-キャッシュ項目とそれに<see cref="T:System.Runtime.Caching.ChangeMonitor" />関連付けられているインスタンスがキャッシュに渡されると、挿入が失敗した場合<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />でも、キャッシュの実装者はメソッドが呼び出されるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-140">-   Once cache item and the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances that are associated with it are passed to a cache, the cache implementer must make sure that the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, even if the insert fails.</span></span>  
  
<span data-ttu-id="faf59-141">-項目とそれに関連付け<see cref="T:System.Runtime.Caching.ChangeMonitor" />られているインスタンスがキャッシュに渡された後、呼び出し元は、 <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドが呼び出されるときに依存関係が変更されたかのように処理されるため、依存関係を破棄できません。</span><span class="sxs-lookup"><span data-stu-id="faf59-141">-   After an item and its associated <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances are passed to a cache, the caller must not dispose the dependency because when the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, the call is treated as if the dependency has changed.</span></span> <span data-ttu-id="faf59-142">その結果<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 、メソッドが自動的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-142">As a result, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is automatically invoked.</span></span>  
  
<span data-ttu-id="faf59-143">-これらの規則を考慮に入れ<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />て、次のいずれかの方法でメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-143">-   Taking these rules into consideration, the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method must be called in one of the following ways:</span></span> 
<span data-ttu-id="faf59-144">-派生した変更<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />監視インスタンスをキャッシュに挿入しない場合、ユーザーはメソッドのオーバーロードを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-144">-   Users must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload if they decide not to insert the derived change-monitor instance into a cache.</span></span>  
  
<span data-ttu-id="faf59-145">-実装が変更監視インスタンスをオブジェクトキャッシュに挿入しようとしても、挿入が失敗した場合、キャッシュ実装は<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />オーバーロードの呼び出しを行います。</span><span class="sxs-lookup"><span data-stu-id="faf59-145">-   If the implementation tries to insert the change-monitor instance into an object cache but the insertion fails, the cache implementation is responsible for calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.</span></span> <span data-ttu-id="faf59-146">挿入の試行によって例外が発生した場合、キャッシュの実装は関連する依存関係を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-146">When the insertion attempt causes an exception, the cache implementation must dispose of any associated dependencies.</span></span>  
  
<span data-ttu-id="faf59-147">-キャッシュエントリが削除された場合、キャッシュの実装でも依存関係を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-147">-   If the cache entry is removed, the cache implementation must also dispose of the dependency.</span></span>  
  
<span data-ttu-id="faf59-148">- <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドの内部実装は、によって<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />登録されたコールバックを呼び出した後、メソッドを自動的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="faf59-148">-   The internal implementation of the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method automatically calls the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method after it calls a callback that is registered through <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="faf59-149">イベント発生時の dispose メソッドの自動呼び出しは、 <see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスの初期化が既に完了している場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="faf59-149">This automatic call to the dispose method during the event firing only occurs if the initialization of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance was previously completed.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="faf59-150">派生した変更モニターのコンストラクターが<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッドを呼び出すと、変更モニターの状態が既に変更されている場合 (つまり、コンストラクターがまだアクティブであるときに、監視されている状態が既に変更されている場合)、メソッドは<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />変更モニターを自動的に破棄します。</span><span class="sxs-lookup"><span data-stu-id="faf59-150">When a derived change monitor's constructor calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method, if the state of the change monitor has already changed (that is, the state that is monitored already changed when the constructor was still active) then the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method will automatically dispose of the change monitor.</span></span>  
  
<span data-ttu-id="faf59-151"><see langword="true" /> <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> <see cref="T:System.Runtime.Caching.OnChangedCallback" /> -メソッドの呼び出し<see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> によってオブジェクトが設定されているかどうかに関係なく、派生した変更監視インスタンスによってメソッドが呼び出された後に、プロパティがに設定<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-151">-   The <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> property is set to <see langword="true" /> after the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called by the derived change-monitor instance, regardless of whether a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object has been set by a call to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or not.</span></span></para></block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
    <related type="Article" href="https://msdn.microsoft.com/library/ac11c8ea-df5d-4de8-b315-9ccf1048b0ce"><span data-ttu-id="faf59-152">ASP.NET キャッシュ</span><span class="sxs-lookup"><span data-stu-id="faf59-152">ASP.NET Caching</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChangeMonitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="faf59-153"><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="faf59-153">Initializes a new instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span></span> <span data-ttu-id="faf59-154">このコンストラクターは、派生クラスのコンストラクターから呼び出されて基本クラスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="faf59-154">This constructor is called from constructors in derived classes to initialize the base class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faf59-155">クラス<xref:System.Runtime.Caching.ChangeMonitor>にはパラメーターなしのコンストラクターがあります。</span><span class="sxs-lookup"><span data-stu-id="faf59-155">The <xref:System.Runtime.Caching.ChangeMonitor> class has a parameterless constructor.</span></span> <span data-ttu-id="faf59-156">ただし、基本<xref:System.Runtime.Caching.ChangeMonitor>クラスを継承し、カスタムの変更監視動作を定義するクラスは、コンストラクターで初期化を実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-156">However, classes that inherit from the base <xref:System.Runtime.Caching.ChangeMonitor> class and define custom change-monitoring behavior must perform initialization in the constructor.</span></span> <span data-ttu-id="faf59-157">詳細については、「継承に関する注意事項」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="faf59-157">For more information, see the Notes for Inheritors section.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="faf59-158">派生クラスのコンストラクターは、 <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />プロパティを設定し、監視を開始してから、を返す前に<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />クラスを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-158">The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> class before it returns.</span></span> <span data-ttu-id="faf59-159">初期化が完了する前に依存関係が変更された場合 (依存キャッシュキーがキャッシュに見つからない場合など) は、メソッドを<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />呼び出す前に<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> 、コンストラクターがメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-159">If a dependency changes before initialization is complete (for example, if a dependent cache key is not found in the cache), the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before it calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.</span></span> <span data-ttu-id="faf59-160">この場合、コンストラクターは、メソッド<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />が呼び出され<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />た後にのみメソッドを呼び出すことができます。これは、初期化が完了していない場合にメソッドが例外をスローするためです。</span><span class="sxs-lookup"><span data-stu-id="faf59-160">In this case, constructor can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="faf59-161"><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="faf59-161">Releases all resources used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faf59-162">メソッドは、 <xref:System.Runtime.Caching.ChangeMonitor>インスタンスと関連リソースを解放するために使用されます。 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A></span><span class="sxs-lookup"><span data-stu-id="faf59-162">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is used to release the <xref:System.Runtime.Caching.ChangeMonitor> instance and related resources.</span></span> <span data-ttu-id="faf59-163">パブリック<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドは、派生した変更監視クラス (初期化など) のキーライフサイクルイベントを使用して破棄プロセスを調整し、インスタンスを<xref:System.Runtime.Caching.ChangeMonitor>解放して、インスタンスをガベージコレクションできるようにするために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-163">The public <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is invoked to coordinate the disposal process with key life-cycle events of derived change-monitor classes (such as initialization), and to release the <xref:System.Runtime.Caching.ChangeMonitor> instance so that the instance can be garbage collected.</span></span> <span data-ttu-id="faf59-164">メソッド<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>は、マネージリソースとアンマネージリソースを破棄するために、派生した変更監視クラスによって実装されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-164">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is implemented by derived change-monitor classes to dispose of their managed and unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="changeMonitor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="faf59-165"><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="faf59-165">Releases all resources that are used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faf59-166">メソッド<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>は、最初<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>に呼び出されたときに、派生クラスのメソッドを1回だけ呼び出します。</span><span class="sxs-lookup"><span data-stu-id="faf59-166">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method invokes the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method of derived classes only one time, the first time it is called.</span></span> <span data-ttu-id="faf59-167">後続のメソッドの<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>呼び出しは無効です。</span><span class="sxs-lookup"><span data-stu-id="faf59-167">Subsequent calls to the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method have no effect.</span></span> <span data-ttu-id="faf59-168">メソッドが呼び出されると、 <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>プロパティはに`true`設定されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-168">After the method has been called, the <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="faf59-169"><xref:System.Runtime.Caching.ChangeMonitor>インスタンス<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>を破棄するには、オーバーロードを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-169">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload must be called to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="faf59-170">Dispose メソッドを呼び出す規則を次に示します。</span><span class="sxs-lookup"><span data-stu-id="faf59-170">The following are the rules for calling the dispose method:</span></span>  
  
-   <span data-ttu-id="faf59-171">項目がキャッシュに挿入される前に、呼び出し元がインスタンスを<xref:System.Runtime.Caching.ChangeMonitor>破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-171">Before an item is inserted into the cache, it is the caller's responsibility to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
-   <span data-ttu-id="faf59-172">キャッシュ項目と<xref:System.Runtime.Caching.ChangeMonitor>それに関連付けられているインスタンスがキャッシュに渡されると、挿入が失敗した場合<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>でも、が呼び出されることを確認する必要があるキャッシュの実装側になります。</span><span class="sxs-lookup"><span data-stu-id="faf59-172">Once cache item and the <xref:System.Runtime.Caching.ChangeMonitor> instances that are associated with it are passed to a cache, the cache implementer that must make sure that <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> is called, even if the insert fails.</span></span>  
  
-   <span data-ttu-id="faf59-173">項目とそれに関連付け<xref:System.Runtime.Caching.ChangeMonitor>られているインスタンスがキャッシュに渡されると、呼び出し元は、 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドが呼び出されるときに依存関係が変更されたかのように処理されるため、依存関係を破棄できません。</span><span class="sxs-lookup"><span data-stu-id="faf59-173">After an item and its associated <xref:System.Runtime.Caching.ChangeMonitor> instances are passed to a cache, the caller must not dispose the dependency because when the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is called, the call is treated as if the dependency has changed.</span></span> <span data-ttu-id="faf59-174">その結果<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 、メソッドが自動的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-174">As a result, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is automatically invoked.</span></span>  
  
-   <span data-ttu-id="faf59-175">これらの規則を考慮に入れ<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>て、次のいずれかの方法でメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-175">Taking these rules into consideration, the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method must be called in one of the following ways:</span></span>  
  
    -   <span data-ttu-id="faf59-176">派生した変更<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>監視インスタンスをキャッシュに挿入しない場合、ユーザーはメソッドのオーバーロードを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-176">Users must call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method overload if they decide not to insert the derived change-monitor instance into a cache.</span></span>  
  
    -   <span data-ttu-id="faf59-177">実装が変更監視インスタンスをオブジェクトキャッシュ<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>に挿入しようとしても、挿入が失敗した場合、キャッシュ実装はオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="faf59-177">The cache implementation is responsible for calling the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</span></span> <span data-ttu-id="faf59-178">挿入の試行によって例外が発生した場合、キャッシュの実装は関連する依存関係を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-178">When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</span></span>  
  
    -   <span data-ttu-id="faf59-179">キャッシュエントリが削除された場合、キャッシュの実装でも依存関係を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-179">If the cache entry is removed, the cache implementation must also dispose the dependency.</span></span>  
  
 <span data-ttu-id="faf59-180">メソッドの<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>内部実装は、メソッドを介し<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>て<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>登録されたコールバックを呼び出した後、メソッドを自動的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="faf59-180">The internal implementation of the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method after it calls a callback that is registered through the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="faf59-181">イベント発生時のこの自動破棄は、 <xref:System.Runtime.Caching.ChangeMonitor>インスタンスの初期化が既に完了している場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="faf59-181">This automatic dispose during the event firing only occurs if the initialization of the <xref:System.Runtime.Caching.ChangeMonitor> instance previously completed.</span></span>  
  
 <span data-ttu-id="faf59-182">派生した変更モニターのコンストラクターが<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>メソッドを呼び出すと、変更モニターの状態が既に変更されている場合 (つまり、コンストラクターがまだアクティブのときに監視されている状態が既に変更されている場合<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> )、メソッドは変更モニターを自動的に破棄します。</span><span class="sxs-lookup"><span data-stu-id="faf59-182">When a derived change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method will automatically dispose the change monitor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="faf59-183">ユーザーはメソッドを<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="faf59-183">Users should not call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="faf59-184">ただし、ユーザーがメソッドを呼び出すことを防ぐことはできません。</span><span class="sxs-lookup"><span data-stu-id="faf59-184">However, you cannot prevent users from calling the method.</span></span> <span data-ttu-id="faf59-185">この場合<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 、メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-185">Therefore, if they do, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked.</span></span> <span data-ttu-id="faf59-186">その場合、キャッシュエントリには、依存関係が変更されたかのように通知されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-186">In that case, the cache entry is notified as if the dependency has changed.</span></span>  
  
 <span data-ttu-id="faf59-187">派生クラスがメソッドをオーバーライド<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>しないようにするために、メソッドは明示的なインターフェイスの実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="faf59-187">To prevent derived classes from overriding <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method, the method is not an explicit interface implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="faf59-188"><see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> メソッドを呼び出した変更監視派生クラスで初期化が完了していません。</span><span class="sxs-lookup"><span data-stu-id="faf59-188">Initialization is not complete in the derived change-monitor class that called the base <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.</span></span></exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit" Usage="changeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="faf59-189">マネージド リソース、アンマネージド リソース、および <see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンスへのすべての参照を解放する場合は <see langword="true" />。アンマネージド リソースのみを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="faf59-189"><see langword="true" /> to release managed and unmanaged resources and any references to a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance; <see langword="false" /> to release only unmanaged resources.</span></span> <span data-ttu-id="faf59-190"><see langword="false" />を渡すと、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> メソッドが <see langword="finalizer" /> スレッドによって呼び出されますが、すべての外部マネージド参照は既にガベージ コレクトされているため、有効ではなくなっている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-190">When <see langword="false" /> is passed, the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method is called by a <see langword="finalizer" /> thread and any external managed references are likely no longer valid because they have already been garbage collected.</span></span></param>
        <summary><span data-ttu-id="faf59-191">すべてのマネージド リソースおよびアンマネージド リソースと、<see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンスへのすべての参照を解放します。</span><span class="sxs-lookup"><span data-stu-id="faf59-191">Releases all managed and unmanaged resources and any references to the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span></span> <span data-ttu-id="faf59-192">このオーバーロードは、変更監視クラスの派生クラスで実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-192">This overload must be implemented by derived change-monitor classes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faf59-193">Value の`disposing`値が`true`の場合、すべてのマネージリソースとアンマネージリソースが破棄され、このオブジェクトへの参照が解放されて、派生した変更監視インスタンスがガベージコレクションされるようになります。</span><span class="sxs-lookup"><span data-stu-id="faf59-193">When the value of `disposing` value is `true`, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</span></span> <span data-ttu-id="faf59-194">基本<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドは、実装<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>されたメソッドを1回だけ呼び出すことが保証されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-194">It is guaranteed that the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method will invoke the implemented <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method only one time.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="faf59-195">の値が<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> <paramref name="disposing" /> の場合<see langword="true" />に、すべてのマネージリソースとアンマネージリソースを解放するために、変更モニターはオーバーロードを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-195">A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload to release all managed and unmanaged resources when the value of <paramref name="disposing" /> is <see langword="true" />.</span></span> <span data-ttu-id="faf59-196">の<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> <paramref name="disposing" />値を持つメソッドオーバーロードは、インスタンスが最初に破棄されたときに1回だけ呼び出されます。 <see langword="true" /></span><span class="sxs-lookup"><span data-stu-id="faf59-196">The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method overload that has a <paramref name="disposing" /> value of <see langword="true" /> is called only one time, namely, when the instance is disposed for the first time.</span></span> <span data-ttu-id="faf59-197">変更モニターは、オーバーロードを<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />直接呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="faf59-197">A change monitor must not call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload directly.</span></span> <span data-ttu-id="faf59-198">派生した変更モニターは、基底<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> <see cref="T:System.Runtime.Caching.ChangeMonitor" />クラスのパブリックパラメーター less メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="faf59-198">A derived change monitor can call the public parameter-less <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method on the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span></span>  
  
<span data-ttu-id="faf59-199">または、変更モニターでファイナライザーメソッドを実装することもできます。</span><span class="sxs-lookup"><span data-stu-id="faf59-199">Alternatively, a change monitor can implement a finalizer method.</span></span> <span data-ttu-id="faf59-200">その場合、ファイナライザーは<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />メソッドを呼び出し、値<see langword="false" />を<paramref name="disposing" />に渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="faf59-200">In that case, the finalizer can invoke the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method and pass it a <paramref name="disposing" /> value of <see langword="false" />.</span></span> <span data-ttu-id="faf59-201">ただし、これは通常必要ありません。</span><span class="sxs-lookup"><span data-stu-id="faf59-201">However, this is usually unnecessary.</span></span> <span data-ttu-id="faf59-202">依存関係の変更の監視は、通常、変更監視インスタンスへの参照を保持するサービスによって実行されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-202">Monitoring for dependency changes is typically performed by a service that maintains a reference to the change-monitor instance.</span></span> <span data-ttu-id="faf59-203">参照によってインスタンスがガベージコレクションされないようにするため、ファイナライザーメソッドを不要にします。</span><span class="sxs-lookup"><span data-stu-id="faf59-203">The reference prevents the instance from being garbage collected, and therefore makes a finalizer method unnecessary.</span></span> <span data-ttu-id="faf59-204">メモリリークを回避するために、依存関係が<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />変更された場合、メソッドは、初期化が完了していない場合に、変更監視インスタンスを破棄します。</span><span class="sxs-lookup"><span data-stu-id="faf59-204">To avoid memory leaks, when a dependency changes, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method disposes the change-monitor instance (unless initialization has not finished).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="faf59-205"><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスによって監視されている状態が変更されたことを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="faf59-205">Gets a value that indicates that the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class has changed.</span></span></summary>
        <value><span data-ttu-id="faf59-206"><see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンスによって監視されている状態が変更された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="faf59-206"><see langword="true" /> if the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance has changed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faf59-207">派生<xref:System.Runtime.Caching.ChangeMonitor>クラスでこのプロパティの値を確認して、依存関係が変更されたかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="faf59-207">You can check the value of this property in a derived <xref:System.Runtime.Caching.ChangeMonitor> class to see whether a dependency has changed.</span></span>  
  
 <span data-ttu-id="faf59-208">依存関係の変更が`true`発生したとき (つまり、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドが呼び出されたとき) に、値がに設定されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-208">The value is set to `true` when a dependency change occurs (that is, when the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called).</span></span> <span data-ttu-id="faf59-209"><xref:System.Runtime.Caching.OnChangedCallback> <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> `true`派生クラスによって<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドが呼び出された後、メソッドの呼び出しによってインスタンスに通知されたかどうかに関係なく、プロパティの値はになります。 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A></span><span class="sxs-lookup"><span data-stu-id="faf59-209">After the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called by the derived class, the value of the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property will be `true`, regardless of whether a <xref:System.Runtime.Caching.OnChangedCallback> instance has been notified by a call to the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="faf59-210">呼び出し元は、 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティをチェックして、依存関係が変更されたかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="faf59-210">Callers can check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property to see whether a dependency has changed.</span></span> <span data-ttu-id="faf59-211">ただし、マルチスレッド環境では、 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティをチェックせずに、キャッシュの実装にデータを挿入する方が、より保守しやすい方法です。</span><span class="sxs-lookup"><span data-stu-id="faf59-211">However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property.</span></span> <span data-ttu-id="faf59-212">キャッシュの実装では<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> 、プロパティをチェックする必要があります。関連する依存関係が既に変更されている場合は、挿入操作または設定操作を実行しないでください。</span><span class="sxs-lookup"><span data-stu-id="faf59-212">Cache implementations must check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializationComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializationComplete();" />
      <MemberSignature Language="F#" Value="member this.InitializationComplete : unit -&gt; unit" Usage="changeMonitor.InitializationComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="faf59-213">派生クラスのコンストラクターから呼び出され、初期化が完了したことを示します。</span><span class="sxs-lookup"><span data-stu-id="faf59-213">Called from the constructor of derived classes to indicate that initialization is finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faf59-214">派生クラスで初期化が完了する前に依存関係が変更された場合、派生クラスのコンストラクター <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>はメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-214">If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span>  
  
 <span data-ttu-id="faf59-215">メソッドが呼び出されると<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> 、プロパティは変更モニターによっ`true`て自動的にに設定されます。 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A></span><span class="sxs-lookup"><span data-stu-id="faf59-215">When the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked, the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is automatically set to `true` by the change monitor.</span></span> <span data-ttu-id="faf59-216">その結果、変更モニターのコンストラクターが<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>メソッドを呼び出すと、基底クラスは<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドを自動的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="faf59-216">As a result, when the change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, the base class will automatically call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="faf59-217">初期化が完了すると<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 、メソッドは、派生した変更監視インスタンスを自動的に破棄します。</span><span class="sxs-lookup"><span data-stu-id="faf59-217">If initialization is complete, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically disposes the derived change-monitor instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="faf59-218">派生クラスのコンストラクターは、コンストラクターが戻る前<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />に基本メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-218">The constructor of a derived class must call the base <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the constructor returns.</span></span> <span data-ttu-id="faf59-219">派生クラスのコンストラクターは、が呼び出され<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />た後<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />にメソッドを呼び出すこと<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />ができます。このメソッドは、初期化が完了していない場合に例外をスローするためです。</span><span class="sxs-lookup"><span data-stu-id="faf59-219">The constructor of a derived class can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="faf59-220"><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの派生インスタンスが破棄されたことを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="faf59-220">Gets a value that indicates that the derived instance of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class is disposed.</span></span></summary>
        <value><span data-ttu-id="faf59-221">インスタンスが破棄された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="faf59-221"><see langword="true" /> if the instance is disposed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faf59-222">基本<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> `true` メソッド<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>が派生クラスのメソッドを呼び出してインスタンスを破棄した後に、プロパティがに設定されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-222">The property is set to `true` after the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method in a derived class to dispose of the instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyOnChanged(System::Runtime::Caching::OnChangedCallback ^ onChangedCallback);" />
      <MemberSignature Language="F#" Value="member this.NotifyOnChanged : System.Runtime.Caching.OnChangedCallback -&gt; unit" Usage="changeMonitor.NotifyOnChanged onChangedCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback"><span data-ttu-id="faf59-223">依存関係が変更されたときに呼び出されるメソッドへの参照。</span><span class="sxs-lookup"><span data-stu-id="faf59-223">A reference to a method that is invoked when a dependency has changed.</span></span></param>
        <summary><span data-ttu-id="faf59-224">コールバックを登録し、依存関係が変化したときに <see cref="T:System.Runtime.Caching.ObjectCache" /> デリゲートを通して <see cref="T:System.Runtime.Caching.OnChangedCallback" /> インスタンスに通知するために、キャッシュの実装側によって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-224">Called by Cache implementers to register a callback and notify an <see cref="T:System.Runtime.Caching.ObjectCache" /> instance through the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> delegate when a dependency has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faf59-225">キャッシュの実装では、この方法を使用して、変更モニターに接続します。</span><span class="sxs-lookup"><span data-stu-id="faf59-225">Cache implementers use this method to wire themselves up to a change monitor.</span></span> <span data-ttu-id="faf59-226">1つまたは複数の変更モニターをキャッシュ項目に関連付ける場合は、 <xref:System.Runtime.Caching.CacheItemPolicy>設定された変更モニタープロパティを持つインスタンスをキャッシュ項目に渡します。</span><span class="sxs-lookup"><span data-stu-id="faf59-226">If you associate one or more change monitors with the cache item, you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance with a populated change monitors property to the cache item.</span></span> <span data-ttu-id="faf59-227">変更モニターをサポートするキャッシュの実装者は、 <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>プロパティを反復処理し、検出された各変更モニターに<xref:System.Runtime.Caching.OnChangedCallback>デリゲートを登録します。</span><span class="sxs-lookup"><span data-stu-id="faf59-227">A cache implementer that supports change monitors is responsible for iterating over the <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> property and register the <xref:System.Runtime.Caching.OnChangedCallback> delegates with each change monitor that it finds.</span></span>  
  
 <span data-ttu-id="faf59-228">デリゲートに<xref:System.Runtime.Caching.OnChangedCallback>は省略可能な状態パラメーターが含まれているため、具体的な変更モニターの実装では、省略可能な状態情報を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="faf59-228">Because the <xref:System.Runtime.Caching.OnChangedCallback> delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</span></span> <span data-ttu-id="faf59-229">キャッシュの実装者は、コールバックの一部としてカスタム変更モニターが渡す状態の種類に対する明示的な依存関係を取得できるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="faf59-229">The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="faf59-230">基本キャッシュ機能拡張 API には、状態の種類に対する明示的な依存関係の要件はありません。</span><span class="sxs-lookup"><span data-stu-id="faf59-230">The base cache extensibility API has no requirement for explicit dependency on the type of state.</span></span>  
  
 <span data-ttu-id="faf59-231"><xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドの実装は、メソッドが呼び出されたとき<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>にモニターの状態が既に変更されているかどうかを自動的に判断します。</span><span class="sxs-lookup"><span data-stu-id="faf59-231">The implementation of the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method automatically determines whether the state of the monitor has already changed at the time <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called.</span></span> <span data-ttu-id="faf59-232">プロパティが`true`の場合、メソッドは、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドを通じ<xref:System.Runtime.Caching.OnChangedCallback>て、登録されたイベントハンドラーを自動的に呼び出します。 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A></span><span class="sxs-lookup"><span data-stu-id="faf59-232">If the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is `true`, then the method automatically calls the <xref:System.Runtime.Caching.OnChangedCallback> event handler, that was registered, through the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span> <span data-ttu-id="faf59-233">これは、キャッシュの実装によって変更モニターが作成されたときに、キャッシュの実装によってモニターが取得され、それ自体が監視されていて、基になっている監視対象の状態が変化したときに発生する可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="faf59-233">This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</span></span> <span data-ttu-id="faf59-234">状態が既に変更されている場合、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドに渡されるオブジェクトは`null`です。</span><span class="sxs-lookup"><span data-stu-id="faf59-234">If the state has already changed then the object that is passed to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is `null`.</span></span>  
  
 <span data-ttu-id="faf59-235"><xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドを呼び出すことができるのは1回だけで、それ以降の呼び出しでは例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="faf59-235">The <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method can be invoked only one time, and will throw an exception on subsequent calls.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="faf59-236">コールバック メソッドが既に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="faf59-236">The callback method has already been invoked.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="faf59-237"><paramref name="onChangedCallback" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="faf59-237"><paramref name="onChangedCallback" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="faf59-238">1. 依存関係の変更<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />が通知されるようにするには、メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-238">1.  You must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method to be notified of any dependency changes.</span></span> <span data-ttu-id="faf59-239">依存関係の変更が既に行われ<see cref="T:System.Runtime.Caching.OnChangedCallback" />ている場合は、 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />が呼び出されると、インスタンスが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-239">If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called.</span></span> <span data-ttu-id="faf59-240">それ以外の<see cref="T:System.Runtime.Caching.OnChangedCallback" />場合、インスタンスは、 <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッド<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />が呼び出されたとき、またはメソッドが呼び出されたときのいずれか早い方で、1回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-240">Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called one time, either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, whichever occurs first.</span></span> <span data-ttu-id="faf59-241">キャッシュ<see cref="T:System.Runtime.Caching.OnChangedCallback" />の実装によって提供されるインスタンスは、キャッシュエントリを削除する必要があります。キャッシュの呼び出し元によって要求された場合は、必要な変更または更新イベントを元のキャッシュの呼び出し元に戻します。</span><span class="sxs-lookup"><span data-stu-id="faf59-241">The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance provided by the cache implementation should remove the cache entry and if it is requested by the cache caller, raise the necessary change or update event back to the original cache caller.</span></span>  
  
<span data-ttu-id="faf59-242">2.</span><span class="sxs-lookup"><span data-stu-id="faf59-242">2.</span></span>  <span data-ttu-id="faf59-243">オブジェクトキャッシュの実装では、依存関係の変更に関連付けられているキャッシュエントリを削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-243">The object cache implementation must remove the cache entry that is associated with a dependency change.</span></span></para></block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : obj -&gt; unit" Usage="changeMonitor.OnChanged state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="faf59-244">変更イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="faf59-244">The data for the change event.</span></span> <span data-ttu-id="faf59-245">この値は、<see langword="null" /> の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="faf59-245">This value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="faf59-246">依存関係が変更されたときに、イベントを発生させるために派生クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-246">Called by derived classes to raise the event when a dependency changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faf59-247">通常、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドは、依存関係の変更が発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-247">Typically, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called when dependency changes occur.</span></span> <span data-ttu-id="faf59-248">この<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドは、変更監視インスタンスが破棄された場合にも呼び出されますが、破棄は、コールバックがまだ呼び出されていない場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="faf59-248">The <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</span></span>  
  
 <span data-ttu-id="faf59-249">メソッドが呼び出される<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>前にメソッドが呼び出された場合、メソッドの<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>呼び出しの状態データはキャッシュの実装によって保存されます。 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A></span><span class="sxs-lookup"><span data-stu-id="faf59-249">If the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called before the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called, the state data from the call to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is saved by the cache implementation.</span></span> <span data-ttu-id="faf59-250">また、メソッドが呼び出さ<xref:System.Runtime.Caching.OnChangedCallback> <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>れるとすぐに、メソッドへのコールバックが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-250">Also, the callback to the <xref:System.Runtime.Caching.OnChangedCallback> method is invoked immediately when the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueId : string" Usage="System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="faf59-251"><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスのインスタンスを表す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="faf59-251">Gets a value that represents the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class instance.</span></span></summary>
        <value><span data-ttu-id="faf59-252">変更監視インスタンスの識別子。</span><span class="sxs-lookup"><span data-stu-id="faf59-252">The identifier for a change-monitor instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faf59-253">プロパティ<xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A>値は、通常、 <xref:System.Runtime.Caching.ChangeMonitor>インスタンスによって監視されているデータを一意に識別する、依存関係の名前を組み合わせた文字列データで構成されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-253">The <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="faf59-254"><xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A>プロパティの値は文字列です。</span><span class="sxs-lookup"><span data-stu-id="faf59-254">The value of the <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property is a string.</span></span> <span data-ttu-id="faf59-255">文字列の値は、 <xref:System.Runtime.Caching.ChangeMonitor>インスタンスの一意の ID を割り当てるために使用されます。</span><span class="sxs-lookup"><span data-stu-id="faf59-255">The value of the string is used to assign the unique ID of the <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="faf59-256">プロパティをオーバーライドすることにより、プロパティの文字列値のカスタム実装を定義して、一意の ID を割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="faf59-256">By overriding the property, you can define a custom implementation for the string value of the property in order to assign it a unique ID.</span></span></para></block>
        <block subset="none" type="overrides"><para><span data-ttu-id="faf59-257">派生クラスでは、コンストラクターでプロパティの値を設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faf59-257">In derived classes, you must set the value of the property in the constructor.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
