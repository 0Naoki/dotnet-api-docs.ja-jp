<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed10988d07dceeceb8c3790eaec2ec2b9b04d9fa" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69275582" /></Metadata><TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChangeMonitor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeMonitor abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type ChangeMonitor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>キャッシュ アイテムが依存するデータの状態の変化を監視する、派生したカスタム型の基本クラスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor>クラスは、特定のキャッシュ実装に特化した、派生モニタークラスの基本クラスとして使用されます。 インスタンス<xref:System.Runtime.Caching.ChangeMonitor>は、キャッシュ項目が依存しているデータの状態の変化を監視します。 たとえば、アイテムには、内容がキャッシュされているファイルまたはデータエンティティを指定できます。 ファイルまたはデータエンティティが更新された場合は、関連付けられているキャッシュエントリも変更する必要があります。 監視できる共通項目には、データエンティティ (データベースフィールド、値、行、テーブルなど)、別のキャッシュエントリ、ファイルとファイル属性などがあります。  
  
 依存関係の変更は、依存関係の状態の変化です。 一般的なキャッシュ実装では、インスタンス<xref:System.Runtime.Caching.ChangeMonitor>が依存関係が変更されたことをキャッシュに通知した後、キャッシュは、挿入されたキャッシュエントリを無効にするなど、必要なアクションを実行します。  
  
 派生<xref:System.Runtime.Caching.ChangeMonitor>クラスは、特定の異なるデータストアの依存関係の変更を監視するようにカスタマイズできます。 たとえば、ファイルシステム、物理メモリ、またはデータベースに対するキャッシュの実装があります。 クラス<xref:System.Runtime.Caching.ChangeMonitor>は、キャッシュの外部で発生した変更を調査し、変更が発生したことをキャッシュに通知します。  
  
 に[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]は、クラスから<xref:System.Runtime.Caching.ChangeMonitor>派生する次のクラスが含まれています。  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 これらの各クラスは、さまざまな種類の依存関係で動作します。 たとえば、派生<xref:System.Runtime.Caching.FileChangeMonitor>クラスは、キャッシュ項目が依存しているファイルシステムデータ (ファイルおよびフォルダー) のキャッシュへの変更を監視します。  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
    <block subset="none" type="overrides"><para>カスタムキャッシュの実装または派生した変更モニターの種類を作成する場合は、特定のガイドラインに従う必要があります。 次の一覧は、これらのガイドラインをまとめたものです。 詳細については、個々のメソッドまたはプロパティのドキュメントを参照してください。  
  
-派生クラスのコンストラクターは、 <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />プロパティを設定し、監視を開始して、メソッドがを返す前にメソッドを呼び出す<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />必要があります。 コンストラクターが構築中にエラーを検出し、リソースを破棄する必要がある<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />場合、コンストラクターは<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッドが呼び出された後にオーバーロードを呼び出すことが<see cref="T:System.InvalidOperationException" />できます。これは、 <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />オーバーロードが初期化が完了していない場合の例外。  
  
-初期化が完了する前に監視されているデータに変更が加えられた場合<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 、コンストラクターはメソッド<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />を呼び出す前にメソッドを呼び出す必要があります。  
  
-派生<see cref="T:System.Runtime.Caching.ChangeMonitor" />型がインスタンス化された後、そのモニターをカスタム<see cref="T:System.Runtime.Caching.ObjectCache" />実装に挿入する必要があります。 または、変更モニターの使用が完了したら、 <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドを呼び出します。  
  
- <see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスを<see cref="T:System.Runtime.Caching.ObjectCache" />実装に挿入した後、 <see cref="T:System.Runtime.Caching.ObjectCache" />インスタンスは変更モニターを破棄する必要があります。 挿入が無効で例外が発生した場合でも<see cref="T:System.Runtime.Caching.ObjectCache" /> 、実装は<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />オーバーロードを呼び出す必要があります。  
  
-派生した変更モニターがキャッシュに挿入された<see cref="T:System.Runtime.Caching.ObjectCache" />後、オブジェクト<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />を<see cref="T:System.Runtime.Caching.OnChangedCallback" />渡すことによって、実装はを呼び出す必要があります。 メソッド<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />を呼び出すことができるのは1回だけです。 依存関係の変更が既に行われ<see cref="T:System.Runtime.Caching.OnChangedCallback" />ている場合、インスタンスは<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> 、が呼び出されるとすぐに呼び出されます。 それ以外の<see cref="T:System.Runtime.Caching.OnChangedCallback" />場合、インスタンスは1回だけ呼び出されます。 この1回限りの呼び出しは、 <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />インスタンスが<see cref="T:System.Runtime.Caching.ChangeMonitor" /> <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />変更を検出したか、またはでメソッドが呼び出さ<see cref="T:System.Runtime.Caching.ChangeMonitor" />れたときに、メソッドが呼び出されたときに発生します。  
  
-実装によって提供される<see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> インスタンスは、関連付けられているキャッシュエントリを削除し、列挙体を使用して理由を指定する必要があります。<see cref="T:System.Runtime.Caching.OnChangedCallback" /> <see cref="T:System.Runtime.Caching.ObjectCache" />  
  
-インスタンス<see cref="T:System.Runtime.Caching.ChangeMonitor" />は、キャッシュ<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />の<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />実装がメソッドを呼び出した前または後に、メソッドを呼び出すことができます。 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> <see cref="T:System.Runtime.Caching.ChangeMonitor" /> <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />が呼び出される前にメソッドが呼び出されると、基本実装によって、このが発生したことがキャッシュに通知され、が呼び出されるとすぐにコールバックが渡されるようになります。<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドに渡された状態データは、変更モニターによって保存され、 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />メソッドが<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />呼び出されたときにメソッドに渡されます。  
  
-変更モニターは、 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />メソッドを実装する必要があります。 詳細については、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> メソッドのドキュメントを参照してください。  
  
- <see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンス<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />を破棄するには、メソッドのオーバーロードを呼び出す必要があります。 Dispose を呼び出すための規則は次のとおりです。 
-項目がキャッシュに挿入される前に、 <see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスを破棄するのは呼び出し元の役割です。  
  
-キャッシュ項目とそれに<see cref="T:System.Runtime.Caching.ChangeMonitor" />関連付けられているインスタンスがキャッシュに渡されると、挿入が失敗した場合<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />でも、キャッシュの実装者はメソッドが呼び出されるようにする必要があります。  
  
-項目とそれに関連付け<see cref="T:System.Runtime.Caching.ChangeMonitor" />られているインスタンスがキャッシュに渡された後、呼び出し元は、 <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />メソッドが呼び出されるときに依存関係が変更されたかのように処理されるため、依存関係を破棄できません。 その結果<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> 、メソッドが自動的に呼び出されます。  
  
-これらの規則を考慮に入れ<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />て、次のいずれかの方法でメソッドを呼び出す必要があります。 
-派生した変更<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />監視インスタンスをキャッシュに挿入しない場合、ユーザーはメソッドのオーバーロードを呼び出す必要があります。  
  
-実装が変更監視インスタンスをオブジェクトキャッシュに挿入しようとしても、挿入が失敗した場合、キャッシュ実装は<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />オーバーロードの呼び出しを行います。 挿入の試行によって例外が発生した場合、キャッシュの実装は関連する依存関係を破棄する必要があります。  
  
-キャッシュエントリが削除された場合、キャッシュの実装でも依存関係を破棄する必要があります。  
  
- <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッドの内部実装は、によって<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />登録されたコールバックを呼び出した後、メソッドを自動的に呼び出します。  
  
 <block subset="none" type="note"><para>  
 イベント発生時の dispose メソッドの自動呼び出しは、 <see cref="T:System.Runtime.Caching.ChangeMonitor" />インスタンスの初期化が既に完了している場合にのみ発生します。  
  
</para></block>  
  
 派生した変更モニターのコンストラクターが<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />メソッドを呼び出すと、変更モニターの状態が既に変更されている場合 (つまり、コンストラクターがまだアクティブであるときに、監視されている状態が既に変更されている場合)、メソッドは<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />変更モニターを自動的に破棄します。  
  
<see langword="true" /> <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> <see cref="T:System.Runtime.Caching.OnChangedCallback" /> -メソッドの呼び出し<see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> によってオブジェクトが設定されているかどうかに関係なく、派生した変更監視インスタンスによってメソッドが呼び出された後に、プロパティがに設定<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />されます。</para></block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
    <related type="Article" href="https://msdn.microsoft.com/library/ac11c8ea-df5d-4de8-b315-9ccf1048b0ce">ASP.NET キャッシュ</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChangeMonitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの新しいインスタンスを初期化します。 このコンストラクターは、派生クラスのコンストラクターから呼び出されて基本クラスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラス<xref:System.Runtime.Caching.ChangeMonitor>にはパラメーターなしのコンストラクターがあります。 ただし、基本<xref:System.Runtime.Caching.ChangeMonitor>クラスを継承し、カスタムの変更監視動作を定義するクラスは、コンストラクターで初期化を実行する必要があります。 詳細については、「継承に関する注意事項」セクションを参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスのコンストラクターは、 <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />プロパティを設定し、監視を開始してから、を返す前に<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />クラスを呼び出す必要があります。 初期化が完了する前に依存関係が変更された場合 (依存キャッシュキーがキャッシュに見つからない場合など) は、メソッドを<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />呼び出す前に<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> 、コンストラクターがメソッドを呼び出す必要があります。 この場合、コンストラクターは、メソッド<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />が呼び出され<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />た後にのみメソッドを呼び出すことができます。これは、初期化が完了していない場合にメソッドが例外をスローするためです。</para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッドは、 <xref:System.Runtime.Caching.ChangeMonitor>インスタンスと関連リソースを解放するために使用されます。 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> パブリック<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドは、派生した変更監視クラス (初期化など) のキーライフサイクルイベントを使用して破棄プロセスを調整し、インスタンスを<xref:System.Runtime.Caching.ChangeMonitor>解放して、インスタンスをガベージコレクションできるようにするために呼び出されます。 メソッド<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>は、マネージリソースとアンマネージリソースを破棄するために、派生した変更監視クラスによって実装されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="changeMonitor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>は、最初<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>に呼び出されたときに、派生クラスのメソッドを1回だけ呼び出します。 後続のメソッドの<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>呼び出しは無効です。 メソッドが呼び出されると、 <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>プロパティはに`true`設定されます。  
  
 <xref:System.Runtime.Caching.ChangeMonitor>インスタンス<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>を破棄するには、オーバーロードを呼び出す必要があります。 Dispose メソッドを呼び出す規則を次に示します。  
  
-   項目がキャッシュに挿入される前に、呼び出し元がインスタンスを<xref:System.Runtime.Caching.ChangeMonitor>破棄する必要があります。  
  
-   キャッシュ項目と<xref:System.Runtime.Caching.ChangeMonitor>それに関連付けられているインスタンスがキャッシュに渡されると、挿入が失敗した場合<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>でも、が呼び出されることを確認する必要があるキャッシュの実装側になります。  
  
-   項目とそれに関連付け<xref:System.Runtime.Caching.ChangeMonitor>られているインスタンスがキャッシュに渡されると、呼び出し元は、 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドが呼び出されるときに依存関係が変更されたかのように処理されるため、依存関係を破棄できません。 その結果<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 、メソッドが自動的に呼び出されます。  
  
-   これらの規則を考慮に入れ<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>て、次のいずれかの方法でメソッドを呼び出す必要があります。  
  
    -   派生した変更<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>監視インスタンスをキャッシュに挿入しない場合、ユーザーはメソッドのオーバーロードを呼び出す必要があります。  
  
    -   実装が変更監視インスタンスをオブジェクトキャッシュ<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>に挿入しようとしても、挿入が失敗した場合、キャッシュ実装はオーバーロードを呼び出します。 挿入の試行によって例外が発生した場合、キャッシュの実装は関連する依存関係を破棄する必要があります。  
  
    -   キャッシュエントリが削除された場合、キャッシュの実装でも依存関係を破棄する必要があります。  
  
 メソッドの<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>内部実装は、メソッドを介し<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>て<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>登録されたコールバックを呼び出した後、メソッドを自動的に呼び出します。  
  
> [!NOTE]
>  イベント発生時のこの自動破棄は、 <xref:System.Runtime.Caching.ChangeMonitor>インスタンスの初期化が既に完了している場合にのみ発生します。  
  
 派生した変更モニターのコンストラクターが<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>メソッドを呼び出すと、変更モニターの状態が既に変更されている場合 (つまり、コンストラクターがまだアクティブのときに監視されている状態が既に変更されている場合<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> )、メソッドは変更モニターを自動的に破棄します。  
  
> [!NOTE]
>  ユーザーはメソッドを<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>呼び出さないでください。 ただし、ユーザーがメソッドを呼び出すことを防ぐことはできません。 この場合<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 、メソッドが呼び出されます。 その場合、キャッシュエントリには、依存関係が変更されたかのように通知されます。  
  
 派生クラスがメソッドをオーバーライド<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>しないようにするために、メソッドは明示的なインターフェイスの実装ではありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> メソッドを呼び出した変更監視派生クラスで初期化が完了していません。</exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit" Usage="changeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソース、アンマネージド リソース、および <see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンスへのすべての参照を解放する場合は <see langword="true" />。アンマネージド リソースのみを解放する場合は <see langword="false" />。 <see langword="false" />を渡すと、<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> メソッドが <see langword="finalizer" /> スレッドによって呼び出されますが、すべての外部マネージド参照は既にガベージ コレクトされているため、有効ではなくなっている可能性があります。</param>
        <summary>すべてのマネージド リソースおよびアンマネージド リソースと、<see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンスへのすべての参照を解放します。 このオーバーロードは、変更監視クラスの派生クラスで実装する必要があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Value の`disposing`値が`true`の場合、すべてのマネージリソースとアンマネージリソースが破棄され、このオブジェクトへの参照が解放されて、派生した変更監視インスタンスがガベージコレクションされるようになります。 基本<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドは、実装<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>されたメソッドを1回だけ呼び出すことが保証されます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>の値が<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> <paramref name="disposing" /> の場合<see langword="true" />に、すべてのマネージリソースとアンマネージリソースを解放するために、変更モニターはオーバーロードを実装する必要があります。 の<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> <paramref name="disposing" />値を持つメソッドオーバーロードは、インスタンスが最初に破棄されたときに1回だけ呼び出されます。 <see langword="true" /> 変更モニターは、オーバーロードを<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />直接呼び出すことはできません。 派生した変更モニターは、基底<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> <see cref="T:System.Runtime.Caching.ChangeMonitor" />クラスのパブリックパラメーター less メソッドを呼び出すことができます。  
  
または、変更モニターでファイナライザーメソッドを実装することもできます。 その場合、ファイナライザーは<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />メソッドを呼び出し、値<see langword="false" />を<paramref name="disposing" />に渡すことができます。 ただし、これは通常必要ありません。 依存関係の変更の監視は、通常、変更監視インスタンスへの参照を保持するサービスによって実行されます。 参照によってインスタンスがガベージコレクションされないようにするため、ファイナライザーメソッドを不要にします。 メモリリークを回避するために、依存関係が<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />変更された場合、メソッドは、初期化が完了していない場合に、変更監視インスタンスを破棄します。</para></block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスによって監視されている状態が変更されたことを示す値を取得します。</summary>
        <value><see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンスによって監視されている状態が変更された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生<xref:System.Runtime.Caching.ChangeMonitor>クラスでこのプロパティの値を確認して、依存関係が変更されたかどうかを確認できます。  
  
 依存関係の変更が`true`発生したとき (つまり、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドが呼び出されたとき) に、値がに設定されます。 <xref:System.Runtime.Caching.OnChangedCallback> <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> `true`派生クラスによって<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドが呼び出された後、メソッドの呼び出しによってインスタンスに通知されたかどうかに関係なく、プロパティの値はになります。 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>  
  
> [!NOTE]
>  呼び出し元は、 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティをチェックして、依存関係が変更されたかどうかを確認できます。 ただし、マルチスレッド環境では、 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>プロパティをチェックせずに、キャッシュの実装にデータを挿入する方が、より保守しやすい方法です。 キャッシュの実装では<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> 、プロパティをチェックする必要があります。関連する依存関係が既に変更されている場合は、挿入操作または設定操作を実行しないでください。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializationComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializationComplete();" />
      <MemberSignature Language="F#" Value="member this.InitializationComplete : unit -&gt; unit" Usage="changeMonitor.InitializationComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスのコンストラクターから呼び出され、初期化が完了したことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生クラスで初期化が完了する前に依存関係が変更された場合、派生クラスのコンストラクター <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>はメソッドを呼び出す必要があります。  
  
 メソッドが呼び出されると<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> 、プロパティは変更モニターによっ`true`て自動的にに設定されます。 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> その結果、変更モニターのコンストラクターが<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>メソッドを呼び出すと、基底クラスは<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>メソッドを自動的に呼び出します。 初期化が完了すると<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 、メソッドは、派生した変更監視インスタンスを自動的に破棄します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスのコンストラクターは、コンストラクターが戻る前<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />に基本メソッドを呼び出す必要があります。 派生クラスのコンストラクターは、が呼び出され<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />た後<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />にメソッドを呼び出すこと<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />ができます。このメソッドは、初期化が完了していない場合に例外をスローするためです。</para></block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの派生インスタンスが破棄されたことを示す値を取得します。</summary>
        <value>インスタンスが破棄された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基本<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> `true` メソッド<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>が派生クラスのメソッドを呼び出してインスタンスを破棄した後に、プロパティがに設定されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyOnChanged(System::Runtime::Caching::OnChangedCallback ^ onChangedCallback);" />
      <MemberSignature Language="F#" Value="member this.NotifyOnChanged : System.Runtime.Caching.OnChangedCallback -&gt; unit" Usage="changeMonitor.NotifyOnChanged onChangedCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback">依存関係が変更されたときに呼び出されるメソッドへの参照。</param>
        <summary>コールバックを登録し、依存関係が変化したときに <see cref="T:System.Runtime.Caching.ObjectCache" /> デリゲートを通して <see cref="T:System.Runtime.Caching.OnChangedCallback" /> インスタンスに通知するために、キャッシュの実装側によって呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 キャッシュの実装では、この方法を使用して、変更モニターに接続します。 1つまたは複数の変更モニターをキャッシュ項目に関連付ける場合は、 <xref:System.Runtime.Caching.CacheItemPolicy>設定された変更モニタープロパティを持つインスタンスをキャッシュ項目に渡します。 変更モニターをサポートするキャッシュの実装者は、 <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>プロパティを反復処理し、検出された各変更モニターに<xref:System.Runtime.Caching.OnChangedCallback>デリゲートを登録します。  
  
 デリゲートに<xref:System.Runtime.Caching.OnChangedCallback>は省略可能な状態パラメーターが含まれているため、具体的な変更モニターの実装では、省略可能な状態情報を渡すことができます。 キャッシュの実装者は、コールバックの一部としてカスタム変更モニターが渡す状態の種類に対する明示的な依存関係を取得できるかどうかを判断します。  
  
> [!NOTE]
>  基本キャッシュ機能拡張 API には、状態の種類に対する明示的な依存関係の要件はありません。  
  
 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドの実装は、メソッドが呼び出されたとき<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>にモニターの状態が既に変更されているかどうかを自動的に判断します。 プロパティが`true`の場合、メソッドは、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドを通じ<xref:System.Runtime.Caching.OnChangedCallback>て、登録されたイベントハンドラーを自動的に呼び出します。 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> これは、キャッシュの実装によって変更モニターが作成されたときに、キャッシュの実装によってモニターが取得され、それ自体が監視されていて、基になっている監視対象の状態が変化したときに発生する可能性があるためです。 状態が既に変更されている場合、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドに渡されるオブジェクトは`null`です。  
  
 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>メソッドを呼び出すことができるのは1回だけで、それ以降の呼び出しでは例外がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">コールバック メソッドが既に呼び出されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="onChangedCallback" /> が <see langword="null" /> です。</exception>
        <block subset="none" type="overrides"><para>1. 依存関係の変更<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />が通知されるようにするには、メソッドを呼び出す必要があります。 依存関係の変更が既に行われ<see cref="T:System.Runtime.Caching.OnChangedCallback" />ている場合は、 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />が呼び出されると、インスタンスが呼び出されます。 それ以外の<see cref="T:System.Runtime.Caching.OnChangedCallback" />場合、インスタンスは、 <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />メソッド<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />が呼び出されたとき、またはメソッドが呼び出されたときのいずれか早い方で、1回呼び出されます。 キャッシュ<see cref="T:System.Runtime.Caching.OnChangedCallback" />の実装によって提供されるインスタンスは、キャッシュエントリを削除する必要があります。キャッシュの呼び出し元によって要求された場合は、必要な変更または更新イベントを元のキャッシュの呼び出し元に戻します。  
  
2.  オブジェクトキャッシュの実装では、依存関係の変更に関連付けられているキャッシュエントリを削除する必要があります。</para></block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : obj -&gt; unit" Usage="changeMonitor.OnChanged state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">変更イベントのデータ。 この値は、<see langword="null" /> の場合もあります。</param>
        <summary>依存関係が変更されたときに、イベントを発生させるために派生クラスによって呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドは、依存関係の変更が発生したときに呼び出されます。 この<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>メソッドは、変更監視インスタンスが破棄された場合にも呼び出されますが、破棄は、コールバックがまだ呼び出されていない場合にのみ発生します。  
  
 メソッドが呼び出される<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>前にメソッドが呼び出された場合、メソッドの<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>呼び出しの状態データはキャッシュの実装によって保存されます。 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> また、メソッドが呼び出さ<xref:System.Runtime.Caching.OnChangedCallback> <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>れるとすぐに、メソッドへのコールバックが呼び出されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueId : string" Usage="System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスのインスタンスを表す値を取得します。</summary>
        <value>変更監視インスタンスの識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A>値は、通常、 <xref:System.Runtime.Caching.ChangeMonitor>インスタンスによって監視されているデータを一意に識別する、依存関係の名前を組み合わせた文字列データで構成されます。 <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A>プロパティの値は文字列です。 文字列の値は、 <xref:System.Runtime.Caching.ChangeMonitor>インスタンスの一意の ID を割り当てるために使用されます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>プロパティをオーバーライドすることにより、プロパティの文字列値のカスタム実装を定義して、一意の ID を割り当てることができます。</para></block>
        <block subset="none" type="overrides"><para>派生クラスでは、コンストラクターでプロパティの値を設定する必要があります。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
