<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IFormatProvider.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59c52ac56e9742cc73f06b705bf076675bb074c7a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c52ac56e9742cc73f06b705bf076675bb074c7a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IFormatProvider">
          <source>Provides a mechanism for retrieving an object to control formatting.</source>
          <target state="translated">書式設定を制御するオブジェクトを取得するためのメカニズムを定義します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> interface supplies an object that provides formatting information for formatting and parsing operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>インターフェイスは、書式設定および解析操作用の書式情報を提供するオブジェクトを提供します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>Formatting operations convert the value of a type to the string representation of that value.</source>
          <target state="translated">書式設定操作は、型の値をその値の文字列形式に変換します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>Typical formatting methods are the <ph id="ph1">`ToString`</ph> methods of a type, as well as <ph id="ph2">&lt;xref:System.String.Format%2A&gt;</ph>.</source>
          <target state="translated">一般的な書式指定メソッドは、 <ph id="ph1">`ToString`</ph> 、型のメソッドだけでなく<ph id="ph2">&lt;xref:System.String.Format%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>Parsing operations convert the string representation of a value to a type with that value.</source>
          <target state="translated">解析操作では、値の文字列表現をその値を持つ型に変換します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>Typical parsing methods are <ph id="ph1">`Parse`</ph> and <ph id="ph2">`TryParse`</ph>.</source>
          <target state="translated">解析の一般的な方法は<ph id="ph1">`Parse`</ph>と<ph id="ph2">`TryParse`</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> interface consists of a single method, <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>インターフェイス メソッドを 1 つから成る<ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source><ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> is a callback method: The parsing or formatting method calls it and passes it a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that represents the type of object that the formatting or parsing method expects will provide formatting information.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> コールバック メソッドは、: それを呼び出すし、それを渡します解析または書式指定メソッド、<ph id="ph2">&lt;xref:System.Type&gt;</ph>書式設定またはメソッドの解析が期待しているオブジェクトの型を表すオブジェクトでは、書式設定情報を提供します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method is responsible for returning an object of that type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph>メソッドは、その型のオブジェクトを返すことを行います。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source><ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementations are often used implicitly by formatting and parsing methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> 実装は、書式設定および解析メソッドによって暗黙的に使用されます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>For example, the <ph id="ph1">&lt;xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType&gt;</ph> method implicitly uses an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that represents the system's current culture.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType&gt;</ph>メソッドが暗黙的に使用、<ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>システムの現在のカルチャを表す実装します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source><ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementations can also be specified explicitly by methods that have a parameter of type <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>, such as <ph id="ph3">&lt;xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph4">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> 実装が型のパラメーターがメソッドによって明示的に指定するもできます<ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>など<ph id="ph3">&lt;xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>と<ph id="ph4">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>The .NET Framework includes the following three predefined <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementations to provide culture-specific information that is used in formatting or parsing numeric and date and time values:</source>
          <target state="translated">.NET Framework には、定義済みの次の 3 つが含まれています。<ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>書式設定操作または解析数値および日付と時刻の値で使用されるカルチャに固有の情報を提供する実装。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class, which provides information that is used to format numbers, such as the currency, thousands separator, and decimal separator symbols for a particular culture.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>通貨、数千などの数値を書式設定に使用される情報を提供するクラスは、区切り記号、および特定のカルチャのシンボルを小数点区切り文字。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>For information about the predefined format strings recognized by a <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object and used in numeric formatting operations, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">によって認識される定義済み書式指定文字列について、<ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>オブジェクトおよび数値の書式設定操作で使用されるを参照してください<bpt id="p1">[</bpt>標準の数値書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタム数値書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> class, which provides information that is used to format dates and times, such as the date and time separator symbols for a particular culture or the order and format of a date's year, month, and day components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph>クラスで、日付と時刻、特定のカルチャまたは順序と日付の年、月、日コンポーネントの形式の日付と時刻の区切り記号などの書式を設定するために使用される情報を提供します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>For information about the predefined format strings recognized by a <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object and used in numeric formatting operations, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
          <target state="translated">によって認識される定義済み書式指定文字列について、<ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph>オブジェクトおよび数値の書式設定操作で使用されるを参照してください<bpt id="p1">[</bpt>標準の日付と時刻の書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタムの日付と時刻の書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class, which represents a particular culture.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>を特定のカルチャを表すクラス。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>Its <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns a culture-specific <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> or <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object, depending on whether the <ph id="ph4">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object is used in a formatting or parsing operation that involves numbers or dates and times.</source>
          <target state="translated">その<ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph>メソッドはカルチャ固有の仕様を返します<ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>または<ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph>かどうかに応じて、オブジェクト、<ph id="ph4">&lt;xref:System.Globalization.CultureInfo&gt;</ph>オブジェクトは、書式設定操作または解析の数値または日付と時刻を含む操作で使用します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>The .NET Framework also supports custom formatting.</source>
          <target state="translated">.NET Framework では、カスタム書式指定もサポートしています。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>This typically involves the creation of a formatting class that implements both <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> and <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph>.</source>
          <target state="translated">通常、両方を実装するクラスを書式設定の作成<ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>と<ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>An instance of this class is then passed as a parameter to a method that performs a custom formatting operation, such as <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> The example provides an illustration of such a custom implementation that formats a number as a 12-digit account number.</source>
          <target state="translated">など、カスタムの書式設定操作を実行するメソッドにパラメーターとしてこのクラスのインスタンスが、渡される<ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>の例は、12 桁のアカウント番号として数値を書式設定、そのようなカスタム実装を示しています。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>The following example illustrates how an <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementation can change the representation of a date and time value.</source>
          <target state="translated">次の例を示して 方法、<ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>実装は、日付と時刻の値の形式を変更できます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>In this case, a single date is displayed by using <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objects that represent four different cultures.</source>
          <target state="translated">使用して 1 つの日付を表示するこの例では、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>を 4 つの異なるカルチャを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>The following example illustrates the use of a class that implements the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> interface and the <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method.</source>
          <target state="translated">次の例を実装するクラスの使用、<ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>インターフェイスおよび<ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>The <ph id="ph1">`AcctNumberFormat`</ph> class converts an <ph id="ph2">&lt;xref:System.Int64&gt;</ph> value that represents an account number to a formatted 12-digit account number.</source>
          <target state="translated"><ph id="ph1">`AcctNumberFormat`</ph>クラスの変換、 <ph id="ph2">&lt;xref:System.Int64&gt;</ph> 12 桁の数字の書式設定されたアカウント数のアカウント番号を表す値です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>Its <ph id="ph1">`GetFormat`</ph> method returns a reference to the current <ph id="ph2">`AcctNumberFormat`</ph> instance if the <ph id="ph3">`formatType`</ph> parameter refers to a class that implements <ph id="ph4">&lt;xref:System.ICustomFormatter&gt;</ph>; otherwise, <ph id="ph5">`GetFormat`</ph> returns <ph id="ph6">`null`</ph>.</source>
          <target state="translated">その<ph id="ph1">`GetFormat`</ph>メソッドは、現在の参照を返します<ph id="ph2">`AcctNumberFormat`</ph>インスタンスの場合、<ph id="ph3">`formatType`</ph>パラメーターを実装するクラスを指します<ph id="ph4">&lt;xref:System.ICustomFormatter&gt;</ph>、それ以外の<ph id="ph5">`GetFormat`</ph>を返します<ph id="ph6">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>The class that implements <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> can then be used in a call to a formatting and parsing operation.</source>
          <target state="translated">実装するクラス<ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>書式設定および解析操作の呼び出しで使用できます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IFormatProvider">
          <source>For example, the following code calls the <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> method to generate a string that contains a formatted 12-digit account number.</source>
          <target state="translated">たとえば、次のコード呼び出し、 <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> 12 桁の数字の書式設定されたアカウントの数を表す文字列を生成する方法です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>An object that specifies the type of format object to return.</source>
          <target state="translated">返す書式オブジェクトの型を指定するオブジェクト。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>Returns an object that provides formatting services for the specified type.</source>
          <target state="translated">指定した型の書式指定サービスを提供するオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>An instance of the object specified by <ph id="ph1">&lt;paramref name="formatType" /&gt;</ph>, if the <ph id="ph2">&lt;see cref="T:System.IFormatProvider" /&gt;</ph> implementation can supply that type of object; otherwise, <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.IFormatProvider" /&gt;</ph> の実装が <ph id="ph1">&lt;paramref name="formatType" /&gt;</ph> で指定された型のオブジェクトを提供できる場合は、そのオブジェクトのインスタンス。それ以外の場合は <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source><ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> is a callback method that formatting and parsing methods invoke to retrieve information about the format of the input string in parsing operations or the format of the output string in formatting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> 書式設定および解析メソッドを呼び出す解析操作または書式設定操作で、出力文字列の形式で入力文字列の書式設定に関する情報を取得するコールバック メソッドです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>In the <ph id="ph1">`formatType`</ph> parameter, the formatting or parsing method passes the type of object it requires to perform its operation.</source>
          <target state="translated"><ph id="ph1">`formatType`</ph>パラメーターで、書式設定または解析メソッドは、その操作の実行に必要なオブジェクトの型を渡します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>If the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementation can supply this formatting or parsing object, it returns that object.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>実装を指定できますこの書式設定またはオブジェクトを解析するには、そのオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>If not, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">返します、場合<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>For example, in the call to the <ph id="ph1">&lt;xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method, the method argument is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> object that provides information about how the string representation of the current integer instance might be formatted.</source>
          <target state="translated">呼び出しでなど、<ph id="ph1">&lt;xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>メソッド、メソッドの引数は、<ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>整数の現在のインスタンスの文字列形式や書式の設定方法に関する情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>When the runtime executes the method, it calls the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> object's <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method and passes it a <ph id="ph3">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> type.</source>
          <target state="translated">呼び出し、ランタイムは、メソッドを実行するとき、<ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>オブジェクトの<ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph>メソッド渡します、<ph id="ph3">&lt;xref:System.Type&gt;</ph>を表すオブジェクト、<ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>型です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>If the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> object can supply a <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object, it returns that object.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>オブジェクトを指定できます、<ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>オブジェクト、そのオブジェクトが返されます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>If it cannot supply an object of that type, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">返すかどうかは、その型のオブジェクトを提供できない、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>You can implement the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> interface and the <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method in classes that provide custom formatting or parsing services.</source>
          <target state="translated">実装することができます、<ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>インターフェイスおよび<ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph>カスタムの書式設定操作またはサービスの解析を提供するクラスのメソッドです。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementation is then passed as an argument to any overload of a parsing or formatting method that has a parameter of type <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>, such as <ph id="ph3">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>, or <ph id="ph5">&lt;xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>実装は、引数として、解析または書式指定される型のパラメーターを持つメソッドのオーバー ロードを<ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>など<ph id="ph3">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>、 <ph id="ph4">&lt;xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>、または<ph id="ph5">&lt;xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>The following example illustrates the use of a class that implements the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> interface and the <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method.</source>
          <target state="translated">次の例を実装するクラスの使用、<ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph>インターフェイスおよび<ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>The <ph id="ph1">`AcctNumberFormat`</ph> class converts an <ph id="ph2">&lt;xref:System.Int64&gt;</ph> value that represents an account number to a formatted 12-digit account number.</source>
          <target state="translated"><ph id="ph1">`AcctNumberFormat`</ph>クラスの変換、 <ph id="ph2">&lt;xref:System.Int64&gt;</ph> 12 桁の数字の書式設定されたアカウント数のアカウント番号を表す値です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>Its <ph id="ph1">`GetFormat`</ph> method returns a reference to itself if the <ph id="ph2">`formatType`</ph> parameter refers to a class that implements <ph id="ph3">&lt;xref:System.ICustomFormatter&gt;</ph>; otherwise, <ph id="ph4">`GetFormat`</ph> returns <ph id="ph5">`null`</ph>.</source>
          <target state="translated">その<ph id="ph1">`GetFormat`</ph>場合、メソッドはそれ自体への参照を返します、<ph id="ph2">`formatType`</ph>パラメーターを実装するクラスを表します<ph id="ph3">&lt;xref:System.ICustomFormatter&gt;</ph>、それ以外の<ph id="ph4">`GetFormat`</ph>返します<ph id="ph5">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>An instance of the <ph id="ph1">`AcctNumberFormat`</ph> class can then be passed as an argument to a method that provides formatting or parsing services.</source>
          <target state="translated">インスタンス、<ph id="ph1">`AcctNumberFormat`</ph>を書式設定操作または解析サービスを提供するメソッドをクラスが引数として渡されるしことができます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IFormatProvider.GetFormat(System.Type)">
          <source>For example, the following code passes an <ph id="ph1">`AcctNumberFormat`</ph> class to the <ph id="ph2">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> method to generate a formatted 12-digit account number.</source>
          <target state="translated">たとえば、次のコード パス、<ph id="ph1">`AcctNumberFormat`</ph>クラスを<ph id="ph2">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>12 桁の数字の書式設定されたアカウント番号を生成する方法です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>