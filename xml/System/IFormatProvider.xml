<Type Name="IFormatProvider" FullName="System.IFormatProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5a4dff04b5617e515e087bc87188865f65b869df" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48594510" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.IFormatProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormatProvider" />
  <TypeSignature Language="F#" Value="type IFormatProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>書式設定を制御するオブジェクトを取得するためのメカニズムを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider>インターフェイスは、書式設定して、解析操作の書式情報を提供するオブジェクトを提供します。 書式設定操作では、型の値を値の文字列形式に変換します。 一般的な書式指定メソッドは、 `ToString` 、型のメソッドだけでなく<xref:System.String.Format%2A>します。 解析操作では、値の文字列表現をその値を持つ型に変換します。 一般的な解析メソッドは`Parse`と`TryParse`します。  
  
 <xref:System.IFormatProvider>インターフェイスは、1 つのメソッドで構成されます<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>します。 <xref:System.IFormatProvider.GetFormat%2A> コールバック メソッドです。 解析または書式指定メソッド呼び出しを渡します、 <xref:System.Type> 、書式設定またはメソッドの解析が必要とするオブジェクトの型を表すオブジェクトを書式設定の情報が提供されます。 <xref:System.IFormatProvider.GetFormat%2A>メソッドがその型のオブジェクトが返されます。  
  
 <xref:System.IFormatProvider> 書式設定と解析メソッドで実装が暗黙的に使用されます。 たとえば、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>メソッドは暗黙的に使用、<xref:System.IFormatProvider>システムの現在のカルチャを表す実装します。 <xref:System.IFormatProvider> 実装が型のパラメーターがメソッドによって明示的に指定することもできます<xref:System.IFormatProvider>など<xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>と<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>します。  
  
 .NET Framework には、定義済みの次の 3 つが含まれています。<xref:System.IFormatProvider>書式設定または解析の数値および日付と時刻の値で使用されるカルチャ固有の情報を提供する実装。  
  
-   <xref:System.Globalization.NumberFormatInfo>通貨、数千などの数値の書式設定に使用される情報を提供するクラスは、区切り記号、および特定のカルチャの 10 進区切り記号。 によって認識される定義済み書式指定文字列については、<xref:System.Globalization.NumberFormatInfo>オブジェクトし、数値の書式設定操作で使用されるを参照してください[Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   <xref:System.Globalization.DateTimeFormatInfo>クラスで、日付と時刻、特定のカルチャまたは順序と日付の年、月、およびコンポーネントの 1 日の形式の日付と時刻の区切り記号などの書式を設定するために使用する情報を提供します。 によって認識される定義済み書式指定文字列については、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトし、数値の書式設定操作で使用されるを参照してください[Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   <xref:System.Globalization.CultureInfo>を特定のカルチャを表すクラス。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドは、特定のカルチャを返します<xref:System.Globalization.NumberFormatInfo>または<xref:System.Globalization.DateTimeFormatInfo>かどうかに応じて、オブジェクト、<xref:System.Globalization.CultureInfo>を書式設定または解析操作で数値または日付および時刻を含むオブジェクトを使用します。  
  
 .NET Framework では、カスタム書式設定もサポートしています。 通常、両方を実装するクラスを書式設定の作成<xref:System.IFormatProvider>と<xref:System.ICustomFormatter>します。 など、カスタムの書式設定操作を実行するメソッドにパラメーターとしてこのクラスのインスタンスが、渡される<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>12 桁のアカウント番号としての数値の書式設定、このようなカスタム実装を示しています。  
  
   
  
## Examples  
 次の例を示して 方法、<xref:System.IFormatProvider>実装は、日付と時刻の値の表現を変更できます。 使用して 1 つの日付を表示するこの例では、 <xref:System.Globalization.CultureInfo> 4 つの異なるカルチャを表すオブジェクト。  
  
 [!code-csharp[System.IFormatProvider.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/provider2.cs#3)]
 [!code-vb[System.IFormatProvider.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/provider2.vb#3)]  
  
 次の例では、実装するクラスの使用、<xref:System.IFormatProvider>インターフェイスと<xref:System.IFormatProvider.GetFormat%2A>メソッド。 `AcctNumberFormat`クラスに変換する<xref:System.Int64>12 桁の書式設定されたアカウント番号への勘定科目番号を表す値。 その`GetFormat`メソッドは、現在への参照を返します`AcctNumberFormat`インスタンスの場合、`formatType`パラメーターを実装するクラスを指します<xref:System.ICustomFormatter>、それ以外の`GetFormat`返します`null`。  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 実装するクラス<xref:System.IFormatProvider>し、書式設定および解析操作の呼び出しで使用できます。 たとえば、次のコードは、 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 12 桁の書式設定されたアカウント番号を含む文字列を生成します。  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ICustomFormatter" />
    <altmember cref="T:System.IFormattable" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
    <related type="Article" href="~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md">方法 : カスタム数値書式プロバイダーを定義して使用する</related>
  </Docs>
  <Members>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormatProvider.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj" Usage="iFormatProvider.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">返す書式オブジェクトの型を指定するオブジェクト。</param>
        <summary>指定した型の書式指定サービスを提供するオブジェクトを返します。</summary>
        <returns>
          <see cref="T:System.IFormatProvider" /> の実装が <paramref name="formatType" /> で指定された型のオブジェクトを提供できる場合は、そのオブジェクトのインスタンス。それ以外の場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider.GetFormat%2A> 書式設定と解析メソッドを呼び出す解析操作または書式設定操作で、出力文字列の形式で入力文字列の形式に関する情報を取得するコールバック メソッドです。 `formatType`パラメーターを書式設定または解析メソッドは、その操作を実行するために必要なオブジェクトの型を渡します。 場合、<xref:System.IFormatProvider>実装できる書式指定をこのまたはオブジェクトを解析するには、そのオブジェクトを返します。 返されたそうでない場合は`null`します。  
  
 呼び出しなどで、<xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>メソッド、メソッドの引数は、<xref:System.IFormatProvider>整数の現在のインスタンスの文字列形式の書式に関する情報を提供するオブジェクト。 ランタイムの実行メソッドを呼び出し、<xref:System.IFormatProvider>オブジェクトの<xref:System.IFormatProvider.GetFormat%2A>メソッドを渡します、<xref:System.Type>を表すオブジェクトを<xref:System.Globalization.NumberFormatInfo>型。 場合、<xref:System.IFormatProvider>オブジェクトを指定できます、<xref:System.Globalization.NumberFormatInfo>オブジェクト、そのオブジェクトが返されます。 返すかどうかは、その型のオブジェクトを提供できない、`null`します。  
  
 実装することができます、<xref:System.IFormatProvider>インターフェイスと<xref:System.IFormatProvider.GetFormat%2A>メソッドをカスタム書式設定または解析サービスを提供するクラス。 <xref:System.IFormatProvider>実装が、解析または書式指定を型のパラメーターを持つメソッドのオーバー ロードを引数として渡すし<xref:System.IFormatProvider>など<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>、 <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>、または<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 次の例では、実装するクラスの使用、<xref:System.IFormatProvider>インターフェイスと<xref:System.IFormatProvider.GetFormat%2A>メソッド。 `AcctNumberFormat`クラスに変換する<xref:System.Int64>12 桁の書式設定されたアカウント番号への勘定科目番号を表す値。 その`GetFormat`場合、メソッドがそれ自体への参照を返します、`formatType`パラメーターを実装するクラスを指します<xref:System.ICustomFormatter>、それ以外の`GetFormat`返します`null`します。  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 インスタンス、`AcctNumberFormat`書式設定または解析サービスを提供するメソッドをクラスが、引数として渡すこと、ことができます。 たとえば、次のコード パスを`AcctNumberFormat`クラスを<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>12 桁の書式設定されたアカウント番号を生成するメソッド。  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>